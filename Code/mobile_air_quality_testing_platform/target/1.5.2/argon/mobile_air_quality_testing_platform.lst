
c:/Users/mauri/Documents/IoTc2/Capstone-Deep-Dive-Coding/Code/mobile_air_quality_testing_platform/target/1.5.2/argon/mobile_air_quality_testing_platform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003564  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7580  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003de68  000d7584  0001de68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000920  2003ded0  2003ded0  0002ded0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d75ec  000d75ec  000275ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7614  000d7614  00027614  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0018ea72  00000000  00000000  00027618  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001ebcb  00000000  00000000  001b608a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002836c  00000000  00000000  001d4c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b38  00000000  00000000  001fcfc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005268  00000000  00000000  001ffaf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004d7b9  00000000  00000000  00204d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00053d68  00000000  00000000  0025251a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b274  00000000  00000000  002a6282  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e078  00000000  00000000  003b14f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f82e 	bl	d708e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f833 	bl	d70a4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003de68 	.word	0x2003de68
   d4048:	000d7584 	.word	0x000d7584
   d404c:	2003ded0 	.word	0x2003ded0
   d4050:	2003ded0 	.word	0x2003ded0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fa3d 	bl	d64d8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7578 	.word	0x000d7578
   d4080:	000d74f4 	.word	0x000d74f4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b882 	b.w	d418c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f941 	bl	d4310 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b9e3 	b.w	d645c <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 bfb9 	b.w	d600c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 bfb7 	b.w	d600c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40ae:	7c03      	ldrb	r3, [r0, #16]
   d40b0:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40b4:	4602      	mov	r2, r0
   d40b6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40ba:	b12b      	cbz	r3, d40c8 <_ZN4File9availableEv+0x1a>
   d40bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40be:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c0:	1a18      	subs	r0, r3, r0
   d40c2:	bf48      	it	mi
   d40c4:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40c8:	4770      	bx	lr

000d40ca <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40ca:	4770      	bx	lr

000d40cc <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40ce:	4602      	mov	r2, r0
   d40d0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40d2:	7913      	ldrb	r3, [r2, #4]
   d40d4:	6895      	ldr	r5, [r2, #8]
   d40d6:	b133      	cbz	r3, d40e6 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40d8:	b93d      	cbnz	r5, d40ea <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40da:	490c      	ldr	r1, [pc, #48]	; (d410c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40dc:	b004      	add	sp, #16
   d40de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40e2:	f002 b8f3 	b.w	d62cc <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40e6:	4b0a      	ldr	r3, [pc, #40]	; (d4110 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40e8:	e000      	b.n	d40ec <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40ea:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40ec:	7b16      	ldrb	r6, [r2, #12]
   d40ee:	4c0a      	ldr	r4, [pc, #40]	; (d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40f0:	490a      	ldr	r1, [pc, #40]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40f2:	7b52      	ldrb	r2, [r2, #13]
   d40f4:	9202      	str	r2, [sp, #8]
   d40f6:	2e01      	cmp	r6, #1
   d40f8:	bf08      	it	eq
   d40fa:	4621      	moveq	r1, r4
   d40fc:	9101      	str	r1, [sp, #4]
   d40fe:	9500      	str	r5, [sp, #0]
   d4100:	4a07      	ldr	r2, [pc, #28]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4102:	2100      	movs	r1, #0
   d4104:	f002 f91f 	bl	d6346 <_ZN5Print11printf_implEbPKcz>
  }
   d4108:	b004      	add	sp, #16
   d410a:	bd70      	pop	{r4, r5, r6, pc}
   d410c:	000d716d 	.word	0x000d716d
   d4110:	000d72ef 	.word	0x000d72ef
   d4114:	000d715c 	.word	0x000d715c
   d4118:	000d7165 	.word	0x000d7165
   d411c:	000d7169 	.word	0x000d7169
   d4120:	000d7183 	.word	0x000d7183

000d4124 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4124:	3010      	adds	r0, #16
   d4126:	f000 bef9 	b.w	d4f1c <_ZN7FatFile4syncEv>

000d412a <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d412a:	3010      	adds	r0, #16
   d412c:	f000 be0e 	b.w	d4d4c <_ZN7FatFile4peekEv>

000d4130 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4130:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4132:	2201      	movs	r2, #1
   d4134:	f10d 0107 	add.w	r1, sp, #7
   d4138:	3010      	adds	r0, #16
   d413a:	f000 fd54 	bl	d4be6 <_ZN7FatFile4readEPvj>
   d413e:	2801      	cmp	r0, #1
   d4140:	bf0c      	ite	eq
   d4142:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4146:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d414a:	b003      	add	sp, #12
   d414c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4150 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4150:	3010      	adds	r0, #16
   d4152:	f000 bf6f 	b.w	d5034 <_ZN7FatFile5writeEPKvj>

000d4156 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4156:	b507      	push	{r0, r1, r2, lr}
   d4158:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d415a:	2201      	movs	r2, #1
   d415c:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4160:	3010      	adds	r0, #16
   d4162:	4619      	mov	r1, r3
   d4164:	f000 ff66 	bl	d5034 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4168:	b003      	add	sp, #12
   d416a:	f85d fb04 	ldr.w	pc, [sp], #4

000d416e <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d416e:	b510      	push	{r4, lr}
   d4170:	2134      	movs	r1, #52	; 0x34
   d4172:	4604      	mov	r4, r0
   d4174:	f002 fe12 	bl	d6d9c <_ZdlPvj>
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d417c:	b510      	push	{r4, lr}
   d417e:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4180:	6800      	ldr	r0, [r0, #0]
   d4182:	b108      	cbz	r0, d4188 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4184:	f001 ff42 	bl	d600c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4188:	4620      	mov	r0, r4
   d418a:	bd10      	pop	{r4, pc}

000d418c <setup>:

int aqRead;

SYSTEM_MODE(SEMI_AUTOMATIC);
// setup() runs once, when the device is first turned on.
void setup() {
   d418c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d418e:	f002 faa3 	bl	d66d8 <_Z16_fetch_usbserialv>
   d4192:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4196:	f002 fa93 	bl	d66c0 <_ZN9USBSerial5beginEl>
  delay(100);
   d419a:	2064      	movs	r0, #100	; 0x64
   d419c:	f002 f920 	bl	d63e0 <delay>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41a0:	4c29      	ldr	r4, [pc, #164]	; (d4248 <setup+0xbc>)
  Aq.init();
   d41a2:	482a      	ldr	r0, [pc, #168]	; (d424c <setup+0xc0>)
   d41a4:	f001 fcb7 	bl	d5b16 <_ZN16AirQualitySensor4initEv>
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d41a8:	4b29      	ldr	r3, [pc, #164]	; (d4250 <setup+0xc4>)
   d41aa:	4a2a      	ldr	r2, [pc, #168]	; (d4254 <setup+0xc8>)
   d41ac:	9300      	str	r3, [sp, #0]
   d41ae:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d41b2:	2300      	movs	r3, #0
   d41b4:	f88d 3004 	strb.w	r3, [sp, #4]
   d41b8:	9202      	str	r2, [sp, #8]
   d41ba:	2501      	movs	r5, #1
   d41bc:	f88d 300d 	strb.w	r3, [sp, #13]
   d41c0:	220e      	movs	r2, #14
   d41c2:	466b      	mov	r3, sp
   d41c4:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d41c8:	4630      	mov	r0, r6
   d41ca:	f88d 500c 	strb.w	r5, [sp, #12]
   d41ce:	f001 fa79 	bl	d56c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d41d2:	b390      	cbz	r0, d423a <setup+0xae>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d41d4:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d41d8:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d41da:	f000 fed5 	bl	d4f88 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d41de:	4629      	mov	r1, r5
   d41e0:	4620      	mov	r0, r4
   d41e2:	f001 f918 	bl	d5416 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d41e6:	4601      	mov	r1, r0
   d41e8:	b140      	cbz	r0, d41fc <setup+0x70>
   d41ea:	4c17      	ldr	r4, [pc, #92]	; (d4248 <setup+0xbc>)
   d41ec:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d41f0:	4621      	mov	r1, r4
   d41f2:	4628      	mov	r0, r5
   d41f4:	f000 fcdf 	bl	d4bb6 <_ZN7FatFile8openRootEP9FatVolume>
   d41f8:	b1f8      	cbz	r0, d423a <setup+0xae>
   d41fa:	e005      	b.n	d4208 <setup+0x7c>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d41fc:	4620      	mov	r0, r4
   d41fe:	f001 f90a 	bl	d5416 <_ZN9FatVolume4initEh>
   d4202:	2800      	cmp	r0, #0
   d4204:	d1f1      	bne.n	d41ea <setup+0x5e>
   d4206:	e018      	b.n	d423a <setup+0xae>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4208:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d420c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4210:	d013      	beq.n	d423a <setup+0xae>
      return false;
    }
    m_cwd = dir;
   d4212:	4b11      	ldr	r3, [pc, #68]	; (d4258 <setup+0xcc>)
   d4214:	601d      	str	r5, [r3, #0]
  if(!sd.begin(SD_CS_PIN)){
    Serial.println(" sd init failed");
    return;
  }
  Serial.println("sd init done");
   d4216:	f002 fa5f 	bl	d66d8 <_Z16_fetch_usbserialv>
   d421a:	4910      	ldr	r1, [pc, #64]	; (d425c <setup+0xd0>)
   d421c:	f002 f869 	bl	d62f2 <_ZN5Print7printlnEPKc>
  pinMode(A1, OUTPUT);
   d4220:	2101      	movs	r1, #1
   d4222:	2012      	movs	r0, #18
   d4224:	f002 fd18 	bl	d6c58 <pinMode>
  pinMode(A3, OUTPUT);
   d4228:	2101      	movs	r1, #1
   d422a:	2010      	movs	r0, #16
   d422c:	f002 fd14 	bl	d6c58 <pinMode>
  pinMode(A4, INPUT);
   d4230:	2100      	movs	r1, #0
   d4232:	200f      	movs	r0, #15
   d4234:	f002 fd10 	bl	d6c58 <pinMode>
   d4238:	e004      	b.n	d4244 <setup+0xb8>
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
  delay(100);
  Aq.init();
  if(!sd.begin(SD_CS_PIN)){
    Serial.println(" sd init failed");
   d423a:	f002 fa4d 	bl	d66d8 <_Z16_fetch_usbserialv>
   d423e:	4908      	ldr	r1, [pc, #32]	; (d4260 <setup+0xd4>)
   d4240:	f002 f857 	bl	d62f2 <_ZN5Print7printlnEPKc>
  }
  Serial.println("sd init done");
  pinMode(A1, OUTPUT);
  pinMode(A3, OUTPUT);
  pinMode(A4, INPUT);
}
   d4244:	b004      	add	sp, #16
   d4246:	bd70      	pop	{r4, r5, r6, pc}
   d4248:	2003df44 	.word	0x2003df44
   d424c:	2003df14 	.word	0x2003df14
   d4250:	000d7130 	.word	0x000d7130
   d4254:	02faf080 	.word	0x02faf080
   d4258:	2003e3cc 	.word	0x2003e3cc
   d425c:	000d71a1 	.word	0x000d71a1
   d4260:	000d71ae 	.word	0x000d71ae

000d4264 <_Z10airQualityv>:
  digitalWrite(A3, LOW);
  //Serial.println("off");
} 
}

void airQuality(){
   d4264:	b510      	push	{r4, lr}
  quality = Aq.slope();
   d4266:	4812      	ldr	r0, [pc, #72]	; (d42b0 <_Z10airQualityv+0x4c>)
   d4268:	4c12      	ldr	r4, [pc, #72]	; (d42b4 <_Z10airQualityv+0x50>)
   d426a:	f001 fc83 	bl	d5b74 <_ZN16AirQualitySensor5slopeEv>
   d426e:	6020      	str	r0, [r4, #0]
  AQvalue = Aq.getValue();
   d4270:	480f      	ldr	r0, [pc, #60]	; (d42b0 <_Z10airQualityv+0x4c>)
   d4272:	f001 fc65 	bl	d5b40 <_ZN16AirQualitySensor8getValueEv>
   d4276:	4b10      	ldr	r3, [pc, #64]	; (d42b8 <_Z10airQualityv+0x54>)

  if(quality == AirQualitySensor::FORCE_SIGNAL){
   d4278:	4a10      	ldr	r2, [pc, #64]	; (d42bc <_Z10airQualityv+0x58>)
} 
}

void airQuality(){
  quality = Aq.slope();
  AQvalue = Aq.getValue();
   d427a:	6018      	str	r0, [r3, #0]

  if(quality == AirQualitySensor::FORCE_SIGNAL){
   d427c:	6812      	ldr	r2, [r2, #0]
   d427e:	6823      	ldr	r3, [r4, #0]
   d4280:	4293      	cmp	r3, r2
   d4282:	d101      	bne.n	d4288 <_Z10airQualityv+0x24>
    aqRead = 4;
   d4284:	2204      	movs	r2, #4
   d4286:	e010      	b.n	d42aa <_Z10airQualityv+0x46>
  }
  else if(quality == AirQualitySensor::HIGH_POLLUTION){
   d4288:	4a0d      	ldr	r2, [pc, #52]	; (d42c0 <_Z10airQualityv+0x5c>)
   d428a:	6812      	ldr	r2, [r2, #0]
   d428c:	4293      	cmp	r3, r2
   d428e:	d101      	bne.n	d4294 <_Z10airQualityv+0x30>
    aqRead = 3;
   d4290:	2203      	movs	r2, #3
   d4292:	e00a      	b.n	d42aa <_Z10airQualityv+0x46>
  }
  else if(quality == AirQualitySensor::LOW_POLLUTION){
   d4294:	4a0b      	ldr	r2, [pc, #44]	; (d42c4 <_Z10airQualityv+0x60>)
   d4296:	6812      	ldr	r2, [r2, #0]
   d4298:	4293      	cmp	r3, r2
   d429a:	d101      	bne.n	d42a0 <_Z10airQualityv+0x3c>
    // write to sd low pollution
    aqRead = 2;
   d429c:	2202      	movs	r2, #2
   d429e:	e004      	b.n	d42aa <_Z10airQualityv+0x46>
  }
  else if(quality == AirQualitySensor::FRESH_AIR){
   d42a0:	4a09      	ldr	r2, [pc, #36]	; (d42c8 <_Z10airQualityv+0x64>)
   d42a2:	6812      	ldr	r2, [r2, #0]
   d42a4:	4293      	cmp	r3, r2
   d42a6:	d102      	bne.n	d42ae <_Z10airQualityv+0x4a>
    // write fresh air to sd 
    aqRead = 1;
   d42a8:	2201      	movs	r2, #1
   d42aa:	4b08      	ldr	r3, [pc, #32]	; (d42cc <_Z10airQualityv+0x68>)
   d42ac:	601a      	str	r2, [r3, #0]
   d42ae:	bd10      	pop	{r4, pc}
   d42b0:	2003df14 	.word	0x2003df14
   d42b4:	2003df34 	.word	0x2003df34
   d42b8:	2003e3c8 	.word	0x2003e3c8
   d42bc:	000d7208 	.word	0x000d7208
   d42c0:	000d7204 	.word	0x000d7204
   d42c4:	000d71fc 	.word	0x000d71fc
   d42c8:	000d7200 	.word	0x000d7200
   d42cc:	2003df30 	.word	0x2003df30

000d42d0 <_Z5blinkv>:
  }

}

void blink(){
   d42d0:	b508      	push	{r3, lr}
  digitalWrite(A3, LOW);
   d42d2:	2100      	movs	r1, #0
   d42d4:	2010      	movs	r0, #16
   d42d6:	f002 fcd0 	bl	d6c7a <digitalWrite>
  delay(50);
   d42da:	2032      	movs	r0, #50	; 0x32
   d42dc:	f002 f880 	bl	d63e0 <delay>
  digitalWrite(A3, HIGH);
   d42e0:	2101      	movs	r1, #1
   d42e2:	2010      	movs	r0, #16
   d42e4:	f002 fcc9 	bl	d6c7a <digitalWrite>
  delay(50);
   d42e8:	2032      	movs	r0, #50	; 0x32
   d42ea:	f002 f879 	bl	d63e0 <delay>
  digitalWrite(A3, LOW);
   d42ee:	2100      	movs	r1, #0
   d42f0:	2010      	movs	r0, #16
   d42f2:	f002 fcc2 	bl	d6c7a <digitalWrite>
  delay(50);
   d42f6:	2032      	movs	r0, #50	; 0x32
   d42f8:	f002 f872 	bl	d63e0 <delay>
  digitalWrite(A3, HIGH);
   d42fc:	2010      	movs	r0, #16
   d42fe:	2101      	movs	r1, #1
   d4300:	f002 fcbb 	bl	d6c7a <digitalWrite>
  delay(50);
   d4304:	2032      	movs	r0, #50	; 0x32
   d4306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(A3, HIGH);
  delay(50);
  digitalWrite(A3, LOW);
  delay(50);
  digitalWrite(A3, HIGH);
  delay(50);
   d430a:	f002 b869 	b.w	d63e0 <delay>
	...

000d4310 <loop>:
  pinMode(A3, OUTPUT);
  pinMode(A4, INPUT);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4310:	b5f0      	push	{r4, r5, r6, r7, lr}
  // The core of your code will likely live here.
int switchValue = digitalRead(A4);
   d4312:	200f      	movs	r0, #15
  pinMode(A3, OUTPUT);
  pinMode(A4, INPUT);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4314:	b08f      	sub	sp, #60	; 0x3c
  // The core of your code will likely live here.
int switchValue = digitalRead(A4);
   d4316:	f002 fcc9 	bl	d6cac <digitalRead>
if(switchValue == 1){
   d431a:	2801      	cmp	r0, #1
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
int switchValue = digitalRead(A4);
   d431c:	4604      	mov	r4, r0
if(switchValue == 1){
   d431e:	d149      	bne.n	d43b4 <loop+0xa4>
  digitalWrite(A3, HIGH);
   d4320:	4601      	mov	r1, r0
   d4322:	2010      	movs	r0, #16
   d4324:	f002 fca9 	bl	d6c7a <digitalWrite>
  digitalWrite(A1,LOW);
   d4328:	2100      	movs	r1, #0
   d432a:	2012      	movs	r0, #18
   d432c:	f002 fca5 	bl	d6c7a <digitalWrite>
  airQuality();
   d4330:	f7ff ff98 	bl	d4264 <_Z10airQualityv>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4338:	9303      	str	r3, [sp, #12]
 public:
  File() {}
   d433a:	4b24      	ldr	r3, [pc, #144]	; (d43cc <loop+0xbc>)
   d433c:	9301      	str	r3, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d433e:	2700      	movs	r7, #0
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d4340:	f244 2302 	movw	r3, #16898	; 0x4202
   d4344:	4a22      	ldr	r2, [pc, #136]	; (d43d0 <loop+0xc0>)
   d4346:	4923      	ldr	r1, [pc, #140]	; (d43d4 <loop+0xc4>)
   d4348:	f88d 7014 	strb.w	r7, [sp, #20]
   d434c:	a805      	add	r0, sp, #20
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d434e:	ac05      	add	r4, sp, #20
   d4350:	f88d 7015 	strb.w	r7, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4354:	9702      	str	r7, [sp, #8]
   d4356:	f000 fe1e 	bl	d4f96 <_ZN7FatFile4openEPS_PKci>
   d435a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d435c:	4e1e      	ldr	r6, [pc, #120]	; (d43d8 <loop+0xc8>)
   d435e:	f106 0510 	add.w	r5, r6, #16
   d4362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4368:	6823      	ldr	r3, [r4, #0]
   d436a:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d436c:	9b02      	ldr	r3, [sp, #8]
   d436e:	6073      	str	r3, [r6, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d4370:	9b03      	ldr	r3, [sp, #12]
   d4372:	60b3      	str	r3, [r6, #8]
   d4374:	9b04      	ldr	r3, [sp, #16]
   d4376:	60f3      	str	r3, [r6, #12]
  file = sd.open("aqLog.txt", FILE_WRITE);
    if(file){
   d4378:	7c33      	ldrb	r3, [r6, #16]
   d437a:	b323      	cbz	r3, d43c6 <loop+0xb6>
      Serial.println("file opened!");
   d437c:	f002 f9ac 	bl	d66d8 <_Z16_fetch_usbserialv>
   d4380:	4916      	ldr	r1, [pc, #88]	; (d43dc <loop+0xcc>)
   d4382:	f001 ffb6 	bl	d62f2 <_ZN5Print7printlnEPKc>
      file.printf("air quality value: %i \n", aqRead);
   d4386:	4b16      	ldr	r3, [pc, #88]	; (d43e0 <loop+0xd0>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4388:	4a16      	ldr	r2, [pc, #88]	; (d43e4 <loop+0xd4>)
   d438a:	681b      	ldr	r3, [r3, #0]
   d438c:	4639      	mov	r1, r7
   d438e:	4630      	mov	r0, r6
   d4390:	f001 ffd9 	bl	d6346 <_ZN5Print11printf_implEbPKcz>
      Serial.println("printing...");
   d4394:	f002 f9a0 	bl	d66d8 <_Z16_fetch_usbserialv>
   d4398:	4913      	ldr	r1, [pc, #76]	; (d43e8 <loop+0xd8>)
   d439a:	f001 ffaa 	bl	d62f2 <_ZN5Print7printlnEPKc>
      delay(8000);
   d439e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
   d43a2:	f002 f81d 	bl	d63e0 <delay>
      file.close();
   d43a6:	f1a5 0020 	sub.w	r0, r5, #32
   d43aa:	f000 fded 	bl	d4f88 <_ZN7FatFile5closeEv>
      blink();
   d43ae:	f7ff ff8f 	bl	d42d0 <_Z5blinkv>
   d43b2:	e008      	b.n	d43c6 <loop+0xb6>
    }
}
else if(switchValue == 0){
   d43b4:	b938      	cbnz	r0, d43c6 <loop+0xb6>
  digitalWrite(A1, HIGH);
   d43b6:	2101      	movs	r1, #1
   d43b8:	2012      	movs	r0, #18
   d43ba:	f002 fc5e 	bl	d6c7a <digitalWrite>
  digitalWrite(A3, LOW);
   d43be:	4621      	mov	r1, r4
   d43c0:	2010      	movs	r0, #16
   d43c2:	f002 fc5a 	bl	d6c7a <digitalWrite>
  //Serial.println("off");
} 
}
   d43c6:	b00f      	add	sp, #60	; 0x3c
   d43c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43ca:	bf00      	nop
   d43cc:	000d713c 	.word	0x000d713c
   d43d0:	000d71be 	.word	0x000d71be
   d43d4:	2003e380 	.word	0x2003e380
   d43d8:	2003dee0 	.word	0x2003dee0
   d43dc:	000d71c8 	.word	0x000d71c8
   d43e0:	2003df30 	.word	0x2003df30
   d43e4:	000d71d5 	.word	0x000d71d5
   d43e8:	000d71ed 	.word	0x000d71ed

000d43ec <_GLOBAL__sub_I_logTime>:
  delay(50);
  digitalWrite(A3, LOW);
  delay(50);
  digitalWrite(A3, HIGH);
  delay(50);
   d43ec:	b570      	push	{r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43ee:	f001 fc01 	bl	d5bf4 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d43f2:	4b28      	ldr	r3, [pc, #160]	; (d4494 <_GLOBAL__sub_I_logTime+0xa8>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d43f4:	4e28      	ldr	r6, [pc, #160]	; (d4498 <_GLOBAL__sub_I_logTime+0xac>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d43f6:	2164      	movs	r1, #100	; 0x64
   d43f8:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d43fc:	4927      	ldr	r1, [pc, #156]	; (d449c <_GLOBAL__sub_I_logTime+0xb0>)
   d43fe:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d4402:	2101      	movs	r1, #1
   d4404:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d4408:	6831      	ldr	r1, [r6, #0]
   d440a:	2200      	movs	r2, #0
   d440c:	f011 0501 	ands.w	r5, r1, #1
   d4410:	71da      	strb	r2, [r3, #7]
   d4412:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4416:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d441a:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d441e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4422:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4426:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d442a:	461c      	mov	r4, r3
   d442c:	d10a      	bne.n	d4444 <_GLOBAL__sub_I_logTime+0x58>
   d442e:	4630      	mov	r0, r6
   d4430:	f7ff fe35 	bl	d409e <__cxa_guard_acquire>
   d4434:	b130      	cbz	r0, d4444 <_GLOBAL__sub_I_logTime+0x58>
   d4436:	4629      	mov	r1, r5
   d4438:	4819      	ldr	r0, [pc, #100]	; (d44a0 <_GLOBAL__sub_I_logTime+0xb4>)
   d443a:	f001 fe3b 	bl	d60b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d443e:	4630      	mov	r0, r6
   d4440:	f7ff fe32 	bl	d40a8 <__cxa_guard_release>
   d4444:	4817      	ldr	r0, [pc, #92]	; (d44a4 <_GLOBAL__sub_I_logTime+0xb8>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4446:	4b16      	ldr	r3, [pc, #88]	; (d44a0 <_GLOBAL__sub_I_logTime+0xb4>)
   d4448:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d444c:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d444e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include <SPI.h>
  /*  for sd card   */
unsigned long logTime;
  #define SD_CS_PIN SS
SdFat sd;
File file;
   d4452:	4a15      	ldr	r2, [pc, #84]	; (d44a8 <_GLOBAL__sub_I_logTime+0xbc>)
   d4454:	7404      	strb	r4, [r0, #16]
   d4456:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4458:	6044      	str	r4, [r0, #4]
   d445a:	6083      	str	r3, [r0, #8]
   d445c:	4913      	ldr	r1, [pc, #76]	; (d44ac <_GLOBAL__sub_I_logTime+0xc0>)
 public:
  File() {}
   d445e:	4b14      	ldr	r3, [pc, #80]	; (d44b0 <_GLOBAL__sub_I_logTime+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4460:	4d14      	ldr	r5, [pc, #80]	; (d44b4 <_GLOBAL__sub_I_logTime+0xc8>)
   d4462:	6003      	str	r3, [r0, #0]
   d4464:	f002 fc8c 	bl	d6d80 <__aeabi_atexit>
  #define FILE_BASE_NAME "aqdata"
char fileName[13] = FILE_BASE_NAME "00.csv";
const uint8_t BASE_NAME_SIZE = sizeof(FILE_BASE_NAME) -1;
  #define error(msg) sd.errorHalt(msg)
  /* for air quality  */
AirQualitySensor Aq(A2); // put sensor pin in here
   d4468:	2111      	movs	r1, #17
   d446a:	4813      	ldr	r0, [pc, #76]	; (d44b8 <_GLOBAL__sub_I_logTime+0xcc>)
   d446c:	f001 fb4e 	bl	d5b0c <_ZN16AirQualitySensorC1Ei>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4470:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4474:	602c      	str	r4, [r5, #0]
   d4476:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4478:	71ac      	strb	r4, [r5, #6]
   d447a:	812c      	strh	r4, [r5, #8]
   d447c:	816b      	strh	r3, [r5, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d447e:	2002      	movs	r0, #2
   d4480:	f001 fd38 	bl	d5ef4 <set_system_mode>
int quality;
int AQvalue;  

int aqRead;

SYSTEM_MODE(SEMI_AUTOMATIC);
   d4484:	4628      	mov	r0, r5
   d4486:	4a08      	ldr	r2, [pc, #32]	; (d44a8 <_GLOBAL__sub_I_logTime+0xbc>)
   d4488:	490c      	ldr	r1, [pc, #48]	; (d44bc <_GLOBAL__sub_I_logTime+0xd0>)
  delay(50);
  digitalWrite(A3, LOW);
  delay(50);
  digitalWrite(A3, HIGH);
  delay(50);
   d448a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
int quality;
int AQvalue;  

int aqRead;

SYSTEM_MODE(SEMI_AUTOMATIC);
   d448e:	f002 bc77 	b.w	d6d80 <__aeabi_atexit>
   d4492:	bf00      	nop
   d4494:	2003df44 	.word	0x2003df44
   d4498:	2003ded4 	.word	0x2003ded4
   d449c:	000d7130 	.word	0x000d7130
   d44a0:	2003ded8 	.word	0x2003ded8
   d44a4:	2003dee0 	.word	0x2003dee0
   d44a8:	2003ded0 	.word	0x2003ded0
   d44ac:	000d40cb 	.word	0x000d40cb
   d44b0:	000d713c 	.word	0x000d713c
   d44b4:	2003df38 	.word	0x2003df38
   d44b8:	2003df14 	.word	0x2003df14
   d44bc:	000d417d 	.word	0x000d417d

000d44c0 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d44c0:	f001 bb98 	b.w	d5bf4 <HAL_Pin_Map>

000d44c4 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d44c4:	f001 bb96 	b.w	d5bf4 <HAL_Pin_Map>

000d44c8 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d44c8:	f001 bb94 	b.w	d5bf4 <HAL_Pin_Map>

000d44cc <_GLOBAL__sub_I__ZN7istream3getEv>:
   d44cc:	f001 bb92 	b.w	d5bf4 <HAL_Pin_Map>

000d44d0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d44d0:	b510      	push	{r4, lr}
   d44d2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d44d4:	3024      	adds	r0, #36	; 0x24
   d44d6:	f000 fe8f 	bl	d51f8 <_ZN8FatCache4syncEv>
   d44da:	b128      	cbz	r0, d44e8 <_ZN9FatVolume9cacheSyncEv+0x18>
   d44dc:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d44e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d44e4:	f000 be88 	b.w	d51f8 <_ZN8FatCache4syncEv>
  }
   d44e8:	bd10      	pop	{r4, pc}

000d44ea <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d44ea:	1e41      	subs	r1, r0, #1
   d44ec:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d44f0:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d44f2:	0843      	lsrs	r3, r0, #1
   d44f4:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d44f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d44fc:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4500:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4502:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4504:	d1f5      	bne.n	d44f2 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d4506:	4770      	bx	lr

000d4508 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d4508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d450c:	7803      	ldrb	r3, [r0, #0]
   d450e:	2b20      	cmp	r3, #32
   d4510:	f100 0401 	add.w	r4, r0, #1
   d4514:	d101      	bne.n	d451a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d4516:	4620      	mov	r0, r4
   d4518:	e7f8      	b.n	d450c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d451a:	4f70      	ldr	r7, [pc, #448]	; (d46dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d451c:	6088      	str	r0, [r1, #8]
   d451e:	4605      	mov	r5, r0
   d4520:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d4522:	462e      	mov	r6, r5
   d4524:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d4528:	b30b      	cbz	r3, d456e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d452a:	2b2f      	cmp	r3, #47	; 0x2f
   d452c:	d101      	bne.n	d4532 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d452e:	1903      	adds	r3, r0, r4
   d4530:	e017      	b.n	d4562 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4532:	2b5c      	cmp	r3, #92	; 0x5c
   d4534:	d102      	bne.n	d453c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d4536:	2000      	movs	r0, #0
   d4538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d453c:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d4540:	b2e4      	uxtb	r4, r4
   d4542:	2c1d      	cmp	r4, #29
   d4544:	d803      	bhi.n	d454e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d4546:	fa27 f404 	lsr.w	r4, r7, r4
   d454a:	07e4      	lsls	r4, r4, #31
   d454c:	d4f3      	bmi.n	d4536 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d454e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d4552:	2c3c      	cmp	r4, #60	; 0x3c
   d4554:	d0ef      	beq.n	d4536 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d4556:	3b20      	subs	r3, #32
   d4558:	2b5e      	cmp	r3, #94	; 0x5e
   d455a:	d9e1      	bls.n	d4520 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d455c:	e7eb      	b.n	d4536 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d455e:	2d2f      	cmp	r5, #47	; 0x2f
   d4560:	d105      	bne.n	d456e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4562:	461e      	mov	r6, r3
   d4564:	f813 5b01 	ldrb.w	r5, [r3], #1
   d4568:	2d20      	cmp	r5, #32
   d456a:	d1f8      	bne.n	d455e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d456c:	e7f9      	b.n	d4562 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d456e:	6016      	str	r6, [r2, #0]
   d4570:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d4572:	4298      	cmp	r0, r3
   d4574:	ebc0 0803 	rsb	r8, r0, r3
   d4578:	d009      	beq.n	d458e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d457a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d457e:	2a2e      	cmp	r2, #46	; 0x2e
   d4580:	d0f7      	beq.n	d4572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d4582:	2a20      	cmp	r2, #32
   d4584:	d0f5      	beq.n	d4572 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d4586:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d458a:	dcd4      	bgt.n	d4536 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d458c:	e001      	b.n	d4592 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d458e:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d4592:	f8c1 8004 	str.w	r8, [r1, #4]
   d4596:	f101 030c 	add.w	r3, r1, #12
   d459a:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d459e:	2420      	movs	r4, #32
   d45a0:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d45a4:	4293      	cmp	r3, r2
   d45a6:	d1fb      	bne.n	d45a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d45a8:	4603      	mov	r3, r0
   d45aa:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d45ac:	f813 4b01 	ldrb.w	r4, [r3], #1
   d45b0:	2c2e      	cmp	r4, #46	; 0x2e
   d45b2:	d0fa      	beq.n	d45aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d45b4:	2c20      	cmp	r4, #32
   d45b6:	d0f8      	beq.n	d45aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d45b8:	fab2 f482 	clz	r4, r2
   d45bc:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d45be:	f108 36ff 	add.w	r6, r8, #4294967295
   d45c2:	1c73      	adds	r3, r6, #1
   d45c4:	d107      	bne.n	d45d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d45c6:	2700      	movs	r7, #0
   d45c8:	f04f 0e07 	mov.w	lr, #7
   d45cc:	463d      	mov	r5, r7
   d45ce:	46ba      	mov	sl, r7
   d45d0:	f04f 0908 	mov.w	r9, #8
   d45d4:	e009      	b.n	d45ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d45d6:	5d83      	ldrb	r3, [r0, r6]
   d45d8:	2b2e      	cmp	r3, #46	; 0x2e
   d45da:	d0f4      	beq.n	d45c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d45dc:	3e01      	subs	r6, #1
   d45de:	e7f0      	b.n	d45c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d45e0:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d45e2:	2b20      	cmp	r3, #32
   d45e4:	d104      	bne.n	d45f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d45e6:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d45e8:	3201      	adds	r2, #1
   d45ea:	4542      	cmp	r2, r8
   d45ec:	dbf8      	blt.n	d45e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d45ee:	e04b      	b.n	d4688 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d45f0:	2b2e      	cmp	r3, #46	; 0x2e
   d45f2:	d102      	bne.n	d45fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d45f4:	42b2      	cmp	r2, r6
   d45f6:	d1f6      	bne.n	d45e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d45f8:	e003      	b.n	d4602 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d45fa:	2b22      	cmp	r3, #34	; 0x22
   d45fc:	d017      	beq.n	d462e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d45fe:	2b7c      	cmp	r3, #124	; 0x7c
   d4600:	d015      	beq.n	d462e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d4602:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d4606:	f1bc 0f05 	cmp.w	ip, #5
   d460a:	d801      	bhi.n	d4610 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d460c:	2b2d      	cmp	r3, #45	; 0x2d
   d460e:	d10e      	bne.n	d462e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d4610:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d4614:	f1bc 0f05 	cmp.w	ip, #5
   d4618:	d909      	bls.n	d462e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d461a:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d461e:	f1bc 0f02 	cmp.w	ip, #2
   d4622:	d904      	bls.n	d462e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d4624:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d4628:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d462c:	d902      	bls.n	d4634 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d462e:	42b2      	cmp	r2, r6
   d4630:	d10e      	bne.n	d4650 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d4632:	e049      	b.n	d46c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4634:	42b2      	cmp	r2, r6
   d4636:	d047      	beq.n	d46c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d4638:	4575      	cmp	r5, lr
   d463a:	d821      	bhi.n	d4680 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d463c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d4640:	f1bc 0f19 	cmp.w	ip, #25
   d4644:	d808      	bhi.n	d4658 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d4646:	3b20      	subs	r3, #32
   d4648:	b2db      	uxtb	r3, r3
        lc |= bit;
   d464a:	ea49 0707 	orr.w	r7, r9, r7
   d464e:	e00a      	b.n	d4666 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4650:	4575      	cmp	r5, lr
   d4652:	d815      	bhi.n	d4680 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d4654:	2400      	movs	r4, #0
      c = '_';
   d4656:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d4658:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d465c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d4660:	bf98      	it	ls
   d4662:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d4666:	f105 0c01 	add.w	ip, r5, #1
   d466a:	fa5f fc8c 	uxtb.w	ip, ip
   d466e:	440d      	add	r5, r1
      if (i < 7) {
   d4670:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d4674:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d4676:	d801      	bhi.n	d467c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d4678:	f881 c00c 	strb.w	ip, [r1, #12]
   d467c:	4665      	mov	r5, ip
   d467e:	e7b3      	b.n	d45e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4680:	f1be 0f0a 	cmp.w	lr, #10
   d4684:	d117      	bne.n	d46b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d4686:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d4688:	7b4b      	ldrb	r3, [r1, #13]
   d468a:	2b20      	cmp	r3, #32
   d468c:	f43f af53 	beq.w	d4536 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d4690:	b13c      	cbz	r4, d46a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d4692:	ea1a 0f07 	tst.w	sl, r7
   d4696:	bf18      	it	ne
   d4698:	2702      	movne	r7, #2
   d469a:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d469c:	2001      	movs	r0, #1
   d469e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d46a2:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d46a4:	2001      	movs	r0, #1
   d46a6:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d46a8:	4419      	add	r1, r3
   d46aa:	237e      	movs	r3, #126	; 0x7e
   d46ac:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d46ae:	2331      	movs	r3, #49	; 0x31
   d46b0:	738b      	strb	r3, [r1, #14]
   d46b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d46b6:	42b2      	cmp	r2, r6
   d46b8:	dce5      	bgt.n	d4686 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d46ba:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d46bc:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d46c0:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d46c2:	f04f 0910 	mov.w	r9, #16
   d46c6:	e78e      	b.n	d45e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d46c8:	f1be 0f0a 	cmp.w	lr, #10
   d46cc:	d0db      	beq.n	d4686 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d46ce:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d46d0:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d46d4:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d46d6:	f04f 0910 	mov.w	r9, #16
   d46da:	e785      	b.n	d45e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d46dc:	31000101 	.word	0x31000101

000d46e0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d46e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d46e4:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d46e8:	4606      	mov	r6, r0
   d46ea:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d46ec:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d46ee:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d46f0:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d46f4:	6869      	ldr	r1, [r5, #4]
   d46f6:	68aa      	ldr	r2, [r5, #8]
   d46f8:	1863      	adds	r3, r4, r1
   d46fa:	b29b      	uxth	r3, r3
   d46fc:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d46fe:	4291      	cmp	r1, r2
   d4700:	d006      	beq.n	d4710 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d4702:	f812 0b01 	ldrb.w	r0, [r2], #1
   d4706:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d470a:	4043      	eors	r3, r0
   d470c:	b29b      	uxth	r3, r3
   d470e:	e7f6      	b.n	d46fe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d4710:	f1b9 0f03 	cmp.w	r9, #3
   d4714:	bf28      	it	cs
   d4716:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d471a:	f109 0204 	add.w	r2, r9, #4
   d471e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d4720:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4724:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4726:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4728:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d472a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d472c:	bf94      	ite	ls
   d472e:	3130      	addls	r1, #48	; 0x30
   d4730:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4732:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4734:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d4736:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d473a:	d3f1      	bcc.n	d4720 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d473c:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4740:	2100      	movs	r1, #0
   d4742:	735f      	strb	r7, [r3, #13]
   d4744:	4630      	mov	r0, r6
   d4746:	f000 fb31 	bl	d4dac <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d474a:	2101      	movs	r1, #1
   d474c:	4630      	mov	r0, r6
   d474e:	f000 fb10 	bl	d4d72 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d4752:	4601      	mov	r1, r0
   d4754:	b928      	cbnz	r0, d4762 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d4756:	7870      	ldrb	r0, [r6, #1]
   d4758:	fab0 f080 	clz	r0, r0
   d475c:	0940      	lsrs	r0, r0, #5
   d475e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4762:	7803      	ldrb	r3, [r0, #0]
   d4764:	b14b      	cbz	r3, d477a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4766:	7ac3      	ldrb	r3, [r0, #11]
   d4768:	071b      	lsls	r3, r3, #28
   d476a:	d4ee      	bmi.n	d474a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d476c:	220b      	movs	r2, #11
   d476e:	4640      	mov	r0, r8
   d4770:	f002 fc7e 	bl	d7070 <memcmp>
   d4774:	2800      	cmp	r0, #0
   d4776:	d1e8      	bne.n	d474a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4778:	e002      	b.n	d4780 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d477a:	2001      	movs	r0, #1
   d477c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4780:	3401      	adds	r4, #1
   d4782:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d4784:	2c64      	cmp	r4, #100	; 0x64
   d4786:	d1b5      	bne.n	d46f4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d4788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d478c <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4790:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4792:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4794:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4796:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d479a:	9005      	str	r0, [sp, #20]
   d479c:	460e      	mov	r6, r1
   d479e:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d47a0:	d101      	bne.n	d47a6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d47a2:	2000      	movs	r0, #0
   d47a4:	e1a0      	b.n	d4ae8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d47a6:	9b05      	ldr	r3, [sp, #20]
   d47a8:	781b      	ldrb	r3, [r3, #0]
   d47aa:	2b00      	cmp	r3, #0
   d47ac:	d1f9      	bne.n	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d47ae:	6853      	ldr	r3, [r2, #4]
   d47b0:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d47b2:	7813      	ldrb	r3, [r2, #0]
   d47b4:	079b      	lsls	r3, r3, #30
   d47b6:	f000 818d 	beq.w	d4ad4 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d47ba:	9b02      	ldr	r3, [sp, #8]
   d47bc:	270d      	movs	r7, #13
   d47be:	330c      	adds	r3, #12
   d47c0:	fbb3 f7f7 	udiv	r7, r3, r7
   d47c4:	3701      	adds	r7, #1
   d47c6:	b2ff      	uxtb	r7, r7
   d47c8:	2100      	movs	r1, #0
   d47ca:	4630      	mov	r0, r6
   d47cc:	f000 faee 	bl	d4dac <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d47d0:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d47d4:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d47d8:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d47dc:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d47de:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d47e0:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d47e2:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d47e6:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d47e8:	6972      	ldr	r2, [r6, #20]
   d47ea:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d47ec:	2101      	movs	r1, #1
   d47ee:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d47f0:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d47f4:	f000 fabd 	bl	d4d72 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d47f8:	9b07      	ldr	r3, [sp, #28]
   d47fa:	b920      	cbnz	r0, d4806 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d47fc:	7873      	ldrb	r3, [r6, #1]
   d47fe:	2b00      	cmp	r3, #0
   d4800:	f000 8090 	beq.w	d4924 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d4804:	e7cd      	b.n	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d4806:	7802      	ldrb	r2, [r0, #0]
   d4808:	2ae5      	cmp	r2, #229	; 0xe5
   d480a:	d000      	beq.n	d480e <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d480c:	b942      	cbnz	r2, d4820 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d480e:	2c00      	cmp	r4, #0
   d4810:	bf08      	it	eq
   d4812:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d4814:	42bc      	cmp	r4, r7
        freeFound++;
   d4816:	bf3c      	itt	cc
   d4818:	3401      	addcc	r4, #1
   d481a:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d481c:	b922      	cbnz	r2, d4828 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d481e:	e081      	b.n	d4924 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d4820:	42bc      	cmp	r4, r7
   d4822:	bf38      	it	cc
   d4824:	2400      	movcc	r4, #0
   d4826:	e003      	b.n	d4830 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4828:	2ae5      	cmp	r2, #229	; 0xe5
   d482a:	d101      	bne.n	d4830 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d482c:	2500      	movs	r5, #0
   d482e:	e7db      	b.n	d47e8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4830:	2a2e      	cmp	r2, #46	; 0x2e
   d4832:	d0fb      	beq.n	d482c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4834:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d4836:	290f      	cmp	r1, #15
   d4838:	d152      	bne.n	d48e0 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d483a:	b93d      	cbnz	r5, d484c <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d483c:	0651      	lsls	r1, r2, #25
   d483e:	d5d3      	bpl.n	d47e8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d4840:	7b43      	ldrb	r3, [r0, #13]
   d4842:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d4844:	f002 051f 	and.w	r5, r2, #31
   d4848:	462b      	mov	r3, r5
   d484a:	e007      	b.n	d485c <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d484c:	3b01      	subs	r3, #1
   d484e:	b2db      	uxtb	r3, r3
   d4850:	429a      	cmp	r2, r3
   d4852:	d1eb      	bne.n	d482c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4854:	7b42      	ldrb	r2, [r0, #13]
   d4856:	9903      	ldr	r1, [sp, #12]
   d4858:	4291      	cmp	r1, r2
   d485a:	d1e7      	bne.n	d482c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d485c:	1e5a      	subs	r2, r3, #1
   d485e:	f04f 0c0d 	mov.w	ip, #13
   d4862:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d4866:	9a02      	ldr	r2, [sp, #8]
   d4868:	4562      	cmp	r2, ip
   d486a:	d9df      	bls.n	d482c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d486c:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d4870:	f1be 0f04 	cmp.w	lr, #4
   d4874:	fa5f f28e 	uxtb.w	r2, lr
   d4878:	d804      	bhi.n	d4884 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d487a:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d487e:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d4882:	e00c      	b.n	d489e <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d4884:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4886:	bf95      	itete	ls
   d4888:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d488c:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4890:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4894:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4898:	bf94      	ite	ls
   d489a:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d489c:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d489e:	9902      	ldr	r1, [sp, #8]
   d48a0:	4561      	cmp	r1, ip
   d48a2:	d103      	bne.n	d48ac <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d48a4:	2a00      	cmp	r2, #0
   d48a6:	bf18      	it	ne
   d48a8:	2500      	movne	r5, #0
   d48aa:	e79d      	b.n	d47e8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d48ac:	2aff      	cmp	r2, #255	; 0xff
   d48ae:	d8bd      	bhi.n	d482c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d48b0:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d48b2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d48b6:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d48b8:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d48bc:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d48c0:	bf98      	it	ls
   d48c2:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d48c4:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d48c8:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d48cc:	bf98      	it	ls
   d48ce:	b2d2      	uxtbls	r2, r2
   d48d0:	f1bc 0f19 	cmp.w	ip, #25
   d48d4:	bf9c      	itt	ls
   d48d6:	3120      	addls	r1, #32
   d48d8:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d48da:	4291      	cmp	r1, r2
   d48dc:	d1a6      	bne.n	d482c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d48de:	e0fb      	b.n	d4ad8 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d48e0:	0709      	lsls	r1, r1, #28
   d48e2:	d4a3      	bmi.n	d482c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d48e4:	b14d      	cbz	r5, d48fa <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d48e6:	2b01      	cmp	r3, #1
   d48e8:	f47f af5b 	bne.w	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d48ec:	f7ff fdfd 	bl	d44ea <_ZN7FatFile11lfnChecksumEPh>
   d48f0:	9b03      	ldr	r3, [sp, #12]
   d48f2:	4283      	cmp	r3, r0
   d48f4:	f47f af55 	bne.w	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d48f8:	e00f      	b.n	d491a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d48fa:	220b      	movs	r2, #11
   d48fc:	9906      	ldr	r1, [sp, #24]
   d48fe:	9307      	str	r3, [sp, #28]
   d4900:	f002 fbb6 	bl	d7070 <memcmp>
   d4904:	9b07      	ldr	r3, [sp, #28]
   d4906:	2800      	cmp	r0, #0
   d4908:	f47f af6e 	bne.w	d47e8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d490c:	f899 2000 	ldrb.w	r2, [r9]
   d4910:	07d2      	lsls	r2, r2, #31
   d4912:	d502      	bpl.n	d491a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d4914:	2201      	movs	r2, #1
   d4916:	9204      	str	r2, [sp, #16]
   d4918:	e766      	b.n	d47e8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d491a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d491e:	f000 80d1 	beq.w	d4ac4 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d4922:	e73e      	b.n	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d4924:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d4928:	f43f af3b 	beq.w	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d492c:	f00b 0303 	and.w	r3, fp, #3
   d4930:	3b01      	subs	r3, #1
   d4932:	2b01      	cmp	r3, #1
   d4934:	f63f af35 	bhi.w	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d4938:	2c00      	cmp	r4, #0
   d493a:	bf08      	it	eq
   d493c:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d493e:	42bc      	cmp	r4, r7
   d4940:	d302      	bcc.n	d4948 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d4942:	9b04      	ldr	r3, [sp, #16]
   d4944:	b9cb      	cbnz	r3, d497a <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d4946:	e01f      	b.n	d4988 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d4948:	2100      	movs	r1, #0
   d494a:	4630      	mov	r0, r6
   d494c:	f000 fa11 	bl	d4d72 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d4950:	b910      	cbnz	r0, d4958 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d4952:	7873      	ldrb	r3, [r6, #1]
   d4954:	b15b      	cbz	r3, d496e <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d4956:	e724      	b.n	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d4958:	3401      	adds	r4, #1
   d495a:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d495c:	e7ef      	b.n	d493e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d495e:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d4960:	791b      	ldrb	r3, [r3, #4]
   d4962:	2b01      	cmp	r3, #1
   d4964:	d8ed      	bhi.n	d4942 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d4966:	3410      	adds	r4, #16
   d4968:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d496a:	42a7      	cmp	r7, r4
   d496c:	d9e9      	bls.n	d4942 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d496e:	4630      	mov	r0, r6
   d4970:	f000 f8d2 	bl	d4b18 <_ZN7FatFile13addDirClusterEv>
   d4974:	2800      	cmp	r0, #0
   d4976:	d1f2      	bne.n	d495e <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d4978:	e713      	b.n	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d497a:	4649      	mov	r1, r9
   d497c:	4630      	mov	r0, r6
   d497e:	f7ff feaf 	bl	d46e0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d4982:	2800      	cmp	r0, #0
   d4984:	f43f af0d 	beq.w	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d4988:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d498c:	4630      	mov	r0, r6
   d498e:	f000 fa0d 	bl	d4dac <_ZN7FatFile7seekSetEm>
   d4992:	2800      	cmp	r0, #0
   d4994:	f43f af05 	beq.w	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d4998:	1e7d      	subs	r5, r7, #1
   d499a:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d499c:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d499e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d49a2:	f04f 080f 	mov.w	r8, #15
   d49a6:	e041      	b.n	d4a2c <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d49a8:	2100      	movs	r1, #0
   d49aa:	4630      	mov	r0, r6
   d49ac:	f000 f9e1 	bl	d4d72 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d49b0:	4607      	mov	r7, r0
   d49b2:	2800      	cmp	r0, #0
   d49b4:	f43f aef5 	beq.w	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d49b8:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d49ba:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d49be:	42ac      	cmp	r4, r5
   d49c0:	f043 0301 	orr.w	r3, r3, #1
   d49c4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d49c8:	bf0c      	ite	eq
   d49ca:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d49ce:	4622      	movne	r2, r4
   d49d0:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d49d2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d49d6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d49da:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d49de:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d49e0:	f7ff fd83 	bl	d44ea <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d49e4:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d49e6:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d49e8:	f887 a01a 	strb.w	sl, [r7, #26]
   d49ec:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d49f0:	f002 021f 	and.w	r2, r2, #31
   d49f4:	230d      	movs	r3, #13
   d49f6:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d49f8:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d49fc:	435a      	muls	r2, r3
   d49fe:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d4a00:	9902      	ldr	r1, [sp, #8]
   d4a02:	4291      	cmp	r1, r2
   d4a04:	d915      	bls.n	d4a32 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d4a06:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d4a0a:	2b04      	cmp	r3, #4
   d4a0c:	fa5f fc83 	uxtb.w	ip, r3
   d4a10:	f103 0001 	add.w	r0, r3, #1
   d4a14:	d813      	bhi.n	d4a3e <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d4a16:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d4a1a:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d4a1e:	280d      	cmp	r0, #13
   d4a20:	f102 0201 	add.w	r2, r2, #1
   d4a24:	4603      	mov	r3, r0
   d4a26:	d1eb      	bne.n	d4a00 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d4a28:	3c01      	subs	r4, #1
   d4a2a:	b2e4      	uxtb	r4, r4
   d4a2c:	2c00      	cmp	r4, #0
   d4a2e:	d1bb      	bne.n	d49a8 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d4a30:	e00e      	b.n	d4a50 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d4a32:	bf14      	ite	ne
   d4a34:	f04f 31ff 	movne.w	r1, #4294967295
   d4a38:	2100      	moveq	r1, #0
   d4a3a:	b289      	uxth	r1, r1
   d4a3c:	e7e5      	b.n	d4a0a <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d4a3e:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d4a42:	bf94      	ite	ls
   d4a44:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d4a48:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d4a4c:	8099      	strh	r1, [r3, #4]
   d4a4e:	e7e6      	b.n	d4a1e <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d4a50:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d4a52:	4621      	mov	r1, r4
   d4a54:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d4a56:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d4a5a:	f000 f98a 	bl	d4d72 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d4a5e:	4607      	mov	r7, r0
   d4a60:	2800      	cmp	r0, #0
   d4a62:	f43f ae9e 	beq.w	d47a2 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d4a66:	2220      	movs	r2, #32
   d4a68:	4621      	mov	r1, r4
   d4a6a:	f002 fb1b 	bl	d70a4 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d4a6e:	464b      	mov	r3, r9
   d4a70:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d4a74:	603a      	str	r2, [r7, #0]
   d4a76:	685a      	ldr	r2, [r3, #4]
   d4a78:	607a      	str	r2, [r7, #4]
   d4a7a:	891a      	ldrh	r2, [r3, #8]
   d4a7c:	813a      	strh	r2, [r7, #8]
   d4a7e:	7a9b      	ldrb	r3, [r3, #10]
   d4a80:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d4a82:	f899 3000 	ldrb.w	r3, [r9]
   d4a86:	f003 0318 	and.w	r3, r3, #24
   d4a8a:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d4a8c:	4b18      	ldr	r3, [pc, #96]	; (d4af0 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d4a8e:	681b      	ldr	r3, [r3, #0]
   d4a90:	b12b      	cbz	r3, d4a9e <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d4a92:	f107 010e 	add.w	r1, r7, #14
   d4a96:	f107 0010 	add.w	r0, r7, #16
   d4a9a:	4798      	blx	r3
   d4a9c:	e006      	b.n	d4aac <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d4a9e:	2321      	movs	r3, #33	; 0x21
   d4aa0:	743b      	strb	r3, [r7, #16]
   d4aa2:	2328      	movs	r3, #40	; 0x28
   d4aa4:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d4aa6:	2308      	movs	r3, #8
   d4aa8:	73bc      	strb	r4, [r7, #14]
   d4aaa:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d4aac:	8a3b      	ldrh	r3, [r7, #16]
   d4aae:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d4ab0:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d4ab2:	89fb      	ldrh	r3, [r7, #14]
   d4ab4:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d4ab6:	68b2      	ldr	r2, [r6, #8]
   d4ab8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d4abc:	f043 0301 	orr.w	r3, r3, #1
   d4ac0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d4ac4:	9500      	str	r5, [sp, #0]
   d4ac6:	465b      	mov	r3, fp
   d4ac8:	4652      	mov	r2, sl
   d4aca:	4631      	mov	r1, r6
   d4acc:	9805      	ldr	r0, [sp, #20]
   d4ace:	f000 f9b6 	bl	d4e3e <_ZN7FatFile15openCachedEntryEPS_tih>
   d4ad2:	e009      	b.n	d4ae8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4ad4:	2701      	movs	r7, #1
   d4ad6:	e677      	b.n	d47c8 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d4ad8:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d4adc:	f1be 0f0d 	cmp.w	lr, #13
   d4ae0:	f43f ae82 	beq.w	d47e8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4ae4:	46d4      	mov	ip, sl
   d4ae6:	e6c3      	b.n	d4870 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d4ae8:	b009      	add	sp, #36	; 0x24
   d4aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4aee:	bf00      	nop
   d4af0:	2003e3d0 	.word	0x2003e3d0

000d4af4 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d4af4:	f001 b87e 	b.w	d5bf4 <HAL_Pin_Map>

000d4af8 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d4af8:	f001 b87c 	b.w	d5bf4 <HAL_Pin_Map>

000d4afc <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d4afc:	f001 b87a 	b.w	d5bf4 <HAL_Pin_Map>

000d4b00 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d4b00:	f001 b878 	b.w	d5bf4 <HAL_Pin_Map>

000d4b04 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4b04:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4b06:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4b08:	f043 0304 	orr.w	r3, r3, #4
   d4b0c:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4b0e:	f100 0210 	add.w	r2, r0, #16
   d4b12:	6880      	ldr	r0, [r0, #8]
   d4b14:	f000 bc26 	b.w	d5364 <_ZN9FatVolume15allocateClusterEmPm>

000d4b18 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4b1c:	7803      	ldrb	r3, [r0, #0]
   d4b1e:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4b22:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4b24:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4b28:	b10b      	cbz	r3, d4b2e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d4b2a:	2600      	movs	r6, #0
   d4b2c:	e02e      	b.n	d4b8c <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d4b2e:	6942      	ldr	r2, [r0, #20]
   d4b30:	4b18      	ldr	r3, [pc, #96]	; (d4b94 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d4b32:	429a      	cmp	r2, r3
   d4b34:	d8f9      	bhi.n	d4b2a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d4b36:	f7ff ffe5 	bl	d4b04 <_ZN7FatFile10addClusterEv>
   d4b3a:	4606      	mov	r6, r0
   d4b3c:	2800      	cmp	r0, #0
   d4b3e:	d0f4      	beq.n	d4b2a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d4b40:	6921      	ldr	r1, [r4, #16]
   d4b42:	68a0      	ldr	r0, [r4, #8]
   d4b44:	f000 fba3 	bl	d528e <_ZNK9FatVolume17clusterFirstBlockEm>
   d4b48:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4b4a:	68a0      	ldr	r0, [r4, #8]
   d4b4c:	2205      	movs	r2, #5
   d4b4e:	4639      	mov	r1, r7
   d4b50:	3024      	adds	r0, #36	; 0x24
   d4b52:	f000 fb78 	bl	d5246 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d4b56:	4680      	mov	r8, r0
   d4b58:	2800      	cmp	r0, #0
   d4b5a:	d0e6      	beq.n	d4b2a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d4b5c:	4629      	mov	r1, r5
   d4b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4b62:	f002 fa9f 	bl	d70a4 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d4b66:	2501      	movs	r5, #1
   d4b68:	68a3      	ldr	r3, [r4, #8]
   d4b6a:	791a      	ldrb	r2, [r3, #4]
   d4b6c:	42aa      	cmp	r2, r5
   d4b6e:	d909      	bls.n	d4b84 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4b70:	4642      	mov	r2, r8
   d4b72:	19e9      	adds	r1, r5, r7
   d4b74:	6818      	ldr	r0, [r3, #0]
   d4b76:	f000 fee3 	bl	d5940 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d4b7a:	2800      	cmp	r0, #0
   d4b7c:	d0d5      	beq.n	d4b2a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d4b7e:	3501      	adds	r5, #1
   d4b80:	b2ed      	uxtb	r5, r5
   d4b82:	e7f1      	b.n	d4b68 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d4b84:	6963      	ldr	r3, [r4, #20]
   d4b86:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d4b8a:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d4b8c:	4630      	mov	r0, r6
   d4b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4b92:	bf00      	nop
   d4b94:	001ffdff 	.word	0x001ffdff

000d4b98 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d4b98:	b510      	push	{r4, lr}
   d4b9a:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4b9c:	6880      	ldr	r0, [r0, #8]
   d4b9e:	460a      	mov	r2, r1
   d4ba0:	3024      	adds	r0, #36	; 0x24
   d4ba2:	69a1      	ldr	r1, [r4, #24]
   d4ba4:	f000 fb4f 	bl	d5246 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d4ba8:	b120      	cbz	r0, d4bb4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d4baa:	88a3      	ldrh	r3, [r4, #4]
   d4bac:	f003 030f 	and.w	r3, r3, #15
   d4bb0:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d4bb4:	bd10      	pop	{r4, pc}

000d4bb6 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d4bb6:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d4bb8:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d4bba:	4605      	mov	r5, r0
   d4bbc:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d4bbe:	b984      	cbnz	r4, d4be2 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d4bc0:	2224      	movs	r2, #36	; 0x24
   d4bc2:	4621      	mov	r1, r4
   d4bc4:	f002 fa6e 	bl	d70a4 <memset>

  m_vol = vol;
   d4bc8:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d4bca:	79f3      	ldrb	r3, [r6, #7]
   d4bcc:	2b10      	cmp	r3, #16
   d4bce:	d003      	beq.n	d4bd8 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d4bd0:	2b20      	cmp	r3, #32
   d4bd2:	d106      	bne.n	d4be2 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4bd4:	2340      	movs	r3, #64	; 0x40
   d4bd6:	e000      	b.n	d4bda <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d4bd8:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4bda:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4bdc:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4bde:	70a8      	strb	r0, [r5, #2]
   d4be0:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d4be2:	2000      	movs	r0, #0
   d4be4:	bd70      	pop	{r4, r5, r6, pc}

000d4be6 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d4be6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4bea:	7803      	ldrb	r3, [r0, #0]
   d4bec:	4604      	mov	r4, r0
   d4bee:	4689      	mov	r9, r1
   d4bf0:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d4bf2:	b14b      	cbz	r3, d4c08 <_ZN7FatFile4readEPvj+0x22>
   d4bf4:	7882      	ldrb	r2, [r0, #2]
   d4bf6:	07d1      	lsls	r1, r2, #31
   d4bf8:	d506      	bpl.n	d4c08 <_ZN7FatFile4readEPvj+0x22>
   d4bfa:	e00c      	b.n	d4c16 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4bfc:	465a      	mov	r2, fp
   d4bfe:	6921      	ldr	r1, [r4, #16]
   d4c00:	f000 fb4b 	bl	d529a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d4c04:	2800      	cmp	r0, #0
   d4c06:	da3d      	bge.n	d4c84 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d4c08:	7863      	ldrb	r3, [r4, #1]
   d4c0a:	f043 0302 	orr.w	r3, r3, #2
   d4c0e:	7063      	strb	r3, [r4, #1]
  return -1;
   d4c10:	f04f 30ff 	mov.w	r0, #4294967295
   d4c14:	e097      	b.n	d4d46 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d4c16:	071a      	lsls	r2, r3, #28
   d4c18:	d503      	bpl.n	d4c22 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d4c1a:	69e3      	ldr	r3, [r4, #28]
   d4c1c:	6962      	ldr	r2, [r4, #20]
   d4c1e:	1a9b      	subs	r3, r3, r2
   d4c20:	e007      	b.n	d4c32 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d4c22:	069a      	lsls	r2, r3, #26
   d4c24:	d508      	bpl.n	d4c38 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d4c26:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d4c28:	891a      	ldrh	r2, [r3, #8]
   d4c2a:	6963      	ldr	r3, [r4, #20]
   d4c2c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d4c30:	b29b      	uxth	r3, r3
   d4c32:	429d      	cmp	r5, r3
   d4c34:	bf28      	it	cs
   d4c36:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d4c38:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d4c3a:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4c3e:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4c42:	2e00      	cmp	r6, #0
   d4c44:	d035      	beq.n	d4cb2 <_ZN7FatFile4readEPvj+0xcc>
   d4c46:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4c48:	6963      	ldr	r3, [r4, #20]
   d4c4a:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d4c4c:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4c50:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d4c54:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d4c58:	d002      	beq.n	d4c60 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d4c5a:	6a03      	ldr	r3, [r0, #32]
   d4c5c:	4419      	add	r1, r3
   d4c5e:	e01d      	b.n	d4c9c <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4c60:	f890 8005 	ldrb.w	r8, [r0, #5]
   d4c64:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d4c68:	f1ba 0f00 	cmp.w	sl, #0
   d4c6c:	d110      	bne.n	d4c90 <_ZN7FatFile4readEPvj+0xaa>
   d4c6e:	f1b8 0f00 	cmp.w	r8, #0
   d4c72:	d10d      	bne.n	d4c90 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d4c74:	2b00      	cmp	r3, #0
   d4c76:	d1c1      	bne.n	d4bfc <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4c78:	0653      	lsls	r3, r2, #25
   d4c7a:	bf4c      	ite	mi
   d4c7c:	6a03      	ldrmi	r3, [r0, #32]
   d4c7e:	6a23      	ldrpl	r3, [r4, #32]
   d4c80:	6123      	str	r3, [r4, #16]
   d4c82:	e005      	b.n	d4c90 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d4c84:	d104      	bne.n	d4c90 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d4c86:	7823      	ldrb	r3, [r4, #0]
   d4c88:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4c8c:	d111      	bne.n	d4cb2 <_ZN7FatFile4readEPvj+0xcc>
   d4c8e:	e7bb      	b.n	d4c08 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4c90:	6921      	ldr	r1, [r4, #16]
   d4c92:	68a0      	ldr	r0, [r4, #8]
   d4c94:	f000 fafb 	bl	d528e <_ZNK9FatVolume17clusterFirstBlockEm>
   d4c98:	eb08 0100 	add.w	r1, r8, r0
   d4c9c:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d4c9e:	f1ba 0f00 	cmp.w	sl, #0
   d4ca2:	d135      	bne.n	d4d10 <_ZN7FatFile4readEPvj+0x12a>
   d4ca4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d4ca8:	d332      	bcc.n	d4d10 <_ZN7FatFile4readEPvj+0x12a>
   d4caa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4cac:	4299      	cmp	r1, r3
   d4cae:	d102      	bne.n	d4cb6 <_ZN7FatFile4readEPvj+0xd0>
   d4cb0:	e02e      	b.n	d4d10 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d4cb2:	1ba8      	subs	r0, r5, r6
   d4cb4:	e047      	b.n	d4d46 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d4cb6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d4cba:	d31b      	bcc.n	d4cf4 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d4cbc:	7822      	ldrb	r2, [r4, #0]
   d4cbe:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d4cc0:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d4cc4:	d406      	bmi.n	d4cd4 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d4cc6:	7902      	ldrb	r2, [r0, #4]
   d4cc8:	ebc8 0202 	rsb	r2, r8, r2
   d4ccc:	b2d2      	uxtb	r2, r2
   d4cce:	4592      	cmp	sl, r2
   d4cd0:	bf28      	it	cs
   d4cd2:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4cd4:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d4cd6:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4cda:	d207      	bcs.n	d4cec <_ZN7FatFile4readEPvj+0x106>
   d4cdc:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d4cde:	4653      	mov	r3, sl
   d4ce0:	464a      	mov	r2, r9
   d4ce2:	6800      	ldr	r0, [r0, #0]
   d4ce4:	f000 fdea 	bl	d58bc <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d4ce8:	b960      	cbnz	r0, d4d04 <_ZN7FatFile4readEPvj+0x11e>
   d4cea:	e78d      	b.n	d4c08 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4cec:	4453      	add	r3, sl
   d4cee:	4299      	cmp	r1, r3
   d4cf0:	d321      	bcc.n	d4d36 <_ZN7FatFile4readEPvj+0x150>
   d4cf2:	e7f3      	b.n	d4cdc <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d4cf4:	464a      	mov	r2, r9
   d4cf6:	6800      	ldr	r0, [r0, #0]
   d4cf8:	f000 fd98 	bl	d582c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d4cfc:	2800      	cmp	r0, #0
   d4cfe:	d083      	beq.n	d4c08 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d4d00:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d4d04:	6963      	ldr	r3, [r4, #20]
   d4d06:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d4d08:	44b9      	add	r9, r7
    m_curPosition += n;
   d4d0a:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d4d0c:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4d0e:	e798      	b.n	d4c42 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4d10:	2200      	movs	r2, #0
   d4d12:	3024      	adds	r0, #36	; 0x24
   d4d14:	f000 fa97 	bl	d5246 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d4d18:	2800      	cmp	r0, #0
   d4d1a:	f43f af75 	beq.w	d4c08 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d4d1e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d4d22:	42b7      	cmp	r7, r6
   d4d24:	bf28      	it	cs
   d4d26:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d4d28:	eb00 010a 	add.w	r1, r0, sl
   d4d2c:	463a      	mov	r2, r7
   d4d2e:	4648      	mov	r0, r9
   d4d30:	f002 f9ad 	bl	d708e <memcpy>
   d4d34:	e7e6      	b.n	d4d04 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4d36:	3024      	adds	r0, #36	; 0x24
   d4d38:	9101      	str	r1, [sp, #4]
   d4d3a:	f000 fa5d 	bl	d51f8 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d4d3e:	9901      	ldr	r1, [sp, #4]
   d4d40:	2800      	cmp	r0, #0
   d4d42:	d1cb      	bne.n	d4cdc <_ZN7FatFile4readEPvj+0xf6>
   d4d44:	e760      	b.n	d4c08 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d4d46:	b003      	add	sp, #12
   d4d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4d4c <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d4d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4d4e:	2201      	movs	r2, #1
   d4d50:	f10d 0107 	add.w	r1, sp, #7
   d4d54:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d4d56:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d4d58:	6905      	ldr	r5, [r0, #16]
   d4d5a:	f7ff ff44 	bl	d4be6 <_ZN7FatFile4readEPvj>
   d4d5e:	2801      	cmp	r0, #1
   d4d60:	bf05      	ittet	eq
   d4d62:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d4d66:	6166      	streq	r6, [r4, #20]
   d4d68:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d4d6c:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d4d6e:	b002      	add	sp, #8
   d4d70:	bd70      	pop	{r4, r5, r6, pc}

000d4d72 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4d72:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d4d74:	6943      	ldr	r3, [r0, #20]
   d4d76:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4d7a:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d4d7c:	b105      	cbz	r5, d4d80 <_ZN7FatFile12readDirCacheEb+0xe>
   d4d7e:	b969      	cbnz	r1, d4d9c <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d4d80:	2201      	movs	r2, #1
   d4d82:	f10d 0107 	add.w	r1, sp, #7
   d4d86:	4620      	mov	r0, r4
   d4d88:	f7ff ff2d 	bl	d4be6 <_ZN7FatFile4readEPvj>
   d4d8c:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d4d8e:	2801      	cmp	r0, #1
   d4d90:	d001      	beq.n	d4d96 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d4d92:	2000      	movs	r0, #0
   d4d94:	e008      	b.n	d4da8 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d4d96:	6963      	ldr	r3, [r4, #20]
   d4d98:	331f      	adds	r3, #31
   d4d9a:	e000      	b.n	d4d9e <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d4d9c:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d4d9e:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d4da0:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d4da2:	3030      	adds	r0, #48	; 0x30
   d4da4:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d4da8:	b003      	add	sp, #12
   d4daa:	bd30      	pop	{r4, r5, pc}

000d4dac <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4db0:	460e      	mov	r6, r1
   d4db2:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d4db4:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4db6:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d4db8:	2900      	cmp	r1, #0
   d4dba:	d039      	beq.n	d4e30 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d4dbc:	6945      	ldr	r5, [r0, #20]
   d4dbe:	42b5      	cmp	r5, r6
   d4dc0:	d03a      	beq.n	d4e38 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d4dc2:	b90e      	cbnz	r6, d4dc8 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d4dc4:	6106      	str	r6, [r0, #16]
    goto done;
   d4dc6:	e031      	b.n	d4e2c <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d4dc8:	070b      	lsls	r3, r1, #28
   d4dca:	d503      	bpl.n	d4dd4 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d4dcc:	69c3      	ldr	r3, [r0, #28]
   d4dce:	429e      	cmp	r6, r3
   d4dd0:	d82e      	bhi.n	d4e30 <_ZN7FatFile7seekSetEm+0x84>
   d4dd2:	e007      	b.n	d4de4 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d4dd4:	0688      	lsls	r0, r1, #26
   d4dd6:	d505      	bpl.n	d4de4 <_ZN7FatFile7seekSetEm+0x38>
   d4dd8:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d4dda:	891b      	ldrh	r3, [r3, #8]
   d4ddc:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d4de0:	d826      	bhi.n	d4e30 <_ZN7FatFile7seekSetEm+0x84>
   d4de2:	e023      	b.n	d4e2c <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4de4:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d4de8:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d4dec:	1e6a      	subs	r2, r5, #1
   d4dee:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4df2:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4df4:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4df6:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d4df8:	429a      	cmp	r2, r3
   d4dfa:	d800      	bhi.n	d4dfe <_ZN7FatFile7seekSetEm+0x52>
   d4dfc:	b94d      	cbnz	r5, d4e12 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4dfe:	064a      	lsls	r2, r1, #25
   d4e00:	bf4c      	ite	mi
   d4e02:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d4e06:	6a22      	ldrpl	r2, [r4, #32]
   d4e08:	6122      	str	r2, [r4, #16]
   d4e0a:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4e0c:	f104 0810 	add.w	r8, r4, #16
   d4e10:	e00a      	b.n	d4e28 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d4e12:	1a9b      	subs	r3, r3, r2
   d4e14:	e7f9      	b.n	d4e0a <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4e16:	4642      	mov	r2, r8
   d4e18:	6921      	ldr	r1, [r4, #16]
   d4e1a:	68a0      	ldr	r0, [r4, #8]
   d4e1c:	f000 fa3d 	bl	d529a <_ZN9FatVolume6fatGetEmPm>
   d4e20:	2800      	cmp	r0, #0
   d4e22:	f105 35ff 	add.w	r5, r5, #4294967295
   d4e26:	dd03      	ble.n	d4e30 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d4e28:	2d00      	cmp	r5, #0
   d4e2a:	d1f4      	bne.n	d4e16 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d4e2c:	6166      	str	r6, [r4, #20]
   d4e2e:	e003      	b.n	d4e38 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d4e30:	6127      	str	r7, [r4, #16]
  return false;
   d4e32:	2000      	movs	r0, #0
   d4e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d4e38:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d4e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4e3e <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d4e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e40:	460f      	mov	r7, r1
   d4e42:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d4e44:	2100      	movs	r1, #0
   d4e46:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d4e48:	4604      	mov	r4, r0
   d4e4a:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d4e4c:	f002 f92a 	bl	d70a4 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d4e50:	68b8      	ldr	r0, [r7, #8]
   d4e52:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4e54:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d4e58:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4e5a:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d4e5e:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d4e60:	6a3b      	ldr	r3, [r7, #32]
   d4e62:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4e64:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d4e66:	7acb      	ldrb	r3, [r1, #11]
   d4e68:	071d      	lsls	r5, r3, #28
   d4e6a:	d44c      	bmi.n	d4f06 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d4e6c:	1883      	adds	r3, r0, r2
   d4e6e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d4e72:	f003 0317 	and.w	r3, r3, #23
   d4e76:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d4e78:	7ac9      	ldrb	r1, [r1, #11]
   d4e7a:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d4e7e:	bf04      	itt	eq
   d4e80:	f043 0308 	orreq.w	r3, r3, #8
   d4e84:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d4e86:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4e8a:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d4e8c:	f006 0303 	and.w	r3, r6, #3
   d4e90:	2b01      	cmp	r3, #1
   d4e92:	d009      	beq.n	d4ea8 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d4e94:	2b02      	cmp	r3, #2
   d4e96:	d005      	beq.n	d4ea4 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d4e98:	2b00      	cmp	r3, #0
   d4e9a:	d134      	bne.n	d4f06 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d4e9c:	0571      	lsls	r1, r6, #21
   d4e9e:	d432      	bmi.n	d4f06 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d4ea0:	2301      	movs	r3, #1
   d4ea2:	e002      	b.n	d4eaa <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d4ea4:	2303      	movs	r3, #3
   d4ea6:	e000      	b.n	d4eaa <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d4ea8:	2302      	movs	r3, #2
   d4eaa:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d4eac:	78a1      	ldrb	r1, [r4, #2]
   d4eae:	078b      	lsls	r3, r1, #30
   d4eb0:	d503      	bpl.n	d4eba <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d4eb2:	7823      	ldrb	r3, [r4, #0]
   d4eb4:	f013 0f11 	tst.w	r3, #17
   d4eb8:	d125      	bne.n	d4f06 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d4eba:	b24b      	sxtb	r3, r1
   d4ebc:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d4ec0:	f006 0108 	and.w	r1, r6, #8
   d4ec4:	bf14      	ite	ne
   d4ec6:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d4eca:	2700      	moveq	r7, #0
   d4ecc:	4319      	orrs	r1, r3
   d4ece:	4339      	orrs	r1, r7
   d4ed0:	70a1      	strb	r1, [r4, #2]
   d4ed2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d4ed4:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d4ed6:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d4ed8:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d4eda:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d4ede:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d4ee2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d4ee6:	d504      	bpl.n	d4ef2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d4ee8:	b181      	cbz	r1, d4f0c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4eea:	f000 fa76 	bl	d53da <_ZN9FatVolume9freeChainEm>
   d4eee:	b968      	cbnz	r0, d4f0c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4ef0:	e009      	b.n	d4f06 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d4ef2:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d4ef4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d4ef6:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d4ef8:	0473      	lsls	r3, r6, #17
   d4efa:	d50c      	bpl.n	d4f16 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d4efc:	69e1      	ldr	r1, [r4, #28]
   d4efe:	4620      	mov	r0, r4
   d4f00:	f7ff ff54 	bl	d4dac <_ZN7FatFile7seekSetEm>
   d4f04:	b938      	cbnz	r0, d4f16 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d4f06:	2000      	movs	r0, #0
   d4f08:	7020      	strb	r0, [r4, #0]
  return false;
   d4f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d4f0c:	78a3      	ldrb	r3, [r4, #2]
   d4f0e:	f043 0304 	orr.w	r3, r3, #4
   d4f12:	70a3      	strb	r3, [r4, #2]
   d4f14:	e7f0      	b.n	d4ef8 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d4f16:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d4f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4f1c <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4f1c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d4f1e:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4f20:	4604      	mov	r4, r0
  if (!isOpen()) {
   d4f22:	b90b      	cbnz	r3, d4f28 <_ZN7FatFile4syncEv+0xc>
    return true;
   d4f24:	2001      	movs	r0, #1
   d4f26:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d4f28:	7883      	ldrb	r3, [r0, #2]
   d4f2a:	075a      	lsls	r2, r3, #29
   d4f2c:	d523      	bpl.n	d4f76 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d4f2e:	2101      	movs	r1, #1
   d4f30:	f7ff fe32 	bl	d4b98 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4f34:	4605      	mov	r5, r0
   d4f36:	b928      	cbnz	r0, d4f44 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d4f38:	7863      	ldrb	r3, [r4, #1]
   d4f3a:	f043 0301 	orr.w	r3, r3, #1
   d4f3e:	7063      	strb	r3, [r4, #1]
  return false;
   d4f40:	2000      	movs	r0, #0
   d4f42:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4f44:	7803      	ldrb	r3, [r0, #0]
   d4f46:	2be5      	cmp	r3, #229	; 0xe5
   d4f48:	d0f6      	beq.n	d4f38 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d4f4a:	7823      	ldrb	r3, [r4, #0]
   d4f4c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d4f4e:	bf44      	itt	mi
   d4f50:	69e3      	ldrmi	r3, [r4, #28]
   d4f52:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d4f54:	8c23      	ldrh	r3, [r4, #32]
   d4f56:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d4f58:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4f5a:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d4f5c:	4b09      	ldr	r3, [pc, #36]	; (d4f84 <_ZN7FatFile4syncEv+0x68>)
   d4f5e:	681b      	ldr	r3, [r3, #0]
   d4f60:	b12b      	cbz	r3, d4f6e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d4f62:	f100 0116 	add.w	r1, r0, #22
   d4f66:	3018      	adds	r0, #24
   d4f68:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d4f6a:	8b2b      	ldrh	r3, [r5, #24]
   d4f6c:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d4f6e:	78a3      	ldrb	r3, [r4, #2]
   d4f70:	f023 0304 	bic.w	r3, r3, #4
   d4f74:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d4f76:	68a0      	ldr	r0, [r4, #8]
   d4f78:	f7ff faaa 	bl	d44d0 <_ZN9FatVolume9cacheSyncEv>
   d4f7c:	2800      	cmp	r0, #0
   d4f7e:	d0db      	beq.n	d4f38 <_ZN7FatFile4syncEv+0x1c>
   d4f80:	e7d0      	b.n	d4f24 <_ZN7FatFile4syncEv+0x8>
   d4f82:	bf00      	nop
   d4f84:	2003e3d0 	.word	0x2003e3d0

000d4f88 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d4f88:	b510      	push	{r4, lr}
   d4f8a:	4604      	mov	r4, r0
  bool rtn = sync();
   d4f8c:	f7ff ffc6 	bl	d4f1c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d4f90:	2300      	movs	r3, #0
   d4f92:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d4f94:	bd10      	pop	{r4, pc}

000d4f96 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d4f96:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f98:	b093      	sub	sp, #76	; 0x4c
   d4f9a:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4f9c:	2300      	movs	r3, #0
   d4f9e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d4fa2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4fa6:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d4fa8:	9201      	str	r2, [sp, #4]
   d4faa:	4606      	mov	r6, r0
   d4fac:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4fae:	b10b      	cbz	r3, d4fb4 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d4fb0:	2000      	movs	r0, #0
   d4fb2:	e03d      	b.n	d5030 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4fb4:	780b      	ldrb	r3, [r1, #0]
   d4fb6:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4fba:	d0f9      	beq.n	d4fb0 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d4fbc:	7813      	ldrb	r3, [r2, #0]
   d4fbe:	2b2f      	cmp	r3, #47	; 0x2f
   d4fc0:	d112      	bne.n	d4fe8 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d4fc2:	9b01      	ldr	r3, [sp, #4]
   d4fc4:	781a      	ldrb	r2, [r3, #0]
   d4fc6:	2a2f      	cmp	r2, #47	; 0x2f
   d4fc8:	d102      	bne.n	d4fd0 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d4fca:	3301      	adds	r3, #1
   d4fcc:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d4fce:	e7f8      	b.n	d4fc2 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d4fd0:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d4fd2:	b91a      	cbnz	r2, d4fdc <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d4fd4:	4630      	mov	r0, r6
   d4fd6:	f7ff fdee 	bl	d4bb6 <_ZN7FatFile8openRootEP9FatVolume>
   d4fda:	e029      	b.n	d5030 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d4fdc:	a809      	add	r0, sp, #36	; 0x24
   d4fde:	f7ff fdea 	bl	d4bb6 <_ZN7FatFile8openRootEP9FatVolume>
   d4fe2:	2800      	cmp	r0, #0
   d4fe4:	d0e4      	beq.n	d4fb0 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d4fe6:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d4fe8:	aa01      	add	r2, sp, #4
   d4fea:	a903      	add	r1, sp, #12
   d4fec:	9801      	ldr	r0, [sp, #4]
   d4fee:	f7ff fa8b 	bl	d4508 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d4ff2:	2800      	cmp	r0, #0
   d4ff4:	d0dc      	beq.n	d4fb0 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d4ff6:	9b01      	ldr	r3, [sp, #4]
   d4ff8:	781b      	ldrb	r3, [r3, #0]
   d4ffa:	b19b      	cbz	r3, d5024 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d4ffc:	2300      	movs	r3, #0
   d4ffe:	aa03      	add	r2, sp, #12
   d5000:	4621      	mov	r1, r4
   d5002:	4630      	mov	r0, r6
   d5004:	f7ff fbc2 	bl	d478c <_ZN7FatFile4openEPS_P7fname_ti>
   d5008:	2800      	cmp	r0, #0
   d500a:	d0d1      	beq.n	d4fb0 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d500c:	4635      	mov	r5, r6
   d500e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5010:	ac09      	add	r4, sp, #36	; 0x24
   d5012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5018:	682b      	ldr	r3, [r5, #0]
   d501a:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d501c:	4630      	mov	r0, r6
   d501e:	f7ff ffb3 	bl	d4f88 <_ZN7FatFile5closeEv>
   d5022:	e7e0      	b.n	d4fe6 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d5024:	463b      	mov	r3, r7
   d5026:	aa03      	add	r2, sp, #12
   d5028:	4621      	mov	r1, r4
   d502a:	4630      	mov	r0, r6
   d502c:	f7ff fbae 	bl	d478c <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d5030:	b013      	add	sp, #76	; 0x4c
   d5032:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5034 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5038:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d503a:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d503c:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d503e:	4604      	mov	r4, r0
   d5040:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5042:	d508      	bpl.n	d5056 <_ZN7FatFile5writeEPKvj+0x22>
   d5044:	7883      	ldrb	r3, [r0, #2]
   d5046:	079a      	lsls	r2, r3, #30
   d5048:	d505      	bpl.n	d5056 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d504a:	071b      	lsls	r3, r3, #28
   d504c:	d50b      	bpl.n	d5066 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d504e:	69e1      	ldr	r1, [r4, #28]
   d5050:	f7ff feac 	bl	d4dac <_ZN7FatFile7seekSetEm>
   d5054:	b938      	cbnz	r0, d5066 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5056:	7863      	ldrb	r3, [r4, #1]
   d5058:	f043 0301 	orr.w	r3, r3, #1
   d505c:	7063      	strb	r3, [r4, #1]
  return -1;
   d505e:	f04f 30ff 	mov.w	r0, #4294967295
   d5062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5066:	6963      	ldr	r3, [r4, #20]
   d5068:	43db      	mvns	r3, r3
   d506a:	4598      	cmp	r8, r3
   d506c:	d8f3      	bhi.n	d5056 <_ZN7FatFile5writeEPKvj+0x22>
   d506e:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5070:	f04f 0a00 	mov.w	sl, #0
   d5074:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5076:	2e00      	cmp	r6, #0
   d5078:	f000 8081 	beq.w	d517e <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d507c:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d507e:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5080:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5084:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5088:	d11c      	bne.n	d50c4 <_ZN7FatFile5writeEPKvj+0x90>
   d508a:	b9df      	cbnz	r7, d50c4 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d508c:	6921      	ldr	r1, [r4, #16]
   d508e:	b171      	cbz	r1, d50ae <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5090:	f104 0210 	add.w	r2, r4, #16
   d5094:	f000 f901 	bl	d529a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5098:	2800      	cmp	r0, #0
   d509a:	dbdc      	blt.n	d5056 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d509c:	f040 808e 	bne.w	d51bc <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d50a0:	4620      	mov	r0, r4
   d50a2:	f7ff fd2f 	bl	d4b04 <_ZN7FatFile10addClusterEv>
   d50a6:	2800      	cmp	r0, #0
   d50a8:	f040 8088 	bne.w	d51bc <_ZN7FatFile5writeEPKvj+0x188>
   d50ac:	e7d3      	b.n	d5056 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d50ae:	6a23      	ldr	r3, [r4, #32]
   d50b0:	b93b      	cbnz	r3, d50c2 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d50b2:	4620      	mov	r0, r4
   d50b4:	f7ff fd26 	bl	d4b04 <_ZN7FatFile10addClusterEv>
   d50b8:	2800      	cmp	r0, #0
   d50ba:	d0cc      	beq.n	d5056 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d50bc:	6923      	ldr	r3, [r4, #16]
   d50be:	6223      	str	r3, [r4, #32]
   d50c0:	e000      	b.n	d50c4 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d50c2:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d50c4:	6921      	ldr	r1, [r4, #16]
   d50c6:	68a0      	ldr	r0, [r4, #8]
   d50c8:	f000 f8e1 	bl	d528e <_ZNK9FatVolume17clusterFirstBlockEm>
   d50cc:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d50ce:	b917      	cbnz	r7, d50d6 <_ZN7FatFile5writeEPKvj+0xa2>
   d50d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d50d4:	d221      	bcs.n	d511a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d50d6:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d50da:	42b5      	cmp	r5, r6
   d50dc:	bf28      	it	cs
   d50de:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d50e0:	b937      	cbnz	r7, d50f0 <_ZN7FatFile5writeEPKvj+0xbc>
   d50e2:	6963      	ldr	r3, [r4, #20]
   d50e4:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d50e6:	4293      	cmp	r3, r2
   d50e8:	bf34      	ite	cc
   d50ea:	2201      	movcc	r2, #1
   d50ec:	2205      	movcs	r2, #5
   d50ee:	e000      	b.n	d50f2 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d50f0:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d50f2:	68a0      	ldr	r0, [r4, #8]
   d50f4:	3024      	adds	r0, #36	; 0x24
   d50f6:	f000 f8a6 	bl	d5246 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d50fa:	2800      	cmp	r0, #0
   d50fc:	d0ab      	beq.n	d5056 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d50fe:	4438      	add	r0, r7
   d5100:	462a      	mov	r2, r5
   d5102:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5104:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5106:	f001 ffc2 	bl	d708e <memcpy>
      if (512 == (n + blockOffset)) {
   d510a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d510e:	d130      	bne.n	d5172 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5110:	68a0      	ldr	r0, [r4, #8]
   d5112:	3024      	adds	r0, #36	; 0x24
   d5114:	f000 f870 	bl	d51f8 <_ZN8FatCache4syncEv>
   d5118:	e017      	b.n	d514a <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d511a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d511e:	68a0      	ldr	r0, [r4, #8]
   d5120:	d315      	bcc.n	d514e <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5122:	7902      	ldrb	r2, [r0, #4]
   d5124:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5126:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5128:	b2d2      	uxtb	r2, r2
   d512a:	4293      	cmp	r3, r2
   d512c:	bf28      	it	cs
   d512e:	4613      	movcs	r3, r2
   d5130:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5132:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5134:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5138:	d302      	bcc.n	d5140 <_ZN7FatFile5writeEPKvj+0x10c>
   d513a:	441a      	add	r2, r3
   d513c:	4291      	cmp	r1, r2
   d513e:	d337      	bcc.n	d51b0 <_ZN7FatFile5writeEPKvj+0x17c>
   d5140:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5142:	464a      	mov	r2, r9
   d5144:	6838      	ldr	r0, [r7, #0]
   d5146:	f000 fc6d 	bl	d5a24 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d514a:	b990      	cbnz	r0, d5172 <_ZN7FatFile5writeEPKvj+0x13e>
   d514c:	e783      	b.n	d5056 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d514e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5150:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5152:	bf02      	ittt	eq
   d5154:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5158:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d515c:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d515e:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5160:	464a      	mov	r2, r9
   d5162:	6818      	ldr	r0, [r3, #0]
   d5164:	f000 fbec 	bl	d5940 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5168:	2800      	cmp	r0, #0
   d516a:	f43f af74 	beq.w	d5056 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d516e:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5172:	6963      	ldr	r3, [r4, #20]
   d5174:	442b      	add	r3, r5
   d5176:	6163      	str	r3, [r4, #20]
    src += n;
   d5178:	44a9      	add	r9, r5
    nToWrite -= n;
   d517a:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d517c:	e77a      	b.n	d5074 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d517e:	69e2      	ldr	r2, [r4, #28]
   d5180:	4293      	cmp	r3, r2
   d5182:	d901      	bls.n	d5188 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5184:	61e3      	str	r3, [r4, #28]
   d5186:	e002      	b.n	d518e <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5188:	4b0f      	ldr	r3, [pc, #60]	; (d51c8 <_ZN7FatFile5writeEPKvj+0x194>)
   d518a:	681b      	ldr	r3, [r3, #0]
   d518c:	b11b      	cbz	r3, d5196 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d518e:	78a3      	ldrb	r3, [r4, #2]
   d5190:	f043 0304 	orr.w	r3, r3, #4
   d5194:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5196:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d519a:	2b00      	cmp	r3, #0
   d519c:	db02      	blt.n	d51a4 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d519e:	4640      	mov	r0, r8
   d51a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d51a4:	4620      	mov	r0, r4
   d51a6:	f7ff feb9 	bl	d4f1c <_ZN7FatFile4syncEv>
   d51aa:	2800      	cmp	r0, #0
   d51ac:	d1f7      	bne.n	d519e <_ZN7FatFile5writeEPKvj+0x16a>
   d51ae:	e752      	b.n	d5056 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d51b0:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d51b4:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d51b8:	62c2      	str	r2, [r0, #44]	; 0x2c
   d51ba:	e7c1      	b.n	d5140 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d51bc:	6921      	ldr	r1, [r4, #16]
   d51be:	68a0      	ldr	r0, [r4, #8]
   d51c0:	f000 f865 	bl	d528e <_ZNK9FatVolume17clusterFirstBlockEm>
   d51c4:	4601      	mov	r1, r0
   d51c6:	e783      	b.n	d50d0 <_ZN7FatFile5writeEPKvj+0x9c>
   d51c8:	2003e3d0 	.word	0x2003e3d0

000d51cc <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d51cc:	f000 bd12 	b.w	d5bf4 <HAL_Pin_Map>

000d51d0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d51d0:	b570      	push	{r4, r5, r6, lr}
   d51d2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d51d4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d51d6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d51d8:	b149      	cbz	r1, d51ee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d51da:	f001 ff93 	bl	d7104 <strlen>
   d51de:	682b      	ldr	r3, [r5, #0]
   d51e0:	4602      	mov	r2, r0
   d51e2:	4621      	mov	r1, r4
   d51e4:	4628      	mov	r0, r5
   d51e6:	68db      	ldr	r3, [r3, #12]
    }
   d51e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d51ec:	4718      	bx	r3
    }
   d51ee:	bd70      	pop	{r4, r5, r6, pc}

000d51f0 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d51f0:	f000 bd00 	b.w	d5bf4 <HAL_Pin_Map>

000d51f4 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d51f4:	f000 bcfe 	b.w	d5bf4 <HAL_Pin_Map>

000d51f8 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d51f8:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d51fa:	7803      	ldrb	r3, [r0, #0]
   d51fc:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d51fe:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5200:	d51e      	bpl.n	d5240 <_ZN8FatCache4syncEv+0x48>
   d5202:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5204:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5206:	f100 060c 	add.w	r6, r0, #12
   d520a:	4632      	mov	r2, r6
   d520c:	6818      	ldr	r0, [r3, #0]
   d520e:	f000 fb97 	bl	d5940 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5212:	4605      	mov	r5, r0
   d5214:	b908      	cbnz	r0, d521a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5216:	2500      	movs	r5, #0
   d5218:	e013      	b.n	d5242 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d521a:	7823      	ldrb	r3, [r4, #0]
   d521c:	079b      	lsls	r3, r3, #30
   d521e:	d404      	bmi.n	d522a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5220:	7823      	ldrb	r3, [r4, #0]
   d5222:	f023 0301 	bic.w	r3, r3, #1
   d5226:	7023      	strb	r3, [r4, #0]
   d5228:	e00b      	b.n	d5242 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d522a:	6863      	ldr	r3, [r4, #4]
   d522c:	68a0      	ldr	r0, [r4, #8]
   d522e:	6919      	ldr	r1, [r3, #16]
   d5230:	4632      	mov	r2, r6
   d5232:	4401      	add	r1, r0
   d5234:	6818      	ldr	r0, [r3, #0]
   d5236:	f000 fb83 	bl	d5940 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d523a:	2800      	cmp	r0, #0
   d523c:	d1f0      	bne.n	d5220 <_ZN8FatCache4syncEv+0x28>
   d523e:	e7ea      	b.n	d5216 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5240:	2501      	movs	r5, #1

fail:
  return false;
}
   d5242:	4628      	mov	r0, r5
   d5244:	bd70      	pop	{r4, r5, r6, pc}

000d5246 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5246:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5248:	6883      	ldr	r3, [r0, #8]
   d524a:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d524c:	4604      	mov	r4, r0
   d524e:	460e      	mov	r6, r1
   d5250:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5252:	d014      	beq.n	d527e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5254:	f7ff ffd0 	bl	d51f8 <_ZN8FatCache4syncEv>
   d5258:	b908      	cbnz	r0, d525e <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d525a:	2000      	movs	r0, #0
   d525c:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d525e:	076b      	lsls	r3, r5, #29
   d5260:	d503      	bpl.n	d526a <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5262:	2300      	movs	r3, #0
   d5264:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5266:	60a6      	str	r6, [r4, #8]
   d5268:	e009      	b.n	d527e <_ZN8FatCache4readEmh+0x38>
   d526a:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d526c:	f104 020c 	add.w	r2, r4, #12
   d5270:	4631      	mov	r1, r6
   d5272:	6818      	ldr	r0, [r3, #0]
   d5274:	f000 fada 	bl	d582c <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5278:	2800      	cmp	r0, #0
   d527a:	d1f2      	bne.n	d5262 <_ZN8FatCache4readEmh+0x1c>
   d527c:	e7ed      	b.n	d525a <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d527e:	7823      	ldrb	r3, [r4, #0]
   d5280:	4620      	mov	r0, r4
   d5282:	f005 0503 	and.w	r5, r5, #3
   d5286:	431d      	orrs	r5, r3
   d5288:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d528c:	bd70      	pop	{r4, r5, r6, pc}

000d528e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d528e:	7983      	ldrb	r3, [r0, #6]
   d5290:	6940      	ldr	r0, [r0, #20]
   d5292:	3902      	subs	r1, #2
   d5294:	4099      	lsls	r1, r3
}
   d5296:	4408      	add	r0, r1
   d5298:	4770      	bx	lr

000d529a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d529a:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d529c:	b570      	push	{r4, r5, r6, lr}
   d529e:	4605      	mov	r5, r0
   d52a0:	460c      	mov	r4, r1
   d52a2:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d52a4:	d802      	bhi.n	d52ac <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d52a6:	f04f 30ff 	mov.w	r0, #4294967295
   d52aa:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d52ac:	69c3      	ldr	r3, [r0, #28]
   d52ae:	4299      	cmp	r1, r3
   d52b0:	d8f9      	bhi.n	d52a6 <_ZN9FatVolume6fatGetEmPm+0xc>
   d52b2:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d52b4:	2b20      	cmp	r3, #32
   d52b6:	d110      	bne.n	d52da <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d52b8:	6981      	ldr	r1, [r0, #24]
   d52ba:	2202      	movs	r2, #2
   d52bc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d52c0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d52c4:	f7ff ffbf 	bl	d5246 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d52c8:	2800      	cmp	r0, #0
   d52ca:	d0ec      	beq.n	d52a6 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d52cc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d52d0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d52d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d52d8:	e00f      	b.n	d52fa <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d52da:	2b10      	cmp	r3, #16
   d52dc:	d1e3      	bne.n	d52a6 <_ZN9FatVolume6fatGetEmPm+0xc>
   d52de:	6983      	ldr	r3, [r0, #24]
   d52e0:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d52e4:	2202      	movs	r2, #2
   d52e6:	4419      	add	r1, r3
   d52e8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d52ec:	f7ff ffab 	bl	d5246 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d52f0:	2800      	cmp	r0, #0
   d52f2:	d0d8      	beq.n	d52a6 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d52f4:	b2e4      	uxtb	r4, r4
   d52f6:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d52fa:	69ea      	ldr	r2, [r5, #28]
   d52fc:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d52fe:	bf9a      	itte	ls
   d5300:	6033      	strls	r3, [r6, #0]
  return 1;
   d5302:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5304:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d5306:	bd70      	pop	{r4, r5, r6, pc}

000d5308 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5308:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d530a:	b538      	push	{r3, r4, r5, lr}
   d530c:	460c      	mov	r4, r1
   d530e:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5310:	d801      	bhi.n	d5316 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5312:	2000      	movs	r0, #0
   d5314:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5316:	69c3      	ldr	r3, [r0, #28]
   d5318:	4299      	cmp	r1, r3
   d531a:	d8fa      	bhi.n	d5312 <_ZN9FatVolume6fatPutEmm+0xa>
   d531c:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d531e:	2b20      	cmp	r3, #32
   d5320:	d10e      	bne.n	d5340 <_ZN9FatVolume6fatPutEmm+0x38>
   d5322:	6981      	ldr	r1, [r0, #24]
   d5324:	2203      	movs	r2, #3
   d5326:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d532a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d532e:	f7ff ff8a 	bl	d5246 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5332:	2800      	cmp	r0, #0
   d5334:	d0ed      	beq.n	d5312 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d5336:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d533a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d533e:	e00f      	b.n	d5360 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5340:	2b10      	cmp	r3, #16
   d5342:	d1e6      	bne.n	d5312 <_ZN9FatVolume6fatPutEmm+0xa>
   d5344:	6983      	ldr	r3, [r0, #24]
   d5346:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d534a:	2203      	movs	r2, #3
   d534c:	4419      	add	r1, r3
   d534e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5352:	f7ff ff78 	bl	d5246 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5356:	2800      	cmp	r0, #0
   d5358:	d0db      	beq.n	d5312 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d535a:	b2e4      	uxtb	r4, r4
   d535c:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5360:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d5362:	bd38      	pop	{r3, r4, r5, pc}

000d5364 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5368:	68c4      	ldr	r4, [r0, #12]
   d536a:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d536c:	4605      	mov	r5, r0
   d536e:	460e      	mov	r6, r1
   d5370:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5372:	d207      	bcs.n	d5384 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d5374:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d5376:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5378:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d537a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d537c:	429c      	cmp	r4, r3
   d537e:	d903      	bls.n	d5388 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d5380:	b9cf      	cbnz	r7, d53b6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d5382:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5384:	2701      	movs	r7, #1
   d5386:	e7f7      	b.n	d5378 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5388:	42a6      	cmp	r6, r4
   d538a:	d014      	beq.n	d53b6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d538c:	aa01      	add	r2, sp, #4
   d538e:	4621      	mov	r1, r4
   d5390:	4628      	mov	r0, r5
   d5392:	f7ff ff82 	bl	d529a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5396:	2800      	cmp	r0, #0
   d5398:	db0d      	blt.n	d53b6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d539a:	d0ed      	beq.n	d5378 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d539c:	9b01      	ldr	r3, [sp, #4]
   d539e:	2b00      	cmp	r3, #0
   d53a0:	d1ea      	bne.n	d5378 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d53a2:	b107      	cbz	r7, d53a6 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d53a4:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d53a6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d53aa:	4621      	mov	r1, r4
   d53ac:	4628      	mov	r0, r5
   d53ae:	f7ff ffab 	bl	d5308 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d53b2:	4607      	mov	r7, r0
   d53b4:	b908      	cbnz	r0, d53ba <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d53b6:	2700      	movs	r7, #0
   d53b8:	e00b      	b.n	d53d2 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d53ba:	b916      	cbnz	r6, d53c2 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d53bc:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d53c0:	e007      	b.n	d53d2 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d53c2:	4622      	mov	r2, r4
   d53c4:	4631      	mov	r1, r6
   d53c6:	4628      	mov	r0, r5
   d53c8:	f7ff ff9e 	bl	d5308 <_ZN9FatVolume6fatPutEmm>
   d53cc:	2800      	cmp	r0, #0
   d53ce:	d1f5      	bne.n	d53bc <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d53d0:	e7f1      	b.n	d53b6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d53d2:	4638      	mov	r0, r7
   d53d4:	b002      	add	sp, #8
   d53d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d53da <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d53da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d53dc:	4605      	mov	r5, r0
   d53de:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d53e0:	aa01      	add	r2, sp, #4
   d53e2:	4621      	mov	r1, r4
   d53e4:	4628      	mov	r0, r5
   d53e6:	f7ff ff58 	bl	d529a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d53ea:	1e06      	subs	r6, r0, #0
   d53ec:	da01      	bge.n	d53f2 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d53ee:	2000      	movs	r0, #0
   d53f0:	e00f      	b.n	d5412 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d53f2:	2200      	movs	r2, #0
   d53f4:	4621      	mov	r1, r4
   d53f6:	4628      	mov	r0, r5
   d53f8:	f7ff ff86 	bl	d5308 <_ZN9FatVolume6fatPutEmm>
   d53fc:	2800      	cmp	r0, #0
   d53fe:	d0f6      	beq.n	d53ee <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d5400:	68eb      	ldr	r3, [r5, #12]
   d5402:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d5404:	bf9c      	itt	ls
   d5406:	f104 34ff 	addls.w	r4, r4, #4294967295
   d540a:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d540c:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d540e:	2e00      	cmp	r6, #0
   d5410:	d1e6      	bne.n	d53e0 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d5412:	b002      	add	sp, #8
   d5414:	bd70      	pop	{r4, r5, r6, pc}

000d5416 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5416:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d5418:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d541a:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d541c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d541e:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5420:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5424:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d5426:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5428:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d542a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d542e:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5430:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5434:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d5438:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d543c:	b1a1      	cbz	r1, d5468 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d543e:	2904      	cmp	r1, #4
   d5440:	d85d      	bhi.n	d54fe <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5442:	4611      	mov	r1, r2
   d5444:	3024      	adds	r0, #36	; 0x24
   d5446:	f7ff fefe 	bl	d5246 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d544a:	2800      	cmp	r0, #0
   d544c:	d057      	beq.n	d54fe <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d544e:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d5452:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d5456:	065b      	lsls	r3, r3, #25
   d5458:	d151      	bne.n	d54fe <_ZN9FatVolume4initEh+0xe8>
   d545a:	351b      	adds	r5, #27
   d545c:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d5460:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d5464:	2d00      	cmp	r5, #0
   d5466:	d04a      	beq.n	d54fe <_ZN9FatVolume4initEh+0xe8>
   d5468:	2200      	movs	r2, #0
   d546a:	4629      	mov	r1, r5
   d546c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5470:	f7ff fee9 	bl	d5246 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d5474:	2800      	cmp	r0, #0
   d5476:	d042      	beq.n	d54fe <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d5478:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d547c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d5480:	d13d      	bne.n	d54fe <_ZN9FatVolume4initEh+0xe8>
   d5482:	7c03      	ldrb	r3, [r0, #16]
   d5484:	2b02      	cmp	r3, #2
   d5486:	d13a      	bne.n	d54fe <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d5488:	89c3      	ldrh	r3, [r0, #14]
   d548a:	2b00      	cmp	r3, #0
   d548c:	d037      	beq.n	d54fe <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d548e:	7b41      	ldrb	r1, [r0, #13]
   d5490:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d5492:	1e4b      	subs	r3, r1, #1
   d5494:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d5496:	2300      	movs	r3, #0
   d5498:	71a3      	strb	r3, [r4, #6]
   d549a:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d549c:	2301      	movs	r3, #1
   d549e:	428b      	cmp	r3, r1
   d54a0:	d007      	beq.n	d54b2 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d54a2:	3e01      	subs	r6, #1
   d54a4:	d02b      	beq.n	d54fe <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d54a6:	79a2      	ldrb	r2, [r4, #6]
   d54a8:	005b      	lsls	r3, r3, #1
   d54aa:	3201      	adds	r2, #1
   d54ac:	b2db      	uxtb	r3, r3
   d54ae:	71a2      	strb	r2, [r4, #6]
   d54b0:	e7f5      	b.n	d549e <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d54b2:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d54b4:	b902      	cbnz	r2, d54b8 <_ZN9FatVolume4initEh+0xa2>
   d54b6:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d54b8:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d54ba:	89c6      	ldrh	r6, [r0, #14]
   d54bc:	442e      	add	r6, r5
   d54be:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d54c0:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d54c4:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d54c6:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d54ca:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d54cc:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d54d0:	0152      	lsls	r2, r2, #5
   d54d2:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d54d6:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d54da:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d54dc:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d54e0:	b903      	cbnz	r3, d54e4 <_ZN9FatVolume4initEh+0xce>
   d54e2:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d54e4:	1aad      	subs	r5, r5, r2
   d54e6:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d54e8:	79a5      	ldrb	r5, [r4, #6]
   d54ea:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d54ee:	1c6b      	adds	r3, r5, #1
   d54f0:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d54f2:	f640 73f4 	movw	r3, #4084	; 0xff4
   d54f6:	429d      	cmp	r5, r3
   d54f8:	d803      	bhi.n	d5502 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d54fa:	230c      	movs	r3, #12
   d54fc:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d54fe:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d5500:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d5502:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d5506:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d5508:	bf85      	ittet	hi
   d550a:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d550c:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d550e:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d5510:	2320      	movhi	r3, #32
   d5512:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d5514:	2001      	movs	r0, #1

fail:
  return false;
}
   d5516:	bd70      	pop	{r4, r5, r6, pc}

000d5518 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d5518:	f000 bb6c 	b.w	d5bf4 <HAL_Pin_Map>

000d551c <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d551c:	f000 bb6a 	b.w	d5bf4 <HAL_Pin_Map>

000d5520 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d5520:	f000 bb68 	b.w	d5bf4 <HAL_Pin_Map>

000d5524 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5524:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5526:	4c0e      	ldr	r4, [pc, #56]	; (d5560 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5528:	460e      	mov	r6, r1
   d552a:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d552c:	f000 fbf2 	bl	d5d14 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5530:	6823      	ldr	r3, [r4, #0]
   d5532:	1ac0      	subs	r0, r0, r3
   d5534:	4b0b      	ldr	r3, [pc, #44]	; (d5564 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d5536:	4298      	cmp	r0, r3
   d5538:	d908      	bls.n	d554c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d553a:	f000 fbf3 	bl	d5d24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d553e:	4b0a      	ldr	r3, [pc, #40]	; (d5568 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d5540:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5542:	f000 fd4b 	bl	d5fdc <spark_process>
   d5546:	f000 fbe5 	bl	d5d14 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d554a:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d554c:	f000 fbea 	bl	d5d24 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d5550:	b280      	uxth	r0, r0
   d5552:	1b80      	subs	r0, r0, r6
}
   d5554:	42a8      	cmp	r0, r5
   d5556:	bfd4      	ite	le
   d5558:	2000      	movle	r0, #0
   d555a:	2001      	movgt	r0, #1
   d555c:	bd70      	pop	{r4, r5, r6, pc}
   d555e:	bf00      	nop
   d5560:	2003e3d4 	.word	0x2003e3d4
   d5564:	000186a0 	.word	0x000186a0
   d5568:	2003e730 	.word	0x2003e730

000d556c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d556c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d556e:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5570:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d5572:	b94d      	cbnz	r5, d5588 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5574:	6840      	ldr	r0, [r0, #4]
   d5576:	f000 fa7d 	bl	d5a74 <_ZN14SdSpiAltDriver8activateEv>
   d557a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d557c:	4629      	mov	r1, r5
   d557e:	7d18      	ldrb	r0, [r3, #20]
   d5580:	f001 fb7b 	bl	d6c7a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5584:	2301      	movs	r3, #1
   d5586:	7223      	strb	r3, [r4, #8]
   d5588:	bd38      	pop	{r3, r4, r5, pc}

000d558a <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d558a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d558c:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d558e:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5590:	b16b      	cbz	r3, d55ae <_ZN9SdSpiCard7spiStopEv+0x24>
   d5592:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5594:	2101      	movs	r1, #1
   d5596:	7d18      	ldrb	r0, [r3, #20]
   d5598:	f001 fb6f 	bl	d6c7a <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d559c:	21ff      	movs	r1, #255	; 0xff
   d559e:	6860      	ldr	r0, [r4, #4]
   d55a0:	f000 fa9a 	bl	d5ad8 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d55a4:	6860      	ldr	r0, [r4, #4]
   d55a6:	f000 fa79 	bl	d5a9c <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d55aa:	2300      	movs	r3, #0
   d55ac:	7223      	strb	r3, [r4, #8]
   d55ae:	bd10      	pop	{r4, pc}

000d55b0 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d55b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55b2:	4604      	mov	r4, r0
   d55b4:	460d      	mov	r5, r1
   d55b6:	4616      	mov	r6, r2
   d55b8:	f000 fbb4 	bl	d5d24 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d55bc:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d55be:	6860      	ldr	r0, [r4, #4]
   d55c0:	f000 fa6f 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d55c4:	28ff      	cmp	r0, #255	; 0xff
   d55c6:	7260      	strb	r0, [r4, #9]
   d55c8:	d109      	bne.n	d55de <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d55ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55ce:	4639      	mov	r1, r7
   d55d0:	4620      	mov	r0, r4
   d55d2:	f7ff ffa7 	bl	d5524 <_ZN9SdSpiCard10isTimedOutEtt>
   d55d6:	2800      	cmp	r0, #0
   d55d8:	d0f1      	beq.n	d55be <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d55da:	2355      	movs	r3, #85	; 0x55
   d55dc:	e00b      	b.n	d55f6 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d55de:	28fe      	cmp	r0, #254	; 0xfe
   d55e0:	d001      	beq.n	d55e6 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d55e2:	2350      	movs	r3, #80	; 0x50
   d55e4:	e007      	b.n	d55f6 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d55e6:	4632      	mov	r2, r6
   d55e8:	4629      	mov	r1, r5
   d55ea:	6860      	ldr	r0, [r4, #4]
   d55ec:	f000 fa5e 	bl	d5aac <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d55f0:	7260      	strb	r0, [r4, #9]
   d55f2:	b130      	cbz	r0, d5602 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d55f4:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d55f6:	4620      	mov	r0, r4
   d55f8:	7023      	strb	r3, [r4, #0]
   d55fa:	f7ff ffc6 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d55fe:	2000      	movs	r0, #0
}
   d5600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5602:	6860      	ldr	r0, [r4, #4]
   d5604:	f000 fa4d 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
   d5608:	6860      	ldr	r0, [r4, #4]
   d560a:	f000 fa4a 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
   d560e:	2001      	movs	r0, #1
   d5610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5612 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d5612:	b570      	push	{r4, r5, r6, lr}
   d5614:	4604      	mov	r4, r0
   d5616:	460e      	mov	r6, r1
   d5618:	f000 fb84 	bl	d5d24 <HAL_Timer_Get_Milli_Seconds>
   d561c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d561e:	4632      	mov	r2, r6
   d5620:	4629      	mov	r1, r5
   d5622:	4620      	mov	r0, r4
   d5624:	f7ff ff7e 	bl	d5524 <_ZN9SdSpiCard10isTimedOutEtt>
   d5628:	b930      	cbnz	r0, d5638 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d562a:	6860      	ldr	r0, [r4, #4]
   d562c:	f000 fa39 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d5630:	28ff      	cmp	r0, #255	; 0xff
   d5632:	d1f4      	bne.n	d561e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d5634:	2001      	movs	r0, #1
   d5636:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5638:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d563a:	bd70      	pop	{r4, r5, r6, pc}

000d563c <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d563c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d563e:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5640:	9201      	str	r2, [sp, #4]
   d5642:	4604      	mov	r4, r0
   d5644:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d5646:	b90b      	cbnz	r3, d564c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5648:	f7ff ff90 	bl	d556c <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d564c:	b125      	cbz	r5, d5658 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d564e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5652:	4620      	mov	r0, r4
   d5654:	f7ff ffdd 	bl	d5612 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5658:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d565c:	6860      	ldr	r0, [r4, #4]
   d565e:	f000 fa3b 	bl	d5ad8 <_ZN14SdSpiAltDriver4sendEh>
   d5662:	f10d 0607 	add.w	r6, sp, #7
   d5666:	f10d 0703 	add.w	r7, sp, #3
   d566a:	f816 1901 	ldrb.w	r1, [r6], #-1
   d566e:	6860      	ldr	r0, [r4, #4]
   d5670:	f000 fa32 	bl	d5ad8 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d5674:	42be      	cmp	r6, r7
   d5676:	d1f8      	bne.n	d566a <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d5678:	2d00      	cmp	r5, #0
   d567a:	bf0c      	ite	eq
   d567c:	2195      	moveq	r1, #149	; 0x95
   d567e:	2187      	movne	r1, #135	; 0x87
   d5680:	6860      	ldr	r0, [r4, #4]
   d5682:	f000 fa29 	bl	d5ad8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5686:	6860      	ldr	r0, [r4, #4]
   d5688:	f000 fa0b 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
   d568c:	250b      	movs	r5, #11
   d568e:	6860      	ldr	r0, [r4, #4]
   d5690:	f000 fa07 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5694:	0603      	lsls	r3, r0, #24
   d5696:	7260      	strb	r0, [r4, #9]
   d5698:	d503      	bpl.n	d56a2 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d569a:	3d01      	subs	r5, #1
   d569c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d56a0:	d1f5      	bne.n	d568e <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d56a2:	b003      	add	sp, #12
   d56a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d56a6 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d56a6:	b570      	push	{r4, r5, r6, lr}
   d56a8:	4604      	mov	r4, r0
   d56aa:	460d      	mov	r5, r1
   d56ac:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d56ae:	2137      	movs	r1, #55	; 0x37
   d56b0:	2200      	movs	r2, #0
   d56b2:	f7ff ffc3 	bl	d563c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d56b6:	4632      	mov	r2, r6
   d56b8:	4629      	mov	r1, r5
   d56ba:	4620      	mov	r0, r4
  }
   d56bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d56c0:	f7ff bfbc 	b.w	d563c <_ZN9SdSpiCard11cardCommandEhm>

000d56c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d56c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d56c8:	2500      	movs	r5, #0
   d56ca:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d56cc:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d56ce:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d56d0:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d56d2:	4604      	mov	r4, r0
   d56d4:	4690      	mov	r8, r2
   d56d6:	461e      	mov	r6, r3
   d56d8:	f000 fb24 	bl	d5d24 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d56dc:	4641      	mov	r1, r8
   d56de:	4607      	mov	r7, r0
   d56e0:	6860      	ldr	r0, [r4, #4]
   d56e2:	f000 f9cb 	bl	d5a7c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d56e6:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d56e8:	4a4f      	ldr	r2, [pc, #316]	; (d5828 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d56ea:	721d      	strb	r5, [r3, #8]
   d56ec:	f04f 0801 	mov.w	r8, #1
   d56f0:	60da      	str	r2, [r3, #12]
   d56f2:	745d      	strb	r5, [r3, #17]
   d56f4:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d56f8:	4620      	mov	r0, r4
   d56fa:	f7ff ff37 	bl	d556c <_ZN9SdSpiCard8spiStartEv>
   d56fe:	6863      	ldr	r3, [r4, #4]
   d5700:	4641      	mov	r1, r8
   d5702:	7d18      	ldrb	r0, [r3, #20]
   d5704:	f001 fab9 	bl	d6c7a <digitalWrite>
   d5708:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d570a:	21ff      	movs	r1, #255	; 0xff
   d570c:	6860      	ldr	r0, [r4, #4]
   d570e:	3d01      	subs	r5, #1
   d5710:	f000 f9e2 	bl	d5ad8 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d5714:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5718:	d1f7      	bne.n	d570a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d571a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d571c:	4629      	mov	r1, r5
   d571e:	7d18      	ldrb	r0, [r3, #20]
   d5720:	f001 faab 	bl	d6c7a <digitalWrite>
   d5724:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d5726:	2200      	movs	r2, #0
   d5728:	4611      	mov	r1, r2
   d572a:	4620      	mov	r0, r4
   d572c:	f7ff ff86 	bl	d563c <_ZN9SdSpiCard11cardCommandEhm>
   d5730:	2801      	cmp	r0, #1
   d5732:	4680      	mov	r8, r0
   d5734:	d012      	beq.n	d575c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d5736:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d5738:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d573c:	d101      	bne.n	d5742 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d573e:	2320      	movs	r3, #32
   d5740:	e057      	b.n	d57f2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5742:	21fd      	movs	r1, #253	; 0xfd
   d5744:	6860      	ldr	r0, [r4, #4]
   d5746:	f000 f9c7 	bl	d5ad8 <_ZN14SdSpiAltDriver4sendEh>
   d574a:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d574e:	6860      	ldr	r0, [r4, #4]
   d5750:	f000 f9a7 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d5754:	f1b8 0801 	subs.w	r8, r8, #1
   d5758:	d1f9      	bne.n	d574e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d575a:	e7e4      	b.n	d5726 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d575c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d5760:	2108      	movs	r1, #8
   d5762:	4620      	mov	r0, r4
   d5764:	f7ff ff6a 	bl	d563c <_ZN9SdSpiCard11cardCommandEhm>
   d5768:	2805      	cmp	r0, #5
   d576a:	d102      	bne.n	d5772 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d576c:	f884 800a 	strb.w	r8, [r4, #10]
   d5770:	e00f      	b.n	d5792 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d5772:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5774:	6860      	ldr	r0, [r4, #4]
   d5776:	f000 f994 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
   d577a:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d577c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d5780:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5782:	d1f7      	bne.n	d5774 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d5784:	28aa      	cmp	r0, #170	; 0xaa
   d5786:	d102      	bne.n	d578e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5788:	2302      	movs	r3, #2
   d578a:	72a3      	strb	r3, [r4, #10]
   d578c:	e001      	b.n	d5792 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d578e:	2325      	movs	r3, #37	; 0x25
   d5790:	e02f      	b.n	d57f2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d5792:	7aa3      	ldrb	r3, [r4, #10]
   d5794:	2b02      	cmp	r3, #2
   d5796:	bf0c      	ite	eq
   d5798:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d579c:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d579e:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d57a0:	462a      	mov	r2, r5
   d57a2:	2129      	movs	r1, #41	; 0x29
   d57a4:	4620      	mov	r0, r4
   d57a6:	f7ff ff7e 	bl	d56a6 <_ZN9SdSpiCard8cardAcmdEhm>
   d57aa:	4602      	mov	r2, r0
   d57ac:	b148      	cbz	r0, d57c2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d57ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d57b2:	4639      	mov	r1, r7
   d57b4:	4620      	mov	r0, r4
   d57b6:	f7ff feb5 	bl	d5524 <_ZN9SdSpiCard10isTimedOutEtt>
   d57ba:	2800      	cmp	r0, #0
   d57bc:	d0f0      	beq.n	d57a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d57be:	2343      	movs	r3, #67	; 0x43
   d57c0:	e017      	b.n	d57f2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d57c2:	7aa3      	ldrb	r3, [r4, #10]
   d57c4:	2b02      	cmp	r3, #2
   d57c6:	d00e      	beq.n	d57e6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d57c8:	4620      	mov	r0, r4
   d57ca:	f7ff fede 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d57ce:	6863      	ldr	r3, [r4, #4]
   d57d0:	68b0      	ldr	r0, [r6, #8]
   d57d2:	7934      	ldrb	r4, [r6, #4]
   d57d4:	7b31      	ldrb	r1, [r6, #12]
   d57d6:	7b72      	ldrb	r2, [r6, #13]
   d57d8:	745a      	strb	r2, [r3, #17]
   d57da:	60d8      	str	r0, [r3, #12]
   d57dc:	721c      	strb	r4, [r3, #8]
   d57de:	7419      	strb	r1, [r3, #16]
  return true;
   d57e0:	2001      	movs	r0, #1
   d57e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d57e6:	213a      	movs	r1, #58	; 0x3a
   d57e8:	4620      	mov	r0, r4
   d57ea:	f7ff ff27 	bl	d563c <_ZN9SdSpiCard11cardCommandEhm>
   d57ee:	b138      	cbz	r0, d5800 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d57f0:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d57f2:	4620      	mov	r0, r4
   d57f4:	7023      	strb	r3, [r4, #0]
   d57f6:	f7ff fec8 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d57fa:	2000      	movs	r0, #0
}
   d57fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5800:	6860      	ldr	r0, [r4, #4]
   d5802:	f000 f94e 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d5806:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d580a:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d580c:	bf04      	itt	eq
   d580e:	2303      	moveq	r3, #3
   d5810:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5812:	6860      	ldr	r0, [r4, #4]
   d5814:	f000 f945 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
   d5818:	6860      	ldr	r0, [r4, #4]
   d581a:	f000 f942 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
   d581e:	6860      	ldr	r0, [r4, #4]
   d5820:	f000 f93f 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
   d5824:	e7d0      	b.n	d57c8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d5826:	bf00      	nop
   d5828:	0003d090 	.word	0x0003d090

000d582c <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d582c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d582e:	7a83      	ldrb	r3, [r0, #10]
   d5830:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5832:	bf18      	it	ne
   d5834:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5836:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5838:	460a      	mov	r2, r1
   d583a:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d583c:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d583e:	f7ff fefd 	bl	d563c <_ZN9SdSpiCard11cardCommandEhm>
   d5842:	b110      	cbz	r0, d584a <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5844:	2330      	movs	r3, #48	; 0x30
   d5846:	7023      	strb	r3, [r4, #0]
   d5848:	e00b      	b.n	d5862 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d584a:	4629      	mov	r1, r5
   d584c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5850:	4620      	mov	r0, r4
   d5852:	f7ff fead 	bl	d55b0 <_ZN9SdSpiCard8readDataEPhj>
   d5856:	4605      	mov	r5, r0
   d5858:	b118      	cbz	r0, d5862 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d585a:	4620      	mov	r0, r4
   d585c:	f7ff fe95 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5860:	e003      	b.n	d586a <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d5862:	4620      	mov	r0, r4
   d5864:	f7ff fe91 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5868:	2500      	movs	r5, #0
}
   d586a:	4628      	mov	r0, r5
   d586c:	bd38      	pop	{r3, r4, r5, pc}

000d586e <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d586e:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d5870:	7a83      	ldrb	r3, [r0, #10]
   d5872:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5874:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5876:	bf18      	it	ne
   d5878:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d587a:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d587c:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d587e:	f7ff fedd 	bl	d563c <_ZN9SdSpiCard11cardCommandEhm>
   d5882:	b130      	cbz	r0, d5892 <_ZN9SdSpiCard9readStartEm+0x24>
   d5884:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d5886:	4620      	mov	r0, r4
   d5888:	7023      	strb	r3, [r4, #0]
   d588a:	f7ff fe7e 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d588e:	2000      	movs	r0, #0
   d5890:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d5892:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5894:	bd10      	pop	{r4, pc}

000d5896 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5896:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d5898:	2200      	movs	r2, #0
   d589a:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d589c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d589e:	f7ff fecd 	bl	d563c <_ZN9SdSpiCard11cardCommandEhm>
   d58a2:	b130      	cbz	r0, d58b2 <_ZN9SdSpiCard8readStopEv+0x1c>
   d58a4:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d58a6:	4620      	mov	r0, r4
   d58a8:	7023      	strb	r3, [r4, #0]
   d58aa:	f7ff fe6e 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d58ae:	2000      	movs	r0, #0
   d58b0:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d58b2:	4620      	mov	r0, r4
   d58b4:	f7ff fe69 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d58b8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d58ba:	bd10      	pop	{r4, pc}

000d58bc <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d58bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58be:	4605      	mov	r5, r0
   d58c0:	4616      	mov	r6, r2
   d58c2:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d58c4:	f7ff ffd3 	bl	d586e <_ZN9SdSpiCard9readStartEm>
   d58c8:	b198      	cbz	r0, d58f2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d58ca:	2400      	movs	r4, #0
   d58cc:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d58ce:	429f      	cmp	r7, r3
   d58d0:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d58d4:	d908      	bls.n	d58e8 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d58d6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d58da:	4628      	mov	r0, r5
   d58dc:	f7ff fe68 	bl	d55b0 <_ZN9SdSpiCard8readDataEPhj>
   d58e0:	3401      	adds	r4, #1
   d58e2:	2800      	cmp	r0, #0
   d58e4:	d1f2      	bne.n	d58cc <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d58e6:	e004      	b.n	d58f2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d58e8:	4628      	mov	r0, r5
}
   d58ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d58ee:	f7ff bfd2 	b.w	d5896 <_ZN9SdSpiCard8readStopEv>
}
   d58f2:	2000      	movs	r0, #0
   d58f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58f6 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d58f6:	b538      	push	{r3, r4, r5, lr}
   d58f8:	4604      	mov	r4, r0
   d58fa:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d58fc:	6840      	ldr	r0, [r0, #4]
   d58fe:	f000 f8eb 	bl	d5ad8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d5902:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5906:	4629      	mov	r1, r5
   d5908:	6860      	ldr	r0, [r4, #4]
   d590a:	f000 f8e9 	bl	d5ae0 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d590e:	21ff      	movs	r1, #255	; 0xff
   d5910:	6860      	ldr	r0, [r4, #4]
   d5912:	f000 f8e1 	bl	d5ad8 <_ZN14SdSpiAltDriver4sendEh>
   d5916:	21ff      	movs	r1, #255	; 0xff
   d5918:	6860      	ldr	r0, [r4, #4]
   d591a:	f000 f8dd 	bl	d5ad8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d591e:	6860      	ldr	r0, [r4, #4]
   d5920:	f000 f8bf 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d5924:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d5926:	f000 001f 	and.w	r0, r0, #31
   d592a:	2805      	cmp	r0, #5
   d592c:	d006      	beq.n	d593c <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d592e:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5930:	4620      	mov	r0, r4
   d5932:	7023      	strb	r3, [r4, #0]
   d5934:	f7ff fe29 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5938:	2000      	movs	r0, #0
   d593a:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d593c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d593e:	bd38      	pop	{r3, r4, r5, pc}

000d5940 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5940:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5942:	7a83      	ldrb	r3, [r0, #10]
   d5944:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5946:	bf18      	it	ne
   d5948:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d594a:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d594c:	460a      	mov	r2, r1
   d594e:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5950:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5952:	f7ff fe73 	bl	d563c <_ZN9SdSpiCard11cardCommandEhm>
   d5956:	4606      	mov	r6, r0
   d5958:	b108      	cbz	r0, d595e <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d595a:	2332      	movs	r3, #50	; 0x32
   d595c:	e01d      	b.n	d599a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d595e:	462a      	mov	r2, r5
   d5960:	21fe      	movs	r1, #254	; 0xfe
   d5962:	4620      	mov	r0, r4
   d5964:	f7ff ffc7 	bl	d58f6 <_ZN9SdSpiCard9writeDataEhPKh>
   d5968:	b1c0      	cbz	r0, d599c <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d596a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d596e:	4620      	mov	r0, r4
   d5970:	f7ff fe4f 	bl	d5612 <_ZN9SdSpiCard11waitNotBusyEt>
   d5974:	4605      	mov	r5, r0
   d5976:	b908      	cbnz	r0, d597c <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5978:	235a      	movs	r3, #90	; 0x5a
   d597a:	e00e      	b.n	d599a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d597c:	4632      	mov	r2, r6
   d597e:	210d      	movs	r1, #13
   d5980:	4620      	mov	r0, r4
   d5982:	f7ff fe5b 	bl	d563c <_ZN9SdSpiCard11cardCommandEhm>
   d5986:	b938      	cbnz	r0, d5998 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5988:	6860      	ldr	r0, [r4, #4]
   d598a:	f000 f88a 	bl	d5aa2 <_ZN14SdSpiAltDriver7receiveEv>
   d598e:	b918      	cbnz	r0, d5998 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5990:	4620      	mov	r0, r4
   d5992:	f7ff fdfa 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5996:	e005      	b.n	d59a4 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5998:	2329      	movs	r3, #41	; 0x29
   d599a:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d599c:	4620      	mov	r0, r4
   d599e:	f7ff fdf4 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59a2:	2500      	movs	r5, #0
}
   d59a4:	4628      	mov	r0, r5
   d59a6:	bd70      	pop	{r4, r5, r6, pc}

000d59a8 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d59a8:	b538      	push	{r3, r4, r5, lr}
   d59aa:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d59ac:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d59b0:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d59b2:	f7ff fe2e 	bl	d5612 <_ZN9SdSpiCard11waitNotBusyEt>
   d59b6:	b910      	cbnz	r0, d59be <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d59b8:	235b      	movs	r3, #91	; 0x5b
   d59ba:	7023      	strb	r3, [r4, #0]
   d59bc:	e005      	b.n	d59ca <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d59be:	462a      	mov	r2, r5
   d59c0:	21fc      	movs	r1, #252	; 0xfc
   d59c2:	4620      	mov	r0, r4
   d59c4:	f7ff ff97 	bl	d58f6 <_ZN9SdSpiCard9writeDataEhPKh>
   d59c8:	b918      	cbnz	r0, d59d2 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d59ca:	4620      	mov	r0, r4
   d59cc:	f7ff fddd 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59d0:	2000      	movs	r0, #0
}
   d59d2:	bd38      	pop	{r3, r4, r5, pc}

000d59d4 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d59d4:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d59d6:	7a83      	ldrb	r3, [r0, #10]
   d59d8:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d59da:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d59dc:	bf18      	it	ne
   d59de:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d59e0:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d59e2:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d59e4:	f7ff fe2a 	bl	d563c <_ZN9SdSpiCard11cardCommandEhm>
   d59e8:	b130      	cbz	r0, d59f8 <_ZN9SdSpiCard10writeStartEm+0x24>
   d59ea:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d59ec:	4620      	mov	r0, r4
   d59ee:	7023      	strb	r3, [r4, #0]
   d59f0:	f7ff fdcb 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59f4:	2000      	movs	r0, #0
   d59f6:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d59f8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d59fa:	bd10      	pop	{r4, pc}

000d59fc <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d59fc:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d59fe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5a02:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5a04:	f7ff fe05 	bl	d5612 <_ZN9SdSpiCard11waitNotBusyEt>
   d5a08:	4605      	mov	r5, r0
   d5a0a:	b120      	cbz	r0, d5a16 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5a0c:	21fd      	movs	r1, #253	; 0xfd
   d5a0e:	6860      	ldr	r0, [r4, #4]
   d5a10:	f000 f862 	bl	d5ad8 <_ZN14SdSpiAltDriver4sendEh>
   d5a14:	e001      	b.n	d5a1a <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5a16:	2356      	movs	r3, #86	; 0x56
   d5a18:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	f7ff fdb5 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5a20:	4628      	mov	r0, r5
   d5a22:	bd38      	pop	{r3, r4, r5, pc}

000d5a24 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d5a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a26:	4605      	mov	r5, r0
   d5a28:	4616      	mov	r6, r2
   d5a2a:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d5a2c:	f7ff ffd2 	bl	d59d4 <_ZN9SdSpiCard10writeStartEm>
   d5a30:	b170      	cbz	r0, d5a50 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d5a32:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5a34:	42bc      	cmp	r4, r7
   d5a36:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5a3a:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5a3c:	d004      	beq.n	d5a48 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d5a3e:	f7ff ffb3 	bl	d59a8 <_ZN9SdSpiCard9writeDataEPKh>
   d5a42:	b128      	cbz	r0, d5a50 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5a44:	3401      	adds	r4, #1
   d5a46:	e7f5      	b.n	d5a34 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d5a48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5a4c:	f7ff bfd6 	b.w	d59fc <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d5a50:	4628      	mov	r0, r5
   d5a52:	f7ff fd9a 	bl	d558a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5a56:	2000      	movs	r0, #0
   d5a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a5a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5a5a:	f000 b8cb 	b.w	d5bf4 <HAL_Pin_Map>

000d5a5e <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5a5e:	f000 b8c9 	b.w	d5bf4 <HAL_Pin_Map>

000d5a62 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d5a62:	f000 b8c7 	b.w	d5bf4 <HAL_Pin_Map>
	...

000d5a68 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5a68:	4b01      	ldr	r3, [pc, #4]	; (d5a70 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d5a6a:	2201      	movs	r2, #1
   d5a6c:	701a      	strb	r2, [r3, #0]
   d5a6e:	4770      	bx	lr
   d5a70:	2003e3d8 	.word	0x2003e3d8

000d5a74 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5a74:	1d01      	adds	r1, r0, #4
   d5a76:	6800      	ldr	r0, [r0, #0]
   d5a78:	f000 bb50 	b.w	d611c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5a7c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d5a7c:	b510      	push	{r4, lr}
   d5a7e:	4604      	mov	r4, r0
  m_csPin = csPin;
   d5a80:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d5a82:	6800      	ldr	r0, [r0, #0]
   d5a84:	f000 fb20 	bl	d60c8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d5a88:	7d20      	ldrb	r0, [r4, #20]
   d5a8a:	2101      	movs	r1, #1
   d5a8c:	f001 f8e4 	bl	d6c58 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d5a90:	7d20      	ldrb	r0, [r4, #20]
   d5a92:	2101      	movs	r1, #1
}
   d5a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d5a98:	f001 b8ef 	b.w	d6c7a <digitalWrite>

000d5a9c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5a9c:	6800      	ldr	r0, [r0, #0]
   d5a9e:	f000 bb24 	b.w	d60ea <_ZN8SPIClass14endTransactionEv>

000d5aa2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5aa2:	21ff      	movs	r1, #255	; 0xff
   d5aa4:	6800      	ldr	r0, [r0, #0]
   d5aa6:	f000 bba9 	b.w	d61fc <_ZN8SPIClass8transferEh>
	...

000d5aac <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5aae:	4b08      	ldr	r3, [pc, #32]	; (d5ad0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5ab0:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5ab2:	2500      	movs	r5, #0
   d5ab4:	4c07      	ldr	r4, [pc, #28]	; (d5ad4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5ab6:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5ab8:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5aba:	4613      	mov	r3, r2
   d5abc:	460a      	mov	r2, r1
   d5abe:	4629      	mov	r1, r5
   d5ac0:	f000 fba2 	bl	d6208 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5ac4:	7823      	ldrb	r3, [r4, #0]
   d5ac6:	2b00      	cmp	r3, #0
   d5ac8:	d0fc      	beq.n	d5ac4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5aca:	2000      	movs	r0, #0
   d5acc:	b003      	add	sp, #12
   d5ace:	bd30      	pop	{r4, r5, pc}
   d5ad0:	000d5a69 	.word	0x000d5a69
   d5ad4:	2003e3d8 	.word	0x2003e3d8

000d5ad8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5ad8:	6800      	ldr	r0, [r0, #0]
   d5ada:	f000 bb8f 	b.w	d61fc <_ZN8SPIClass8transferEh>
	...

000d5ae0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5ae2:	4b07      	ldr	r3, [pc, #28]	; (d5b00 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5ae4:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5ae6:	2500      	movs	r5, #0
   d5ae8:	4c06      	ldr	r4, [pc, #24]	; (d5b04 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5aea:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5aec:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5aee:	4613      	mov	r3, r2
   d5af0:	462a      	mov	r2, r5
   d5af2:	f000 fb89 	bl	d6208 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d5af6:	7823      	ldrb	r3, [r4, #0]
   d5af8:	2b00      	cmp	r3, #0
   d5afa:	d0fc      	beq.n	d5af6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5afc:	b003      	add	sp, #12
   d5afe:	bd30      	pop	{r4, r5, pc}
   d5b00:	000d5a69 	.word	0x000d5a69
   d5b04:	2003e3d8 	.word	0x2003e3d8

000d5b08 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5b08:	f000 b874 	b.w	d5bf4 <HAL_Pin_Map>

000d5b0c <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d5b0c:	2200      	movs	r2, #0
   d5b0e:	6001      	str	r1, [r0, #0]
   d5b10:	6102      	str	r2, [r0, #16]
   d5b12:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d5b14:	4770      	bx	lr

000d5b16 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d5b16:	b510      	push	{r4, lr}
   d5b18:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d5b1a:	8800      	ldrh	r0, [r0, #0]
   d5b1c:	f001 f8d9 	bl	d6cd2 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d5b20:	f240 3312 	movw	r3, #786	; 0x312
   d5b24:	f1a0 020b 	sub.w	r2, r0, #11
   d5b28:	429a      	cmp	r2, r3
   d5b2a:	d807      	bhi.n	d5b3c <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d5b2c:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d5b2e:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d5b30:	60e0      	str	r0, [r4, #12]
   d5b32:	f000 f8f7 	bl	d5d24 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d5b36:	61a0      	str	r0, [r4, #24]

        return true;
   d5b38:	2001      	movs	r0, #1
   d5b3a:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d5b3c:	2000      	movs	r0, #0
    }
}
   d5b3e:	bd10      	pop	{r4, pc}

000d5b40 <_ZN16AirQualitySensor8getValueEv>:
    return -1;
}

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}
   d5b40:	6880      	ldr	r0, [r0, #8]
   d5b42:	4770      	bx	lr

000d5b44 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

void AirQualitySensor::updateStandardVoltage(void) {
   d5b44:	b510      	push	{r4, lr}
   d5b46:	4604      	mov	r4, r0
   d5b48:	f000 f8ec 	bl	d5d24 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d5b4c:	69a3      	ldr	r3, [r4, #24]
   d5b4e:	1ac0      	subs	r0, r0, r3
   d5b50:	4b07      	ldr	r3, [pc, #28]	; (d5b70 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d5b52:	4298      	cmp	r0, r3
   d5b54:	d90a      	bls.n	d5b6c <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d5b56:	6923      	ldr	r3, [r4, #16]
   d5b58:	6962      	ldr	r2, [r4, #20]
   d5b5a:	fb93 f3f2 	sdiv	r3, r3, r2
   d5b5e:	60e3      	str	r3, [r4, #12]
   d5b60:	f000 f8e0 	bl	d5d24 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d5b64:	2300      	movs	r3, #0
}

void AirQualitySensor::updateStandardVoltage(void) {
    if (millis() - _lastStdVolUpdated > 500000) {
        _standardVoltage = _voltageSum / _volSumCount;
        _lastStdVolUpdated = millis();
   d5b66:	61a0      	str	r0, [r4, #24]

        _voltageSum = 0;
   d5b68:	6123      	str	r3, [r4, #16]
        _volSumCount = 0;
   d5b6a:	6163      	str	r3, [r4, #20]
   d5b6c:	bd10      	pop	{r4, pc}
   d5b6e:	bf00      	nop
   d5b70:	0007a120 	.word	0x0007a120

000d5b74 <_ZN16AirQualitySensor5slopeEv>:
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d5b74:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d5b76:	6883      	ldr	r3, [r0, #8]
   d5b78:	6043      	str	r3, [r0, #4]
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d5b7a:	4604      	mov	r4, r0
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d5b7c:	8800      	ldrh	r0, [r0, #0]
   d5b7e:	f001 f8a8 	bl	d6cd2 <analogRead>

    _voltageSum += _currentVoltage;
   d5b82:	6923      	ldr	r3, [r4, #16]
    }
}

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d5b84:	60a0      	str	r0, [r4, #8]

    _voltageSum += _currentVoltage;
   d5b86:	4418      	add	r0, r3
    _volSumCount += 1;
   d5b88:	6963      	ldr	r3, [r4, #20]

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);

    _voltageSum += _currentVoltage;
   d5b8a:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d5b8c:	3301      	adds	r3, #1
   d5b8e:	6163      	str	r3, [r4, #20]

    updateStandardVoltage();
   d5b90:	4620      	mov	r0, r4
   d5b92:	f7ff ffd7 	bl	d5b44 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d5b96:	68a2      	ldr	r2, [r4, #8]
   d5b98:	6861      	ldr	r1, [r4, #4]
   d5b9a:	1a51      	subs	r1, r2, r1
   d5b9c:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d5ba0:	dc10      	bgt.n	d5bc4 <_ZN16AirQualitySensor5slopeEv+0x50>
   d5ba2:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d5ba6:	dc0d      	bgt.n	d5bc4 <_ZN16AirQualitySensor5slopeEv+0x50>
        return AirQualitySensor::FORCE_SIGNAL;
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
   d5ba8:	68e3      	ldr	r3, [r4, #12]
   d5baa:	1ad3      	subs	r3, r2, r3
   d5bac:	2b96      	cmp	r3, #150	; 0x96
   d5bae:	dc0b      	bgt.n	d5bc8 <_ZN16AirQualitySensor5slopeEv+0x54>
        return AirQualitySensor::HIGH_POLLUTION;
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d5bb0:	29c8      	cmp	r1, #200	; 0xc8
   d5bb2:	dd02      	ble.n	d5bba <_ZN16AirQualitySensor5slopeEv+0x46>
   d5bb4:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d5bb8:	d108      	bne.n	d5bcc <_ZN16AirQualitySensor5slopeEv+0x58>
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
    }
    else {
        return AirQualitySensor::FRESH_AIR;
   d5bba:	2b32      	cmp	r3, #50	; 0x32
   d5bbc:	bfcc      	ite	gt
   d5bbe:	2002      	movgt	r0, #2
   d5bc0:	2003      	movle	r0, #3
   d5bc2:	bd10      	pop	{r4, pc}
    _voltageSum += _currentVoltage;
    _volSumCount += 1;

    updateStandardVoltage();
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
        return AirQualitySensor::FORCE_SIGNAL;
   d5bc4:	2000      	movs	r0, #0
   d5bc6:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
        return AirQualitySensor::HIGH_POLLUTION;
   d5bc8:	2001      	movs	r0, #1
   d5bca:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
   d5bcc:	2002      	movs	r0, #2
    else {
        return AirQualitySensor::FRESH_AIR;
    }

    return -1;
}
   d5bce:	bd10      	pop	{r4, pc}

000d5bd0 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d5bd0:	f000 b810 	b.w	d5bf4 <HAL_Pin_Map>

000d5bd4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5bd4:	b508      	push	{r3, lr}
   d5bd6:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <netdb_freeaddrinfo+0xc>)
   d5bd8:	681b      	ldr	r3, [r3, #0]
   d5bda:	689b      	ldr	r3, [r3, #8]
   d5bdc:	9301      	str	r3, [sp, #4]
   d5bde:	bd08      	pop	{r3, pc}
   d5be0:	00030268 	.word	0x00030268

000d5be4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5be4:	b508      	push	{r3, lr}
   d5be6:	4b02      	ldr	r3, [pc, #8]	; (d5bf0 <netdb_getaddrinfo+0xc>)
   d5be8:	681b      	ldr	r3, [r3, #0]
   d5bea:	68db      	ldr	r3, [r3, #12]
   d5bec:	9301      	str	r3, [sp, #4]
   d5bee:	bd08      	pop	{r3, pc}
   d5bf0:	00030268 	.word	0x00030268

000d5bf4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <HAL_Pin_Map+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	681b      	ldr	r3, [r3, #0]
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	0003022c 	.word	0x0003022c

000d5c04 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <HAL_Validate_Pin_Function+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	685b      	ldr	r3, [r3, #4]
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	0003022c 	.word	0x0003022c

000d5c14 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <HAL_Pin_Mode+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	689b      	ldr	r3, [r3, #8]
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	0003022c 	.word	0x0003022c

000d5c24 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <HAL_Get_Pin_Mode+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	68db      	ldr	r3, [r3, #12]
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	0003022c 	.word	0x0003022c

000d5c34 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <HAL_GPIO_Write+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	691b      	ldr	r3, [r3, #16]
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	0003022c 	.word	0x0003022c

000d5c44 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <HAL_GPIO_Read+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	695b      	ldr	r3, [r3, #20]
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	0003022c 	.word	0x0003022c

000d5c54 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <HAL_ADC_Read+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	0003022c 	.word	0x0003022c

000d5c64 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <HAL_SPI_Begin+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	681b      	ldr	r3, [r3, #0]
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	00030230 	.word	0x00030230

000d5c74 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <HAL_SPI_Send_Receive_Data+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	695b      	ldr	r3, [r3, #20]
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	00030230 	.word	0x00030230

000d5c84 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <HAL_SPI_Init+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	69db      	ldr	r3, [r3, #28]
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	00030230 	.word	0x00030230

000d5c94 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <HAL_SPI_Is_Enabled+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	6a1b      	ldr	r3, [r3, #32]
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	00030230 	.word	0x00030230

000d5ca4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <HAL_SPI_Info+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	00030230 	.word	0x00030230

000d5cb4 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <HAL_SPI_DMA_Transfer+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	00030230 	.word	0x00030230

000d5cc4 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	00030230 	.word	0x00030230

000d5cd4 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <HAL_SPI_Set_Settings+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	00030230 	.word	0x00030230

000d5ce4 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <HAL_SPI_Acquire+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	00030230 	.word	0x00030230

000d5cf4 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <HAL_SPI_Release+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	00030230 	.word	0x00030230

000d5d04 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <HAL_RNG_GetRandomNumber+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	685b      	ldr	r3, [r3, #4]
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	00030218 	.word	0x00030218

000d5d14 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	691b      	ldr	r3, [r3, #16]
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	00030218 	.word	0x00030218

000d5d24 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	695b      	ldr	r3, [r3, #20]
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	00030218 	.word	0x00030218

000d5d34 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <os_thread_is_current+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	689b      	ldr	r3, [r3, #8]
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	00030248 	.word	0x00030248

000d5d44 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <os_thread_join+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	691b      	ldr	r3, [r3, #16]
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	00030248 	.word	0x00030248

000d5d54 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <os_thread_cleanup+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	695b      	ldr	r3, [r3, #20]
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	00030248 	.word	0x00030248

000d5d64 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <os_mutex_recursive_create+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	00030248 	.word	0x00030248

000d5d74 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <os_mutex_recursive_destroy+0xc>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	00030248 	.word	0x00030248

000d5d84 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5d84:	b508      	push	{r3, lr}
   d5d86:	4b02      	ldr	r3, [pc, #8]	; (d5d90 <inet_inet_ntop+0xc>)
   d5d88:	681b      	ldr	r3, [r3, #0]
   d5d8a:	695b      	ldr	r3, [r3, #20]
   d5d8c:	9301      	str	r3, [sp, #4]
   d5d8e:	bd08      	pop	{r3, pc}
   d5d90:	00030264 	.word	0x00030264

000d5d94 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <HAL_USART_Init+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	681b      	ldr	r3, [r3, #0]
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	0003023c 	.word	0x0003023c

000d5da4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <HAL_USART_Write_Data+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	68db      	ldr	r3, [r3, #12]
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	0003023c 	.word	0x0003023c

000d5db4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <HAL_USART_Available_Data+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	691b      	ldr	r3, [r3, #16]
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	0003023c 	.word	0x0003023c

000d5dc4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <HAL_USART_Read_Data+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	695b      	ldr	r3, [r3, #20]
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	0003023c 	.word	0x0003023c

000d5dd4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <HAL_USART_Peek_Data+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	699b      	ldr	r3, [r3, #24]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	0003023c 	.word	0x0003023c

000d5de4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <HAL_USART_Flush_Data+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	69db      	ldr	r3, [r3, #28]
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	0003023c 	.word	0x0003023c

000d5df4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <HAL_USART_Is_Enabled+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	6a1b      	ldr	r3, [r3, #32]
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	0003023c 	.word	0x0003023c

000d5e04 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <HAL_USART_Available_Data_For_Write+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	0003023c 	.word	0x0003023c

000d5e14 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <HAL_I2C_Write_Data+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	6a1b      	ldr	r3, [r3, #32]
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	00030228 	.word	0x00030228

000d5e24 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <HAL_I2C_Available_Data+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	00030228 	.word	0x00030228

000d5e34 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <HAL_I2C_Read_Data+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	00030228 	.word	0x00030228

000d5e44 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <HAL_I2C_Peek_Data+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	00030228 	.word	0x00030228

000d5e54 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <HAL_I2C_Flush_Data+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	00030228 	.word	0x00030228

000d5e64 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <HAL_I2C_Is_Enabled+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	00030228 	.word	0x00030228

000d5e74 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <HAL_I2C_Init+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	00030228 	.word	0x00030228

000d5e84 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <HAL_USB_USART_Init+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	681b      	ldr	r3, [r3, #0]
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	0003024c 	.word	0x0003024c

000d5e94 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <HAL_USB_USART_Begin+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	685b      	ldr	r3, [r3, #4]
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	0003024c 	.word	0x0003024c

000d5ea4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <HAL_USB_USART_Available_Data+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	691b      	ldr	r3, [r3, #16]
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	0003024c 	.word	0x0003024c

000d5eb4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	695b      	ldr	r3, [r3, #20]
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	0003024c 	.word	0x0003024c

000d5ec4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <HAL_USB_USART_Receive_Data+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	699b      	ldr	r3, [r3, #24]
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	0003024c 	.word	0x0003024c

000d5ed4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5ed4:	b508      	push	{r3, lr}
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <HAL_USB_USART_Send_Data+0xc>)
   d5ed8:	681b      	ldr	r3, [r3, #0]
   d5eda:	69db      	ldr	r3, [r3, #28]
   d5edc:	9301      	str	r3, [sp, #4]
   d5ede:	bd08      	pop	{r3, pc}
   d5ee0:	0003024c 	.word	0x0003024c

000d5ee4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5ee4:	b508      	push	{r3, lr}
   d5ee6:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <HAL_USB_USART_Flush_Data+0xc>)
   d5ee8:	681b      	ldr	r3, [r3, #0]
   d5eea:	6a1b      	ldr	r3, [r3, #32]
   d5eec:	9301      	str	r3, [sp, #4]
   d5eee:	bd08      	pop	{r3, pc}
   d5ef0:	0003024c 	.word	0x0003024c

000d5ef4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <set_system_mode+0xc>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	685b      	ldr	r3, [r3, #4]
   d5efc:	9301      	str	r3, [sp, #4]
   d5efe:	bd08      	pop	{r3, pc}
   d5f00:	00030220 	.word	0x00030220

000d5f04 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5f04:	b508      	push	{r3, lr}
   d5f06:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <system_delay_ms+0xc>)
   d5f08:	681b      	ldr	r3, [r3, #0]
   d5f0a:	695b      	ldr	r3, [r3, #20]
   d5f0c:	9301      	str	r3, [sp, #4]
   d5f0e:	bd08      	pop	{r3, pc}
   d5f10:	00030220 	.word	0x00030220

000d5f14 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5f14:	b508      	push	{r3, lr}
   d5f16:	4b03      	ldr	r3, [pc, #12]	; (d5f24 <system_ctrl_set_app_request_handler+0x10>)
   d5f18:	681b      	ldr	r3, [r3, #0]
   d5f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5f1e:	9301      	str	r3, [sp, #4]
   d5f20:	bd08      	pop	{r3, pc}
   d5f22:	0000      	.short	0x0000
   d5f24:	00030220 	.word	0x00030220

000d5f28 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5f28:	b508      	push	{r3, lr}
   d5f2a:	4b03      	ldr	r3, [pc, #12]	; (d5f38 <system_ctrl_set_result+0x10>)
   d5f2c:	681b      	ldr	r3, [r3, #0]
   d5f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5f32:	9301      	str	r3, [sp, #4]
   d5f34:	bd08      	pop	{r3, pc}
   d5f36:	0000      	.short	0x0000
   d5f38:	00030220 	.word	0x00030220

000d5f3c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <network_connect+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	685b      	ldr	r3, [r3, #4]
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	00030240 	.word	0x00030240

000d5f4c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <network_connecting+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	689b      	ldr	r3, [r3, #8]
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	00030240 	.word	0x00030240

000d5f5c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <network_disconnect+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	68db      	ldr	r3, [r3, #12]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	00030240 	.word	0x00030240

000d5f6c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <network_ready+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	691b      	ldr	r3, [r3, #16]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030240 	.word	0x00030240

000d5f7c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <network_on+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	695b      	ldr	r3, [r3, #20]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	00030240 	.word	0x00030240

000d5f8c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <network_off+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	699b      	ldr	r3, [r3, #24]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030240 	.word	0x00030240

000d5f9c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <network_listen+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	69db      	ldr	r3, [r3, #28]
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030240 	.word	0x00030240

000d5fac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <network_listening+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	6a1b      	ldr	r3, [r3, #32]
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030240 	.word	0x00030240

000d5fbc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <network_set_listen_timeout+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030240 	.word	0x00030240

000d5fcc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <network_get_listen_timeout+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	00030240 	.word	0x00030240

000d5fdc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <spark_process+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	689b      	ldr	r3, [r3, #8]
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	00030244 	.word	0x00030244

000d5fec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	00030244 	.word	0x00030244

000d5ffc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <malloc+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	681b      	ldr	r3, [r3, #0]
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	0003021c 	.word	0x0003021c

000d600c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <free+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	685b      	ldr	r3, [r3, #4]
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	0003021c 	.word	0x0003021c

000d601c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <vsnprintf+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	0003021c 	.word	0x0003021c

000d602c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d602c:	2200      	movs	r2, #0
   d602e:	4611      	mov	r1, r2
   d6030:	6840      	ldr	r0, [r0, #4]
   d6032:	f7ff bfbb 	b.w	d5fac <network_listening>

000d6036 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6036:	2200      	movs	r2, #0
   d6038:	4611      	mov	r1, r2
   d603a:	6840      	ldr	r0, [r0, #4]
   d603c:	f7ff bfc6 	b.w	d5fcc <network_get_listen_timeout>

000d6040 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6040:	2200      	movs	r2, #0
   d6042:	6840      	ldr	r0, [r0, #4]
   d6044:	f7ff bfba 	b.w	d5fbc <network_set_listen_timeout>

000d6048 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6048:	2200      	movs	r2, #0
   d604a:	f081 0101 	eor.w	r1, r1, #1
   d604e:	6840      	ldr	r0, [r0, #4]
   d6050:	f7ff bfa4 	b.w	d5f9c <network_listen>

000d6054 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6054:	2300      	movs	r3, #0
   d6056:	461a      	mov	r2, r3
   d6058:	4619      	mov	r1, r3
   d605a:	6840      	ldr	r0, [r0, #4]
   d605c:	f7ff bf96 	b.w	d5f8c <network_off>

000d6060 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6060:	2300      	movs	r3, #0
   d6062:	461a      	mov	r2, r3
   d6064:	4619      	mov	r1, r3
   d6066:	6840      	ldr	r0, [r0, #4]
   d6068:	f7ff bf88 	b.w	d5f7c <network_on>

000d606c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d606c:	2200      	movs	r2, #0
   d606e:	4611      	mov	r1, r2
   d6070:	6840      	ldr	r0, [r0, #4]
   d6072:	f7ff bf7b 	b.w	d5f6c <network_ready>

000d6076 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6076:	2200      	movs	r2, #0
   d6078:	4611      	mov	r1, r2
   d607a:	6840      	ldr	r0, [r0, #4]
   d607c:	f7ff bf66 	b.w	d5f4c <network_connecting>

000d6080 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6080:	2200      	movs	r2, #0
   d6082:	2102      	movs	r1, #2
   d6084:	6840      	ldr	r0, [r0, #4]
   d6086:	f7ff bf69 	b.w	d5f5c <network_disconnect>

000d608a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d608a:	2300      	movs	r3, #0
   d608c:	461a      	mov	r2, r3
   d608e:	6840      	ldr	r0, [r0, #4]
   d6090:	f7ff bf54 	b.w	d5f3c <network_connect>

000d6094 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6094:	4b02      	ldr	r3, [pc, #8]	; (d60a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6096:	2203      	movs	r2, #3
   d6098:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d609a:	4a02      	ldr	r2, [pc, #8]	; (d60a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d609c:	601a      	str	r2, [r3, #0]
   d609e:	4770      	bx	lr
   d60a0:	2003e3dc 	.word	0x2003e3dc
   d60a4:	000d7214 	.word	0x000d7214

000d60a8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d60a8:	2100      	movs	r1, #0
   d60aa:	f7ff be1b 	b.w	d5ce4 <HAL_SPI_Acquire>

000d60ae <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d60ae:	2100      	movs	r1, #0
   d60b0:	f7ff be20 	b.w	d5cf4 <HAL_SPI_Release>

000d60b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d60b4:	b510      	push	{r4, lr}
   d60b6:	4604      	mov	r4, r0
{
    _spi = spi;
   d60b8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d60ba:	4608      	mov	r0, r1
   d60bc:	f7ff fde2 	bl	d5c84 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d60c0:	2300      	movs	r3, #0
   d60c2:	6063      	str	r3, [r4, #4]
}
   d60c4:	4620      	mov	r0, r4
   d60c6:	bd10      	pop	{r4, pc}

000d60c8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d60c8:	b510      	push	{r4, lr}
   d60ca:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d60cc:	7800      	ldrb	r0, [r0, #0]
   d60ce:	f7ff ffeb 	bl	d60a8 <_ZN8SPIClass4lockEv.isra.0>
   d60d2:	b948      	cbnz	r0, d60e8 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d60d4:	7820      	ldrb	r0, [r4, #0]
   d60d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d60da:	f7ff fdc3 	bl	d5c64 <HAL_SPI_Begin>
        unlock();
   d60de:	7820      	ldrb	r0, [r4, #0]
    }
}
   d60e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d60e4:	f7ff bfe3 	b.w	d60ae <_ZN8SPIClass6unlockEv.isra.1>
   d60e8:	bd10      	pop	{r4, pc}

000d60ea <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d60ea:	7800      	ldrb	r0, [r0, #0]
   d60ec:	f7ff bfdf 	b.w	d60ae <_ZN8SPIClass6unlockEv.isra.1>

000d60f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d60f0:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d60f2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d60f4:	6018      	str	r0, [r3, #0]
   d60f6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d60f8:	6818      	ldr	r0, [r3, #0]
   d60fa:	4288      	cmp	r0, r1
   d60fc:	b2e5      	uxtb	r5, r4
   d60fe:	d906      	bls.n	d610e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6100:	3401      	adds	r4, #1
   d6102:	2c08      	cmp	r4, #8
   d6104:	d002      	beq.n	d610c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6106:	0840      	lsrs	r0, r0, #1
   d6108:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d610a:	e7f5      	b.n	d60f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d610c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d610e:	4b02      	ldr	r3, [pc, #8]	; (d6118 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6110:	5d5b      	ldrb	r3, [r3, r5]
   d6112:	7013      	strb	r3, [r2, #0]
   d6114:	bd30      	pop	{r4, r5, pc}
   d6116:	bf00      	nop
   d6118:	000d7240 	.word	0x000d7240

000d611c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d611c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6120:	4607      	mov	r7, r0
   d6122:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6124:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6126:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6128:	f7ff ffbe 	bl	d60a8 <_ZN8SPIClass4lockEv.isra.0>
   d612c:	2800      	cmp	r0, #0
   d612e:	db62      	blt.n	d61f6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6130:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6132:	2214      	movs	r2, #20
   d6134:	2100      	movs	r1, #0
   d6136:	a809      	add	r0, sp, #36	; 0x24
   d6138:	f000 ffb4 	bl	d70a4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d613c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d613e:	4620      	mov	r0, r4
   d6140:	2200      	movs	r2, #0
   d6142:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6144:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6148:	f7ff fdac 	bl	d5ca4 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d614c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6150:	b154      	cbz	r4, d6168 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d6152:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6156:	b935      	cbnz	r5, d6166 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6158:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d615c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6160:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6164:	e003      	b.n	d616e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6166:	2400      	movs	r4, #0
   d6168:	46a1      	mov	r9, r4
   d616a:	46a0      	mov	r8, r4
   d616c:	2501      	movs	r5, #1
   d616e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6170:	b105      	cbz	r5, d6174 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d6172:	b9bb      	cbnz	r3, d61a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6174:	429d      	cmp	r5, r3
   d6176:	d10b      	bne.n	d6190 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6178:	68b2      	ldr	r2, [r6, #8]
   d617a:	4542      	cmp	r2, r8
   d617c:	d108      	bne.n	d6190 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d617e:	f88d 9020 	strb.w	r9, [sp, #32]
   d6182:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6186:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d618a:	89b2      	ldrh	r2, [r6, #12]
   d618c:	4291      	cmp	r1, r2
   d618e:	d009      	beq.n	d61a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6190:	b153      	cbz	r3, d61a8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6192:	2400      	movs	r4, #0
   d6194:	7838      	ldrb	r0, [r7, #0]
   d6196:	9401      	str	r4, [sp, #4]
   d6198:	9400      	str	r4, [sp, #0]
   d619a:	4623      	mov	r3, r4
   d619c:	4622      	mov	r2, r4
   d619e:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d61a0:	f7ff fd98 	bl	d5cd4 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d61a4:	2000      	movs	r0, #0
   d61a6:	e026      	b.n	d61f6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d61a8:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d61ac:	68b1      	ldr	r1, [r6, #8]
   d61ae:	980a      	ldr	r0, [sp, #40]	; 0x28
   d61b0:	ab04      	add	r3, sp, #16
   d61b2:	f10d 020f 	add.w	r2, sp, #15
   d61b6:	f7ff ff9b 	bl	d60f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d61ba:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d61bc:	b105      	cbz	r5, d61c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d61be:	b9b1      	cbnz	r1, d61ee <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d61c0:	42a9      	cmp	r1, r5
   d61c2:	d008      	beq.n	d61d6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d61c4:	2400      	movs	r4, #0
   d61c6:	7838      	ldrb	r0, [r7, #0]
   d61c8:	9401      	str	r4, [sp, #4]
   d61ca:	7b74      	ldrb	r4, [r6, #13]
   d61cc:	7b33      	ldrb	r3, [r6, #12]
   d61ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d61d2:	9400      	str	r4, [sp, #0]
   d61d4:	e7e4      	b.n	d61a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d61d6:	68b3      	ldr	r3, [r6, #8]
   d61d8:	4543      	cmp	r3, r8
   d61da:	d3f3      	bcc.n	d61c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d61dc:	f88d 9020 	strb.w	r9, [sp, #32]
   d61e0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d61e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d61e8:	89b3      	ldrh	r3, [r6, #12]
   d61ea:	429a      	cmp	r2, r3
   d61ec:	d1ea      	bne.n	d61c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d61ee:	9b04      	ldr	r3, [sp, #16]
   d61f0:	4543      	cmp	r3, r8
   d61f2:	d1e7      	bne.n	d61c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d61f4:	e7d6      	b.n	d61a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d61f6:	b00f      	add	sp, #60	; 0x3c
   d61f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d61fc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d61fc:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d61fe:	7800      	ldrb	r0, [r0, #0]
   d6200:	f7ff fd38 	bl	d5c74 <HAL_SPI_Send_Receive_Data>
}
   d6204:	b2c0      	uxtb	r0, r0
   d6206:	bd08      	pop	{r3, pc}

000d6208 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6208:	b530      	push	{r4, r5, lr}
   d620a:	b087      	sub	sp, #28
   d620c:	4604      	mov	r4, r0
   d620e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d6210:	7800      	ldrb	r0, [r0, #0]
   d6212:	9500      	str	r5, [sp, #0]
   d6214:	f7ff fd4e 	bl	d5cb4 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d6218:	b93d      	cbnz	r5, d622a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d621a:	a902      	add	r1, sp, #8
   d621c:	7820      	ldrb	r0, [r4, #0]
   d621e:	f7ff fd51 	bl	d5cc4 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d6222:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6226:	07db      	lsls	r3, r3, #31
   d6228:	d4f7      	bmi.n	d621a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d622a:	b007      	add	sp, #28
   d622c:	bd30      	pop	{r4, r5, pc}

000d622e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d622e:	7800      	ldrb	r0, [r0, #0]
   d6230:	f7ff bd30 	b.w	d5c94 <HAL_SPI_Is_Enabled>

000d6234 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6234:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6236:	4c09      	ldr	r4, [pc, #36]	; (d625c <_GLOBAL__sub_I_System+0x28>)
   d6238:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d623a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d623e:	6020      	str	r0, [r4, #0]
   d6240:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6242:	71a0      	strb	r0, [r4, #6]
   d6244:	8120      	strh	r0, [r4, #8]
   d6246:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6248:	f7ff fe54 	bl	d5ef4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d624c:	4620      	mov	r0, r4
   d624e:	4a04      	ldr	r2, [pc, #16]	; (d6260 <_GLOBAL__sub_I_System+0x2c>)
   d6250:	4904      	ldr	r1, [pc, #16]	; (d6264 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6256:	f000 bd93 	b.w	d6d80 <__aeabi_atexit>
   d625a:	bf00      	nop
   d625c:	2003e3e4 	.word	0x2003e3e4
   d6260:	2003ded0 	.word	0x2003ded0
   d6264:	000d417d 	.word	0x000d417d

000d6268 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6268:	b510      	push	{r4, lr}
   d626a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d626c:	6800      	ldr	r0, [r0, #0]
   d626e:	b108      	cbz	r0, d6274 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6270:	f7ff fd80 	bl	d5d74 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6274:	4620      	mov	r0, r4
   d6276:	bd10      	pop	{r4, pc}

000d6278 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6278:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d627a:	4c06      	ldr	r4, [pc, #24]	; (d6294 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d627c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d627e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6280:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6282:	f7ff fd6f 	bl	d5d64 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6286:	4620      	mov	r0, r4
   d6288:	4a03      	ldr	r2, [pc, #12]	; (d6298 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d628a:	4904      	ldr	r1, [pc, #16]	; (d629c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d628c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6290:	f000 bd76 	b.w	d6d80 <__aeabi_atexit>
   d6294:	2003e3f0 	.word	0x2003e3f0
   d6298:	2003ded0 	.word	0x2003ded0
   d629c:	000d6269 	.word	0x000d6269

000d62a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d62a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62a2:	4606      	mov	r6, r0
   d62a4:	460d      	mov	r5, r1
   d62a6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d62a8:	2400      	movs	r4, #0
  while (size--) {
   d62aa:	42bd      	cmp	r5, r7
   d62ac:	d00c      	beq.n	d62c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d62ae:	6833      	ldr	r3, [r6, #0]
   d62b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d62b4:	689b      	ldr	r3, [r3, #8]
   d62b6:	4630      	mov	r0, r6
   d62b8:	4798      	blx	r3
     if (chunk>=0)
   d62ba:	2800      	cmp	r0, #0
   d62bc:	db01      	blt.n	d62c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d62be:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d62c0:	e7f3      	b.n	d62aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d62c2:	2c00      	cmp	r4, #0
   d62c4:	bf08      	it	eq
   d62c6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d62c8:	4620      	mov	r0, r4
   d62ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62cc <_ZN5Print5printEPKc>:
   d62cc:	b508      	push	{r3, lr}
   d62ce:	f7fe ff7f 	bl	d51d0 <_ZN5Print5writeEPKc>
   d62d2:	bd08      	pop	{r3, pc}

000d62d4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d62d4:	6803      	ldr	r3, [r0, #0]
   d62d6:	689b      	ldr	r3, [r3, #8]
   d62d8:	4718      	bx	r3

000d62da <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d62da:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d62dc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d62de:	4605      	mov	r5, r0
  size_t n = print('\r');
   d62e0:	f7ff fff8 	bl	d62d4 <_ZN5Print5printEc>
  n += print('\n');
   d62e4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d62e6:	4604      	mov	r4, r0
  n += print('\n');
   d62e8:	4628      	mov	r0, r5
   d62ea:	f7ff fff3 	bl	d62d4 <_ZN5Print5printEc>
  return n;
}
   d62ee:	4420      	add	r0, r4
   d62f0:	bd38      	pop	{r3, r4, r5, pc}

000d62f2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d62f2:	b538      	push	{r3, r4, r5, lr}
   d62f4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d62f6:	f7fe ff6b 	bl	d51d0 <_ZN5Print5writeEPKc>
   d62fa:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d62fc:	4628      	mov	r0, r5
   d62fe:	f7ff ffec 	bl	d62da <_ZN5Print7printlnEv>
  return n;
}
   d6302:	4420      	add	r0, r4
   d6304:	bd38      	pop	{r3, r4, r5, pc}

000d6306 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6306:	b530      	push	{r4, r5, lr}
   d6308:	b08b      	sub	sp, #44	; 0x2c
   d630a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d630c:	2100      	movs	r1, #0
   d630e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6312:	2a01      	cmp	r2, #1
   d6314:	bf98      	it	ls
   d6316:	220a      	movls	r2, #10
   d6318:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d631c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6320:	fb05 3312 	mls	r3, r5, r2, r3
   d6324:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6328:	2b09      	cmp	r3, #9
   d632a:	bf94      	ite	ls
   d632c:	3330      	addls	r3, #48	; 0x30
   d632e:	3337      	addhi	r3, #55	; 0x37
   d6330:	b2db      	uxtb	r3, r3
   d6332:	4621      	mov	r1, r4
   d6334:	f804 3901 	strb.w	r3, [r4], #-1
   d6338:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d633a:	2d00      	cmp	r5, #0
   d633c:	d1ee      	bne.n	d631c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d633e:	f7fe ff47 	bl	d51d0 <_ZN5Print5writeEPKc>
}
   d6342:	b00b      	add	sp, #44	; 0x2c
   d6344:	bd30      	pop	{r4, r5, pc}

000d6346 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6346:	b40c      	push	{r2, r3}
   d6348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d634c:	b087      	sub	sp, #28
   d634e:	af00      	add	r7, sp, #0
   d6350:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6354:	4605      	mov	r5, r0
   d6356:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d635a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d635c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d635e:	4623      	mov	r3, r4
   d6360:	464a      	mov	r2, r9
   d6362:	2114      	movs	r1, #20
   d6364:	1d38      	adds	r0, r7, #4
   d6366:	f7ff fe59 	bl	d601c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d636a:	2813      	cmp	r0, #19
   d636c:	d805      	bhi.n	d637a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d636e:	1d39      	adds	r1, r7, #4
   d6370:	4628      	mov	r0, r5
   d6372:	f7fe ff2d 	bl	d51d0 <_ZN5Print5writeEPKc>
   d6376:	4604      	mov	r4, r0
   d6378:	e013      	b.n	d63a2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d637a:	f100 0308 	add.w	r3, r0, #8
   d637e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6382:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6384:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6388:	1c41      	adds	r1, r0, #1
   d638a:	4623      	mov	r3, r4
   d638c:	464a      	mov	r2, r9
   d638e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6390:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6392:	f7ff fe43 	bl	d601c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6396:	4669      	mov	r1, sp
   d6398:	4628      	mov	r0, r5
   d639a:	f7fe ff19 	bl	d51d0 <_ZN5Print5writeEPKc>
   d639e:	4604      	mov	r4, r0
   d63a0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d63a2:	b11e      	cbz	r6, d63ac <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d63a4:	4628      	mov	r0, r5
   d63a6:	f7ff ff98 	bl	d62da <_ZN5Print7printlnEv>
   d63aa:	4404      	add	r4, r0
    return n;
}
   d63ac:	4620      	mov	r0, r4
   d63ae:	371c      	adds	r7, #28
   d63b0:	46bd      	mov	sp, r7
   d63b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d63b6:	b002      	add	sp, #8
   d63b8:	4770      	bx	lr
	...

000d63bc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d63bc:	4b01      	ldr	r3, [pc, #4]	; (d63c4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d63be:	4a02      	ldr	r2, [pc, #8]	; (d63c8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d63c0:	601a      	str	r2, [r3, #0]
   d63c2:	4770      	bx	lr
   d63c4:	2003e3f4 	.word	0x2003e3f4
   d63c8:	000d72bb 	.word	0x000d72bb

000d63cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d63cc:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d63ce:	681a      	ldr	r2, [r3, #0]
   d63d0:	4b02      	ldr	r3, [pc, #8]	; (d63dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d63d2:	601a      	str	r2, [r3, #0]
   d63d4:	4770      	bx	lr
   d63d6:	bf00      	nop
   d63d8:	2003de68 	.word	0x2003de68
   d63dc:	2003e3f8 	.word	0x2003e3f8

000d63e0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d63e0:	2100      	movs	r1, #0
   d63e2:	f7ff bd8f 	b.w	d5f04 <system_delay_ms>

000d63e6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d63e6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d63e8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d63ea:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d63ec:	b113      	cbz	r3, d63f4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d63ee:	2203      	movs	r2, #3
   d63f0:	4601      	mov	r1, r0
   d63f2:	4798      	blx	r3
    }
   d63f4:	4620      	mov	r0, r4
   d63f6:	bd10      	pop	{r4, pc}

000d63f8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d63f8:	b510      	push	{r4, lr}
   d63fa:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d63fc:	f7ff fff3 	bl	d63e6 <_ZNSt14_Function_baseD1Ev>
   d6400:	4620      	mov	r0, r4
   d6402:	bd10      	pop	{r4, pc}

000d6404 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6404:	4803      	ldr	r0, [pc, #12]	; (d6414 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6406:	4a04      	ldr	r2, [pc, #16]	; (d6418 <_GLOBAL__sub_I_RGB+0x14>)
   d6408:	4904      	ldr	r1, [pc, #16]	; (d641c <_GLOBAL__sub_I_RGB+0x18>)
   d640a:	2300      	movs	r3, #0
   d640c:	6083      	str	r3, [r0, #8]
   d640e:	f000 bcb7 	b.w	d6d80 <__aeabi_atexit>
   d6412:	bf00      	nop
   d6414:	2003e3fc 	.word	0x2003e3fc
   d6418:	2003ded0 	.word	0x2003ded0
   d641c:	000d63f9 	.word	0x000d63f9

000d6420 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6420:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6422:	4b0c      	ldr	r3, [pc, #48]	; (d6454 <serialEventRun+0x34>)
   d6424:	b133      	cbz	r3, d6434 <serialEventRun+0x14>
   d6426:	f000 f957 	bl	d66d8 <_Z16_fetch_usbserialv>
   d642a:	6803      	ldr	r3, [r0, #0]
   d642c:	691b      	ldr	r3, [r3, #16]
   d642e:	4798      	blx	r3
   d6430:	2800      	cmp	r0, #0
   d6432:	dc09      	bgt.n	d6448 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6434:	4b08      	ldr	r3, [pc, #32]	; (d6458 <serialEventRun+0x38>)
   d6436:	b163      	cbz	r3, d6452 <serialEventRun+0x32>
   d6438:	f000 f9d0 	bl	d67dc <_Z22__fetch_global_Serial1v>
   d643c:	6803      	ldr	r3, [r0, #0]
   d643e:	691b      	ldr	r3, [r3, #16]
   d6440:	4798      	blx	r3
   d6442:	2800      	cmp	r0, #0
   d6444:	dc03      	bgt.n	d644e <serialEventRun+0x2e>
   d6446:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6448:	f3af 8000 	nop.w
   d644c:	e7f2      	b.n	d6434 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d644e:	f3af 8000 	nop.w
   d6452:	bd08      	pop	{r3, pc}
	...

000d645c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d645c:	b508      	push	{r3, lr}
	serialEventRun();
   d645e:	f7ff ffdf 	bl	d6420 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6462:	f7ff fc5f 	bl	d5d24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6466:	4b01      	ldr	r3, [pc, #4]	; (d646c <_post_loop+0x10>)
   d6468:	6018      	str	r0, [r3, #0]
   d646a:	bd08      	pop	{r3, pc}
   d646c:	2003e730 	.word	0x2003e730

000d6470 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6470:	4802      	ldr	r0, [pc, #8]	; (d647c <_Z33system_initialize_user_backup_ramv+0xc>)
   d6472:	4a03      	ldr	r2, [pc, #12]	; (d6480 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6474:	4903      	ldr	r1, [pc, #12]	; (d6484 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6476:	1a12      	subs	r2, r2, r0
   d6478:	f000 be09 	b.w	d708e <memcpy>
   d647c:	2003f400 	.word	0x2003f400
   d6480:	2003f404 	.word	0x2003f404
   d6484:	000d7580 	.word	0x000d7580

000d6488 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6488:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d648a:	2300      	movs	r3, #0
   d648c:	9300      	str	r3, [sp, #0]
   d648e:	461a      	mov	r2, r3
   d6490:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6494:	f7ff fd48 	bl	d5f28 <system_ctrl_set_result>
}
   d6498:	b003      	add	sp, #12
   d649a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d64a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d64a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d64a2:	8843      	ldrh	r3, [r0, #2]
   d64a4:	2b0a      	cmp	r3, #10
   d64a6:	d008      	beq.n	d64ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d64a8:	2b50      	cmp	r3, #80	; 0x50
   d64aa:	d109      	bne.n	d64c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d64ac:	4b09      	ldr	r3, [pc, #36]	; (d64d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d64ae:	681b      	ldr	r3, [r3, #0]
   d64b0:	b13b      	cbz	r3, d64c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d64b2:	b003      	add	sp, #12
   d64b4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d64b8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d64ba:	f7ff ffe5 	bl	d6488 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d64be:	e006      	b.n	d64ce <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d64c0:	2300      	movs	r3, #0
   d64c2:	9300      	str	r3, [sp, #0]
   d64c4:	461a      	mov	r2, r3
   d64c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d64ca:	f7ff fd2d 	bl	d5f28 <system_ctrl_set_result>
        break;
    }
}
   d64ce:	b003      	add	sp, #12
   d64d0:	f85d fb04 	ldr.w	pc, [sp], #4
   d64d4:	2003e40c 	.word	0x2003e40c

000d64d8 <module_user_init_hook>:

void module_user_init_hook()
{
   d64d8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d64da:	4c10      	ldr	r4, [pc, #64]	; (d651c <module_user_init_hook+0x44>)
   d64dc:	4d10      	ldr	r5, [pc, #64]	; (d6520 <module_user_init_hook+0x48>)
   d64de:	6823      	ldr	r3, [r4, #0]
   d64e0:	42ab      	cmp	r3, r5
   d64e2:	4b10      	ldr	r3, [pc, #64]	; (d6524 <module_user_init_hook+0x4c>)
   d64e4:	bf0c      	ite	eq
   d64e6:	2201      	moveq	r2, #1
   d64e8:	2200      	movne	r2, #0
   d64ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d64ec:	d002      	beq.n	d64f4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d64ee:	f7ff ffbf 	bl	d6470 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d64f2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d64f4:	f7ff fc06 	bl	d5d04 <HAL_RNG_GetRandomNumber>
   d64f8:	4604      	mov	r4, r0
    srand(seed);
   d64fa:	f000 fddb 	bl	d70b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d64fe:	4b0a      	ldr	r3, [pc, #40]	; (d6528 <module_user_init_hook+0x50>)
   d6500:	b113      	cbz	r3, d6508 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6502:	4620      	mov	r0, r4
   d6504:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6508:	2100      	movs	r1, #0
   d650a:	4807      	ldr	r0, [pc, #28]	; (d6528 <module_user_init_hook+0x50>)
   d650c:	f7ff fd6e 	bl	d5fec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6510:	2100      	movs	r1, #0
   d6512:	4806      	ldr	r0, [pc, #24]	; (d652c <module_user_init_hook+0x54>)
}
   d6514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6518:	f7ff bcfc 	b.w	d5f14 <system_ctrl_set_app_request_handler>
   d651c:	2003f400 	.word	0x2003f400
   d6520:	9a271c1e 	.word	0x9a271c1e
   d6524:	2003e410 	.word	0x2003e410
   d6528:	00000000 	.word	0x00000000
   d652c:	000d64a1 	.word	0x000d64a1

000d6530 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6530:	4770      	bx	lr

000d6532 <_ZN9IPAddressD0Ev>:
   d6532:	b510      	push	{r4, lr}
   d6534:	2118      	movs	r1, #24
   d6536:	4604      	mov	r4, r0
   d6538:	f000 fc30 	bl	d6d9c <_ZdlPvj>
   d653c:	4620      	mov	r0, r4
   d653e:	bd10      	pop	{r4, pc}

000d6540 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6540:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6542:	7d03      	ldrb	r3, [r0, #20]
   d6544:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6546:	b08d      	sub	sp, #52	; 0x34
   d6548:	460e      	mov	r6, r1
   d654a:	f100 0704 	add.w	r7, r0, #4
   d654e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6552:	d002      	beq.n	d655a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6554:	f100 0508 	add.w	r5, r0, #8
   d6558:	e018      	b.n	d658c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d655a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d655c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d655e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6562:	232f      	movs	r3, #47	; 0x2f
   d6564:	462a      	mov	r2, r5
   d6566:	200a      	movs	r0, #10
   d6568:	f7ff fc0c 	bl	d5d84 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d656c:	4628      	mov	r0, r5
   d656e:	f000 fdc9 	bl	d7104 <strlen>
   d6572:	6833      	ldr	r3, [r6, #0]
   d6574:	4602      	mov	r2, r0
   d6576:	68db      	ldr	r3, [r3, #12]
   d6578:	4629      	mov	r1, r5
   d657a:	4630      	mov	r0, r6
   d657c:	4798      	blx	r3
   d657e:	e00f      	b.n	d65a0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6580:	b124      	cbz	r4, d658c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6582:	212e      	movs	r1, #46	; 0x2e
   d6584:	4630      	mov	r0, r6
   d6586:	f7ff fea5 	bl	d62d4 <_ZN5Print5printEc>
   d658a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d658c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6590:	220a      	movs	r2, #10
   d6592:	4630      	mov	r0, r6
   d6594:	f7ff feb7 	bl	d6306 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6598:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d659a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d659c:	d1f0      	bne.n	d6580 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d659e:	4620      	mov	r0, r4
    }
    return n;
}
   d65a0:	b00d      	add	sp, #52	; 0x34
   d65a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d65a4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d65a4:	b510      	push	{r4, lr}
   d65a6:	4b05      	ldr	r3, [pc, #20]	; (d65bc <_ZN9IPAddressC1Ev+0x18>)
   d65a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d65aa:	2211      	movs	r2, #17
   d65ac:	f840 3b04 	str.w	r3, [r0], #4
   d65b0:	2100      	movs	r1, #0
   d65b2:	f000 fd77 	bl	d70a4 <memset>
{
    clear();
}
   d65b6:	4620      	mov	r0, r4
   d65b8:	bd10      	pop	{r4, pc}
   d65ba:	bf00      	nop
   d65bc:	000d735c 	.word	0x000d735c

000d65c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d65c0:	4603      	mov	r3, r0
   d65c2:	4a07      	ldr	r2, [pc, #28]	; (d65e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d65c4:	b510      	push	{r4, lr}
   d65c6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d65ca:	f101 0210 	add.w	r2, r1, #16
   d65ce:	f851 4b04 	ldr.w	r4, [r1], #4
   d65d2:	f843 4b04 	str.w	r4, [r3], #4
   d65d6:	4291      	cmp	r1, r2
   d65d8:	d1f9      	bne.n	d65ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d65da:	780a      	ldrb	r2, [r1, #0]
   d65dc:	701a      	strb	r2, [r3, #0]
}
   d65de:	bd10      	pop	{r4, pc}
   d65e0:	000d735c 	.word	0x000d735c

000d65e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d65e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d65e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d65ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d65ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d65f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d65f6:	2304      	movs	r3, #4
   d65f8:	6041      	str	r1, [r0, #4]
   d65fa:	7503      	strb	r3, [r0, #20]
   d65fc:	bd10      	pop	{r4, pc}

000d65fe <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d65fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6600:	780d      	ldrb	r5, [r1, #0]
   d6602:	788b      	ldrb	r3, [r1, #2]
   d6604:	784a      	ldrb	r2, [r1, #1]
   d6606:	78c9      	ldrb	r1, [r1, #3]
   d6608:	9100      	str	r1, [sp, #0]
   d660a:	4629      	mov	r1, r5
   d660c:	f7ff ffea 	bl	d65e4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6610:	b003      	add	sp, #12
   d6612:	bd30      	pop	{r4, r5, pc}

000d6614 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6614:	7441      	strb	r1, [r0, #17]
   d6616:	4770      	bx	lr

000d6618 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6618:	4770      	bx	lr

000d661a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d661a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d661c:	2100      	movs	r1, #0
   d661e:	7c00      	ldrb	r0, [r0, #16]
   d6620:	f7ff fc50 	bl	d5ec4 <HAL_USB_USART_Receive_Data>
}
   d6624:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6628:	bf28      	it	cs
   d662a:	f04f 30ff 	movcs.w	r0, #4294967295
   d662e:	bd08      	pop	{r3, pc}

000d6630 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6630:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6632:	2101      	movs	r1, #1
   d6634:	7c00      	ldrb	r0, [r0, #16]
   d6636:	f7ff fc45 	bl	d5ec4 <HAL_USB_USART_Receive_Data>
}
   d663a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d663e:	bf28      	it	cs
   d6640:	f04f 30ff 	movcs.w	r0, #4294967295
   d6644:	bd08      	pop	{r3, pc}

000d6646 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6646:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6648:	7c00      	ldrb	r0, [r0, #16]
   d664a:	f7ff fc33 	bl	d5eb4 <HAL_USB_USART_Available_Data_For_Write>
}
   d664e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6652:	bd08      	pop	{r3, pc}

000d6654 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6654:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6656:	7c00      	ldrb	r0, [r0, #16]
   d6658:	f7ff fc24 	bl	d5ea4 <HAL_USB_USART_Available_Data>
}
   d665c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6660:	bd08      	pop	{r3, pc}

000d6662 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6662:	7c00      	ldrb	r0, [r0, #16]
   d6664:	f7ff bc3e 	b.w	d5ee4 <HAL_USB_USART_Flush_Data>

000d6668 <_ZN9USBSerialD0Ev>:
   d6668:	b510      	push	{r4, lr}
   d666a:	2114      	movs	r1, #20
   d666c:	4604      	mov	r4, r0
   d666e:	f000 fb95 	bl	d6d9c <_ZdlPvj>
   d6672:	4620      	mov	r0, r4
   d6674:	bd10      	pop	{r4, pc}

000d6676 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6676:	b538      	push	{r3, r4, r5, lr}
   d6678:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d667a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d667c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d667e:	f7ff fc19 	bl	d5eb4 <HAL_USB_USART_Available_Data_For_Write>
   d6682:	2800      	cmp	r0, #0
   d6684:	dc01      	bgt.n	d668a <_ZN9USBSerial5writeEh+0x14>
   d6686:	7c60      	ldrb	r0, [r4, #17]
   d6688:	b128      	cbz	r0, d6696 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d668a:	4629      	mov	r1, r5
   d668c:	7c20      	ldrb	r0, [r4, #16]
   d668e:	f7ff fc21 	bl	d5ed4 <HAL_USB_USART_Send_Data>
   d6692:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6696:	bd38      	pop	{r3, r4, r5, pc}

000d6698 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6698:	b510      	push	{r4, lr}
   d669a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d669c:	2300      	movs	r3, #0
   d669e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d66a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d66a4:	60a3      	str	r3, [r4, #8]
   d66a6:	4b05      	ldr	r3, [pc, #20]	; (d66bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d66a8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d66aa:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d66ac:	4608      	mov	r0, r1
{
  _serial = serial;
   d66ae:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d66b0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d66b2:	4611      	mov	r1, r2
   d66b4:	f7ff fbe6 	bl	d5e84 <HAL_USB_USART_Init>
}
   d66b8:	4620      	mov	r0, r4
   d66ba:	bd10      	pop	{r4, pc}
   d66bc:	000d7370 	.word	0x000d7370

000d66c0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d66c0:	2200      	movs	r2, #0
   d66c2:	7c00      	ldrb	r0, [r0, #16]
   d66c4:	f7ff bbe6 	b.w	d5e94 <HAL_USB_USART_Begin>

000d66c8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d66c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d66ca:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d66cc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d66ce:	2100      	movs	r1, #0
   d66d0:	f000 fce8 	bl	d70a4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d66d4:	4620      	mov	r0, r4
   d66d6:	bd10      	pop	{r4, pc}

000d66d8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d66d8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66da:	4d0e      	ldr	r5, [pc, #56]	; (d6714 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d66dc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d66de:	a801      	add	r0, sp, #4
   d66e0:	f7ff fff2 	bl	d66c8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66e4:	6829      	ldr	r1, [r5, #0]
   d66e6:	f011 0401 	ands.w	r4, r1, #1
   d66ea:	d110      	bne.n	d670e <_Z16_fetch_usbserialv+0x36>
   d66ec:	4628      	mov	r0, r5
   d66ee:	f7fd fcd6 	bl	d409e <__cxa_guard_acquire>
   d66f2:	b160      	cbz	r0, d670e <_Z16_fetch_usbserialv+0x36>
   d66f4:	aa01      	add	r2, sp, #4
   d66f6:	4621      	mov	r1, r4
   d66f8:	4807      	ldr	r0, [pc, #28]	; (d6718 <_Z16_fetch_usbserialv+0x40>)
   d66fa:	f7ff ffcd 	bl	d6698 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d66fe:	4628      	mov	r0, r5
   d6700:	f7fd fcd2 	bl	d40a8 <__cxa_guard_release>
   d6704:	4a05      	ldr	r2, [pc, #20]	; (d671c <_Z16_fetch_usbserialv+0x44>)
   d6706:	4906      	ldr	r1, [pc, #24]	; (d6720 <_Z16_fetch_usbserialv+0x48>)
   d6708:	4803      	ldr	r0, [pc, #12]	; (d6718 <_Z16_fetch_usbserialv+0x40>)
   d670a:	f000 fb39 	bl	d6d80 <__aeabi_atexit>
	return _usbserial;
}
   d670e:	4802      	ldr	r0, [pc, #8]	; (d6718 <_Z16_fetch_usbserialv+0x40>)
   d6710:	b007      	add	sp, #28
   d6712:	bd30      	pop	{r4, r5, pc}
   d6714:	2003e414 	.word	0x2003e414
   d6718:	2003e418 	.word	0x2003e418
   d671c:	2003ded0 	.word	0x2003ded0
   d6720:	000d6619 	.word	0x000d6619

000d6724 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6724:	4770      	bx	lr

000d6726 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6726:	7441      	strb	r1, [r0, #17]
   d6728:	4770      	bx	lr

000d672a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d672a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d672c:	7c00      	ldrb	r0, [r0, #16]
   d672e:	f7ff fb69 	bl	d5e04 <HAL_USART_Available_Data_For_Write>
}
   d6732:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6736:	bd08      	pop	{r3, pc}

000d6738 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6738:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d673a:	7c00      	ldrb	r0, [r0, #16]
   d673c:	f7ff fb3a 	bl	d5db4 <HAL_USART_Available_Data>
}
   d6740:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6744:	bd08      	pop	{r3, pc}

000d6746 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6746:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6748:	7c00      	ldrb	r0, [r0, #16]
   d674a:	f7ff fb43 	bl	d5dd4 <HAL_USART_Peek_Data>
}
   d674e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6752:	bf28      	it	cs
   d6754:	f04f 30ff 	movcs.w	r0, #4294967295
   d6758:	bd08      	pop	{r3, pc}

000d675a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d675a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d675c:	7c00      	ldrb	r0, [r0, #16]
   d675e:	f7ff fb31 	bl	d5dc4 <HAL_USART_Read_Data>
}
   d6762:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6766:	bf28      	it	cs
   d6768:	f04f 30ff 	movcs.w	r0, #4294967295
   d676c:	bd08      	pop	{r3, pc}

000d676e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d676e:	7c00      	ldrb	r0, [r0, #16]
   d6770:	f7ff bb38 	b.w	d5de4 <HAL_USART_Flush_Data>

000d6774 <_ZN11USARTSerialD0Ev>:
   d6774:	b510      	push	{r4, lr}
   d6776:	2114      	movs	r1, #20
   d6778:	4604      	mov	r4, r0
   d677a:	f000 fb0f 	bl	d6d9c <_ZdlPvj>
   d677e:	4620      	mov	r0, r4
   d6780:	bd10      	pop	{r4, pc}

000d6782 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6782:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6784:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6786:	4604      	mov	r4, r0
   d6788:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d678a:	b925      	cbnz	r5, d6796 <_ZN11USARTSerial5writeEh+0x14>
   d678c:	7c00      	ldrb	r0, [r0, #16]
   d678e:	f7ff fb39 	bl	d5e04 <HAL_USART_Available_Data_For_Write>
   d6792:	2800      	cmp	r0, #0
   d6794:	dd05      	ble.n	d67a2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6796:	4631      	mov	r1, r6
   d6798:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d679a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d679e:	f7ff bb01 	b.w	d5da4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d67a2:	4628      	mov	r0, r5
   d67a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d67a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d67a8:	b510      	push	{r4, lr}
   d67aa:	4604      	mov	r4, r0
   d67ac:	4608      	mov	r0, r1
   d67ae:	4611      	mov	r1, r2
   d67b0:	2200      	movs	r2, #0
   d67b2:	6062      	str	r2, [r4, #4]
   d67b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d67b8:	60a2      	str	r2, [r4, #8]
   d67ba:	4a05      	ldr	r2, [pc, #20]	; (d67d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d67bc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d67be:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d67c0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d67c2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d67c4:	461a      	mov	r2, r3
   d67c6:	f7ff fae5 	bl	d5d94 <HAL_USART_Init>
}
   d67ca:	4620      	mov	r0, r4
   d67cc:	bd10      	pop	{r4, pc}
   d67ce:	bf00      	nop
   d67d0:	000d73a0 	.word	0x000d73a0

000d67d4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d67d4:	7c00      	ldrb	r0, [r0, #16]
   d67d6:	f7ff bb0d 	b.w	d5df4 <HAL_USART_Is_Enabled>
	...

000d67dc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d67dc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d67de:	4d0c      	ldr	r5, [pc, #48]	; (d6810 <_Z22__fetch_global_Serial1v+0x34>)
   d67e0:	6829      	ldr	r1, [r5, #0]
   d67e2:	f011 0401 	ands.w	r4, r1, #1
   d67e6:	d111      	bne.n	d680c <_Z22__fetch_global_Serial1v+0x30>
   d67e8:	4628      	mov	r0, r5
   d67ea:	f7fd fc58 	bl	d409e <__cxa_guard_acquire>
   d67ee:	b168      	cbz	r0, d680c <_Z22__fetch_global_Serial1v+0x30>
   d67f0:	4a08      	ldr	r2, [pc, #32]	; (d6814 <_Z22__fetch_global_Serial1v+0x38>)
   d67f2:	4b09      	ldr	r3, [pc, #36]	; (d6818 <_Z22__fetch_global_Serial1v+0x3c>)
   d67f4:	4809      	ldr	r0, [pc, #36]	; (d681c <_Z22__fetch_global_Serial1v+0x40>)
   d67f6:	4621      	mov	r1, r4
   d67f8:	f7ff ffd6 	bl	d67a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d67fc:	4628      	mov	r0, r5
   d67fe:	f7fd fc53 	bl	d40a8 <__cxa_guard_release>
   d6802:	4a07      	ldr	r2, [pc, #28]	; (d6820 <_Z22__fetch_global_Serial1v+0x44>)
   d6804:	4907      	ldr	r1, [pc, #28]	; (d6824 <_Z22__fetch_global_Serial1v+0x48>)
   d6806:	4805      	ldr	r0, [pc, #20]	; (d681c <_Z22__fetch_global_Serial1v+0x40>)
   d6808:	f000 faba 	bl	d6d80 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d680c:	4803      	ldr	r0, [pc, #12]	; (d681c <_Z22__fetch_global_Serial1v+0x40>)
   d680e:	bd38      	pop	{r3, r4, r5, pc}
   d6810:	2003e4c4 	.word	0x2003e4c4
   d6814:	2003e4c8 	.word	0x2003e4c8
   d6818:	2003e440 	.word	0x2003e440
   d681c:	2003e42c 	.word	0x2003e42c
   d6820:	2003ded0 	.word	0x2003ded0
   d6824:	000d6725 	.word	0x000d6725

000d6828 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6828:	4770      	bx	lr

000d682a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d682a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d682c:	4606      	mov	r6, r0
   d682e:	4615      	mov	r5, r2
   d6830:	460c      	mov	r4, r1
   d6832:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6834:	42bc      	cmp	r4, r7
   d6836:	d006      	beq.n	d6846 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6838:	6833      	ldr	r3, [r6, #0]
   d683a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d683e:	689b      	ldr	r3, [r3, #8]
   d6840:	4630      	mov	r0, r6
   d6842:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6844:	e7f6      	b.n	d6834 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6846:	4628      	mov	r0, r5
   d6848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d684a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d684a:	2200      	movs	r2, #0
   d684c:	7c00      	ldrb	r0, [r0, #16]
   d684e:	f7ff bae1 	b.w	d5e14 <HAL_I2C_Write_Data>

000d6852 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6852:	2100      	movs	r1, #0
   d6854:	7c00      	ldrb	r0, [r0, #16]
   d6856:	f7ff bae5 	b.w	d5e24 <HAL_I2C_Available_Data>

000d685a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d685a:	2100      	movs	r1, #0
   d685c:	7c00      	ldrb	r0, [r0, #16]
   d685e:	f7ff bae9 	b.w	d5e34 <HAL_I2C_Read_Data>

000d6862 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6862:	2100      	movs	r1, #0
   d6864:	7c00      	ldrb	r0, [r0, #16]
   d6866:	f7ff baed 	b.w	d5e44 <HAL_I2C_Peek_Data>

000d686a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d686a:	2100      	movs	r1, #0
   d686c:	7c00      	ldrb	r0, [r0, #16]
   d686e:	f7ff baf1 	b.w	d5e54 <HAL_I2C_Flush_Data>

000d6872 <_ZN7TwoWireD0Ev>:
   d6872:	b510      	push	{r4, lr}
   d6874:	2114      	movs	r1, #20
   d6876:	4604      	mov	r4, r0
   d6878:	f000 fa90 	bl	d6d9c <_ZdlPvj>
   d687c:	4620      	mov	r0, r4
   d687e:	bd10      	pop	{r4, pc}

000d6880 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6880:	b510      	push	{r4, lr}
   d6882:	4604      	mov	r4, r0
   d6884:	2300      	movs	r3, #0
   d6886:	6063      	str	r3, [r4, #4]
   d6888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d688c:	60a3      	str	r3, [r4, #8]
   d688e:	4b04      	ldr	r3, [pc, #16]	; (d68a0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6890:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6892:	4608      	mov	r0, r1
   d6894:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6896:	4611      	mov	r1, r2
   d6898:	f7ff faec 	bl	d5e74 <HAL_I2C_Init>
}
   d689c:	4620      	mov	r0, r4
   d689e:	bd10      	pop	{r4, pc}
   d68a0:	000d73d0 	.word	0x000d73d0

000d68a4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d68a4:	2100      	movs	r1, #0
   d68a6:	7c00      	ldrb	r0, [r0, #16]
   d68a8:	f7ff badc 	b.w	d5e64 <HAL_I2C_Is_Enabled>

000d68ac <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d68ac:	2200      	movs	r2, #0
   d68ae:	4611      	mov	r1, r2
   d68b0:	6840      	ldr	r0, [r0, #4]
   d68b2:	f7ff bb7b 	b.w	d5fac <network_listening>

000d68b6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d68b6:	2200      	movs	r2, #0
   d68b8:	4611      	mov	r1, r2
   d68ba:	6840      	ldr	r0, [r0, #4]
   d68bc:	f7ff bb86 	b.w	d5fcc <network_get_listen_timeout>

000d68c0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d68c0:	2200      	movs	r2, #0
   d68c2:	6840      	ldr	r0, [r0, #4]
   d68c4:	f7ff bb7a 	b.w	d5fbc <network_set_listen_timeout>

000d68c8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d68c8:	2200      	movs	r2, #0
   d68ca:	f081 0101 	eor.w	r1, r1, #1
   d68ce:	6840      	ldr	r0, [r0, #4]
   d68d0:	f7ff bb64 	b.w	d5f9c <network_listen>

000d68d4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d68d4:	2300      	movs	r3, #0
   d68d6:	461a      	mov	r2, r3
   d68d8:	2101      	movs	r1, #1
   d68da:	6840      	ldr	r0, [r0, #4]
   d68dc:	f7ff bb56 	b.w	d5f8c <network_off>

000d68e0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d68e0:	2300      	movs	r3, #0
   d68e2:	461a      	mov	r2, r3
   d68e4:	4619      	mov	r1, r3
   d68e6:	6840      	ldr	r0, [r0, #4]
   d68e8:	f7ff bb48 	b.w	d5f7c <network_on>

000d68ec <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d68ec:	2200      	movs	r2, #0
   d68ee:	4611      	mov	r1, r2
   d68f0:	6840      	ldr	r0, [r0, #4]
   d68f2:	f7ff bb3b 	b.w	d5f6c <network_ready>

000d68f6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d68f6:	2200      	movs	r2, #0
   d68f8:	4611      	mov	r1, r2
   d68fa:	6840      	ldr	r0, [r0, #4]
   d68fc:	f7ff bb26 	b.w	d5f4c <network_connecting>

000d6900 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6900:	2200      	movs	r2, #0
   d6902:	2102      	movs	r1, #2
   d6904:	6840      	ldr	r0, [r0, #4]
   d6906:	f7ff bb29 	b.w	d5f5c <network_disconnect>

000d690a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d690a:	2300      	movs	r3, #0
   d690c:	461a      	mov	r2, r3
   d690e:	6840      	ldr	r0, [r0, #4]
   d6910:	f7ff bb14 	b.w	d5f3c <network_connect>

000d6914 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6914:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6916:	4605      	mov	r5, r0
   d6918:	b188      	cbz	r0, d693e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d691a:	6804      	ldr	r4, [r0, #0]
   d691c:	b14c      	cbz	r4, d6932 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d691e:	68a3      	ldr	r3, [r4, #8]
   d6920:	b11b      	cbz	r3, d692a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6922:	2203      	movs	r2, #3
   d6924:	4621      	mov	r1, r4
   d6926:	4620      	mov	r0, r4
   d6928:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d692a:	2110      	movs	r1, #16
   d692c:	4620      	mov	r0, r4
   d692e:	f000 fa35 	bl	d6d9c <_ZdlPvj>
   d6932:	4628      	mov	r0, r5
   d6934:	2114      	movs	r1, #20
      }
   d6936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d693a:	f000 ba2f 	b.w	d6d9c <_ZdlPvj>
   d693e:	bd38      	pop	{r3, r4, r5, pc}

000d6940 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6940:	b110      	cbz	r0, d6948 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6942:	6803      	ldr	r3, [r0, #0]
   d6944:	685b      	ldr	r3, [r3, #4]
   d6946:	4718      	bx	r3
   d6948:	4770      	bx	lr

000d694a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d694a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d694c:	6803      	ldr	r3, [r0, #0]
   d694e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6950:	b1bb      	cbz	r3, d6982 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6952:	6858      	ldr	r0, [r3, #4]
   d6954:	f7ff f9ee 	bl	d5d34 <os_thread_is_current>
   d6958:	b978      	cbnz	r0, d697a <_ZN6ThreadD1Ev+0x30>
   d695a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d695c:	7c5a      	ldrb	r2, [r3, #17]
   d695e:	b912      	cbnz	r2, d6966 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6960:	6858      	ldr	r0, [r3, #4]
   d6962:	f7ff f9ef 	bl	d5d44 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6966:	6823      	ldr	r3, [r4, #0]
   d6968:	6858      	ldr	r0, [r3, #4]
   d696a:	f7ff f9f3 	bl	d5d54 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d696e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6970:	2300      	movs	r3, #0
   d6972:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6974:	b128      	cbz	r0, d6982 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6976:	f7ff ffcd 	bl	d6914 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d697a:	6820      	ldr	r0, [r4, #0]
   d697c:	b108      	cbz	r0, d6982 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d697e:	f7ff ffc9 	bl	d6914 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6982:	4620      	mov	r0, r4
   d6984:	bd10      	pop	{r4, pc}

000d6986 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6986:	b538      	push	{r3, r4, r5, lr}
   d6988:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d698a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d698e:	b108      	cbz	r0, d6994 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6990:	f7fd fb83 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6994:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6998:	b108      	cbz	r0, d699e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d699a:	f7ff f9eb 	bl	d5d74 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d699e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d69a2:	b135      	cbz	r5, d69b2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d69a4:	4628      	mov	r0, r5
   d69a6:	f7ff ffd0 	bl	d694a <_ZN6ThreadD1Ev>
   d69aa:	2104      	movs	r1, #4
   d69ac:	4628      	mov	r0, r5
   d69ae:	f000 f9f5 	bl	d6d9c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69b2:	6820      	ldr	r0, [r4, #0]
   d69b4:	b108      	cbz	r0, d69ba <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d69b6:	f7ff ffc3 	bl	d6940 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d69ba:	4620      	mov	r0, r4
   d69bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d69c0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d69c0:	b510      	push	{r4, lr}
   d69c2:	4b04      	ldr	r3, [pc, #16]	; (d69d4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d69c4:	4604      	mov	r4, r0
   d69c6:	f840 3b08 	str.w	r3, [r0], #8
   d69ca:	f7ff ffdc 	bl	d6986 <_ZN5spark11MeshPublishD1Ev>
   d69ce:	4620      	mov	r0, r4
   d69d0:	bd10      	pop	{r4, pc}
   d69d2:	bf00      	nop
   d69d4:	000d73f8 	.word	0x000d73f8

000d69d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d69d8:	b538      	push	{r3, r4, r5, lr}
   d69da:	4c0e      	ldr	r4, [pc, #56]	; (d6a14 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d69dc:	4b0e      	ldr	r3, [pc, #56]	; (d6a18 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d69de:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d69e0:	2500      	movs	r5, #0
   d69e2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d69e4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d69e8:	6063      	str	r3, [r4, #4]
   d69ea:	60a5      	str	r5, [r4, #8]
   d69ec:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d69f0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d69f4:	f7ff f9b6 	bl	d5d64 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d69f8:	4b08      	ldr	r3, [pc, #32]	; (d6a1c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d69fa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d69fe:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6a02:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6a04:	4620      	mov	r0, r4
   d6a06:	4a06      	ldr	r2, [pc, #24]	; (d6a20 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6a08:	4906      	ldr	r1, [pc, #24]	; (d6a24 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6a0e:	f000 b9b7 	b.w	d6d80 <__aeabi_atexit>
   d6a12:	bf00      	nop
   d6a14:	2003e54c 	.word	0x2003e54c
   d6a18:	000d7460 	.word	0x000d7460
   d6a1c:	000d73f8 	.word	0x000d73f8
   d6a20:	2003ded0 	.word	0x2003ded0
   d6a24:	000d69c1 	.word	0x000d69c1

000d6a28 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6a28:	2200      	movs	r2, #0
   d6a2a:	4611      	mov	r1, r2
   d6a2c:	6840      	ldr	r0, [r0, #4]
   d6a2e:	f7ff ba9d 	b.w	d5f6c <network_ready>

000d6a32 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a32:	2200      	movs	r2, #0
   d6a34:	4611      	mov	r1, r2
   d6a36:	6840      	ldr	r0, [r0, #4]
   d6a38:	f7ff bab8 	b.w	d5fac <network_listening>

000d6a3c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6a3c:	2200      	movs	r2, #0
   d6a3e:	4611      	mov	r1, r2
   d6a40:	6840      	ldr	r0, [r0, #4]
   d6a42:	f7ff bac3 	b.w	d5fcc <network_get_listen_timeout>

000d6a46 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6a46:	2200      	movs	r2, #0
   d6a48:	6840      	ldr	r0, [r0, #4]
   d6a4a:	f7ff bab7 	b.w	d5fbc <network_set_listen_timeout>

000d6a4e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6a4e:	2200      	movs	r2, #0
   d6a50:	f081 0101 	eor.w	r1, r1, #1
   d6a54:	6840      	ldr	r0, [r0, #4]
   d6a56:	f7ff baa1 	b.w	d5f9c <network_listen>

000d6a5a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6a5a:	2300      	movs	r3, #0
   d6a5c:	461a      	mov	r2, r3
   d6a5e:	4619      	mov	r1, r3
   d6a60:	6840      	ldr	r0, [r0, #4]
   d6a62:	f7ff ba93 	b.w	d5f8c <network_off>

000d6a66 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6a66:	2300      	movs	r3, #0
   d6a68:	461a      	mov	r2, r3
   d6a6a:	4619      	mov	r1, r3
   d6a6c:	6840      	ldr	r0, [r0, #4]
   d6a6e:	f7ff ba85 	b.w	d5f7c <network_on>

000d6a72 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a72:	2200      	movs	r2, #0
   d6a74:	4611      	mov	r1, r2
   d6a76:	6840      	ldr	r0, [r0, #4]
   d6a78:	f7ff ba68 	b.w	d5f4c <network_connecting>

000d6a7c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6a7c:	2200      	movs	r2, #0
   d6a7e:	2102      	movs	r1, #2
   d6a80:	6840      	ldr	r0, [r0, #4]
   d6a82:	f7ff ba6b 	b.w	d5f5c <network_disconnect>

000d6a86 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6a86:	2300      	movs	r3, #0
   d6a88:	461a      	mov	r2, r3
   d6a8a:	6840      	ldr	r0, [r0, #4]
   d6a8c:	f7ff ba56 	b.w	d5f3c <network_connect>

000d6a90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6a90:	4b02      	ldr	r3, [pc, #8]	; (d6a9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6a92:	2204      	movs	r2, #4
   d6a94:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6a96:	4a02      	ldr	r2, [pc, #8]	; (d6aa0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6a98:	601a      	str	r2, [r3, #0]
   d6a9a:	4770      	bx	lr
   d6a9c:	2003e720 	.word	0x2003e720
   d6aa0:	000d742c 	.word	0x000d742c

000d6aa4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6aa4:	2300      	movs	r3, #0
   d6aa6:	461a      	mov	r2, r3
   d6aa8:	6840      	ldr	r0, [r0, #4]
   d6aaa:	f7ff ba47 	b.w	d5f3c <network_connect>

000d6aae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6aae:	2200      	movs	r2, #0
   d6ab0:	2102      	movs	r1, #2
   d6ab2:	6840      	ldr	r0, [r0, #4]
   d6ab4:	f7ff ba52 	b.w	d5f5c <network_disconnect>

000d6ab8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6ab8:	2200      	movs	r2, #0
   d6aba:	4611      	mov	r1, r2
   d6abc:	6840      	ldr	r0, [r0, #4]
   d6abe:	f7ff ba45 	b.w	d5f4c <network_connecting>

000d6ac2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6ac2:	2200      	movs	r2, #0
   d6ac4:	4611      	mov	r1, r2
   d6ac6:	6840      	ldr	r0, [r0, #4]
   d6ac8:	f7ff ba50 	b.w	d5f6c <network_ready>

000d6acc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6acc:	2300      	movs	r3, #0
   d6ace:	461a      	mov	r2, r3
   d6ad0:	4619      	mov	r1, r3
   d6ad2:	6840      	ldr	r0, [r0, #4]
   d6ad4:	f7ff ba52 	b.w	d5f7c <network_on>

000d6ad8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6ad8:	2300      	movs	r3, #0
   d6ada:	461a      	mov	r2, r3
   d6adc:	4619      	mov	r1, r3
   d6ade:	6840      	ldr	r0, [r0, #4]
   d6ae0:	f7ff ba54 	b.w	d5f8c <network_off>

000d6ae4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6ae4:	2200      	movs	r2, #0
   d6ae6:	f081 0101 	eor.w	r1, r1, #1
   d6aea:	6840      	ldr	r0, [r0, #4]
   d6aec:	f7ff ba56 	b.w	d5f9c <network_listen>

000d6af0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6af0:	2200      	movs	r2, #0
   d6af2:	6840      	ldr	r0, [r0, #4]
   d6af4:	f7ff ba62 	b.w	d5fbc <network_set_listen_timeout>

000d6af8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6af8:	2200      	movs	r2, #0
   d6afa:	4611      	mov	r1, r2
   d6afc:	6840      	ldr	r0, [r0, #4]
   d6afe:	f7ff ba65 	b.w	d5fcc <network_get_listen_timeout>

000d6b02 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6b02:	2200      	movs	r2, #0
   d6b04:	4611      	mov	r1, r2
   d6b06:	6840      	ldr	r0, [r0, #4]
   d6b08:	f7ff ba50 	b.w	d5fac <network_listening>

000d6b0c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b10:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b12:	b095      	sub	sp, #84	; 0x54
   d6b14:	4616      	mov	r6, r2
   d6b16:	460d      	mov	r5, r1
   d6b18:	4607      	mov	r7, r0
    IPAddress addr;
   d6b1a:	f7ff fd43 	bl	d65a4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6b1e:	4621      	mov	r1, r4
   d6b20:	2220      	movs	r2, #32
   d6b22:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b24:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6b26:	f000 fabd 	bl	d70a4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6b2a:	2340      	movs	r3, #64	; 0x40
   d6b2c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6b2e:	4621      	mov	r1, r4
   d6b30:	466b      	mov	r3, sp
   d6b32:	aa0c      	add	r2, sp, #48	; 0x30
   d6b34:	4630      	mov	r0, r6
   d6b36:	f7ff f855 	bl	d5be4 <netdb_getaddrinfo>
    if (!r) {
   d6b3a:	4604      	mov	r4, r0
   d6b3c:	2800      	cmp	r0, #0
   d6b3e:	d144      	bne.n	d6bca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b40:	4602      	mov	r2, r0
   d6b42:	2101      	movs	r1, #1
   d6b44:	6868      	ldr	r0, [r5, #4]
   d6b46:	f7ff fa11 	bl	d5f6c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b4a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b4c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b4e:	4622      	mov	r2, r4
   d6b50:	6868      	ldr	r0, [r5, #4]
   d6b52:	f7ff fa0b 	bl	d5f6c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b56:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b58:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6b5a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b5c:	2e00      	cmp	r6, #0
   d6b5e:	d034      	beq.n	d6bca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6b60:	2900      	cmp	r1, #0
   d6b62:	d132      	bne.n	d6bca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6b64:	6873      	ldr	r3, [r6, #4]
   d6b66:	2b02      	cmp	r3, #2
   d6b68:	d002      	beq.n	d6b70 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6b6a:	2b0a      	cmp	r3, #10
   d6b6c:	d009      	beq.n	d6b82 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6b6e:	e02a      	b.n	d6bc6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6b70:	f1b8 0f00 	cmp.w	r8, #0
   d6b74:	d027      	beq.n	d6bc6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6b76:	6971      	ldr	r1, [r6, #20]
   d6b78:	4638      	mov	r0, r7
   d6b7a:	3104      	adds	r1, #4
   d6b7c:	f7ff fd3f 	bl	d65fe <_ZN9IPAddressaSEPKh>
   d6b80:	e020      	b.n	d6bc4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6b82:	f1b9 0f00 	cmp.w	r9, #0
   d6b86:	d01e      	beq.n	d6bc6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6b88:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6b8a:	2211      	movs	r2, #17
   d6b8c:	a801      	add	r0, sp, #4
   d6b8e:	f000 fa89 	bl	d70a4 <memset>
                    a.v = 6;
   d6b92:	2306      	movs	r3, #6
   d6b94:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6b98:	ad01      	add	r5, sp, #4
   d6b9a:	f104 0308 	add.w	r3, r4, #8
   d6b9e:	3418      	adds	r4, #24
   d6ba0:	6818      	ldr	r0, [r3, #0]
   d6ba2:	6859      	ldr	r1, [r3, #4]
   d6ba4:	462a      	mov	r2, r5
   d6ba6:	c203      	stmia	r2!, {r0, r1}
   d6ba8:	3308      	adds	r3, #8
   d6baa:	42a3      	cmp	r3, r4
   d6bac:	4615      	mov	r5, r2
   d6bae:	d1f7      	bne.n	d6ba0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6bb0:	a901      	add	r1, sp, #4
   d6bb2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6bb4:	ad07      	add	r5, sp, #28
   d6bb6:	f7ff fd03 	bl	d65c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6bbc:	1d3c      	adds	r4, r7, #4
   d6bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6bc0:	682b      	ldr	r3, [r5, #0]
   d6bc2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6bc4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bc6:	69f6      	ldr	r6, [r6, #28]
   d6bc8:	e7c8      	b.n	d6b5c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6bca:	9800      	ldr	r0, [sp, #0]
   d6bcc:	f7ff f802 	bl	d5bd4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6bd0:	4638      	mov	r0, r7
   d6bd2:	b015      	add	sp, #84	; 0x54
   d6bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6bd8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6bd8:	4b02      	ldr	r3, [pc, #8]	; (d6be4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6bda:	4a03      	ldr	r2, [pc, #12]	; (d6be8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6bdc:	601a      	str	r2, [r3, #0]
   d6bde:	2200      	movs	r2, #0
   d6be0:	605a      	str	r2, [r3, #4]
   d6be2:	4770      	bx	lr
   d6be4:	2003e728 	.word	0x2003e728
   d6be8:	000d7460 	.word	0x000d7460

000d6bec <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6bec:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6bee:	4e18      	ldr	r6, [pc, #96]	; (d6c50 <pinAvailable+0x64>)
   d6bf0:	6831      	ldr	r1, [r6, #0]
   d6bf2:	f011 0501 	ands.w	r5, r1, #1
   d6bf6:	4604      	mov	r4, r0
   d6bf8:	d10a      	bne.n	d6c10 <pinAvailable+0x24>
   d6bfa:	4630      	mov	r0, r6
   d6bfc:	f7fd fa4f 	bl	d409e <__cxa_guard_acquire>
   d6c00:	b130      	cbz	r0, d6c10 <pinAvailable+0x24>
   d6c02:	4629      	mov	r1, r5
   d6c04:	4813      	ldr	r0, [pc, #76]	; (d6c54 <pinAvailable+0x68>)
   d6c06:	f7ff fa55 	bl	d60b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6c0a:	4630      	mov	r0, r6
   d6c0c:	f7fd fa4c 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6c10:	4810      	ldr	r0, [pc, #64]	; (d6c54 <pinAvailable+0x68>)
   d6c12:	f7ff fb0c 	bl	d622e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6c16:	b128      	cbz	r0, d6c24 <pinAvailable+0x38>
   d6c18:	f1a4 030b 	sub.w	r3, r4, #11
   d6c1c:	2b02      	cmp	r3, #2
   d6c1e:	d801      	bhi.n	d6c24 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6c20:	2000      	movs	r0, #0
   d6c22:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6c24:	f000 f886 	bl	d6d34 <_Z19__fetch_global_Wirev>
   d6c28:	f7ff fe3c 	bl	d68a4 <_ZN7TwoWire9isEnabledEv>
   d6c2c:	b108      	cbz	r0, d6c32 <pinAvailable+0x46>
   d6c2e:	2c01      	cmp	r4, #1
   d6c30:	d9f6      	bls.n	d6c20 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6c32:	f7ff fdd3 	bl	d67dc <_Z22__fetch_global_Serial1v>
   d6c36:	f7ff fdcd 	bl	d67d4 <_ZN11USARTSerial9isEnabledEv>
   d6c3a:	b118      	cbz	r0, d6c44 <pinAvailable+0x58>
   d6c3c:	f1a4 0309 	sub.w	r3, r4, #9
   d6c40:	2b01      	cmp	r3, #1
   d6c42:	d9ed      	bls.n	d6c20 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6c44:	2c23      	cmp	r4, #35	; 0x23
   d6c46:	bf8c      	ite	hi
   d6c48:	2000      	movhi	r0, #0
   d6c4a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6c4c:	bd70      	pop	{r4, r5, r6, pc}
   d6c4e:	bf00      	nop
   d6c50:	2003ded4 	.word	0x2003ded4
   d6c54:	2003ded8 	.word	0x2003ded8

000d6c58 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c58:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6c5a:	b538      	push	{r3, r4, r5, lr}
   d6c5c:	4604      	mov	r4, r0
   d6c5e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c60:	d80a      	bhi.n	d6c78 <pinMode+0x20>
   d6c62:	29ff      	cmp	r1, #255	; 0xff
   d6c64:	d008      	beq.n	d6c78 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6c66:	f7ff ffc1 	bl	d6bec <pinAvailable>
   d6c6a:	b128      	cbz	r0, d6c78 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6c6c:	4629      	mov	r1, r5
   d6c6e:	4620      	mov	r0, r4
}
   d6c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6c74:	f7fe bfce 	b.w	d5c14 <HAL_Pin_Mode>
   d6c78:	bd38      	pop	{r3, r4, r5, pc}

000d6c7a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6c7a:	b538      	push	{r3, r4, r5, lr}
   d6c7c:	4604      	mov	r4, r0
   d6c7e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6c80:	f7fe ffd0 	bl	d5c24 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6c84:	28ff      	cmp	r0, #255	; 0xff
   d6c86:	d010      	beq.n	d6caa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6c88:	2806      	cmp	r0, #6
   d6c8a:	d804      	bhi.n	d6c96 <digitalWrite+0x1c>
   d6c8c:	234d      	movs	r3, #77	; 0x4d
   d6c8e:	fa23 f000 	lsr.w	r0, r3, r0
   d6c92:	07c3      	lsls	r3, r0, #31
   d6c94:	d409      	bmi.n	d6caa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6c96:	4620      	mov	r0, r4
   d6c98:	f7ff ffa8 	bl	d6bec <pinAvailable>
   d6c9c:	b128      	cbz	r0, d6caa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6c9e:	4629      	mov	r1, r5
   d6ca0:	4620      	mov	r0, r4
}
   d6ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6ca6:	f7fe bfc5 	b.w	d5c34 <HAL_GPIO_Write>
   d6caa:	bd38      	pop	{r3, r4, r5, pc}

000d6cac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6cac:	b510      	push	{r4, lr}
   d6cae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6cb0:	f7fe ffb8 	bl	d5c24 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6cb4:	3804      	subs	r0, #4
   d6cb6:	b2c0      	uxtb	r0, r0
   d6cb8:	2801      	cmp	r0, #1
   d6cba:	d908      	bls.n	d6cce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6cbc:	4620      	mov	r0, r4
   d6cbe:	f7ff ff95 	bl	d6bec <pinAvailable>
   d6cc2:	b120      	cbz	r0, d6cce <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6cc4:	4620      	mov	r0, r4
}
   d6cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6cca:	f7fe bfbb 	b.w	d5c44 <HAL_GPIO_Read>
}
   d6cce:	2000      	movs	r0, #0
   d6cd0:	bd10      	pop	{r4, pc}

000d6cd2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6cd2:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6cd4:	b510      	push	{r4, lr}
   d6cd6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6cd8:	bf9c      	itt	ls
   d6cda:	340e      	addls	r4, #14
   d6cdc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6cde:	4620      	mov	r0, r4
   d6ce0:	f7ff ff84 	bl	d6bec <pinAvailable>
   d6ce4:	b150      	cbz	r0, d6cfc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6ce6:	2103      	movs	r1, #3
   d6ce8:	4620      	mov	r0, r4
   d6cea:	f7fe ff8b 	bl	d5c04 <HAL_Validate_Pin_Function>
   d6cee:	2803      	cmp	r0, #3
   d6cf0:	d104      	bne.n	d6cfc <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6cf2:	4620      	mov	r0, r4
}
   d6cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6cf8:	f7fe bfac 	b.w	d5c54 <HAL_ADC_Read>
}
   d6cfc:	2000      	movs	r0, #0
   d6cfe:	bd10      	pop	{r4, pc}

000d6d00 <_Z17acquireWireBufferv>:
   d6d00:	b570      	push	{r4, r5, r6, lr}
   d6d02:	4604      	mov	r4, r0
   d6d04:	2514      	movs	r5, #20
   d6d06:	462a      	mov	r2, r5
   d6d08:	4e09      	ldr	r6, [pc, #36]	; (d6d30 <_Z17acquireWireBufferv+0x30>)
   d6d0a:	2100      	movs	r1, #0
   d6d0c:	f000 f9ca 	bl	d70a4 <memset>
   d6d10:	8025      	strh	r5, [r4, #0]
   d6d12:	2520      	movs	r5, #32
   d6d14:	4631      	mov	r1, r6
   d6d16:	60a5      	str	r5, [r4, #8]
   d6d18:	6125      	str	r5, [r4, #16]
   d6d1a:	4628      	mov	r0, r5
   d6d1c:	f000 f840 	bl	d6da0 <_ZnajRKSt9nothrow_t>
   d6d20:	4631      	mov	r1, r6
   d6d22:	6060      	str	r0, [r4, #4]
   d6d24:	4628      	mov	r0, r5
   d6d26:	f000 f83b 	bl	d6da0 <_ZnajRKSt9nothrow_t>
   d6d2a:	60e0      	str	r0, [r4, #12]
   d6d2c:	4620      	mov	r0, r4
   d6d2e:	bd70      	pop	{r4, r5, r6, pc}
   d6d30:	000d748c 	.word	0x000d748c

000d6d34 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6d34:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6d36:	4d0e      	ldr	r5, [pc, #56]	; (d6d70 <_Z19__fetch_global_Wirev+0x3c>)
   d6d38:	6829      	ldr	r1, [r5, #0]
   d6d3a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6d3e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6d40:	d113      	bne.n	d6d6a <_Z19__fetch_global_Wirev+0x36>
   d6d42:	4628      	mov	r0, r5
   d6d44:	f7fd f9ab 	bl	d409e <__cxa_guard_acquire>
   d6d48:	b178      	cbz	r0, d6d6a <_Z19__fetch_global_Wirev+0x36>
   d6d4a:	a801      	add	r0, sp, #4
   d6d4c:	f7ff ffd8 	bl	d6d00 <_Z17acquireWireBufferv>
   d6d50:	aa01      	add	r2, sp, #4
   d6d52:	4621      	mov	r1, r4
   d6d54:	4807      	ldr	r0, [pc, #28]	; (d6d74 <_Z19__fetch_global_Wirev+0x40>)
   d6d56:	f7ff fd93 	bl	d6880 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6d5a:	4628      	mov	r0, r5
   d6d5c:	f7fd f9a4 	bl	d40a8 <__cxa_guard_release>
   d6d60:	4a05      	ldr	r2, [pc, #20]	; (d6d78 <_Z19__fetch_global_Wirev+0x44>)
   d6d62:	4906      	ldr	r1, [pc, #24]	; (d6d7c <_Z19__fetch_global_Wirev+0x48>)
   d6d64:	4803      	ldr	r0, [pc, #12]	; (d6d74 <_Z19__fetch_global_Wirev+0x40>)
   d6d66:	f000 f80b 	bl	d6d80 <__aeabi_atexit>
	return wire;
}
   d6d6a:	4802      	ldr	r0, [pc, #8]	; (d6d74 <_Z19__fetch_global_Wirev+0x40>)
   d6d6c:	b007      	add	sp, #28
   d6d6e:	bd30      	pop	{r4, r5, pc}
   d6d70:	2003e734 	.word	0x2003e734
   d6d74:	2003e738 	.word	0x2003e738
   d6d78:	2003ded0 	.word	0x2003ded0
   d6d7c:	000d6829 	.word	0x000d6829

000d6d80 <__aeabi_atexit>:
   d6d80:	460b      	mov	r3, r1
   d6d82:	4601      	mov	r1, r0
   d6d84:	4618      	mov	r0, r3
   d6d86:	f000 b965 	b.w	d7054 <__cxa_atexit>
	...

000d6d8c <_ZSt15get_new_handlerv>:
   d6d8c:	4b02      	ldr	r3, [pc, #8]	; (d6d98 <_ZSt15get_new_handlerv+0xc>)
   d6d8e:	6818      	ldr	r0, [r3, #0]
   d6d90:	f3bf 8f5f 	dmb	sy
   d6d94:	4770      	bx	lr
   d6d96:	bf00      	nop
   d6d98:	2003e74c 	.word	0x2003e74c

000d6d9c <_ZdlPvj>:
   d6d9c:	f7fd b97b 	b.w	d4096 <_ZdlPv>

000d6da0 <_ZnajRKSt9nothrow_t>:
   d6da0:	f000 b800 	b.w	d6da4 <_ZnwjRKSt9nothrow_t>

000d6da4 <_ZnwjRKSt9nothrow_t>:
   d6da4:	b510      	push	{r4, lr}
   d6da6:	2800      	cmp	r0, #0
   d6da8:	bf14      	ite	ne
   d6daa:	4604      	movne	r4, r0
   d6dac:	2401      	moveq	r4, #1
   d6dae:	4620      	mov	r0, r4
   d6db0:	f7ff f924 	bl	d5ffc <malloc>
   d6db4:	b920      	cbnz	r0, d6dc0 <_ZnwjRKSt9nothrow_t+0x1c>
   d6db6:	f7ff ffe9 	bl	d6d8c <_ZSt15get_new_handlerv>
   d6dba:	b108      	cbz	r0, d6dc0 <_ZnwjRKSt9nothrow_t+0x1c>
   d6dbc:	4780      	blx	r0
   d6dbe:	e7f6      	b.n	d6dae <_ZnwjRKSt9nothrow_t+0xa>
   d6dc0:	bd10      	pop	{r4, pc}
	...

000d6dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6dc4:	4b18      	ldr	r3, [pc, #96]	; (d6e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6dc6:	681a      	ldr	r2, [r3, #0]
   d6dc8:	07d1      	lsls	r1, r2, #31
   d6dca:	bf5c      	itt	pl
   d6dcc:	2201      	movpl	r2, #1
   d6dce:	601a      	strpl	r2, [r3, #0]
   d6dd0:	4b16      	ldr	r3, [pc, #88]	; (d6e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6dd2:	681a      	ldr	r2, [r3, #0]
   d6dd4:	07d2      	lsls	r2, r2, #31
   d6dd6:	bf5c      	itt	pl
   d6dd8:	2201      	movpl	r2, #1
   d6dda:	601a      	strpl	r2, [r3, #0]
   d6ddc:	4b14      	ldr	r3, [pc, #80]	; (d6e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6dde:	681a      	ldr	r2, [r3, #0]
   d6de0:	07d0      	lsls	r0, r2, #31
   d6de2:	bf5c      	itt	pl
   d6de4:	2201      	movpl	r2, #1
   d6de6:	601a      	strpl	r2, [r3, #0]
   d6de8:	4b12      	ldr	r3, [pc, #72]	; (d6e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6dea:	681a      	ldr	r2, [r3, #0]
   d6dec:	07d1      	lsls	r1, r2, #31
   d6dee:	bf5c      	itt	pl
   d6df0:	2201      	movpl	r2, #1
   d6df2:	601a      	strpl	r2, [r3, #0]
   d6df4:	4b10      	ldr	r3, [pc, #64]	; (d6e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6df6:	681a      	ldr	r2, [r3, #0]
   d6df8:	07d2      	lsls	r2, r2, #31
   d6dfa:	bf5c      	itt	pl
   d6dfc:	2201      	movpl	r2, #1
   d6dfe:	601a      	strpl	r2, [r3, #0]
   d6e00:	4b0e      	ldr	r3, [pc, #56]	; (d6e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6e02:	681a      	ldr	r2, [r3, #0]
   d6e04:	07d0      	lsls	r0, r2, #31
   d6e06:	bf5c      	itt	pl
   d6e08:	2201      	movpl	r2, #1
   d6e0a:	601a      	strpl	r2, [r3, #0]
   d6e0c:	4b0c      	ldr	r3, [pc, #48]	; (d6e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6e0e:	681a      	ldr	r2, [r3, #0]
   d6e10:	07d1      	lsls	r1, r2, #31
   d6e12:	bf5c      	itt	pl
   d6e14:	2201      	movpl	r2, #1
   d6e16:	601a      	strpl	r2, [r3, #0]
   d6e18:	4b0a      	ldr	r3, [pc, #40]	; (d6e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6e1a:	681a      	ldr	r2, [r3, #0]
   d6e1c:	07d2      	lsls	r2, r2, #31
   d6e1e:	bf5c      	itt	pl
   d6e20:	2201      	movpl	r2, #1
   d6e22:	601a      	strpl	r2, [r3, #0]
   d6e24:	4770      	bx	lr
   d6e26:	bf00      	nop
   d6e28:	2003e76c 	.word	0x2003e76c
   d6e2c:	2003e768 	.word	0x2003e768
   d6e30:	2003e764 	.word	0x2003e764
   d6e34:	2003e760 	.word	0x2003e760
   d6e38:	2003e75c 	.word	0x2003e75c
   d6e3c:	2003e758 	.word	0x2003e758
   d6e40:	2003e754 	.word	0x2003e754
   d6e44:	2003e750 	.word	0x2003e750

000d6e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6e48:	4b24      	ldr	r3, [pc, #144]	; (d6edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6e4a:	681a      	ldr	r2, [r3, #0]
   d6e4c:	07d0      	lsls	r0, r2, #31
   d6e4e:	bf5c      	itt	pl
   d6e50:	2201      	movpl	r2, #1
   d6e52:	601a      	strpl	r2, [r3, #0]
   d6e54:	4b22      	ldr	r3, [pc, #136]	; (d6ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6e56:	681a      	ldr	r2, [r3, #0]
   d6e58:	07d1      	lsls	r1, r2, #31
   d6e5a:	bf5c      	itt	pl
   d6e5c:	2201      	movpl	r2, #1
   d6e5e:	601a      	strpl	r2, [r3, #0]
   d6e60:	4b20      	ldr	r3, [pc, #128]	; (d6ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6e62:	681a      	ldr	r2, [r3, #0]
   d6e64:	07d2      	lsls	r2, r2, #31
   d6e66:	bf5c      	itt	pl
   d6e68:	2201      	movpl	r2, #1
   d6e6a:	601a      	strpl	r2, [r3, #0]
   d6e6c:	4b1e      	ldr	r3, [pc, #120]	; (d6ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6e6e:	681a      	ldr	r2, [r3, #0]
   d6e70:	07d0      	lsls	r0, r2, #31
   d6e72:	bf5c      	itt	pl
   d6e74:	2201      	movpl	r2, #1
   d6e76:	601a      	strpl	r2, [r3, #0]
   d6e78:	4b1c      	ldr	r3, [pc, #112]	; (d6eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6e7a:	681a      	ldr	r2, [r3, #0]
   d6e7c:	07d1      	lsls	r1, r2, #31
   d6e7e:	bf5c      	itt	pl
   d6e80:	2201      	movpl	r2, #1
   d6e82:	601a      	strpl	r2, [r3, #0]
   d6e84:	4b1a      	ldr	r3, [pc, #104]	; (d6ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6e86:	681a      	ldr	r2, [r3, #0]
   d6e88:	07d2      	lsls	r2, r2, #31
   d6e8a:	bf5c      	itt	pl
   d6e8c:	2201      	movpl	r2, #1
   d6e8e:	601a      	strpl	r2, [r3, #0]
   d6e90:	4b18      	ldr	r3, [pc, #96]	; (d6ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6e92:	681a      	ldr	r2, [r3, #0]
   d6e94:	07d0      	lsls	r0, r2, #31
   d6e96:	bf5c      	itt	pl
   d6e98:	2201      	movpl	r2, #1
   d6e9a:	601a      	strpl	r2, [r3, #0]
   d6e9c:	4b16      	ldr	r3, [pc, #88]	; (d6ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6e9e:	681a      	ldr	r2, [r3, #0]
   d6ea0:	07d1      	lsls	r1, r2, #31
   d6ea2:	bf5c      	itt	pl
   d6ea4:	2201      	movpl	r2, #1
   d6ea6:	601a      	strpl	r2, [r3, #0]
   d6ea8:	4b14      	ldr	r3, [pc, #80]	; (d6efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6eaa:	681a      	ldr	r2, [r3, #0]
   d6eac:	07d2      	lsls	r2, r2, #31
   d6eae:	bf5c      	itt	pl
   d6eb0:	2201      	movpl	r2, #1
   d6eb2:	601a      	strpl	r2, [r3, #0]
   d6eb4:	4b12      	ldr	r3, [pc, #72]	; (d6f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6eb6:	681a      	ldr	r2, [r3, #0]
   d6eb8:	07d0      	lsls	r0, r2, #31
   d6eba:	bf5c      	itt	pl
   d6ebc:	2201      	movpl	r2, #1
   d6ebe:	601a      	strpl	r2, [r3, #0]
   d6ec0:	4b10      	ldr	r3, [pc, #64]	; (d6f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6ec2:	681a      	ldr	r2, [r3, #0]
   d6ec4:	07d1      	lsls	r1, r2, #31
   d6ec6:	bf5c      	itt	pl
   d6ec8:	2201      	movpl	r2, #1
   d6eca:	601a      	strpl	r2, [r3, #0]
   d6ecc:	4b0e      	ldr	r3, [pc, #56]	; (d6f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6ece:	681a      	ldr	r2, [r3, #0]
   d6ed0:	07d2      	lsls	r2, r2, #31
   d6ed2:	bf5c      	itt	pl
   d6ed4:	2201      	movpl	r2, #1
   d6ed6:	601a      	strpl	r2, [r3, #0]
   d6ed8:	4770      	bx	lr
   d6eda:	bf00      	nop
   d6edc:	2003e79c 	.word	0x2003e79c
   d6ee0:	2003e798 	.word	0x2003e798
   d6ee4:	2003e794 	.word	0x2003e794
   d6ee8:	2003e790 	.word	0x2003e790
   d6eec:	2003e78c 	.word	0x2003e78c
   d6ef0:	2003e788 	.word	0x2003e788
   d6ef4:	2003e784 	.word	0x2003e784
   d6ef8:	2003e780 	.word	0x2003e780
   d6efc:	2003e77c 	.word	0x2003e77c
   d6f00:	2003e778 	.word	0x2003e778
   d6f04:	2003e774 	.word	0x2003e774
   d6f08:	2003e770 	.word	0x2003e770

000d6f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6f0c:	4b24      	ldr	r3, [pc, #144]	; (d6fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6f0e:	681a      	ldr	r2, [r3, #0]
   d6f10:	07d0      	lsls	r0, r2, #31
   d6f12:	bf5c      	itt	pl
   d6f14:	2201      	movpl	r2, #1
   d6f16:	601a      	strpl	r2, [r3, #0]
   d6f18:	4b22      	ldr	r3, [pc, #136]	; (d6fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6f1a:	681a      	ldr	r2, [r3, #0]
   d6f1c:	07d1      	lsls	r1, r2, #31
   d6f1e:	bf5c      	itt	pl
   d6f20:	2201      	movpl	r2, #1
   d6f22:	601a      	strpl	r2, [r3, #0]
   d6f24:	4b20      	ldr	r3, [pc, #128]	; (d6fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6f26:	681a      	ldr	r2, [r3, #0]
   d6f28:	07d2      	lsls	r2, r2, #31
   d6f2a:	bf5c      	itt	pl
   d6f2c:	2201      	movpl	r2, #1
   d6f2e:	601a      	strpl	r2, [r3, #0]
   d6f30:	4b1e      	ldr	r3, [pc, #120]	; (d6fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6f32:	681a      	ldr	r2, [r3, #0]
   d6f34:	07d0      	lsls	r0, r2, #31
   d6f36:	bf5c      	itt	pl
   d6f38:	2201      	movpl	r2, #1
   d6f3a:	601a      	strpl	r2, [r3, #0]
   d6f3c:	4b1c      	ldr	r3, [pc, #112]	; (d6fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6f3e:	681a      	ldr	r2, [r3, #0]
   d6f40:	07d1      	lsls	r1, r2, #31
   d6f42:	bf5c      	itt	pl
   d6f44:	2201      	movpl	r2, #1
   d6f46:	601a      	strpl	r2, [r3, #0]
   d6f48:	4b1a      	ldr	r3, [pc, #104]	; (d6fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6f4a:	681a      	ldr	r2, [r3, #0]
   d6f4c:	07d2      	lsls	r2, r2, #31
   d6f4e:	bf5c      	itt	pl
   d6f50:	2201      	movpl	r2, #1
   d6f52:	601a      	strpl	r2, [r3, #0]
   d6f54:	4b18      	ldr	r3, [pc, #96]	; (d6fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6f56:	681a      	ldr	r2, [r3, #0]
   d6f58:	07d0      	lsls	r0, r2, #31
   d6f5a:	bf5c      	itt	pl
   d6f5c:	2201      	movpl	r2, #1
   d6f5e:	601a      	strpl	r2, [r3, #0]
   d6f60:	4b16      	ldr	r3, [pc, #88]	; (d6fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6f62:	681a      	ldr	r2, [r3, #0]
   d6f64:	07d1      	lsls	r1, r2, #31
   d6f66:	bf5c      	itt	pl
   d6f68:	2201      	movpl	r2, #1
   d6f6a:	601a      	strpl	r2, [r3, #0]
   d6f6c:	4b14      	ldr	r3, [pc, #80]	; (d6fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6f6e:	681a      	ldr	r2, [r3, #0]
   d6f70:	07d2      	lsls	r2, r2, #31
   d6f72:	bf5c      	itt	pl
   d6f74:	2201      	movpl	r2, #1
   d6f76:	601a      	strpl	r2, [r3, #0]
   d6f78:	4b12      	ldr	r3, [pc, #72]	; (d6fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6f7a:	681a      	ldr	r2, [r3, #0]
   d6f7c:	07d0      	lsls	r0, r2, #31
   d6f7e:	bf5c      	itt	pl
   d6f80:	2201      	movpl	r2, #1
   d6f82:	601a      	strpl	r2, [r3, #0]
   d6f84:	4b10      	ldr	r3, [pc, #64]	; (d6fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6f86:	681a      	ldr	r2, [r3, #0]
   d6f88:	07d1      	lsls	r1, r2, #31
   d6f8a:	bf5c      	itt	pl
   d6f8c:	2201      	movpl	r2, #1
   d6f8e:	601a      	strpl	r2, [r3, #0]
   d6f90:	4b0e      	ldr	r3, [pc, #56]	; (d6fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6f92:	681a      	ldr	r2, [r3, #0]
   d6f94:	07d2      	lsls	r2, r2, #31
   d6f96:	bf5c      	itt	pl
   d6f98:	2201      	movpl	r2, #1
   d6f9a:	601a      	strpl	r2, [r3, #0]
   d6f9c:	4770      	bx	lr
   d6f9e:	bf00      	nop
   d6fa0:	2003e7cc 	.word	0x2003e7cc
   d6fa4:	2003e7c8 	.word	0x2003e7c8
   d6fa8:	2003e7c4 	.word	0x2003e7c4
   d6fac:	2003e7c0 	.word	0x2003e7c0
   d6fb0:	2003e7bc 	.word	0x2003e7bc
   d6fb4:	2003e7b8 	.word	0x2003e7b8
   d6fb8:	2003e7b4 	.word	0x2003e7b4
   d6fbc:	2003e7b0 	.word	0x2003e7b0
   d6fc0:	2003e7ac 	.word	0x2003e7ac
   d6fc4:	2003e7a8 	.word	0x2003e7a8
   d6fc8:	2003e7a4 	.word	0x2003e7a4
   d6fcc:	2003e7a0 	.word	0x2003e7a0

000d6fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6fd0:	4b18      	ldr	r3, [pc, #96]	; (d7034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6fd2:	681a      	ldr	r2, [r3, #0]
   d6fd4:	07d1      	lsls	r1, r2, #31
   d6fd6:	bf5c      	itt	pl
   d6fd8:	2201      	movpl	r2, #1
   d6fda:	601a      	strpl	r2, [r3, #0]
   d6fdc:	4b16      	ldr	r3, [pc, #88]	; (d7038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6fde:	681a      	ldr	r2, [r3, #0]
   d6fe0:	07d2      	lsls	r2, r2, #31
   d6fe2:	bf5c      	itt	pl
   d6fe4:	2201      	movpl	r2, #1
   d6fe6:	601a      	strpl	r2, [r3, #0]
   d6fe8:	4b14      	ldr	r3, [pc, #80]	; (d703c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6fea:	681a      	ldr	r2, [r3, #0]
   d6fec:	07d0      	lsls	r0, r2, #31
   d6fee:	bf5c      	itt	pl
   d6ff0:	2201      	movpl	r2, #1
   d6ff2:	601a      	strpl	r2, [r3, #0]
   d6ff4:	4b12      	ldr	r3, [pc, #72]	; (d7040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6ff6:	681a      	ldr	r2, [r3, #0]
   d6ff8:	07d1      	lsls	r1, r2, #31
   d6ffa:	bf5c      	itt	pl
   d6ffc:	2201      	movpl	r2, #1
   d6ffe:	601a      	strpl	r2, [r3, #0]
   d7000:	4b10      	ldr	r3, [pc, #64]	; (d7044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7002:	681a      	ldr	r2, [r3, #0]
   d7004:	07d2      	lsls	r2, r2, #31
   d7006:	bf5c      	itt	pl
   d7008:	2201      	movpl	r2, #1
   d700a:	601a      	strpl	r2, [r3, #0]
   d700c:	4b0e      	ldr	r3, [pc, #56]	; (d7048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d700e:	681a      	ldr	r2, [r3, #0]
   d7010:	07d0      	lsls	r0, r2, #31
   d7012:	bf5c      	itt	pl
   d7014:	2201      	movpl	r2, #1
   d7016:	601a      	strpl	r2, [r3, #0]
   d7018:	4b0c      	ldr	r3, [pc, #48]	; (d704c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d701a:	681a      	ldr	r2, [r3, #0]
   d701c:	07d1      	lsls	r1, r2, #31
   d701e:	bf5c      	itt	pl
   d7020:	2201      	movpl	r2, #1
   d7022:	601a      	strpl	r2, [r3, #0]
   d7024:	4b0a      	ldr	r3, [pc, #40]	; (d7050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7026:	681a      	ldr	r2, [r3, #0]
   d7028:	07d2      	lsls	r2, r2, #31
   d702a:	bf5c      	itt	pl
   d702c:	2201      	movpl	r2, #1
   d702e:	601a      	strpl	r2, [r3, #0]
   d7030:	4770      	bx	lr
   d7032:	bf00      	nop
   d7034:	2003e7ec 	.word	0x2003e7ec
   d7038:	2003e7e8 	.word	0x2003e7e8
   d703c:	2003e7e4 	.word	0x2003e7e4
   d7040:	2003e7e0 	.word	0x2003e7e0
   d7044:	2003e7dc 	.word	0x2003e7dc
   d7048:	2003e7d8 	.word	0x2003e7d8
   d704c:	2003e7d4 	.word	0x2003e7d4
   d7050:	2003e7d0 	.word	0x2003e7d0

000d7054 <__cxa_atexit>:
   d7054:	b510      	push	{r4, lr}
   d7056:	4c05      	ldr	r4, [pc, #20]	; (d706c <__cxa_atexit+0x18>)
   d7058:	4613      	mov	r3, r2
   d705a:	b12c      	cbz	r4, d7068 <__cxa_atexit+0x14>
   d705c:	460a      	mov	r2, r1
   d705e:	4601      	mov	r1, r0
   d7060:	2002      	movs	r0, #2
   d7062:	f3af 8000 	nop.w
   d7066:	bd10      	pop	{r4, pc}
   d7068:	4620      	mov	r0, r4
   d706a:	bd10      	pop	{r4, pc}
   d706c:	00000000 	.word	0x00000000

000d7070 <memcmp>:
   d7070:	b510      	push	{r4, lr}
   d7072:	3901      	subs	r1, #1
   d7074:	4402      	add	r2, r0
   d7076:	4290      	cmp	r0, r2
   d7078:	d007      	beq.n	d708a <memcmp+0x1a>
   d707a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d707e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7082:	42a3      	cmp	r3, r4
   d7084:	d0f7      	beq.n	d7076 <memcmp+0x6>
   d7086:	1b18      	subs	r0, r3, r4
   d7088:	bd10      	pop	{r4, pc}
   d708a:	2000      	movs	r0, #0
   d708c:	bd10      	pop	{r4, pc}

000d708e <memcpy>:
   d708e:	b510      	push	{r4, lr}
   d7090:	1e43      	subs	r3, r0, #1
   d7092:	440a      	add	r2, r1
   d7094:	4291      	cmp	r1, r2
   d7096:	d004      	beq.n	d70a2 <memcpy+0x14>
   d7098:	f811 4b01 	ldrb.w	r4, [r1], #1
   d709c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d70a0:	e7f8      	b.n	d7094 <memcpy+0x6>
   d70a2:	bd10      	pop	{r4, pc}

000d70a4 <memset>:
   d70a4:	4402      	add	r2, r0
   d70a6:	4603      	mov	r3, r0
   d70a8:	4293      	cmp	r3, r2
   d70aa:	d002      	beq.n	d70b2 <memset+0xe>
   d70ac:	f803 1b01 	strb.w	r1, [r3], #1
   d70b0:	e7fa      	b.n	d70a8 <memset+0x4>
   d70b2:	4770      	bx	lr

000d70b4 <srand>:
   d70b4:	b538      	push	{r3, r4, r5, lr}
   d70b6:	4b12      	ldr	r3, [pc, #72]	; (d7100 <srand+0x4c>)
   d70b8:	681c      	ldr	r4, [r3, #0]
   d70ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d70bc:	4605      	mov	r5, r0
   d70be:	b9d3      	cbnz	r3, d70f6 <srand+0x42>
   d70c0:	2018      	movs	r0, #24
   d70c2:	f7fe ff9b 	bl	d5ffc <malloc>
   d70c6:	f243 330e 	movw	r3, #13070	; 0x330e
   d70ca:	63a0      	str	r0, [r4, #56]	; 0x38
   d70cc:	8003      	strh	r3, [r0, #0]
   d70ce:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d70d2:	8043      	strh	r3, [r0, #2]
   d70d4:	f241 2334 	movw	r3, #4660	; 0x1234
   d70d8:	8083      	strh	r3, [r0, #4]
   d70da:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d70de:	80c3      	strh	r3, [r0, #6]
   d70e0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d70e4:	8103      	strh	r3, [r0, #8]
   d70e6:	2305      	movs	r3, #5
   d70e8:	8143      	strh	r3, [r0, #10]
   d70ea:	230b      	movs	r3, #11
   d70ec:	8183      	strh	r3, [r0, #12]
   d70ee:	2201      	movs	r2, #1
   d70f0:	2300      	movs	r3, #0
   d70f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d70f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d70f8:	2200      	movs	r2, #0
   d70fa:	611d      	str	r5, [r3, #16]
   d70fc:	615a      	str	r2, [r3, #20]
   d70fe:	bd38      	pop	{r3, r4, r5, pc}
   d7100:	2003decc 	.word	0x2003decc

000d7104 <strlen>:
   d7104:	4603      	mov	r3, r0
   d7106:	f813 2b01 	ldrb.w	r2, [r3], #1
   d710a:	2a00      	cmp	r2, #0
   d710c:	d1fb      	bne.n	d7106 <strlen+0x2>
   d710e:	1a18      	subs	r0, r3, r0
   d7110:	3801      	subs	r0, #1
   d7112:	4770      	bx	lr

000d7114 <dynalib_user>:
   d7114:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7124:	0000 0000                                   ....

000d7128 <_ZTVN8particle13__SPISettingsE>:
	...
   d7130:	40cd 000d                                   .@..

000d7134 <_ZTV4File>:
	...
   d713c:	40cb 000d 416f 000d 4157 000d 4151 000d     .@..oA..WA..QA..
   d714c:	40af 000d 4131 000d 412b 000d 4125 000d     .@..1A..+A..%A..
   d715c:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d716c:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d717c:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d718c:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d719c:	2545 3e64 7300 2064 6e69 7469 6420 6e6f     E%d>.sd init don
   d71ac:	0065 7320 2064 6e69 7469 6620 6961 656c     e. sd init faile
   d71bc:	0064 7161 6f4c 2e67 7874 0074 6966 656c     d.aqLog.txt.file
   d71cc:	6f20 6570 656e 2164 6100 7269 7120 6175      opened!.air qua
   d71dc:	696c 7974 7620 6c61 6575 203a 6925 0a20     lity value: %i .
   d71ec:	7000 6972 746e 6e69 2e67 2e2e 0000 0000     .printing.......

000d71fc <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   d71fc:	0002 0000                                   ....

000d7200 <_ZN16AirQualitySensor9FRESH_AIRE>:
   d7200:	0003 0000                                   ....

000d7204 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   d7204:	0001 0000                                   ....

000d7208 <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   d7208:	0000 0000                                   ....

000d720c <_ZTVN5spark13EthernetClassE>:
	...
   d7214:	608b 000d 6081 000d 6077 000d 606d 000d     .`...`..w`..m`..
   d7224:	6061 000d 6055 000d 6049 000d 6041 000d     a`..U`..I`..A`..
   d7234:	6037 000d 602d 000d 6b0d 000d               7`..-`...k..

000d7240 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7240:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d7250:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d7260:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d7270:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d7280:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d7290:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d72a0:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d72b0:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d72c0:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d72d0:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d72e0:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d72f0:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d7300:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d7310:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d7320:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d7330:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d7340:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d7350:	0065 0000                                   e...

000d7354 <_ZTV9IPAddress>:
	...
   d735c:	6541 000d 6531 000d 6533 000d               Ae..1e..3e..

000d7368 <_ZTV9USBSerial>:
	...
   d7370:	6619 000d 6669 000d 6677 000d 62a1 000d     .f..if..wf...b..
   d7380:	6655 000d 661b 000d 6631 000d 6663 000d     Uf...f..1f..cf..
   d7390:	6647 000d 6615 000d                         Gf...f..

000d7398 <_ZTV11USARTSerial>:
	...
   d73a0:	6725 000d 6775 000d 6783 000d 62a1 000d     %g..ug...g...b..
   d73b0:	6739 000d 675b 000d 6747 000d 676f 000d     9g..[g..Gg..og..
   d73c0:	6727 000d 672b 000d                         'g..+g..

000d73c8 <_ZTV7TwoWire>:
	...
   d73d0:	6829 000d 6873 000d 684b 000d 682b 000d     )h..sh..Kh..+h..
   d73e0:	6853 000d 685b 000d 6863 000d 686b 000d     Sh..[h..ch..kh..

000d73f0 <_ZTVN5spark9MeshClassE>:
	...
   d73f8:	690b 000d 6901 000d 68f7 000d 68ed 000d     .i...i...h...h..
   d7408:	68e1 000d 68d5 000d 68c9 000d 68c1 000d     .h...h...h...h..
   d7418:	68b7 000d 68ad 000d 6b0d 000d               .h...h...k..

000d7424 <_ZTVN5spark9WiFiClassE>:
	...
   d742c:	6a87 000d 6a7d 000d 6a73 000d 6a29 000d     .j..}j..sj..)j..
   d743c:	6a67 000d 6a5b 000d 6a4f 000d 6a47 000d     gj..[j..Oj..Gj..
   d744c:	6a3d 000d 6a33 000d 6b0d 000d               =j..3j...k..

000d7458 <_ZTVN5spark12NetworkClassE>:
	...
   d7460:	6aa5 000d 6aaf 000d 6ab9 000d 6ac3 000d     .j...j...j...j..
   d7470:	6acd 000d 6ad9 000d 6ae5 000d 6af1 000d     .j...j...j...j..
   d7480:	6af9 000d 6b03 000d 6b0d 000d               .j...k...k..

000d748c <_ZSt7nothrow>:
   d748c:	0000 0000                                   ....

000d7490 <__sf_fake_stdin>:
	...

000d74b0 <__sf_fake_stdout>:
	...

000d74d0 <__sf_fake_stderr>:
	...
   d74f0:	0043                                        C.

000d74f2 <link_const_variable_data_end>:
	...

000d74f4 <link_constructors_location>:
   d74f4:	000d43ed 	.word	0x000d43ed
   d74f8:	000d44c1 	.word	0x000d44c1
   d74fc:	000d44c5 	.word	0x000d44c5
   d7500:	000d44c9 	.word	0x000d44c9
   d7504:	000d44cd 	.word	0x000d44cd
   d7508:	000d4af5 	.word	0x000d4af5
   d750c:	000d4af9 	.word	0x000d4af9
   d7510:	000d4afd 	.word	0x000d4afd
   d7514:	000d4b01 	.word	0x000d4b01
   d7518:	000d51cd 	.word	0x000d51cd
   d751c:	000d51f1 	.word	0x000d51f1
   d7520:	000d51f5 	.word	0x000d51f5
   d7524:	000d5519 	.word	0x000d5519
   d7528:	000d551d 	.word	0x000d551d
   d752c:	000d5521 	.word	0x000d5521
   d7530:	000d5a5b 	.word	0x000d5a5b
   d7534:	000d5a5f 	.word	0x000d5a5f
   d7538:	000d5a63 	.word	0x000d5a63
   d753c:	000d5b09 	.word	0x000d5b09
   d7540:	000d5bd1 	.word	0x000d5bd1
   d7544:	000d6095 	.word	0x000d6095
   d7548:	000d6235 	.word	0x000d6235
   d754c:	000d6279 	.word	0x000d6279
   d7550:	000d63bd 	.word	0x000d63bd
   d7554:	000d63cd 	.word	0x000d63cd
   d7558:	000d6405 	.word	0x000d6405
   d755c:	000d69d9 	.word	0x000d69d9
   d7560:	000d6a91 	.word	0x000d6a91
   d7564:	000d6bd9 	.word	0x000d6bd9
   d7568:	000d6dc5 	.word	0x000d6dc5
   d756c:	000d6e49 	.word	0x000d6e49
   d7570:	000d6f0d 	.word	0x000d6f0d
   d7574:	000d6fd1 	.word	0x000d6fd1

000d7578 <link_constructors_end>:
	...
