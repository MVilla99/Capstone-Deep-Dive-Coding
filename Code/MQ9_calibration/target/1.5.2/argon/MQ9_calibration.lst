
c:/Users/mauri/Documents/IoTc2/Capstone-Deep-Dive-Coding/Code/MQ9_calibration/target/1.5.2/argon/MQ9_calibration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002434  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6450  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e360  000d6454  0001e360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000424  2003e3cc  2003e3cc  0002e3cc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d64c0  000d64c0  000264c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d64e8  000d64e8  000264e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bda53  00000000  00000000  000264ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ee24  00000000  00000000  000e3f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000198a7  00000000  00000000  000f2d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002120  00000000  00000000  0010c60a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003e68  00000000  00000000  0010e72a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000326d0  00000000  00000000  00112592  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023625  00000000  00000000  00144c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ffabf  00000000  00000000  00168287  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c14c  00000000  00000000  00267d48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f811 	bl	d6054 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f816 	bl	d606a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e360 	.word	0x2003e360
   d4048:	000d6454 	.word	0x000d6454
   d404c:	2003e3cc 	.word	0x2003e3cc
   d4050:	2003e3cc 	.word	0x2003e3cc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fd2f 	bl	d4abc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6450 	.word	0x000d6450
   d4080:	000d6418 	.word	0x000d6418

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b814 	b.w	d40b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f831 	bl	d40f0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bcd5 	b.w	d4a40 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 ba7b 	b.w	d4590 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 ba79 	b.w	d4590 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:
 */
int x;
int LED = D7;
// R0 = 9.4 Average
// setup() runs once, when the device is first turned on.
void setup() {
   d40b0:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
Serial.begin(9600);
   d40b2:	f000 fe03 	bl	d4cbc <_Z16_fetch_usbserialv>
   d40b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ba:	f000 fdf3 	bl	d4ca4 <_ZN9USBSerial5beginEl>
pinMode(LED, OUTPUT);
   d40be:	4b03      	ldr	r3, [pc, #12]	; (d40cc <setup+0x1c>)
   d40c0:	2101      	movs	r1, #1
   d40c2:	8818      	ldrh	r0, [r3, #0]
}
   d40c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// R0 = 9.4 Average
// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
Serial.begin(9600);
pinMode(LED, OUTPUT);
   d40c8:	f001 b8b8 	b.w	d523c <pinMode>
   d40cc:	2003e360 	.word	0x2003e360

000d40d0 <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d40d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40d2:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
   d40d4:	ee10 0a10 	vmov	r0, s0
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
   d40d8:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
   d40da:	f001 fc11 	bl	d5900 <__aeabi_f2d>
   d40de:	462a      	mov	r2, r5
   d40e0:	e9cd 0100 	strd	r0, r1, [sp]
   d40e4:	2100      	movs	r1, #0
   d40e6:	4620      	mov	r0, r4
   d40e8:	f000 fc20 	bl	d492c <_ZN5Print11printf_implEbPKcz>
    }
   d40ec:	b003      	add	sp, #12
   d40ee:	bd30      	pop	{r4, r5, pc}

000d40f0 <loop>:
    delay(1000);
}
*/

//    for use when replacing R0 
void loop(){
   d40f0:	b530      	push	{r4, r5, lr}
   d40f2:	ed2d 8b02 	vpush	{d8}
  float RS_gas;
  float ratio;
  float PPM;
  float sensorValue;
  float R0 = 9.4; // whatever val achieved
  sensorValue = analogRead(A0);
   d40f6:	2013      	movs	r0, #19
    delay(1000);
}
*/

//    for use when replacing R0 
void loop(){
   d40f8:	b083      	sub	sp, #12
  float RS_gas;
  float ratio;
  float PPM;
  float sensorValue;
  float R0 = 9.4; // whatever val achieved
  sensorValue = analogRead(A0);
   d40fa:	f001 f8dc 	bl	d52b6 <analogRead>
  sensor_volt = (sensorValue / 4096.0)* 5.0;
   d40fe:	ee07 0a90 	vmov	s15, r0
   d4102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4106:	ee17 0a90 	vmov	r0, s15
   d410a:	f001 fbf9 	bl	d5900 <__aeabi_f2d>
   d410e:	2200      	movs	r2, #0
   d4110:	4b2f      	ldr	r3, [pc, #188]	; (d41d0 <loop+0xe0>)
   d4112:	f001 fc49 	bl	d59a8 <__aeabi_dmul>
   d4116:	2200      	movs	r2, #0
   d4118:	4b2e      	ldr	r3, [pc, #184]	; (d41d4 <loop+0xe4>)
   d411a:	f001 fc45 	bl	d59a8 <__aeabi_dmul>
   d411e:	f001 ff3b 	bl	d5f98 <__aeabi_d2f>
   d4122:	9001      	str	r0, [sp, #4]
  RS_gas = (5.0 - sensor_volt) / sensor_volt;
   d4124:	f001 fbec 	bl	d5900 <__aeabi_f2d>
   d4128:	4604      	mov	r4, r0
   d412a:	4602      	mov	r2, r0
   d412c:	460b      	mov	r3, r1
   d412e:	460d      	mov	r5, r1
   d4130:	2000      	movs	r0, #0
   d4132:	4928      	ldr	r1, [pc, #160]	; (d41d4 <loop+0xe4>)
   d4134:	f001 fa84 	bl	d5640 <__aeabi_dsub>
   d4138:	4622      	mov	r2, r4
   d413a:	462b      	mov	r3, r5
   d413c:	f001 fd5e 	bl	d5bfc <__aeabi_ddiv>
   d4140:	f001 ff2a 	bl	d5f98 <__aeabi_d2f>
  ratio = RS_gas / R0;
   d4144:	eddf 7a24 	vldr	s15, [pc, #144]	; d41d8 <loop+0xe8>
  float PPM;
  float sensorValue;
  float R0 = 9.4; // whatever val achieved
  sensorValue = analogRead(A0);
  sensor_volt = (sensorValue / 4096.0)* 5.0;
  RS_gas = (5.0 - sensor_volt) / sensor_volt;
   d4148:	ee08 0a90 	vmov	s17, r0
  ratio = RS_gas / R0;
   d414c:	ee88 8aa7 	vdiv.f32	s16, s17, s15
  PPM = (1000.0/4096.0)*ratio+10.0;
  Serial.printf("sensor_volt = %0.2f \n", sensor_volt);
   d4150:	f000 fdb4 	bl	d4cbc <_Z16_fetch_usbserialv>
   d4154:	4921      	ldr	r1, [pc, #132]	; (d41dc <loop+0xec>)
   d4156:	ed9d 0a01 	vldr	s0, [sp, #4]
   d415a:	f7ff ffb9 	bl	d40d0 <_ZN5Print6printfIIfEEEjPKcDpT_>
  Serial.printf("RS_ratio = %0.2f \n", RS_gas);
   d415e:	f000 fdad 	bl	d4cbc <_Z16_fetch_usbserialv>
   d4162:	eeb0 0a68 	vmov.f32	s0, s17
   d4166:	491e      	ldr	r1, [pc, #120]	; (d41e0 <loop+0xf0>)
   d4168:	f7ff ffb2 	bl	d40d0 <_ZN5Print6printfIIfEEEjPKcDpT_>
  Serial.printf("rs/R0 = %0.2f \n", ratio);
   d416c:	f000 fda6 	bl	d4cbc <_Z16_fetch_usbserialv>
   d4170:	eeb0 0a48 	vmov.f32	s0, s16
   d4174:	491b      	ldr	r1, [pc, #108]	; (d41e4 <loop+0xf4>)
   d4176:	f7ff ffab 	bl	d40d0 <_ZN5Print6printfIIfEEEjPKcDpT_>
  Serial.println(PPM);
   d417a:	f000 fd9f 	bl	d4cbc <_Z16_fetch_usbserialv>
   d417e:	4604      	mov	r4, r0
   d4180:	ee18 0a10 	vmov	r0, s16
   d4184:	f001 fbbc 	bl	d5900 <__aeabi_f2d>
   d4188:	2200      	movs	r2, #0
   d418a:	4b17      	ldr	r3, [pc, #92]	; (d41e8 <loop+0xf8>)
   d418c:	f001 fc0c 	bl	d59a8 <__aeabi_dmul>
   d4190:	2200      	movs	r2, #0
   d4192:	4b16      	ldr	r3, [pc, #88]	; (d41ec <loop+0xfc>)
   d4194:	f001 fa56 	bl	d5644 <__adddf3>
   d4198:	f001 fefe 	bl	d5f98 <__aeabi_d2f>
   d419c:	2102      	movs	r1, #2
   d419e:	ee00 0a10 	vmov	s0, r0
   d41a2:	4620      	mov	r0, r4
   d41a4:	f000 fbb3 	bl	d490e <_ZN5Print7printlnEfi>
  alarm = digitalRead(D0);
   d41a8:	2000      	movs	r0, #0
   d41aa:	f001 f871 	bl	d5290 <digitalRead>
  if(alarm == 1){
   d41ae:	2801      	cmp	r0, #1
  PPM = (1000.0/4096.0)*ratio+10.0;
  Serial.printf("sensor_volt = %0.2f \n", sensor_volt);
  Serial.printf("RS_ratio = %0.2f \n", RS_gas);
  Serial.printf("rs/R0 = %0.2f \n", ratio);
  Serial.println(PPM);
  alarm = digitalRead(D0);
   d41b0:	4601      	mov	r1, r0
  if(alarm == 1){
   d41b2:	d000      	beq.n	d41b6 <loop+0xc6>
    digitalWrite(LED, HIGH);
  }
  else if (alarm == 0){
   d41b4:	b918      	cbnz	r0, d41be <loop+0xce>
    digitalWrite(LED, LOW);
   d41b6:	4b0e      	ldr	r3, [pc, #56]	; (d41f0 <loop+0x100>)
   d41b8:	8818      	ldrh	r0, [r3, #0]
   d41ba:	f001 f850 	bl	d525e <digitalWrite>
  }
  delay(1000);
   d41be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d41c2:	b003      	add	sp, #12
   d41c4:	ecbd 8b02 	vpop	{d8}
   d41c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    digitalWrite(LED, HIGH);
  }
  else if (alarm == 0){
    digitalWrite(LED, LOW);
  }
  delay(1000);
   d41cc:	f000 bbfa 	b.w	d49c4 <delay>
   d41d0:	3f300000 	.word	0x3f300000
   d41d4:	40140000 	.word	0x40140000
   d41d8:	41166666 	.word	0x41166666
   d41dc:	000d60f0 	.word	0x000d60f0
   d41e0:	000d6106 	.word	0x000d6106
   d41e4:	000d6119 	.word	0x000d6119
   d41e8:	3fcf4000 	.word	0x3fcf4000
   d41ec:	40240000 	.word	0x40240000
   d41f0:	2003e360 	.word	0x2003e360

000d41f4 <_GLOBAL__sub_I_x>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41f4:	f000 b810 	b.w	d4218 <HAL_Pin_Map>

000d41f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d41f8:	b508      	push	{r3, lr}
   d41fa:	4b02      	ldr	r3, [pc, #8]	; (d4204 <netdb_freeaddrinfo+0xc>)
   d41fc:	681b      	ldr	r3, [r3, #0]
   d41fe:	689b      	ldr	r3, [r3, #8]
   d4200:	9301      	str	r3, [sp, #4]
   d4202:	bd08      	pop	{r3, pc}
   d4204:	00030268 	.word	0x00030268

000d4208 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4208:	b508      	push	{r3, lr}
   d420a:	4b02      	ldr	r3, [pc, #8]	; (d4214 <netdb_getaddrinfo+0xc>)
   d420c:	681b      	ldr	r3, [r3, #0]
   d420e:	68db      	ldr	r3, [r3, #12]
   d4210:	9301      	str	r3, [sp, #4]
   d4212:	bd08      	pop	{r3, pc}
   d4214:	00030268 	.word	0x00030268

000d4218 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4218:	b508      	push	{r3, lr}
   d421a:	4b02      	ldr	r3, [pc, #8]	; (d4224 <HAL_Pin_Map+0xc>)
   d421c:	681b      	ldr	r3, [r3, #0]
   d421e:	681b      	ldr	r3, [r3, #0]
   d4220:	9301      	str	r3, [sp, #4]
   d4222:	bd08      	pop	{r3, pc}
   d4224:	0003022c 	.word	0x0003022c

000d4228 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4228:	b508      	push	{r3, lr}
   d422a:	4b02      	ldr	r3, [pc, #8]	; (d4234 <HAL_Validate_Pin_Function+0xc>)
   d422c:	681b      	ldr	r3, [r3, #0]
   d422e:	685b      	ldr	r3, [r3, #4]
   d4230:	9301      	str	r3, [sp, #4]
   d4232:	bd08      	pop	{r3, pc}
   d4234:	0003022c 	.word	0x0003022c

000d4238 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4238:	b508      	push	{r3, lr}
   d423a:	4b02      	ldr	r3, [pc, #8]	; (d4244 <HAL_Pin_Mode+0xc>)
   d423c:	681b      	ldr	r3, [r3, #0]
   d423e:	689b      	ldr	r3, [r3, #8]
   d4240:	9301      	str	r3, [sp, #4]
   d4242:	bd08      	pop	{r3, pc}
   d4244:	0003022c 	.word	0x0003022c

000d4248 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4248:	b508      	push	{r3, lr}
   d424a:	4b02      	ldr	r3, [pc, #8]	; (d4254 <HAL_Get_Pin_Mode+0xc>)
   d424c:	681b      	ldr	r3, [r3, #0]
   d424e:	68db      	ldr	r3, [r3, #12]
   d4250:	9301      	str	r3, [sp, #4]
   d4252:	bd08      	pop	{r3, pc}
   d4254:	0003022c 	.word	0x0003022c

000d4258 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4258:	b508      	push	{r3, lr}
   d425a:	4b02      	ldr	r3, [pc, #8]	; (d4264 <HAL_GPIO_Write+0xc>)
   d425c:	681b      	ldr	r3, [r3, #0]
   d425e:	691b      	ldr	r3, [r3, #16]
   d4260:	9301      	str	r3, [sp, #4]
   d4262:	bd08      	pop	{r3, pc}
   d4264:	0003022c 	.word	0x0003022c

000d4268 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4268:	b508      	push	{r3, lr}
   d426a:	4b02      	ldr	r3, [pc, #8]	; (d4274 <HAL_GPIO_Read+0xc>)
   d426c:	681b      	ldr	r3, [r3, #0]
   d426e:	695b      	ldr	r3, [r3, #20]
   d4270:	9301      	str	r3, [sp, #4]
   d4272:	bd08      	pop	{r3, pc}
   d4274:	0003022c 	.word	0x0003022c

000d4278 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4278:	b508      	push	{r3, lr}
   d427a:	4b02      	ldr	r3, [pc, #8]	; (d4284 <HAL_ADC_Read+0xc>)
   d427c:	681b      	ldr	r3, [r3, #0]
   d427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4280:	9301      	str	r3, [sp, #4]
   d4282:	bd08      	pop	{r3, pc}
   d4284:	0003022c 	.word	0x0003022c

000d4288 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4288:	b508      	push	{r3, lr}
   d428a:	4b02      	ldr	r3, [pc, #8]	; (d4294 <HAL_SPI_Init+0xc>)
   d428c:	681b      	ldr	r3, [r3, #0]
   d428e:	69db      	ldr	r3, [r3, #28]
   d4290:	9301      	str	r3, [sp, #4]
   d4292:	bd08      	pop	{r3, pc}
   d4294:	00030230 	.word	0x00030230

000d4298 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4298:	b508      	push	{r3, lr}
   d429a:	4b02      	ldr	r3, [pc, #8]	; (d42a4 <HAL_SPI_Is_Enabled+0xc>)
   d429c:	681b      	ldr	r3, [r3, #0]
   d429e:	6a1b      	ldr	r3, [r3, #32]
   d42a0:	9301      	str	r3, [sp, #4]
   d42a2:	bd08      	pop	{r3, pc}
   d42a4:	00030230 	.word	0x00030230

000d42a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <HAL_RNG_GetRandomNumber+0xc>)
   d42ac:	681b      	ldr	r3, [r3, #0]
   d42ae:	685b      	ldr	r3, [r3, #4]
   d42b0:	9301      	str	r3, [sp, #4]
   d42b2:	bd08      	pop	{r3, pc}
   d42b4:	00030218 	.word	0x00030218

000d42b8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	695b      	ldr	r3, [r3, #20]
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	00030218 	.word	0x00030218

000d42c8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <os_thread_is_current+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	689b      	ldr	r3, [r3, #8]
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	00030248 	.word	0x00030248

000d42d8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <os_thread_join+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	691b      	ldr	r3, [r3, #16]
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	00030248 	.word	0x00030248

000d42e8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <os_thread_cleanup+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	695b      	ldr	r3, [r3, #20]
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	00030248 	.word	0x00030248

000d42f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <os_mutex_recursive_create+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	00030248 	.word	0x00030248

000d4308 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <os_mutex_recursive_destroy+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	00030248 	.word	0x00030248

000d4318 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <inet_inet_ntop+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	695b      	ldr	r3, [r3, #20]
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	00030264 	.word	0x00030264

000d4328 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <HAL_USART_Init+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	681b      	ldr	r3, [r3, #0]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	0003023c 	.word	0x0003023c

000d4338 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <HAL_USART_Write_Data+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	68db      	ldr	r3, [r3, #12]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	0003023c 	.word	0x0003023c

000d4348 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <HAL_USART_Available_Data+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	691b      	ldr	r3, [r3, #16]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	0003023c 	.word	0x0003023c

000d4358 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <HAL_USART_Read_Data+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	695b      	ldr	r3, [r3, #20]
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	0003023c 	.word	0x0003023c

000d4368 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <HAL_USART_Peek_Data+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	699b      	ldr	r3, [r3, #24]
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	0003023c 	.word	0x0003023c

000d4378 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <HAL_USART_Flush_Data+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	69db      	ldr	r3, [r3, #28]
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	0003023c 	.word	0x0003023c

000d4388 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <HAL_USART_Is_Enabled+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	6a1b      	ldr	r3, [r3, #32]
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	0003023c 	.word	0x0003023c

000d4398 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <HAL_USART_Available_Data_For_Write+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	0003023c 	.word	0x0003023c

000d43a8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <HAL_I2C_Write_Data+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	6a1b      	ldr	r3, [r3, #32]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	00030228 	.word	0x00030228

000d43b8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <HAL_I2C_Available_Data+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	00030228 	.word	0x00030228

000d43c8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <HAL_I2C_Read_Data+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	00030228 	.word	0x00030228

000d43d8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_I2C_Peek_Data+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	00030228 	.word	0x00030228

000d43e8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_I2C_Flush_Data+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030228 	.word	0x00030228

000d43f8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_I2C_Is_Enabled+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030228 	.word	0x00030228

000d4408 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_I2C_Init+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030228 	.word	0x00030228

000d4418 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_USB_USART_Init+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	681b      	ldr	r3, [r3, #0]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	0003024c 	.word	0x0003024c

000d4428 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_USB_USART_Begin+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	685b      	ldr	r3, [r3, #4]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003024c 	.word	0x0003024c

000d4438 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_USB_USART_Available_Data+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	691b      	ldr	r3, [r3, #16]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003024c 	.word	0x0003024c

000d4448 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	695b      	ldr	r3, [r3, #20]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	0003024c 	.word	0x0003024c

000d4458 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_USB_USART_Receive_Data+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	699b      	ldr	r3, [r3, #24]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	0003024c 	.word	0x0003024c

000d4468 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <HAL_USB_USART_Send_Data+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	69db      	ldr	r3, [r3, #28]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	0003024c 	.word	0x0003024c

000d4478 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <HAL_USB_USART_Flush_Data+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	6a1b      	ldr	r3, [r3, #32]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	0003024c 	.word	0x0003024c

000d4488 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <set_system_mode+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	685b      	ldr	r3, [r3, #4]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030220 	.word	0x00030220

000d4498 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <system_delay_ms+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	695b      	ldr	r3, [r3, #20]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030220 	.word	0x00030220

000d44a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b03      	ldr	r3, [pc, #12]	; (d44b8 <system_ctrl_set_app_request_handler+0x10>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44b2:	9301      	str	r3, [sp, #4]
   d44b4:	bd08      	pop	{r3, pc}
   d44b6:	0000      	.short	0x0000
   d44b8:	00030220 	.word	0x00030220

000d44bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b03      	ldr	r3, [pc, #12]	; (d44cc <system_ctrl_set_result+0x10>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d44c6:	9301      	str	r3, [sp, #4]
   d44c8:	bd08      	pop	{r3, pc}
   d44ca:	0000      	.short	0x0000
   d44cc:	00030220 	.word	0x00030220

000d44d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <network_connect+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	685b      	ldr	r3, [r3, #4]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030240 	.word	0x00030240

000d44e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <network_connecting+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	689b      	ldr	r3, [r3, #8]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030240 	.word	0x00030240

000d44f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <network_disconnect+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	68db      	ldr	r3, [r3, #12]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030240 	.word	0x00030240

000d4500 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <network_ready+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	691b      	ldr	r3, [r3, #16]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030240 	.word	0x00030240

000d4510 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <network_on+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	695b      	ldr	r3, [r3, #20]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030240 	.word	0x00030240

000d4520 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <network_off+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	699b      	ldr	r3, [r3, #24]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030240 	.word	0x00030240

000d4530 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <network_listen+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	69db      	ldr	r3, [r3, #28]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030240 	.word	0x00030240

000d4540 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <network_listening+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	6a1b      	ldr	r3, [r3, #32]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030240 	.word	0x00030240

000d4550 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <network_set_listen_timeout+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030240 	.word	0x00030240

000d4560 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <network_get_listen_timeout+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030240 	.word	0x00030240

000d4570 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030244 	.word	0x00030244

000d4580 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <malloc+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	681b      	ldr	r3, [r3, #0]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	0003021c 	.word	0x0003021c

000d4590 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <free+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	685b      	ldr	r3, [r3, #4]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	0003021c 	.word	0x0003021c

000d45a0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <vsnprintf+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	0003021c 	.word	0x0003021c

000d45b0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d45b0:	2200      	movs	r2, #0
   d45b2:	4611      	mov	r1, r2
   d45b4:	6840      	ldr	r0, [r0, #4]
   d45b6:	f7ff bfc3 	b.w	d4540 <network_listening>

000d45ba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d45ba:	2200      	movs	r2, #0
   d45bc:	4611      	mov	r1, r2
   d45be:	6840      	ldr	r0, [r0, #4]
   d45c0:	f7ff bfce 	b.w	d4560 <network_get_listen_timeout>

000d45c4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d45c4:	2200      	movs	r2, #0
   d45c6:	6840      	ldr	r0, [r0, #4]
   d45c8:	f7ff bfc2 	b.w	d4550 <network_set_listen_timeout>

000d45cc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d45cc:	2200      	movs	r2, #0
   d45ce:	f081 0101 	eor.w	r1, r1, #1
   d45d2:	6840      	ldr	r0, [r0, #4]
   d45d4:	f7ff bfac 	b.w	d4530 <network_listen>

000d45d8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d45d8:	2300      	movs	r3, #0
   d45da:	461a      	mov	r2, r3
   d45dc:	4619      	mov	r1, r3
   d45de:	6840      	ldr	r0, [r0, #4]
   d45e0:	f7ff bf9e 	b.w	d4520 <network_off>

000d45e4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d45e4:	2300      	movs	r3, #0
   d45e6:	461a      	mov	r2, r3
   d45e8:	4619      	mov	r1, r3
   d45ea:	6840      	ldr	r0, [r0, #4]
   d45ec:	f7ff bf90 	b.w	d4510 <network_on>

000d45f0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45f0:	2200      	movs	r2, #0
   d45f2:	4611      	mov	r1, r2
   d45f4:	6840      	ldr	r0, [r0, #4]
   d45f6:	f7ff bf83 	b.w	d4500 <network_ready>

000d45fa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d45fa:	2200      	movs	r2, #0
   d45fc:	4611      	mov	r1, r2
   d45fe:	6840      	ldr	r0, [r0, #4]
   d4600:	f7ff bf6e 	b.w	d44e0 <network_connecting>

000d4604 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4604:	2200      	movs	r2, #0
   d4606:	2102      	movs	r1, #2
   d4608:	6840      	ldr	r0, [r0, #4]
   d460a:	f7ff bf71 	b.w	d44f0 <network_disconnect>

000d460e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d460e:	2300      	movs	r3, #0
   d4610:	461a      	mov	r2, r3
   d4612:	6840      	ldr	r0, [r0, #4]
   d4614:	f7ff bf5c 	b.w	d44d0 <network_connect>

000d4618 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4618:	4b02      	ldr	r3, [pc, #8]	; (d4624 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d461a:	2203      	movs	r2, #3
   d461c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d461e:	4a02      	ldr	r2, [pc, #8]	; (d4628 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4620:	601a      	str	r2, [r3, #0]
   d4622:	4770      	bx	lr
   d4624:	2003e3d0 	.word	0x2003e3d0
   d4628:	000d6134 	.word	0x000d6134

000d462c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d462c:	b510      	push	{r4, lr}
   d462e:	4604      	mov	r4, r0
{
    _spi = spi;
   d4630:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4632:	4608      	mov	r0, r1
   d4634:	f7ff fe28 	bl	d4288 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4638:	2300      	movs	r3, #0
   d463a:	6063      	str	r3, [r4, #4]
}
   d463c:	4620      	mov	r0, r4
   d463e:	bd10      	pop	{r4, pc}

000d4640 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4640:	7800      	ldrb	r0, [r0, #0]
   d4642:	f7ff be29 	b.w	d4298 <HAL_SPI_Is_Enabled>

000d4646 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4646:	b510      	push	{r4, lr}
   d4648:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d464a:	6800      	ldr	r0, [r0, #0]
   d464c:	b118      	cbz	r0, d4656 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d464e:	f7ff ff9f 	bl	d4590 <free>
            wakeupSource_ = nullptr;
   d4652:	2300      	movs	r3, #0
   d4654:	6023      	str	r3, [r4, #0]
   d4656:	bd10      	pop	{r4, pc}

000d4658 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4658:	b510      	push	{r4, lr}
   d465a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d465c:	f7ff fff3 	bl	d4646 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4660:	4620      	mov	r0, r4
   d4662:	bd10      	pop	{r4, pc}

000d4664 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4664:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4666:	4c09      	ldr	r4, [pc, #36]	; (d468c <_GLOBAL__sub_I_System+0x28>)
   d4668:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d466a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d466e:	6020      	str	r0, [r4, #0]
   d4670:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4672:	71a0      	strb	r0, [r4, #6]
   d4674:	8120      	strh	r0, [r4, #8]
   d4676:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4678:	f7ff ff06 	bl	d4488 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d467c:	4620      	mov	r0, r4
   d467e:	4a04      	ldr	r2, [pc, #16]	; (d4690 <_GLOBAL__sub_I_System+0x2c>)
   d4680:	4904      	ldr	r1, [pc, #16]	; (d4694 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4686:	f000 be6d 	b.w	d5364 <__aeabi_atexit>
   d468a:	bf00      	nop
   d468c:	2003e3d8 	.word	0x2003e3d8
   d4690:	2003e3cc 	.word	0x2003e3cc
   d4694:	000d4659 	.word	0x000d4659

000d4698 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4698:	b510      	push	{r4, lr}
   d469a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d469c:	6800      	ldr	r0, [r0, #0]
   d469e:	b108      	cbz	r0, d46a4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d46a0:	f7ff fe32 	bl	d4308 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d46a4:	4620      	mov	r0, r4
   d46a6:	bd10      	pop	{r4, pc}

000d46a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d46a8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d46aa:	4c06      	ldr	r4, [pc, #24]	; (d46c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d46ac:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d46ae:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d46b0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d46b2:	f7ff fe21 	bl	d42f8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d46b6:	4620      	mov	r0, r4
   d46b8:	4a03      	ldr	r2, [pc, #12]	; (d46c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d46ba:	4904      	ldr	r1, [pc, #16]	; (d46cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d46bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d46c0:	f000 be50 	b.w	d5364 <__aeabi_atexit>
   d46c4:	2003e3e4 	.word	0x2003e3e4
   d46c8:	2003e3cc 	.word	0x2003e3cc
   d46cc:	000d4699 	.word	0x000d4699

000d46d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d46d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46d2:	4606      	mov	r6, r0
   d46d4:	460d      	mov	r5, r1
   d46d6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d46d8:	2400      	movs	r4, #0
  while (size--) {
   d46da:	42bd      	cmp	r5, r7
   d46dc:	d00c      	beq.n	d46f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d46de:	6833      	ldr	r3, [r6, #0]
   d46e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d46e4:	689b      	ldr	r3, [r3, #8]
   d46e6:	4630      	mov	r0, r6
   d46e8:	4798      	blx	r3
     if (chunk>=0)
   d46ea:	2800      	cmp	r0, #0
   d46ec:	db01      	blt.n	d46f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d46ee:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d46f0:	e7f3      	b.n	d46da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d46f2:	2c00      	cmp	r4, #0
   d46f4:	bf08      	it	eq
   d46f6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d46f8:	4620      	mov	r0, r4
   d46fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46fc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d46fc:	b570      	push	{r4, r5, r6, lr}
   d46fe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4700:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4702:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4704:	b149      	cbz	r1, d471a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4706:	f001 fce1 	bl	d60cc <strlen>
   d470a:	682b      	ldr	r3, [r5, #0]
   d470c:	4602      	mov	r2, r0
   d470e:	4621      	mov	r1, r4
   d4710:	4628      	mov	r0, r5
   d4712:	68db      	ldr	r3, [r3, #12]
    }
   d4714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4718:	4718      	bx	r3
    }
   d471a:	bd70      	pop	{r4, r5, r6, pc}

000d471c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d471c:	6803      	ldr	r3, [r0, #0]
   d471e:	689b      	ldr	r3, [r3, #8]
   d4720:	4718      	bx	r3

000d4722 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4722:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4724:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4726:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4728:	f7ff fff8 	bl	d471c <_ZN5Print5printEc>
  n += print('\n');
   d472c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d472e:	4604      	mov	r4, r0
  n += print('\n');
   d4730:	4628      	mov	r0, r5
   d4732:	f7ff fff3 	bl	d471c <_ZN5Print5printEc>
  return n;
}
   d4736:	4420      	add	r0, r4
   d4738:	bd38      	pop	{r3, r4, r5, pc}

000d473a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d473a:	b530      	push	{r4, r5, lr}
   d473c:	b08b      	sub	sp, #44	; 0x2c
   d473e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4740:	2100      	movs	r1, #0
   d4742:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4746:	2a01      	cmp	r2, #1
   d4748:	bf98      	it	ls
   d474a:	220a      	movls	r2, #10
   d474c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4750:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4754:	fb05 3312 	mls	r3, r5, r2, r3
   d4758:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d475c:	2b09      	cmp	r3, #9
   d475e:	bf94      	ite	ls
   d4760:	3330      	addls	r3, #48	; 0x30
   d4762:	3337      	addhi	r3, #55	; 0x37
   d4764:	b2db      	uxtb	r3, r3
   d4766:	4621      	mov	r1, r4
   d4768:	f804 3901 	strb.w	r3, [r4], #-1
   d476c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d476e:	2d00      	cmp	r5, #0
   d4770:	d1ee      	bne.n	d4750 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4772:	f7ff ffc3 	bl	d46fc <_ZN5Print5writeEPKc>
}
   d4776:	b00b      	add	sp, #44	; 0x2c
   d4778:	bd30      	pop	{r4, r5, pc}
	...

000d477c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d477c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4780:	ec57 6b10 	vmov	r6, r7, d0
   d4784:	4682      	mov	sl, r0
   d4786:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4788:	ee10 2a10 	vmov	r2, s0
   d478c:	463b      	mov	r3, r7
   d478e:	ee10 0a10 	vmov	r0, s0
   d4792:	4639      	mov	r1, r7
   d4794:	f001 fba2 	bl	d5edc <__aeabi_dcmpun>
   d4798:	b108      	cbz	r0, d479e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d479a:	494e      	ldr	r1, [pc, #312]	; (d48d4 <_ZN5Print10printFloatEdh+0x158>)
   d479c:	e012      	b.n	d47c4 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d479e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d47a2:	f04f 32ff 	mov.w	r2, #4294967295
   d47a6:	4b4c      	ldr	r3, [pc, #304]	; (d48d8 <_ZN5Print10printFloatEdh+0x15c>)
   d47a8:	4630      	mov	r0, r6
   d47aa:	4649      	mov	r1, r9
   d47ac:	f001 fb96 	bl	d5edc <__aeabi_dcmpun>
   d47b0:	b968      	cbnz	r0, d47ce <_ZN5Print10printFloatEdh+0x52>
   d47b2:	f04f 32ff 	mov.w	r2, #4294967295
   d47b6:	4b48      	ldr	r3, [pc, #288]	; (d48d8 <_ZN5Print10printFloatEdh+0x15c>)
   d47b8:	4630      	mov	r0, r6
   d47ba:	4649      	mov	r1, r9
   d47bc:	f001 fb70 	bl	d5ea0 <__aeabi_dcmple>
   d47c0:	b928      	cbnz	r0, d47ce <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d47c2:	4946      	ldr	r1, [pc, #280]	; (d48dc <_ZN5Print10printFloatEdh+0x160>)
   d47c4:	4650      	mov	r0, sl
   d47c6:	f7ff ff99 	bl	d46fc <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d47ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d47ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d47d2:	4b43      	ldr	r3, [pc, #268]	; (d48e0 <_ZN5Print10printFloatEdh+0x164>)
   d47d4:	4630      	mov	r0, r6
   d47d6:	4639      	mov	r1, r7
   d47d8:	f001 fb76 	bl	d5ec8 <__aeabi_dcmpgt>
   d47dc:	b108      	cbz	r0, d47e2 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d47de:	4941      	ldr	r1, [pc, #260]	; (d48e4 <_ZN5Print10printFloatEdh+0x168>)
   d47e0:	e7f0      	b.n	d47c4 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d47e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d47e6:	4b40      	ldr	r3, [pc, #256]	; (d48e8 <_ZN5Print10printFloatEdh+0x16c>)
   d47e8:	4630      	mov	r0, r6
   d47ea:	4639      	mov	r1, r7
   d47ec:	f001 fb4e 	bl	d5e8c <__aeabi_dcmplt>
   d47f0:	2800      	cmp	r0, #0
   d47f2:	d1f4      	bne.n	d47de <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d47f4:	2200      	movs	r2, #0
   d47f6:	2300      	movs	r3, #0
   d47f8:	4630      	mov	r0, r6
   d47fa:	4639      	mov	r1, r7
   d47fc:	f001 fb46 	bl	d5e8c <__aeabi_dcmplt>
   d4800:	b140      	cbz	r0, d4814 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4802:	212d      	movs	r1, #45	; 0x2d
   d4804:	4650      	mov	r0, sl
   d4806:	f7ff ff89 	bl	d471c <_ZN5Print5printEc>
     number = -number;
   d480a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d480e:	4604      	mov	r4, r0
     number = -number;
   d4810:	461f      	mov	r7, r3
   d4812:	e000      	b.n	d4816 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4814:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4816:	4935      	ldr	r1, [pc, #212]	; (d48ec <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4818:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d481c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d481e:	fa5f f388 	uxtb.w	r3, r8
   d4822:	429d      	cmp	r5, r3
   d4824:	d906      	bls.n	d4834 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4826:	2200      	movs	r2, #0
   d4828:	4b31      	ldr	r3, [pc, #196]	; (d48f0 <_ZN5Print10printFloatEdh+0x174>)
   d482a:	f001 f9e7 	bl	d5bfc <__aeabi_ddiv>
   d482e:	f108 0801 	add.w	r8, r8, #1
   d4832:	e7f4      	b.n	d481e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4834:	4632      	mov	r2, r6
   d4836:	463b      	mov	r3, r7
   d4838:	f000 ff04 	bl	d5644 <__adddf3>
   d483c:	460f      	mov	r7, r1
   d483e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4840:	f001 fb8a 	bl	d5f58 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4844:	220a      	movs	r2, #10
   d4846:	4601      	mov	r1, r0
   d4848:	4680      	mov	r8, r0
   d484a:	4650      	mov	r0, sl
   d484c:	f7ff ff75 	bl	d473a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4850:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4852:	b3e5      	cbz	r5, d48ce <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4854:	4640      	mov	r0, r8
   d4856:	f001 f831 	bl	d58bc <__aeabi_ui2d>
   d485a:	4602      	mov	r2, r0
   d485c:	460b      	mov	r3, r1
   d485e:	4630      	mov	r0, r6
   d4860:	4639      	mov	r1, r7
   d4862:	f000 feed 	bl	d5640 <__aeabi_dsub>
   d4866:	4606      	mov	r6, r0
   d4868:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d486a:	4650      	mov	r0, sl
   d486c:	4921      	ldr	r1, [pc, #132]	; (d48f4 <_ZN5Print10printFloatEdh+0x178>)
   d486e:	f7ff ff45 	bl	d46fc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4872:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4874:	2200      	movs	r2, #0
   d4876:	4b1e      	ldr	r3, [pc, #120]	; (d48f0 <_ZN5Print10printFloatEdh+0x174>)
   d4878:	4630      	mov	r0, r6
   d487a:	4639      	mov	r1, r7
   d487c:	f001 f894 	bl	d59a8 <__aeabi_dmul>
   d4880:	4606      	mov	r6, r0
   d4882:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d4884:	f001 fb40 	bl	d5f08 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4888:	f1b0 0900 	subs.w	r9, r0, #0
   d488c:	da07      	bge.n	d489e <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d488e:	212d      	movs	r1, #45	; 0x2d
   d4890:	4650      	mov	r0, sl
   d4892:	f7ff ff43 	bl	d471c <_ZN5Print5printEc>
            val = -n;
   d4896:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d489a:	4680      	mov	r8, r0
   d489c:	e002      	b.n	d48a4 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d489e:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d48a0:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d48a4:	220a      	movs	r2, #10
   d48a6:	4650      	mov	r0, sl
   d48a8:	f7ff ff47 	bl	d473a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d48ac:	4440      	add	r0, r8
   d48ae:	4404      	add	r4, r0
    remainder -= toPrint;
   d48b0:	4648      	mov	r0, r9
   d48b2:	f001 f813 	bl	d58dc <__aeabi_i2d>
   d48b6:	4602      	mov	r2, r0
   d48b8:	460b      	mov	r3, r1
   d48ba:	4630      	mov	r0, r6
   d48bc:	4639      	mov	r1, r7
   d48be:	f000 febf 	bl	d5640 <__aeabi_dsub>
   d48c2:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d48c4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d48c8:	4606      	mov	r6, r0
   d48ca:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d48cc:	d1d2      	bne.n	d4874 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d48ce:	4620      	mov	r0, r4
   d48d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d48d4:	000d6160 	.word	0x000d6160
   d48d8:	7fefffff 	.word	0x7fefffff
   d48dc:	000d616a 	.word	0x000d616a
   d48e0:	41efffff 	.word	0x41efffff
   d48e4:	000d6164 	.word	0x000d6164
   d48e8:	c1efffff 	.word	0xc1efffff
   d48ec:	3fe00000 	.word	0x3fe00000
   d48f0:	40240000 	.word	0x40240000
   d48f4:	000d6168 	.word	0x000d6168

000d48f8 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d48f8:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d48fa:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d48fc:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d48fe:	f7ff ff3d 	bl	d477c <_ZN5Print10printFloatEdh>
   d4902:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d4904:	4628      	mov	r0, r5
   d4906:	f7ff ff0c 	bl	d4722 <_ZN5Print7printlnEv>
  return n;
}
   d490a:	4420      	add	r0, r4
   d490c:	bd38      	pop	{r3, r4, r5, pc}

000d490e <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d490e:	b538      	push	{r3, r4, r5, lr}
   d4910:	4604      	mov	r4, r0
    return println((double)num, digits);
   d4912:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d4916:	460d      	mov	r5, r1
    return println((double)num, digits);
   d4918:	f000 fff2 	bl	d5900 <__aeabi_f2d>
   d491c:	ec41 0b10 	vmov	d0, r0, r1
   d4920:	4629      	mov	r1, r5
   d4922:	4620      	mov	r0, r4
}
   d4924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d4928:	f7ff bfe6 	b.w	d48f8 <_ZN5Print7printlnEdi>

000d492c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d492c:	b40c      	push	{r2, r3}
   d492e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4932:	b087      	sub	sp, #28
   d4934:	af00      	add	r7, sp, #0
   d4936:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d493a:	4605      	mov	r5, r0
   d493c:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4940:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4942:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4944:	4623      	mov	r3, r4
   d4946:	464a      	mov	r2, r9
   d4948:	2114      	movs	r1, #20
   d494a:	1d38      	adds	r0, r7, #4
   d494c:	f7ff fe28 	bl	d45a0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4950:	2813      	cmp	r0, #19
   d4952:	d805      	bhi.n	d4960 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4954:	1d39      	adds	r1, r7, #4
   d4956:	4628      	mov	r0, r5
   d4958:	f7ff fed0 	bl	d46fc <_ZN5Print5writeEPKc>
   d495c:	4604      	mov	r4, r0
   d495e:	e013      	b.n	d4988 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4960:	f100 0308 	add.w	r3, r0, #8
   d4964:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4968:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d496a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d496e:	1c41      	adds	r1, r0, #1
   d4970:	4623      	mov	r3, r4
   d4972:	464a      	mov	r2, r9
   d4974:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4976:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4978:	f7ff fe12 	bl	d45a0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d497c:	4669      	mov	r1, sp
   d497e:	4628      	mov	r0, r5
   d4980:	f7ff febc 	bl	d46fc <_ZN5Print5writeEPKc>
   d4984:	4604      	mov	r4, r0
   d4986:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4988:	b11e      	cbz	r6, d4992 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d498a:	4628      	mov	r0, r5
   d498c:	f7ff fec9 	bl	d4722 <_ZN5Print7printlnEv>
   d4990:	4404      	add	r4, r0
    return n;
}
   d4992:	4620      	mov	r0, r4
   d4994:	371c      	adds	r7, #28
   d4996:	46bd      	mov	sp, r7
   d4998:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d499c:	b002      	add	sp, #8
   d499e:	4770      	bx	lr

000d49a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d49a0:	4b01      	ldr	r3, [pc, #4]	; (d49a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d49a2:	4a02      	ldr	r2, [pc, #8]	; (d49ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d49a4:	601a      	str	r2, [r3, #0]
   d49a6:	4770      	bx	lr
   d49a8:	2003e3e8 	.word	0x2003e3e8
   d49ac:	000d61e1 	.word	0x000d61e1

000d49b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d49b0:	4b02      	ldr	r3, [pc, #8]	; (d49bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d49b2:	681a      	ldr	r2, [r3, #0]
   d49b4:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d49b6:	601a      	str	r2, [r3, #0]
   d49b8:	4770      	bx	lr
   d49ba:	bf00      	nop
   d49bc:	2003e364 	.word	0x2003e364
   d49c0:	2003e3ec 	.word	0x2003e3ec

000d49c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d49c4:	2100      	movs	r1, #0
   d49c6:	f7ff bd67 	b.w	d4498 <system_delay_ms>

000d49ca <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49ca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d49cc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49ce:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d49d0:	b113      	cbz	r3, d49d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d49d2:	2203      	movs	r2, #3
   d49d4:	4601      	mov	r1, r0
   d49d6:	4798      	blx	r3
    }
   d49d8:	4620      	mov	r0, r4
   d49da:	bd10      	pop	{r4, pc}

000d49dc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d49dc:	b510      	push	{r4, lr}
   d49de:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49e0:	f7ff fff3 	bl	d49ca <_ZNSt14_Function_baseD1Ev>
   d49e4:	4620      	mov	r0, r4
   d49e6:	bd10      	pop	{r4, pc}

000d49e8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d49e8:	4803      	ldr	r0, [pc, #12]	; (d49f8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d49ea:	4a04      	ldr	r2, [pc, #16]	; (d49fc <_GLOBAL__sub_I_RGB+0x14>)
   d49ec:	4904      	ldr	r1, [pc, #16]	; (d4a00 <_GLOBAL__sub_I_RGB+0x18>)
   d49ee:	2300      	movs	r3, #0
   d49f0:	6083      	str	r3, [r0, #8]
   d49f2:	f000 bcb7 	b.w	d5364 <__aeabi_atexit>
   d49f6:	bf00      	nop
   d49f8:	2003e3f0 	.word	0x2003e3f0
   d49fc:	2003e3cc 	.word	0x2003e3cc
   d4a00:	000d49dd 	.word	0x000d49dd

000d4a04 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4a04:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4a06:	4b0c      	ldr	r3, [pc, #48]	; (d4a38 <serialEventRun+0x34>)
   d4a08:	b133      	cbz	r3, d4a18 <serialEventRun+0x14>
   d4a0a:	f000 f957 	bl	d4cbc <_Z16_fetch_usbserialv>
   d4a0e:	6803      	ldr	r3, [r0, #0]
   d4a10:	691b      	ldr	r3, [r3, #16]
   d4a12:	4798      	blx	r3
   d4a14:	2800      	cmp	r0, #0
   d4a16:	dc09      	bgt.n	d4a2c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4a18:	4b08      	ldr	r3, [pc, #32]	; (d4a3c <serialEventRun+0x38>)
   d4a1a:	b163      	cbz	r3, d4a36 <serialEventRun+0x32>
   d4a1c:	f000 f9d0 	bl	d4dc0 <_Z22__fetch_global_Serial1v>
   d4a20:	6803      	ldr	r3, [r0, #0]
   d4a22:	691b      	ldr	r3, [r3, #16]
   d4a24:	4798      	blx	r3
   d4a26:	2800      	cmp	r0, #0
   d4a28:	dc03      	bgt.n	d4a32 <serialEventRun+0x2e>
   d4a2a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4a2c:	f3af 8000 	nop.w
   d4a30:	e7f2      	b.n	d4a18 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4a32:	f3af 8000 	nop.w
   d4a36:	bd08      	pop	{r3, pc}
	...

000d4a40 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4a40:	b508      	push	{r3, lr}
	serialEventRun();
   d4a42:	f7ff ffdf 	bl	d4a04 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4a46:	f7ff fc37 	bl	d42b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4a4a:	4b01      	ldr	r3, [pc, #4]	; (d4a50 <_post_loop+0x10>)
   d4a4c:	6018      	str	r0, [r3, #0]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	2003e730 	.word	0x2003e730

000d4a54 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4a54:	4802      	ldr	r0, [pc, #8]	; (d4a60 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4a56:	4a03      	ldr	r2, [pc, #12]	; (d4a64 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4a58:	4903      	ldr	r1, [pc, #12]	; (d4a68 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4a5a:	1a12      	subs	r2, r2, r0
   d4a5c:	f001 bafa 	b.w	d6054 <memcpy>
   d4a60:	2003f400 	.word	0x2003f400
   d4a64:	2003f404 	.word	0x2003f404
   d4a68:	000d6450 	.word	0x000d6450

000d4a6c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4a6c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4a6e:	2300      	movs	r3, #0
   d4a70:	9300      	str	r3, [sp, #0]
   d4a72:	461a      	mov	r2, r3
   d4a74:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a78:	f7ff fd20 	bl	d44bc <system_ctrl_set_result>
}
   d4a7c:	b003      	add	sp, #12
   d4a7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4a84 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4a84:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4a86:	8843      	ldrh	r3, [r0, #2]
   d4a88:	2b0a      	cmp	r3, #10
   d4a8a:	d008      	beq.n	d4a9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4a8c:	2b50      	cmp	r3, #80	; 0x50
   d4a8e:	d109      	bne.n	d4aa4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4a90:	4b09      	ldr	r3, [pc, #36]	; (d4ab8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4a92:	681b      	ldr	r3, [r3, #0]
   d4a94:	b13b      	cbz	r3, d4aa6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4a96:	b003      	add	sp, #12
   d4a98:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4a9c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4a9e:	f7ff ffe5 	bl	d4a6c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4aa2:	e006      	b.n	d4ab2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4aa4:	2300      	movs	r3, #0
   d4aa6:	9300      	str	r3, [sp, #0]
   d4aa8:	461a      	mov	r2, r3
   d4aaa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4aae:	f7ff fd05 	bl	d44bc <system_ctrl_set_result>
        break;
    }
}
   d4ab2:	b003      	add	sp, #12
   d4ab4:	f85d fb04 	ldr.w	pc, [sp], #4
   d4ab8:	2003e400 	.word	0x2003e400

000d4abc <module_user_init_hook>:

void module_user_init_hook()
{
   d4abc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4abe:	4c10      	ldr	r4, [pc, #64]	; (d4b00 <module_user_init_hook+0x44>)
   d4ac0:	4d10      	ldr	r5, [pc, #64]	; (d4b04 <module_user_init_hook+0x48>)
   d4ac2:	6823      	ldr	r3, [r4, #0]
   d4ac4:	42ab      	cmp	r3, r5
   d4ac6:	4b10      	ldr	r3, [pc, #64]	; (d4b08 <module_user_init_hook+0x4c>)
   d4ac8:	bf0c      	ite	eq
   d4aca:	2201      	moveq	r2, #1
   d4acc:	2200      	movne	r2, #0
   d4ace:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4ad0:	d002      	beq.n	d4ad8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4ad2:	f7ff ffbf 	bl	d4a54 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4ad6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4ad8:	f7ff fbe6 	bl	d42a8 <HAL_RNG_GetRandomNumber>
   d4adc:	4604      	mov	r4, r0
    srand(seed);
   d4ade:	f001 facd 	bl	d607c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4ae2:	4b0a      	ldr	r3, [pc, #40]	; (d4b0c <module_user_init_hook+0x50>)
   d4ae4:	b113      	cbz	r3, d4aec <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4ae6:	4620      	mov	r0, r4
   d4ae8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4aec:	2100      	movs	r1, #0
   d4aee:	4807      	ldr	r0, [pc, #28]	; (d4b0c <module_user_init_hook+0x50>)
   d4af0:	f7ff fd3e 	bl	d4570 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4af4:	2100      	movs	r1, #0
   d4af6:	4806      	ldr	r0, [pc, #24]	; (d4b10 <module_user_init_hook+0x54>)
}
   d4af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4afc:	f7ff bcd4 	b.w	d44a8 <system_ctrl_set_app_request_handler>
   d4b00:	2003f400 	.word	0x2003f400
   d4b04:	9a271c1e 	.word	0x9a271c1e
   d4b08:	2003e404 	.word	0x2003e404
   d4b0c:	00000000 	.word	0x00000000
   d4b10:	000d4a85 	.word	0x000d4a85

000d4b14 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4b14:	4770      	bx	lr

000d4b16 <_ZN9IPAddressD0Ev>:
   d4b16:	b510      	push	{r4, lr}
   d4b18:	2118      	movs	r1, #24
   d4b1a:	4604      	mov	r4, r0
   d4b1c:	f000 fc30 	bl	d5380 <_ZdlPvj>
   d4b20:	4620      	mov	r0, r4
   d4b22:	bd10      	pop	{r4, pc}

000d4b24 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4b24:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4b26:	7d03      	ldrb	r3, [r0, #20]
   d4b28:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4b2a:	b08d      	sub	sp, #52	; 0x34
   d4b2c:	460e      	mov	r6, r1
   d4b2e:	f100 0704 	add.w	r7, r0, #4
   d4b32:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4b36:	d002      	beq.n	d4b3e <_ZNK9IPAddress7printToER5Print+0x1a>
   d4b38:	f100 0508 	add.w	r5, r0, #8
   d4b3c:	e018      	b.n	d4b70 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b3e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b40:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b42:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b46:	232f      	movs	r3, #47	; 0x2f
   d4b48:	462a      	mov	r2, r5
   d4b4a:	200a      	movs	r0, #10
   d4b4c:	f7ff fbe4 	bl	d4318 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4b50:	4628      	mov	r0, r5
   d4b52:	f001 fabb 	bl	d60cc <strlen>
   d4b56:	6833      	ldr	r3, [r6, #0]
   d4b58:	4602      	mov	r2, r0
   d4b5a:	68db      	ldr	r3, [r3, #12]
   d4b5c:	4629      	mov	r1, r5
   d4b5e:	4630      	mov	r0, r6
   d4b60:	4798      	blx	r3
   d4b62:	e00f      	b.n	d4b84 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4b64:	b124      	cbz	r4, d4b70 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4b66:	212e      	movs	r1, #46	; 0x2e
   d4b68:	4630      	mov	r0, r6
   d4b6a:	f7ff fdd7 	bl	d471c <_ZN5Print5printEc>
   d4b6e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4b70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4b74:	220a      	movs	r2, #10
   d4b76:	4630      	mov	r0, r6
   d4b78:	f7ff fddf 	bl	d473a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b7c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b7e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b80:	d1f0      	bne.n	d4b64 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b82:	4620      	mov	r0, r4
    }
    return n;
}
   d4b84:	b00d      	add	sp, #52	; 0x34
   d4b86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b88 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4b88:	b510      	push	{r4, lr}
   d4b8a:	4b05      	ldr	r3, [pc, #20]	; (d4ba0 <_ZN9IPAddressC1Ev+0x18>)
   d4b8c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4b8e:	2211      	movs	r2, #17
   d4b90:	f840 3b04 	str.w	r3, [r0], #4
   d4b94:	2100      	movs	r1, #0
   d4b96:	f001 fa68 	bl	d606a <memset>
{
    clear();
}
   d4b9a:	4620      	mov	r0, r4
   d4b9c:	bd10      	pop	{r4, pc}
   d4b9e:	bf00      	nop
   d4ba0:	000d6280 	.word	0x000d6280

000d4ba4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ba4:	4603      	mov	r3, r0
   d4ba6:	4a07      	ldr	r2, [pc, #28]	; (d4bc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ba8:	b510      	push	{r4, lr}
   d4baa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4bae:	f101 0210 	add.w	r2, r1, #16
   d4bb2:	f851 4b04 	ldr.w	r4, [r1], #4
   d4bb6:	f843 4b04 	str.w	r4, [r3], #4
   d4bba:	4291      	cmp	r1, r2
   d4bbc:	d1f9      	bne.n	d4bb2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4bbe:	780a      	ldrb	r2, [r1, #0]
   d4bc0:	701a      	strb	r2, [r3, #0]
}
   d4bc2:	bd10      	pop	{r4, pc}
   d4bc4:	000d6280 	.word	0x000d6280

000d4bc8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4bc8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4bca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4bce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4bd2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4bd6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4bda:	2304      	movs	r3, #4
   d4bdc:	6041      	str	r1, [r0, #4]
   d4bde:	7503      	strb	r3, [r0, #20]
   d4be0:	bd10      	pop	{r4, pc}

000d4be2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4be2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4be4:	780d      	ldrb	r5, [r1, #0]
   d4be6:	788b      	ldrb	r3, [r1, #2]
   d4be8:	784a      	ldrb	r2, [r1, #1]
   d4bea:	78c9      	ldrb	r1, [r1, #3]
   d4bec:	9100      	str	r1, [sp, #0]
   d4bee:	4629      	mov	r1, r5
   d4bf0:	f7ff ffea 	bl	d4bc8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4bf4:	b003      	add	sp, #12
   d4bf6:	bd30      	pop	{r4, r5, pc}

000d4bf8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4bf8:	7441      	strb	r1, [r0, #17]
   d4bfa:	4770      	bx	lr

000d4bfc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4bfc:	4770      	bx	lr

000d4bfe <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4bfe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4c00:	2100      	movs	r1, #0
   d4c02:	7c00      	ldrb	r0, [r0, #16]
   d4c04:	f7ff fc28 	bl	d4458 <HAL_USB_USART_Receive_Data>
}
   d4c08:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c0c:	bf28      	it	cs
   d4c0e:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c12:	bd08      	pop	{r3, pc}

000d4c14 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4c14:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4c16:	2101      	movs	r1, #1
   d4c18:	7c00      	ldrb	r0, [r0, #16]
   d4c1a:	f7ff fc1d 	bl	d4458 <HAL_USB_USART_Receive_Data>
}
   d4c1e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c22:	bf28      	it	cs
   d4c24:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c28:	bd08      	pop	{r3, pc}

000d4c2a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4c2a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4c2c:	7c00      	ldrb	r0, [r0, #16]
   d4c2e:	f7ff fc0b 	bl	d4448 <HAL_USB_USART_Available_Data_For_Write>
}
   d4c32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c36:	bd08      	pop	{r3, pc}

000d4c38 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4c38:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4c3a:	7c00      	ldrb	r0, [r0, #16]
   d4c3c:	f7ff fbfc 	bl	d4438 <HAL_USB_USART_Available_Data>
}
   d4c40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c44:	bd08      	pop	{r3, pc}

000d4c46 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4c46:	7c00      	ldrb	r0, [r0, #16]
   d4c48:	f7ff bc16 	b.w	d4478 <HAL_USB_USART_Flush_Data>

000d4c4c <_ZN9USBSerialD0Ev>:
   d4c4c:	b510      	push	{r4, lr}
   d4c4e:	2114      	movs	r1, #20
   d4c50:	4604      	mov	r4, r0
   d4c52:	f000 fb95 	bl	d5380 <_ZdlPvj>
   d4c56:	4620      	mov	r0, r4
   d4c58:	bd10      	pop	{r4, pc}

000d4c5a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4c5a:	b538      	push	{r3, r4, r5, lr}
   d4c5c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c5e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4c60:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c62:	f7ff fbf1 	bl	d4448 <HAL_USB_USART_Available_Data_For_Write>
   d4c66:	2800      	cmp	r0, #0
   d4c68:	dc01      	bgt.n	d4c6e <_ZN9USBSerial5writeEh+0x14>
   d4c6a:	7c60      	ldrb	r0, [r4, #17]
   d4c6c:	b128      	cbz	r0, d4c7a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4c6e:	4629      	mov	r1, r5
   d4c70:	7c20      	ldrb	r0, [r4, #16]
   d4c72:	f7ff fbf9 	bl	d4468 <HAL_USB_USART_Send_Data>
   d4c76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4c7a:	bd38      	pop	{r3, r4, r5, pc}

000d4c7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4c7c:	b510      	push	{r4, lr}
   d4c7e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4c80:	2300      	movs	r3, #0
   d4c82:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c88:	60a3      	str	r3, [r4, #8]
   d4c8a:	4b05      	ldr	r3, [pc, #20]	; (d4ca0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4c8c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4c8e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4c90:	4608      	mov	r0, r1
{
  _serial = serial;
   d4c92:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4c94:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4c96:	4611      	mov	r1, r2
   d4c98:	f7ff fbbe 	bl	d4418 <HAL_USB_USART_Init>
}
   d4c9c:	4620      	mov	r0, r4
   d4c9e:	bd10      	pop	{r4, pc}
   d4ca0:	000d6294 	.word	0x000d6294

000d4ca4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4ca4:	2200      	movs	r2, #0
   d4ca6:	7c00      	ldrb	r0, [r0, #16]
   d4ca8:	f7ff bbbe 	b.w	d4428 <HAL_USB_USART_Begin>

000d4cac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4cac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4cae:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4cb0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4cb2:	2100      	movs	r1, #0
   d4cb4:	f001 f9d9 	bl	d606a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4cb8:	4620      	mov	r0, r4
   d4cba:	bd10      	pop	{r4, pc}

000d4cbc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4cbc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4cbe:	4d0e      	ldr	r5, [pc, #56]	; (d4cf8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4cc0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4cc2:	a801      	add	r0, sp, #4
   d4cc4:	f7ff fff2 	bl	d4cac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4cc8:	6829      	ldr	r1, [r5, #0]
   d4cca:	f011 0401 	ands.w	r4, r1, #1
   d4cce:	d110      	bne.n	d4cf2 <_Z16_fetch_usbserialv+0x36>
   d4cd0:	4628      	mov	r0, r5
   d4cd2:	f7ff f9e4 	bl	d409e <__cxa_guard_acquire>
   d4cd6:	b160      	cbz	r0, d4cf2 <_Z16_fetch_usbserialv+0x36>
   d4cd8:	aa01      	add	r2, sp, #4
   d4cda:	4621      	mov	r1, r4
   d4cdc:	4807      	ldr	r0, [pc, #28]	; (d4cfc <_Z16_fetch_usbserialv+0x40>)
   d4cde:	f7ff ffcd 	bl	d4c7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4ce2:	4628      	mov	r0, r5
   d4ce4:	f7ff f9e0 	bl	d40a8 <__cxa_guard_release>
   d4ce8:	4a05      	ldr	r2, [pc, #20]	; (d4d00 <_Z16_fetch_usbserialv+0x44>)
   d4cea:	4906      	ldr	r1, [pc, #24]	; (d4d04 <_Z16_fetch_usbserialv+0x48>)
   d4cec:	4803      	ldr	r0, [pc, #12]	; (d4cfc <_Z16_fetch_usbserialv+0x40>)
   d4cee:	f000 fb39 	bl	d5364 <__aeabi_atexit>
	return _usbserial;
}
   d4cf2:	4802      	ldr	r0, [pc, #8]	; (d4cfc <_Z16_fetch_usbserialv+0x40>)
   d4cf4:	b007      	add	sp, #28
   d4cf6:	bd30      	pop	{r4, r5, pc}
   d4cf8:	2003e408 	.word	0x2003e408
   d4cfc:	2003e40c 	.word	0x2003e40c
   d4d00:	2003e3cc 	.word	0x2003e3cc
   d4d04:	000d4bfd 	.word	0x000d4bfd

000d4d08 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4d08:	4770      	bx	lr

000d4d0a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d0a:	7441      	strb	r1, [r0, #17]
   d4d0c:	4770      	bx	lr

000d4d0e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4d0e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4d10:	7c00      	ldrb	r0, [r0, #16]
   d4d12:	f7ff fb41 	bl	d4398 <HAL_USART_Available_Data_For_Write>
}
   d4d16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d1a:	bd08      	pop	{r3, pc}

000d4d1c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4d1c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4d1e:	7c00      	ldrb	r0, [r0, #16]
   d4d20:	f7ff fb12 	bl	d4348 <HAL_USART_Available_Data>
}
   d4d24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d28:	bd08      	pop	{r3, pc}

000d4d2a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4d2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4d2c:	7c00      	ldrb	r0, [r0, #16]
   d4d2e:	f7ff fb1b 	bl	d4368 <HAL_USART_Peek_Data>
}
   d4d32:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d36:	bf28      	it	cs
   d4d38:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d3c:	bd08      	pop	{r3, pc}

000d4d3e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4d3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4d40:	7c00      	ldrb	r0, [r0, #16]
   d4d42:	f7ff fb09 	bl	d4358 <HAL_USART_Read_Data>
}
   d4d46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d4a:	bf28      	it	cs
   d4d4c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d50:	bd08      	pop	{r3, pc}

000d4d52 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4d52:	7c00      	ldrb	r0, [r0, #16]
   d4d54:	f7ff bb10 	b.w	d4378 <HAL_USART_Flush_Data>

000d4d58 <_ZN11USARTSerialD0Ev>:
   d4d58:	b510      	push	{r4, lr}
   d4d5a:	2114      	movs	r1, #20
   d4d5c:	4604      	mov	r4, r0
   d4d5e:	f000 fb0f 	bl	d5380 <_ZdlPvj>
   d4d62:	4620      	mov	r0, r4
   d4d64:	bd10      	pop	{r4, pc}

000d4d66 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4d66:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d68:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4d6a:	4604      	mov	r4, r0
   d4d6c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d6e:	b925      	cbnz	r5, d4d7a <_ZN11USARTSerial5writeEh+0x14>
   d4d70:	7c00      	ldrb	r0, [r0, #16]
   d4d72:	f7ff fb11 	bl	d4398 <HAL_USART_Available_Data_For_Write>
   d4d76:	2800      	cmp	r0, #0
   d4d78:	dd05      	ble.n	d4d86 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d7a:	4631      	mov	r1, r6
   d4d7c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d82:	f7ff bad9 	b.w	d4338 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4d86:	4628      	mov	r0, r5
   d4d88:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4d8c:	b510      	push	{r4, lr}
   d4d8e:	4604      	mov	r4, r0
   d4d90:	4608      	mov	r0, r1
   d4d92:	4611      	mov	r1, r2
   d4d94:	2200      	movs	r2, #0
   d4d96:	6062      	str	r2, [r4, #4]
   d4d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4d9c:	60a2      	str	r2, [r4, #8]
   d4d9e:	4a05      	ldr	r2, [pc, #20]	; (d4db4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4da0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4da2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4da4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4da6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4da8:	461a      	mov	r2, r3
   d4daa:	f7ff fabd 	bl	d4328 <HAL_USART_Init>
}
   d4dae:	4620      	mov	r0, r4
   d4db0:	bd10      	pop	{r4, pc}
   d4db2:	bf00      	nop
   d4db4:	000d62c4 	.word	0x000d62c4

000d4db8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4db8:	7c00      	ldrb	r0, [r0, #16]
   d4dba:	f7ff bae5 	b.w	d4388 <HAL_USART_Is_Enabled>
	...

000d4dc0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4dc0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4dc2:	4d0c      	ldr	r5, [pc, #48]	; (d4df4 <_Z22__fetch_global_Serial1v+0x34>)
   d4dc4:	6829      	ldr	r1, [r5, #0]
   d4dc6:	f011 0401 	ands.w	r4, r1, #1
   d4dca:	d111      	bne.n	d4df0 <_Z22__fetch_global_Serial1v+0x30>
   d4dcc:	4628      	mov	r0, r5
   d4dce:	f7ff f966 	bl	d409e <__cxa_guard_acquire>
   d4dd2:	b168      	cbz	r0, d4df0 <_Z22__fetch_global_Serial1v+0x30>
   d4dd4:	4a08      	ldr	r2, [pc, #32]	; (d4df8 <_Z22__fetch_global_Serial1v+0x38>)
   d4dd6:	4b09      	ldr	r3, [pc, #36]	; (d4dfc <_Z22__fetch_global_Serial1v+0x3c>)
   d4dd8:	4809      	ldr	r0, [pc, #36]	; (d4e00 <_Z22__fetch_global_Serial1v+0x40>)
   d4dda:	4621      	mov	r1, r4
   d4ddc:	f7ff ffd6 	bl	d4d8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4de0:	4628      	mov	r0, r5
   d4de2:	f7ff f961 	bl	d40a8 <__cxa_guard_release>
   d4de6:	4a07      	ldr	r2, [pc, #28]	; (d4e04 <_Z22__fetch_global_Serial1v+0x44>)
   d4de8:	4907      	ldr	r1, [pc, #28]	; (d4e08 <_Z22__fetch_global_Serial1v+0x48>)
   d4dea:	4805      	ldr	r0, [pc, #20]	; (d4e00 <_Z22__fetch_global_Serial1v+0x40>)
   d4dec:	f000 faba 	bl	d5364 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4df0:	4803      	ldr	r0, [pc, #12]	; (d4e00 <_Z22__fetch_global_Serial1v+0x40>)
   d4df2:	bd38      	pop	{r3, r4, r5, pc}
   d4df4:	2003e4b8 	.word	0x2003e4b8
   d4df8:	2003e4bc 	.word	0x2003e4bc
   d4dfc:	2003e434 	.word	0x2003e434
   d4e00:	2003e420 	.word	0x2003e420
   d4e04:	2003e3cc 	.word	0x2003e3cc
   d4e08:	000d4d09 	.word	0x000d4d09

000d4e0c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4e0c:	4770      	bx	lr

000d4e0e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e10:	4606      	mov	r6, r0
   d4e12:	4615      	mov	r5, r2
   d4e14:	460c      	mov	r4, r1
   d4e16:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e18:	42bc      	cmp	r4, r7
   d4e1a:	d006      	beq.n	d4e2a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4e1c:	6833      	ldr	r3, [r6, #0]
   d4e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4e22:	689b      	ldr	r3, [r3, #8]
   d4e24:	4630      	mov	r0, r6
   d4e26:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e28:	e7f6      	b.n	d4e18 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4e2a:	4628      	mov	r0, r5
   d4e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e2e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4e2e:	2200      	movs	r2, #0
   d4e30:	7c00      	ldrb	r0, [r0, #16]
   d4e32:	f7ff bab9 	b.w	d43a8 <HAL_I2C_Write_Data>

000d4e36 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4e36:	2100      	movs	r1, #0
   d4e38:	7c00      	ldrb	r0, [r0, #16]
   d4e3a:	f7ff babd 	b.w	d43b8 <HAL_I2C_Available_Data>

000d4e3e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4e3e:	2100      	movs	r1, #0
   d4e40:	7c00      	ldrb	r0, [r0, #16]
   d4e42:	f7ff bac1 	b.w	d43c8 <HAL_I2C_Read_Data>

000d4e46 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4e46:	2100      	movs	r1, #0
   d4e48:	7c00      	ldrb	r0, [r0, #16]
   d4e4a:	f7ff bac5 	b.w	d43d8 <HAL_I2C_Peek_Data>

000d4e4e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4e4e:	2100      	movs	r1, #0
   d4e50:	7c00      	ldrb	r0, [r0, #16]
   d4e52:	f7ff bac9 	b.w	d43e8 <HAL_I2C_Flush_Data>

000d4e56 <_ZN7TwoWireD0Ev>:
   d4e56:	b510      	push	{r4, lr}
   d4e58:	2114      	movs	r1, #20
   d4e5a:	4604      	mov	r4, r0
   d4e5c:	f000 fa90 	bl	d5380 <_ZdlPvj>
   d4e60:	4620      	mov	r0, r4
   d4e62:	bd10      	pop	{r4, pc}

000d4e64 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4e64:	b510      	push	{r4, lr}
   d4e66:	4604      	mov	r4, r0
   d4e68:	2300      	movs	r3, #0
   d4e6a:	6063      	str	r3, [r4, #4]
   d4e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e70:	60a3      	str	r3, [r4, #8]
   d4e72:	4b04      	ldr	r3, [pc, #16]	; (d4e84 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4e74:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4e76:	4608      	mov	r0, r1
   d4e78:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4e7a:	4611      	mov	r1, r2
   d4e7c:	f7ff fac4 	bl	d4408 <HAL_I2C_Init>
}
   d4e80:	4620      	mov	r0, r4
   d4e82:	bd10      	pop	{r4, pc}
   d4e84:	000d62f4 	.word	0x000d62f4

000d4e88 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4e88:	2100      	movs	r1, #0
   d4e8a:	7c00      	ldrb	r0, [r0, #16]
   d4e8c:	f7ff bab4 	b.w	d43f8 <HAL_I2C_Is_Enabled>

000d4e90 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e90:	2200      	movs	r2, #0
   d4e92:	4611      	mov	r1, r2
   d4e94:	6840      	ldr	r0, [r0, #4]
   d4e96:	f7ff bb53 	b.w	d4540 <network_listening>

000d4e9a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e9a:	2200      	movs	r2, #0
   d4e9c:	4611      	mov	r1, r2
   d4e9e:	6840      	ldr	r0, [r0, #4]
   d4ea0:	f7ff bb5e 	b.w	d4560 <network_get_listen_timeout>

000d4ea4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ea4:	2200      	movs	r2, #0
   d4ea6:	6840      	ldr	r0, [r0, #4]
   d4ea8:	f7ff bb52 	b.w	d4550 <network_set_listen_timeout>

000d4eac <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4eac:	2200      	movs	r2, #0
   d4eae:	f081 0101 	eor.w	r1, r1, #1
   d4eb2:	6840      	ldr	r0, [r0, #4]
   d4eb4:	f7ff bb3c 	b.w	d4530 <network_listen>

000d4eb8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4eb8:	2300      	movs	r3, #0
   d4eba:	461a      	mov	r2, r3
   d4ebc:	2101      	movs	r1, #1
   d4ebe:	6840      	ldr	r0, [r0, #4]
   d4ec0:	f7ff bb2e 	b.w	d4520 <network_off>

000d4ec4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ec4:	2300      	movs	r3, #0
   d4ec6:	461a      	mov	r2, r3
   d4ec8:	4619      	mov	r1, r3
   d4eca:	6840      	ldr	r0, [r0, #4]
   d4ecc:	f7ff bb20 	b.w	d4510 <network_on>

000d4ed0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ed0:	2200      	movs	r2, #0
   d4ed2:	4611      	mov	r1, r2
   d4ed4:	6840      	ldr	r0, [r0, #4]
   d4ed6:	f7ff bb13 	b.w	d4500 <network_ready>

000d4eda <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4eda:	2200      	movs	r2, #0
   d4edc:	4611      	mov	r1, r2
   d4ede:	6840      	ldr	r0, [r0, #4]
   d4ee0:	f7ff bafe 	b.w	d44e0 <network_connecting>

000d4ee4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ee4:	2200      	movs	r2, #0
   d4ee6:	2102      	movs	r1, #2
   d4ee8:	6840      	ldr	r0, [r0, #4]
   d4eea:	f7ff bb01 	b.w	d44f0 <network_disconnect>

000d4eee <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4eee:	2300      	movs	r3, #0
   d4ef0:	461a      	mov	r2, r3
   d4ef2:	6840      	ldr	r0, [r0, #4]
   d4ef4:	f7ff baec 	b.w	d44d0 <network_connect>

000d4ef8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4ef8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4efa:	4605      	mov	r5, r0
   d4efc:	b188      	cbz	r0, d4f22 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4efe:	6804      	ldr	r4, [r0, #0]
   d4f00:	b14c      	cbz	r4, d4f16 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4f02:	68a3      	ldr	r3, [r4, #8]
   d4f04:	b11b      	cbz	r3, d4f0e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f06:	2203      	movs	r2, #3
   d4f08:	4621      	mov	r1, r4
   d4f0a:	4620      	mov	r0, r4
   d4f0c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f0e:	2110      	movs	r1, #16
   d4f10:	4620      	mov	r0, r4
   d4f12:	f000 fa35 	bl	d5380 <_ZdlPvj>
   d4f16:	4628      	mov	r0, r5
   d4f18:	2114      	movs	r1, #20
      }
   d4f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f1e:	f000 ba2f 	b.w	d5380 <_ZdlPvj>
   d4f22:	bd38      	pop	{r3, r4, r5, pc}

000d4f24 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4f24:	b110      	cbz	r0, d4f2c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4f26:	6803      	ldr	r3, [r0, #0]
   d4f28:	685b      	ldr	r3, [r3, #4]
   d4f2a:	4718      	bx	r3
   d4f2c:	4770      	bx	lr

000d4f2e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4f2e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4f30:	6803      	ldr	r3, [r0, #0]
   d4f32:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4f34:	b1bb      	cbz	r3, d4f66 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4f36:	6858      	ldr	r0, [r3, #4]
   d4f38:	f7ff f9c6 	bl	d42c8 <os_thread_is_current>
   d4f3c:	b978      	cbnz	r0, d4f5e <_ZN6ThreadD1Ev+0x30>
   d4f3e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4f40:	7c5a      	ldrb	r2, [r3, #17]
   d4f42:	b912      	cbnz	r2, d4f4a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4f44:	6858      	ldr	r0, [r3, #4]
   d4f46:	f7ff f9c7 	bl	d42d8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4f4a:	6823      	ldr	r3, [r4, #0]
   d4f4c:	6858      	ldr	r0, [r3, #4]
   d4f4e:	f7ff f9cb 	bl	d42e8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f52:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f54:	2300      	movs	r3, #0
   d4f56:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4f58:	b128      	cbz	r0, d4f66 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4f5a:	f7ff ffcd 	bl	d4ef8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f5e:	6820      	ldr	r0, [r4, #0]
   d4f60:	b108      	cbz	r0, d4f66 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4f62:	f7ff ffc9 	bl	d4ef8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4f66:	4620      	mov	r0, r4
   d4f68:	bd10      	pop	{r4, pc}

000d4f6a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4f6a:	b538      	push	{r3, r4, r5, lr}
   d4f6c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f6e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4f72:	b108      	cbz	r0, d4f78 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4f74:	f7ff f891 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f78:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4f7c:	b108      	cbz	r0, d4f82 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4f7e:	f7ff f9c3 	bl	d4308 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f82:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4f86:	b135      	cbz	r5, d4f96 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f88:	4628      	mov	r0, r5
   d4f8a:	f7ff ffd0 	bl	d4f2e <_ZN6ThreadD1Ev>
   d4f8e:	2104      	movs	r1, #4
   d4f90:	4628      	mov	r0, r5
   d4f92:	f000 f9f5 	bl	d5380 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f96:	6820      	ldr	r0, [r4, #0]
   d4f98:	b108      	cbz	r0, d4f9e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4f9a:	f7ff ffc3 	bl	d4f24 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4fa4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4fa4:	b510      	push	{r4, lr}
   d4fa6:	4b04      	ldr	r3, [pc, #16]	; (d4fb8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4fa8:	4604      	mov	r4, r0
   d4faa:	f840 3b08 	str.w	r3, [r0], #8
   d4fae:	f7ff ffdc 	bl	d4f6a <_ZN5spark11MeshPublishD1Ev>
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	bd10      	pop	{r4, pc}
   d4fb6:	bf00      	nop
   d4fb8:	000d631c 	.word	0x000d631c

000d4fbc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4fbc:	b538      	push	{r3, r4, r5, lr}
   d4fbe:	4c0e      	ldr	r4, [pc, #56]	; (d4ff8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4fc0:	4b0e      	ldr	r3, [pc, #56]	; (d4ffc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4fc2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4fc4:	2500      	movs	r5, #0
   d4fc6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4fc8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4fcc:	6063      	str	r3, [r4, #4]
   d4fce:	60a5      	str	r5, [r4, #8]
   d4fd0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4fd4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4fd8:	f7ff f98e 	bl	d42f8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4fdc:	4b08      	ldr	r3, [pc, #32]	; (d5000 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4fde:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4fe2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4fe6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4fe8:	4620      	mov	r0, r4
   d4fea:	4a06      	ldr	r2, [pc, #24]	; (d5004 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4fec:	4906      	ldr	r1, [pc, #24]	; (d5008 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4ff2:	f000 b9b7 	b.w	d5364 <__aeabi_atexit>
   d4ff6:	bf00      	nop
   d4ff8:	2003e540 	.word	0x2003e540
   d4ffc:	000d6384 	.word	0x000d6384
   d5000:	000d631c 	.word	0x000d631c
   d5004:	2003e3cc 	.word	0x2003e3cc
   d5008:	000d4fa5 	.word	0x000d4fa5

000d500c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d500c:	2200      	movs	r2, #0
   d500e:	4611      	mov	r1, r2
   d5010:	6840      	ldr	r0, [r0, #4]
   d5012:	f7ff ba75 	b.w	d4500 <network_ready>

000d5016 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5016:	2200      	movs	r2, #0
   d5018:	4611      	mov	r1, r2
   d501a:	6840      	ldr	r0, [r0, #4]
   d501c:	f7ff ba90 	b.w	d4540 <network_listening>

000d5020 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5020:	2200      	movs	r2, #0
   d5022:	4611      	mov	r1, r2
   d5024:	6840      	ldr	r0, [r0, #4]
   d5026:	f7ff ba9b 	b.w	d4560 <network_get_listen_timeout>

000d502a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d502a:	2200      	movs	r2, #0
   d502c:	6840      	ldr	r0, [r0, #4]
   d502e:	f7ff ba8f 	b.w	d4550 <network_set_listen_timeout>

000d5032 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5032:	2200      	movs	r2, #0
   d5034:	f081 0101 	eor.w	r1, r1, #1
   d5038:	6840      	ldr	r0, [r0, #4]
   d503a:	f7ff ba79 	b.w	d4530 <network_listen>

000d503e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d503e:	2300      	movs	r3, #0
   d5040:	461a      	mov	r2, r3
   d5042:	4619      	mov	r1, r3
   d5044:	6840      	ldr	r0, [r0, #4]
   d5046:	f7ff ba6b 	b.w	d4520 <network_off>

000d504a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d504a:	2300      	movs	r3, #0
   d504c:	461a      	mov	r2, r3
   d504e:	4619      	mov	r1, r3
   d5050:	6840      	ldr	r0, [r0, #4]
   d5052:	f7ff ba5d 	b.w	d4510 <network_on>

000d5056 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5056:	2200      	movs	r2, #0
   d5058:	4611      	mov	r1, r2
   d505a:	6840      	ldr	r0, [r0, #4]
   d505c:	f7ff ba40 	b.w	d44e0 <network_connecting>

000d5060 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5060:	2200      	movs	r2, #0
   d5062:	2102      	movs	r1, #2
   d5064:	6840      	ldr	r0, [r0, #4]
   d5066:	f7ff ba43 	b.w	d44f0 <network_disconnect>

000d506a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d506a:	2300      	movs	r3, #0
   d506c:	461a      	mov	r2, r3
   d506e:	6840      	ldr	r0, [r0, #4]
   d5070:	f7ff ba2e 	b.w	d44d0 <network_connect>

000d5074 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5074:	4b02      	ldr	r3, [pc, #8]	; (d5080 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5076:	2204      	movs	r2, #4
   d5078:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d507a:	4a02      	ldr	r2, [pc, #8]	; (d5084 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d507c:	601a      	str	r2, [r3, #0]
   d507e:	4770      	bx	lr
   d5080:	2003e714 	.word	0x2003e714
   d5084:	000d6350 	.word	0x000d6350

000d5088 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5088:	2300      	movs	r3, #0
   d508a:	461a      	mov	r2, r3
   d508c:	6840      	ldr	r0, [r0, #4]
   d508e:	f7ff ba1f 	b.w	d44d0 <network_connect>

000d5092 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5092:	2200      	movs	r2, #0
   d5094:	2102      	movs	r1, #2
   d5096:	6840      	ldr	r0, [r0, #4]
   d5098:	f7ff ba2a 	b.w	d44f0 <network_disconnect>

000d509c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d509c:	2200      	movs	r2, #0
   d509e:	4611      	mov	r1, r2
   d50a0:	6840      	ldr	r0, [r0, #4]
   d50a2:	f7ff ba1d 	b.w	d44e0 <network_connecting>

000d50a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d50a6:	2200      	movs	r2, #0
   d50a8:	4611      	mov	r1, r2
   d50aa:	6840      	ldr	r0, [r0, #4]
   d50ac:	f7ff ba28 	b.w	d4500 <network_ready>

000d50b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d50b0:	2300      	movs	r3, #0
   d50b2:	461a      	mov	r2, r3
   d50b4:	4619      	mov	r1, r3
   d50b6:	6840      	ldr	r0, [r0, #4]
   d50b8:	f7ff ba2a 	b.w	d4510 <network_on>

000d50bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d50bc:	2300      	movs	r3, #0
   d50be:	461a      	mov	r2, r3
   d50c0:	4619      	mov	r1, r3
   d50c2:	6840      	ldr	r0, [r0, #4]
   d50c4:	f7ff ba2c 	b.w	d4520 <network_off>

000d50c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d50c8:	2200      	movs	r2, #0
   d50ca:	f081 0101 	eor.w	r1, r1, #1
   d50ce:	6840      	ldr	r0, [r0, #4]
   d50d0:	f7ff ba2e 	b.w	d4530 <network_listen>

000d50d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d50d4:	2200      	movs	r2, #0
   d50d6:	6840      	ldr	r0, [r0, #4]
   d50d8:	f7ff ba3a 	b.w	d4550 <network_set_listen_timeout>

000d50dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d50dc:	2200      	movs	r2, #0
   d50de:	4611      	mov	r1, r2
   d50e0:	6840      	ldr	r0, [r0, #4]
   d50e2:	f7ff ba3d 	b.w	d4560 <network_get_listen_timeout>

000d50e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d50e6:	2200      	movs	r2, #0
   d50e8:	4611      	mov	r1, r2
   d50ea:	6840      	ldr	r0, [r0, #4]
   d50ec:	f7ff ba28 	b.w	d4540 <network_listening>

000d50f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d50f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d50f4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d50f6:	b095      	sub	sp, #84	; 0x54
   d50f8:	4616      	mov	r6, r2
   d50fa:	460d      	mov	r5, r1
   d50fc:	4607      	mov	r7, r0
    IPAddress addr;
   d50fe:	f7ff fd43 	bl	d4b88 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5102:	4621      	mov	r1, r4
   d5104:	2220      	movs	r2, #32
   d5106:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5108:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d510a:	f000 ffae 	bl	d606a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d510e:	2340      	movs	r3, #64	; 0x40
   d5110:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5112:	4621      	mov	r1, r4
   d5114:	466b      	mov	r3, sp
   d5116:	aa0c      	add	r2, sp, #48	; 0x30
   d5118:	4630      	mov	r0, r6
   d511a:	f7ff f875 	bl	d4208 <netdb_getaddrinfo>
    if (!r) {
   d511e:	4604      	mov	r4, r0
   d5120:	2800      	cmp	r0, #0
   d5122:	d144      	bne.n	d51ae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5124:	4602      	mov	r2, r0
   d5126:	2101      	movs	r1, #1
   d5128:	6868      	ldr	r0, [r5, #4]
   d512a:	f7ff f9e9 	bl	d4500 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d512e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5130:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5132:	4622      	mov	r2, r4
   d5134:	6868      	ldr	r0, [r5, #4]
   d5136:	f7ff f9e3 	bl	d4500 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d513a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d513c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d513e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5140:	2e00      	cmp	r6, #0
   d5142:	d034      	beq.n	d51ae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5144:	2900      	cmp	r1, #0
   d5146:	d132      	bne.n	d51ae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5148:	6873      	ldr	r3, [r6, #4]
   d514a:	2b02      	cmp	r3, #2
   d514c:	d002      	beq.n	d5154 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d514e:	2b0a      	cmp	r3, #10
   d5150:	d009      	beq.n	d5166 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5152:	e02a      	b.n	d51aa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5154:	f1b8 0f00 	cmp.w	r8, #0
   d5158:	d027      	beq.n	d51aa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d515a:	6971      	ldr	r1, [r6, #20]
   d515c:	4638      	mov	r0, r7
   d515e:	3104      	adds	r1, #4
   d5160:	f7ff fd3f 	bl	d4be2 <_ZN9IPAddressaSEPKh>
   d5164:	e020      	b.n	d51a8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5166:	f1b9 0f00 	cmp.w	r9, #0
   d516a:	d01e      	beq.n	d51aa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d516c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d516e:	2211      	movs	r2, #17
   d5170:	a801      	add	r0, sp, #4
   d5172:	f000 ff7a 	bl	d606a <memset>
                    a.v = 6;
   d5176:	2306      	movs	r3, #6
   d5178:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d517c:	ad01      	add	r5, sp, #4
   d517e:	f104 0308 	add.w	r3, r4, #8
   d5182:	3418      	adds	r4, #24
   d5184:	6818      	ldr	r0, [r3, #0]
   d5186:	6859      	ldr	r1, [r3, #4]
   d5188:	462a      	mov	r2, r5
   d518a:	c203      	stmia	r2!, {r0, r1}
   d518c:	3308      	adds	r3, #8
   d518e:	42a3      	cmp	r3, r4
   d5190:	4615      	mov	r5, r2
   d5192:	d1f7      	bne.n	d5184 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5194:	a901      	add	r1, sp, #4
   d5196:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5198:	ad07      	add	r5, sp, #28
   d519a:	f7ff fd03 	bl	d4ba4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d519e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d51a0:	1d3c      	adds	r4, r7, #4
   d51a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d51a4:	682b      	ldr	r3, [r5, #0]
   d51a6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d51a8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d51aa:	69f6      	ldr	r6, [r6, #28]
   d51ac:	e7c8      	b.n	d5140 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d51ae:	9800      	ldr	r0, [sp, #0]
   d51b0:	f7ff f822 	bl	d41f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d51b4:	4638      	mov	r0, r7
   d51b6:	b015      	add	sp, #84	; 0x54
   d51b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d51bc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d51bc:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d51be:	4a03      	ldr	r2, [pc, #12]	; (d51cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d51c0:	601a      	str	r2, [r3, #0]
   d51c2:	2200      	movs	r2, #0
   d51c4:	605a      	str	r2, [r3, #4]
   d51c6:	4770      	bx	lr
   d51c8:	2003e71c 	.word	0x2003e71c
   d51cc:	000d6384 	.word	0x000d6384

000d51d0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d51d0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d51d2:	4e18      	ldr	r6, [pc, #96]	; (d5234 <pinAvailable+0x64>)
   d51d4:	6831      	ldr	r1, [r6, #0]
   d51d6:	f011 0501 	ands.w	r5, r1, #1
   d51da:	4604      	mov	r4, r0
   d51dc:	d10a      	bne.n	d51f4 <pinAvailable+0x24>
   d51de:	4630      	mov	r0, r6
   d51e0:	f7fe ff5d 	bl	d409e <__cxa_guard_acquire>
   d51e4:	b130      	cbz	r0, d51f4 <pinAvailable+0x24>
   d51e6:	4629      	mov	r1, r5
   d51e8:	4813      	ldr	r0, [pc, #76]	; (d5238 <pinAvailable+0x68>)
   d51ea:	f7ff fa1f 	bl	d462c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d51ee:	4630      	mov	r0, r6
   d51f0:	f7fe ff5a 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d51f4:	4810      	ldr	r0, [pc, #64]	; (d5238 <pinAvailable+0x68>)
   d51f6:	f7ff fa23 	bl	d4640 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d51fa:	b128      	cbz	r0, d5208 <pinAvailable+0x38>
   d51fc:	f1a4 030b 	sub.w	r3, r4, #11
   d5200:	2b02      	cmp	r3, #2
   d5202:	d801      	bhi.n	d5208 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5204:	2000      	movs	r0, #0
   d5206:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5208:	f000 f886 	bl	d5318 <_Z19__fetch_global_Wirev>
   d520c:	f7ff fe3c 	bl	d4e88 <_ZN7TwoWire9isEnabledEv>
   d5210:	b108      	cbz	r0, d5216 <pinAvailable+0x46>
   d5212:	2c01      	cmp	r4, #1
   d5214:	d9f6      	bls.n	d5204 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5216:	f7ff fdd3 	bl	d4dc0 <_Z22__fetch_global_Serial1v>
   d521a:	f7ff fdcd 	bl	d4db8 <_ZN11USARTSerial9isEnabledEv>
   d521e:	b118      	cbz	r0, d5228 <pinAvailable+0x58>
   d5220:	f1a4 0309 	sub.w	r3, r4, #9
   d5224:	2b01      	cmp	r3, #1
   d5226:	d9ed      	bls.n	d5204 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5228:	2c23      	cmp	r4, #35	; 0x23
   d522a:	bf8c      	ite	hi
   d522c:	2000      	movhi	r0, #0
   d522e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5230:	bd70      	pop	{r4, r5, r6, pc}
   d5232:	bf00      	nop
   d5234:	2003e724 	.word	0x2003e724
   d5238:	2003e728 	.word	0x2003e728

000d523c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d523c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d523e:	b538      	push	{r3, r4, r5, lr}
   d5240:	4604      	mov	r4, r0
   d5242:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5244:	d80a      	bhi.n	d525c <pinMode+0x20>
   d5246:	29ff      	cmp	r1, #255	; 0xff
   d5248:	d008      	beq.n	d525c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d524a:	f7ff ffc1 	bl	d51d0 <pinAvailable>
   d524e:	b128      	cbz	r0, d525c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5250:	4629      	mov	r1, r5
   d5252:	4620      	mov	r0, r4
}
   d5254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5258:	f7fe bfee 	b.w	d4238 <HAL_Pin_Mode>
   d525c:	bd38      	pop	{r3, r4, r5, pc}

000d525e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d525e:	b538      	push	{r3, r4, r5, lr}
   d5260:	4604      	mov	r4, r0
   d5262:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5264:	f7fe fff0 	bl	d4248 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5268:	28ff      	cmp	r0, #255	; 0xff
   d526a:	d010      	beq.n	d528e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d526c:	2806      	cmp	r0, #6
   d526e:	d804      	bhi.n	d527a <digitalWrite+0x1c>
   d5270:	234d      	movs	r3, #77	; 0x4d
   d5272:	fa23 f000 	lsr.w	r0, r3, r0
   d5276:	07c3      	lsls	r3, r0, #31
   d5278:	d409      	bmi.n	d528e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d527a:	4620      	mov	r0, r4
   d527c:	f7ff ffa8 	bl	d51d0 <pinAvailable>
   d5280:	b128      	cbz	r0, d528e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5282:	4629      	mov	r1, r5
   d5284:	4620      	mov	r0, r4
}
   d5286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d528a:	f7fe bfe5 	b.w	d4258 <HAL_GPIO_Write>
   d528e:	bd38      	pop	{r3, r4, r5, pc}

000d5290 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5290:	b510      	push	{r4, lr}
   d5292:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5294:	f7fe ffd8 	bl	d4248 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5298:	3804      	subs	r0, #4
   d529a:	b2c0      	uxtb	r0, r0
   d529c:	2801      	cmp	r0, #1
   d529e:	d908      	bls.n	d52b2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d52a0:	4620      	mov	r0, r4
   d52a2:	f7ff ff95 	bl	d51d0 <pinAvailable>
   d52a6:	b120      	cbz	r0, d52b2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d52a8:	4620      	mov	r0, r4
}
   d52aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d52ae:	f7fe bfdb 	b.w	d4268 <HAL_GPIO_Read>
}
   d52b2:	2000      	movs	r0, #0
   d52b4:	bd10      	pop	{r4, pc}

000d52b6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d52b6:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d52b8:	b510      	push	{r4, lr}
   d52ba:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d52bc:	bf9c      	itt	ls
   d52be:	340e      	addls	r4, #14
   d52c0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d52c2:	4620      	mov	r0, r4
   d52c4:	f7ff ff84 	bl	d51d0 <pinAvailable>
   d52c8:	b150      	cbz	r0, d52e0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d52ca:	2103      	movs	r1, #3
   d52cc:	4620      	mov	r0, r4
   d52ce:	f7fe ffab 	bl	d4228 <HAL_Validate_Pin_Function>
   d52d2:	2803      	cmp	r0, #3
   d52d4:	d104      	bne.n	d52e0 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d52d6:	4620      	mov	r0, r4
}
   d52d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d52dc:	f7fe bfcc 	b.w	d4278 <HAL_ADC_Read>
}
   d52e0:	2000      	movs	r0, #0
   d52e2:	bd10      	pop	{r4, pc}

000d52e4 <_Z17acquireWireBufferv>:
   d52e4:	b570      	push	{r4, r5, r6, lr}
   d52e6:	4604      	mov	r4, r0
   d52e8:	2514      	movs	r5, #20
   d52ea:	462a      	mov	r2, r5
   d52ec:	4e09      	ldr	r6, [pc, #36]	; (d5314 <_Z17acquireWireBufferv+0x30>)
   d52ee:	2100      	movs	r1, #0
   d52f0:	f000 febb 	bl	d606a <memset>
   d52f4:	8025      	strh	r5, [r4, #0]
   d52f6:	2520      	movs	r5, #32
   d52f8:	4631      	mov	r1, r6
   d52fa:	60a5      	str	r5, [r4, #8]
   d52fc:	6125      	str	r5, [r4, #16]
   d52fe:	4628      	mov	r0, r5
   d5300:	f000 f840 	bl	d5384 <_ZnajRKSt9nothrow_t>
   d5304:	4631      	mov	r1, r6
   d5306:	6060      	str	r0, [r4, #4]
   d5308:	4628      	mov	r0, r5
   d530a:	f000 f83b 	bl	d5384 <_ZnajRKSt9nothrow_t>
   d530e:	60e0      	str	r0, [r4, #12]
   d5310:	4620      	mov	r0, r4
   d5312:	bd70      	pop	{r4, r5, r6, pc}
   d5314:	000d63b0 	.word	0x000d63b0

000d5318 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5318:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d531a:	4d0e      	ldr	r5, [pc, #56]	; (d5354 <_Z19__fetch_global_Wirev+0x3c>)
   d531c:	6829      	ldr	r1, [r5, #0]
   d531e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5322:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5324:	d113      	bne.n	d534e <_Z19__fetch_global_Wirev+0x36>
   d5326:	4628      	mov	r0, r5
   d5328:	f7fe feb9 	bl	d409e <__cxa_guard_acquire>
   d532c:	b178      	cbz	r0, d534e <_Z19__fetch_global_Wirev+0x36>
   d532e:	a801      	add	r0, sp, #4
   d5330:	f7ff ffd8 	bl	d52e4 <_Z17acquireWireBufferv>
   d5334:	aa01      	add	r2, sp, #4
   d5336:	4621      	mov	r1, r4
   d5338:	4807      	ldr	r0, [pc, #28]	; (d5358 <_Z19__fetch_global_Wirev+0x40>)
   d533a:	f7ff fd93 	bl	d4e64 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d533e:	4628      	mov	r0, r5
   d5340:	f7fe feb2 	bl	d40a8 <__cxa_guard_release>
   d5344:	4a05      	ldr	r2, [pc, #20]	; (d535c <_Z19__fetch_global_Wirev+0x44>)
   d5346:	4906      	ldr	r1, [pc, #24]	; (d5360 <_Z19__fetch_global_Wirev+0x48>)
   d5348:	4803      	ldr	r0, [pc, #12]	; (d5358 <_Z19__fetch_global_Wirev+0x40>)
   d534a:	f000 f80b 	bl	d5364 <__aeabi_atexit>
	return wire;
}
   d534e:	4802      	ldr	r0, [pc, #8]	; (d5358 <_Z19__fetch_global_Wirev+0x40>)
   d5350:	b007      	add	sp, #28
   d5352:	bd30      	pop	{r4, r5, pc}
   d5354:	2003e734 	.word	0x2003e734
   d5358:	2003e738 	.word	0x2003e738
   d535c:	2003e3cc 	.word	0x2003e3cc
   d5360:	000d4e0d 	.word	0x000d4e0d

000d5364 <__aeabi_atexit>:
   d5364:	460b      	mov	r3, r1
   d5366:	4601      	mov	r1, r0
   d5368:	4618      	mov	r0, r3
   d536a:	f000 be65 	b.w	d6038 <__cxa_atexit>
	...

000d5370 <_ZSt15get_new_handlerv>:
   d5370:	4b02      	ldr	r3, [pc, #8]	; (d537c <_ZSt15get_new_handlerv+0xc>)
   d5372:	6818      	ldr	r0, [r3, #0]
   d5374:	f3bf 8f5f 	dmb	sy
   d5378:	4770      	bx	lr
   d537a:	bf00      	nop
   d537c:	2003e74c 	.word	0x2003e74c

000d5380 <_ZdlPvj>:
   d5380:	f7fe be89 	b.w	d4096 <_ZdlPv>

000d5384 <_ZnajRKSt9nothrow_t>:
   d5384:	f000 b800 	b.w	d5388 <_ZnwjRKSt9nothrow_t>

000d5388 <_ZnwjRKSt9nothrow_t>:
   d5388:	b510      	push	{r4, lr}
   d538a:	2800      	cmp	r0, #0
   d538c:	bf14      	ite	ne
   d538e:	4604      	movne	r4, r0
   d5390:	2401      	moveq	r4, #1
   d5392:	4620      	mov	r0, r4
   d5394:	f7ff f8f4 	bl	d4580 <malloc>
   d5398:	b920      	cbnz	r0, d53a4 <_ZnwjRKSt9nothrow_t+0x1c>
   d539a:	f7ff ffe9 	bl	d5370 <_ZSt15get_new_handlerv>
   d539e:	b108      	cbz	r0, d53a4 <_ZnwjRKSt9nothrow_t+0x1c>
   d53a0:	4780      	blx	r0
   d53a2:	e7f6      	b.n	d5392 <_ZnwjRKSt9nothrow_t+0xa>
   d53a4:	bd10      	pop	{r4, pc}
	...

000d53a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d53a8:	4b18      	ldr	r3, [pc, #96]	; (d540c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d53aa:	681a      	ldr	r2, [r3, #0]
   d53ac:	07d1      	lsls	r1, r2, #31
   d53ae:	bf5c      	itt	pl
   d53b0:	2201      	movpl	r2, #1
   d53b2:	601a      	strpl	r2, [r3, #0]
   d53b4:	4b16      	ldr	r3, [pc, #88]	; (d5410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d53b6:	681a      	ldr	r2, [r3, #0]
   d53b8:	07d2      	lsls	r2, r2, #31
   d53ba:	bf5c      	itt	pl
   d53bc:	2201      	movpl	r2, #1
   d53be:	601a      	strpl	r2, [r3, #0]
   d53c0:	4b14      	ldr	r3, [pc, #80]	; (d5414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d53c2:	681a      	ldr	r2, [r3, #0]
   d53c4:	07d0      	lsls	r0, r2, #31
   d53c6:	bf5c      	itt	pl
   d53c8:	2201      	movpl	r2, #1
   d53ca:	601a      	strpl	r2, [r3, #0]
   d53cc:	4b12      	ldr	r3, [pc, #72]	; (d5418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d53ce:	681a      	ldr	r2, [r3, #0]
   d53d0:	07d1      	lsls	r1, r2, #31
   d53d2:	bf5c      	itt	pl
   d53d4:	2201      	movpl	r2, #1
   d53d6:	601a      	strpl	r2, [r3, #0]
   d53d8:	4b10      	ldr	r3, [pc, #64]	; (d541c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d53da:	681a      	ldr	r2, [r3, #0]
   d53dc:	07d2      	lsls	r2, r2, #31
   d53de:	bf5c      	itt	pl
   d53e0:	2201      	movpl	r2, #1
   d53e2:	601a      	strpl	r2, [r3, #0]
   d53e4:	4b0e      	ldr	r3, [pc, #56]	; (d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d53e6:	681a      	ldr	r2, [r3, #0]
   d53e8:	07d0      	lsls	r0, r2, #31
   d53ea:	bf5c      	itt	pl
   d53ec:	2201      	movpl	r2, #1
   d53ee:	601a      	strpl	r2, [r3, #0]
   d53f0:	4b0c      	ldr	r3, [pc, #48]	; (d5424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d53f2:	681a      	ldr	r2, [r3, #0]
   d53f4:	07d1      	lsls	r1, r2, #31
   d53f6:	bf5c      	itt	pl
   d53f8:	2201      	movpl	r2, #1
   d53fa:	601a      	strpl	r2, [r3, #0]
   d53fc:	4b0a      	ldr	r3, [pc, #40]	; (d5428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d53fe:	681a      	ldr	r2, [r3, #0]
   d5400:	07d2      	lsls	r2, r2, #31
   d5402:	bf5c      	itt	pl
   d5404:	2201      	movpl	r2, #1
   d5406:	601a      	strpl	r2, [r3, #0]
   d5408:	4770      	bx	lr
   d540a:	bf00      	nop
   d540c:	2003e76c 	.word	0x2003e76c
   d5410:	2003e768 	.word	0x2003e768
   d5414:	2003e764 	.word	0x2003e764
   d5418:	2003e760 	.word	0x2003e760
   d541c:	2003e75c 	.word	0x2003e75c
   d5420:	2003e758 	.word	0x2003e758
   d5424:	2003e754 	.word	0x2003e754
   d5428:	2003e750 	.word	0x2003e750

000d542c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d542c:	4b24      	ldr	r3, [pc, #144]	; (d54c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d542e:	681a      	ldr	r2, [r3, #0]
   d5430:	07d0      	lsls	r0, r2, #31
   d5432:	bf5c      	itt	pl
   d5434:	2201      	movpl	r2, #1
   d5436:	601a      	strpl	r2, [r3, #0]
   d5438:	4b22      	ldr	r3, [pc, #136]	; (d54c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d543a:	681a      	ldr	r2, [r3, #0]
   d543c:	07d1      	lsls	r1, r2, #31
   d543e:	bf5c      	itt	pl
   d5440:	2201      	movpl	r2, #1
   d5442:	601a      	strpl	r2, [r3, #0]
   d5444:	4b20      	ldr	r3, [pc, #128]	; (d54c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5446:	681a      	ldr	r2, [r3, #0]
   d5448:	07d2      	lsls	r2, r2, #31
   d544a:	bf5c      	itt	pl
   d544c:	2201      	movpl	r2, #1
   d544e:	601a      	strpl	r2, [r3, #0]
   d5450:	4b1e      	ldr	r3, [pc, #120]	; (d54cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5452:	681a      	ldr	r2, [r3, #0]
   d5454:	07d0      	lsls	r0, r2, #31
   d5456:	bf5c      	itt	pl
   d5458:	2201      	movpl	r2, #1
   d545a:	601a      	strpl	r2, [r3, #0]
   d545c:	4b1c      	ldr	r3, [pc, #112]	; (d54d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d545e:	681a      	ldr	r2, [r3, #0]
   d5460:	07d1      	lsls	r1, r2, #31
   d5462:	bf5c      	itt	pl
   d5464:	2201      	movpl	r2, #1
   d5466:	601a      	strpl	r2, [r3, #0]
   d5468:	4b1a      	ldr	r3, [pc, #104]	; (d54d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d546a:	681a      	ldr	r2, [r3, #0]
   d546c:	07d2      	lsls	r2, r2, #31
   d546e:	bf5c      	itt	pl
   d5470:	2201      	movpl	r2, #1
   d5472:	601a      	strpl	r2, [r3, #0]
   d5474:	4b18      	ldr	r3, [pc, #96]	; (d54d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5476:	681a      	ldr	r2, [r3, #0]
   d5478:	07d0      	lsls	r0, r2, #31
   d547a:	bf5c      	itt	pl
   d547c:	2201      	movpl	r2, #1
   d547e:	601a      	strpl	r2, [r3, #0]
   d5480:	4b16      	ldr	r3, [pc, #88]	; (d54dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5482:	681a      	ldr	r2, [r3, #0]
   d5484:	07d1      	lsls	r1, r2, #31
   d5486:	bf5c      	itt	pl
   d5488:	2201      	movpl	r2, #1
   d548a:	601a      	strpl	r2, [r3, #0]
   d548c:	4b14      	ldr	r3, [pc, #80]	; (d54e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d548e:	681a      	ldr	r2, [r3, #0]
   d5490:	07d2      	lsls	r2, r2, #31
   d5492:	bf5c      	itt	pl
   d5494:	2201      	movpl	r2, #1
   d5496:	601a      	strpl	r2, [r3, #0]
   d5498:	4b12      	ldr	r3, [pc, #72]	; (d54e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d549a:	681a      	ldr	r2, [r3, #0]
   d549c:	07d0      	lsls	r0, r2, #31
   d549e:	bf5c      	itt	pl
   d54a0:	2201      	movpl	r2, #1
   d54a2:	601a      	strpl	r2, [r3, #0]
   d54a4:	4b10      	ldr	r3, [pc, #64]	; (d54e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d54a6:	681a      	ldr	r2, [r3, #0]
   d54a8:	07d1      	lsls	r1, r2, #31
   d54aa:	bf5c      	itt	pl
   d54ac:	2201      	movpl	r2, #1
   d54ae:	601a      	strpl	r2, [r3, #0]
   d54b0:	4b0e      	ldr	r3, [pc, #56]	; (d54ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d54b2:	681a      	ldr	r2, [r3, #0]
   d54b4:	07d2      	lsls	r2, r2, #31
   d54b6:	bf5c      	itt	pl
   d54b8:	2201      	movpl	r2, #1
   d54ba:	601a      	strpl	r2, [r3, #0]
   d54bc:	4770      	bx	lr
   d54be:	bf00      	nop
   d54c0:	2003e79c 	.word	0x2003e79c
   d54c4:	2003e798 	.word	0x2003e798
   d54c8:	2003e794 	.word	0x2003e794
   d54cc:	2003e790 	.word	0x2003e790
   d54d0:	2003e78c 	.word	0x2003e78c
   d54d4:	2003e788 	.word	0x2003e788
   d54d8:	2003e784 	.word	0x2003e784
   d54dc:	2003e780 	.word	0x2003e780
   d54e0:	2003e77c 	.word	0x2003e77c
   d54e4:	2003e778 	.word	0x2003e778
   d54e8:	2003e774 	.word	0x2003e774
   d54ec:	2003e770 	.word	0x2003e770

000d54f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d54f0:	4b24      	ldr	r3, [pc, #144]	; (d5584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d54f2:	681a      	ldr	r2, [r3, #0]
   d54f4:	07d0      	lsls	r0, r2, #31
   d54f6:	bf5c      	itt	pl
   d54f8:	2201      	movpl	r2, #1
   d54fa:	601a      	strpl	r2, [r3, #0]
   d54fc:	4b22      	ldr	r3, [pc, #136]	; (d5588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d54fe:	681a      	ldr	r2, [r3, #0]
   d5500:	07d1      	lsls	r1, r2, #31
   d5502:	bf5c      	itt	pl
   d5504:	2201      	movpl	r2, #1
   d5506:	601a      	strpl	r2, [r3, #0]
   d5508:	4b20      	ldr	r3, [pc, #128]	; (d558c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d550a:	681a      	ldr	r2, [r3, #0]
   d550c:	07d2      	lsls	r2, r2, #31
   d550e:	bf5c      	itt	pl
   d5510:	2201      	movpl	r2, #1
   d5512:	601a      	strpl	r2, [r3, #0]
   d5514:	4b1e      	ldr	r3, [pc, #120]	; (d5590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5516:	681a      	ldr	r2, [r3, #0]
   d5518:	07d0      	lsls	r0, r2, #31
   d551a:	bf5c      	itt	pl
   d551c:	2201      	movpl	r2, #1
   d551e:	601a      	strpl	r2, [r3, #0]
   d5520:	4b1c      	ldr	r3, [pc, #112]	; (d5594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5522:	681a      	ldr	r2, [r3, #0]
   d5524:	07d1      	lsls	r1, r2, #31
   d5526:	bf5c      	itt	pl
   d5528:	2201      	movpl	r2, #1
   d552a:	601a      	strpl	r2, [r3, #0]
   d552c:	4b1a      	ldr	r3, [pc, #104]	; (d5598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d552e:	681a      	ldr	r2, [r3, #0]
   d5530:	07d2      	lsls	r2, r2, #31
   d5532:	bf5c      	itt	pl
   d5534:	2201      	movpl	r2, #1
   d5536:	601a      	strpl	r2, [r3, #0]
   d5538:	4b18      	ldr	r3, [pc, #96]	; (d559c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d553a:	681a      	ldr	r2, [r3, #0]
   d553c:	07d0      	lsls	r0, r2, #31
   d553e:	bf5c      	itt	pl
   d5540:	2201      	movpl	r2, #1
   d5542:	601a      	strpl	r2, [r3, #0]
   d5544:	4b16      	ldr	r3, [pc, #88]	; (d55a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5546:	681a      	ldr	r2, [r3, #0]
   d5548:	07d1      	lsls	r1, r2, #31
   d554a:	bf5c      	itt	pl
   d554c:	2201      	movpl	r2, #1
   d554e:	601a      	strpl	r2, [r3, #0]
   d5550:	4b14      	ldr	r3, [pc, #80]	; (d55a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5552:	681a      	ldr	r2, [r3, #0]
   d5554:	07d2      	lsls	r2, r2, #31
   d5556:	bf5c      	itt	pl
   d5558:	2201      	movpl	r2, #1
   d555a:	601a      	strpl	r2, [r3, #0]
   d555c:	4b12      	ldr	r3, [pc, #72]	; (d55a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d555e:	681a      	ldr	r2, [r3, #0]
   d5560:	07d0      	lsls	r0, r2, #31
   d5562:	bf5c      	itt	pl
   d5564:	2201      	movpl	r2, #1
   d5566:	601a      	strpl	r2, [r3, #0]
   d5568:	4b10      	ldr	r3, [pc, #64]	; (d55ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d556a:	681a      	ldr	r2, [r3, #0]
   d556c:	07d1      	lsls	r1, r2, #31
   d556e:	bf5c      	itt	pl
   d5570:	2201      	movpl	r2, #1
   d5572:	601a      	strpl	r2, [r3, #0]
   d5574:	4b0e      	ldr	r3, [pc, #56]	; (d55b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5576:	681a      	ldr	r2, [r3, #0]
   d5578:	07d2      	lsls	r2, r2, #31
   d557a:	bf5c      	itt	pl
   d557c:	2201      	movpl	r2, #1
   d557e:	601a      	strpl	r2, [r3, #0]
   d5580:	4770      	bx	lr
   d5582:	bf00      	nop
   d5584:	2003e7cc 	.word	0x2003e7cc
   d5588:	2003e7c8 	.word	0x2003e7c8
   d558c:	2003e7c4 	.word	0x2003e7c4
   d5590:	2003e7c0 	.word	0x2003e7c0
   d5594:	2003e7bc 	.word	0x2003e7bc
   d5598:	2003e7b8 	.word	0x2003e7b8
   d559c:	2003e7b4 	.word	0x2003e7b4
   d55a0:	2003e7b0 	.word	0x2003e7b0
   d55a4:	2003e7ac 	.word	0x2003e7ac
   d55a8:	2003e7a8 	.word	0x2003e7a8
   d55ac:	2003e7a4 	.word	0x2003e7a4
   d55b0:	2003e7a0 	.word	0x2003e7a0

000d55b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d55b4:	4b18      	ldr	r3, [pc, #96]	; (d5618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d55b6:	681a      	ldr	r2, [r3, #0]
   d55b8:	07d1      	lsls	r1, r2, #31
   d55ba:	bf5c      	itt	pl
   d55bc:	2201      	movpl	r2, #1
   d55be:	601a      	strpl	r2, [r3, #0]
   d55c0:	4b16      	ldr	r3, [pc, #88]	; (d561c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d55c2:	681a      	ldr	r2, [r3, #0]
   d55c4:	07d2      	lsls	r2, r2, #31
   d55c6:	bf5c      	itt	pl
   d55c8:	2201      	movpl	r2, #1
   d55ca:	601a      	strpl	r2, [r3, #0]
   d55cc:	4b14      	ldr	r3, [pc, #80]	; (d5620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d55ce:	681a      	ldr	r2, [r3, #0]
   d55d0:	07d0      	lsls	r0, r2, #31
   d55d2:	bf5c      	itt	pl
   d55d4:	2201      	movpl	r2, #1
   d55d6:	601a      	strpl	r2, [r3, #0]
   d55d8:	4b12      	ldr	r3, [pc, #72]	; (d5624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d55da:	681a      	ldr	r2, [r3, #0]
   d55dc:	07d1      	lsls	r1, r2, #31
   d55de:	bf5c      	itt	pl
   d55e0:	2201      	movpl	r2, #1
   d55e2:	601a      	strpl	r2, [r3, #0]
   d55e4:	4b10      	ldr	r3, [pc, #64]	; (d5628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d55e6:	681a      	ldr	r2, [r3, #0]
   d55e8:	07d2      	lsls	r2, r2, #31
   d55ea:	bf5c      	itt	pl
   d55ec:	2201      	movpl	r2, #1
   d55ee:	601a      	strpl	r2, [r3, #0]
   d55f0:	4b0e      	ldr	r3, [pc, #56]	; (d562c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d55f2:	681a      	ldr	r2, [r3, #0]
   d55f4:	07d0      	lsls	r0, r2, #31
   d55f6:	bf5c      	itt	pl
   d55f8:	2201      	movpl	r2, #1
   d55fa:	601a      	strpl	r2, [r3, #0]
   d55fc:	4b0c      	ldr	r3, [pc, #48]	; (d5630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d55fe:	681a      	ldr	r2, [r3, #0]
   d5600:	07d1      	lsls	r1, r2, #31
   d5602:	bf5c      	itt	pl
   d5604:	2201      	movpl	r2, #1
   d5606:	601a      	strpl	r2, [r3, #0]
   d5608:	4b0a      	ldr	r3, [pc, #40]	; (d5634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d560a:	681a      	ldr	r2, [r3, #0]
   d560c:	07d2      	lsls	r2, r2, #31
   d560e:	bf5c      	itt	pl
   d5610:	2201      	movpl	r2, #1
   d5612:	601a      	strpl	r2, [r3, #0]
   d5614:	4770      	bx	lr
   d5616:	bf00      	nop
   d5618:	2003e7ec 	.word	0x2003e7ec
   d561c:	2003e7e8 	.word	0x2003e7e8
   d5620:	2003e7e4 	.word	0x2003e7e4
   d5624:	2003e7e0 	.word	0x2003e7e0
   d5628:	2003e7dc 	.word	0x2003e7dc
   d562c:	2003e7d8 	.word	0x2003e7d8
   d5630:	2003e7d4 	.word	0x2003e7d4
   d5634:	2003e7d0 	.word	0x2003e7d0

000d5638 <__aeabi_drsub>:
   d5638:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d563c:	e002      	b.n	d5644 <__adddf3>
   d563e:	bf00      	nop

000d5640 <__aeabi_dsub>:
   d5640:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5644 <__adddf3>:
   d5644:	b530      	push	{r4, r5, lr}
   d5646:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d564a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d564e:	ea94 0f05 	teq	r4, r5
   d5652:	bf08      	it	eq
   d5654:	ea90 0f02 	teqeq	r0, r2
   d5658:	bf1f      	itttt	ne
   d565a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d565e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5662:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5666:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d566a:	f000 80e2 	beq.w	d5832 <__adddf3+0x1ee>
   d566e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5672:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5676:	bfb8      	it	lt
   d5678:	426d      	neglt	r5, r5
   d567a:	dd0c      	ble.n	d5696 <__adddf3+0x52>
   d567c:	442c      	add	r4, r5
   d567e:	ea80 0202 	eor.w	r2, r0, r2
   d5682:	ea81 0303 	eor.w	r3, r1, r3
   d5686:	ea82 0000 	eor.w	r0, r2, r0
   d568a:	ea83 0101 	eor.w	r1, r3, r1
   d568e:	ea80 0202 	eor.w	r2, r0, r2
   d5692:	ea81 0303 	eor.w	r3, r1, r3
   d5696:	2d36      	cmp	r5, #54	; 0x36
   d5698:	bf88      	it	hi
   d569a:	bd30      	pophi	{r4, r5, pc}
   d569c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d56a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d56a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d56a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d56ac:	d002      	beq.n	d56b4 <__adddf3+0x70>
   d56ae:	4240      	negs	r0, r0
   d56b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d56b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d56b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d56bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d56c0:	d002      	beq.n	d56c8 <__adddf3+0x84>
   d56c2:	4252      	negs	r2, r2
   d56c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d56c8:	ea94 0f05 	teq	r4, r5
   d56cc:	f000 80a7 	beq.w	d581e <__adddf3+0x1da>
   d56d0:	f1a4 0401 	sub.w	r4, r4, #1
   d56d4:	f1d5 0e20 	rsbs	lr, r5, #32
   d56d8:	db0d      	blt.n	d56f6 <__adddf3+0xb2>
   d56da:	fa02 fc0e 	lsl.w	ip, r2, lr
   d56de:	fa22 f205 	lsr.w	r2, r2, r5
   d56e2:	1880      	adds	r0, r0, r2
   d56e4:	f141 0100 	adc.w	r1, r1, #0
   d56e8:	fa03 f20e 	lsl.w	r2, r3, lr
   d56ec:	1880      	adds	r0, r0, r2
   d56ee:	fa43 f305 	asr.w	r3, r3, r5
   d56f2:	4159      	adcs	r1, r3
   d56f4:	e00e      	b.n	d5714 <__adddf3+0xd0>
   d56f6:	f1a5 0520 	sub.w	r5, r5, #32
   d56fa:	f10e 0e20 	add.w	lr, lr, #32
   d56fe:	2a01      	cmp	r2, #1
   d5700:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5704:	bf28      	it	cs
   d5706:	f04c 0c02 	orrcs.w	ip, ip, #2
   d570a:	fa43 f305 	asr.w	r3, r3, r5
   d570e:	18c0      	adds	r0, r0, r3
   d5710:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5714:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5718:	d507      	bpl.n	d572a <__adddf3+0xe6>
   d571a:	f04f 0e00 	mov.w	lr, #0
   d571e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5722:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5726:	eb6e 0101 	sbc.w	r1, lr, r1
   d572a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d572e:	d31b      	bcc.n	d5768 <__adddf3+0x124>
   d5730:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5734:	d30c      	bcc.n	d5750 <__adddf3+0x10c>
   d5736:	0849      	lsrs	r1, r1, #1
   d5738:	ea5f 0030 	movs.w	r0, r0, rrx
   d573c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5740:	f104 0401 	add.w	r4, r4, #1
   d5744:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5748:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d574c:	f080 809a 	bcs.w	d5884 <__adddf3+0x240>
   d5750:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5754:	bf08      	it	eq
   d5756:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d575a:	f150 0000 	adcs.w	r0, r0, #0
   d575e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5762:	ea41 0105 	orr.w	r1, r1, r5
   d5766:	bd30      	pop	{r4, r5, pc}
   d5768:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d576c:	4140      	adcs	r0, r0
   d576e:	eb41 0101 	adc.w	r1, r1, r1
   d5772:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5776:	f1a4 0401 	sub.w	r4, r4, #1
   d577a:	d1e9      	bne.n	d5750 <__adddf3+0x10c>
   d577c:	f091 0f00 	teq	r1, #0
   d5780:	bf04      	itt	eq
   d5782:	4601      	moveq	r1, r0
   d5784:	2000      	moveq	r0, #0
   d5786:	fab1 f381 	clz	r3, r1
   d578a:	bf08      	it	eq
   d578c:	3320      	addeq	r3, #32
   d578e:	f1a3 030b 	sub.w	r3, r3, #11
   d5792:	f1b3 0220 	subs.w	r2, r3, #32
   d5796:	da0c      	bge.n	d57b2 <__adddf3+0x16e>
   d5798:	320c      	adds	r2, #12
   d579a:	dd08      	ble.n	d57ae <__adddf3+0x16a>
   d579c:	f102 0c14 	add.w	ip, r2, #20
   d57a0:	f1c2 020c 	rsb	r2, r2, #12
   d57a4:	fa01 f00c 	lsl.w	r0, r1, ip
   d57a8:	fa21 f102 	lsr.w	r1, r1, r2
   d57ac:	e00c      	b.n	d57c8 <__adddf3+0x184>
   d57ae:	f102 0214 	add.w	r2, r2, #20
   d57b2:	bfd8      	it	le
   d57b4:	f1c2 0c20 	rsble	ip, r2, #32
   d57b8:	fa01 f102 	lsl.w	r1, r1, r2
   d57bc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d57c0:	bfdc      	itt	le
   d57c2:	ea41 010c 	orrle.w	r1, r1, ip
   d57c6:	4090      	lslle	r0, r2
   d57c8:	1ae4      	subs	r4, r4, r3
   d57ca:	bfa2      	ittt	ge
   d57cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d57d0:	4329      	orrge	r1, r5
   d57d2:	bd30      	popge	{r4, r5, pc}
   d57d4:	ea6f 0404 	mvn.w	r4, r4
   d57d8:	3c1f      	subs	r4, #31
   d57da:	da1c      	bge.n	d5816 <__adddf3+0x1d2>
   d57dc:	340c      	adds	r4, #12
   d57de:	dc0e      	bgt.n	d57fe <__adddf3+0x1ba>
   d57e0:	f104 0414 	add.w	r4, r4, #20
   d57e4:	f1c4 0220 	rsb	r2, r4, #32
   d57e8:	fa20 f004 	lsr.w	r0, r0, r4
   d57ec:	fa01 f302 	lsl.w	r3, r1, r2
   d57f0:	ea40 0003 	orr.w	r0, r0, r3
   d57f4:	fa21 f304 	lsr.w	r3, r1, r4
   d57f8:	ea45 0103 	orr.w	r1, r5, r3
   d57fc:	bd30      	pop	{r4, r5, pc}
   d57fe:	f1c4 040c 	rsb	r4, r4, #12
   d5802:	f1c4 0220 	rsb	r2, r4, #32
   d5806:	fa20 f002 	lsr.w	r0, r0, r2
   d580a:	fa01 f304 	lsl.w	r3, r1, r4
   d580e:	ea40 0003 	orr.w	r0, r0, r3
   d5812:	4629      	mov	r1, r5
   d5814:	bd30      	pop	{r4, r5, pc}
   d5816:	fa21 f004 	lsr.w	r0, r1, r4
   d581a:	4629      	mov	r1, r5
   d581c:	bd30      	pop	{r4, r5, pc}
   d581e:	f094 0f00 	teq	r4, #0
   d5822:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5826:	bf06      	itte	eq
   d5828:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d582c:	3401      	addeq	r4, #1
   d582e:	3d01      	subne	r5, #1
   d5830:	e74e      	b.n	d56d0 <__adddf3+0x8c>
   d5832:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5836:	bf18      	it	ne
   d5838:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d583c:	d029      	beq.n	d5892 <__adddf3+0x24e>
   d583e:	ea94 0f05 	teq	r4, r5
   d5842:	bf08      	it	eq
   d5844:	ea90 0f02 	teqeq	r0, r2
   d5848:	d005      	beq.n	d5856 <__adddf3+0x212>
   d584a:	ea54 0c00 	orrs.w	ip, r4, r0
   d584e:	bf04      	itt	eq
   d5850:	4619      	moveq	r1, r3
   d5852:	4610      	moveq	r0, r2
   d5854:	bd30      	pop	{r4, r5, pc}
   d5856:	ea91 0f03 	teq	r1, r3
   d585a:	bf1e      	ittt	ne
   d585c:	2100      	movne	r1, #0
   d585e:	2000      	movne	r0, #0
   d5860:	bd30      	popne	{r4, r5, pc}
   d5862:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5866:	d105      	bne.n	d5874 <__adddf3+0x230>
   d5868:	0040      	lsls	r0, r0, #1
   d586a:	4149      	adcs	r1, r1
   d586c:	bf28      	it	cs
   d586e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5872:	bd30      	pop	{r4, r5, pc}
   d5874:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5878:	bf3c      	itt	cc
   d587a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d587e:	bd30      	popcc	{r4, r5, pc}
   d5880:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5884:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d588c:	f04f 0000 	mov.w	r0, #0
   d5890:	bd30      	pop	{r4, r5, pc}
   d5892:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5896:	bf1a      	itte	ne
   d5898:	4619      	movne	r1, r3
   d589a:	4610      	movne	r0, r2
   d589c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d58a0:	bf1c      	itt	ne
   d58a2:	460b      	movne	r3, r1
   d58a4:	4602      	movne	r2, r0
   d58a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d58aa:	bf06      	itte	eq
   d58ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d58b0:	ea91 0f03 	teqeq	r1, r3
   d58b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d58b8:	bd30      	pop	{r4, r5, pc}
   d58ba:	bf00      	nop

000d58bc <__aeabi_ui2d>:
   d58bc:	f090 0f00 	teq	r0, #0
   d58c0:	bf04      	itt	eq
   d58c2:	2100      	moveq	r1, #0
   d58c4:	4770      	bxeq	lr
   d58c6:	b530      	push	{r4, r5, lr}
   d58c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d58cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d58d0:	f04f 0500 	mov.w	r5, #0
   d58d4:	f04f 0100 	mov.w	r1, #0
   d58d8:	e750      	b.n	d577c <__adddf3+0x138>
   d58da:	bf00      	nop

000d58dc <__aeabi_i2d>:
   d58dc:	f090 0f00 	teq	r0, #0
   d58e0:	bf04      	itt	eq
   d58e2:	2100      	moveq	r1, #0
   d58e4:	4770      	bxeq	lr
   d58e6:	b530      	push	{r4, r5, lr}
   d58e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d58ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d58f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d58f4:	bf48      	it	mi
   d58f6:	4240      	negmi	r0, r0
   d58f8:	f04f 0100 	mov.w	r1, #0
   d58fc:	e73e      	b.n	d577c <__adddf3+0x138>
   d58fe:	bf00      	nop

000d5900 <__aeabi_f2d>:
   d5900:	0042      	lsls	r2, r0, #1
   d5902:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5906:	ea4f 0131 	mov.w	r1, r1, rrx
   d590a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d590e:	bf1f      	itttt	ne
   d5910:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5914:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5918:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d591c:	4770      	bxne	lr
   d591e:	f092 0f00 	teq	r2, #0
   d5922:	bf14      	ite	ne
   d5924:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5928:	4770      	bxeq	lr
   d592a:	b530      	push	{r4, r5, lr}
   d592c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5930:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5934:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5938:	e720      	b.n	d577c <__adddf3+0x138>
   d593a:	bf00      	nop

000d593c <__aeabi_ul2d>:
   d593c:	ea50 0201 	orrs.w	r2, r0, r1
   d5940:	bf08      	it	eq
   d5942:	4770      	bxeq	lr
   d5944:	b530      	push	{r4, r5, lr}
   d5946:	f04f 0500 	mov.w	r5, #0
   d594a:	e00a      	b.n	d5962 <__aeabi_l2d+0x16>

000d594c <__aeabi_l2d>:
   d594c:	ea50 0201 	orrs.w	r2, r0, r1
   d5950:	bf08      	it	eq
   d5952:	4770      	bxeq	lr
   d5954:	b530      	push	{r4, r5, lr}
   d5956:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d595a:	d502      	bpl.n	d5962 <__aeabi_l2d+0x16>
   d595c:	4240      	negs	r0, r0
   d595e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5962:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5966:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d596a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d596e:	f43f aedc 	beq.w	d572a <__adddf3+0xe6>
   d5972:	f04f 0203 	mov.w	r2, #3
   d5976:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d597a:	bf18      	it	ne
   d597c:	3203      	addne	r2, #3
   d597e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5982:	bf18      	it	ne
   d5984:	3203      	addne	r2, #3
   d5986:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d598a:	f1c2 0320 	rsb	r3, r2, #32
   d598e:	fa00 fc03 	lsl.w	ip, r0, r3
   d5992:	fa20 f002 	lsr.w	r0, r0, r2
   d5996:	fa01 fe03 	lsl.w	lr, r1, r3
   d599a:	ea40 000e 	orr.w	r0, r0, lr
   d599e:	fa21 f102 	lsr.w	r1, r1, r2
   d59a2:	4414      	add	r4, r2
   d59a4:	e6c1      	b.n	d572a <__adddf3+0xe6>
   d59a6:	bf00      	nop

000d59a8 <__aeabi_dmul>:
   d59a8:	b570      	push	{r4, r5, r6, lr}
   d59aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d59ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d59b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d59b6:	bf1d      	ittte	ne
   d59b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d59bc:	ea94 0f0c 	teqne	r4, ip
   d59c0:	ea95 0f0c 	teqne	r5, ip
   d59c4:	f000 f8de 	bleq	d5b84 <__aeabi_dmul+0x1dc>
   d59c8:	442c      	add	r4, r5
   d59ca:	ea81 0603 	eor.w	r6, r1, r3
   d59ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d59d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d59d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d59da:	bf18      	it	ne
   d59dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d59e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d59e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d59e8:	d038      	beq.n	d5a5c <__aeabi_dmul+0xb4>
   d59ea:	fba0 ce02 	umull	ip, lr, r0, r2
   d59ee:	f04f 0500 	mov.w	r5, #0
   d59f2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d59f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d59fa:	fbe0 e503 	umlal	lr, r5, r0, r3
   d59fe:	f04f 0600 	mov.w	r6, #0
   d5a02:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5a06:	f09c 0f00 	teq	ip, #0
   d5a0a:	bf18      	it	ne
   d5a0c:	f04e 0e01 	orrne.w	lr, lr, #1
   d5a10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5a14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5a18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5a1c:	d204      	bcs.n	d5a28 <__aeabi_dmul+0x80>
   d5a1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5a22:	416d      	adcs	r5, r5
   d5a24:	eb46 0606 	adc.w	r6, r6, r6
   d5a28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5a2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5a30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5a34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5a38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5a3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5a40:	bf88      	it	hi
   d5a42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5a46:	d81e      	bhi.n	d5a86 <__aeabi_dmul+0xde>
   d5a48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5a4c:	bf08      	it	eq
   d5a4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5a52:	f150 0000 	adcs.w	r0, r0, #0
   d5a56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5a5a:	bd70      	pop	{r4, r5, r6, pc}
   d5a5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5a60:	ea46 0101 	orr.w	r1, r6, r1
   d5a64:	ea40 0002 	orr.w	r0, r0, r2
   d5a68:	ea81 0103 	eor.w	r1, r1, r3
   d5a6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5a70:	bfc2      	ittt	gt
   d5a72:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5a76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5a7a:	bd70      	popgt	{r4, r5, r6, pc}
   d5a7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5a80:	f04f 0e00 	mov.w	lr, #0
   d5a84:	3c01      	subs	r4, #1
   d5a86:	f300 80ab 	bgt.w	d5be0 <__aeabi_dmul+0x238>
   d5a8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5a8e:	bfde      	ittt	le
   d5a90:	2000      	movle	r0, #0
   d5a92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5a96:	bd70      	pople	{r4, r5, r6, pc}
   d5a98:	f1c4 0400 	rsb	r4, r4, #0
   d5a9c:	3c20      	subs	r4, #32
   d5a9e:	da35      	bge.n	d5b0c <__aeabi_dmul+0x164>
   d5aa0:	340c      	adds	r4, #12
   d5aa2:	dc1b      	bgt.n	d5adc <__aeabi_dmul+0x134>
   d5aa4:	f104 0414 	add.w	r4, r4, #20
   d5aa8:	f1c4 0520 	rsb	r5, r4, #32
   d5aac:	fa00 f305 	lsl.w	r3, r0, r5
   d5ab0:	fa20 f004 	lsr.w	r0, r0, r4
   d5ab4:	fa01 f205 	lsl.w	r2, r1, r5
   d5ab8:	ea40 0002 	orr.w	r0, r0, r2
   d5abc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5ac0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5ac4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5ac8:	fa21 f604 	lsr.w	r6, r1, r4
   d5acc:	eb42 0106 	adc.w	r1, r2, r6
   d5ad0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5ad4:	bf08      	it	eq
   d5ad6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5ada:	bd70      	pop	{r4, r5, r6, pc}
   d5adc:	f1c4 040c 	rsb	r4, r4, #12
   d5ae0:	f1c4 0520 	rsb	r5, r4, #32
   d5ae4:	fa00 f304 	lsl.w	r3, r0, r4
   d5ae8:	fa20 f005 	lsr.w	r0, r0, r5
   d5aec:	fa01 f204 	lsl.w	r2, r1, r4
   d5af0:	ea40 0002 	orr.w	r0, r0, r2
   d5af4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5af8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5afc:	f141 0100 	adc.w	r1, r1, #0
   d5b00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5b04:	bf08      	it	eq
   d5b06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5b0a:	bd70      	pop	{r4, r5, r6, pc}
   d5b0c:	f1c4 0520 	rsb	r5, r4, #32
   d5b10:	fa00 f205 	lsl.w	r2, r0, r5
   d5b14:	ea4e 0e02 	orr.w	lr, lr, r2
   d5b18:	fa20 f304 	lsr.w	r3, r0, r4
   d5b1c:	fa01 f205 	lsl.w	r2, r1, r5
   d5b20:	ea43 0302 	orr.w	r3, r3, r2
   d5b24:	fa21 f004 	lsr.w	r0, r1, r4
   d5b28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5b2c:	fa21 f204 	lsr.w	r2, r1, r4
   d5b30:	ea20 0002 	bic.w	r0, r0, r2
   d5b34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5b3c:	bf08      	it	eq
   d5b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5b42:	bd70      	pop	{r4, r5, r6, pc}
   d5b44:	f094 0f00 	teq	r4, #0
   d5b48:	d10f      	bne.n	d5b6a <__aeabi_dmul+0x1c2>
   d5b4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5b4e:	0040      	lsls	r0, r0, #1
   d5b50:	eb41 0101 	adc.w	r1, r1, r1
   d5b54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5b58:	bf08      	it	eq
   d5b5a:	3c01      	subeq	r4, #1
   d5b5c:	d0f7      	beq.n	d5b4e <__aeabi_dmul+0x1a6>
   d5b5e:	ea41 0106 	orr.w	r1, r1, r6
   d5b62:	f095 0f00 	teq	r5, #0
   d5b66:	bf18      	it	ne
   d5b68:	4770      	bxne	lr
   d5b6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5b6e:	0052      	lsls	r2, r2, #1
   d5b70:	eb43 0303 	adc.w	r3, r3, r3
   d5b74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5b78:	bf08      	it	eq
   d5b7a:	3d01      	subeq	r5, #1
   d5b7c:	d0f7      	beq.n	d5b6e <__aeabi_dmul+0x1c6>
   d5b7e:	ea43 0306 	orr.w	r3, r3, r6
   d5b82:	4770      	bx	lr
   d5b84:	ea94 0f0c 	teq	r4, ip
   d5b88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5b8c:	bf18      	it	ne
   d5b8e:	ea95 0f0c 	teqne	r5, ip
   d5b92:	d00c      	beq.n	d5bae <__aeabi_dmul+0x206>
   d5b94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5b98:	bf18      	it	ne
   d5b9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5b9e:	d1d1      	bne.n	d5b44 <__aeabi_dmul+0x19c>
   d5ba0:	ea81 0103 	eor.w	r1, r1, r3
   d5ba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ba8:	f04f 0000 	mov.w	r0, #0
   d5bac:	bd70      	pop	{r4, r5, r6, pc}
   d5bae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5bb2:	bf06      	itte	eq
   d5bb4:	4610      	moveq	r0, r2
   d5bb6:	4619      	moveq	r1, r3
   d5bb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5bbc:	d019      	beq.n	d5bf2 <__aeabi_dmul+0x24a>
   d5bbe:	ea94 0f0c 	teq	r4, ip
   d5bc2:	d102      	bne.n	d5bca <__aeabi_dmul+0x222>
   d5bc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5bc8:	d113      	bne.n	d5bf2 <__aeabi_dmul+0x24a>
   d5bca:	ea95 0f0c 	teq	r5, ip
   d5bce:	d105      	bne.n	d5bdc <__aeabi_dmul+0x234>
   d5bd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5bd4:	bf1c      	itt	ne
   d5bd6:	4610      	movne	r0, r2
   d5bd8:	4619      	movne	r1, r3
   d5bda:	d10a      	bne.n	d5bf2 <__aeabi_dmul+0x24a>
   d5bdc:	ea81 0103 	eor.w	r1, r1, r3
   d5be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5be4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5be8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5bec:	f04f 0000 	mov.w	r0, #0
   d5bf0:	bd70      	pop	{r4, r5, r6, pc}
   d5bf2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5bf6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5bfa:	bd70      	pop	{r4, r5, r6, pc}

000d5bfc <__aeabi_ddiv>:
   d5bfc:	b570      	push	{r4, r5, r6, lr}
   d5bfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5c02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5c06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5c0a:	bf1d      	ittte	ne
   d5c0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5c10:	ea94 0f0c 	teqne	r4, ip
   d5c14:	ea95 0f0c 	teqne	r5, ip
   d5c18:	f000 f8a7 	bleq	d5d6a <__aeabi_ddiv+0x16e>
   d5c1c:	eba4 0405 	sub.w	r4, r4, r5
   d5c20:	ea81 0e03 	eor.w	lr, r1, r3
   d5c24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5c28:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5c2c:	f000 8088 	beq.w	d5d40 <__aeabi_ddiv+0x144>
   d5c30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5c34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5c38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5c3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5c40:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5c44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5c48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5c4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5c50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5c54:	429d      	cmp	r5, r3
   d5c56:	bf08      	it	eq
   d5c58:	4296      	cmpeq	r6, r2
   d5c5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5c5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5c62:	d202      	bcs.n	d5c6a <__aeabi_ddiv+0x6e>
   d5c64:	085b      	lsrs	r3, r3, #1
   d5c66:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c6a:	1ab6      	subs	r6, r6, r2
   d5c6c:	eb65 0503 	sbc.w	r5, r5, r3
   d5c70:	085b      	lsrs	r3, r3, #1
   d5c72:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5c7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5c7e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5c82:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5c86:	bf22      	ittt	cs
   d5c88:	1ab6      	subcs	r6, r6, r2
   d5c8a:	4675      	movcs	r5, lr
   d5c8c:	ea40 000c 	orrcs.w	r0, r0, ip
   d5c90:	085b      	lsrs	r3, r3, #1
   d5c92:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c96:	ebb6 0e02 	subs.w	lr, r6, r2
   d5c9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5c9e:	bf22      	ittt	cs
   d5ca0:	1ab6      	subcs	r6, r6, r2
   d5ca2:	4675      	movcs	r5, lr
   d5ca4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5ca8:	085b      	lsrs	r3, r3, #1
   d5caa:	ea4f 0232 	mov.w	r2, r2, rrx
   d5cae:	ebb6 0e02 	subs.w	lr, r6, r2
   d5cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5cb6:	bf22      	ittt	cs
   d5cb8:	1ab6      	subcs	r6, r6, r2
   d5cba:	4675      	movcs	r5, lr
   d5cbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5cc0:	085b      	lsrs	r3, r3, #1
   d5cc2:	ea4f 0232 	mov.w	r2, r2, rrx
   d5cc6:	ebb6 0e02 	subs.w	lr, r6, r2
   d5cca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5cce:	bf22      	ittt	cs
   d5cd0:	1ab6      	subcs	r6, r6, r2
   d5cd2:	4675      	movcs	r5, lr
   d5cd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5cd8:	ea55 0e06 	orrs.w	lr, r5, r6
   d5cdc:	d018      	beq.n	d5d10 <__aeabi_ddiv+0x114>
   d5cde:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5ce2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5ce6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5cea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5cee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5cf2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5cf6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5cfa:	d1c0      	bne.n	d5c7e <__aeabi_ddiv+0x82>
   d5cfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d00:	d10b      	bne.n	d5d1a <__aeabi_ddiv+0x11e>
   d5d02:	ea41 0100 	orr.w	r1, r1, r0
   d5d06:	f04f 0000 	mov.w	r0, #0
   d5d0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5d0e:	e7b6      	b.n	d5c7e <__aeabi_ddiv+0x82>
   d5d10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d14:	bf04      	itt	eq
   d5d16:	4301      	orreq	r1, r0
   d5d18:	2000      	moveq	r0, #0
   d5d1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5d1e:	bf88      	it	hi
   d5d20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5d24:	f63f aeaf 	bhi.w	d5a86 <__aeabi_dmul+0xde>
   d5d28:	ebb5 0c03 	subs.w	ip, r5, r3
   d5d2c:	bf04      	itt	eq
   d5d2e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5d32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5d36:	f150 0000 	adcs.w	r0, r0, #0
   d5d3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5d3e:	bd70      	pop	{r4, r5, r6, pc}
   d5d40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5d44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5d48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5d4c:	bfc2      	ittt	gt
   d5d4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5d52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5d56:	bd70      	popgt	{r4, r5, r6, pc}
   d5d58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5d5c:	f04f 0e00 	mov.w	lr, #0
   d5d60:	3c01      	subs	r4, #1
   d5d62:	e690      	b.n	d5a86 <__aeabi_dmul+0xde>
   d5d64:	ea45 0e06 	orr.w	lr, r5, r6
   d5d68:	e68d      	b.n	d5a86 <__aeabi_dmul+0xde>
   d5d6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5d6e:	ea94 0f0c 	teq	r4, ip
   d5d72:	bf08      	it	eq
   d5d74:	ea95 0f0c 	teqeq	r5, ip
   d5d78:	f43f af3b 	beq.w	d5bf2 <__aeabi_dmul+0x24a>
   d5d7c:	ea94 0f0c 	teq	r4, ip
   d5d80:	d10a      	bne.n	d5d98 <__aeabi_ddiv+0x19c>
   d5d82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5d86:	f47f af34 	bne.w	d5bf2 <__aeabi_dmul+0x24a>
   d5d8a:	ea95 0f0c 	teq	r5, ip
   d5d8e:	f47f af25 	bne.w	d5bdc <__aeabi_dmul+0x234>
   d5d92:	4610      	mov	r0, r2
   d5d94:	4619      	mov	r1, r3
   d5d96:	e72c      	b.n	d5bf2 <__aeabi_dmul+0x24a>
   d5d98:	ea95 0f0c 	teq	r5, ip
   d5d9c:	d106      	bne.n	d5dac <__aeabi_ddiv+0x1b0>
   d5d9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5da2:	f43f aefd 	beq.w	d5ba0 <__aeabi_dmul+0x1f8>
   d5da6:	4610      	mov	r0, r2
   d5da8:	4619      	mov	r1, r3
   d5daa:	e722      	b.n	d5bf2 <__aeabi_dmul+0x24a>
   d5dac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5db0:	bf18      	it	ne
   d5db2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5db6:	f47f aec5 	bne.w	d5b44 <__aeabi_dmul+0x19c>
   d5dba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5dbe:	f47f af0d 	bne.w	d5bdc <__aeabi_dmul+0x234>
   d5dc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5dc6:	f47f aeeb 	bne.w	d5ba0 <__aeabi_dmul+0x1f8>
   d5dca:	e712      	b.n	d5bf2 <__aeabi_dmul+0x24a>

000d5dcc <__gedf2>:
   d5dcc:	f04f 3cff 	mov.w	ip, #4294967295
   d5dd0:	e006      	b.n	d5de0 <__cmpdf2+0x4>
   d5dd2:	bf00      	nop

000d5dd4 <__ledf2>:
   d5dd4:	f04f 0c01 	mov.w	ip, #1
   d5dd8:	e002      	b.n	d5de0 <__cmpdf2+0x4>
   d5dda:	bf00      	nop

000d5ddc <__cmpdf2>:
   d5ddc:	f04f 0c01 	mov.w	ip, #1
   d5de0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5de4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5de8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5dec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5df0:	bf18      	it	ne
   d5df2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5df6:	d01b      	beq.n	d5e30 <__cmpdf2+0x54>
   d5df8:	b001      	add	sp, #4
   d5dfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5dfe:	bf0c      	ite	eq
   d5e00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5e04:	ea91 0f03 	teqne	r1, r3
   d5e08:	bf02      	ittt	eq
   d5e0a:	ea90 0f02 	teqeq	r0, r2
   d5e0e:	2000      	moveq	r0, #0
   d5e10:	4770      	bxeq	lr
   d5e12:	f110 0f00 	cmn.w	r0, #0
   d5e16:	ea91 0f03 	teq	r1, r3
   d5e1a:	bf58      	it	pl
   d5e1c:	4299      	cmppl	r1, r3
   d5e1e:	bf08      	it	eq
   d5e20:	4290      	cmpeq	r0, r2
   d5e22:	bf2c      	ite	cs
   d5e24:	17d8      	asrcs	r0, r3, #31
   d5e26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5e2a:	f040 0001 	orr.w	r0, r0, #1
   d5e2e:	4770      	bx	lr
   d5e30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5e34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5e38:	d102      	bne.n	d5e40 <__cmpdf2+0x64>
   d5e3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5e3e:	d107      	bne.n	d5e50 <__cmpdf2+0x74>
   d5e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5e48:	d1d6      	bne.n	d5df8 <__cmpdf2+0x1c>
   d5e4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5e4e:	d0d3      	beq.n	d5df8 <__cmpdf2+0x1c>
   d5e50:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5e54:	4770      	bx	lr
   d5e56:	bf00      	nop

000d5e58 <__aeabi_cdrcmple>:
   d5e58:	4684      	mov	ip, r0
   d5e5a:	4610      	mov	r0, r2
   d5e5c:	4662      	mov	r2, ip
   d5e5e:	468c      	mov	ip, r1
   d5e60:	4619      	mov	r1, r3
   d5e62:	4663      	mov	r3, ip
   d5e64:	e000      	b.n	d5e68 <__aeabi_cdcmpeq>
   d5e66:	bf00      	nop

000d5e68 <__aeabi_cdcmpeq>:
   d5e68:	b501      	push	{r0, lr}
   d5e6a:	f7ff ffb7 	bl	d5ddc <__cmpdf2>
   d5e6e:	2800      	cmp	r0, #0
   d5e70:	bf48      	it	mi
   d5e72:	f110 0f00 	cmnmi.w	r0, #0
   d5e76:	bd01      	pop	{r0, pc}

000d5e78 <__aeabi_dcmpeq>:
   d5e78:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5e7c:	f7ff fff4 	bl	d5e68 <__aeabi_cdcmpeq>
   d5e80:	bf0c      	ite	eq
   d5e82:	2001      	moveq	r0, #1
   d5e84:	2000      	movne	r0, #0
   d5e86:	f85d fb08 	ldr.w	pc, [sp], #8
   d5e8a:	bf00      	nop

000d5e8c <__aeabi_dcmplt>:
   d5e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5e90:	f7ff ffea 	bl	d5e68 <__aeabi_cdcmpeq>
   d5e94:	bf34      	ite	cc
   d5e96:	2001      	movcc	r0, #1
   d5e98:	2000      	movcs	r0, #0
   d5e9a:	f85d fb08 	ldr.w	pc, [sp], #8
   d5e9e:	bf00      	nop

000d5ea0 <__aeabi_dcmple>:
   d5ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5ea4:	f7ff ffe0 	bl	d5e68 <__aeabi_cdcmpeq>
   d5ea8:	bf94      	ite	ls
   d5eaa:	2001      	movls	r0, #1
   d5eac:	2000      	movhi	r0, #0
   d5eae:	f85d fb08 	ldr.w	pc, [sp], #8
   d5eb2:	bf00      	nop

000d5eb4 <__aeabi_dcmpge>:
   d5eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5eb8:	f7ff ffce 	bl	d5e58 <__aeabi_cdrcmple>
   d5ebc:	bf94      	ite	ls
   d5ebe:	2001      	movls	r0, #1
   d5ec0:	2000      	movhi	r0, #0
   d5ec2:	f85d fb08 	ldr.w	pc, [sp], #8
   d5ec6:	bf00      	nop

000d5ec8 <__aeabi_dcmpgt>:
   d5ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5ecc:	f7ff ffc4 	bl	d5e58 <__aeabi_cdrcmple>
   d5ed0:	bf34      	ite	cc
   d5ed2:	2001      	movcc	r0, #1
   d5ed4:	2000      	movcs	r0, #0
   d5ed6:	f85d fb08 	ldr.w	pc, [sp], #8
   d5eda:	bf00      	nop

000d5edc <__aeabi_dcmpun>:
   d5edc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5ee0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5ee4:	d102      	bne.n	d5eec <__aeabi_dcmpun+0x10>
   d5ee6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5eea:	d10a      	bne.n	d5f02 <__aeabi_dcmpun+0x26>
   d5eec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5ef0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5ef4:	d102      	bne.n	d5efc <__aeabi_dcmpun+0x20>
   d5ef6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5efa:	d102      	bne.n	d5f02 <__aeabi_dcmpun+0x26>
   d5efc:	f04f 0000 	mov.w	r0, #0
   d5f00:	4770      	bx	lr
   d5f02:	f04f 0001 	mov.w	r0, #1
   d5f06:	4770      	bx	lr

000d5f08 <__aeabi_d2iz>:
   d5f08:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5f0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5f10:	d215      	bcs.n	d5f3e <__aeabi_d2iz+0x36>
   d5f12:	d511      	bpl.n	d5f38 <__aeabi_d2iz+0x30>
   d5f14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5f18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5f1c:	d912      	bls.n	d5f44 <__aeabi_d2iz+0x3c>
   d5f1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5f26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5f2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5f2e:	fa23 f002 	lsr.w	r0, r3, r2
   d5f32:	bf18      	it	ne
   d5f34:	4240      	negne	r0, r0
   d5f36:	4770      	bx	lr
   d5f38:	f04f 0000 	mov.w	r0, #0
   d5f3c:	4770      	bx	lr
   d5f3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5f42:	d105      	bne.n	d5f50 <__aeabi_d2iz+0x48>
   d5f44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5f48:	bf08      	it	eq
   d5f4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5f4e:	4770      	bx	lr
   d5f50:	f04f 0000 	mov.w	r0, #0
   d5f54:	4770      	bx	lr
   d5f56:	bf00      	nop

000d5f58 <__aeabi_d2uiz>:
   d5f58:	004a      	lsls	r2, r1, #1
   d5f5a:	d211      	bcs.n	d5f80 <__aeabi_d2uiz+0x28>
   d5f5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5f60:	d211      	bcs.n	d5f86 <__aeabi_d2uiz+0x2e>
   d5f62:	d50d      	bpl.n	d5f80 <__aeabi_d2uiz+0x28>
   d5f64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5f68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5f6c:	d40e      	bmi.n	d5f8c <__aeabi_d2uiz+0x34>
   d5f6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5f76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5f7a:	fa23 f002 	lsr.w	r0, r3, r2
   d5f7e:	4770      	bx	lr
   d5f80:	f04f 0000 	mov.w	r0, #0
   d5f84:	4770      	bx	lr
   d5f86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5f8a:	d102      	bne.n	d5f92 <__aeabi_d2uiz+0x3a>
   d5f8c:	f04f 30ff 	mov.w	r0, #4294967295
   d5f90:	4770      	bx	lr
   d5f92:	f04f 0000 	mov.w	r0, #0
   d5f96:	4770      	bx	lr

000d5f98 <__aeabi_d2f>:
   d5f98:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5f9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d5fa0:	bf24      	itt	cs
   d5fa2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d5fa6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d5faa:	d90d      	bls.n	d5fc8 <__aeabi_d2f+0x30>
   d5fac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d5fb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d5fb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d5fb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d5fbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d5fc0:	bf08      	it	eq
   d5fc2:	f020 0001 	biceq.w	r0, r0, #1
   d5fc6:	4770      	bx	lr
   d5fc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d5fcc:	d121      	bne.n	d6012 <__aeabi_d2f+0x7a>
   d5fce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d5fd2:	bfbc      	itt	lt
   d5fd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d5fd8:	4770      	bxlt	lr
   d5fda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5fde:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d5fe2:	f1c2 0218 	rsb	r2, r2, #24
   d5fe6:	f1c2 0c20 	rsb	ip, r2, #32
   d5fea:	fa10 f30c 	lsls.w	r3, r0, ip
   d5fee:	fa20 f002 	lsr.w	r0, r0, r2
   d5ff2:	bf18      	it	ne
   d5ff4:	f040 0001 	orrne.w	r0, r0, #1
   d5ff8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5ffc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6000:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6004:	ea40 000c 	orr.w	r0, r0, ip
   d6008:	fa23 f302 	lsr.w	r3, r3, r2
   d600c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6010:	e7cc      	b.n	d5fac <__aeabi_d2f+0x14>
   d6012:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6016:	d107      	bne.n	d6028 <__aeabi_d2f+0x90>
   d6018:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d601c:	bf1e      	ittt	ne
   d601e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6022:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6026:	4770      	bxne	lr
   d6028:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d602c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6030:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6034:	4770      	bx	lr
   d6036:	bf00      	nop

000d6038 <__cxa_atexit>:
   d6038:	b510      	push	{r4, lr}
   d603a:	4c05      	ldr	r4, [pc, #20]	; (d6050 <__cxa_atexit+0x18>)
   d603c:	4613      	mov	r3, r2
   d603e:	b12c      	cbz	r4, d604c <__cxa_atexit+0x14>
   d6040:	460a      	mov	r2, r1
   d6042:	4601      	mov	r1, r0
   d6044:	2002      	movs	r0, #2
   d6046:	f3af 8000 	nop.w
   d604a:	bd10      	pop	{r4, pc}
   d604c:	4620      	mov	r0, r4
   d604e:	bd10      	pop	{r4, pc}
   d6050:	00000000 	.word	0x00000000

000d6054 <memcpy>:
   d6054:	b510      	push	{r4, lr}
   d6056:	1e43      	subs	r3, r0, #1
   d6058:	440a      	add	r2, r1
   d605a:	4291      	cmp	r1, r2
   d605c:	d004      	beq.n	d6068 <memcpy+0x14>
   d605e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6062:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6066:	e7f8      	b.n	d605a <memcpy+0x6>
   d6068:	bd10      	pop	{r4, pc}

000d606a <memset>:
   d606a:	4402      	add	r2, r0
   d606c:	4603      	mov	r3, r0
   d606e:	4293      	cmp	r3, r2
   d6070:	d002      	beq.n	d6078 <memset+0xe>
   d6072:	f803 1b01 	strb.w	r1, [r3], #1
   d6076:	e7fa      	b.n	d606e <memset+0x4>
   d6078:	4770      	bx	lr
	...

000d607c <srand>:
   d607c:	b538      	push	{r3, r4, r5, lr}
   d607e:	4b12      	ldr	r3, [pc, #72]	; (d60c8 <srand+0x4c>)
   d6080:	681c      	ldr	r4, [r3, #0]
   d6082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6084:	4605      	mov	r5, r0
   d6086:	b9d3      	cbnz	r3, d60be <srand+0x42>
   d6088:	2018      	movs	r0, #24
   d608a:	f7fe fa79 	bl	d4580 <malloc>
   d608e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6092:	63a0      	str	r0, [r4, #56]	; 0x38
   d6094:	8003      	strh	r3, [r0, #0]
   d6096:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d609a:	8043      	strh	r3, [r0, #2]
   d609c:	f241 2334 	movw	r3, #4660	; 0x1234
   d60a0:	8083      	strh	r3, [r0, #4]
   d60a2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d60a6:	80c3      	strh	r3, [r0, #6]
   d60a8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d60ac:	8103      	strh	r3, [r0, #8]
   d60ae:	2305      	movs	r3, #5
   d60b0:	8143      	strh	r3, [r0, #10]
   d60b2:	230b      	movs	r3, #11
   d60b4:	8183      	strh	r3, [r0, #12]
   d60b6:	2201      	movs	r2, #1
   d60b8:	2300      	movs	r3, #0
   d60ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d60be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d60c0:	2200      	movs	r2, #0
   d60c2:	611d      	str	r5, [r3, #16]
   d60c4:	615a      	str	r2, [r3, #20]
   d60c6:	bd38      	pop	{r3, r4, r5, pc}
   d60c8:	2003e3c8 	.word	0x2003e3c8

000d60cc <strlen>:
   d60cc:	4603      	mov	r3, r0
   d60ce:	f813 2b01 	ldrb.w	r2, [r3], #1
   d60d2:	2a00      	cmp	r2, #0
   d60d4:	d1fb      	bne.n	d60ce <strlen+0x2>
   d60d6:	1a18      	subs	r0, r3, r0
   d60d8:	3801      	subs	r0, #1
   d60da:	4770      	bx	lr

000d60dc <dynalib_user>:
   d60dc:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d60ec:	0000 0000 6573 736e 726f 765f 6c6f 2074     ....sensor_volt 
   d60fc:	203d 3025 322e 2066 000a 5352 725f 7461     = %0.2f ..RS_rat
   d610c:	6f69 3d20 2520 2e30 6632 0a20 7200 2f73     io = %0.2f ..rs/
   d611c:	3052 3d20 2520 2e30 6632 0a20 0000 0000     R0 = %0.2f .....

000d612c <_ZTVN5spark13EthernetClassE>:
	...
   d6134:	460f 000d 4605 000d 45fb 000d 45f1 000d     .F...F...E...E..
   d6144:	45e5 000d 45d9 000d 45cd 000d 45c5 000d     .E...E...E...E..
   d6154:	45bb 000d 45b1 000d 50f1 000d 616e 006e     .E...E...P..nan.
   d6164:	766f 0066 002e 6e69 0066 6162 6475 5300     ovf...inf.baud.S
   d6174:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d6184:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d6194:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d61a4:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d61b4:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d61c4:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d61d4:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d61e4:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d61f4:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d6204:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   d6214:	000a 6e6c 6600 006e 6f63 6564 6400 7465     ..ln.fn.code.det
   d6224:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d6234:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d6244:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d6254:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d6264:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d6274:	0065 0000                                   e...

000d6278 <_ZTV9IPAddress>:
	...
   d6280:	4b25 000d 4b15 000d 4b17 000d               %K...K...K..

000d628c <_ZTV9USBSerial>:
	...
   d6294:	4bfd 000d 4c4d 000d 4c5b 000d 46d1 000d     .K..ML..[L...F..
   d62a4:	4c39 000d 4bff 000d 4c15 000d 4c47 000d     9L...K...L..GL..
   d62b4:	4c2b 000d 4bf9 000d                         +L...K..

000d62bc <_ZTV11USARTSerial>:
	...
   d62c4:	4d09 000d 4d59 000d 4d67 000d 46d1 000d     .M..YM..gM...F..
   d62d4:	4d1d 000d 4d3f 000d 4d2b 000d 4d53 000d     .M..?M..+M..SM..
   d62e4:	4d0b 000d 4d0f 000d                         .M...M..

000d62ec <_ZTV7TwoWire>:
	...
   d62f4:	4e0d 000d 4e57 000d 4e2f 000d 4e0f 000d     .N..WN../N...N..
   d6304:	4e37 000d 4e3f 000d 4e47 000d 4e4f 000d     7N..?N..GN..ON..

000d6314 <_ZTVN5spark9MeshClassE>:
	...
   d631c:	4eef 000d 4ee5 000d 4edb 000d 4ed1 000d     .N...N...N...N..
   d632c:	4ec5 000d 4eb9 000d 4ead 000d 4ea5 000d     .N...N...N...N..
   d633c:	4e9b 000d 4e91 000d 50f1 000d               .N...N...P..

000d6348 <_ZTVN5spark9WiFiClassE>:
	...
   d6350:	506b 000d 5061 000d 5057 000d 500d 000d     kP..aP..WP...P..
   d6360:	504b 000d 503f 000d 5033 000d 502b 000d     KP..?P..3P..+P..
   d6370:	5021 000d 5017 000d 50f1 000d               !P...P...P..

000d637c <_ZTVN5spark12NetworkClassE>:
	...
   d6384:	5089 000d 5093 000d 509d 000d 50a7 000d     .P...P...P...P..
   d6394:	50b1 000d 50bd 000d 50c9 000d 50d5 000d     .P...P...P...P..
   d63a4:	50dd 000d 50e7 000d 50f1 000d               .P...P...P..

000d63b0 <_ZSt7nothrow>:
   d63b0:	0000 0000                                   ....

000d63b4 <__sf_fake_stdin>:
	...

000d63d4 <__sf_fake_stdout>:
	...

000d63f4 <__sf_fake_stderr>:
	...
   d6414:	0043                                        C.

000d6416 <link_const_variable_data_end>:
	...

000d6418 <link_constructors_location>:
   d6418:	000d41f5 	.word	0x000d41f5
   d641c:	000d4619 	.word	0x000d4619
   d6420:	000d4665 	.word	0x000d4665
   d6424:	000d46a9 	.word	0x000d46a9
   d6428:	000d49a1 	.word	0x000d49a1
   d642c:	000d49b1 	.word	0x000d49b1
   d6430:	000d49e9 	.word	0x000d49e9
   d6434:	000d4fbd 	.word	0x000d4fbd
   d6438:	000d5075 	.word	0x000d5075
   d643c:	000d51bd 	.word	0x000d51bd
   d6440:	000d53a9 	.word	0x000d53a9
   d6444:	000d542d 	.word	0x000d542d
   d6448:	000d54f1 	.word	0x000d54f1
   d644c:	000d55b5 	.word	0x000d55b5
