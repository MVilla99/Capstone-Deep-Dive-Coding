
c:/Users/mauri/Documents/IoTc2/Capstone-Deep-Dive-Coding/Code/Demonstration/target/1.5.2/argon/Demonstration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004824  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8840  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b8  2003ddb0  000d8844  0001ddb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000988  2003de68  2003de68  0002de68  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d88fc  000d88fc  000288fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8924  000d8924  00028924  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0018f215  00000000  00000000  00028928  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001eac9  00000000  00000000  001b7b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002a97b  00000000  00000000  001d6606  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002f00  00000000  00000000  00200f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000058b0  00000000  00000000  00203e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004ca42  00000000  00000000  00209731  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00052ab7  00000000  00000000  00256173  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c1f4  00000000  00000000  002a8c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000edac  00000000  00000000  003b4e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fc5c 	bl	d78ea <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fc61 	bl	d7900 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003ddb0 	.word	0x2003ddb0
   d4048:	000d8844 	.word	0x000d8844
   d404c:	2003de68 	.word	0x2003de68
   d4050:	2003de68 	.word	0x2003de68
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fd49 	bl	d6af0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8834 	.word	0x000d8834
   d4080:	000d87b4 	.word	0x000d87b4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b888 	b.w	d4198 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f98b 	bl	d43a4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bcef 	b.w	d6a74 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f002 b96d 	b.w	d6374 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f002 b96b 	b.w	d6374 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40ae:	7c03      	ldrb	r3, [r0, #16]
   d40b0:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40b4:	4602      	mov	r2, r0
   d40b6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40ba:	b12b      	cbz	r3, d40c8 <_ZN4File9availableEv+0x1a>
   d40bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40be:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c0:	1a18      	subs	r0, r3, r0
   d40c2:	bf48      	it	mi
   d40c4:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40c8:	4770      	bx	lr

000d40ca <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40ca:	4770      	bx	lr

000d40cc <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d40cc:	3010      	adds	r0, #16
   d40ce:	f001 ba61 	b.w	d5594 <_ZN7FatFile4syncEv>

000d40d2 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d40d2:	3010      	adds	r0, #16
   d40d4:	f001 b976 	b.w	d53c4 <_ZN7FatFile4peekEv>

000d40d8 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d40d8:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d40da:	2201      	movs	r2, #1
   d40dc:	f10d 0107 	add.w	r1, sp, #7
   d40e0:	3010      	adds	r0, #16
   d40e2:	f001 f8bc 	bl	d525e <_ZN7FatFile4readEPvj>
   d40e6:	2801      	cmp	r0, #1
   d40e8:	bf0c      	ite	eq
   d40ea:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d40ee:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d40f2:	b003      	add	sp, #12
   d40f4:	f85d fb04 	ldr.w	pc, [sp], #4

000d40f8 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d40f8:	3010      	adds	r0, #16
   d40fa:	f001 bad7 	b.w	d56ac <_ZN7FatFile5writeEPKvj>

000d40fe <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d40fe:	b507      	push	{r0, r1, r2, lr}
   d4100:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4102:	2201      	movs	r2, #1
   d4104:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4108:	3010      	adds	r0, #16
   d410a:	4619      	mov	r1, r3
   d410c:	f001 face 	bl	d56ac <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4110:	b003      	add	sp, #12
   d4112:	f85d fb04 	ldr.w	pc, [sp], #4

000d4116 <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4116:	b510      	push	{r4, lr}
   d4118:	2134      	movs	r1, #52	; 0x34
   d411a:	4604      	mov	r4, r0
   d411c:	f003 f938 	bl	d7390 <_ZdlPvj>
   d4120:	4620      	mov	r0, r4
   d4122:	bd10      	pop	{r4, pc}

000d4124 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4124:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4126:	4602      	mov	r2, r0
   d4128:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d412a:	7913      	ldrb	r3, [r2, #4]
   d412c:	6895      	ldr	r5, [r2, #8]
   d412e:	b133      	cbz	r3, d413e <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4130:	b93d      	cbnz	r5, d4142 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4132:	490c      	ldr	r1, [pc, #48]	; (d4164 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4134:	b004      	add	sp, #16
   d4136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d413a:	f002 bb53 	b.w	d67e4 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d413e:	4b0a      	ldr	r3, [pc, #40]	; (d4168 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4140:	e000      	b.n	d4144 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4142:	4b0a      	ldr	r3, [pc, #40]	; (d416c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4144:	7b16      	ldrb	r6, [r2, #12]
   d4146:	4c0a      	ldr	r4, [pc, #40]	; (d4170 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4148:	490a      	ldr	r1, [pc, #40]	; (d4174 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d414a:	7b52      	ldrb	r2, [r2, #13]
   d414c:	9202      	str	r2, [sp, #8]
   d414e:	2e01      	cmp	r6, #1
   d4150:	bf08      	it	eq
   d4152:	4621      	moveq	r1, r4
   d4154:	9101      	str	r1, [sp, #4]
   d4156:	9500      	str	r5, [sp, #0]
   d4158:	4a07      	ldr	r2, [pc, #28]	; (d4178 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d415a:	2100      	movs	r1, #0
   d415c:	f002 fb7f 	bl	d685e <_ZN5Print11printf_implEbPKcz>
  }
   d4160:	b004      	add	sp, #16
   d4162:	bd70      	pop	{r4, r5, r6, pc}
   d4164:	000d817b 	.word	0x000d817b
   d4168:	000d83c3 	.word	0x000d83c3
   d416c:	000d816a 	.word	0x000d816a
   d4170:	000d8173 	.word	0x000d8173
   d4174:	000d8177 	.word	0x000d8177
   d4178:	000d8191 	.word	0x000d8191

000d417c <_ZN10CloudClass12syncTimeDoneEv.isra.2>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d417c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d417e:	2000      	movs	r0, #0
   d4180:	f002 f8e0 	bl	d6344 <spark_sync_time_pending>
   d4184:	b128      	cbz	r0, d4192 <_ZN10CloudClass12syncTimeDoneEv.isra.2+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4186:	f002 f8cd 	bl	d6324 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d418a:	f080 0001 	eor.w	r0, r0, #1
   d418e:	b2c0      	uxtb	r0, r0
   d4190:	bd08      	pop	{r3, pc}
   d4192:	2001      	movs	r0, #1
    }
   d4194:	bd08      	pop	{r3, pc}
	...

000d4198 <setup>:
char currentDateTime[25], currentTime[9];
int message;

// nstead of incrimenting with button clicks use encoder. or use on button (click = message++)
// setup() runs once, when the device is first turned on.
void setup() {
   d4198:	b510      	push	{r4, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d419a:	f002 fda9 	bl	d6cf0 <_Z16_fetch_usbserialv>
  delay(100);
  pixel.begin();
   d419e:	4c08      	ldr	r4, [pc, #32]	; (d41c0 <setup+0x28>)

// nstead of incrimenting with button clicks use encoder. or use on button (click = message++)
// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d41a0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41a4:	f002 fd98 	bl	d6cd8 <_ZN9USBSerial5beginEl>
  delay(100);
   d41a8:	2064      	movs	r0, #100	; 0x64
   d41aa:	f002 fc25 	bl	d69f8 <delay>
  pixel.begin();
   d41ae:	4620      	mov	r0, r4
   d41b0:	f000 fa6b 	bl	d468a <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.show();
   d41b4:	4620      	mov	r0, r4
}
   d41b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void setup() {
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
  delay(100);
  pixel.begin();
  pixel.show();
   d41ba:	f000 ba9d 	b.w	d46f8 <_ZN17Adafruit_NeoPixel4showEv>
   d41be:	bf00      	nop
   d41c0:	2003e368 	.word	0x2003e368

000d41c4 <_Z13LEDBrightnessv>:
        }
      break;  
  }
}

void LEDBrightness(){ // function for using the photoresistor to adjust the brightness of the NeoPixels to be relative to the lighting of the enviornment.
   d41c4:	b507      	push	{r0, r1, r2, lr}
  int pVal;
  int pPin = A2;
  pVal = analogRead(pPin);
   d41c6:	2011      	movs	r0, #17
   d41c8:	f003 f87c 	bl	d72c4 <analogRead>
  luminoscity = map(pVal, 40, 3000,10,255);
   d41cc:	23ff      	movs	r3, #255	; 0xff
   d41ce:	9300      	str	r3, [sp, #0]
   d41d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d41d4:	230a      	movs	r3, #10
   d41d6:	2128      	movs	r1, #40	; 0x28
   d41d8:	f002 fc02 	bl	d69e0 <_Z3mapiiiii>
   d41dc:	4b02      	ldr	r3, [pc, #8]	; (d41e8 <_Z13LEDBrightnessv+0x24>)
   d41de:	6018      	str	r0, [r3, #0]
}
   d41e0:	b003      	add	sp, #12
   d41e2:	f85d fb04 	ldr.w	pc, [sp], #4
   d41e6:	bf00      	nop
   d41e8:	2003e398 	.word	0x2003e398

000d41ec <_Z14HighQualityLEDv>:
void HighQualityLED(){
   d41ec:	b510      	push	{r4, lr}
  pixel.clear();
   d41ee:	4c0f      	ldr	r4, [pc, #60]	; (d422c <_Z14HighQualityLEDv+0x40>)
   d41f0:	4620      	mov	r0, r4
   d41f2:	f000 fc94 	bl	d4b1e <_ZN17Adafruit_NeoPixel5clearEv>
  pixel.setPixelColor(0,green);
   d41f6:	4620      	mov	r0, r4
   d41f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   d41fc:	2100      	movs	r1, #0
   d41fe:	f000 fc1d 	bl	d4a3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setPixelColor(1,green);
   d4202:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   d4206:	4620      	mov	r0, r4
   d4208:	2101      	movs	r1, #1
   d420a:	f000 fc17 	bl	d4a3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setBrightness(luminoscity);
   d420e:	4b08      	ldr	r3, [pc, #32]	; (d4230 <_Z14HighQualityLEDv+0x44>)
   d4210:	4620      	mov	r0, r4
   d4212:	7819      	ldrb	r1, [r3, #0]
   d4214:	f000 fc5d 	bl	d4ad2 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  pixel.show();
   d4218:	4620      	mov	r0, r4
   d421a:	f000 fa6d 	bl	d46f8 <_ZN17Adafruit_NeoPixel4showEv>
  Serial.println("pixel working");
   d421e:	f002 fd67 	bl	d6cf0 <_Z16_fetch_usbserialv>
   d4222:	4904      	ldr	r1, [pc, #16]	; (d4234 <_Z14HighQualityLEDv+0x48>)
}
   d4224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pixel.clear();
  pixel.setPixelColor(0,green);
  pixel.setPixelColor(1,green);
  pixel.setBrightness(luminoscity);
  pixel.show();
  Serial.println("pixel working");
   d4228:	f002 baef 	b.w	d680a <_ZN5Print7printlnEPKc>
   d422c:	2003e368 	.word	0x2003e368
   d4230:	2003e398 	.word	0x2003e398
   d4234:	000d81af 	.word	0x000d81af

000d4238 <_Z13MidQualityLEDv>:
}
void MidQualityLED(){
   d4238:	b538      	push	{r3, r4, r5, lr}
  pixel.clear();
   d423a:	4c0c      	ldr	r4, [pc, #48]	; (d426c <_Z13MidQualityLEDv+0x34>)
  pixel.setPixelColor(0, yellow);
   d423c:	4d0c      	ldr	r5, [pc, #48]	; (d4270 <_Z13MidQualityLEDv+0x38>)
  pixel.setBrightness(luminoscity);
  pixel.show();
  Serial.println("pixel working");
}
void MidQualityLED(){
  pixel.clear();
   d423e:	4620      	mov	r0, r4
   d4240:	f000 fc6d 	bl	d4b1e <_ZN17Adafruit_NeoPixel5clearEv>
  pixel.setPixelColor(0, yellow);
   d4244:	462a      	mov	r2, r5
   d4246:	4620      	mov	r0, r4
   d4248:	2100      	movs	r1, #0
   d424a:	f000 fbf7 	bl	d4a3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setPixelColor(1, yellow);
   d424e:	462a      	mov	r2, r5
   d4250:	4620      	mov	r0, r4
   d4252:	2101      	movs	r1, #1
   d4254:	f000 fbf2 	bl	d4a3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setBrightness(luminoscity);
   d4258:	4b06      	ldr	r3, [pc, #24]	; (d4274 <_Z13MidQualityLEDv+0x3c>)
   d425a:	4620      	mov	r0, r4
   d425c:	7819      	ldrb	r1, [r3, #0]
   d425e:	f000 fc38 	bl	d4ad2 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  pixel.show();
   d4262:	4620      	mov	r0, r4
}
   d4264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void MidQualityLED(){
  pixel.clear();
  pixel.setPixelColor(0, yellow);
  pixel.setPixelColor(1, yellow);
  pixel.setBrightness(luminoscity);
  pixel.show();
   d4268:	f000 ba46 	b.w	d46f8 <_ZN17Adafruit_NeoPixel4showEv>
   d426c:	2003e368 	.word	0x2003e368
   d4270:	00ffff00 	.word	0x00ffff00
   d4274:	2003e398 	.word	0x2003e398

000d4278 <_Z13LowQualityLEDv>:
}
void LowQualityLED(){
   d4278:	b538      	push	{r3, r4, r5, lr}
  pixel.clear();
   d427a:	4c0c      	ldr	r4, [pc, #48]	; (d42ac <_Z13LowQualityLEDv+0x34>)
  pixel.setPixelColor(0, orange);
   d427c:	4d0c      	ldr	r5, [pc, #48]	; (d42b0 <_Z13LowQualityLEDv+0x38>)
  pixel.setPixelColor(1, yellow);
  pixel.setBrightness(luminoscity);
  pixel.show();
}
void LowQualityLED(){
  pixel.clear();
   d427e:	4620      	mov	r0, r4
   d4280:	f000 fc4d 	bl	d4b1e <_ZN17Adafruit_NeoPixel5clearEv>
  pixel.setPixelColor(0, orange);
   d4284:	462a      	mov	r2, r5
   d4286:	4620      	mov	r0, r4
   d4288:	2100      	movs	r1, #0
   d428a:	f000 fbd7 	bl	d4a3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setPixelColor(1, orange);
   d428e:	462a      	mov	r2, r5
   d4290:	4620      	mov	r0, r4
   d4292:	2101      	movs	r1, #1
   d4294:	f000 fbd2 	bl	d4a3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setBrightness(luminoscity);
   d4298:	4b06      	ldr	r3, [pc, #24]	; (d42b4 <_Z13LowQualityLEDv+0x3c>)
   d429a:	4620      	mov	r0, r4
   d429c:	7819      	ldrb	r1, [r3, #0]
   d429e:	f000 fc18 	bl	d4ad2 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  pixel.show();
   d42a2:	4620      	mov	r0, r4
}
   d42a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void LowQualityLED(){
  pixel.clear();
  pixel.setPixelColor(0, orange);
  pixel.setPixelColor(1, orange);
  pixel.setBrightness(luminoscity);
  pixel.show();
   d42a8:	f000 ba26 	b.w	d46f8 <_ZN17Adafruit_NeoPixel4showEv>
   d42ac:	2003e368 	.word	0x2003e368
   d42b0:	00ffa500 	.word	0x00ffa500
   d42b4:	2003e398 	.word	0x2003e398

000d42b8 <_Z9DangerLEDv>:
}
void DangerLED(){
   d42b8:	b510      	push	{r4, lr}
  pixel.clear();
   d42ba:	4c0d      	ldr	r4, [pc, #52]	; (d42f0 <_Z9DangerLEDv+0x38>)
   d42bc:	4620      	mov	r0, r4
   d42be:	f000 fc2e 	bl	d4b1e <_ZN17Adafruit_NeoPixel5clearEv>
  pixel.setPixelColor(0, red);
   d42c2:	4620      	mov	r0, r4
   d42c4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   d42c8:	2100      	movs	r1, #0
   d42ca:	f000 fbb7 	bl	d4a3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setPixelColor(1, red);
   d42ce:	4620      	mov	r0, r4
   d42d0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   d42d4:	2101      	movs	r1, #1
   d42d6:	f000 fbb1 	bl	d4a3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setBrightness(luminoscity);
   d42da:	4b06      	ldr	r3, [pc, #24]	; (d42f4 <_Z9DangerLEDv+0x3c>)
   d42dc:	4620      	mov	r0, r4
   d42de:	7819      	ldrb	r1, [r3, #0]
   d42e0:	f000 fbf7 	bl	d4ad2 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  pixel.show();
   d42e4:	4620      	mov	r0, r4
}
   d42e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void DangerLED(){
  pixel.clear();
  pixel.setPixelColor(0, red);
  pixel.setPixelColor(1, red);
  pixel.setBrightness(luminoscity);
  pixel.show();
   d42ea:	f000 ba05 	b.w	d46f8 <_ZN17Adafruit_NeoPixel4showEv>
   d42ee:	bf00      	nop
   d42f0:	2003e368 	.word	0x2003e368
   d42f4:	2003e398 	.word	0x2003e398

000d42f8 <_Z8SyncTimev>:
}

void SyncTime(){ // syncing particle clock to cloud clock to get accurate time for timestamps
   d42f8:	b500      	push	{lr}
   d42fa:	b08d      	sub	sp, #52	; 0x34
  String DateTime, TimeOnly;
   d42fc:	4924      	ldr	r1, [pc, #144]	; (d4390 <_Z8SyncTimev+0x98>)
   d42fe:	4668      	mov	r0, sp
   d4300:	f002 f9cd 	bl	d669e <_ZN6StringC1EPK19__FlashStringHelper>
   d4304:	4922      	ldr	r1, [pc, #136]	; (d4390 <_Z8SyncTimev+0x98>)
   d4306:	a804      	add	r0, sp, #16
   d4308:	f002 f9c9 	bl	d669e <_ZN6StringC1EPK19__FlashStringHelper>
  Time.zone(-6);
   d430c:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d4310:	f002 faf6 	bl	d6900 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4314:	f002 f806 	bl	d6324 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4318:	b110      	cbz	r0, d4320 <_Z8SyncTimev+0x28>
            return false;
        }
        return spark_sync_time(NULL);
   d431a:	2000      	movs	r0, #0
   d431c:	f002 f80a 	bl	d6334 <spark_sync_time>
  Particle.syncTime();
  waitUntil(Particle.syncTimeDone);
   d4320:	f7ff ff2c 	bl	d417c <_ZN10CloudClass12syncTimeDoneEv.isra.2>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4324:	b910      	cbnz	r0, d432c <_Z8SyncTimev+0x34>
            spark_process();
   d4326:	f001 fff5 	bl	d6314 <spark_process>
   d432a:	e7f9      	b.n	d4320 <_Z8SyncTimev+0x28>
   d432c:	f7ff ff26 	bl	d417c <_ZN10CloudClass12syncTimeDoneEv.isra.2>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d4330:	f002 fb45 	bl	d69be <_ZN9TimeClass3nowEv>
   d4334:	4601      	mov	r1, r0
   d4336:	a808      	add	r0, sp, #32
   d4338:	f002 fafe 	bl	d6938 <_ZN9TimeClass7timeStrEl>
  DateTime = Time.timeStr();
   d433c:	a908      	add	r1, sp, #32
   d433e:	4668      	mov	r0, sp
   d4340:	f002 f9dd 	bl	d66fe <_ZN6StringaSEOS_>
   d4344:	a808      	add	r0, sp, #32
   d4346:	f002 f963 	bl	d6610 <_ZN6StringD1Ev>
  TimeOnly = DateTime.substring(11,19);
   d434a:	2313      	movs	r3, #19
   d434c:	220b      	movs	r2, #11
   d434e:	4669      	mov	r1, sp
   d4350:	a808      	add	r0, sp, #32
   d4352:	f002 f9f5 	bl	d6740 <_ZNK6String9substringEjj>
   d4356:	a908      	add	r1, sp, #32
   d4358:	a804      	add	r0, sp, #16
   d435a:	f002 f9d0 	bl	d66fe <_ZN6StringaSEOS_>
   d435e:	a808      	add	r0, sp, #32
   d4360:	f002 f956 	bl	d6610 <_ZN6StringD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4364:	4668      	mov	r0, sp
   d4366:	2300      	movs	r3, #0
   d4368:	2219      	movs	r2, #25
   d436a:	490a      	ldr	r1, [pc, #40]	; (d4394 <_Z8SyncTimev+0x9c>)
   d436c:	f002 f9cf 	bl	d670e <_ZNK6String8getBytesEPhjj>
   d4370:	2300      	movs	r3, #0
   d4372:	2209      	movs	r2, #9
   d4374:	4908      	ldr	r1, [pc, #32]	; (d4398 <_Z8SyncTimev+0xa0>)
   d4376:	a804      	add	r0, sp, #16
   d4378:	f002 f9c9 	bl	d670e <_ZNK6String8getBytesEPhjj>
  pixel.setBrightness(luminoscity);
  pixel.show();
}

void SyncTime(){ // syncing particle clock to cloud clock to get accurate time for timestamps
  String DateTime, TimeOnly;
   d437c:	a804      	add	r0, sp, #16
   d437e:	f002 f947 	bl	d6610 <_ZN6StringD1Ev>
   d4382:	4668      	mov	r0, sp
   d4384:	f002 f944 	bl	d6610 <_ZN6StringD1Ev>
  waitUntil(Particle.syncTimeDone);
  DateTime = Time.timeStr();
  TimeOnly = DateTime.substring(11,19);
  DateTime.toCharArray(currentDateTime,25);
  TimeOnly.toCharArray(currentTime,9);
   d4388:	b00d      	add	sp, #52	; 0x34
   d438a:	f85d fb04 	ldr.w	pc, [sp], #4
   d438e:	bf00      	nop
   d4390:	000d83c3 	.word	0x000d83c3
   d4394:	2003e37c 	.word	0x2003e37c
   d4398:	2003de78 	.word	0x2003de78

000d439c <_ZN5Print6printfIIEEEjPKcDpT_>:
   d439c:	460a      	mov	r2, r1
   d439e:	2100      	movs	r1, #0
   d43a0:	f002 ba5d 	b.w	d685e <_ZN5Print11printf_implEbPKcz>

000d43a4 <loop>:
  pixel.begin();
  pixel.show();
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d43a4:	b570      	push	{r4, r5, r6, lr}
   d43a6:	b08e      	sub	sp, #56	; 0x38
  // The core of your code will likely live here.
  SyncTime();
   d43a8:	f7ff ffa6 	bl	d42f8 <_Z8SyncTimev>
  LEDBrightness();
   d43ac:	f7ff ff0a 	bl	d41c4 <_Z13LEDBrightnessv>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d43b0:	2300      	movs	r3, #0
   d43b2:	f88d 3014 	strb.w	r3, [sp, #20]
   d43b6:	f88d 3015 	strb.w	r3, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d43ba:	9302      	str	r3, [sp, #8]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d43bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d43c0:	9303      	str	r3, [sp, #12]
 public:
  File() {}
   d43c2:	4b4b      	ldr	r3, [pc, #300]	; (d44f0 <loop+0x14c>)
   d43c4:	9301      	str	r3, [sp, #4]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d43c6:	4a4b      	ldr	r2, [pc, #300]	; (d44f4 <loop+0x150>)
   d43c8:	494b      	ldr	r1, [pc, #300]	; (d44f8 <loop+0x154>)
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d43ca:	4d4c      	ldr	r5, [pc, #304]	; (d44fc <loop+0x158>)
   d43cc:	f244 2302 	movw	r3, #16898	; 0x4202
   d43d0:	a805      	add	r0, sp, #20
   d43d2:	ac05      	add	r4, sp, #20
   d43d4:	f001 f91b 	bl	d560e <_ZN7FatFile4openEPS_PKci>
   d43d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d43da:	f105 0610 	add.w	r6, r5, #16
   d43de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d43e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d43e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d43e4:	6823      	ldr	r3, [r4, #0]
   d43e6:	6033      	str	r3, [r6, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d43e8:	9b02      	ldr	r3, [sp, #8]
   d43ea:	606b      	str	r3, [r5, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d43ec:	9b03      	ldr	r3, [sp, #12]
   d43ee:	60ab      	str	r3, [r5, #8]
   d43f0:	9b04      	ldr	r3, [sp, #16]
   d43f2:	60eb      	str	r3, [r5, #12]
  file = SD.open("DataLog.csv", FILE_WRITE); // insert file name. try experimenting with the excel file type
  switch(message){
   d43f4:	4b42      	ldr	r3, [pc, #264]	; (d4500 <loop+0x15c>)
   d43f6:	681b      	ldr	r3, [r3, #0]
   d43f8:	3b01      	subs	r3, #1
   d43fa:	462c      	mov	r4, r5
   d43fc:	2b03      	cmp	r3, #3
   d43fe:	d874      	bhi.n	d44ea <loop+0x146>
   d4400:	e8df f003 	tbb	[pc, r3]
   d4404:	583c1f02 	.word	0x583c1f02
      case(highQuality):
      HighQualityLED();
   d4408:	f7ff fef0 	bl	d41ec <_Z14HighQualityLEDv>
      if(file){
   d440c:	7c2b      	ldrb	r3, [r5, #16]
   d440e:	b17b      	cbz	r3, d4430 <loop+0x8c>
        Serial.printf("nominal reads.");
   d4410:	f002 fc6e 	bl	d6cf0 <_Z16_fetch_usbserialv>
   d4414:	493b      	ldr	r1, [pc, #236]	; (d4504 <loop+0x160>)
   d4416:	f7ff ffc1 	bl	d439c <_ZN5Print6printfIIEEEjPKcDpT_>
        file.println("nominal readings. nothing to record");
   d441a:	493b      	ldr	r1, [pc, #236]	; (d4508 <loop+0x164>)
   d441c:	4837      	ldr	r0, [pc, #220]	; (d44fc <loop+0x158>)
   d441e:	f002 f9f4 	bl	d680a <_ZN5Print7printlnEPKc>
        file.print(currentDateTime);
   d4422:	493a      	ldr	r1, [pc, #232]	; (d450c <loop+0x168>)
   d4424:	4835      	ldr	r0, [pc, #212]	; (d44fc <loop+0x158>)
   d4426:	f002 f9dd 	bl	d67e4 <_ZN5Print5printEPKc>
        file.close();
   d442a:	4839      	ldr	r0, [pc, #228]	; (d4510 <loop+0x16c>)
   d442c:	f001 f8e8 	bl	d5600 <_ZN7FatFile5closeEv>
        // myDFP.playFolder(11, );
        // delay( );
      }
      if(!file){ // if theres an error with the file, log it
   d4430:	7c23      	ldrb	r3, [r4, #16]
   d4432:	2b00      	cmp	r3, #0
   d4434:	d159      	bne.n	d44ea <loop+0x146>
        Serial.println("nominal readings write error.");
   d4436:	f002 fc5b 	bl	d6cf0 <_Z16_fetch_usbserialv>
   d443a:	4936      	ldr	r1, [pc, #216]	; (d4514 <loop+0x170>)
   d443c:	f002 f9e5 	bl	d680a <_ZN5Print7printlnEPKc>
   d4440:	e053      	b.n	d44ea <loop+0x146>
      }
      break;
      case(midQuality):
        MidQualityLED();
   d4442:	f7ff fef9 	bl	d4238 <_Z13MidQualityLEDv>
        if(file){
   d4446:	7c2b      	ldrb	r3, [r5, #16]
   d4448:	b17b      	cbz	r3, d446a <loop+0xc6>
          Serial.printf("Air Quality warning."); 
   d444a:	f002 fc51 	bl	d6cf0 <_Z16_fetch_usbserialv>
   d444e:	4932      	ldr	r1, [pc, #200]	; (d4518 <loop+0x174>)
   d4450:	f7ff ffa4 	bl	d439c <_ZN5Print6printfIIEEEjPKcDpT_>
          file.printf("Air Quality alert");
   d4454:	4931      	ldr	r1, [pc, #196]	; (d451c <loop+0x178>)
   d4456:	4829      	ldr	r0, [pc, #164]	; (d44fc <loop+0x158>)
   d4458:	f7ff ffa0 	bl	d439c <_ZN5Print6printfIIEEEjPKcDpT_>
          file.print(currentDateTime);
   d445c:	492b      	ldr	r1, [pc, #172]	; (d450c <loop+0x168>)
   d445e:	4827      	ldr	r0, [pc, #156]	; (d44fc <loop+0x158>)
   d4460:	f002 f9c0 	bl	d67e4 <_ZN5Print5printEPKc>
          file.close();
   d4464:	482a      	ldr	r0, [pc, #168]	; (d4510 <loop+0x16c>)
   d4466:	f001 f8cb 	bl	d5600 <_ZN7FatFile5closeEv>
        }
        if(!file){
   d446a:	7c23      	ldrb	r3, [r4, #16]
   d446c:	2b00      	cmp	r3, #0
   d446e:	d13c      	bne.n	d44ea <loop+0x146>
          Serial.println("AQ alert write error");
   d4470:	f002 fc3e 	bl	d6cf0 <_Z16_fetch_usbserialv>
   d4474:	492a      	ldr	r1, [pc, #168]	; (d4520 <loop+0x17c>)
   d4476:	f002 f9c8 	bl	d680a <_ZN5Print7printlnEPKc>
   d447a:	e036      	b.n	d44ea <loop+0x146>
        }
      break;
      case(lowQuality):
        LowQualityLED();
   d447c:	f7ff fefc 	bl	d4278 <_Z13LowQualityLEDv>
        if(file){
   d4480:	7c2b      	ldrb	r3, [r5, #16]
   d4482:	b17b      	cbz	r3, d44a4 <loop+0x100>
          Serial.printf("MQ-9 warning.");
   d4484:	f002 fc34 	bl	d6cf0 <_Z16_fetch_usbserialv>
   d4488:	4926      	ldr	r1, [pc, #152]	; (d4524 <loop+0x180>)
   d448a:	f7ff ff87 	bl	d439c <_ZN5Print6printfIIEEEjPKcDpT_>
          file.printf("MQ-9 alert");
   d448e:	4926      	ldr	r1, [pc, #152]	; (d4528 <loop+0x184>)
   d4490:	481a      	ldr	r0, [pc, #104]	; (d44fc <loop+0x158>)
   d4492:	f7ff ff83 	bl	d439c <_ZN5Print6printfIIEEEjPKcDpT_>
          file.print(currentDateTime);
   d4496:	491d      	ldr	r1, [pc, #116]	; (d450c <loop+0x168>)
   d4498:	4818      	ldr	r0, [pc, #96]	; (d44fc <loop+0x158>)
   d449a:	f002 f9a3 	bl	d67e4 <_ZN5Print5printEPKc>
          file.close();
   d449e:	481c      	ldr	r0, [pc, #112]	; (d4510 <loop+0x16c>)
   d44a0:	f001 f8ae 	bl	d5600 <_ZN7FatFile5closeEv>
          // myDFP.playFolder(11, );
          // delay( ); // each DFP audio file needs a delay in seconds to let the audio file play
        }
        if(!file){
   d44a4:	7c23      	ldrb	r3, [r4, #16]
   d44a6:	bb03      	cbnz	r3, d44ea <loop+0x146>
          Serial.println("MQ-9 alert write error");
   d44a8:	f002 fc22 	bl	d6cf0 <_Z16_fetch_usbserialv>
   d44ac:	491f      	ldr	r1, [pc, #124]	; (d452c <loop+0x188>)
   d44ae:	f002 f9ac 	bl	d680a <_ZN5Print7printlnEPKc>
   d44b2:	e01a      	b.n	d44ea <loop+0x146>
        }
      break;
      case(DangerQuality):
        DangerLED();
   d44b4:	f7ff ff00 	bl	d42b8 <_Z9DangerLEDv>
        if(file){
   d44b8:	7c2b      	ldrb	r3, [r5, #16]
   d44ba:	b17b      	cbz	r3, d44dc <loop+0x138>
          Serial.printf("DANGER IMMINANT."); 
   d44bc:	f002 fc18 	bl	d6cf0 <_Z16_fetch_usbserialv>
   d44c0:	491b      	ldr	r1, [pc, #108]	; (d4530 <loop+0x18c>)
   d44c2:	f7ff ff6b 	bl	d439c <_ZN5Print6printfIIEEEjPKcDpT_>
          file.printf("High Danger.");
   d44c6:	491b      	ldr	r1, [pc, #108]	; (d4534 <loop+0x190>)
   d44c8:	480c      	ldr	r0, [pc, #48]	; (d44fc <loop+0x158>)
   d44ca:	f7ff ff67 	bl	d439c <_ZN5Print6printfIIEEEjPKcDpT_>
          file.print(currentDateTime);
   d44ce:	490f      	ldr	r1, [pc, #60]	; (d450c <loop+0x168>)
   d44d0:	480a      	ldr	r0, [pc, #40]	; (d44fc <loop+0x158>)
   d44d2:	f002 f987 	bl	d67e4 <_ZN5Print5printEPKc>
          file.close();
   d44d6:	480e      	ldr	r0, [pc, #56]	; (d4510 <loop+0x16c>)
   d44d8:	f001 f892 	bl	d5600 <_ZN7FatFile5closeEv>
          // myDFP.playFolder(11, );
          // delay( );
        }
        if(!file){
   d44dc:	7c23      	ldrb	r3, [r4, #16]
   d44de:	b923      	cbnz	r3, d44ea <loop+0x146>
          Serial.println("High danger write error.");
   d44e0:	f002 fc06 	bl	d6cf0 <_Z16_fetch_usbserialv>
   d44e4:	4914      	ldr	r1, [pc, #80]	; (d4538 <loop+0x194>)
   d44e6:	f002 f990 	bl	d680a <_ZN5Print7printlnEPKc>
        }
      break;  
  }
}
   d44ea:	b00e      	add	sp, #56	; 0x38
   d44ec:	bd70      	pop	{r4, r5, r6, pc}
   d44ee:	bf00      	nop
   d44f0:	000d8140 	.word	0x000d8140
   d44f4:	000d81bd 	.word	0x000d81bd
   d44f8:	2003e2e8 	.word	0x2003e2e8
   d44fc:	2003e330 	.word	0x2003e330
   d4500:	2003e364 	.word	0x2003e364
   d4504:	000d81c9 	.word	0x000d81c9
   d4508:	000d81d8 	.word	0x000d81d8
   d450c:	2003e37c 	.word	0x2003e37c
   d4510:	2003e340 	.word	0x2003e340
   d4514:	000d81fc 	.word	0x000d81fc
   d4518:	000d821a 	.word	0x000d821a
   d451c:	000d822f 	.word	0x000d822f
   d4520:	000d8241 	.word	0x000d8241
   d4524:	000d8256 	.word	0x000d8256
   d4528:	000d8264 	.word	0x000d8264
   d452c:	000d826f 	.word	0x000d826f
   d4530:	000d8286 	.word	0x000d8286
   d4534:	000d8297 	.word	0x000d8297
   d4538:	000d82a4 	.word	0x000d82a4

000d453c <_GLOBAL__sub_I_pixel>:
  waitUntil(Particle.syncTimeDone);
  DateTime = Time.timeStr();
  TimeOnly = DateTime.substring(11,19);
  DateTime.toCharArray(currentDateTime,25);
  TimeOnly.toCharArray(currentTime,9);
   d453c:	b570      	push	{r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d453e:	f001 fcdd 	bl	d5efc <HAL_Pin_Map>
#include <DFRobotDFPlayerMini.h>

  #define PIXEL_PIN A0// put pin
  #define PIXEL_COUNT 2
  #define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixel(PIXEL_COUNT,PIXEL_PIN,PIXEL_TYPE);
   d4542:	2302      	movs	r3, #2
   d4544:	4619      	mov	r1, r3
   d4546:	2213      	movs	r2, #19
   d4548:	482c      	ldr	r0, [pc, #176]	; (d45fc <_GLOBAL__sub_I_pixel+0xc0>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d454a:	4e2d      	ldr	r6, [pc, #180]	; (d4600 <_GLOBAL__sub_I_pixel+0xc4>)
   d454c:	f000 f8c2 	bl	d46d4 <_ZN17Adafruit_NeoPixelC1Ethh>
   d4550:	4a2c      	ldr	r2, [pc, #176]	; (d4604 <_GLOBAL__sub_I_pixel+0xc8>)
   d4552:	492d      	ldr	r1, [pc, #180]	; (d4608 <_GLOBAL__sub_I_pixel+0xcc>)
   d4554:	4829      	ldr	r0, [pc, #164]	; (d45fc <_GLOBAL__sub_I_pixel+0xc0>)
   d4556:	f002 ff0d 	bl	d7374 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d455a:	4b2c      	ldr	r3, [pc, #176]	; (d460c <_GLOBAL__sub_I_pixel+0xd0>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d455c:	2164      	movs	r1, #100	; 0x64
   d455e:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4562:	492b      	ldr	r1, [pc, #172]	; (d4610 <_GLOBAL__sub_I_pixel+0xd4>)
   d4564:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d4568:	2101      	movs	r1, #1
   d456a:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d456e:	6831      	ldr	r1, [r6, #0]
   d4570:	2200      	movs	r2, #0
   d4572:	f011 0501 	ands.w	r5, r1, #1
   d4576:	71da      	strb	r2, [r3, #7]
   d4578:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d457c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d4580:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4584:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4588:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d458c:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d4590:	461c      	mov	r4, r3
   d4592:	d10a      	bne.n	d45aa <_GLOBAL__sub_I_pixel+0x6e>
   d4594:	4630      	mov	r0, r6
   d4596:	f7ff fd82 	bl	d409e <__cxa_guard_acquire>
   d459a:	b130      	cbz	r0, d45aa <_GLOBAL__sub_I_pixel+0x6e>
   d459c:	4629      	mov	r1, r5
   d459e:	481d      	ldr	r0, [pc, #116]	; (d4614 <_GLOBAL__sub_I_pixel+0xd8>)
   d45a0:	f001 ff5c 	bl	d645c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d45a4:	4630      	mov	r0, r6
   d45a6:	f7ff fd7f 	bl	d40a8 <__cxa_guard_release>
   d45aa:	481b      	ldr	r0, [pc, #108]	; (d4618 <_GLOBAL__sub_I_pixel+0xdc>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d45ac:	4b19      	ldr	r3, [pc, #100]	; (d4614 <_GLOBAL__sub_I_pixel+0xd8>)
   d45ae:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d45b2:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d45b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d45b8:	6083      	str	r3, [r0, #8]
};

/*      for SD logging        */
int i;
SdFat SD;
File file;
   d45ba:	4a12      	ldr	r2, [pc, #72]	; (d4604 <_GLOBAL__sub_I_pixel+0xc8>)
 public:
  File() {}
   d45bc:	4b17      	ldr	r3, [pc, #92]	; (d461c <_GLOBAL__sub_I_pixel+0xe0>)
   d45be:	4918      	ldr	r1, [pc, #96]	; (d4620 <_GLOBAL__sub_I_pixel+0xe4>)
   d45c0:	7404      	strb	r4, [r0, #16]
   d45c2:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d45c4:	6044      	str	r4, [r0, #4]
   d45c6:	6003      	str	r3, [r0, #0]
   d45c8:	f002 fed4 	bl	d7374 <__aeabi_atexit>
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
   d45cc:	4b15      	ldr	r3, [pc, #84]	; (d4624 <_GLOBAL__sub_I_pixel+0xe8>)
   d45ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d45d2:	609a      	str	r2, [r3, #8]
   d45d4:	4a14      	ldr	r2, [pc, #80]	; (d4628 <_GLOBAL__sub_I_pixel+0xec>)
   d45d6:	f883 4020 	strb.w	r4, [r3, #32]
   d45da:	6811      	ldr	r1, [r2, #0]
   d45dc:	f8c3 1016 	str.w	r1, [r3, #22]
   d45e0:	6851      	ldr	r1, [r2, #4]
   d45e2:	8912      	ldrh	r2, [r2, #8]
   d45e4:	83da      	strh	r2, [r3, #30]
   d45e6:	2202      	movs	r2, #2
   d45e8:	f8c3 101a 	str.w	r1, [r3, #26]
   d45ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   d45f0:	f883 4026 	strb.w	r4, [r3, #38]	; 0x26
   d45f4:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
   d45f8:	bd70      	pop	{r4, r5, r6, pc}
   d45fa:	bf00      	nop
   d45fc:	2003e368 	.word	0x2003e368
   d4600:	2003de6c 	.word	0x2003de6c
   d4604:	2003de68 	.word	0x2003de68
   d4608:	000d4635 	.word	0x000d4635
   d460c:	2003deac 	.word	0x2003deac
   d4610:	000d8134 	.word	0x000d8134
   d4614:	2003de70 	.word	0x2003de70
   d4618:	2003e330 	.word	0x2003e330
   d461c:	000d8140 	.word	0x000d8140
   d4620:	000d40cb 	.word	0x000d40cb
   d4624:	2003de84 	.word	0x2003de84
   d4628:	000d8160 	.word	0x000d8160

000d462c <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d462c:	f001 bcee 	b.w	d600c <HAL_Timer_Get_Micro_Seconds>

000d4630 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4630:	f001 bce4 	b.w	d5ffc <HAL_Delay_Microseconds>

000d4634 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4634:	b510      	push	{r4, lr}
   d4636:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4638:	68c0      	ldr	r0, [r0, #12]
   d463a:	b108      	cbz	r0, d4640 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d463c:	f001 fe9a 	bl	d6374 <free>
  if (begun) pinMode(pin, INPUT);
   d4640:	7823      	ldrb	r3, [r4, #0]
   d4642:	b11b      	cbz	r3, d464c <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4644:	2100      	movs	r1, #0
   d4646:	79e0      	ldrb	r0, [r4, #7]
   d4648:	f002 fe12 	bl	d7270 <pinMode>
}
   d464c:	4620      	mov	r0, r4
   d464e:	bd10      	pop	{r4, pc}

000d4650 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4650:	b538      	push	{r3, r4, r5, lr}
   d4652:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4654:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4656:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4658:	b108      	cbz	r0, d465e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d465a:	f001 fe8b 	bl	d6374 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d465e:	79a3      	ldrb	r3, [r4, #6]
   d4660:	2b06      	cmp	r3, #6
   d4662:	bf0c      	ite	eq
   d4664:	2004      	moveq	r0, #4
   d4666:	2003      	movne	r0, #3
   d4668:	fb10 f005 	smulbb	r0, r0, r5
   d466c:	b280      	uxth	r0, r0
   d466e:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4670:	f001 fe78 	bl	d6364 <malloc>
   d4674:	60e0      	str	r0, [r4, #12]
   d4676:	b128      	cbz	r0, d4684 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4678:	88a2      	ldrh	r2, [r4, #4]
   d467a:	2100      	movs	r1, #0
   d467c:	f003 f940 	bl	d7900 <memset>
    numLEDs = n;
   d4680:	8065      	strh	r5, [r4, #2]
   d4682:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4684:	80a0      	strh	r0, [r4, #4]
   d4686:	8060      	strh	r0, [r4, #2]
   d4688:	bd38      	pop	{r3, r4, r5, pc}

000d468a <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d468a:	b510      	push	{r4, lr}
   d468c:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d468e:	2101      	movs	r1, #1
   d4690:	79c0      	ldrb	r0, [r0, #7]
   d4692:	f002 fded 	bl	d7270 <pinMode>
  digitalWrite(pin, LOW);
   d4696:	2100      	movs	r1, #0
   d4698:	79e0      	ldrb	r0, [r4, #7]
   d469a:	f002 fdfa 	bl	d7292 <digitalWrite>
  begun = true;
   d469e:	2301      	movs	r3, #1
   d46a0:	7023      	strb	r3, [r4, #0]
   d46a2:	bd10      	pop	{r4, pc}

000d46a4 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d46a4:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d46a6:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d46a8:	4605      	mov	r5, r0
   d46aa:	460c      	mov	r4, r1
    if (begun) {
   d46ac:	b11b      	cbz	r3, d46b6 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d46ae:	2100      	movs	r1, #0
   d46b0:	79c0      	ldrb	r0, [r0, #7]
   d46b2:	f002 fddd 	bl	d7270 <pinMode>
    }
    pin = p;
    if (begun) {
   d46b6:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d46b8:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d46ba:	b153      	cbz	r3, d46d2 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d46bc:	b2a4      	uxth	r4, r4
   d46be:	4620      	mov	r0, r4
   d46c0:	2101      	movs	r1, #1
   d46c2:	f002 fdd5 	bl	d7270 <pinMode>
        digitalWrite(p, LOW);
   d46c6:	4620      	mov	r0, r4
   d46c8:	2100      	movs	r1, #0
    }
}
   d46ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d46ce:	f002 bde0 	b.w	d7292 <digitalWrite>
   d46d2:	bd38      	pop	{r3, r4, r5, pc}

000d46d4 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d46d4:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d46d6:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d46d8:	4604      	mov	r4, r0
   d46da:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d46dc:	7183      	strb	r3, [r0, #6]
   d46de:	7005      	strb	r5, [r0, #0]
   d46e0:	7205      	strb	r5, [r0, #8]
   d46e2:	60c5      	str	r5, [r0, #12]
   d46e4:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d46e6:	f7ff ffb3 	bl	d4650 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d46ea:	4620      	mov	r0, r4
   d46ec:	4631      	mov	r1, r6
   d46ee:	f7ff ffd9 	bl	d46a4 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d46f2:	4620      	mov	r0, r4
   d46f4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d46f8 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d46f8:	68c3      	ldr	r3, [r0, #12]
   d46fa:	2b00      	cmp	r3, #0
   d46fc:	f000 818b 	beq.w	d4a16 <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d4700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4704:	7983      	ldrb	r3, [r0, #6]
   d4706:	3b02      	subs	r3, #2
   d4708:	b2db      	uxtb	r3, r3
   d470a:	2b04      	cmp	r3, #4
   d470c:	bf9c      	itt	ls
   d470e:	4ac4      	ldrls	r2, [pc, #784]	; (d4a20 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d4710:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4714:	b087      	sub	sp, #28
   d4716:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4718:	bf88      	it	hi
   d471a:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d471c:	f7ff ff86 	bl	d462c <micros>
   d4720:	692b      	ldr	r3, [r5, #16]
   d4722:	1ac0      	subs	r0, r0, r3
   d4724:	42a0      	cmp	r0, r4
   d4726:	d3f9      	bcc.n	d471c <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4728:	4abe      	ldr	r2, [pc, #760]	; (d4a24 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d472a:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d472c:	ca07      	ldmia	r2, {r0, r1, r2}
   d472e:	ac06      	add	r4, sp, #24
   d4730:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4734:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4736:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4738:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d473c:	3304      	adds	r3, #4
   d473e:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4740:	b922      	cbnz	r2, d474c <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4742:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4746:	2b00      	cmp	r3, #0
   d4748:	f2c0 8155 	blt.w	d49f6 <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d474c:	9c04      	ldr	r4, [sp, #16]
   d474e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4752:	b923      	cbnz	r3, d475e <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4754:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4758:	2b00      	cmp	r3, #0
   d475a:	f2c0 813c 	blt.w	d49d6 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d475e:	9c05      	ldr	r4, [sp, #20]
   d4760:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4764:	b91b      	cbnz	r3, d476e <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4766:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d476a:	2b00      	cmp	r3, #0
   d476c:	db6e      	blt.n	d484c <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d476e:	4bae      	ldr	r3, [pc, #696]	; (d4a28 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d4770:	79ea      	ldrb	r2, [r5, #7]
   d4772:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4774:	4cad      	ldr	r4, [pc, #692]	; (d4a2c <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4776:	49ae      	ldr	r1, [pc, #696]	; (d4a30 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4778:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d477a:	0112      	lsls	r2, r2, #4
   d477c:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d477e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4782:	785b      	ldrb	r3, [r3, #1]
   d4784:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4786:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4788:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d478a:	f003 031f 	and.w	r3, r3, #31
   d478e:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4792:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4794:	433a      	orrs	r2, r7
   d4796:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d4798:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d479a:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d479c:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d47a0:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d47a4:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d47a6:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d47a8:	2800      	cmp	r0, #0
   d47aa:	d044      	beq.n	d4836 <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d47ac:	46cc      	mov	ip, r9
   d47ae:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d47b0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d47b4:	f81c eb01 	ldrb.w	lr, [ip], #1
   d47b8:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d47ba:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d47bc:	6863      	ldr	r3, [r4, #4]
   d47be:	1a9b      	subs	r3, r3, r2
   d47c0:	2b46      	cmp	r3, #70	; 0x46
   d47c2:	d9fb      	bls.n	d47bc <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d47c4:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d47c8:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d47cc:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d47d0:	ea43 0307 	orr.w	r3, r3, r7
   d47d4:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d47d8:	d02f      	beq.n	d483a <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d47da:	6863      	ldr	r3, [r4, #4]
   d47dc:	1a9b      	subs	r3, r3, r2
   d47de:	2b28      	cmp	r3, #40	; 0x28
   d47e0:	d9fb      	bls.n	d47da <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d47e2:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d47e6:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d47e8:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d47ec:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d47f0:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d47f4:	d1e2      	bne.n	d47bc <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d47f6:	ebc9 030c 	rsb	r3, r9, ip
   d47fa:	88a8      	ldrh	r0, [r5, #4]
   d47fc:	b29b      	uxth	r3, r3
   d47fe:	4298      	cmp	r0, r3
   d4800:	d8d8      	bhi.n	d47b4 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d4802:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d4806:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d480a:	6863      	ldr	r3, [r4, #4]
   d480c:	1a9b      	subs	r3, r3, r2
   d480e:	2b46      	cmp	r3, #70	; 0x46
   d4810:	d9fb      	bls.n	d480a <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4812:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4816:	ebca 0a03 	rsb	sl, sl, r3
   d481a:	4582      	cmp	sl, r0
   d481c:	f0c0 80d5 	bcc.w	d49ca <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4820:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4824:	f7ff ff04 	bl	d4630 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4828:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d482a:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d482e:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4832:	2800      	cmp	r0, #0
   d4834:	d1ba      	bne.n	d47ac <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d4836:	4602      	mov	r2, r0
   d4838:	e7e7      	b.n	d480a <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d483a:	6863      	ldr	r3, [r4, #4]
   d483c:	1a9b      	subs	r3, r3, r2
   d483e:	2b11      	cmp	r3, #17
   d4840:	d8cf      	bhi.n	d47e2 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d4842:	6863      	ldr	r3, [r4, #4]
   d4844:	1a9b      	subs	r3, r3, r2
   d4846:	2b11      	cmp	r3, #17
   d4848:	d9f7      	bls.n	d483a <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d484a:	e7ca      	b.n	d47e2 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d484c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4850:	2b00      	cmp	r3, #0
   d4852:	da8c      	bge.n	d476e <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4854:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4858:	2b00      	cmp	r3, #0
   d485a:	da88      	bge.n	d476e <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d485c:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4860:	2b00      	cmp	r3, #0
   d4862:	da84      	bge.n	d476e <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4864:	9801      	ldr	r0, [sp, #4]
   d4866:	f001 fd7d 	bl	d6364 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d486a:	2800      	cmp	r0, #0
   d486c:	f43f af7f 	beq.w	d476e <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4870:	88ab      	ldrh	r3, [r5, #4]
   d4872:	2b00      	cmp	r3, #0
   d4874:	f000 80d0 	beq.w	d4a18 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d4878:	2700      	movs	r7, #0
   d487a:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d487c:	4e6d      	ldr	r6, [pc, #436]	; (d4a34 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d487e:	496e      	ldr	r1, [pc, #440]	; (d4a38 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d4880:	e000      	b.n	d4884 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d4882:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4884:	68ea      	ldr	r2, [r5, #12]
   d4886:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4888:	f103 0e01 	add.w	lr, r3, #1
   d488c:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4890:	bf14      	ite	ne
   d4892:	46b0      	movne	r8, r6
   d4894:	4688      	moveq	r8, r1
   d4896:	fa1f fe8e 	uxth.w	lr, lr
   d489a:	f012 0f40 	tst.w	r2, #64	; 0x40
   d489e:	bf14      	ite	ne
   d48a0:	46b1      	movne	r9, r6
   d48a2:	4689      	moveq	r9, r1
   d48a4:	f012 0f20 	tst.w	r2, #32
   d48a8:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d48ac:	bf18      	it	ne
   d48ae:	46b2      	movne	sl, r6
   d48b0:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d48b4:	bf08      	it	eq
   d48b6:	468a      	moveq	sl, r1
   d48b8:	f103 0802 	add.w	r8, r3, #2
   d48bc:	f012 0f10 	tst.w	r2, #16
   d48c0:	f103 0e03 	add.w	lr, r3, #3
   d48c4:	bf14      	ite	ne
   d48c6:	46b4      	movne	ip, r6
   d48c8:	468c      	moveq	ip, r1
   d48ca:	fa1f f888 	uxth.w	r8, r8
   d48ce:	f012 0f08 	tst.w	r2, #8
   d48d2:	fa1f fe8e 	uxth.w	lr, lr
   d48d6:	f103 0904 	add.w	r9, r3, #4
   d48da:	fa1f f989 	uxth.w	r9, r9
   d48de:	bf14      	ite	ne
   d48e0:	46b3      	movne	fp, r6
   d48e2:	468b      	moveq	fp, r1
   d48e4:	f012 0f04 	tst.w	r2, #4
   d48e8:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d48ec:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d48f0:	bf14      	ite	ne
   d48f2:	46b2      	movne	sl, r6
   d48f4:	468a      	moveq	sl, r1
   d48f6:	f103 0805 	add.w	r8, r3, #5
   d48fa:	f012 0f02 	tst.w	r2, #2
   d48fe:	f103 0c06 	add.w	ip, r3, #6
   d4902:	f103 0e07 	add.w	lr, r3, #7
   d4906:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d490a:	fa1f fe8e 	uxth.w	lr, lr
   d490e:	bf14      	ite	ne
   d4910:	46b1      	movne	r9, r6
   d4912:	4689      	moveq	r9, r1
   d4914:	fa1f f888 	uxth.w	r8, r8
   d4918:	f012 0f01 	tst.w	r2, #1
   d491c:	fa1f fc8c 	uxth.w	ip, ip
   d4920:	bf14      	ite	ne
   d4922:	4632      	movne	r2, r6
   d4924:	460a      	moveq	r2, r1
   d4926:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d492a:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d492e:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4932:	3701      	adds	r7, #1
   d4934:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4938:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d493a:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d493e:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4940:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4942:	d89e      	bhi.n	d4882 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4944:	f103 0209 	add.w	r2, r3, #9
   d4948:	330a      	adds	r3, #10
   d494a:	b292      	uxth	r2, r2
   d494c:	b29b      	uxth	r3, r3
   d494e:	0052      	lsls	r2, r2, #1
   d4950:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4952:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4954:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4958:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d495a:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d495c:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d495e:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4960:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4962:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4966:	4e30      	ldr	r6, [pc, #192]	; (d4a28 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4968:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d496c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4970:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4974:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4978:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d497c:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d4980:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4984:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4988:	79eb      	ldrb	r3, [r5, #7]
   d498a:	6831      	ldr	r1, [r6, #0]
   d498c:	011b      	lsls	r3, r3, #4
   d498e:	18ce      	adds	r6, r1, r3
   d4990:	5cc9      	ldrb	r1, [r1, r3]
   d4992:	7873      	ldrb	r3, [r6, #1]
   d4994:	f003 031f 	and.w	r3, r3, #31
   d4998:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d499c:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d499e:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d49a2:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d49a6:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d49aa:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d49ac:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d49b0:	2b00      	cmp	r3, #0
   d49b2:	d0fb      	beq.n	d49ac <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d49b4:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d49b6:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d49ba:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d49be:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d49c2:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d49c6:	f001 fcd5 	bl	d6374 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d49ca:	f7ff fe2f 	bl	d462c <micros>
   d49ce:	6128      	str	r0, [r5, #16]
}
   d49d0:	b007      	add	sp, #28
   d49d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d49d6:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d49da:	2b00      	cmp	r3, #0
   d49dc:	f6bf aebf 	bge.w	d475e <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d49e0:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d49e4:	2b00      	cmp	r3, #0
   d49e6:	f6bf aeba 	bge.w	d475e <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d49ea:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d49ee:	2b00      	cmp	r3, #0
   d49f0:	f6bf aeb5 	bge.w	d475e <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d49f4:	e736      	b.n	d4864 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d49f6:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d49fa:	2b00      	cmp	r3, #0
   d49fc:	f6bf aea6 	bge.w	d474c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a00:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a04:	2b00      	cmp	r3, #0
   d4a06:	f6bf aea1 	bge.w	d474c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4a0a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4a0e:	2b00      	cmp	r3, #0
   d4a10:	f6bf ae9c 	bge.w	d474c <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d4a14:	e726      	b.n	d4864 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d4a16:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4a18:	2304      	movs	r3, #4
   d4a1a:	2202      	movs	r2, #2
   d4a1c:	e799      	b.n	d4952 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d4a1e:	bf00      	nop
   d4a20:	000d82cc 	.word	0x000d82cc
   d4a24:	000d82c0 	.word	0x000d82c0
   d4a28:	2003e39c 	.word	0x2003e39c
   d4a2c:	e000edf0 	.word	0xe000edf0
   d4a30:	e0001000 	.word	0xe0001000
   d4a34:	ffff800d 	.word	0xffff800d
   d4a38:	ffff8006 	.word	0xffff8006

000d4a3c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d4a3c:	8843      	ldrh	r3, [r0, #2]
   d4a3e:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d4a40:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d4a42:	d945      	bls.n	d4ad0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d4a44:	7a05      	ldrb	r5, [r0, #8]
   d4a46:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d4a4a:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d4a4e:	b2d6      	uxtb	r6, r2
   d4a50:	b145      	cbz	r5, d4a64 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d4a52:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d4a54:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d4a56:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d4a58:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d4a5c:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d4a60:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d4a64:	f890 c006 	ldrb.w	ip, [r0, #6]
   d4a68:	68c7      	ldr	r7, [r0, #12]
   d4a6a:	f1bc 0f06 	cmp.w	ip, #6
   d4a6e:	bf0c      	ite	eq
   d4a70:	2504      	moveq	r5, #4
   d4a72:	2503      	movne	r5, #3
   d4a74:	4369      	muls	r1, r5
   d4a76:	f1bc 0f08 	cmp.w	ip, #8
   d4a7a:	eb07 0501 	add.w	r5, r7, r1
   d4a7e:	d824      	bhi.n	d4aca <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d4a80:	f04f 0e01 	mov.w	lr, #1
   d4a84:	fa0e fe0c 	lsl.w	lr, lr, ip
   d4a88:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d4a8c:	d10c      	bne.n	d4aa8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d4a8e:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d4a92:	d10d      	bne.n	d4ab0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d4a94:	f01e 0f10 	tst.w	lr, #16
   d4a98:	d017      	beq.n	d4aca <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d4a9a:	2bff      	cmp	r3, #255	; 0xff
   d4a9c:	bf08      	it	eq
   d4a9e:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d4aa0:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d4aa2:	706e      	strb	r6, [r5, #1]
          *p = g;
   d4aa4:	70ac      	strb	r4, [r5, #2]
        } break;
   d4aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4aa8:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d4aaa:	706b      	strb	r3, [r5, #1]
          *p = b;
   d4aac:	70ae      	strb	r6, [r5, #2]
        } break;
   d4aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d4ab0:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4ab2:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d4ab4:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4ab6:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d4ab8:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4aba:	b90b      	cbnz	r3, d4ac0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d4abc:	b2d2      	uxtb	r2, r2
   d4abe:	e002      	b.n	d4ac6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4ac0:	435a      	muls	r2, r3
   d4ac2:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d4ac6:	70ea      	strb	r2, [r5, #3]
        } break;
   d4ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d4aca:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4acc:	706c      	strb	r4, [r5, #1]
          *p = b;
   d4ace:	70ae      	strb	r6, [r5, #2]
   d4ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ad2 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d4ad2:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
   d4ad4:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d4ad6:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d4ad8:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d4ada:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d4adc:	d01e      	beq.n	d4b1c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d4ade:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d4ae0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d4ae4:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d4ae6:	d00c      	beq.n	d4b02 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d4ae8:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d4aea:	bf1f      	itttt	ne
   d4aec:	0211      	lslne	r1, r2, #8
   d4aee:	f101 31ff 	addne.w	r1, r1, #4294967295
   d4af2:	fb91 f3f3 	sdivne	r3, r1, r3
   d4af6:	b29b      	uxthne	r3, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
   d4af8:	bf04      	itt	eq
   d4afa:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d4afe:	fb91 f3f3 	sdiveq	r3, r1, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d4b02:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d4b04:	1b29      	subs	r1, r5, r4
   d4b06:	8886      	ldrh	r6, [r0, #4]
   d4b08:	b289      	uxth	r1, r1
   d4b0a:	428e      	cmp	r6, r1
   d4b0c:	d905      	bls.n	d4b1a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
   d4b0e:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
   d4b10:	4359      	muls	r1, r3
   d4b12:	1209      	asrs	r1, r1, #8
   d4b14:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d4b18:	e7f4      	b.n	d4b04 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
   d4b1a:	7202      	strb	r2, [r0, #8]
   d4b1c:	bd70      	pop	{r4, r5, r6, pc}

000d4b1e <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d4b1e:	8882      	ldrh	r2, [r0, #4]
   d4b20:	68c0      	ldr	r0, [r0, #12]
   d4b22:	2100      	movs	r1, #0
   d4b24:	f002 beec 	b.w	d7900 <memset>

000d4b28 <_GLOBAL__sub_I_PIN_MAP2>:
}
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	f001 f9e7 	bl	d5efc <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4b2e:	f001 f9e5 	bl	d5efc <HAL_Pin_Map>
   d4b32:	4b01      	ldr	r3, [pc, #4]	; (d4b38 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4b34:	6018      	str	r0, [r3, #0]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	2003e39c 	.word	0x2003e39c

000d4b3c <_GLOBAL__sub_I__ZN19DFRobotDFPlayerMini10setTimeOutEm>:
   d4b3c:	f001 b9de 	b.w	d5efc <HAL_Pin_Map>

000d4b40 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d4b40:	f001 b9dc 	b.w	d5efc <HAL_Pin_Map>

000d4b44 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d4b44:	f001 b9da 	b.w	d5efc <HAL_Pin_Map>

000d4b48 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4b48:	b510      	push	{r4, lr}
   d4b4a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4b4c:	3024      	adds	r0, #36	; 0x24
   d4b4e:	f000 fe8f 	bl	d5870 <_ZN8FatCache4syncEv>
   d4b52:	b128      	cbz	r0, d4b60 <_ZN9FatVolume9cacheSyncEv+0x18>
   d4b54:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d4b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4b5c:	f000 be88 	b.w	d5870 <_ZN8FatCache4syncEv>
  }
   d4b60:	bd10      	pop	{r4, pc}

000d4b62 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d4b62:	1e41      	subs	r1, r0, #1
   d4b64:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d4b68:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4b6a:	0843      	lsrs	r3, r0, #1
   d4b6c:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d4b70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d4b74:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4b78:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4b7a:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4b7c:	d1f5      	bne.n	d4b6a <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d4b7e:	4770      	bx	lr

000d4b80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d4b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d4b84:	7803      	ldrb	r3, [r0, #0]
   d4b86:	2b20      	cmp	r3, #32
   d4b88:	f100 0401 	add.w	r4, r0, #1
   d4b8c:	d101      	bne.n	d4b92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d4b8e:	4620      	mov	r0, r4
   d4b90:	e7f8      	b.n	d4b84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4b92:	4f70      	ldr	r7, [pc, #448]	; (d4d54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d4b94:	6088      	str	r0, [r1, #8]
   d4b96:	4605      	mov	r5, r0
   d4b98:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d4b9a:	462e      	mov	r6, r5
   d4b9c:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d4ba0:	b30b      	cbz	r3, d4be6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4ba2:	2b2f      	cmp	r3, #47	; 0x2f
   d4ba4:	d101      	bne.n	d4baa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d4ba6:	1903      	adds	r3, r0, r4
   d4ba8:	e017      	b.n	d4bda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4baa:	2b5c      	cmp	r3, #92	; 0x5c
   d4bac:	d102      	bne.n	d4bb4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d4bae:	2000      	movs	r0, #0
   d4bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4bb4:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d4bb8:	b2e4      	uxtb	r4, r4
   d4bba:	2c1d      	cmp	r4, #29
   d4bbc:	d803      	bhi.n	d4bc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d4bbe:	fa27 f404 	lsr.w	r4, r7, r4
   d4bc2:	07e4      	lsls	r4, r4, #31
   d4bc4:	d4f3      	bmi.n	d4bae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d4bc6:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d4bca:	2c3c      	cmp	r4, #60	; 0x3c
   d4bcc:	d0ef      	beq.n	d4bae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d4bce:	3b20      	subs	r3, #32
   d4bd0:	2b5e      	cmp	r3, #94	; 0x5e
   d4bd2:	d9e1      	bls.n	d4b98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d4bd4:	e7eb      	b.n	d4bae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d4bd6:	2d2f      	cmp	r5, #47	; 0x2f
   d4bd8:	d105      	bne.n	d4be6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4bda:	461e      	mov	r6, r3
   d4bdc:	f813 5b01 	ldrb.w	r5, [r3], #1
   d4be0:	2d20      	cmp	r5, #32
   d4be2:	d1f8      	bne.n	d4bd6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d4be4:	e7f9      	b.n	d4bda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d4be6:	6016      	str	r6, [r2, #0]
   d4be8:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d4bea:	4298      	cmp	r0, r3
   d4bec:	ebc0 0803 	rsb	r8, r0, r3
   d4bf0:	d009      	beq.n	d4c06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d4bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d4bf6:	2a2e      	cmp	r2, #46	; 0x2e
   d4bf8:	d0f7      	beq.n	d4bea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d4bfa:	2a20      	cmp	r2, #32
   d4bfc:	d0f5      	beq.n	d4bea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d4bfe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d4c02:	dcd4      	bgt.n	d4bae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d4c04:	e001      	b.n	d4c0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d4c06:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d4c0a:	f8c1 8004 	str.w	r8, [r1, #4]
   d4c0e:	f101 030c 	add.w	r3, r1, #12
   d4c12:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d4c16:	2420      	movs	r4, #32
   d4c18:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d4c1c:	4293      	cmp	r3, r2
   d4c1e:	d1fb      	bne.n	d4c18 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d4c20:	4603      	mov	r3, r0
   d4c22:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d4c24:	f813 4b01 	ldrb.w	r4, [r3], #1
   d4c28:	2c2e      	cmp	r4, #46	; 0x2e
   d4c2a:	d0fa      	beq.n	d4c22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d4c2c:	2c20      	cmp	r4, #32
   d4c2e:	d0f8      	beq.n	d4c22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d4c30:	fab2 f482 	clz	r4, r2
   d4c34:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d4c36:	f108 36ff 	add.w	r6, r8, #4294967295
   d4c3a:	1c73      	adds	r3, r6, #1
   d4c3c:	d107      	bne.n	d4c4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d4c3e:	2700      	movs	r7, #0
   d4c40:	f04f 0e07 	mov.w	lr, #7
   d4c44:	463d      	mov	r5, r7
   d4c46:	46ba      	mov	sl, r7
   d4c48:	f04f 0908 	mov.w	r9, #8
   d4c4c:	e009      	b.n	d4c62 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d4c4e:	5d83      	ldrb	r3, [r0, r6]
   d4c50:	2b2e      	cmp	r3, #46	; 0x2e
   d4c52:	d0f4      	beq.n	d4c3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d4c54:	3e01      	subs	r6, #1
   d4c56:	e7f0      	b.n	d4c3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d4c58:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d4c5a:	2b20      	cmp	r3, #32
   d4c5c:	d104      	bne.n	d4c68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d4c5e:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d4c60:	3201      	adds	r2, #1
   d4c62:	4542      	cmp	r2, r8
   d4c64:	dbf8      	blt.n	d4c58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d4c66:	e04b      	b.n	d4d00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d4c68:	2b2e      	cmp	r3, #46	; 0x2e
   d4c6a:	d102      	bne.n	d4c72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d4c6c:	42b2      	cmp	r2, r6
   d4c6e:	d1f6      	bne.n	d4c5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d4c70:	e003      	b.n	d4c7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d4c72:	2b22      	cmp	r3, #34	; 0x22
   d4c74:	d017      	beq.n	d4ca6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d4c76:	2b7c      	cmp	r3, #124	; 0x7c
   d4c78:	d015      	beq.n	d4ca6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d4c7a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d4c7e:	f1bc 0f05 	cmp.w	ip, #5
   d4c82:	d801      	bhi.n	d4c88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d4c84:	2b2d      	cmp	r3, #45	; 0x2d
   d4c86:	d10e      	bne.n	d4ca6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d4c88:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d4c8c:	f1bc 0f05 	cmp.w	ip, #5
   d4c90:	d909      	bls.n	d4ca6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d4c92:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d4c96:	f1bc 0f02 	cmp.w	ip, #2
   d4c9a:	d904      	bls.n	d4ca6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d4c9c:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d4ca0:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d4ca4:	d902      	bls.n	d4cac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d4ca6:	42b2      	cmp	r2, r6
   d4ca8:	d10e      	bne.n	d4cc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d4caa:	e049      	b.n	d4d40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4cac:	42b2      	cmp	r2, r6
   d4cae:	d047      	beq.n	d4d40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d4cb0:	4575      	cmp	r5, lr
   d4cb2:	d821      	bhi.n	d4cf8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d4cb4:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d4cb8:	f1bc 0f19 	cmp.w	ip, #25
   d4cbc:	d808      	bhi.n	d4cd0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d4cbe:	3b20      	subs	r3, #32
   d4cc0:	b2db      	uxtb	r3, r3
        lc |= bit;
   d4cc2:	ea49 0707 	orr.w	r7, r9, r7
   d4cc6:	e00a      	b.n	d4cde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4cc8:	4575      	cmp	r5, lr
   d4cca:	d815      	bhi.n	d4cf8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d4ccc:	2400      	movs	r4, #0
      c = '_';
   d4cce:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d4cd0:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d4cd4:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d4cd8:	bf98      	it	ls
   d4cda:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d4cde:	f105 0c01 	add.w	ip, r5, #1
   d4ce2:	fa5f fc8c 	uxtb.w	ip, ip
   d4ce6:	440d      	add	r5, r1
      if (i < 7) {
   d4ce8:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d4cec:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d4cee:	d801      	bhi.n	d4cf4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d4cf0:	f881 c00c 	strb.w	ip, [r1, #12]
   d4cf4:	4665      	mov	r5, ip
   d4cf6:	e7b3      	b.n	d4c60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4cf8:	f1be 0f0a 	cmp.w	lr, #10
   d4cfc:	d117      	bne.n	d4d2e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d4cfe:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d4d00:	7b4b      	ldrb	r3, [r1, #13]
   d4d02:	2b20      	cmp	r3, #32
   d4d04:	f43f af53 	beq.w	d4bae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d4d08:	b13c      	cbz	r4, d4d1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d4d0a:	ea1a 0f07 	tst.w	sl, r7
   d4d0e:	bf18      	it	ne
   d4d10:	2702      	movne	r7, #2
   d4d12:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d4d14:	2001      	movs	r0, #1
   d4d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d4d1a:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d4d1c:	2001      	movs	r0, #1
   d4d1e:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d4d20:	4419      	add	r1, r3
   d4d22:	237e      	movs	r3, #126	; 0x7e
   d4d24:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d4d26:	2331      	movs	r3, #49	; 0x31
   d4d28:	738b      	strb	r3, [r1, #14]
   d4d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d4d2e:	42b2      	cmp	r2, r6
   d4d30:	dce5      	bgt.n	d4cfe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4d32:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4d34:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4d38:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4d3a:	f04f 0910 	mov.w	r9, #16
   d4d3e:	e78e      	b.n	d4c5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4d40:	f1be 0f0a 	cmp.w	lr, #10
   d4d44:	d0db      	beq.n	d4cfe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4d46:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4d48:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4d4c:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4d4e:	f04f 0910 	mov.w	r9, #16
   d4d52:	e785      	b.n	d4c60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d4d54:	31000101 	.word	0x31000101

000d4d58 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4d5c:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4d60:	4606      	mov	r6, r0
   d4d62:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4d64:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4d66:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4d68:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d4d6c:	6869      	ldr	r1, [r5, #4]
   d4d6e:	68aa      	ldr	r2, [r5, #8]
   d4d70:	1863      	adds	r3, r4, r1
   d4d72:	b29b      	uxth	r3, r3
   d4d74:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d4d76:	4291      	cmp	r1, r2
   d4d78:	d006      	beq.n	d4d88 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d4d7a:	f812 0b01 	ldrb.w	r0, [r2], #1
   d4d7e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d4d82:	4043      	eors	r3, r0
   d4d84:	b29b      	uxth	r3, r3
   d4d86:	e7f6      	b.n	d4d76 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d4d88:	f1b9 0f03 	cmp.w	r9, #3
   d4d8c:	bf28      	it	cs
   d4d8e:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4d92:	f109 0204 	add.w	r2, r9, #4
   d4d96:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d4d98:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4d9c:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4d9e:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4da0:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4da2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4da4:	bf94      	ite	ls
   d4da6:	3130      	addls	r1, #48	; 0x30
   d4da8:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4daa:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4dac:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d4dae:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4db2:	d3f1      	bcc.n	d4d98 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4db4:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4db8:	2100      	movs	r1, #0
   d4dba:	735f      	strb	r7, [r3, #13]
   d4dbc:	4630      	mov	r0, r6
   d4dbe:	f000 fb31 	bl	d5424 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d4dc2:	2101      	movs	r1, #1
   d4dc4:	4630      	mov	r0, r6
   d4dc6:	f000 fb10 	bl	d53ea <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d4dca:	4601      	mov	r1, r0
   d4dcc:	b928      	cbnz	r0, d4dda <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d4dce:	7870      	ldrb	r0, [r6, #1]
   d4dd0:	fab0 f080 	clz	r0, r0
   d4dd4:	0940      	lsrs	r0, r0, #5
   d4dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4dda:	7803      	ldrb	r3, [r0, #0]
   d4ddc:	b14b      	cbz	r3, d4df2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4dde:	7ac3      	ldrb	r3, [r0, #11]
   d4de0:	071b      	lsls	r3, r3, #28
   d4de2:	d4ee      	bmi.n	d4dc2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4de4:	220b      	movs	r2, #11
   d4de6:	4640      	mov	r0, r8
   d4de8:	f002 fd70 	bl	d78cc <memcmp>
   d4dec:	2800      	cmp	r0, #0
   d4dee:	d1e8      	bne.n	d4dc2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4df0:	e002      	b.n	d4df8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d4df2:	2001      	movs	r0, #1
   d4df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4df8:	3401      	adds	r4, #1
   d4dfa:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d4dfc:	2c64      	cmp	r4, #100	; 0x64
   d4dfe:	d1b5      	bne.n	d4d6c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d4e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4e04 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e08:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4e0a:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4e0c:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4e0e:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4e12:	9005      	str	r0, [sp, #20]
   d4e14:	460e      	mov	r6, r1
   d4e16:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4e18:	d101      	bne.n	d4e1e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d4e1a:	2000      	movs	r0, #0
   d4e1c:	e1a0      	b.n	d5160 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4e1e:	9b05      	ldr	r3, [sp, #20]
   d4e20:	781b      	ldrb	r3, [r3, #0]
   d4e22:	2b00      	cmp	r3, #0
   d4e24:	d1f9      	bne.n	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d4e26:	6853      	ldr	r3, [r2, #4]
   d4e28:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4e2a:	7813      	ldrb	r3, [r2, #0]
   d4e2c:	079b      	lsls	r3, r3, #30
   d4e2e:	f000 818d 	beq.w	d514c <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d4e32:	9b02      	ldr	r3, [sp, #8]
   d4e34:	270d      	movs	r7, #13
   d4e36:	330c      	adds	r3, #12
   d4e38:	fbb3 f7f7 	udiv	r7, r3, r7
   d4e3c:	3701      	adds	r7, #1
   d4e3e:	b2ff      	uxtb	r7, r7
   d4e40:	2100      	movs	r1, #0
   d4e42:	4630      	mov	r0, r6
   d4e44:	f000 faee 	bl	d5424 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d4e48:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4e4c:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d4e50:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d4e54:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d4e56:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d4e58:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d4e5a:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4e5e:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4e60:	6972      	ldr	r2, [r6, #20]
   d4e62:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d4e64:	2101      	movs	r1, #1
   d4e66:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4e68:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d4e6c:	f000 fabd 	bl	d53ea <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d4e70:	9b07      	ldr	r3, [sp, #28]
   d4e72:	b920      	cbnz	r0, d4e7e <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d4e74:	7873      	ldrb	r3, [r6, #1]
   d4e76:	2b00      	cmp	r3, #0
   d4e78:	f000 8090 	beq.w	d4f9c <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d4e7c:	e7cd      	b.n	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d4e7e:	7802      	ldrb	r2, [r0, #0]
   d4e80:	2ae5      	cmp	r2, #229	; 0xe5
   d4e82:	d000      	beq.n	d4e86 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d4e84:	b942      	cbnz	r2, d4e98 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4e86:	2c00      	cmp	r4, #0
   d4e88:	bf08      	it	eq
   d4e8a:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d4e8c:	42bc      	cmp	r4, r7
        freeFound++;
   d4e8e:	bf3c      	itt	cc
   d4e90:	3401      	addcc	r4, #1
   d4e92:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4e94:	b922      	cbnz	r2, d4ea0 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d4e96:	e081      	b.n	d4f9c <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d4e98:	42bc      	cmp	r4, r7
   d4e9a:	bf38      	it	cc
   d4e9c:	2400      	movcc	r4, #0
   d4e9e:	e003      	b.n	d4ea8 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4ea0:	2ae5      	cmp	r2, #229	; 0xe5
   d4ea2:	d101      	bne.n	d4ea8 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d4ea4:	2500      	movs	r5, #0
   d4ea6:	e7db      	b.n	d4e60 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4ea8:	2a2e      	cmp	r2, #46	; 0x2e
   d4eaa:	d0fb      	beq.n	d4ea4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4eac:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d4eae:	290f      	cmp	r1, #15
   d4eb0:	d152      	bne.n	d4f58 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d4eb2:	b93d      	cbnz	r5, d4ec4 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d4eb4:	0651      	lsls	r1, r2, #25
   d4eb6:	d5d3      	bpl.n	d4e60 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d4eb8:	7b43      	ldrb	r3, [r0, #13]
   d4eba:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d4ebc:	f002 051f 	and.w	r5, r2, #31
   d4ec0:	462b      	mov	r3, r5
   d4ec2:	e007      	b.n	d4ed4 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d4ec4:	3b01      	subs	r3, #1
   d4ec6:	b2db      	uxtb	r3, r3
   d4ec8:	429a      	cmp	r2, r3
   d4eca:	d1eb      	bne.n	d4ea4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4ecc:	7b42      	ldrb	r2, [r0, #13]
   d4ece:	9903      	ldr	r1, [sp, #12]
   d4ed0:	4291      	cmp	r1, r2
   d4ed2:	d1e7      	bne.n	d4ea4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d4ed4:	1e5a      	subs	r2, r3, #1
   d4ed6:	f04f 0c0d 	mov.w	ip, #13
   d4eda:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d4ede:	9a02      	ldr	r2, [sp, #8]
   d4ee0:	4562      	cmp	r2, ip
   d4ee2:	d9df      	bls.n	d4ea4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4ee4:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d4ee8:	f1be 0f04 	cmp.w	lr, #4
   d4eec:	fa5f f28e 	uxtb.w	r2, lr
   d4ef0:	d804      	bhi.n	d4efc <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d4ef2:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d4ef6:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d4efa:	e00c      	b.n	d4f16 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d4efc:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4efe:	bf95      	itete	ls
   d4f00:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4f04:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4f08:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4f0c:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4f10:	bf94      	ite	ls
   d4f12:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4f14:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d4f16:	9902      	ldr	r1, [sp, #8]
   d4f18:	4561      	cmp	r1, ip
   d4f1a:	d103      	bne.n	d4f24 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d4f1c:	2a00      	cmp	r2, #0
   d4f1e:	bf18      	it	ne
   d4f20:	2500      	movne	r5, #0
   d4f22:	e79d      	b.n	d4e60 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4f24:	2aff      	cmp	r2, #255	; 0xff
   d4f26:	d8bd      	bhi.n	d4ea4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4f28:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4f2a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d4f2e:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4f30:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d4f34:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4f38:	bf98      	it	ls
   d4f3a:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4f3c:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4f40:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d4f44:	bf98      	it	ls
   d4f46:	b2d2      	uxtbls	r2, r2
   d4f48:	f1bc 0f19 	cmp.w	ip, #25
   d4f4c:	bf9c      	itt	ls
   d4f4e:	3120      	addls	r1, #32
   d4f50:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4f52:	4291      	cmp	r1, r2
   d4f54:	d1a6      	bne.n	d4ea4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4f56:	e0fb      	b.n	d5150 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d4f58:	0709      	lsls	r1, r1, #28
   d4f5a:	d4a3      	bmi.n	d4ea4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d4f5c:	b14d      	cbz	r5, d4f72 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d4f5e:	2b01      	cmp	r3, #1
   d4f60:	f47f af5b 	bne.w	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4f64:	f7ff fdfd 	bl	d4b62 <_ZN7FatFile11lfnChecksumEPh>
   d4f68:	9b03      	ldr	r3, [sp, #12]
   d4f6a:	4283      	cmp	r3, r0
   d4f6c:	f47f af55 	bne.w	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4f70:	e00f      	b.n	d4f92 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4f72:	220b      	movs	r2, #11
   d4f74:	9906      	ldr	r1, [sp, #24]
   d4f76:	9307      	str	r3, [sp, #28]
   d4f78:	f002 fca8 	bl	d78cc <memcmp>
   d4f7c:	9b07      	ldr	r3, [sp, #28]
   d4f7e:	2800      	cmp	r0, #0
   d4f80:	f47f af6e 	bne.w	d4e60 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d4f84:	f899 2000 	ldrb.w	r2, [r9]
   d4f88:	07d2      	lsls	r2, r2, #31
   d4f8a:	d502      	bpl.n	d4f92 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d4f8c:	2201      	movs	r2, #1
   d4f8e:	9204      	str	r2, [sp, #16]
   d4f90:	e766      	b.n	d4e60 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d4f92:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d4f96:	f000 80d1 	beq.w	d513c <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d4f9a:	e73e      	b.n	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d4f9c:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d4fa0:	f43f af3b 	beq.w	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4fa4:	f00b 0303 	and.w	r3, fp, #3
   d4fa8:	3b01      	subs	r3, #1
   d4faa:	2b01      	cmp	r3, #1
   d4fac:	f63f af35 	bhi.w	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d4fb0:	2c00      	cmp	r4, #0
   d4fb2:	bf08      	it	eq
   d4fb4:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d4fb6:	42bc      	cmp	r4, r7
   d4fb8:	d302      	bcc.n	d4fc0 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d4fba:	9b04      	ldr	r3, [sp, #16]
   d4fbc:	b9cb      	cbnz	r3, d4ff2 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d4fbe:	e01f      	b.n	d5000 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d4fc0:	2100      	movs	r1, #0
   d4fc2:	4630      	mov	r0, r6
   d4fc4:	f000 fa11 	bl	d53ea <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d4fc8:	b910      	cbnz	r0, d4fd0 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d4fca:	7873      	ldrb	r3, [r6, #1]
   d4fcc:	b15b      	cbz	r3, d4fe6 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d4fce:	e724      	b.n	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d4fd0:	3401      	adds	r4, #1
   d4fd2:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d4fd4:	e7ef      	b.n	d4fb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d4fd6:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d4fd8:	791b      	ldrb	r3, [r3, #4]
   d4fda:	2b01      	cmp	r3, #1
   d4fdc:	d8ed      	bhi.n	d4fba <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d4fde:	3410      	adds	r4, #16
   d4fe0:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d4fe2:	42a7      	cmp	r7, r4
   d4fe4:	d9e9      	bls.n	d4fba <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d4fe6:	4630      	mov	r0, r6
   d4fe8:	f000 f8d2 	bl	d5190 <_ZN7FatFile13addDirClusterEv>
   d4fec:	2800      	cmp	r0, #0
   d4fee:	d1f2      	bne.n	d4fd6 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d4ff0:	e713      	b.n	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d4ff2:	4649      	mov	r1, r9
   d4ff4:	4630      	mov	r0, r6
   d4ff6:	f7ff feaf 	bl	d4d58 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d4ffa:	2800      	cmp	r0, #0
   d4ffc:	f43f af0d 	beq.w	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d5000:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d5004:	4630      	mov	r0, r6
   d5006:	f000 fa0d 	bl	d5424 <_ZN7FatFile7seekSetEm>
   d500a:	2800      	cmp	r0, #0
   d500c:	f43f af05 	beq.w	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d5010:	1e7d      	subs	r5, r7, #1
   d5012:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5014:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5016:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d501a:	f04f 080f 	mov.w	r8, #15
   d501e:	e041      	b.n	d50a4 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5020:	2100      	movs	r1, #0
   d5022:	4630      	mov	r0, r6
   d5024:	f000 f9e1 	bl	d53ea <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5028:	4607      	mov	r7, r0
   d502a:	2800      	cmp	r0, #0
   d502c:	f43f aef5 	beq.w	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5030:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d5032:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5036:	42ac      	cmp	r4, r5
   d5038:	f043 0301 	orr.w	r3, r3, #1
   d503c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5040:	bf0c      	ite	eq
   d5042:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d5046:	4622      	movne	r2, r4
   d5048:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d504a:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d504e:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d5052:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5056:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5058:	f7ff fd83 	bl	d4b62 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d505c:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d505e:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5060:	f887 a01a 	strb.w	sl, [r7, #26]
   d5064:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5068:	f002 021f 	and.w	r2, r2, #31
   d506c:	230d      	movs	r3, #13
   d506e:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5070:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5074:	435a      	muls	r2, r3
   d5076:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5078:	9902      	ldr	r1, [sp, #8]
   d507a:	4291      	cmp	r1, r2
   d507c:	d915      	bls.n	d50aa <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d507e:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d5082:	2b04      	cmp	r3, #4
   d5084:	fa5f fc83 	uxtb.w	ip, r3
   d5088:	f103 0001 	add.w	r0, r3, #1
   d508c:	d813      	bhi.n	d50b6 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d508e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d5092:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d5096:	280d      	cmp	r0, #13
   d5098:	f102 0201 	add.w	r2, r2, #1
   d509c:	4603      	mov	r3, r0
   d509e:	d1eb      	bne.n	d5078 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d50a0:	3c01      	subs	r4, #1
   d50a2:	b2e4      	uxtb	r4, r4
   d50a4:	2c00      	cmp	r4, #0
   d50a6:	d1bb      	bne.n	d5020 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d50a8:	e00e      	b.n	d50c8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d50aa:	bf14      	ite	ne
   d50ac:	f04f 31ff 	movne.w	r1, #4294967295
   d50b0:	2100      	moveq	r1, #0
   d50b2:	b289      	uxth	r1, r1
   d50b4:	e7e5      	b.n	d5082 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d50b6:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d50ba:	bf94      	ite	ls
   d50bc:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d50c0:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d50c4:	8099      	strh	r1, [r3, #4]
   d50c6:	e7e6      	b.n	d5096 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d50c8:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d50ca:	4621      	mov	r1, r4
   d50cc:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d50ce:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d50d2:	f000 f98a 	bl	d53ea <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d50d6:	4607      	mov	r7, r0
   d50d8:	2800      	cmp	r0, #0
   d50da:	f43f ae9e 	beq.w	d4e1a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d50de:	2220      	movs	r2, #32
   d50e0:	4621      	mov	r1, r4
   d50e2:	f002 fc0d 	bl	d7900 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d50e6:	464b      	mov	r3, r9
   d50e8:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d50ec:	603a      	str	r2, [r7, #0]
   d50ee:	685a      	ldr	r2, [r3, #4]
   d50f0:	607a      	str	r2, [r7, #4]
   d50f2:	891a      	ldrh	r2, [r3, #8]
   d50f4:	813a      	strh	r2, [r7, #8]
   d50f6:	7a9b      	ldrb	r3, [r3, #10]
   d50f8:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d50fa:	f899 3000 	ldrb.w	r3, [r9]
   d50fe:	f003 0318 	and.w	r3, r3, #24
   d5102:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5104:	4b18      	ldr	r3, [pc, #96]	; (d5168 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d5106:	681b      	ldr	r3, [r3, #0]
   d5108:	b12b      	cbz	r3, d5116 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d510a:	f107 010e 	add.w	r1, r7, #14
   d510e:	f107 0010 	add.w	r0, r7, #16
   d5112:	4798      	blx	r3
   d5114:	e006      	b.n	d5124 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d5116:	2321      	movs	r3, #33	; 0x21
   d5118:	743b      	strb	r3, [r7, #16]
   d511a:	2328      	movs	r3, #40	; 0x28
   d511c:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d511e:	2308      	movs	r3, #8
   d5120:	73bc      	strb	r4, [r7, #14]
   d5122:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5124:	8a3b      	ldrh	r3, [r7, #16]
   d5126:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5128:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d512a:	89fb      	ldrh	r3, [r7, #14]
   d512c:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d512e:	68b2      	ldr	r2, [r6, #8]
   d5130:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5134:	f043 0301 	orr.w	r3, r3, #1
   d5138:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d513c:	9500      	str	r5, [sp, #0]
   d513e:	465b      	mov	r3, fp
   d5140:	4652      	mov	r2, sl
   d5142:	4631      	mov	r1, r6
   d5144:	9805      	ldr	r0, [sp, #20]
   d5146:	f000 f9b6 	bl	d54b6 <_ZN7FatFile15openCachedEntryEPS_tih>
   d514a:	e009      	b.n	d5160 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d514c:	2701      	movs	r7, #1
   d514e:	e677      	b.n	d4e40 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5150:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5154:	f1be 0f0d 	cmp.w	lr, #13
   d5158:	f43f ae82 	beq.w	d4e60 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d515c:	46d4      	mov	ip, sl
   d515e:	e6c3      	b.n	d4ee8 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5160:	b009      	add	sp, #36	; 0x24
   d5162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5166:	bf00      	nop
   d5168:	2003e3a0 	.word	0x2003e3a0

000d516c <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d516c:	f000 bec6 	b.w	d5efc <HAL_Pin_Map>

000d5170 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5170:	f000 bec4 	b.w	d5efc <HAL_Pin_Map>

000d5174 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5174:	f000 bec2 	b.w	d5efc <HAL_Pin_Map>

000d5178 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5178:	f000 bec0 	b.w	d5efc <HAL_Pin_Map>

000d517c <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d517c:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d517e:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5180:	f043 0304 	orr.w	r3, r3, #4
   d5184:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5186:	f100 0210 	add.w	r2, r0, #16
   d518a:	6880      	ldr	r0, [r0, #8]
   d518c:	f000 bc26 	b.w	d59dc <_ZN9FatVolume15allocateClusterEmPm>

000d5190 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5194:	7803      	ldrb	r3, [r0, #0]
   d5196:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d519a:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d519c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d51a0:	b10b      	cbz	r3, d51a6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d51a2:	2600      	movs	r6, #0
   d51a4:	e02e      	b.n	d5204 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d51a6:	6942      	ldr	r2, [r0, #20]
   d51a8:	4b18      	ldr	r3, [pc, #96]	; (d520c <_ZN7FatFile13addDirClusterEv+0x7c>)
   d51aa:	429a      	cmp	r2, r3
   d51ac:	d8f9      	bhi.n	d51a2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d51ae:	f7ff ffe5 	bl	d517c <_ZN7FatFile10addClusterEv>
   d51b2:	4606      	mov	r6, r0
   d51b4:	2800      	cmp	r0, #0
   d51b6:	d0f4      	beq.n	d51a2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d51b8:	6921      	ldr	r1, [r4, #16]
   d51ba:	68a0      	ldr	r0, [r4, #8]
   d51bc:	f000 fba3 	bl	d5906 <_ZNK9FatVolume17clusterFirstBlockEm>
   d51c0:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d51c2:	68a0      	ldr	r0, [r4, #8]
   d51c4:	2205      	movs	r2, #5
   d51c6:	4639      	mov	r1, r7
   d51c8:	3024      	adds	r0, #36	; 0x24
   d51ca:	f000 fb78 	bl	d58be <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d51ce:	4680      	mov	r8, r0
   d51d0:	2800      	cmp	r0, #0
   d51d2:	d0e6      	beq.n	d51a2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d51d4:	4629      	mov	r1, r5
   d51d6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d51da:	f002 fb91 	bl	d7900 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d51de:	2501      	movs	r5, #1
   d51e0:	68a3      	ldr	r3, [r4, #8]
   d51e2:	791a      	ldrb	r2, [r3, #4]
   d51e4:	42aa      	cmp	r2, r5
   d51e6:	d909      	bls.n	d51fc <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d51e8:	4642      	mov	r2, r8
   d51ea:	19e9      	adds	r1, r5, r7
   d51ec:	6818      	ldr	r0, [r3, #0]
   d51ee:	f000 fda0 	bl	d5d32 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d51f2:	2800      	cmp	r0, #0
   d51f4:	d0d5      	beq.n	d51a2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d51f6:	3501      	adds	r5, #1
   d51f8:	b2ed      	uxtb	r5, r5
   d51fa:	e7f1      	b.n	d51e0 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d51fc:	6963      	ldr	r3, [r4, #20]
   d51fe:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5202:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5204:	4630      	mov	r0, r6
   d5206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d520a:	bf00      	nop
   d520c:	001ffdff 	.word	0x001ffdff

000d5210 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5210:	b510      	push	{r4, lr}
   d5212:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5214:	6880      	ldr	r0, [r0, #8]
   d5216:	460a      	mov	r2, r1
   d5218:	3024      	adds	r0, #36	; 0x24
   d521a:	69a1      	ldr	r1, [r4, #24]
   d521c:	f000 fb4f 	bl	d58be <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5220:	b120      	cbz	r0, d522c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5222:	88a3      	ldrh	r3, [r4, #4]
   d5224:	f003 030f 	and.w	r3, r3, #15
   d5228:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d522c:	bd10      	pop	{r4, pc}

000d522e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d522e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5230:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5232:	4605      	mov	r5, r0
   d5234:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5236:	b984      	cbnz	r4, d525a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5238:	2224      	movs	r2, #36	; 0x24
   d523a:	4621      	mov	r1, r4
   d523c:	f002 fb60 	bl	d7900 <memset>

  m_vol = vol;
   d5240:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5242:	79f3      	ldrb	r3, [r6, #7]
   d5244:	2b10      	cmp	r3, #16
   d5246:	d003      	beq.n	d5250 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5248:	2b20      	cmp	r3, #32
   d524a:	d106      	bne.n	d525a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d524c:	2340      	movs	r3, #64	; 0x40
   d524e:	e000      	b.n	d5252 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5250:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5252:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5254:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5256:	70a8      	strb	r0, [r5, #2]
   d5258:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d525a:	2000      	movs	r0, #0
   d525c:	bd70      	pop	{r4, r5, r6, pc}

000d525e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d525e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5262:	7803      	ldrb	r3, [r0, #0]
   d5264:	4604      	mov	r4, r0
   d5266:	4689      	mov	r9, r1
   d5268:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d526a:	b14b      	cbz	r3, d5280 <_ZN7FatFile4readEPvj+0x22>
   d526c:	7882      	ldrb	r2, [r0, #2]
   d526e:	07d1      	lsls	r1, r2, #31
   d5270:	d506      	bpl.n	d5280 <_ZN7FatFile4readEPvj+0x22>
   d5272:	e00c      	b.n	d528e <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5274:	465a      	mov	r2, fp
   d5276:	6921      	ldr	r1, [r4, #16]
   d5278:	f000 fb4b 	bl	d5912 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d527c:	2800      	cmp	r0, #0
   d527e:	da3d      	bge.n	d52fc <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5280:	7863      	ldrb	r3, [r4, #1]
   d5282:	f043 0302 	orr.w	r3, r3, #2
   d5286:	7063      	strb	r3, [r4, #1]
  return -1;
   d5288:	f04f 30ff 	mov.w	r0, #4294967295
   d528c:	e097      	b.n	d53be <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d528e:	071a      	lsls	r2, r3, #28
   d5290:	d503      	bpl.n	d529a <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5292:	69e3      	ldr	r3, [r4, #28]
   d5294:	6962      	ldr	r2, [r4, #20]
   d5296:	1a9b      	subs	r3, r3, r2
   d5298:	e007      	b.n	d52aa <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d529a:	069a      	lsls	r2, r3, #26
   d529c:	d508      	bpl.n	d52b0 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d529e:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d52a0:	891a      	ldrh	r2, [r3, #8]
   d52a2:	6963      	ldr	r3, [r4, #20]
   d52a4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d52a8:	b29b      	uxth	r3, r3
   d52aa:	429d      	cmp	r5, r3
   d52ac:	bf28      	it	cs
   d52ae:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d52b0:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d52b2:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d52b6:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d52ba:	2e00      	cmp	r6, #0
   d52bc:	d035      	beq.n	d532a <_ZN7FatFile4readEPvj+0xcc>
   d52be:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d52c0:	6963      	ldr	r3, [r4, #20]
   d52c2:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d52c4:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d52c8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d52cc:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d52d0:	d002      	beq.n	d52d8 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d52d2:	6a03      	ldr	r3, [r0, #32]
   d52d4:	4419      	add	r1, r3
   d52d6:	e01d      	b.n	d5314 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d52d8:	f890 8005 	ldrb.w	r8, [r0, #5]
   d52dc:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d52e0:	f1ba 0f00 	cmp.w	sl, #0
   d52e4:	d110      	bne.n	d5308 <_ZN7FatFile4readEPvj+0xaa>
   d52e6:	f1b8 0f00 	cmp.w	r8, #0
   d52ea:	d10d      	bne.n	d5308 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d52ec:	2b00      	cmp	r3, #0
   d52ee:	d1c1      	bne.n	d5274 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d52f0:	0653      	lsls	r3, r2, #25
   d52f2:	bf4c      	ite	mi
   d52f4:	6a03      	ldrmi	r3, [r0, #32]
   d52f6:	6a23      	ldrpl	r3, [r4, #32]
   d52f8:	6123      	str	r3, [r4, #16]
   d52fa:	e005      	b.n	d5308 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d52fc:	d104      	bne.n	d5308 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d52fe:	7823      	ldrb	r3, [r4, #0]
   d5300:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5304:	d111      	bne.n	d532a <_ZN7FatFile4readEPvj+0xcc>
   d5306:	e7bb      	b.n	d5280 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5308:	6921      	ldr	r1, [r4, #16]
   d530a:	68a0      	ldr	r0, [r4, #8]
   d530c:	f000 fafb 	bl	d5906 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5310:	eb08 0100 	add.w	r1, r8, r0
   d5314:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5316:	f1ba 0f00 	cmp.w	sl, #0
   d531a:	d135      	bne.n	d5388 <_ZN7FatFile4readEPvj+0x12a>
   d531c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5320:	d332      	bcc.n	d5388 <_ZN7FatFile4readEPvj+0x12a>
   d5322:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5324:	4299      	cmp	r1, r3
   d5326:	d102      	bne.n	d532e <_ZN7FatFile4readEPvj+0xd0>
   d5328:	e02e      	b.n	d5388 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d532a:	1ba8      	subs	r0, r5, r6
   d532c:	e047      	b.n	d53be <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d532e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5332:	d31b      	bcc.n	d536c <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5334:	7822      	ldrb	r2, [r4, #0]
   d5336:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5338:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d533c:	d406      	bmi.n	d534c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d533e:	7902      	ldrb	r2, [r0, #4]
   d5340:	ebc8 0202 	rsb	r2, r8, r2
   d5344:	b2d2      	uxtb	r2, r2
   d5346:	4592      	cmp	sl, r2
   d5348:	bf28      	it	cs
   d534a:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d534c:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d534e:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5352:	d207      	bcs.n	d5364 <_ZN7FatFile4readEPvj+0x106>
   d5354:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5356:	4653      	mov	r3, sl
   d5358:	464a      	mov	r2, r9
   d535a:	6800      	ldr	r0, [r0, #0]
   d535c:	f000 fca7 	bl	d5cae <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5360:	b960      	cbnz	r0, d537c <_ZN7FatFile4readEPvj+0x11e>
   d5362:	e78d      	b.n	d5280 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5364:	4453      	add	r3, sl
   d5366:	4299      	cmp	r1, r3
   d5368:	d321      	bcc.n	d53ae <_ZN7FatFile4readEPvj+0x150>
   d536a:	e7f3      	b.n	d5354 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d536c:	464a      	mov	r2, r9
   d536e:	6800      	ldr	r0, [r0, #0]
   d5370:	f000 fc55 	bl	d5c1e <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5374:	2800      	cmp	r0, #0
   d5376:	d083      	beq.n	d5280 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5378:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d537c:	6963      	ldr	r3, [r4, #20]
   d537e:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5380:	44b9      	add	r9, r7
    m_curPosition += n;
   d5382:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5384:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5386:	e798      	b.n	d52ba <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5388:	2200      	movs	r2, #0
   d538a:	3024      	adds	r0, #36	; 0x24
   d538c:	f000 fa97 	bl	d58be <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5390:	2800      	cmp	r0, #0
   d5392:	f43f af75 	beq.w	d5280 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5396:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d539a:	42b7      	cmp	r7, r6
   d539c:	bf28      	it	cs
   d539e:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d53a0:	eb00 010a 	add.w	r1, r0, sl
   d53a4:	463a      	mov	r2, r7
   d53a6:	4648      	mov	r0, r9
   d53a8:	f002 fa9f 	bl	d78ea <memcpy>
   d53ac:	e7e6      	b.n	d537c <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d53ae:	3024      	adds	r0, #36	; 0x24
   d53b0:	9101      	str	r1, [sp, #4]
   d53b2:	f000 fa5d 	bl	d5870 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d53b6:	9901      	ldr	r1, [sp, #4]
   d53b8:	2800      	cmp	r0, #0
   d53ba:	d1cb      	bne.n	d5354 <_ZN7FatFile4readEPvj+0xf6>
   d53bc:	e760      	b.n	d5280 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d53be:	b003      	add	sp, #12
   d53c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d53c4 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d53c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d53c6:	2201      	movs	r2, #1
   d53c8:	f10d 0107 	add.w	r1, sp, #7
   d53cc:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d53ce:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d53d0:	6905      	ldr	r5, [r0, #16]
   d53d2:	f7ff ff44 	bl	d525e <_ZN7FatFile4readEPvj>
   d53d6:	2801      	cmp	r0, #1
   d53d8:	bf05      	ittet	eq
   d53da:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d53de:	6166      	streq	r6, [r4, #20]
   d53e0:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d53e4:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d53e6:	b002      	add	sp, #8
   d53e8:	bd70      	pop	{r4, r5, r6, pc}

000d53ea <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d53ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d53ec:	6943      	ldr	r3, [r0, #20]
   d53ee:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d53f2:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d53f4:	b105      	cbz	r5, d53f8 <_ZN7FatFile12readDirCacheEb+0xe>
   d53f6:	b969      	cbnz	r1, d5414 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d53f8:	2201      	movs	r2, #1
   d53fa:	f10d 0107 	add.w	r1, sp, #7
   d53fe:	4620      	mov	r0, r4
   d5400:	f7ff ff2d 	bl	d525e <_ZN7FatFile4readEPvj>
   d5404:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5406:	2801      	cmp	r0, #1
   d5408:	d001      	beq.n	d540e <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d540a:	2000      	movs	r0, #0
   d540c:	e008      	b.n	d5420 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d540e:	6963      	ldr	r3, [r4, #20]
   d5410:	331f      	adds	r3, #31
   d5412:	e000      	b.n	d5416 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5414:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5416:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5418:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d541a:	3030      	adds	r0, #48	; 0x30
   d541c:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5420:	b003      	add	sp, #12
   d5422:	bd30      	pop	{r4, r5, pc}

000d5424 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5428:	460e      	mov	r6, r1
   d542a:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d542c:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d542e:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5430:	2900      	cmp	r1, #0
   d5432:	d039      	beq.n	d54a8 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5434:	6945      	ldr	r5, [r0, #20]
   d5436:	42b5      	cmp	r5, r6
   d5438:	d03a      	beq.n	d54b0 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d543a:	b90e      	cbnz	r6, d5440 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d543c:	6106      	str	r6, [r0, #16]
    goto done;
   d543e:	e031      	b.n	d54a4 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5440:	070b      	lsls	r3, r1, #28
   d5442:	d503      	bpl.n	d544c <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5444:	69c3      	ldr	r3, [r0, #28]
   d5446:	429e      	cmp	r6, r3
   d5448:	d82e      	bhi.n	d54a8 <_ZN7FatFile7seekSetEm+0x84>
   d544a:	e007      	b.n	d545c <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d544c:	0688      	lsls	r0, r1, #26
   d544e:	d505      	bpl.n	d545c <_ZN7FatFile7seekSetEm+0x38>
   d5450:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5452:	891b      	ldrh	r3, [r3, #8]
   d5454:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5458:	d826      	bhi.n	d54a8 <_ZN7FatFile7seekSetEm+0x84>
   d545a:	e023      	b.n	d54a4 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d545c:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5460:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5464:	1e6a      	subs	r2, r5, #1
   d5466:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d546a:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d546c:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d546e:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5470:	429a      	cmp	r2, r3
   d5472:	d800      	bhi.n	d5476 <_ZN7FatFile7seekSetEm+0x52>
   d5474:	b94d      	cbnz	r5, d548a <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5476:	064a      	lsls	r2, r1, #25
   d5478:	bf4c      	ite	mi
   d547a:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d547e:	6a22      	ldrpl	r2, [r4, #32]
   d5480:	6122      	str	r2, [r4, #16]
   d5482:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5484:	f104 0810 	add.w	r8, r4, #16
   d5488:	e00a      	b.n	d54a0 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d548a:	1a9b      	subs	r3, r3, r2
   d548c:	e7f9      	b.n	d5482 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d548e:	4642      	mov	r2, r8
   d5490:	6921      	ldr	r1, [r4, #16]
   d5492:	68a0      	ldr	r0, [r4, #8]
   d5494:	f000 fa3d 	bl	d5912 <_ZN9FatVolume6fatGetEmPm>
   d5498:	2800      	cmp	r0, #0
   d549a:	f105 35ff 	add.w	r5, r5, #4294967295
   d549e:	dd03      	ble.n	d54a8 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d54a0:	2d00      	cmp	r5, #0
   d54a2:	d1f4      	bne.n	d548e <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d54a4:	6166      	str	r6, [r4, #20]
   d54a6:	e003      	b.n	d54b0 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d54a8:	6127      	str	r7, [r4, #16]
  return false;
   d54aa:	2000      	movs	r0, #0
   d54ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d54b0:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d54b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d54b6 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d54b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54b8:	460f      	mov	r7, r1
   d54ba:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d54bc:	2100      	movs	r1, #0
   d54be:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d54c0:	4604      	mov	r4, r0
   d54c2:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d54c4:	f002 fa1c 	bl	d7900 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d54c8:	68b8      	ldr	r0, [r7, #8]
   d54ca:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d54cc:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d54d0:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d54d2:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d54d6:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d54d8:	6a3b      	ldr	r3, [r7, #32]
   d54da:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d54dc:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d54de:	7acb      	ldrb	r3, [r1, #11]
   d54e0:	071d      	lsls	r5, r3, #28
   d54e2:	d44c      	bmi.n	d557e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d54e4:	1883      	adds	r3, r0, r2
   d54e6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d54ea:	f003 0317 	and.w	r3, r3, #23
   d54ee:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d54f0:	7ac9      	ldrb	r1, [r1, #11]
   d54f2:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d54f6:	bf04      	itt	eq
   d54f8:	f043 0308 	orreq.w	r3, r3, #8
   d54fc:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d54fe:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5502:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5504:	f006 0303 	and.w	r3, r6, #3
   d5508:	2b01      	cmp	r3, #1
   d550a:	d009      	beq.n	d5520 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d550c:	2b02      	cmp	r3, #2
   d550e:	d005      	beq.n	d551c <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5510:	2b00      	cmp	r3, #0
   d5512:	d134      	bne.n	d557e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5514:	0571      	lsls	r1, r6, #21
   d5516:	d432      	bmi.n	d557e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5518:	2301      	movs	r3, #1
   d551a:	e002      	b.n	d5522 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d551c:	2303      	movs	r3, #3
   d551e:	e000      	b.n	d5522 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5520:	2302      	movs	r3, #2
   d5522:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5524:	78a1      	ldrb	r1, [r4, #2]
   d5526:	078b      	lsls	r3, r1, #30
   d5528:	d503      	bpl.n	d5532 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d552a:	7823      	ldrb	r3, [r4, #0]
   d552c:	f013 0f11 	tst.w	r3, #17
   d5530:	d125      	bne.n	d557e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5532:	b24b      	sxtb	r3, r1
   d5534:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5538:	f006 0108 	and.w	r1, r6, #8
   d553c:	bf14      	ite	ne
   d553e:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5542:	2700      	moveq	r7, #0
   d5544:	4319      	orrs	r1, r3
   d5546:	4339      	orrs	r1, r7
   d5548:	70a1      	strb	r1, [r4, #2]
   d554a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d554c:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d554e:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5550:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5552:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5556:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d555a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d555e:	d504      	bpl.n	d556a <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5560:	b181      	cbz	r1, d5584 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5562:	f000 fa76 	bl	d5a52 <_ZN9FatVolume9freeChainEm>
   d5566:	b968      	cbnz	r0, d5584 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5568:	e009      	b.n	d557e <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d556a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d556c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d556e:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5570:	0473      	lsls	r3, r6, #17
   d5572:	d50c      	bpl.n	d558e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5574:	69e1      	ldr	r1, [r4, #28]
   d5576:	4620      	mov	r0, r4
   d5578:	f7ff ff54 	bl	d5424 <_ZN7FatFile7seekSetEm>
   d557c:	b938      	cbnz	r0, d558e <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d557e:	2000      	movs	r0, #0
   d5580:	7020      	strb	r0, [r4, #0]
  return false;
   d5582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5584:	78a3      	ldrb	r3, [r4, #2]
   d5586:	f043 0304 	orr.w	r3, r3, #4
   d558a:	70a3      	strb	r3, [r4, #2]
   d558c:	e7f0      	b.n	d5570 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d558e:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5594 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5594:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5596:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5598:	4604      	mov	r4, r0
  if (!isOpen()) {
   d559a:	b90b      	cbnz	r3, d55a0 <_ZN7FatFile4syncEv+0xc>
    return true;
   d559c:	2001      	movs	r0, #1
   d559e:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d55a0:	7883      	ldrb	r3, [r0, #2]
   d55a2:	075a      	lsls	r2, r3, #29
   d55a4:	d523      	bpl.n	d55ee <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d55a6:	2101      	movs	r1, #1
   d55a8:	f7ff fe32 	bl	d5210 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d55ac:	4605      	mov	r5, r0
   d55ae:	b928      	cbnz	r0, d55bc <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d55b0:	7863      	ldrb	r3, [r4, #1]
   d55b2:	f043 0301 	orr.w	r3, r3, #1
   d55b6:	7063      	strb	r3, [r4, #1]
  return false;
   d55b8:	2000      	movs	r0, #0
   d55ba:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d55bc:	7803      	ldrb	r3, [r0, #0]
   d55be:	2be5      	cmp	r3, #229	; 0xe5
   d55c0:	d0f6      	beq.n	d55b0 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d55c2:	7823      	ldrb	r3, [r4, #0]
   d55c4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d55c6:	bf44      	itt	mi
   d55c8:	69e3      	ldrmi	r3, [r4, #28]
   d55ca:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d55cc:	8c23      	ldrh	r3, [r4, #32]
   d55ce:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d55d0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d55d2:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d55d4:	4b09      	ldr	r3, [pc, #36]	; (d55fc <_ZN7FatFile4syncEv+0x68>)
   d55d6:	681b      	ldr	r3, [r3, #0]
   d55d8:	b12b      	cbz	r3, d55e6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d55da:	f100 0116 	add.w	r1, r0, #22
   d55de:	3018      	adds	r0, #24
   d55e0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d55e2:	8b2b      	ldrh	r3, [r5, #24]
   d55e4:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d55e6:	78a3      	ldrb	r3, [r4, #2]
   d55e8:	f023 0304 	bic.w	r3, r3, #4
   d55ec:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d55ee:	68a0      	ldr	r0, [r4, #8]
   d55f0:	f7ff faaa 	bl	d4b48 <_ZN9FatVolume9cacheSyncEv>
   d55f4:	2800      	cmp	r0, #0
   d55f6:	d0db      	beq.n	d55b0 <_ZN7FatFile4syncEv+0x1c>
   d55f8:	e7d0      	b.n	d559c <_ZN7FatFile4syncEv+0x8>
   d55fa:	bf00      	nop
   d55fc:	2003e3a0 	.word	0x2003e3a0

000d5600 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5600:	b510      	push	{r4, lr}
   d5602:	4604      	mov	r4, r0
  bool rtn = sync();
   d5604:	f7ff ffc6 	bl	d5594 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5608:	2300      	movs	r3, #0
   d560a:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d560c:	bd10      	pop	{r4, pc}

000d560e <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d560e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5610:	b093      	sub	sp, #76	; 0x4c
   d5612:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5614:	2300      	movs	r3, #0
   d5616:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d561a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d561e:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5620:	9201      	str	r2, [sp, #4]
   d5622:	4606      	mov	r6, r0
   d5624:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5626:	b10b      	cbz	r3, d562c <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5628:	2000      	movs	r0, #0
   d562a:	e03d      	b.n	d56a8 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d562c:	780b      	ldrb	r3, [r1, #0]
   d562e:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5632:	d0f9      	beq.n	d5628 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5634:	7813      	ldrb	r3, [r2, #0]
   d5636:	2b2f      	cmp	r3, #47	; 0x2f
   d5638:	d112      	bne.n	d5660 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d563a:	9b01      	ldr	r3, [sp, #4]
   d563c:	781a      	ldrb	r2, [r3, #0]
   d563e:	2a2f      	cmp	r2, #47	; 0x2f
   d5640:	d102      	bne.n	d5648 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5642:	3301      	adds	r3, #1
   d5644:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d5646:	e7f8      	b.n	d563a <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5648:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d564a:	b91a      	cbnz	r2, d5654 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d564c:	4630      	mov	r0, r6
   d564e:	f7ff fdee 	bl	d522e <_ZN7FatFile8openRootEP9FatVolume>
   d5652:	e029      	b.n	d56a8 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5654:	a809      	add	r0, sp, #36	; 0x24
   d5656:	f7ff fdea 	bl	d522e <_ZN7FatFile8openRootEP9FatVolume>
   d565a:	2800      	cmp	r0, #0
   d565c:	d0e4      	beq.n	d5628 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d565e:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5660:	aa01      	add	r2, sp, #4
   d5662:	a903      	add	r1, sp, #12
   d5664:	9801      	ldr	r0, [sp, #4]
   d5666:	f7ff fa8b 	bl	d4b80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d566a:	2800      	cmp	r0, #0
   d566c:	d0dc      	beq.n	d5628 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d566e:	9b01      	ldr	r3, [sp, #4]
   d5670:	781b      	ldrb	r3, [r3, #0]
   d5672:	b19b      	cbz	r3, d569c <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5674:	2300      	movs	r3, #0
   d5676:	aa03      	add	r2, sp, #12
   d5678:	4621      	mov	r1, r4
   d567a:	4630      	mov	r0, r6
   d567c:	f7ff fbc2 	bl	d4e04 <_ZN7FatFile4openEPS_P7fname_ti>
   d5680:	2800      	cmp	r0, #0
   d5682:	d0d1      	beq.n	d5628 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5684:	4635      	mov	r5, r6
   d5686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5688:	ac09      	add	r4, sp, #36	; 0x24
   d568a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d568c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d568e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5690:	682b      	ldr	r3, [r5, #0]
   d5692:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5694:	4630      	mov	r0, r6
   d5696:	f7ff ffb3 	bl	d5600 <_ZN7FatFile5closeEv>
   d569a:	e7e0      	b.n	d565e <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d569c:	463b      	mov	r3, r7
   d569e:	aa03      	add	r2, sp, #12
   d56a0:	4621      	mov	r1, r4
   d56a2:	4630      	mov	r0, r6
   d56a4:	f7ff fbae 	bl	d4e04 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d56a8:	b013      	add	sp, #76	; 0x4c
   d56aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d56ac <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d56ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d56b0:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d56b2:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d56b4:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d56b6:	4604      	mov	r4, r0
   d56b8:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d56ba:	d508      	bpl.n	d56ce <_ZN7FatFile5writeEPKvj+0x22>
   d56bc:	7883      	ldrb	r3, [r0, #2]
   d56be:	079a      	lsls	r2, r3, #30
   d56c0:	d505      	bpl.n	d56ce <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d56c2:	071b      	lsls	r3, r3, #28
   d56c4:	d50b      	bpl.n	d56de <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d56c6:	69e1      	ldr	r1, [r4, #28]
   d56c8:	f7ff feac 	bl	d5424 <_ZN7FatFile7seekSetEm>
   d56cc:	b938      	cbnz	r0, d56de <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d56ce:	7863      	ldrb	r3, [r4, #1]
   d56d0:	f043 0301 	orr.w	r3, r3, #1
   d56d4:	7063      	strb	r3, [r4, #1]
  return -1;
   d56d6:	f04f 30ff 	mov.w	r0, #4294967295
   d56da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d56de:	6963      	ldr	r3, [r4, #20]
   d56e0:	43db      	mvns	r3, r3
   d56e2:	4598      	cmp	r8, r3
   d56e4:	d8f3      	bhi.n	d56ce <_ZN7FatFile5writeEPKvj+0x22>
   d56e6:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d56e8:	f04f 0a00 	mov.w	sl, #0
   d56ec:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d56ee:	2e00      	cmp	r6, #0
   d56f0:	f000 8081 	beq.w	d57f6 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d56f4:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d56f6:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d56f8:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d56fc:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5700:	d11c      	bne.n	d573c <_ZN7FatFile5writeEPKvj+0x90>
   d5702:	b9df      	cbnz	r7, d573c <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5704:	6921      	ldr	r1, [r4, #16]
   d5706:	b171      	cbz	r1, d5726 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5708:	f104 0210 	add.w	r2, r4, #16
   d570c:	f000 f901 	bl	d5912 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5710:	2800      	cmp	r0, #0
   d5712:	dbdc      	blt.n	d56ce <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5714:	f040 808e 	bne.w	d5834 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5718:	4620      	mov	r0, r4
   d571a:	f7ff fd2f 	bl	d517c <_ZN7FatFile10addClusterEv>
   d571e:	2800      	cmp	r0, #0
   d5720:	f040 8088 	bne.w	d5834 <_ZN7FatFile5writeEPKvj+0x188>
   d5724:	e7d3      	b.n	d56ce <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5726:	6a23      	ldr	r3, [r4, #32]
   d5728:	b93b      	cbnz	r3, d573a <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d572a:	4620      	mov	r0, r4
   d572c:	f7ff fd26 	bl	d517c <_ZN7FatFile10addClusterEv>
   d5730:	2800      	cmp	r0, #0
   d5732:	d0cc      	beq.n	d56ce <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5734:	6923      	ldr	r3, [r4, #16]
   d5736:	6223      	str	r3, [r4, #32]
   d5738:	e000      	b.n	d573c <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d573a:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d573c:	6921      	ldr	r1, [r4, #16]
   d573e:	68a0      	ldr	r0, [r4, #8]
   d5740:	f000 f8e1 	bl	d5906 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5744:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5746:	b917      	cbnz	r7, d574e <_ZN7FatFile5writeEPKvj+0xa2>
   d5748:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d574c:	d221      	bcs.n	d5792 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d574e:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5752:	42b5      	cmp	r5, r6
   d5754:	bf28      	it	cs
   d5756:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5758:	b937      	cbnz	r7, d5768 <_ZN7FatFile5writeEPKvj+0xbc>
   d575a:	6963      	ldr	r3, [r4, #20]
   d575c:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d575e:	4293      	cmp	r3, r2
   d5760:	bf34      	ite	cc
   d5762:	2201      	movcc	r2, #1
   d5764:	2205      	movcs	r2, #5
   d5766:	e000      	b.n	d576a <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5768:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d576a:	68a0      	ldr	r0, [r4, #8]
   d576c:	3024      	adds	r0, #36	; 0x24
   d576e:	f000 f8a6 	bl	d58be <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5772:	2800      	cmp	r0, #0
   d5774:	d0ab      	beq.n	d56ce <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5776:	4438      	add	r0, r7
   d5778:	462a      	mov	r2, r5
   d577a:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d577c:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d577e:	f002 f8b4 	bl	d78ea <memcpy>
      if (512 == (n + blockOffset)) {
   d5782:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5786:	d130      	bne.n	d57ea <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5788:	68a0      	ldr	r0, [r4, #8]
   d578a:	3024      	adds	r0, #36	; 0x24
   d578c:	f000 f870 	bl	d5870 <_ZN8FatCache4syncEv>
   d5790:	e017      	b.n	d57c2 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5792:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5796:	68a0      	ldr	r0, [r4, #8]
   d5798:	d315      	bcc.n	d57c6 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d579a:	7902      	ldrb	r2, [r0, #4]
   d579c:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d579e:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d57a0:	b2d2      	uxtb	r2, r2
   d57a2:	4293      	cmp	r3, r2
   d57a4:	bf28      	it	cs
   d57a6:	4613      	movcs	r3, r2
   d57a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d57aa:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d57ac:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d57b0:	d302      	bcc.n	d57b8 <_ZN7FatFile5writeEPKvj+0x10c>
   d57b2:	441a      	add	r2, r3
   d57b4:	4291      	cmp	r1, r2
   d57b6:	d337      	bcc.n	d5828 <_ZN7FatFile5writeEPKvj+0x17c>
   d57b8:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d57ba:	464a      	mov	r2, r9
   d57bc:	6838      	ldr	r0, [r7, #0]
   d57be:	f000 fb2a 	bl	d5e16 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d57c2:	b990      	cbnz	r0, d57ea <_ZN7FatFile5writeEPKvj+0x13e>
   d57c4:	e783      	b.n	d56ce <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d57c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d57c8:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d57ca:	bf02      	ittt	eq
   d57cc:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d57d0:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d57d4:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d57d6:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d57d8:	464a      	mov	r2, r9
   d57da:	6818      	ldr	r0, [r3, #0]
   d57dc:	f000 faa9 	bl	d5d32 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d57e0:	2800      	cmp	r0, #0
   d57e2:	f43f af74 	beq.w	d56ce <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d57e6:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d57ea:	6963      	ldr	r3, [r4, #20]
   d57ec:	442b      	add	r3, r5
   d57ee:	6163      	str	r3, [r4, #20]
    src += n;
   d57f0:	44a9      	add	r9, r5
    nToWrite -= n;
   d57f2:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d57f4:	e77a      	b.n	d56ec <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d57f6:	69e2      	ldr	r2, [r4, #28]
   d57f8:	4293      	cmp	r3, r2
   d57fa:	d901      	bls.n	d5800 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d57fc:	61e3      	str	r3, [r4, #28]
   d57fe:	e002      	b.n	d5806 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5800:	4b0f      	ldr	r3, [pc, #60]	; (d5840 <_ZN7FatFile5writeEPKvj+0x194>)
   d5802:	681b      	ldr	r3, [r3, #0]
   d5804:	b11b      	cbz	r3, d580e <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5806:	78a3      	ldrb	r3, [r4, #2]
   d5808:	f043 0304 	orr.w	r3, r3, #4
   d580c:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d580e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5812:	2b00      	cmp	r3, #0
   d5814:	db02      	blt.n	d581c <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5816:	4640      	mov	r0, r8
   d5818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d581c:	4620      	mov	r0, r4
   d581e:	f7ff feb9 	bl	d5594 <_ZN7FatFile4syncEv>
   d5822:	2800      	cmp	r0, #0
   d5824:	d1f7      	bne.n	d5816 <_ZN7FatFile5writeEPKvj+0x16a>
   d5826:	e752      	b.n	d56ce <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5828:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d582c:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5830:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5832:	e7c1      	b.n	d57b8 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5834:	6921      	ldr	r1, [r4, #16]
   d5836:	68a0      	ldr	r0, [r4, #8]
   d5838:	f000 f865 	bl	d5906 <_ZNK9FatVolume17clusterFirstBlockEm>
   d583c:	4601      	mov	r1, r0
   d583e:	e783      	b.n	d5748 <_ZN7FatFile5writeEPKvj+0x9c>
   d5840:	2003e3a0 	.word	0x2003e3a0

000d5844 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5844:	f000 bb5a 	b.w	d5efc <HAL_Pin_Map>

000d5848 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5848:	b570      	push	{r4, r5, r6, lr}
   d584a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d584c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d584e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5850:	b149      	cbz	r1, d5866 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5852:	f002 f897 	bl	d7984 <strlen>
   d5856:	682b      	ldr	r3, [r5, #0]
   d5858:	4602      	mov	r2, r0
   d585a:	4621      	mov	r1, r4
   d585c:	4628      	mov	r0, r5
   d585e:	68db      	ldr	r3, [r3, #12]
    }
   d5860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5864:	4718      	bx	r3
    }
   d5866:	bd70      	pop	{r4, r5, r6, pc}

000d5868 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5868:	f000 bb48 	b.w	d5efc <HAL_Pin_Map>

000d586c <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d586c:	f000 bb46 	b.w	d5efc <HAL_Pin_Map>

000d5870 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5870:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5872:	7803      	ldrb	r3, [r0, #0]
   d5874:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5876:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5878:	d51e      	bpl.n	d58b8 <_ZN8FatCache4syncEv+0x48>
   d587a:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d587c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d587e:	f100 060c 	add.w	r6, r0, #12
   d5882:	4632      	mov	r2, r6
   d5884:	6818      	ldr	r0, [r3, #0]
   d5886:	f000 fa54 	bl	d5d32 <_ZN9SdSpiCard10writeBlockEmPKh>
   d588a:	4605      	mov	r5, r0
   d588c:	b908      	cbnz	r0, d5892 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d588e:	2500      	movs	r5, #0
   d5890:	e013      	b.n	d58ba <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5892:	7823      	ldrb	r3, [r4, #0]
   d5894:	079b      	lsls	r3, r3, #30
   d5896:	d404      	bmi.n	d58a2 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5898:	7823      	ldrb	r3, [r4, #0]
   d589a:	f023 0301 	bic.w	r3, r3, #1
   d589e:	7023      	strb	r3, [r4, #0]
   d58a0:	e00b      	b.n	d58ba <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d58a2:	6863      	ldr	r3, [r4, #4]
   d58a4:	68a0      	ldr	r0, [r4, #8]
   d58a6:	6919      	ldr	r1, [r3, #16]
   d58a8:	4632      	mov	r2, r6
   d58aa:	4401      	add	r1, r0
   d58ac:	6818      	ldr	r0, [r3, #0]
   d58ae:	f000 fa40 	bl	d5d32 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d58b2:	2800      	cmp	r0, #0
   d58b4:	d1f0      	bne.n	d5898 <_ZN8FatCache4syncEv+0x28>
   d58b6:	e7ea      	b.n	d588e <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d58b8:	2501      	movs	r5, #1

fail:
  return false;
}
   d58ba:	4628      	mov	r0, r5
   d58bc:	bd70      	pop	{r4, r5, r6, pc}

000d58be <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d58be:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d58c0:	6883      	ldr	r3, [r0, #8]
   d58c2:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d58c4:	4604      	mov	r4, r0
   d58c6:	460e      	mov	r6, r1
   d58c8:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d58ca:	d014      	beq.n	d58f6 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d58cc:	f7ff ffd0 	bl	d5870 <_ZN8FatCache4syncEv>
   d58d0:	b908      	cbnz	r0, d58d6 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d58d2:	2000      	movs	r0, #0
   d58d4:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d58d6:	076b      	lsls	r3, r5, #29
   d58d8:	d503      	bpl.n	d58e2 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d58da:	2300      	movs	r3, #0
   d58dc:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d58de:	60a6      	str	r6, [r4, #8]
   d58e0:	e009      	b.n	d58f6 <_ZN8FatCache4readEmh+0x38>
   d58e2:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d58e4:	f104 020c 	add.w	r2, r4, #12
   d58e8:	4631      	mov	r1, r6
   d58ea:	6818      	ldr	r0, [r3, #0]
   d58ec:	f000 f997 	bl	d5c1e <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d58f0:	2800      	cmp	r0, #0
   d58f2:	d1f2      	bne.n	d58da <_ZN8FatCache4readEmh+0x1c>
   d58f4:	e7ed      	b.n	d58d2 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d58f6:	7823      	ldrb	r3, [r4, #0]
   d58f8:	4620      	mov	r0, r4
   d58fa:	f005 0503 	and.w	r5, r5, #3
   d58fe:	431d      	orrs	r5, r3
   d5900:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5904:	bd70      	pop	{r4, r5, r6, pc}

000d5906 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5906:	7983      	ldrb	r3, [r0, #6]
   d5908:	6940      	ldr	r0, [r0, #20]
   d590a:	3902      	subs	r1, #2
   d590c:	4099      	lsls	r1, r3
}
   d590e:	4408      	add	r0, r1
   d5910:	4770      	bx	lr

000d5912 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5912:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5914:	b570      	push	{r4, r5, r6, lr}
   d5916:	4605      	mov	r5, r0
   d5918:	460c      	mov	r4, r1
   d591a:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d591c:	d802      	bhi.n	d5924 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d591e:	f04f 30ff 	mov.w	r0, #4294967295
   d5922:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5924:	69c3      	ldr	r3, [r0, #28]
   d5926:	4299      	cmp	r1, r3
   d5928:	d8f9      	bhi.n	d591e <_ZN9FatVolume6fatGetEmPm+0xc>
   d592a:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d592c:	2b20      	cmp	r3, #32
   d592e:	d110      	bne.n	d5952 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5930:	6981      	ldr	r1, [r0, #24]
   d5932:	2202      	movs	r2, #2
   d5934:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5938:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d593c:	f7ff ffbf 	bl	d58be <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5940:	2800      	cmp	r0, #0
   d5942:	d0ec      	beq.n	d591e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5944:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5948:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d594c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5950:	e00f      	b.n	d5972 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5952:	2b10      	cmp	r3, #16
   d5954:	d1e3      	bne.n	d591e <_ZN9FatVolume6fatGetEmPm+0xc>
   d5956:	6983      	ldr	r3, [r0, #24]
   d5958:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d595c:	2202      	movs	r2, #2
   d595e:	4419      	add	r1, r3
   d5960:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5964:	f7ff ffab 	bl	d58be <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5968:	2800      	cmp	r0, #0
   d596a:	d0d8      	beq.n	d591e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d596c:	b2e4      	uxtb	r4, r4
   d596e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d5972:	69ea      	ldr	r2, [r5, #28]
   d5974:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5976:	bf9a      	itte	ls
   d5978:	6033      	strls	r3, [r6, #0]
  return 1;
   d597a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d597c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d597e:	bd70      	pop	{r4, r5, r6, pc}

000d5980 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5980:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d5982:	b538      	push	{r3, r4, r5, lr}
   d5984:	460c      	mov	r4, r1
   d5986:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5988:	d801      	bhi.n	d598e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d598a:	2000      	movs	r0, #0
   d598c:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d598e:	69c3      	ldr	r3, [r0, #28]
   d5990:	4299      	cmp	r1, r3
   d5992:	d8fa      	bhi.n	d598a <_ZN9FatVolume6fatPutEmm+0xa>
   d5994:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5996:	2b20      	cmp	r3, #32
   d5998:	d10e      	bne.n	d59b8 <_ZN9FatVolume6fatPutEmm+0x38>
   d599a:	6981      	ldr	r1, [r0, #24]
   d599c:	2203      	movs	r2, #3
   d599e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d59a2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d59a6:	f7ff ff8a 	bl	d58be <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d59aa:	2800      	cmp	r0, #0
   d59ac:	d0ed      	beq.n	d598a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d59ae:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d59b2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d59b6:	e00f      	b.n	d59d8 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d59b8:	2b10      	cmp	r3, #16
   d59ba:	d1e6      	bne.n	d598a <_ZN9FatVolume6fatPutEmm+0xa>
   d59bc:	6983      	ldr	r3, [r0, #24]
   d59be:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d59c2:	2203      	movs	r2, #3
   d59c4:	4419      	add	r1, r3
   d59c6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d59ca:	f7ff ff78 	bl	d58be <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d59ce:	2800      	cmp	r0, #0
   d59d0:	d0db      	beq.n	d598a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d59d2:	b2e4      	uxtb	r4, r4
   d59d4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d59d8:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d59da:	bd38      	pop	{r3, r4, r5, pc}

000d59dc <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d59dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d59e0:	68c4      	ldr	r4, [r0, #12]
   d59e2:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d59e4:	4605      	mov	r5, r0
   d59e6:	460e      	mov	r6, r1
   d59e8:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d59ea:	d207      	bcs.n	d59fc <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d59ec:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d59ee:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d59f0:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d59f2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d59f4:	429c      	cmp	r4, r3
   d59f6:	d903      	bls.n	d5a00 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d59f8:	b9cf      	cbnz	r7, d5a2e <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d59fa:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d59fc:	2701      	movs	r7, #1
   d59fe:	e7f7      	b.n	d59f0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5a00:	42a6      	cmp	r6, r4
   d5a02:	d014      	beq.n	d5a2e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5a04:	aa01      	add	r2, sp, #4
   d5a06:	4621      	mov	r1, r4
   d5a08:	4628      	mov	r0, r5
   d5a0a:	f7ff ff82 	bl	d5912 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5a0e:	2800      	cmp	r0, #0
   d5a10:	db0d      	blt.n	d5a2e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5a12:	d0ed      	beq.n	d59f0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5a14:	9b01      	ldr	r3, [sp, #4]
   d5a16:	2b00      	cmp	r3, #0
   d5a18:	d1ea      	bne.n	d59f0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d5a1a:	b107      	cbz	r7, d5a1e <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5a1c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5a1e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5a22:	4621      	mov	r1, r4
   d5a24:	4628      	mov	r0, r5
   d5a26:	f7ff ffab 	bl	d5980 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d5a2a:	4607      	mov	r7, r0
   d5a2c:	b908      	cbnz	r0, d5a32 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5a2e:	2700      	movs	r7, #0
   d5a30:	e00b      	b.n	d5a4a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5a32:	b916      	cbnz	r6, d5a3a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5a34:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5a38:	e007      	b.n	d5a4a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5a3a:	4622      	mov	r2, r4
   d5a3c:	4631      	mov	r1, r6
   d5a3e:	4628      	mov	r0, r5
   d5a40:	f7ff ff9e 	bl	d5980 <_ZN9FatVolume6fatPutEmm>
   d5a44:	2800      	cmp	r0, #0
   d5a46:	d1f5      	bne.n	d5a34 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5a48:	e7f1      	b.n	d5a2e <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5a4a:	4638      	mov	r0, r7
   d5a4c:	b002      	add	sp, #8
   d5a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5a52 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d5a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5a54:	4605      	mov	r5, r0
   d5a56:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d5a58:	aa01      	add	r2, sp, #4
   d5a5a:	4621      	mov	r1, r4
   d5a5c:	4628      	mov	r0, r5
   d5a5e:	f7ff ff58 	bl	d5912 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5a62:	1e06      	subs	r6, r0, #0
   d5a64:	da01      	bge.n	d5a6a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d5a66:	2000      	movs	r0, #0
   d5a68:	e00f      	b.n	d5a8a <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d5a6a:	2200      	movs	r2, #0
   d5a6c:	4621      	mov	r1, r4
   d5a6e:	4628      	mov	r0, r5
   d5a70:	f7ff ff86 	bl	d5980 <_ZN9FatVolume6fatPutEmm>
   d5a74:	2800      	cmp	r0, #0
   d5a76:	d0f6      	beq.n	d5a66 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d5a78:	68eb      	ldr	r3, [r5, #12]
   d5a7a:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d5a7c:	bf9c      	itt	ls
   d5a7e:	f104 34ff 	addls.w	r4, r4, #4294967295
   d5a82:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d5a84:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d5a86:	2e00      	cmp	r6, #0
   d5a88:	d1e6      	bne.n	d5a58 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d5a8a:	b002      	add	sp, #8
   d5a8c:	bd70      	pop	{r4, r5, r6, pc}

000d5a8e <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d5a8e:	f000 ba35 	b.w	d5efc <HAL_Pin_Map>

000d5a92 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d5a92:	f000 ba33 	b.w	d5efc <HAL_Pin_Map>

000d5a96 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d5a96:	f000 ba31 	b.w	d5efc <HAL_Pin_Map>
	...

000d5a9c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5a9c:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5a9e:	4c0e      	ldr	r4, [pc, #56]	; (d5ad8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5aa0:	460e      	mov	r6, r1
   d5aa2:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5aa4:	f000 fab2 	bl	d600c <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5aa8:	6823      	ldr	r3, [r4, #0]
   d5aaa:	1ac0      	subs	r0, r0, r3
   d5aac:	4b0b      	ldr	r3, [pc, #44]	; (d5adc <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d5aae:	4298      	cmp	r0, r3
   d5ab0:	d908      	bls.n	d5ac4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5ab2:	f000 fab3 	bl	d601c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5ab6:	4b0a      	ldr	r3, [pc, #40]	; (d5ae0 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d5ab8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5aba:	f000 fc2b 	bl	d6314 <spark_process>
   d5abe:	f000 faa5 	bl	d600c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d5ac2:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5ac4:	f000 faaa 	bl	d601c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d5ac8:	b280      	uxth	r0, r0
   d5aca:	1b80      	subs	r0, r0, r6
}
   d5acc:	42a8      	cmp	r0, r5
   d5ace:	bfd4      	ite	le
   d5ad0:	2000      	movle	r0, #0
   d5ad2:	2001      	movgt	r0, #1
   d5ad4:	bd70      	pop	{r4, r5, r6, pc}
   d5ad6:	bf00      	nop
   d5ad8:	2003e3a4 	.word	0x2003e3a4
   d5adc:	000186a0 	.word	0x000186a0
   d5ae0:	2003e708 	.word	0x2003e708

000d5ae4 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5ae4:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d5ae6:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5ae8:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d5aea:	b94d      	cbnz	r5, d5b00 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5aec:	6840      	ldr	r0, [r0, #4]
   d5aee:	f000 f9b9 	bl	d5e64 <_ZN14SdSpiAltDriver8activateEv>
   d5af2:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5af4:	4629      	mov	r1, r5
   d5af6:	7d18      	ldrb	r0, [r3, #20]
   d5af8:	f001 fbcb 	bl	d7292 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5afc:	2301      	movs	r3, #1
   d5afe:	7223      	strb	r3, [r4, #8]
   d5b00:	bd38      	pop	{r3, r4, r5, pc}

000d5b02 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5b02:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5b04:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5b06:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5b08:	b16b      	cbz	r3, d5b26 <_ZN9SdSpiCard7spiStopEv+0x24>
   d5b0a:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5b0c:	2101      	movs	r1, #1
   d5b0e:	7d18      	ldrb	r0, [r3, #20]
   d5b10:	f001 fbbf 	bl	d7292 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5b14:	21ff      	movs	r1, #255	; 0xff
   d5b16:	6860      	ldr	r0, [r4, #4]
   d5b18:	f000 f9c6 	bl	d5ea8 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5b1c:	6860      	ldr	r0, [r4, #4]
   d5b1e:	f000 f9a5 	bl	d5e6c <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d5b22:	2300      	movs	r3, #0
   d5b24:	7223      	strb	r3, [r4, #8]
   d5b26:	bd10      	pop	{r4, pc}

000d5b28 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d5b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b2a:	4604      	mov	r4, r0
   d5b2c:	460d      	mov	r5, r1
   d5b2e:	4616      	mov	r6, r2
   d5b30:	f000 fa74 	bl	d601c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5b34:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5b36:	6860      	ldr	r0, [r4, #4]
   d5b38:	f000 f99b 	bl	d5e72 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5b3c:	28ff      	cmp	r0, #255	; 0xff
   d5b3e:	7260      	strb	r0, [r4, #9]
   d5b40:	d109      	bne.n	d5b56 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d5b42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b46:	4639      	mov	r1, r7
   d5b48:	4620      	mov	r0, r4
   d5b4a:	f7ff ffa7 	bl	d5a9c <_ZN9SdSpiCard10isTimedOutEtt>
   d5b4e:	2800      	cmp	r0, #0
   d5b50:	d0f1      	beq.n	d5b36 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5b52:	2355      	movs	r3, #85	; 0x55
   d5b54:	e00b      	b.n	d5b6e <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d5b56:	28fe      	cmp	r0, #254	; 0xfe
   d5b58:	d001      	beq.n	d5b5e <_ZN9SdSpiCard8readDataEPhj+0x36>
   d5b5a:	2350      	movs	r3, #80	; 0x50
   d5b5c:	e007      	b.n	d5b6e <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5b5e:	4632      	mov	r2, r6
   d5b60:	4629      	mov	r1, r5
   d5b62:	6860      	ldr	r0, [r4, #4]
   d5b64:	f000 f98a 	bl	d5e7c <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d5b68:	7260      	strb	r0, [r4, #9]
   d5b6a:	b130      	cbz	r0, d5b7a <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5b6c:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d5b6e:	4620      	mov	r0, r4
   d5b70:	7023      	strb	r3, [r4, #0]
   d5b72:	f7ff ffc6 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5b76:	2000      	movs	r0, #0
}
   d5b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5b7a:	6860      	ldr	r0, [r4, #4]
   d5b7c:	f000 f979 	bl	d5e72 <_ZN14SdSpiAltDriver7receiveEv>
   d5b80:	6860      	ldr	r0, [r4, #4]
   d5b82:	f000 f976 	bl	d5e72 <_ZN14SdSpiAltDriver7receiveEv>
   d5b86:	2001      	movs	r0, #1
   d5b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b8a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d5b8a:	b570      	push	{r4, r5, r6, lr}
   d5b8c:	4604      	mov	r4, r0
   d5b8e:	460e      	mov	r6, r1
   d5b90:	f000 fa44 	bl	d601c <HAL_Timer_Get_Milli_Seconds>
   d5b94:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d5b96:	4632      	mov	r2, r6
   d5b98:	4629      	mov	r1, r5
   d5b9a:	4620      	mov	r0, r4
   d5b9c:	f7ff ff7e 	bl	d5a9c <_ZN9SdSpiCard10isTimedOutEtt>
   d5ba0:	b930      	cbnz	r0, d5bb0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d5ba2:	6860      	ldr	r0, [r4, #4]
   d5ba4:	f000 f965 	bl	d5e72 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d5ba8:	28ff      	cmp	r0, #255	; 0xff
   d5baa:	d1f4      	bne.n	d5b96 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d5bac:	2001      	movs	r0, #1
   d5bae:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5bb0:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d5bb2:	bd70      	pop	{r4, r5, r6, pc}

000d5bb4 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d5bb6:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5bb8:	9201      	str	r2, [sp, #4]
   d5bba:	4604      	mov	r4, r0
   d5bbc:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d5bbe:	b90b      	cbnz	r3, d5bc4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5bc0:	f7ff ff90 	bl	d5ae4 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d5bc4:	b125      	cbz	r5, d5bd0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d5bc6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5bca:	4620      	mov	r0, r4
   d5bcc:	f7ff ffdd 	bl	d5b8a <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5bd0:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d5bd4:	6860      	ldr	r0, [r4, #4]
   d5bd6:	f000 f967 	bl	d5ea8 <_ZN14SdSpiAltDriver4sendEh>
   d5bda:	f10d 0607 	add.w	r6, sp, #7
   d5bde:	f10d 0703 	add.w	r7, sp, #3
   d5be2:	f816 1901 	ldrb.w	r1, [r6], #-1
   d5be6:	6860      	ldr	r0, [r4, #4]
   d5be8:	f000 f95e 	bl	d5ea8 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d5bec:	42be      	cmp	r6, r7
   d5bee:	d1f8      	bne.n	d5be2 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d5bf0:	2d00      	cmp	r5, #0
   d5bf2:	bf0c      	ite	eq
   d5bf4:	2195      	moveq	r1, #149	; 0x95
   d5bf6:	2187      	movne	r1, #135	; 0x87
   d5bf8:	6860      	ldr	r0, [r4, #4]
   d5bfa:	f000 f955 	bl	d5ea8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5bfe:	6860      	ldr	r0, [r4, #4]
   d5c00:	f000 f937 	bl	d5e72 <_ZN14SdSpiAltDriver7receiveEv>
   d5c04:	250b      	movs	r5, #11
   d5c06:	6860      	ldr	r0, [r4, #4]
   d5c08:	f000 f933 	bl	d5e72 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5c0c:	0603      	lsls	r3, r0, #24
   d5c0e:	7260      	strb	r0, [r4, #9]
   d5c10:	d503      	bpl.n	d5c1a <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d5c12:	3d01      	subs	r5, #1
   d5c14:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5c18:	d1f5      	bne.n	d5c06 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d5c1a:	b003      	add	sp, #12
   d5c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c1e <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5c1e:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5c20:	7a83      	ldrb	r3, [r0, #10]
   d5c22:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5c24:	bf18      	it	ne
   d5c26:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5c28:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5c2a:	460a      	mov	r2, r1
   d5c2c:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5c2e:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5c30:	f7ff ffc0 	bl	d5bb4 <_ZN9SdSpiCard11cardCommandEhm>
   d5c34:	b110      	cbz	r0, d5c3c <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5c36:	2330      	movs	r3, #48	; 0x30
   d5c38:	7023      	strb	r3, [r4, #0]
   d5c3a:	e00b      	b.n	d5c54 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d5c3c:	4629      	mov	r1, r5
   d5c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5c42:	4620      	mov	r0, r4
   d5c44:	f7ff ff70 	bl	d5b28 <_ZN9SdSpiCard8readDataEPhj>
   d5c48:	4605      	mov	r5, r0
   d5c4a:	b118      	cbz	r0, d5c54 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d5c4c:	4620      	mov	r0, r4
   d5c4e:	f7ff ff58 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5c52:	e003      	b.n	d5c5c <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d5c54:	4620      	mov	r0, r4
   d5c56:	f7ff ff54 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5c5a:	2500      	movs	r5, #0
}
   d5c5c:	4628      	mov	r0, r5
   d5c5e:	bd38      	pop	{r3, r4, r5, pc}

000d5c60 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5c60:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d5c62:	7a83      	ldrb	r3, [r0, #10]
   d5c64:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5c66:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5c68:	bf18      	it	ne
   d5c6a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5c6c:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5c6e:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5c70:	f7ff ffa0 	bl	d5bb4 <_ZN9SdSpiCard11cardCommandEhm>
   d5c74:	b130      	cbz	r0, d5c84 <_ZN9SdSpiCard9readStartEm+0x24>
   d5c76:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d5c78:	4620      	mov	r0, r4
   d5c7a:	7023      	strb	r3, [r4, #0]
   d5c7c:	f7ff ff41 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5c80:	2000      	movs	r0, #0
   d5c82:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d5c84:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5c86:	bd10      	pop	{r4, pc}

000d5c88 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5c88:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d5c8a:	2200      	movs	r2, #0
   d5c8c:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5c8e:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d5c90:	f7ff ff90 	bl	d5bb4 <_ZN9SdSpiCard11cardCommandEhm>
   d5c94:	b130      	cbz	r0, d5ca4 <_ZN9SdSpiCard8readStopEv+0x1c>
   d5c96:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d5c98:	4620      	mov	r0, r4
   d5c9a:	7023      	strb	r3, [r4, #0]
   d5c9c:	f7ff ff31 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5ca0:	2000      	movs	r0, #0
   d5ca2:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d5ca4:	4620      	mov	r0, r4
   d5ca6:	f7ff ff2c 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5caa:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5cac:	bd10      	pop	{r4, pc}

000d5cae <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d5cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cb0:	4605      	mov	r5, r0
   d5cb2:	4616      	mov	r6, r2
   d5cb4:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d5cb6:	f7ff ffd3 	bl	d5c60 <_ZN9SdSpiCard9readStartEm>
   d5cba:	b198      	cbz	r0, d5ce4 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d5cbc:	2400      	movs	r4, #0
   d5cbe:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d5cc0:	429f      	cmp	r7, r3
   d5cc2:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d5cc6:	d908      	bls.n	d5cda <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d5cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5ccc:	4628      	mov	r0, r5
   d5cce:	f7ff ff2b 	bl	d5b28 <_ZN9SdSpiCard8readDataEPhj>
   d5cd2:	3401      	adds	r4, #1
   d5cd4:	2800      	cmp	r0, #0
   d5cd6:	d1f2      	bne.n	d5cbe <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d5cd8:	e004      	b.n	d5ce4 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d5cda:	4628      	mov	r0, r5
}
   d5cdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d5ce0:	f7ff bfd2 	b.w	d5c88 <_ZN9SdSpiCard8readStopEv>
}
   d5ce4:	2000      	movs	r0, #0
   d5ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ce8 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d5ce8:	b538      	push	{r3, r4, r5, lr}
   d5cea:	4604      	mov	r4, r0
   d5cec:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5cee:	6840      	ldr	r0, [r0, #4]
   d5cf0:	f000 f8da 	bl	d5ea8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d5cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5cf8:	4629      	mov	r1, r5
   d5cfa:	6860      	ldr	r0, [r4, #4]
   d5cfc:	f000 f8d8 	bl	d5eb0 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5d00:	21ff      	movs	r1, #255	; 0xff
   d5d02:	6860      	ldr	r0, [r4, #4]
   d5d04:	f000 f8d0 	bl	d5ea8 <_ZN14SdSpiAltDriver4sendEh>
   d5d08:	21ff      	movs	r1, #255	; 0xff
   d5d0a:	6860      	ldr	r0, [r4, #4]
   d5d0c:	f000 f8cc 	bl	d5ea8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5d10:	6860      	ldr	r0, [r4, #4]
   d5d12:	f000 f8ae 	bl	d5e72 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d5d16:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d5d18:	f000 001f 	and.w	r0, r0, #31
   d5d1c:	2805      	cmp	r0, #5
   d5d1e:	d006      	beq.n	d5d2e <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5d20:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5d22:	4620      	mov	r0, r4
   d5d24:	7023      	strb	r3, [r4, #0]
   d5d26:	f7ff feec 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5d2a:	2000      	movs	r0, #0
   d5d2c:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d5d2e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5d30:	bd38      	pop	{r3, r4, r5, pc}

000d5d32 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5d32:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5d34:	7a83      	ldrb	r3, [r0, #10]
   d5d36:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5d38:	bf18      	it	ne
   d5d3a:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5d3c:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5d3e:	460a      	mov	r2, r1
   d5d40:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5d42:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5d44:	f7ff ff36 	bl	d5bb4 <_ZN9SdSpiCard11cardCommandEhm>
   d5d48:	4606      	mov	r6, r0
   d5d4a:	b108      	cbz	r0, d5d50 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d5d4c:	2332      	movs	r3, #50	; 0x32
   d5d4e:	e01d      	b.n	d5d8c <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d5d50:	462a      	mov	r2, r5
   d5d52:	21fe      	movs	r1, #254	; 0xfe
   d5d54:	4620      	mov	r0, r4
   d5d56:	f7ff ffc7 	bl	d5ce8 <_ZN9SdSpiCard9writeDataEhPKh>
   d5d5a:	b1c0      	cbz	r0, d5d8e <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5d5c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d5d60:	4620      	mov	r0, r4
   d5d62:	f7ff ff12 	bl	d5b8a <_ZN9SdSpiCard11waitNotBusyEt>
   d5d66:	4605      	mov	r5, r0
   d5d68:	b908      	cbnz	r0, d5d6e <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5d6a:	235a      	movs	r3, #90	; 0x5a
   d5d6c:	e00e      	b.n	d5d8c <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d5d6e:	4632      	mov	r2, r6
   d5d70:	210d      	movs	r1, #13
   d5d72:	4620      	mov	r0, r4
   d5d74:	f7ff ff1e 	bl	d5bb4 <_ZN9SdSpiCard11cardCommandEhm>
   d5d78:	b938      	cbnz	r0, d5d8a <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5d7a:	6860      	ldr	r0, [r4, #4]
   d5d7c:	f000 f879 	bl	d5e72 <_ZN14SdSpiAltDriver7receiveEv>
   d5d80:	b918      	cbnz	r0, d5d8a <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5d82:	4620      	mov	r0, r4
   d5d84:	f7ff febd 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5d88:	e005      	b.n	d5d96 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5d8a:	2329      	movs	r3, #41	; 0x29
   d5d8c:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d5d8e:	4620      	mov	r0, r4
   d5d90:	f7ff feb7 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5d94:	2500      	movs	r5, #0
}
   d5d96:	4628      	mov	r0, r5
   d5d98:	bd70      	pop	{r4, r5, r6, pc}

000d5d9a <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5d9a:	b538      	push	{r3, r4, r5, lr}
   d5d9c:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5d9e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5da2:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5da4:	f7ff fef1 	bl	d5b8a <_ZN9SdSpiCard11waitNotBusyEt>
   d5da8:	b910      	cbnz	r0, d5db0 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d5daa:	235b      	movs	r3, #91	; 0x5b
   d5dac:	7023      	strb	r3, [r4, #0]
   d5dae:	e005      	b.n	d5dbc <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d5db0:	462a      	mov	r2, r5
   d5db2:	21fc      	movs	r1, #252	; 0xfc
   d5db4:	4620      	mov	r0, r4
   d5db6:	f7ff ff97 	bl	d5ce8 <_ZN9SdSpiCard9writeDataEhPKh>
   d5dba:	b918      	cbnz	r0, d5dc4 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5dbc:	4620      	mov	r0, r4
   d5dbe:	f7ff fea0 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5dc2:	2000      	movs	r0, #0
}
   d5dc4:	bd38      	pop	{r3, r4, r5, pc}

000d5dc6 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5dc6:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5dc8:	7a83      	ldrb	r3, [r0, #10]
   d5dca:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5dcc:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5dce:	bf18      	it	ne
   d5dd0:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5dd2:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5dd4:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5dd6:	f7ff feed 	bl	d5bb4 <_ZN9SdSpiCard11cardCommandEhm>
   d5dda:	b130      	cbz	r0, d5dea <_ZN9SdSpiCard10writeStartEm+0x24>
   d5ddc:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5dde:	4620      	mov	r0, r4
   d5de0:	7023      	strb	r3, [r4, #0]
   d5de2:	f7ff fe8e 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5de6:	2000      	movs	r0, #0
   d5de8:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d5dea:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5dec:	bd10      	pop	{r4, pc}

000d5dee <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5dee:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5df0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5df4:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5df6:	f7ff fec8 	bl	d5b8a <_ZN9SdSpiCard11waitNotBusyEt>
   d5dfa:	4605      	mov	r5, r0
   d5dfc:	b120      	cbz	r0, d5e08 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5dfe:	21fd      	movs	r1, #253	; 0xfd
   d5e00:	6860      	ldr	r0, [r4, #4]
   d5e02:	f000 f851 	bl	d5ea8 <_ZN14SdSpiAltDriver4sendEh>
   d5e06:	e001      	b.n	d5e0c <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5e08:	2356      	movs	r3, #86	; 0x56
   d5e0a:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d5e0c:	4620      	mov	r0, r4
   d5e0e:	f7ff fe78 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5e12:	4628      	mov	r0, r5
   d5e14:	bd38      	pop	{r3, r4, r5, pc}

000d5e16 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d5e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e18:	4605      	mov	r5, r0
   d5e1a:	4616      	mov	r6, r2
   d5e1c:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d5e1e:	f7ff ffd2 	bl	d5dc6 <_ZN9SdSpiCard10writeStartEm>
   d5e22:	b170      	cbz	r0, d5e42 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d5e24:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5e26:	42bc      	cmp	r4, r7
   d5e28:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5e2c:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5e2e:	d004      	beq.n	d5e3a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d5e30:	f7ff ffb3 	bl	d5d9a <_ZN9SdSpiCard9writeDataEPKh>
   d5e34:	b128      	cbz	r0, d5e42 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5e36:	3401      	adds	r4, #1
   d5e38:	e7f5      	b.n	d5e26 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d5e3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5e3e:	f7ff bfd6 	b.w	d5dee <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d5e42:	4628      	mov	r0, r5
   d5e44:	f7ff fe5d 	bl	d5b02 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5e48:	2000      	movs	r0, #0
   d5e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e4c <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5e4c:	f000 b856 	b.w	d5efc <HAL_Pin_Map>

000d5e50 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5e50:	f000 b854 	b.w	d5efc <HAL_Pin_Map>

000d5e54 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d5e54:	f000 b852 	b.w	d5efc <HAL_Pin_Map>

000d5e58 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5e58:	4b01      	ldr	r3, [pc, #4]	; (d5e60 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d5e5a:	2201      	movs	r2, #1
   d5e5c:	701a      	strb	r2, [r3, #0]
   d5e5e:	4770      	bx	lr
   d5e60:	2003e3a8 	.word	0x2003e3a8

000d5e64 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5e64:	1d01      	adds	r1, r0, #4
   d5e66:	6800      	ldr	r0, [r0, #0]
   d5e68:	f000 bb1c 	b.w	d64a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5e6c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5e6c:	6800      	ldr	r0, [r0, #0]
   d5e6e:	f000 baff 	b.w	d6470 <_ZN8SPIClass14endTransactionEv>

000d5e72 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5e72:	21ff      	movs	r1, #255	; 0xff
   d5e74:	6800      	ldr	r0, [r0, #0]
   d5e76:	f000 bb85 	b.w	d6584 <_ZN8SPIClass8transferEh>
	...

000d5e7c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5e7e:	4b08      	ldr	r3, [pc, #32]	; (d5ea0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5e80:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5e82:	2500      	movs	r5, #0
   d5e84:	4c07      	ldr	r4, [pc, #28]	; (d5ea4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5e86:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5e88:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5e8a:	4613      	mov	r3, r2
   d5e8c:	460a      	mov	r2, r1
   d5e8e:	4629      	mov	r1, r5
   d5e90:	f000 fb7e 	bl	d6590 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5e94:	7823      	ldrb	r3, [r4, #0]
   d5e96:	2b00      	cmp	r3, #0
   d5e98:	d0fc      	beq.n	d5e94 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5e9a:	2000      	movs	r0, #0
   d5e9c:	b003      	add	sp, #12
   d5e9e:	bd30      	pop	{r4, r5, pc}
   d5ea0:	000d5e59 	.word	0x000d5e59
   d5ea4:	2003e3a8 	.word	0x2003e3a8

000d5ea8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5ea8:	6800      	ldr	r0, [r0, #0]
   d5eaa:	f000 bb6b 	b.w	d6584 <_ZN8SPIClass8transferEh>
	...

000d5eb0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5eb2:	4b07      	ldr	r3, [pc, #28]	; (d5ed0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5eb4:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5eb6:	2500      	movs	r5, #0
   d5eb8:	4c06      	ldr	r4, [pc, #24]	; (d5ed4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5eba:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5ebc:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5ebe:	4613      	mov	r3, r2
   d5ec0:	462a      	mov	r2, r5
   d5ec2:	f000 fb65 	bl	d6590 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d5ec6:	7823      	ldrb	r3, [r4, #0]
   d5ec8:	2b00      	cmp	r3, #0
   d5eca:	d0fc      	beq.n	d5ec6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5ecc:	b003      	add	sp, #12
   d5ece:	bd30      	pop	{r4, r5, pc}
   d5ed0:	000d5e59 	.word	0x000d5e59
   d5ed4:	2003e3a8 	.word	0x2003e3a8

000d5ed8 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5ed8:	f000 b810 	b.w	d5efc <HAL_Pin_Map>

000d5edc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5edc:	b508      	push	{r3, lr}
   d5ede:	4b02      	ldr	r3, [pc, #8]	; (d5ee8 <netdb_freeaddrinfo+0xc>)
   d5ee0:	681b      	ldr	r3, [r3, #0]
   d5ee2:	689b      	ldr	r3, [r3, #8]
   d5ee4:	9301      	str	r3, [sp, #4]
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	00030268 	.word	0x00030268

000d5eec <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <netdb_getaddrinfo+0xc>)
   d5ef0:	681b      	ldr	r3, [r3, #0]
   d5ef2:	68db      	ldr	r3, [r3, #12]
   d5ef4:	9301      	str	r3, [sp, #4]
   d5ef6:	bd08      	pop	{r3, pc}
   d5ef8:	00030268 	.word	0x00030268

000d5efc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <HAL_Pin_Map+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	681b      	ldr	r3, [r3, #0]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	0003022c 	.word	0x0003022c

000d5f0c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <HAL_Validate_Pin_Function+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	685b      	ldr	r3, [r3, #4]
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	0003022c 	.word	0x0003022c

000d5f1c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <HAL_Pin_Mode+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	689b      	ldr	r3, [r3, #8]
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	0003022c 	.word	0x0003022c

000d5f2c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <HAL_Get_Pin_Mode+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	68db      	ldr	r3, [r3, #12]
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	0003022c 	.word	0x0003022c

000d5f3c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <HAL_GPIO_Write+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	691b      	ldr	r3, [r3, #16]
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	0003022c 	.word	0x0003022c

000d5f4c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <HAL_ADC_Read+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	0003022c 	.word	0x0003022c

000d5f5c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <HAL_SPI_Send_Receive_Data+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	695b      	ldr	r3, [r3, #20]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	00030230 	.word	0x00030230

000d5f6c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <HAL_SPI_Init+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	69db      	ldr	r3, [r3, #28]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030230 	.word	0x00030230

000d5f7c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <HAL_SPI_Is_Enabled+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	6a1b      	ldr	r3, [r3, #32]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	00030230 	.word	0x00030230

000d5f8c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <HAL_SPI_Info+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030230 	.word	0x00030230

000d5f9c <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <HAL_SPI_DMA_Transfer+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030230 	.word	0x00030230

000d5fac <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030230 	.word	0x00030230

000d5fbc <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <HAL_SPI_Set_Settings+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030230 	.word	0x00030230

000d5fcc <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <HAL_SPI_Acquire+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	00030230 	.word	0x00030230

000d5fdc <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <HAL_SPI_Release+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	00030230 	.word	0x00030230

000d5fec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <HAL_RNG_GetRandomNumber+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	685b      	ldr	r3, [r3, #4]
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	00030218 	.word	0x00030218

000d5ffc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <HAL_Delay_Microseconds+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	68db      	ldr	r3, [r3, #12]
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	00030218 	.word	0x00030218

000d600c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	691b      	ldr	r3, [r3, #16]
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	00030218 	.word	0x00030218

000d601c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	695b      	ldr	r3, [r3, #20]
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	00030218 	.word	0x00030218

000d602c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <HAL_RTC_Get_UnixTime+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	69db      	ldr	r3, [r3, #28]
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030218 	.word	0x00030218

000d603c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <HAL_RTC_Time_Is_Valid+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	00030218 	.word	0x00030218

000d604c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <os_thread_is_current+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	689b      	ldr	r3, [r3, #8]
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030248 	.word	0x00030248

000d605c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <os_thread_join+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	691b      	ldr	r3, [r3, #16]
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	00030248 	.word	0x00030248

000d606c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <os_thread_cleanup+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	695b      	ldr	r3, [r3, #20]
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	00030248 	.word	0x00030248

000d607c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <os_mutex_recursive_create+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	00030248 	.word	0x00030248

000d608c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <os_mutex_recursive_destroy+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	00030248 	.word	0x00030248

000d609c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <inet_inet_ntop+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	695b      	ldr	r3, [r3, #20]
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	00030264 	.word	0x00030264

000d60ac <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <HAL_USART_Init+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	681b      	ldr	r3, [r3, #0]
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	0003023c 	.word	0x0003023c

000d60bc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <HAL_USART_Write_Data+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	68db      	ldr	r3, [r3, #12]
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	0003023c 	.word	0x0003023c

000d60cc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <HAL_USART_Available_Data+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	691b      	ldr	r3, [r3, #16]
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	0003023c 	.word	0x0003023c

000d60dc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <HAL_USART_Read_Data+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	695b      	ldr	r3, [r3, #20]
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	0003023c 	.word	0x0003023c

000d60ec <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <HAL_USART_Peek_Data+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	699b      	ldr	r3, [r3, #24]
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	0003023c 	.word	0x0003023c

000d60fc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <HAL_USART_Flush_Data+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	69db      	ldr	r3, [r3, #28]
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	0003023c 	.word	0x0003023c

000d610c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d610c:	b508      	push	{r3, lr}
   d610e:	4b02      	ldr	r3, [pc, #8]	; (d6118 <HAL_USART_Is_Enabled+0xc>)
   d6110:	681b      	ldr	r3, [r3, #0]
   d6112:	6a1b      	ldr	r3, [r3, #32]
   d6114:	9301      	str	r3, [sp, #4]
   d6116:	bd08      	pop	{r3, pc}
   d6118:	0003023c 	.word	0x0003023c

000d611c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d611c:	b508      	push	{r3, lr}
   d611e:	4b02      	ldr	r3, [pc, #8]	; (d6128 <HAL_USART_Available_Data_For_Write+0xc>)
   d6120:	681b      	ldr	r3, [r3, #0]
   d6122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6124:	9301      	str	r3, [sp, #4]
   d6126:	bd08      	pop	{r3, pc}
   d6128:	0003023c 	.word	0x0003023c

000d612c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d612c:	b508      	push	{r3, lr}
   d612e:	4b02      	ldr	r3, [pc, #8]	; (d6138 <HAL_I2C_Write_Data+0xc>)
   d6130:	681b      	ldr	r3, [r3, #0]
   d6132:	6a1b      	ldr	r3, [r3, #32]
   d6134:	9301      	str	r3, [sp, #4]
   d6136:	bd08      	pop	{r3, pc}
   d6138:	00030228 	.word	0x00030228

000d613c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <HAL_I2C_Available_Data+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	00030228 	.word	0x00030228

000d614c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b02      	ldr	r3, [pc, #8]	; (d6158 <HAL_I2C_Read_Data+0xc>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6154:	9301      	str	r3, [sp, #4]
   d6156:	bd08      	pop	{r3, pc}
   d6158:	00030228 	.word	0x00030228

000d615c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <HAL_I2C_Peek_Data+0xc>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6164:	9301      	str	r3, [sp, #4]
   d6166:	bd08      	pop	{r3, pc}
   d6168:	00030228 	.word	0x00030228

000d616c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d616c:	b508      	push	{r3, lr}
   d616e:	4b02      	ldr	r3, [pc, #8]	; (d6178 <HAL_I2C_Flush_Data+0xc>)
   d6170:	681b      	ldr	r3, [r3, #0]
   d6172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	bd08      	pop	{r3, pc}
   d6178:	00030228 	.word	0x00030228

000d617c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d617c:	b508      	push	{r3, lr}
   d617e:	4b02      	ldr	r3, [pc, #8]	; (d6188 <HAL_I2C_Is_Enabled+0xc>)
   d6180:	681b      	ldr	r3, [r3, #0]
   d6182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6184:	9301      	str	r3, [sp, #4]
   d6186:	bd08      	pop	{r3, pc}
   d6188:	00030228 	.word	0x00030228

000d618c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <HAL_I2C_Init+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030228 	.word	0x00030228

000d619c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <HAL_USB_USART_Init+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	681b      	ldr	r3, [r3, #0]
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	0003024c 	.word	0x0003024c

000d61ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <HAL_USB_USART_Begin+0xc>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	685b      	ldr	r3, [r3, #4]
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	bd08      	pop	{r3, pc}
   d61b8:	0003024c 	.word	0x0003024c

000d61bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <HAL_USB_USART_Available_Data+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	691b      	ldr	r3, [r3, #16]
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	0003024c 	.word	0x0003024c

000d61cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	695b      	ldr	r3, [r3, #20]
   d61d4:	9301      	str	r3, [sp, #4]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	0003024c 	.word	0x0003024c

000d61dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <HAL_USB_USART_Receive_Data+0xc>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	699b      	ldr	r3, [r3, #24]
   d61e4:	9301      	str	r3, [sp, #4]
   d61e6:	bd08      	pop	{r3, pc}
   d61e8:	0003024c 	.word	0x0003024c

000d61ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d61ec:	b508      	push	{r3, lr}
   d61ee:	4b02      	ldr	r3, [pc, #8]	; (d61f8 <HAL_USB_USART_Send_Data+0xc>)
   d61f0:	681b      	ldr	r3, [r3, #0]
   d61f2:	69db      	ldr	r3, [r3, #28]
   d61f4:	9301      	str	r3, [sp, #4]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	0003024c 	.word	0x0003024c

000d61fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d61fc:	b508      	push	{r3, lr}
   d61fe:	4b02      	ldr	r3, [pc, #8]	; (d6208 <HAL_USB_USART_Flush_Data+0xc>)
   d6200:	681b      	ldr	r3, [r3, #0]
   d6202:	6a1b      	ldr	r3, [r3, #32]
   d6204:	9301      	str	r3, [sp, #4]
   d6206:	bd08      	pop	{r3, pc}
   d6208:	0003024c 	.word	0x0003024c

000d620c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d620c:	b508      	push	{r3, lr}
   d620e:	4b02      	ldr	r3, [pc, #8]	; (d6218 <system_mode+0xc>)
   d6210:	681b      	ldr	r3, [r3, #0]
   d6212:	681b      	ldr	r3, [r3, #0]
   d6214:	9301      	str	r3, [sp, #4]
   d6216:	bd08      	pop	{r3, pc}
   d6218:	00030220 	.word	0x00030220

000d621c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d621c:	b508      	push	{r3, lr}
   d621e:	4b02      	ldr	r3, [pc, #8]	; (d6228 <set_system_mode+0xc>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	685b      	ldr	r3, [r3, #4]
   d6224:	9301      	str	r3, [sp, #4]
   d6226:	bd08      	pop	{r3, pc}
   d6228:	00030220 	.word	0x00030220

000d622c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d622c:	b508      	push	{r3, lr}
   d622e:	4b02      	ldr	r3, [pc, #8]	; (d6238 <system_delay_ms+0xc>)
   d6230:	681b      	ldr	r3, [r3, #0]
   d6232:	695b      	ldr	r3, [r3, #20]
   d6234:	9301      	str	r3, [sp, #4]
   d6236:	bd08      	pop	{r3, pc}
   d6238:	00030220 	.word	0x00030220

000d623c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b02      	ldr	r3, [pc, #8]	; (d6248 <system_thread_get_state+0xc>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6244:	9301      	str	r3, [sp, #4]
   d6246:	bd08      	pop	{r3, pc}
   d6248:	00030220 	.word	0x00030220

000d624c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d624c:	b508      	push	{r3, lr}
   d624e:	4b03      	ldr	r3, [pc, #12]	; (d625c <system_ctrl_set_app_request_handler+0x10>)
   d6250:	681b      	ldr	r3, [r3, #0]
   d6252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6256:	9301      	str	r3, [sp, #4]
   d6258:	bd08      	pop	{r3, pc}
   d625a:	0000      	.short	0x0000
   d625c:	00030220 	.word	0x00030220

000d6260 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b03      	ldr	r3, [pc, #12]	; (d6270 <system_ctrl_set_result+0x10>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d626a:	9301      	str	r3, [sp, #4]
   d626c:	bd08      	pop	{r3, pc}
   d626e:	0000      	.short	0x0000
   d6270:	00030220 	.word	0x00030220

000d6274 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6274:	b508      	push	{r3, lr}
   d6276:	4b02      	ldr	r3, [pc, #8]	; (d6280 <network_connect+0xc>)
   d6278:	681b      	ldr	r3, [r3, #0]
   d627a:	685b      	ldr	r3, [r3, #4]
   d627c:	9301      	str	r3, [sp, #4]
   d627e:	bd08      	pop	{r3, pc}
   d6280:	00030240 	.word	0x00030240

000d6284 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6284:	b508      	push	{r3, lr}
   d6286:	4b02      	ldr	r3, [pc, #8]	; (d6290 <network_connecting+0xc>)
   d6288:	681b      	ldr	r3, [r3, #0]
   d628a:	689b      	ldr	r3, [r3, #8]
   d628c:	9301      	str	r3, [sp, #4]
   d628e:	bd08      	pop	{r3, pc}
   d6290:	00030240 	.word	0x00030240

000d6294 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6294:	b508      	push	{r3, lr}
   d6296:	4b02      	ldr	r3, [pc, #8]	; (d62a0 <network_disconnect+0xc>)
   d6298:	681b      	ldr	r3, [r3, #0]
   d629a:	68db      	ldr	r3, [r3, #12]
   d629c:	9301      	str	r3, [sp, #4]
   d629e:	bd08      	pop	{r3, pc}
   d62a0:	00030240 	.word	0x00030240

000d62a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d62a4:	b508      	push	{r3, lr}
   d62a6:	4b02      	ldr	r3, [pc, #8]	; (d62b0 <network_ready+0xc>)
   d62a8:	681b      	ldr	r3, [r3, #0]
   d62aa:	691b      	ldr	r3, [r3, #16]
   d62ac:	9301      	str	r3, [sp, #4]
   d62ae:	bd08      	pop	{r3, pc}
   d62b0:	00030240 	.word	0x00030240

000d62b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d62b4:	b508      	push	{r3, lr}
   d62b6:	4b02      	ldr	r3, [pc, #8]	; (d62c0 <network_on+0xc>)
   d62b8:	681b      	ldr	r3, [r3, #0]
   d62ba:	695b      	ldr	r3, [r3, #20]
   d62bc:	9301      	str	r3, [sp, #4]
   d62be:	bd08      	pop	{r3, pc}
   d62c0:	00030240 	.word	0x00030240

000d62c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d62c4:	b508      	push	{r3, lr}
   d62c6:	4b02      	ldr	r3, [pc, #8]	; (d62d0 <network_off+0xc>)
   d62c8:	681b      	ldr	r3, [r3, #0]
   d62ca:	699b      	ldr	r3, [r3, #24]
   d62cc:	9301      	str	r3, [sp, #4]
   d62ce:	bd08      	pop	{r3, pc}
   d62d0:	00030240 	.word	0x00030240

000d62d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d62d4:	b508      	push	{r3, lr}
   d62d6:	4b02      	ldr	r3, [pc, #8]	; (d62e0 <network_listen+0xc>)
   d62d8:	681b      	ldr	r3, [r3, #0]
   d62da:	69db      	ldr	r3, [r3, #28]
   d62dc:	9301      	str	r3, [sp, #4]
   d62de:	bd08      	pop	{r3, pc}
   d62e0:	00030240 	.word	0x00030240

000d62e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d62e4:	b508      	push	{r3, lr}
   d62e6:	4b02      	ldr	r3, [pc, #8]	; (d62f0 <network_listening+0xc>)
   d62e8:	681b      	ldr	r3, [r3, #0]
   d62ea:	6a1b      	ldr	r3, [r3, #32]
   d62ec:	9301      	str	r3, [sp, #4]
   d62ee:	bd08      	pop	{r3, pc}
   d62f0:	00030240 	.word	0x00030240

000d62f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d62f4:	b508      	push	{r3, lr}
   d62f6:	4b02      	ldr	r3, [pc, #8]	; (d6300 <network_set_listen_timeout+0xc>)
   d62f8:	681b      	ldr	r3, [r3, #0]
   d62fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62fc:	9301      	str	r3, [sp, #4]
   d62fe:	bd08      	pop	{r3, pc}
   d6300:	00030240 	.word	0x00030240

000d6304 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6304:	b508      	push	{r3, lr}
   d6306:	4b02      	ldr	r3, [pc, #8]	; (d6310 <network_get_listen_timeout+0xc>)
   d6308:	681b      	ldr	r3, [r3, #0]
   d630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d630c:	9301      	str	r3, [sp, #4]
   d630e:	bd08      	pop	{r3, pc}
   d6310:	00030240 	.word	0x00030240

000d6314 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6314:	b508      	push	{r3, lr}
   d6316:	4b02      	ldr	r3, [pc, #8]	; (d6320 <spark_process+0xc>)
   d6318:	681b      	ldr	r3, [r3, #0]
   d631a:	689b      	ldr	r3, [r3, #8]
   d631c:	9301      	str	r3, [sp, #4]
   d631e:	bd08      	pop	{r3, pc}
   d6320:	00030244 	.word	0x00030244

000d6324 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6324:	b508      	push	{r3, lr}
   d6326:	4b02      	ldr	r3, [pc, #8]	; (d6330 <spark_cloud_flag_connected+0xc>)
   d6328:	681b      	ldr	r3, [r3, #0]
   d632a:	695b      	ldr	r3, [r3, #20]
   d632c:	9301      	str	r3, [sp, #4]
   d632e:	bd08      	pop	{r3, pc}
   d6330:	00030244 	.word	0x00030244

000d6334 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6334:	b508      	push	{r3, lr}
   d6336:	4b02      	ldr	r3, [pc, #8]	; (d6340 <spark_sync_time+0xc>)
   d6338:	681b      	ldr	r3, [r3, #0]
   d633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d633c:	9301      	str	r3, [sp, #4]
   d633e:	bd08      	pop	{r3, pc}
   d6340:	00030244 	.word	0x00030244

000d6344 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6344:	b508      	push	{r3, lr}
   d6346:	4b02      	ldr	r3, [pc, #8]	; (d6350 <spark_sync_time_pending+0xc>)
   d6348:	681b      	ldr	r3, [r3, #0]
   d634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d634c:	9301      	str	r3, [sp, #4]
   d634e:	bd08      	pop	{r3, pc}
   d6350:	00030244 	.word	0x00030244

000d6354 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6354:	b508      	push	{r3, lr}
   d6356:	4b02      	ldr	r3, [pc, #8]	; (d6360 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6358:	681b      	ldr	r3, [r3, #0]
   d635a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d635c:	9301      	str	r3, [sp, #4]
   d635e:	bd08      	pop	{r3, pc}
   d6360:	00030244 	.word	0x00030244

000d6364 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6364:	b508      	push	{r3, lr}
   d6366:	4b02      	ldr	r3, [pc, #8]	; (d6370 <malloc+0xc>)
   d6368:	681b      	ldr	r3, [r3, #0]
   d636a:	681b      	ldr	r3, [r3, #0]
   d636c:	9301      	str	r3, [sp, #4]
   d636e:	bd08      	pop	{r3, pc}
   d6370:	0003021c 	.word	0x0003021c

000d6374 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6374:	b508      	push	{r3, lr}
   d6376:	4b02      	ldr	r3, [pc, #8]	; (d6380 <free+0xc>)
   d6378:	681b      	ldr	r3, [r3, #0]
   d637a:	685b      	ldr	r3, [r3, #4]
   d637c:	9301      	str	r3, [sp, #4]
   d637e:	bd08      	pop	{r3, pc}
   d6380:	0003021c 	.word	0x0003021c

000d6384 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6384:	b508      	push	{r3, lr}
   d6386:	4b02      	ldr	r3, [pc, #8]	; (d6390 <realloc+0xc>)
   d6388:	681b      	ldr	r3, [r3, #0]
   d638a:	689b      	ldr	r3, [r3, #8]
   d638c:	9301      	str	r3, [sp, #4]
   d638e:	bd08      	pop	{r3, pc}
   d6390:	0003021c 	.word	0x0003021c

000d6394 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6394:	b508      	push	{r3, lr}
   d6396:	4b02      	ldr	r3, [pc, #8]	; (d63a0 <siprintf+0xc>)
   d6398:	681b      	ldr	r3, [r3, #0]
   d639a:	691b      	ldr	r3, [r3, #16]
   d639c:	9301      	str	r3, [sp, #4]
   d639e:	bd08      	pop	{r3, pc}
   d63a0:	0003021c 	.word	0x0003021c

000d63a4 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d63a4:	b508      	push	{r3, lr}
   d63a6:	4b02      	ldr	r3, [pc, #8]	; (d63b0 <siscanf+0xc>)
   d63a8:	681b      	ldr	r3, [r3, #0]
   d63aa:	699b      	ldr	r3, [r3, #24]
   d63ac:	9301      	str	r3, [sp, #4]
   d63ae:	bd08      	pop	{r3, pc}
   d63b0:	0003021c 	.word	0x0003021c

000d63b4 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d63b4:	b508      	push	{r3, lr}
   d63b6:	4b02      	ldr	r3, [pc, #8]	; (d63c0 <vsnprintf+0xc>)
   d63b8:	681b      	ldr	r3, [r3, #0]
   d63ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d63bc:	9301      	str	r3, [sp, #4]
   d63be:	bd08      	pop	{r3, pc}
   d63c0:	0003021c 	.word	0x0003021c

000d63c4 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d63c4:	b508      	push	{r3, lr}
   d63c6:	4b02      	ldr	r3, [pc, #8]	; (d63d0 <_malloc_r+0xc>)
   d63c8:	681b      	ldr	r3, [r3, #0]
   d63ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d63cc:	9301      	str	r3, [sp, #4]
   d63ce:	bd08      	pop	{r3, pc}
   d63d0:	0003021c 	.word	0x0003021c

000d63d4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63d4:	2200      	movs	r2, #0
   d63d6:	4611      	mov	r1, r2
   d63d8:	6840      	ldr	r0, [r0, #4]
   d63da:	f7ff bf83 	b.w	d62e4 <network_listening>

000d63de <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d63de:	2200      	movs	r2, #0
   d63e0:	4611      	mov	r1, r2
   d63e2:	6840      	ldr	r0, [r0, #4]
   d63e4:	f7ff bf8e 	b.w	d6304 <network_get_listen_timeout>

000d63e8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d63e8:	2200      	movs	r2, #0
   d63ea:	6840      	ldr	r0, [r0, #4]
   d63ec:	f7ff bf82 	b.w	d62f4 <network_set_listen_timeout>

000d63f0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d63f0:	2200      	movs	r2, #0
   d63f2:	f081 0101 	eor.w	r1, r1, #1
   d63f6:	6840      	ldr	r0, [r0, #4]
   d63f8:	f7ff bf6c 	b.w	d62d4 <network_listen>

000d63fc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d63fc:	2300      	movs	r3, #0
   d63fe:	461a      	mov	r2, r3
   d6400:	4619      	mov	r1, r3
   d6402:	6840      	ldr	r0, [r0, #4]
   d6404:	f7ff bf5e 	b.w	d62c4 <network_off>

000d6408 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6408:	2300      	movs	r3, #0
   d640a:	461a      	mov	r2, r3
   d640c:	4619      	mov	r1, r3
   d640e:	6840      	ldr	r0, [r0, #4]
   d6410:	f7ff bf50 	b.w	d62b4 <network_on>

000d6414 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6414:	2200      	movs	r2, #0
   d6416:	4611      	mov	r1, r2
   d6418:	6840      	ldr	r0, [r0, #4]
   d641a:	f7ff bf43 	b.w	d62a4 <network_ready>

000d641e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d641e:	2200      	movs	r2, #0
   d6420:	4611      	mov	r1, r2
   d6422:	6840      	ldr	r0, [r0, #4]
   d6424:	f7ff bf2e 	b.w	d6284 <network_connecting>

000d6428 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6428:	2200      	movs	r2, #0
   d642a:	2102      	movs	r1, #2
   d642c:	6840      	ldr	r0, [r0, #4]
   d642e:	f7ff bf31 	b.w	d6294 <network_disconnect>

000d6432 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6432:	2300      	movs	r3, #0
   d6434:	461a      	mov	r2, r3
   d6436:	6840      	ldr	r0, [r0, #4]
   d6438:	f7ff bf1c 	b.w	d6274 <network_connect>

000d643c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d643c:	4b02      	ldr	r3, [pc, #8]	; (d6448 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d643e:	2203      	movs	r2, #3
   d6440:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6442:	4a02      	ldr	r2, [pc, #8]	; (d644c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6444:	601a      	str	r2, [r3, #0]
   d6446:	4770      	bx	lr
   d6448:	2003e3ac 	.word	0x2003e3ac
   d644c:	000d82e8 	.word	0x000d82e8

000d6450 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6450:	2100      	movs	r1, #0
   d6452:	f7ff bdbb 	b.w	d5fcc <HAL_SPI_Acquire>

000d6456 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6456:	2100      	movs	r1, #0
   d6458:	f7ff bdc0 	b.w	d5fdc <HAL_SPI_Release>

000d645c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d645c:	b510      	push	{r4, lr}
   d645e:	4604      	mov	r4, r0
{
    _spi = spi;
   d6460:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6462:	4608      	mov	r0, r1
   d6464:	f7ff fd82 	bl	d5f6c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6468:	2300      	movs	r3, #0
   d646a:	6063      	str	r3, [r4, #4]
}
   d646c:	4620      	mov	r0, r4
   d646e:	bd10      	pop	{r4, pc}

000d6470 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6470:	7800      	ldrb	r0, [r0, #0]
   d6472:	f7ff bff0 	b.w	d6456 <_ZN8SPIClass6unlockEv.isra.1>
	...

000d6478 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6478:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d647a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d647c:	6018      	str	r0, [r3, #0]
   d647e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6480:	6818      	ldr	r0, [r3, #0]
   d6482:	4288      	cmp	r0, r1
   d6484:	b2e5      	uxtb	r5, r4
   d6486:	d906      	bls.n	d6496 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6488:	3401      	adds	r4, #1
   d648a:	2c08      	cmp	r4, #8
   d648c:	d002      	beq.n	d6494 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d648e:	0840      	lsrs	r0, r0, #1
   d6490:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6492:	e7f5      	b.n	d6480 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6494:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6496:	4b02      	ldr	r3, [pc, #8]	; (d64a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6498:	5d5b      	ldrb	r3, [r3, r5]
   d649a:	7013      	strb	r3, [r2, #0]
   d649c:	bd30      	pop	{r4, r5, pc}
   d649e:	bf00      	nop
   d64a0:	000d8314 	.word	0x000d8314

000d64a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d64a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d64a8:	4607      	mov	r7, r0
   d64aa:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d64ac:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d64ae:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d64b0:	f7ff ffce 	bl	d6450 <_ZN8SPIClass4lockEv.isra.0>
   d64b4:	2800      	cmp	r0, #0
   d64b6:	db62      	blt.n	d657e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d64b8:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d64ba:	2214      	movs	r2, #20
   d64bc:	2100      	movs	r1, #0
   d64be:	a809      	add	r0, sp, #36	; 0x24
   d64c0:	f001 fa1e 	bl	d7900 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d64c4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d64c6:	4620      	mov	r0, r4
   d64c8:	2200      	movs	r2, #0
   d64ca:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d64cc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d64d0:	f7ff fd5c 	bl	d5f8c <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d64d4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d64d8:	b154      	cbz	r4, d64f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d64da:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d64de:	b935      	cbnz	r5, d64ee <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d64e0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d64e4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d64e8:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d64ec:	e003      	b.n	d64f6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d64ee:	2400      	movs	r4, #0
   d64f0:	46a1      	mov	r9, r4
   d64f2:	46a0      	mov	r8, r4
   d64f4:	2501      	movs	r5, #1
   d64f6:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d64f8:	b105      	cbz	r5, d64fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d64fa:	b9bb      	cbnz	r3, d652c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d64fc:	429d      	cmp	r5, r3
   d64fe:	d10b      	bne.n	d6518 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6500:	68b2      	ldr	r2, [r6, #8]
   d6502:	4542      	cmp	r2, r8
   d6504:	d108      	bne.n	d6518 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6506:	f88d 9020 	strb.w	r9, [sp, #32]
   d650a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d650e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6512:	89b2      	ldrh	r2, [r6, #12]
   d6514:	4291      	cmp	r1, r2
   d6516:	d009      	beq.n	d652c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6518:	b153      	cbz	r3, d6530 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d651a:	2400      	movs	r4, #0
   d651c:	7838      	ldrb	r0, [r7, #0]
   d651e:	9401      	str	r4, [sp, #4]
   d6520:	9400      	str	r4, [sp, #0]
   d6522:	4623      	mov	r3, r4
   d6524:	4622      	mov	r2, r4
   d6526:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6528:	f7ff fd48 	bl	d5fbc <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d652c:	2000      	movs	r0, #0
   d652e:	e026      	b.n	d657e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6530:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6534:	68b1      	ldr	r1, [r6, #8]
   d6536:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6538:	ab04      	add	r3, sp, #16
   d653a:	f10d 020f 	add.w	r2, sp, #15
   d653e:	f7ff ff9b 	bl	d6478 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6542:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6544:	b105      	cbz	r5, d6548 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6546:	b9b1      	cbnz	r1, d6576 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6548:	42a9      	cmp	r1, r5
   d654a:	d008      	beq.n	d655e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d654c:	2400      	movs	r4, #0
   d654e:	7838      	ldrb	r0, [r7, #0]
   d6550:	9401      	str	r4, [sp, #4]
   d6552:	7b74      	ldrb	r4, [r6, #13]
   d6554:	7b33      	ldrb	r3, [r6, #12]
   d6556:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d655a:	9400      	str	r4, [sp, #0]
   d655c:	e7e4      	b.n	d6528 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d655e:	68b3      	ldr	r3, [r6, #8]
   d6560:	4543      	cmp	r3, r8
   d6562:	d3f3      	bcc.n	d654c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6564:	f88d 9020 	strb.w	r9, [sp, #32]
   d6568:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d656c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6570:	89b3      	ldrh	r3, [r6, #12]
   d6572:	429a      	cmp	r2, r3
   d6574:	d1ea      	bne.n	d654c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6576:	9b04      	ldr	r3, [sp, #16]
   d6578:	4543      	cmp	r3, r8
   d657a:	d1e7      	bne.n	d654c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d657c:	e7d6      	b.n	d652c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d657e:	b00f      	add	sp, #60	; 0x3c
   d6580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6584 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6584:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6586:	7800      	ldrb	r0, [r0, #0]
   d6588:	f7ff fce8 	bl	d5f5c <HAL_SPI_Send_Receive_Data>
}
   d658c:	b2c0      	uxtb	r0, r0
   d658e:	bd08      	pop	{r3, pc}

000d6590 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6590:	b530      	push	{r4, r5, lr}
   d6592:	b087      	sub	sp, #28
   d6594:	4604      	mov	r4, r0
   d6596:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d6598:	7800      	ldrb	r0, [r0, #0]
   d659a:	9500      	str	r5, [sp, #0]
   d659c:	f7ff fcfe 	bl	d5f9c <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d65a0:	b93d      	cbnz	r5, d65b2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d65a2:	a902      	add	r1, sp, #8
   d65a4:	7820      	ldrb	r0, [r4, #0]
   d65a6:	f7ff fd01 	bl	d5fac <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d65aa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d65ae:	07db      	lsls	r3, r3, #31
   d65b0:	d4f7      	bmi.n	d65a2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d65b2:	b007      	add	sp, #28
   d65b4:	bd30      	pop	{r4, r5, pc}

000d65b6 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d65b6:	7800      	ldrb	r0, [r0, #0]
   d65b8:	f7ff bce0 	b.w	d5f7c <HAL_SPI_Is_Enabled>

000d65bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d65bc:	b510      	push	{r4, lr}
   d65be:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d65c0:	6800      	ldr	r0, [r0, #0]
   d65c2:	b118      	cbz	r0, d65cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d65c4:	f7ff fed6 	bl	d6374 <free>
            wakeupSource_ = nullptr;
   d65c8:	2300      	movs	r3, #0
   d65ca:	6023      	str	r3, [r4, #0]
   d65cc:	bd10      	pop	{r4, pc}

000d65ce <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d65ce:	b510      	push	{r4, lr}
   d65d0:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d65d2:	f7ff fff3 	bl	d65bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d65d6:	4620      	mov	r0, r4
   d65d8:	bd10      	pop	{r4, pc}
	...

000d65dc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d65dc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d65de:	4c09      	ldr	r4, [pc, #36]	; (d6604 <_GLOBAL__sub_I_System+0x28>)
   d65e0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d65e2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d65e6:	6020      	str	r0, [r4, #0]
   d65e8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d65ea:	71a0      	strb	r0, [r4, #6]
   d65ec:	8120      	strh	r0, [r4, #8]
   d65ee:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d65f0:	f7ff fe14 	bl	d621c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d65f4:	4620      	mov	r0, r4
   d65f6:	4a04      	ldr	r2, [pc, #16]	; (d6608 <_GLOBAL__sub_I_System+0x2c>)
   d65f8:	4904      	ldr	r1, [pc, #16]	; (d660c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d65fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d65fe:	f000 beb9 	b.w	d7374 <__aeabi_atexit>
   d6602:	bf00      	nop
   d6604:	2003e3b4 	.word	0x2003e3b4
   d6608:	2003de68 	.word	0x2003de68
   d660c:	000d65cf 	.word	0x000d65cf

000d6610 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6610:	b510      	push	{r4, lr}
   d6612:	4604      	mov	r4, r0
{
	free(buffer);
   d6614:	6800      	ldr	r0, [r0, #0]
   d6616:	f7ff fead 	bl	d6374 <free>
}
   d661a:	4620      	mov	r0, r4
   d661c:	bd10      	pop	{r4, pc}

000d661e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d661e:	b510      	push	{r4, lr}
   d6620:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6622:	6800      	ldr	r0, [r0, #0]
   d6624:	b108      	cbz	r0, d662a <_ZN6String10invalidateEv+0xc>
   d6626:	f7ff fea5 	bl	d6374 <free>
	buffer = NULL;
   d662a:	2300      	movs	r3, #0
   d662c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d662e:	60a3      	str	r3, [r4, #8]
   d6630:	6063      	str	r3, [r4, #4]
   d6632:	bd10      	pop	{r4, pc}

000d6634 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6634:	b538      	push	{r3, r4, r5, lr}
   d6636:	4604      	mov	r4, r0
   d6638:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d663a:	6800      	ldr	r0, [r0, #0]
   d663c:	3101      	adds	r1, #1
   d663e:	f7ff fea1 	bl	d6384 <realloc>
	if (newbuffer) {
   d6642:	b110      	cbz	r0, d664a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6644:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6648:	2001      	movs	r0, #1
	}
	return 0;
}
   d664a:	bd38      	pop	{r3, r4, r5, pc}

000d664c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d664c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d664e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6650:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6652:	b113      	cbz	r3, d665a <_ZN6String7reserveEj+0xe>
   d6654:	6843      	ldr	r3, [r0, #4]
   d6656:	428b      	cmp	r3, r1
   d6658:	d207      	bcs.n	d666a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d665a:	4620      	mov	r0, r4
   d665c:	f7ff ffea 	bl	d6634 <_ZN6String12changeBufferEj>
   d6660:	b120      	cbz	r0, d666c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6662:	68a3      	ldr	r3, [r4, #8]
   d6664:	b90b      	cbnz	r3, d666a <_ZN6String7reserveEj+0x1e>
   d6666:	6822      	ldr	r2, [r4, #0]
   d6668:	7013      	strb	r3, [r2, #0]
   d666a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d666c:	bd10      	pop	{r4, pc}

000d666e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d666e:	b570      	push	{r4, r5, r6, lr}
   d6670:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6672:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6674:	4604      	mov	r4, r0
   d6676:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6678:	f7ff ffe8 	bl	d664c <_ZN6String7reserveEj>
   d667c:	b918      	cbnz	r0, d6686 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d667e:	4620      	mov	r0, r4
   d6680:	f7ff ffcd 	bl	d661e <_ZN6String10invalidateEv>
		return *this;
   d6684:	e009      	b.n	d669a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6686:	462a      	mov	r2, r5
   d6688:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d668a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d668c:	6820      	ldr	r0, [r4, #0]
   d668e:	f001 f92c 	bl	d78ea <memcpy>
	buffer[len] = 0;
   d6692:	6822      	ldr	r2, [r4, #0]
   d6694:	68a3      	ldr	r3, [r4, #8]
   d6696:	2100      	movs	r1, #0
   d6698:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d669a:	4620      	mov	r0, r4
   d669c:	bd70      	pop	{r4, r5, r6, pc}

000d669e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d669e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66a0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d66a2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66a4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d66a6:	6043      	str	r3, [r0, #4]
	len = 0;
   d66a8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d66aa:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d66ac:	460d      	mov	r5, r1
   d66ae:	b139      	cbz	r1, d66c0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d66b0:	4608      	mov	r0, r1
   d66b2:	f001 f967 	bl	d7984 <strlen>
   d66b6:	4629      	mov	r1, r5
   d66b8:	4602      	mov	r2, r0
   d66ba:	4620      	mov	r0, r4
   d66bc:	f7ff ffd7 	bl	d666e <_ZN6String4copyEPKcj>
}
   d66c0:	4620      	mov	r0, r4
   d66c2:	bd38      	pop	{r3, r4, r5, pc}

000d66c4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d66c4:	b538      	push	{r3, r4, r5, lr}
   d66c6:	4605      	mov	r5, r0
	if (buffer) {
   d66c8:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d66ca:	460c      	mov	r4, r1
	if (buffer) {
   d66cc:	b160      	cbz	r0, d66e8 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d66ce:	686a      	ldr	r2, [r5, #4]
   d66d0:	688b      	ldr	r3, [r1, #8]
   d66d2:	429a      	cmp	r2, r3
   d66d4:	d306      	bcc.n	d66e4 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d66d6:	6809      	ldr	r1, [r1, #0]
   d66d8:	f001 f94c 	bl	d7974 <strcpy>
			len = rhs.len;
   d66dc:	68a3      	ldr	r3, [r4, #8]
   d66de:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d66e0:	2300      	movs	r3, #0
   d66e2:	e00a      	b.n	d66fa <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d66e4:	f7ff fe46 	bl	d6374 <free>
		}
	}
	buffer = rhs.buffer;
   d66e8:	6823      	ldr	r3, [r4, #0]
   d66ea:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d66ec:	6863      	ldr	r3, [r4, #4]
   d66ee:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d66f0:	68a3      	ldr	r3, [r4, #8]
   d66f2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d66f4:	2300      	movs	r3, #0
   d66f6:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d66f8:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d66fa:	60a3      	str	r3, [r4, #8]
   d66fc:	bd38      	pop	{r3, r4, r5, pc}

000d66fe <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d66fe:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d6700:	b510      	push	{r4, lr}
   d6702:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6704:	d001      	beq.n	d670a <_ZN6StringaSEOS_+0xc>
   d6706:	f7ff ffdd 	bl	d66c4 <_ZN6String4moveERS_>
	return *this;
}
   d670a:	4620      	mov	r0, r4
   d670c:	bd10      	pop	{r4, pc}

000d670e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d670e:	b570      	push	{r4, r5, r6, lr}
   d6710:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6712:	b19a      	cbz	r2, d673c <_ZNK6String8getBytesEPhjj+0x2e>
   d6714:	b191      	cbz	r1, d673c <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d6716:	6885      	ldr	r5, [r0, #8]
   d6718:	429d      	cmp	r5, r3
   d671a:	d802      	bhi.n	d6722 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d671c:	2300      	movs	r3, #0
   d671e:	700b      	strb	r3, [r1, #0]
		return;
   d6720:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d6722:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d6724:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d6726:	6801      	ldr	r1, [r0, #0]
   d6728:	42ac      	cmp	r4, r5
   d672a:	bf28      	it	cs
   d672c:	462c      	movcs	r4, r5
   d672e:	4419      	add	r1, r3
   d6730:	4622      	mov	r2, r4
   d6732:	4630      	mov	r0, r6
   d6734:	f001 f943 	bl	d79be <strncpy>
	buf[n] = 0;
   d6738:	2300      	movs	r3, #0
   d673a:	5533      	strb	r3, [r6, r4]
   d673c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6740 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d6742:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6744:	460f      	mov	r7, r1
   d6746:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6748:	490c      	ldr	r1, [pc, #48]	; (d677c <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d674a:	bf88      	it	hi
   d674c:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d674e:	4614      	mov	r4, r2
   d6750:	4606      	mov	r6, r0
	if (left > right) {
   d6752:	bf84      	itt	hi
   d6754:	462c      	movhi	r4, r5
   d6756:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6758:	f7ff ffa1 	bl	d669e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d675c:	68ba      	ldr	r2, [r7, #8]
   d675e:	4294      	cmp	r4, r2
   d6760:	d80a      	bhi.n	d6778 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d6762:	6839      	ldr	r1, [r7, #0]
   d6764:	4295      	cmp	r5, r2
   d6766:	bf94      	ite	ls
   d6768:	ebc4 0205 	rsbls	r2, r4, r5
   d676c:	ebc4 0202 	rsbhi	r2, r4, r2
   d6770:	4421      	add	r1, r4
   d6772:	4630      	mov	r0, r6
   d6774:	f7ff ff7b 	bl	d666e <_ZN6String4copyEPKcj>
	return out;
}
   d6778:	4630      	mov	r0, r6
   d677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d677c:	000d83c3 	.word	0x000d83c3

000d6780 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6780:	b510      	push	{r4, lr}
   d6782:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6784:	6800      	ldr	r0, [r0, #0]
   d6786:	b108      	cbz	r0, d678c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6788:	f7ff fc80 	bl	d608c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d678c:	4620      	mov	r0, r4
   d678e:	bd10      	pop	{r4, pc}

000d6790 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6790:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6792:	4c06      	ldr	r4, [pc, #24]	; (d67ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6794:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6796:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6798:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d679a:	f7ff fc6f 	bl	d607c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d679e:	4620      	mov	r0, r4
   d67a0:	4a03      	ldr	r2, [pc, #12]	; (d67b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d67a2:	4904      	ldr	r1, [pc, #16]	; (d67b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d67a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d67a8:	f000 bde4 	b.w	d7374 <__aeabi_atexit>
   d67ac:	2003e3c0 	.word	0x2003e3c0
   d67b0:	2003de68 	.word	0x2003de68
   d67b4:	000d6781 	.word	0x000d6781

000d67b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d67b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67ba:	4606      	mov	r6, r0
   d67bc:	460d      	mov	r5, r1
   d67be:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d67c0:	2400      	movs	r4, #0
  while (size--) {
   d67c2:	42bd      	cmp	r5, r7
   d67c4:	d00c      	beq.n	d67e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d67c6:	6833      	ldr	r3, [r6, #0]
   d67c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d67cc:	689b      	ldr	r3, [r3, #8]
   d67ce:	4630      	mov	r0, r6
   d67d0:	4798      	blx	r3
     if (chunk>=0)
   d67d2:	2800      	cmp	r0, #0
   d67d4:	db01      	blt.n	d67da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d67d6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d67d8:	e7f3      	b.n	d67c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d67da:	2c00      	cmp	r4, #0
   d67dc:	bf08      	it	eq
   d67de:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d67e0:	4620      	mov	r0, r4
   d67e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67e4 <_ZN5Print5printEPKc>:
   d67e4:	b508      	push	{r3, lr}
   d67e6:	f7ff f82f 	bl	d5848 <_ZN5Print5writeEPKc>
   d67ea:	bd08      	pop	{r3, pc}

000d67ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d67ec:	6803      	ldr	r3, [r0, #0]
   d67ee:	689b      	ldr	r3, [r3, #8]
   d67f0:	4718      	bx	r3

000d67f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d67f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d67f4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d67f6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d67f8:	f7ff fff8 	bl	d67ec <_ZN5Print5printEc>
  n += print('\n');
   d67fc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d67fe:	4604      	mov	r4, r0
  n += print('\n');
   d6800:	4628      	mov	r0, r5
   d6802:	f7ff fff3 	bl	d67ec <_ZN5Print5printEc>
  return n;
}
   d6806:	4420      	add	r0, r4
   d6808:	bd38      	pop	{r3, r4, r5, pc}

000d680a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d680a:	b538      	push	{r3, r4, r5, lr}
   d680c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d680e:	f7ff f81b 	bl	d5848 <_ZN5Print5writeEPKc>
   d6812:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6814:	4628      	mov	r0, r5
   d6816:	f7ff ffec 	bl	d67f2 <_ZN5Print7printlnEv>
  return n;
}
   d681a:	4420      	add	r0, r4
   d681c:	bd38      	pop	{r3, r4, r5, pc}

000d681e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d681e:	b530      	push	{r4, r5, lr}
   d6820:	b08b      	sub	sp, #44	; 0x2c
   d6822:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6824:	2100      	movs	r1, #0
   d6826:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d682a:	2a01      	cmp	r2, #1
   d682c:	bf98      	it	ls
   d682e:	220a      	movls	r2, #10
   d6830:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6834:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6838:	fb05 3312 	mls	r3, r5, r2, r3
   d683c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6840:	2b09      	cmp	r3, #9
   d6842:	bf94      	ite	ls
   d6844:	3330      	addls	r3, #48	; 0x30
   d6846:	3337      	addhi	r3, #55	; 0x37
   d6848:	b2db      	uxtb	r3, r3
   d684a:	4621      	mov	r1, r4
   d684c:	f804 3901 	strb.w	r3, [r4], #-1
   d6850:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6852:	2d00      	cmp	r5, #0
   d6854:	d1ee      	bne.n	d6834 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6856:	f7fe fff7 	bl	d5848 <_ZN5Print5writeEPKc>
}
   d685a:	b00b      	add	sp, #44	; 0x2c
   d685c:	bd30      	pop	{r4, r5, pc}

000d685e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d685e:	b40c      	push	{r2, r3}
   d6860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6864:	b087      	sub	sp, #28
   d6866:	af00      	add	r7, sp, #0
   d6868:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d686c:	4605      	mov	r5, r0
   d686e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6872:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6874:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6876:	4623      	mov	r3, r4
   d6878:	464a      	mov	r2, r9
   d687a:	2114      	movs	r1, #20
   d687c:	1d38      	adds	r0, r7, #4
   d687e:	f7ff fd99 	bl	d63b4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6882:	2813      	cmp	r0, #19
   d6884:	d805      	bhi.n	d6892 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6886:	1d39      	adds	r1, r7, #4
   d6888:	4628      	mov	r0, r5
   d688a:	f7fe ffdd 	bl	d5848 <_ZN5Print5writeEPKc>
   d688e:	4604      	mov	r4, r0
   d6890:	e013      	b.n	d68ba <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6892:	f100 0308 	add.w	r3, r0, #8
   d6896:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d689a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d689c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d68a0:	1c41      	adds	r1, r0, #1
   d68a2:	4623      	mov	r3, r4
   d68a4:	464a      	mov	r2, r9
   d68a6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d68a8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d68aa:	f7ff fd83 	bl	d63b4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d68ae:	4669      	mov	r1, sp
   d68b0:	4628      	mov	r0, r5
   d68b2:	f7fe ffc9 	bl	d5848 <_ZN5Print5writeEPKc>
   d68b6:	4604      	mov	r4, r0
   d68b8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d68ba:	b11e      	cbz	r6, d68c4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d68bc:	4628      	mov	r0, r5
   d68be:	f7ff ff98 	bl	d67f2 <_ZN5Print7printlnEv>
   d68c2:	4404      	add	r4, r0
    return n;
}
   d68c4:	4620      	mov	r0, r4
   d68c6:	371c      	adds	r7, #28
   d68c8:	46bd      	mov	sp, r7
   d68ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68ce:	b002      	add	sp, #8
   d68d0:	4770      	bx	lr
	...

000d68d4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d68d4:	4b01      	ldr	r3, [pc, #4]	; (d68dc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d68d6:	4a02      	ldr	r2, [pc, #8]	; (d68e0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d68d8:	601a      	str	r2, [r3, #0]
   d68da:	4770      	bx	lr
   d68dc:	2003e3c4 	.word	0x2003e3c4
   d68e0:	000d838f 	.word	0x000d838f

000d68e4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d68e4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d68e6:	2000      	movs	r0, #0
   d68e8:	f7ff fd2c 	bl	d6344 <spark_sync_time_pending>
   d68ec:	b128      	cbz	r0, d68fa <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d68ee:	f7ff fd19 	bl	d6324 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d68f2:	f080 0001 	eor.w	r0, r0, #1
   d68f6:	b2c0      	uxtb	r0, r0
   d68f8:	bd08      	pop	{r3, pc}
   d68fa:	2001      	movs	r0, #1
    }
   d68fc:	bd08      	pop	{r3, pc}
	...

000d6900 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d6900:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d6904:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d690c:	d40f      	bmi.n	d692e <_ZN9TimeClass4zoneEf+0x2e>
   d690e:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d6912:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d6916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d691a:	dc08      	bgt.n	d692e <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d691c:	eddf 7a04 	vldr	s15, [pc, #16]	; d6930 <_ZN9TimeClass4zoneEf+0x30>
   d6920:	4b04      	ldr	r3, [pc, #16]	; (d6934 <_ZN9TimeClass4zoneEf+0x34>)
   d6922:	ee20 0a27 	vmul.f32	s0, s0, s15
   d6926:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d692a:	ed83 0a00 	vstr	s0, [r3]
   d692e:	4770      	bx	lr
   d6930:	45610000 	.word	0x45610000
   d6934:	2003e3d0 	.word	0x2003e3d0

000d6938 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6938:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d693a:	4b0e      	ldr	r3, [pc, #56]	; (d6974 <_ZN9TimeClass7timeStrEl+0x3c>)
   d693c:	681b      	ldr	r3, [r3, #0]
   d693e:	4419      	add	r1, r3
   d6940:	4b0d      	ldr	r3, [pc, #52]	; (d6978 <_ZN9TimeClass7timeStrEl+0x40>)
   d6942:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6944:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d6946:	a802      	add	r0, sp, #8
   d6948:	4419      	add	r1, r3
   d694a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d694e:	f000 fec5 	bl	d76dc <localtime>
        char* ascstr = asctime(calendar_time);
   d6952:	f000 fe79 	bl	d7648 <asctime>
   d6956:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d6958:	f001 f814 	bl	d7984 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d695c:	4428      	add	r0, r5
   d695e:	2300      	movs	r3, #0
   d6960:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d6964:	4629      	mov	r1, r5
   d6966:	4620      	mov	r0, r4
   d6968:	f7ff fe99 	bl	d669e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d696c:	4620      	mov	r0, r4
   d696e:	b003      	add	sp, #12
   d6970:	bd30      	pop	{r4, r5, pc}
   d6972:	bf00      	nop
   d6974:	2003e3d0 	.word	0x2003e3d0
   d6978:	2003e3cc 	.word	0x2003e3cc

000d697c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d697c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d697e:	2000      	movs	r0, #0
   d6980:	f7ff fb5c 	bl	d603c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6984:	4604      	mov	r4, r0
   d6986:	b968      	cbnz	r0, d69a4 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6988:	f7ff fc40 	bl	d620c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d698c:	2801      	cmp	r0, #1
   d698e:	d10b      	bne.n	d69a8 <_ZN9TimeClass7isValidEv+0x2c>
   d6990:	4620      	mov	r0, r4
   d6992:	f7ff fc53 	bl	d623c <system_thread_get_state>
   d6996:	b938      	cbnz	r0, d69a8 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6998:	f7ff ffa4 	bl	d68e4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d699c:	b930      	cbnz	r0, d69ac <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d699e:	f7ff fcb9 	bl	d6314 <spark_process>
   d69a2:	e7f9      	b.n	d6998 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d69a4:	2001      	movs	r0, #1
   d69a6:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d69a8:	2000      	movs	r0, #0
   d69aa:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d69ac:	f7ff ff9a 	bl	d68e4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d69b0:	2000      	movs	r0, #0
   d69b2:	f7ff fb43 	bl	d603c <HAL_RTC_Time_Is_Valid>
   d69b6:	3000      	adds	r0, #0
   d69b8:	bf18      	it	ne
   d69ba:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d69bc:	bd10      	pop	{r4, pc}

000d69be <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d69be:	b508      	push	{r3, lr}
    (void)isValid();
   d69c0:	f7ff ffdc 	bl	d697c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d69c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d69c8:	f7ff bb30 	b.w	d602c <HAL_RTC_Get_UnixTime>

000d69cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d69cc:	4b02      	ldr	r3, [pc, #8]	; (d69d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d69ce:	681a      	ldr	r2, [r3, #0]
   d69d0:	4b02      	ldr	r3, [pc, #8]	; (d69dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d69d2:	601a      	str	r2, [r3, #0]
   d69d4:	4770      	bx	lr
   d69d6:	bf00      	nop
   d69d8:	2003ddb0 	.word	0x2003ddb0
   d69dc:	2003e3c8 	.word	0x2003e3c8

000d69e0 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d69e0:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d69e2:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d69e4:	d007      	beq.n	d69f6 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d69e6:	9d03      	ldr	r5, [sp, #12]
   d69e8:	1a44      	subs	r4, r0, r1
   d69ea:	1aed      	subs	r5, r5, r3
   d69ec:	436c      	muls	r4, r5
   d69ee:	1a52      	subs	r2, r2, r1
   d69f0:	fb94 f4f2 	sdiv	r4, r4, r2
   d69f4:	18e0      	adds	r0, r4, r3
}
   d69f6:	bd30      	pop	{r4, r5, pc}

000d69f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d69f8:	2100      	movs	r1, #0
   d69fa:	f7ff bc17 	b.w	d622c <system_delay_ms>

000d69fe <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d69fe:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6a00:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a02:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6a04:	b113      	cbz	r3, d6a0c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a06:	2203      	movs	r2, #3
   d6a08:	4601      	mov	r1, r0
   d6a0a:	4798      	blx	r3
    }
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	bd10      	pop	{r4, pc}

000d6a10 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6a10:	b510      	push	{r4, lr}
   d6a12:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6a14:	f7ff fff3 	bl	d69fe <_ZNSt14_Function_baseD1Ev>
   d6a18:	4620      	mov	r0, r4
   d6a1a:	bd10      	pop	{r4, pc}

000d6a1c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6a1c:	4803      	ldr	r0, [pc, #12]	; (d6a2c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6a1e:	4a04      	ldr	r2, [pc, #16]	; (d6a30 <_GLOBAL__sub_I_RGB+0x14>)
   d6a20:	4904      	ldr	r1, [pc, #16]	; (d6a34 <_GLOBAL__sub_I_RGB+0x18>)
   d6a22:	2300      	movs	r3, #0
   d6a24:	6083      	str	r3, [r0, #8]
   d6a26:	f000 bca5 	b.w	d7374 <__aeabi_atexit>
   d6a2a:	bf00      	nop
   d6a2c:	2003e3d4 	.word	0x2003e3d4
   d6a30:	2003de68 	.word	0x2003de68
   d6a34:	000d6a11 	.word	0x000d6a11

000d6a38 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6a38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6a3a:	4b0c      	ldr	r3, [pc, #48]	; (d6a6c <serialEventRun+0x34>)
   d6a3c:	b133      	cbz	r3, d6a4c <serialEventRun+0x14>
   d6a3e:	f000 f957 	bl	d6cf0 <_Z16_fetch_usbserialv>
   d6a42:	6803      	ldr	r3, [r0, #0]
   d6a44:	691b      	ldr	r3, [r3, #16]
   d6a46:	4798      	blx	r3
   d6a48:	2800      	cmp	r0, #0
   d6a4a:	dc09      	bgt.n	d6a60 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6a4c:	4b08      	ldr	r3, [pc, #32]	; (d6a70 <serialEventRun+0x38>)
   d6a4e:	b163      	cbz	r3, d6a6a <serialEventRun+0x32>
   d6a50:	f000 f9d0 	bl	d6df4 <_Z22__fetch_global_Serial1v>
   d6a54:	6803      	ldr	r3, [r0, #0]
   d6a56:	691b      	ldr	r3, [r3, #16]
   d6a58:	4798      	blx	r3
   d6a5a:	2800      	cmp	r0, #0
   d6a5c:	dc03      	bgt.n	d6a66 <serialEventRun+0x2e>
   d6a5e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6a60:	f3af 8000 	nop.w
   d6a64:	e7f2      	b.n	d6a4c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6a66:	f3af 8000 	nop.w
   d6a6a:	bd08      	pop	{r3, pc}
	...

000d6a74 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6a74:	b508      	push	{r3, lr}
	serialEventRun();
   d6a76:	f7ff ffdf 	bl	d6a38 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6a7a:	f7ff facf 	bl	d601c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6a7e:	4b01      	ldr	r3, [pc, #4]	; (d6a84 <_post_loop+0x10>)
   d6a80:	6018      	str	r0, [r3, #0]
   d6a82:	bd08      	pop	{r3, pc}
   d6a84:	2003e708 	.word	0x2003e708

000d6a88 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6a88:	4802      	ldr	r0, [pc, #8]	; (d6a94 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6a8a:	4a03      	ldr	r2, [pc, #12]	; (d6a98 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6a8c:	4903      	ldr	r1, [pc, #12]	; (d6a9c <_Z33system_initialize_user_backup_ramv+0x14>)
   d6a8e:	1a12      	subs	r2, r2, r0
   d6a90:	f000 bf2b 	b.w	d78ea <memcpy>
   d6a94:	2003f400 	.word	0x2003f400
   d6a98:	2003f404 	.word	0x2003f404
   d6a9c:	000d8840 	.word	0x000d8840

000d6aa0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6aa0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6aa2:	2300      	movs	r3, #0
   d6aa4:	9300      	str	r3, [sp, #0]
   d6aa6:	461a      	mov	r2, r3
   d6aa8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6aac:	f7ff fbd8 	bl	d6260 <system_ctrl_set_result>
}
   d6ab0:	b003      	add	sp, #12
   d6ab2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ab8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6ab8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6aba:	8843      	ldrh	r3, [r0, #2]
   d6abc:	2b0a      	cmp	r3, #10
   d6abe:	d008      	beq.n	d6ad2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6ac0:	2b50      	cmp	r3, #80	; 0x50
   d6ac2:	d109      	bne.n	d6ad8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6ac4:	4b09      	ldr	r3, [pc, #36]	; (d6aec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6ac6:	681b      	ldr	r3, [r3, #0]
   d6ac8:	b13b      	cbz	r3, d6ada <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6aca:	b003      	add	sp, #12
   d6acc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6ad0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6ad2:	f7ff ffe5 	bl	d6aa0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6ad6:	e006      	b.n	d6ae6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6ad8:	2300      	movs	r3, #0
   d6ada:	9300      	str	r3, [sp, #0]
   d6adc:	461a      	mov	r2, r3
   d6ade:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ae2:	f7ff fbbd 	bl	d6260 <system_ctrl_set_result>
        break;
    }
}
   d6ae6:	b003      	add	sp, #12
   d6ae8:	f85d fb04 	ldr.w	pc, [sp], #4
   d6aec:	2003e3e4 	.word	0x2003e3e4

000d6af0 <module_user_init_hook>:

void module_user_init_hook()
{
   d6af0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6af2:	4c10      	ldr	r4, [pc, #64]	; (d6b34 <module_user_init_hook+0x44>)
   d6af4:	4d10      	ldr	r5, [pc, #64]	; (d6b38 <module_user_init_hook+0x48>)
   d6af6:	6823      	ldr	r3, [r4, #0]
   d6af8:	42ab      	cmp	r3, r5
   d6afa:	4b10      	ldr	r3, [pc, #64]	; (d6b3c <module_user_init_hook+0x4c>)
   d6afc:	bf0c      	ite	eq
   d6afe:	2201      	moveq	r2, #1
   d6b00:	2200      	movne	r2, #0
   d6b02:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6b04:	d002      	beq.n	d6b0c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6b06:	f7ff ffbf 	bl	d6a88 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6b0a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6b0c:	f7ff fa6e 	bl	d5fec <HAL_RNG_GetRandomNumber>
   d6b10:	4604      	mov	r4, r0
    srand(seed);
   d6b12:	f000 fefd 	bl	d7910 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6b16:	4b0a      	ldr	r3, [pc, #40]	; (d6b40 <module_user_init_hook+0x50>)
   d6b18:	b113      	cbz	r3, d6b20 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6b1a:	4620      	mov	r0, r4
   d6b1c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6b20:	2100      	movs	r1, #0
   d6b22:	4807      	ldr	r0, [pc, #28]	; (d6b40 <module_user_init_hook+0x50>)
   d6b24:	f7ff fc16 	bl	d6354 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b28:	2100      	movs	r1, #0
   d6b2a:	4806      	ldr	r0, [pc, #24]	; (d6b44 <module_user_init_hook+0x54>)
}
   d6b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b30:	f7ff bb8c 	b.w	d624c <system_ctrl_set_app_request_handler>
   d6b34:	2003f400 	.word	0x2003f400
   d6b38:	9a271c1e 	.word	0x9a271c1e
   d6b3c:	2003e3e8 	.word	0x2003e3e8
   d6b40:	00000000 	.word	0x00000000
   d6b44:	000d6ab9 	.word	0x000d6ab9

000d6b48 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6b48:	4770      	bx	lr

000d6b4a <_ZN9IPAddressD0Ev>:
   d6b4a:	b510      	push	{r4, lr}
   d6b4c:	2118      	movs	r1, #24
   d6b4e:	4604      	mov	r4, r0
   d6b50:	f000 fc1e 	bl	d7390 <_ZdlPvj>
   d6b54:	4620      	mov	r0, r4
   d6b56:	bd10      	pop	{r4, pc}

000d6b58 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b58:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b5a:	7d03      	ldrb	r3, [r0, #20]
   d6b5c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b5e:	b08d      	sub	sp, #52	; 0x34
   d6b60:	460e      	mov	r6, r1
   d6b62:	f100 0704 	add.w	r7, r0, #4
   d6b66:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b6a:	d002      	beq.n	d6b72 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6b6c:	f100 0508 	add.w	r5, r0, #8
   d6b70:	e018      	b.n	d6ba4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b72:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b74:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b76:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b7a:	232f      	movs	r3, #47	; 0x2f
   d6b7c:	462a      	mov	r2, r5
   d6b7e:	200a      	movs	r0, #10
   d6b80:	f7ff fa8c 	bl	d609c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6b84:	4628      	mov	r0, r5
   d6b86:	f000 fefd 	bl	d7984 <strlen>
   d6b8a:	6833      	ldr	r3, [r6, #0]
   d6b8c:	4602      	mov	r2, r0
   d6b8e:	68db      	ldr	r3, [r3, #12]
   d6b90:	4629      	mov	r1, r5
   d6b92:	4630      	mov	r0, r6
   d6b94:	4798      	blx	r3
   d6b96:	e00f      	b.n	d6bb8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6b98:	b124      	cbz	r4, d6ba4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6b9a:	212e      	movs	r1, #46	; 0x2e
   d6b9c:	4630      	mov	r0, r6
   d6b9e:	f7ff fe25 	bl	d67ec <_ZN5Print5printEc>
   d6ba2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6ba4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6ba8:	220a      	movs	r2, #10
   d6baa:	4630      	mov	r0, r6
   d6bac:	f7ff fe37 	bl	d681e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6bb0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6bb2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6bb4:	d1f0      	bne.n	d6b98 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6bb6:	4620      	mov	r0, r4
    }
    return n;
}
   d6bb8:	b00d      	add	sp, #52	; 0x34
   d6bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6bbc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6bbc:	b510      	push	{r4, lr}
   d6bbe:	4b05      	ldr	r3, [pc, #20]	; (d6bd4 <_ZN9IPAddressC1Ev+0x18>)
   d6bc0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6bc2:	2211      	movs	r2, #17
   d6bc4:	f840 3b04 	str.w	r3, [r0], #4
   d6bc8:	2100      	movs	r1, #0
   d6bca:	f000 fe99 	bl	d7900 <memset>
{
    clear();
}
   d6bce:	4620      	mov	r0, r4
   d6bd0:	bd10      	pop	{r4, pc}
   d6bd2:	bf00      	nop
   d6bd4:	000d8428 	.word	0x000d8428

000d6bd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6bd8:	4603      	mov	r3, r0
   d6bda:	4a07      	ldr	r2, [pc, #28]	; (d6bf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6bdc:	b510      	push	{r4, lr}
   d6bde:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6be2:	f101 0210 	add.w	r2, r1, #16
   d6be6:	f851 4b04 	ldr.w	r4, [r1], #4
   d6bea:	f843 4b04 	str.w	r4, [r3], #4
   d6bee:	4291      	cmp	r1, r2
   d6bf0:	d1f9      	bne.n	d6be6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6bf2:	780a      	ldrb	r2, [r1, #0]
   d6bf4:	701a      	strb	r2, [r3, #0]
}
   d6bf6:	bd10      	pop	{r4, pc}
   d6bf8:	000d8428 	.word	0x000d8428

000d6bfc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6bfc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6bfe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6c02:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6c06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6c0a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6c0e:	2304      	movs	r3, #4
   d6c10:	6041      	str	r1, [r0, #4]
   d6c12:	7503      	strb	r3, [r0, #20]
   d6c14:	bd10      	pop	{r4, pc}

000d6c16 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6c16:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6c18:	780d      	ldrb	r5, [r1, #0]
   d6c1a:	788b      	ldrb	r3, [r1, #2]
   d6c1c:	784a      	ldrb	r2, [r1, #1]
   d6c1e:	78c9      	ldrb	r1, [r1, #3]
   d6c20:	9100      	str	r1, [sp, #0]
   d6c22:	4629      	mov	r1, r5
   d6c24:	f7ff ffea 	bl	d6bfc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6c28:	b003      	add	sp, #12
   d6c2a:	bd30      	pop	{r4, r5, pc}

000d6c2c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6c2c:	7441      	strb	r1, [r0, #17]
   d6c2e:	4770      	bx	lr

000d6c30 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6c30:	4770      	bx	lr

000d6c32 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6c32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6c34:	2100      	movs	r1, #0
   d6c36:	7c00      	ldrb	r0, [r0, #16]
   d6c38:	f7ff fad0 	bl	d61dc <HAL_USB_USART_Receive_Data>
}
   d6c3c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c40:	bf28      	it	cs
   d6c42:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c46:	bd08      	pop	{r3, pc}

000d6c48 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6c48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6c4a:	2101      	movs	r1, #1
   d6c4c:	7c00      	ldrb	r0, [r0, #16]
   d6c4e:	f7ff fac5 	bl	d61dc <HAL_USB_USART_Receive_Data>
}
   d6c52:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c56:	bf28      	it	cs
   d6c58:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c5c:	bd08      	pop	{r3, pc}

000d6c5e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6c5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6c60:	7c00      	ldrb	r0, [r0, #16]
   d6c62:	f7ff fab3 	bl	d61cc <HAL_USB_USART_Available_Data_For_Write>
}
   d6c66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c6a:	bd08      	pop	{r3, pc}

000d6c6c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6c6c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6c6e:	7c00      	ldrb	r0, [r0, #16]
   d6c70:	f7ff faa4 	bl	d61bc <HAL_USB_USART_Available_Data>
}
   d6c74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c78:	bd08      	pop	{r3, pc}

000d6c7a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6c7a:	7c00      	ldrb	r0, [r0, #16]
   d6c7c:	f7ff babe 	b.w	d61fc <HAL_USB_USART_Flush_Data>

000d6c80 <_ZN9USBSerialD0Ev>:
   d6c80:	b510      	push	{r4, lr}
   d6c82:	2114      	movs	r1, #20
   d6c84:	4604      	mov	r4, r0
   d6c86:	f000 fb83 	bl	d7390 <_ZdlPvj>
   d6c8a:	4620      	mov	r0, r4
   d6c8c:	bd10      	pop	{r4, pc}

000d6c8e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6c8e:	b538      	push	{r3, r4, r5, lr}
   d6c90:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c92:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6c94:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c96:	f7ff fa99 	bl	d61cc <HAL_USB_USART_Available_Data_For_Write>
   d6c9a:	2800      	cmp	r0, #0
   d6c9c:	dc01      	bgt.n	d6ca2 <_ZN9USBSerial5writeEh+0x14>
   d6c9e:	7c60      	ldrb	r0, [r4, #17]
   d6ca0:	b128      	cbz	r0, d6cae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6ca2:	4629      	mov	r1, r5
   d6ca4:	7c20      	ldrb	r0, [r4, #16]
   d6ca6:	f7ff faa1 	bl	d61ec <HAL_USB_USART_Send_Data>
   d6caa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6cae:	bd38      	pop	{r3, r4, r5, pc}

000d6cb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6cb0:	b510      	push	{r4, lr}
   d6cb2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6cb4:	2300      	movs	r3, #0
   d6cb6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6cb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6cbc:	60a3      	str	r3, [r4, #8]
   d6cbe:	4b05      	ldr	r3, [pc, #20]	; (d6cd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6cc0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6cc2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6cc4:	4608      	mov	r0, r1
{
  _serial = serial;
   d6cc6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6cc8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6cca:	4611      	mov	r1, r2
   d6ccc:	f7ff fa66 	bl	d619c <HAL_USB_USART_Init>
}
   d6cd0:	4620      	mov	r0, r4
   d6cd2:	bd10      	pop	{r4, pc}
   d6cd4:	000d843c 	.word	0x000d843c

000d6cd8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6cd8:	2200      	movs	r2, #0
   d6cda:	7c00      	ldrb	r0, [r0, #16]
   d6cdc:	f7ff ba66 	b.w	d61ac <HAL_USB_USART_Begin>

000d6ce0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6ce0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6ce2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6ce4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6ce6:	2100      	movs	r1, #0
   d6ce8:	f000 fe0a 	bl	d7900 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6cec:	4620      	mov	r0, r4
   d6cee:	bd10      	pop	{r4, pc}

000d6cf0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6cf0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6cf2:	4d0e      	ldr	r5, [pc, #56]	; (d6d2c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6cf4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6cf6:	a801      	add	r0, sp, #4
   d6cf8:	f7ff fff2 	bl	d6ce0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6cfc:	6829      	ldr	r1, [r5, #0]
   d6cfe:	f011 0401 	ands.w	r4, r1, #1
   d6d02:	d110      	bne.n	d6d26 <_Z16_fetch_usbserialv+0x36>
   d6d04:	4628      	mov	r0, r5
   d6d06:	f7fd f9ca 	bl	d409e <__cxa_guard_acquire>
   d6d0a:	b160      	cbz	r0, d6d26 <_Z16_fetch_usbserialv+0x36>
   d6d0c:	aa01      	add	r2, sp, #4
   d6d0e:	4621      	mov	r1, r4
   d6d10:	4807      	ldr	r0, [pc, #28]	; (d6d30 <_Z16_fetch_usbserialv+0x40>)
   d6d12:	f7ff ffcd 	bl	d6cb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6d16:	4628      	mov	r0, r5
   d6d18:	f7fd f9c6 	bl	d40a8 <__cxa_guard_release>
   d6d1c:	4a05      	ldr	r2, [pc, #20]	; (d6d34 <_Z16_fetch_usbserialv+0x44>)
   d6d1e:	4906      	ldr	r1, [pc, #24]	; (d6d38 <_Z16_fetch_usbserialv+0x48>)
   d6d20:	4803      	ldr	r0, [pc, #12]	; (d6d30 <_Z16_fetch_usbserialv+0x40>)
   d6d22:	f000 fb27 	bl	d7374 <__aeabi_atexit>
	return _usbserial;
}
   d6d26:	4802      	ldr	r0, [pc, #8]	; (d6d30 <_Z16_fetch_usbserialv+0x40>)
   d6d28:	b007      	add	sp, #28
   d6d2a:	bd30      	pop	{r4, r5, pc}
   d6d2c:	2003e3ec 	.word	0x2003e3ec
   d6d30:	2003e3f0 	.word	0x2003e3f0
   d6d34:	2003de68 	.word	0x2003de68
   d6d38:	000d6c31 	.word	0x000d6c31

000d6d3c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6d3c:	4770      	bx	lr

000d6d3e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6d3e:	7441      	strb	r1, [r0, #17]
   d6d40:	4770      	bx	lr

000d6d42 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6d42:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6d44:	7c00      	ldrb	r0, [r0, #16]
   d6d46:	f7ff f9e9 	bl	d611c <HAL_USART_Available_Data_For_Write>
}
   d6d4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6d4e:	bd08      	pop	{r3, pc}

000d6d50 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6d50:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6d52:	7c00      	ldrb	r0, [r0, #16]
   d6d54:	f7ff f9ba 	bl	d60cc <HAL_USART_Available_Data>
}
   d6d58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6d5c:	bd08      	pop	{r3, pc}

000d6d5e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6d5e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6d60:	7c00      	ldrb	r0, [r0, #16]
   d6d62:	f7ff f9c3 	bl	d60ec <HAL_USART_Peek_Data>
}
   d6d66:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6d6a:	bf28      	it	cs
   d6d6c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6d70:	bd08      	pop	{r3, pc}

000d6d72 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6d72:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6d74:	7c00      	ldrb	r0, [r0, #16]
   d6d76:	f7ff f9b1 	bl	d60dc <HAL_USART_Read_Data>
}
   d6d7a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6d7e:	bf28      	it	cs
   d6d80:	f04f 30ff 	movcs.w	r0, #4294967295
   d6d84:	bd08      	pop	{r3, pc}

000d6d86 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6d86:	7c00      	ldrb	r0, [r0, #16]
   d6d88:	f7ff b9b8 	b.w	d60fc <HAL_USART_Flush_Data>

000d6d8c <_ZN11USARTSerialD0Ev>:
   d6d8c:	b510      	push	{r4, lr}
   d6d8e:	2114      	movs	r1, #20
   d6d90:	4604      	mov	r4, r0
   d6d92:	f000 fafd 	bl	d7390 <_ZdlPvj>
   d6d96:	4620      	mov	r0, r4
   d6d98:	bd10      	pop	{r4, pc}

000d6d9a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6d9a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6d9c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6d9e:	4604      	mov	r4, r0
   d6da0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6da2:	b925      	cbnz	r5, d6dae <_ZN11USARTSerial5writeEh+0x14>
   d6da4:	7c00      	ldrb	r0, [r0, #16]
   d6da6:	f7ff f9b9 	bl	d611c <HAL_USART_Available_Data_For_Write>
   d6daa:	2800      	cmp	r0, #0
   d6dac:	dd05      	ble.n	d6dba <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6dae:	4631      	mov	r1, r6
   d6db0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6db6:	f7ff b981 	b.w	d60bc <HAL_USART_Write_Data>
  }
  return 0;
}
   d6dba:	4628      	mov	r0, r5
   d6dbc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6dc0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6dc0:	b510      	push	{r4, lr}
   d6dc2:	4604      	mov	r4, r0
   d6dc4:	4608      	mov	r0, r1
   d6dc6:	4611      	mov	r1, r2
   d6dc8:	2200      	movs	r2, #0
   d6dca:	6062      	str	r2, [r4, #4]
   d6dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6dd0:	60a2      	str	r2, [r4, #8]
   d6dd2:	4a05      	ldr	r2, [pc, #20]	; (d6de8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6dd4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6dd6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6dd8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6dda:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6ddc:	461a      	mov	r2, r3
   d6dde:	f7ff f965 	bl	d60ac <HAL_USART_Init>
}
   d6de2:	4620      	mov	r0, r4
   d6de4:	bd10      	pop	{r4, pc}
   d6de6:	bf00      	nop
   d6de8:	000d846c 	.word	0x000d846c

000d6dec <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6dec:	7c00      	ldrb	r0, [r0, #16]
   d6dee:	f7ff b98d 	b.w	d610c <HAL_USART_Is_Enabled>
	...

000d6df4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6df4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6df6:	4d0c      	ldr	r5, [pc, #48]	; (d6e28 <_Z22__fetch_global_Serial1v+0x34>)
   d6df8:	6829      	ldr	r1, [r5, #0]
   d6dfa:	f011 0401 	ands.w	r4, r1, #1
   d6dfe:	d111      	bne.n	d6e24 <_Z22__fetch_global_Serial1v+0x30>
   d6e00:	4628      	mov	r0, r5
   d6e02:	f7fd f94c 	bl	d409e <__cxa_guard_acquire>
   d6e06:	b168      	cbz	r0, d6e24 <_Z22__fetch_global_Serial1v+0x30>
   d6e08:	4a08      	ldr	r2, [pc, #32]	; (d6e2c <_Z22__fetch_global_Serial1v+0x38>)
   d6e0a:	4b09      	ldr	r3, [pc, #36]	; (d6e30 <_Z22__fetch_global_Serial1v+0x3c>)
   d6e0c:	4809      	ldr	r0, [pc, #36]	; (d6e34 <_Z22__fetch_global_Serial1v+0x40>)
   d6e0e:	4621      	mov	r1, r4
   d6e10:	f7ff ffd6 	bl	d6dc0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6e14:	4628      	mov	r0, r5
   d6e16:	f7fd f947 	bl	d40a8 <__cxa_guard_release>
   d6e1a:	4a07      	ldr	r2, [pc, #28]	; (d6e38 <_Z22__fetch_global_Serial1v+0x44>)
   d6e1c:	4907      	ldr	r1, [pc, #28]	; (d6e3c <_Z22__fetch_global_Serial1v+0x48>)
   d6e1e:	4805      	ldr	r0, [pc, #20]	; (d6e34 <_Z22__fetch_global_Serial1v+0x40>)
   d6e20:	f000 faa8 	bl	d7374 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6e24:	4803      	ldr	r0, [pc, #12]	; (d6e34 <_Z22__fetch_global_Serial1v+0x40>)
   d6e26:	bd38      	pop	{r3, r4, r5, pc}
   d6e28:	2003e49c 	.word	0x2003e49c
   d6e2c:	2003e4a0 	.word	0x2003e4a0
   d6e30:	2003e418 	.word	0x2003e418
   d6e34:	2003e404 	.word	0x2003e404
   d6e38:	2003de68 	.word	0x2003de68
   d6e3c:	000d6d3d 	.word	0x000d6d3d

000d6e40 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6e40:	4770      	bx	lr

000d6e42 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e44:	4606      	mov	r6, r0
   d6e46:	4615      	mov	r5, r2
   d6e48:	460c      	mov	r4, r1
   d6e4a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6e4c:	42bc      	cmp	r4, r7
   d6e4e:	d006      	beq.n	d6e5e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6e50:	6833      	ldr	r3, [r6, #0]
   d6e52:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6e56:	689b      	ldr	r3, [r3, #8]
   d6e58:	4630      	mov	r0, r6
   d6e5a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6e5c:	e7f6      	b.n	d6e4c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6e5e:	4628      	mov	r0, r5
   d6e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e62 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6e62:	2200      	movs	r2, #0
   d6e64:	7c00      	ldrb	r0, [r0, #16]
   d6e66:	f7ff b961 	b.w	d612c <HAL_I2C_Write_Data>

000d6e6a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6e6a:	2100      	movs	r1, #0
   d6e6c:	7c00      	ldrb	r0, [r0, #16]
   d6e6e:	f7ff b965 	b.w	d613c <HAL_I2C_Available_Data>

000d6e72 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6e72:	2100      	movs	r1, #0
   d6e74:	7c00      	ldrb	r0, [r0, #16]
   d6e76:	f7ff b969 	b.w	d614c <HAL_I2C_Read_Data>

000d6e7a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6e7a:	2100      	movs	r1, #0
   d6e7c:	7c00      	ldrb	r0, [r0, #16]
   d6e7e:	f7ff b96d 	b.w	d615c <HAL_I2C_Peek_Data>

000d6e82 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6e82:	2100      	movs	r1, #0
   d6e84:	7c00      	ldrb	r0, [r0, #16]
   d6e86:	f7ff b971 	b.w	d616c <HAL_I2C_Flush_Data>

000d6e8a <_ZN7TwoWireD0Ev>:
   d6e8a:	b510      	push	{r4, lr}
   d6e8c:	2114      	movs	r1, #20
   d6e8e:	4604      	mov	r4, r0
   d6e90:	f000 fa7e 	bl	d7390 <_ZdlPvj>
   d6e94:	4620      	mov	r0, r4
   d6e96:	bd10      	pop	{r4, pc}

000d6e98 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6e98:	b510      	push	{r4, lr}
   d6e9a:	4604      	mov	r4, r0
   d6e9c:	2300      	movs	r3, #0
   d6e9e:	6063      	str	r3, [r4, #4]
   d6ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ea4:	60a3      	str	r3, [r4, #8]
   d6ea6:	4b04      	ldr	r3, [pc, #16]	; (d6eb8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6ea8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6eaa:	4608      	mov	r0, r1
   d6eac:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6eae:	4611      	mov	r1, r2
   d6eb0:	f7ff f96c 	bl	d618c <HAL_I2C_Init>
}
   d6eb4:	4620      	mov	r0, r4
   d6eb6:	bd10      	pop	{r4, pc}
   d6eb8:	000d849c 	.word	0x000d849c

000d6ebc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6ebc:	2100      	movs	r1, #0
   d6ebe:	7c00      	ldrb	r0, [r0, #16]
   d6ec0:	f7ff b95c 	b.w	d617c <HAL_I2C_Is_Enabled>

000d6ec4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ec4:	2200      	movs	r2, #0
   d6ec6:	4611      	mov	r1, r2
   d6ec8:	6840      	ldr	r0, [r0, #4]
   d6eca:	f7ff ba0b 	b.w	d62e4 <network_listening>

000d6ece <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6ece:	2200      	movs	r2, #0
   d6ed0:	4611      	mov	r1, r2
   d6ed2:	6840      	ldr	r0, [r0, #4]
   d6ed4:	f7ff ba16 	b.w	d6304 <network_get_listen_timeout>

000d6ed8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6ed8:	2200      	movs	r2, #0
   d6eda:	6840      	ldr	r0, [r0, #4]
   d6edc:	f7ff ba0a 	b.w	d62f4 <network_set_listen_timeout>

000d6ee0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ee0:	2200      	movs	r2, #0
   d6ee2:	f081 0101 	eor.w	r1, r1, #1
   d6ee6:	6840      	ldr	r0, [r0, #4]
   d6ee8:	f7ff b9f4 	b.w	d62d4 <network_listen>

000d6eec <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6eec:	2300      	movs	r3, #0
   d6eee:	461a      	mov	r2, r3
   d6ef0:	2101      	movs	r1, #1
   d6ef2:	6840      	ldr	r0, [r0, #4]
   d6ef4:	f7ff b9e6 	b.w	d62c4 <network_off>

000d6ef8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6ef8:	2300      	movs	r3, #0
   d6efa:	461a      	mov	r2, r3
   d6efc:	4619      	mov	r1, r3
   d6efe:	6840      	ldr	r0, [r0, #4]
   d6f00:	f7ff b9d8 	b.w	d62b4 <network_on>

000d6f04 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f04:	2200      	movs	r2, #0
   d6f06:	4611      	mov	r1, r2
   d6f08:	6840      	ldr	r0, [r0, #4]
   d6f0a:	f7ff b9cb 	b.w	d62a4 <network_ready>

000d6f0e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f0e:	2200      	movs	r2, #0
   d6f10:	4611      	mov	r1, r2
   d6f12:	6840      	ldr	r0, [r0, #4]
   d6f14:	f7ff b9b6 	b.w	d6284 <network_connecting>

000d6f18 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f18:	2200      	movs	r2, #0
   d6f1a:	2102      	movs	r1, #2
   d6f1c:	6840      	ldr	r0, [r0, #4]
   d6f1e:	f7ff b9b9 	b.w	d6294 <network_disconnect>

000d6f22 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f22:	2300      	movs	r3, #0
   d6f24:	461a      	mov	r2, r3
   d6f26:	6840      	ldr	r0, [r0, #4]
   d6f28:	f7ff b9a4 	b.w	d6274 <network_connect>

000d6f2c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6f2c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f2e:	4605      	mov	r5, r0
   d6f30:	b188      	cbz	r0, d6f56 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f32:	6804      	ldr	r4, [r0, #0]
   d6f34:	b14c      	cbz	r4, d6f4a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6f36:	68a3      	ldr	r3, [r4, #8]
   d6f38:	b11b      	cbz	r3, d6f42 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6f3a:	2203      	movs	r2, #3
   d6f3c:	4621      	mov	r1, r4
   d6f3e:	4620      	mov	r0, r4
   d6f40:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f42:	2110      	movs	r1, #16
   d6f44:	4620      	mov	r0, r4
   d6f46:	f000 fa23 	bl	d7390 <_ZdlPvj>
   d6f4a:	4628      	mov	r0, r5
   d6f4c:	2114      	movs	r1, #20
      }
   d6f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f52:	f000 ba1d 	b.w	d7390 <_ZdlPvj>
   d6f56:	bd38      	pop	{r3, r4, r5, pc}

000d6f58 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6f58:	b110      	cbz	r0, d6f60 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6f5a:	6803      	ldr	r3, [r0, #0]
   d6f5c:	685b      	ldr	r3, [r3, #4]
   d6f5e:	4718      	bx	r3
   d6f60:	4770      	bx	lr

000d6f62 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6f62:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6f64:	6803      	ldr	r3, [r0, #0]
   d6f66:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6f68:	b1bb      	cbz	r3, d6f9a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6f6a:	6858      	ldr	r0, [r3, #4]
   d6f6c:	f7ff f86e 	bl	d604c <os_thread_is_current>
   d6f70:	b978      	cbnz	r0, d6f92 <_ZN6ThreadD1Ev+0x30>
   d6f72:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6f74:	7c5a      	ldrb	r2, [r3, #17]
   d6f76:	b912      	cbnz	r2, d6f7e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6f78:	6858      	ldr	r0, [r3, #4]
   d6f7a:	f7ff f86f 	bl	d605c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6f7e:	6823      	ldr	r3, [r4, #0]
   d6f80:	6858      	ldr	r0, [r3, #4]
   d6f82:	f7ff f873 	bl	d606c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f86:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6f88:	2300      	movs	r3, #0
   d6f8a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6f8c:	b128      	cbz	r0, d6f9a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6f8e:	f7ff ffcd 	bl	d6f2c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f92:	6820      	ldr	r0, [r4, #0]
   d6f94:	b108      	cbz	r0, d6f9a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6f96:	f7ff ffc9 	bl	d6f2c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6f9a:	4620      	mov	r0, r4
   d6f9c:	bd10      	pop	{r4, pc}

000d6f9e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6f9e:	b538      	push	{r3, r4, r5, lr}
   d6fa0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fa2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6fa6:	b108      	cbz	r0, d6fac <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6fa8:	f7fd f877 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6fac:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6fb0:	b108      	cbz	r0, d6fb6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6fb2:	f7ff f86b 	bl	d608c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fb6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6fba:	b135      	cbz	r5, d6fca <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6fbc:	4628      	mov	r0, r5
   d6fbe:	f7ff ffd0 	bl	d6f62 <_ZN6ThreadD1Ev>
   d6fc2:	2104      	movs	r1, #4
   d6fc4:	4628      	mov	r0, r5
   d6fc6:	f000 f9e3 	bl	d7390 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fca:	6820      	ldr	r0, [r4, #0]
   d6fcc:	b108      	cbz	r0, d6fd2 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6fce:	f7ff ffc3 	bl	d6f58 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6fd2:	4620      	mov	r0, r4
   d6fd4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6fd8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6fd8:	b510      	push	{r4, lr}
   d6fda:	4b04      	ldr	r3, [pc, #16]	; (d6fec <_ZN5spark9MeshClassD1Ev+0x14>)
   d6fdc:	4604      	mov	r4, r0
   d6fde:	f840 3b08 	str.w	r3, [r0], #8
   d6fe2:	f7ff ffdc 	bl	d6f9e <_ZN5spark11MeshPublishD1Ev>
   d6fe6:	4620      	mov	r0, r4
   d6fe8:	bd10      	pop	{r4, pc}
   d6fea:	bf00      	nop
   d6fec:	000d84c4 	.word	0x000d84c4

000d6ff0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6ff0:	b538      	push	{r3, r4, r5, lr}
   d6ff2:	4c0e      	ldr	r4, [pc, #56]	; (d702c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6ff4:	4b0e      	ldr	r3, [pc, #56]	; (d7030 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6ff6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6ff8:	2500      	movs	r5, #0
   d6ffa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6ffc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7000:	6063      	str	r3, [r4, #4]
   d7002:	60a5      	str	r5, [r4, #8]
   d7004:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7008:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d700c:	f7ff f836 	bl	d607c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7010:	4b08      	ldr	r3, [pc, #32]	; (d7034 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7012:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7016:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d701a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d701c:	4620      	mov	r0, r4
   d701e:	4a06      	ldr	r2, [pc, #24]	; (d7038 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7020:	4906      	ldr	r1, [pc, #24]	; (d703c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7026:	f000 b9a5 	b.w	d7374 <__aeabi_atexit>
   d702a:	bf00      	nop
   d702c:	2003e524 	.word	0x2003e524
   d7030:	000d852c 	.word	0x000d852c
   d7034:	000d84c4 	.word	0x000d84c4
   d7038:	2003de68 	.word	0x2003de68
   d703c:	000d6fd9 	.word	0x000d6fd9

000d7040 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7040:	2200      	movs	r2, #0
   d7042:	4611      	mov	r1, r2
   d7044:	6840      	ldr	r0, [r0, #4]
   d7046:	f7ff b92d 	b.w	d62a4 <network_ready>

000d704a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d704a:	2200      	movs	r2, #0
   d704c:	4611      	mov	r1, r2
   d704e:	6840      	ldr	r0, [r0, #4]
   d7050:	f7ff b948 	b.w	d62e4 <network_listening>

000d7054 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7054:	2200      	movs	r2, #0
   d7056:	4611      	mov	r1, r2
   d7058:	6840      	ldr	r0, [r0, #4]
   d705a:	f7ff b953 	b.w	d6304 <network_get_listen_timeout>

000d705e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d705e:	2200      	movs	r2, #0
   d7060:	6840      	ldr	r0, [r0, #4]
   d7062:	f7ff b947 	b.w	d62f4 <network_set_listen_timeout>

000d7066 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7066:	2200      	movs	r2, #0
   d7068:	f081 0101 	eor.w	r1, r1, #1
   d706c:	6840      	ldr	r0, [r0, #4]
   d706e:	f7ff b931 	b.w	d62d4 <network_listen>

000d7072 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7072:	2300      	movs	r3, #0
   d7074:	461a      	mov	r2, r3
   d7076:	4619      	mov	r1, r3
   d7078:	6840      	ldr	r0, [r0, #4]
   d707a:	f7ff b923 	b.w	d62c4 <network_off>

000d707e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d707e:	2300      	movs	r3, #0
   d7080:	461a      	mov	r2, r3
   d7082:	4619      	mov	r1, r3
   d7084:	6840      	ldr	r0, [r0, #4]
   d7086:	f7ff b915 	b.w	d62b4 <network_on>

000d708a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d708a:	2200      	movs	r2, #0
   d708c:	4611      	mov	r1, r2
   d708e:	6840      	ldr	r0, [r0, #4]
   d7090:	f7ff b8f8 	b.w	d6284 <network_connecting>

000d7094 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7094:	2200      	movs	r2, #0
   d7096:	2102      	movs	r1, #2
   d7098:	6840      	ldr	r0, [r0, #4]
   d709a:	f7ff b8fb 	b.w	d6294 <network_disconnect>

000d709e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d709e:	2300      	movs	r3, #0
   d70a0:	461a      	mov	r2, r3
   d70a2:	6840      	ldr	r0, [r0, #4]
   d70a4:	f7ff b8e6 	b.w	d6274 <network_connect>

000d70a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d70a8:	4b02      	ldr	r3, [pc, #8]	; (d70b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d70aa:	2204      	movs	r2, #4
   d70ac:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d70ae:	4a02      	ldr	r2, [pc, #8]	; (d70b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d70b0:	601a      	str	r2, [r3, #0]
   d70b2:	4770      	bx	lr
   d70b4:	2003e6f8 	.word	0x2003e6f8
   d70b8:	000d84f8 	.word	0x000d84f8

000d70bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d70bc:	2300      	movs	r3, #0
   d70be:	461a      	mov	r2, r3
   d70c0:	6840      	ldr	r0, [r0, #4]
   d70c2:	f7ff b8d7 	b.w	d6274 <network_connect>

000d70c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d70c6:	2200      	movs	r2, #0
   d70c8:	2102      	movs	r1, #2
   d70ca:	6840      	ldr	r0, [r0, #4]
   d70cc:	f7ff b8e2 	b.w	d6294 <network_disconnect>

000d70d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d70d0:	2200      	movs	r2, #0
   d70d2:	4611      	mov	r1, r2
   d70d4:	6840      	ldr	r0, [r0, #4]
   d70d6:	f7ff b8d5 	b.w	d6284 <network_connecting>

000d70da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d70da:	2200      	movs	r2, #0
   d70dc:	4611      	mov	r1, r2
   d70de:	6840      	ldr	r0, [r0, #4]
   d70e0:	f7ff b8e0 	b.w	d62a4 <network_ready>

000d70e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d70e4:	2300      	movs	r3, #0
   d70e6:	461a      	mov	r2, r3
   d70e8:	4619      	mov	r1, r3
   d70ea:	6840      	ldr	r0, [r0, #4]
   d70ec:	f7ff b8e2 	b.w	d62b4 <network_on>

000d70f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d70f0:	2300      	movs	r3, #0
   d70f2:	461a      	mov	r2, r3
   d70f4:	4619      	mov	r1, r3
   d70f6:	6840      	ldr	r0, [r0, #4]
   d70f8:	f7ff b8e4 	b.w	d62c4 <network_off>

000d70fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d70fc:	2200      	movs	r2, #0
   d70fe:	f081 0101 	eor.w	r1, r1, #1
   d7102:	6840      	ldr	r0, [r0, #4]
   d7104:	f7ff b8e6 	b.w	d62d4 <network_listen>

000d7108 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7108:	2200      	movs	r2, #0
   d710a:	6840      	ldr	r0, [r0, #4]
   d710c:	f7ff b8f2 	b.w	d62f4 <network_set_listen_timeout>

000d7110 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7110:	2200      	movs	r2, #0
   d7112:	4611      	mov	r1, r2
   d7114:	6840      	ldr	r0, [r0, #4]
   d7116:	f7ff b8f5 	b.w	d6304 <network_get_listen_timeout>

000d711a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d711a:	2200      	movs	r2, #0
   d711c:	4611      	mov	r1, r2
   d711e:	6840      	ldr	r0, [r0, #4]
   d7120:	f7ff b8e0 	b.w	d62e4 <network_listening>

000d7124 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7128:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d712a:	b095      	sub	sp, #84	; 0x54
   d712c:	4616      	mov	r6, r2
   d712e:	460d      	mov	r5, r1
   d7130:	4607      	mov	r7, r0
    IPAddress addr;
   d7132:	f7ff fd43 	bl	d6bbc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7136:	4621      	mov	r1, r4
   d7138:	2220      	movs	r2, #32
   d713a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d713c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d713e:	f000 fbdf 	bl	d7900 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7142:	2340      	movs	r3, #64	; 0x40
   d7144:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7146:	4621      	mov	r1, r4
   d7148:	466b      	mov	r3, sp
   d714a:	aa0c      	add	r2, sp, #48	; 0x30
   d714c:	4630      	mov	r0, r6
   d714e:	f7fe fecd 	bl	d5eec <netdb_getaddrinfo>
    if (!r) {
   d7152:	4604      	mov	r4, r0
   d7154:	2800      	cmp	r0, #0
   d7156:	d144      	bne.n	d71e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7158:	4602      	mov	r2, r0
   d715a:	2101      	movs	r1, #1
   d715c:	6868      	ldr	r0, [r5, #4]
   d715e:	f7ff f8a1 	bl	d62a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7162:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7164:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7166:	4622      	mov	r2, r4
   d7168:	6868      	ldr	r0, [r5, #4]
   d716a:	f7ff f89b 	bl	d62a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d716e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7170:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7172:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7174:	2e00      	cmp	r6, #0
   d7176:	d034      	beq.n	d71e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7178:	2900      	cmp	r1, #0
   d717a:	d132      	bne.n	d71e2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d717c:	6873      	ldr	r3, [r6, #4]
   d717e:	2b02      	cmp	r3, #2
   d7180:	d002      	beq.n	d7188 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7182:	2b0a      	cmp	r3, #10
   d7184:	d009      	beq.n	d719a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7186:	e02a      	b.n	d71de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7188:	f1b8 0f00 	cmp.w	r8, #0
   d718c:	d027      	beq.n	d71de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d718e:	6971      	ldr	r1, [r6, #20]
   d7190:	4638      	mov	r0, r7
   d7192:	3104      	adds	r1, #4
   d7194:	f7ff fd3f 	bl	d6c16 <_ZN9IPAddressaSEPKh>
   d7198:	e020      	b.n	d71dc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d719a:	f1b9 0f00 	cmp.w	r9, #0
   d719e:	d01e      	beq.n	d71de <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d71a0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d71a2:	2211      	movs	r2, #17
   d71a4:	a801      	add	r0, sp, #4
   d71a6:	f000 fbab 	bl	d7900 <memset>
                    a.v = 6;
   d71aa:	2306      	movs	r3, #6
   d71ac:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d71b0:	ad01      	add	r5, sp, #4
   d71b2:	f104 0308 	add.w	r3, r4, #8
   d71b6:	3418      	adds	r4, #24
   d71b8:	6818      	ldr	r0, [r3, #0]
   d71ba:	6859      	ldr	r1, [r3, #4]
   d71bc:	462a      	mov	r2, r5
   d71be:	c203      	stmia	r2!, {r0, r1}
   d71c0:	3308      	adds	r3, #8
   d71c2:	42a3      	cmp	r3, r4
   d71c4:	4615      	mov	r5, r2
   d71c6:	d1f7      	bne.n	d71b8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d71c8:	a901      	add	r1, sp, #4
   d71ca:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d71cc:	ad07      	add	r5, sp, #28
   d71ce:	f7ff fd03 	bl	d6bd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d71d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71d4:	1d3c      	adds	r4, r7, #4
   d71d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71d8:	682b      	ldr	r3, [r5, #0]
   d71da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d71dc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d71de:	69f6      	ldr	r6, [r6, #28]
   d71e0:	e7c8      	b.n	d7174 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d71e2:	9800      	ldr	r0, [sp, #0]
   d71e4:	f7fe fe7a 	bl	d5edc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d71e8:	4638      	mov	r0, r7
   d71ea:	b015      	add	sp, #84	; 0x54
   d71ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d71f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d71f0:	4b02      	ldr	r3, [pc, #8]	; (d71fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d71f2:	4a03      	ldr	r2, [pc, #12]	; (d7200 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d71f4:	601a      	str	r2, [r3, #0]
   d71f6:	2200      	movs	r2, #0
   d71f8:	605a      	str	r2, [r3, #4]
   d71fa:	4770      	bx	lr
   d71fc:	2003e700 	.word	0x2003e700
   d7200:	000d852c 	.word	0x000d852c

000d7204 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7204:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7206:	4e18      	ldr	r6, [pc, #96]	; (d7268 <pinAvailable+0x64>)
   d7208:	6831      	ldr	r1, [r6, #0]
   d720a:	f011 0501 	ands.w	r5, r1, #1
   d720e:	4604      	mov	r4, r0
   d7210:	d10a      	bne.n	d7228 <pinAvailable+0x24>
   d7212:	4630      	mov	r0, r6
   d7214:	f7fc ff43 	bl	d409e <__cxa_guard_acquire>
   d7218:	b130      	cbz	r0, d7228 <pinAvailable+0x24>
   d721a:	4629      	mov	r1, r5
   d721c:	4813      	ldr	r0, [pc, #76]	; (d726c <pinAvailable+0x68>)
   d721e:	f7ff f91d 	bl	d645c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7222:	4630      	mov	r0, r6
   d7224:	f7fc ff40 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d7228:	4810      	ldr	r0, [pc, #64]	; (d726c <pinAvailable+0x68>)
   d722a:	f7ff f9c4 	bl	d65b6 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d722e:	b128      	cbz	r0, d723c <pinAvailable+0x38>
   d7230:	f1a4 030b 	sub.w	r3, r4, #11
   d7234:	2b02      	cmp	r3, #2
   d7236:	d801      	bhi.n	d723c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d7238:	2000      	movs	r0, #0
   d723a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d723c:	f000 f874 	bl	d7328 <_Z19__fetch_global_Wirev>
   d7240:	f7ff fe3c 	bl	d6ebc <_ZN7TwoWire9isEnabledEv>
   d7244:	b108      	cbz	r0, d724a <pinAvailable+0x46>
   d7246:	2c01      	cmp	r4, #1
   d7248:	d9f6      	bls.n	d7238 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d724a:	f7ff fdd3 	bl	d6df4 <_Z22__fetch_global_Serial1v>
   d724e:	f7ff fdcd 	bl	d6dec <_ZN11USARTSerial9isEnabledEv>
   d7252:	b118      	cbz	r0, d725c <pinAvailable+0x58>
   d7254:	f1a4 0309 	sub.w	r3, r4, #9
   d7258:	2b01      	cmp	r3, #1
   d725a:	d9ed      	bls.n	d7238 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d725c:	2c23      	cmp	r4, #35	; 0x23
   d725e:	bf8c      	ite	hi
   d7260:	2000      	movhi	r0, #0
   d7262:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7264:	bd70      	pop	{r4, r5, r6, pc}
   d7266:	bf00      	nop
   d7268:	2003de6c 	.word	0x2003de6c
   d726c:	2003de70 	.word	0x2003de70

000d7270 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7270:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7272:	b538      	push	{r3, r4, r5, lr}
   d7274:	4604      	mov	r4, r0
   d7276:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7278:	d80a      	bhi.n	d7290 <pinMode+0x20>
   d727a:	29ff      	cmp	r1, #255	; 0xff
   d727c:	d008      	beq.n	d7290 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d727e:	f7ff ffc1 	bl	d7204 <pinAvailable>
   d7282:	b128      	cbz	r0, d7290 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7284:	4629      	mov	r1, r5
   d7286:	4620      	mov	r0, r4
}
   d7288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d728c:	f7fe be46 	b.w	d5f1c <HAL_Pin_Mode>
   d7290:	bd38      	pop	{r3, r4, r5, pc}

000d7292 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7292:	b538      	push	{r3, r4, r5, lr}
   d7294:	4604      	mov	r4, r0
   d7296:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7298:	f7fe fe48 	bl	d5f2c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d729c:	28ff      	cmp	r0, #255	; 0xff
   d729e:	d010      	beq.n	d72c2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d72a0:	2806      	cmp	r0, #6
   d72a2:	d804      	bhi.n	d72ae <digitalWrite+0x1c>
   d72a4:	234d      	movs	r3, #77	; 0x4d
   d72a6:	fa23 f000 	lsr.w	r0, r3, r0
   d72aa:	07c3      	lsls	r3, r0, #31
   d72ac:	d409      	bmi.n	d72c2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d72ae:	4620      	mov	r0, r4
   d72b0:	f7ff ffa8 	bl	d7204 <pinAvailable>
   d72b4:	b128      	cbz	r0, d72c2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d72b6:	4629      	mov	r1, r5
   d72b8:	4620      	mov	r0, r4
}
   d72ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d72be:	f7fe be3d 	b.w	d5f3c <HAL_GPIO_Write>
   d72c2:	bd38      	pop	{r3, r4, r5, pc}

000d72c4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d72c4:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d72c6:	b510      	push	{r4, lr}
   d72c8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d72ca:	bf9c      	itt	ls
   d72cc:	340e      	addls	r4, #14
   d72ce:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d72d0:	4620      	mov	r0, r4
   d72d2:	f7ff ff97 	bl	d7204 <pinAvailable>
   d72d6:	b150      	cbz	r0, d72ee <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d72d8:	2103      	movs	r1, #3
   d72da:	4620      	mov	r0, r4
   d72dc:	f7fe fe16 	bl	d5f0c <HAL_Validate_Pin_Function>
   d72e0:	2803      	cmp	r0, #3
   d72e2:	d104      	bne.n	d72ee <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d72e4:	4620      	mov	r0, r4
}
   d72e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d72ea:	f7fe be2f 	b.w	d5f4c <HAL_ADC_Read>
}
   d72ee:	2000      	movs	r0, #0
   d72f0:	bd10      	pop	{r4, pc}
	...

000d72f4 <_Z17acquireWireBufferv>:
   d72f4:	b570      	push	{r4, r5, r6, lr}
   d72f6:	4604      	mov	r4, r0
   d72f8:	2514      	movs	r5, #20
   d72fa:	462a      	mov	r2, r5
   d72fc:	4e09      	ldr	r6, [pc, #36]	; (d7324 <_Z17acquireWireBufferv+0x30>)
   d72fe:	2100      	movs	r1, #0
   d7300:	f000 fafe 	bl	d7900 <memset>
   d7304:	8025      	strh	r5, [r4, #0]
   d7306:	2520      	movs	r5, #32
   d7308:	4631      	mov	r1, r6
   d730a:	60a5      	str	r5, [r4, #8]
   d730c:	6125      	str	r5, [r4, #16]
   d730e:	4628      	mov	r0, r5
   d7310:	f000 f840 	bl	d7394 <_ZnajRKSt9nothrow_t>
   d7314:	4631      	mov	r1, r6
   d7316:	6060      	str	r0, [r4, #4]
   d7318:	4628      	mov	r0, r5
   d731a:	f000 f83b 	bl	d7394 <_ZnajRKSt9nothrow_t>
   d731e:	60e0      	str	r0, [r4, #12]
   d7320:	4620      	mov	r0, r4
   d7322:	bd70      	pop	{r4, r5, r6, pc}
   d7324:	000d8558 	.word	0x000d8558

000d7328 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7328:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d732a:	4d0e      	ldr	r5, [pc, #56]	; (d7364 <_Z19__fetch_global_Wirev+0x3c>)
   d732c:	6829      	ldr	r1, [r5, #0]
   d732e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7332:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7334:	d113      	bne.n	d735e <_Z19__fetch_global_Wirev+0x36>
   d7336:	4628      	mov	r0, r5
   d7338:	f7fc feb1 	bl	d409e <__cxa_guard_acquire>
   d733c:	b178      	cbz	r0, d735e <_Z19__fetch_global_Wirev+0x36>
   d733e:	a801      	add	r0, sp, #4
   d7340:	f7ff ffd8 	bl	d72f4 <_Z17acquireWireBufferv>
   d7344:	aa01      	add	r2, sp, #4
   d7346:	4621      	mov	r1, r4
   d7348:	4807      	ldr	r0, [pc, #28]	; (d7368 <_Z19__fetch_global_Wirev+0x40>)
   d734a:	f7ff fda5 	bl	d6e98 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d734e:	4628      	mov	r0, r5
   d7350:	f7fc feaa 	bl	d40a8 <__cxa_guard_release>
   d7354:	4a05      	ldr	r2, [pc, #20]	; (d736c <_Z19__fetch_global_Wirev+0x44>)
   d7356:	4906      	ldr	r1, [pc, #24]	; (d7370 <_Z19__fetch_global_Wirev+0x48>)
   d7358:	4803      	ldr	r0, [pc, #12]	; (d7368 <_Z19__fetch_global_Wirev+0x40>)
   d735a:	f000 f80b 	bl	d7374 <__aeabi_atexit>
	return wire;
}
   d735e:	4802      	ldr	r0, [pc, #8]	; (d7368 <_Z19__fetch_global_Wirev+0x40>)
   d7360:	b007      	add	sp, #28
   d7362:	bd30      	pop	{r4, r5, pc}
   d7364:	2003e70c 	.word	0x2003e70c
   d7368:	2003e710 	.word	0x2003e710
   d736c:	2003de68 	.word	0x2003de68
   d7370:	000d6e41 	.word	0x000d6e41

000d7374 <__aeabi_atexit>:
   d7374:	460b      	mov	r3, r1
   d7376:	4601      	mov	r1, r0
   d7378:	4618      	mov	r0, r3
   d737a:	f000 b9a1 	b.w	d76c0 <__cxa_atexit>
	...

000d7380 <_ZSt15get_new_handlerv>:
   d7380:	4b02      	ldr	r3, [pc, #8]	; (d738c <_ZSt15get_new_handlerv+0xc>)
   d7382:	6818      	ldr	r0, [r3, #0]
   d7384:	f3bf 8f5f 	dmb	sy
   d7388:	4770      	bx	lr
   d738a:	bf00      	nop
   d738c:	2003e724 	.word	0x2003e724

000d7390 <_ZdlPvj>:
   d7390:	f7fc be81 	b.w	d4096 <_ZdlPv>

000d7394 <_ZnajRKSt9nothrow_t>:
   d7394:	f000 b800 	b.w	d7398 <_ZnwjRKSt9nothrow_t>

000d7398 <_ZnwjRKSt9nothrow_t>:
   d7398:	b510      	push	{r4, lr}
   d739a:	2800      	cmp	r0, #0
   d739c:	bf14      	ite	ne
   d739e:	4604      	movne	r4, r0
   d73a0:	2401      	moveq	r4, #1
   d73a2:	4620      	mov	r0, r4
   d73a4:	f7fe ffde 	bl	d6364 <malloc>
   d73a8:	b920      	cbnz	r0, d73b4 <_ZnwjRKSt9nothrow_t+0x1c>
   d73aa:	f7ff ffe9 	bl	d7380 <_ZSt15get_new_handlerv>
   d73ae:	b108      	cbz	r0, d73b4 <_ZnwjRKSt9nothrow_t+0x1c>
   d73b0:	4780      	blx	r0
   d73b2:	e7f6      	b.n	d73a2 <_ZnwjRKSt9nothrow_t+0xa>
   d73b4:	bd10      	pop	{r4, pc}
	...

000d73b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d73b8:	4b18      	ldr	r3, [pc, #96]	; (d741c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d73ba:	681a      	ldr	r2, [r3, #0]
   d73bc:	07d1      	lsls	r1, r2, #31
   d73be:	bf5c      	itt	pl
   d73c0:	2201      	movpl	r2, #1
   d73c2:	601a      	strpl	r2, [r3, #0]
   d73c4:	4b16      	ldr	r3, [pc, #88]	; (d7420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d73c6:	681a      	ldr	r2, [r3, #0]
   d73c8:	07d2      	lsls	r2, r2, #31
   d73ca:	bf5c      	itt	pl
   d73cc:	2201      	movpl	r2, #1
   d73ce:	601a      	strpl	r2, [r3, #0]
   d73d0:	4b14      	ldr	r3, [pc, #80]	; (d7424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d73d2:	681a      	ldr	r2, [r3, #0]
   d73d4:	07d0      	lsls	r0, r2, #31
   d73d6:	bf5c      	itt	pl
   d73d8:	2201      	movpl	r2, #1
   d73da:	601a      	strpl	r2, [r3, #0]
   d73dc:	4b12      	ldr	r3, [pc, #72]	; (d7428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d73de:	681a      	ldr	r2, [r3, #0]
   d73e0:	07d1      	lsls	r1, r2, #31
   d73e2:	bf5c      	itt	pl
   d73e4:	2201      	movpl	r2, #1
   d73e6:	601a      	strpl	r2, [r3, #0]
   d73e8:	4b10      	ldr	r3, [pc, #64]	; (d742c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d73ea:	681a      	ldr	r2, [r3, #0]
   d73ec:	07d2      	lsls	r2, r2, #31
   d73ee:	bf5c      	itt	pl
   d73f0:	2201      	movpl	r2, #1
   d73f2:	601a      	strpl	r2, [r3, #0]
   d73f4:	4b0e      	ldr	r3, [pc, #56]	; (d7430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d73f6:	681a      	ldr	r2, [r3, #0]
   d73f8:	07d0      	lsls	r0, r2, #31
   d73fa:	bf5c      	itt	pl
   d73fc:	2201      	movpl	r2, #1
   d73fe:	601a      	strpl	r2, [r3, #0]
   d7400:	4b0c      	ldr	r3, [pc, #48]	; (d7434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7402:	681a      	ldr	r2, [r3, #0]
   d7404:	07d1      	lsls	r1, r2, #31
   d7406:	bf5c      	itt	pl
   d7408:	2201      	movpl	r2, #1
   d740a:	601a      	strpl	r2, [r3, #0]
   d740c:	4b0a      	ldr	r3, [pc, #40]	; (d7438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d740e:	681a      	ldr	r2, [r3, #0]
   d7410:	07d2      	lsls	r2, r2, #31
   d7412:	bf5c      	itt	pl
   d7414:	2201      	movpl	r2, #1
   d7416:	601a      	strpl	r2, [r3, #0]
   d7418:	4770      	bx	lr
   d741a:	bf00      	nop
   d741c:	2003e744 	.word	0x2003e744
   d7420:	2003e740 	.word	0x2003e740
   d7424:	2003e73c 	.word	0x2003e73c
   d7428:	2003e738 	.word	0x2003e738
   d742c:	2003e734 	.word	0x2003e734
   d7430:	2003e730 	.word	0x2003e730
   d7434:	2003e72c 	.word	0x2003e72c
   d7438:	2003e728 	.word	0x2003e728

000d743c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d743c:	4b24      	ldr	r3, [pc, #144]	; (d74d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d743e:	681a      	ldr	r2, [r3, #0]
   d7440:	07d0      	lsls	r0, r2, #31
   d7442:	bf5c      	itt	pl
   d7444:	2201      	movpl	r2, #1
   d7446:	601a      	strpl	r2, [r3, #0]
   d7448:	4b22      	ldr	r3, [pc, #136]	; (d74d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d744a:	681a      	ldr	r2, [r3, #0]
   d744c:	07d1      	lsls	r1, r2, #31
   d744e:	bf5c      	itt	pl
   d7450:	2201      	movpl	r2, #1
   d7452:	601a      	strpl	r2, [r3, #0]
   d7454:	4b20      	ldr	r3, [pc, #128]	; (d74d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7456:	681a      	ldr	r2, [r3, #0]
   d7458:	07d2      	lsls	r2, r2, #31
   d745a:	bf5c      	itt	pl
   d745c:	2201      	movpl	r2, #1
   d745e:	601a      	strpl	r2, [r3, #0]
   d7460:	4b1e      	ldr	r3, [pc, #120]	; (d74dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7462:	681a      	ldr	r2, [r3, #0]
   d7464:	07d0      	lsls	r0, r2, #31
   d7466:	bf5c      	itt	pl
   d7468:	2201      	movpl	r2, #1
   d746a:	601a      	strpl	r2, [r3, #0]
   d746c:	4b1c      	ldr	r3, [pc, #112]	; (d74e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d746e:	681a      	ldr	r2, [r3, #0]
   d7470:	07d1      	lsls	r1, r2, #31
   d7472:	bf5c      	itt	pl
   d7474:	2201      	movpl	r2, #1
   d7476:	601a      	strpl	r2, [r3, #0]
   d7478:	4b1a      	ldr	r3, [pc, #104]	; (d74e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d747a:	681a      	ldr	r2, [r3, #0]
   d747c:	07d2      	lsls	r2, r2, #31
   d747e:	bf5c      	itt	pl
   d7480:	2201      	movpl	r2, #1
   d7482:	601a      	strpl	r2, [r3, #0]
   d7484:	4b18      	ldr	r3, [pc, #96]	; (d74e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7486:	681a      	ldr	r2, [r3, #0]
   d7488:	07d0      	lsls	r0, r2, #31
   d748a:	bf5c      	itt	pl
   d748c:	2201      	movpl	r2, #1
   d748e:	601a      	strpl	r2, [r3, #0]
   d7490:	4b16      	ldr	r3, [pc, #88]	; (d74ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7492:	681a      	ldr	r2, [r3, #0]
   d7494:	07d1      	lsls	r1, r2, #31
   d7496:	bf5c      	itt	pl
   d7498:	2201      	movpl	r2, #1
   d749a:	601a      	strpl	r2, [r3, #0]
   d749c:	4b14      	ldr	r3, [pc, #80]	; (d74f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d749e:	681a      	ldr	r2, [r3, #0]
   d74a0:	07d2      	lsls	r2, r2, #31
   d74a2:	bf5c      	itt	pl
   d74a4:	2201      	movpl	r2, #1
   d74a6:	601a      	strpl	r2, [r3, #0]
   d74a8:	4b12      	ldr	r3, [pc, #72]	; (d74f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d74aa:	681a      	ldr	r2, [r3, #0]
   d74ac:	07d0      	lsls	r0, r2, #31
   d74ae:	bf5c      	itt	pl
   d74b0:	2201      	movpl	r2, #1
   d74b2:	601a      	strpl	r2, [r3, #0]
   d74b4:	4b10      	ldr	r3, [pc, #64]	; (d74f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d74b6:	681a      	ldr	r2, [r3, #0]
   d74b8:	07d1      	lsls	r1, r2, #31
   d74ba:	bf5c      	itt	pl
   d74bc:	2201      	movpl	r2, #1
   d74be:	601a      	strpl	r2, [r3, #0]
   d74c0:	4b0e      	ldr	r3, [pc, #56]	; (d74fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d74c2:	681a      	ldr	r2, [r3, #0]
   d74c4:	07d2      	lsls	r2, r2, #31
   d74c6:	bf5c      	itt	pl
   d74c8:	2201      	movpl	r2, #1
   d74ca:	601a      	strpl	r2, [r3, #0]
   d74cc:	4770      	bx	lr
   d74ce:	bf00      	nop
   d74d0:	2003e774 	.word	0x2003e774
   d74d4:	2003e770 	.word	0x2003e770
   d74d8:	2003e76c 	.word	0x2003e76c
   d74dc:	2003e768 	.word	0x2003e768
   d74e0:	2003e764 	.word	0x2003e764
   d74e4:	2003e760 	.word	0x2003e760
   d74e8:	2003e75c 	.word	0x2003e75c
   d74ec:	2003e758 	.word	0x2003e758
   d74f0:	2003e754 	.word	0x2003e754
   d74f4:	2003e750 	.word	0x2003e750
   d74f8:	2003e74c 	.word	0x2003e74c
   d74fc:	2003e748 	.word	0x2003e748

000d7500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7500:	4b24      	ldr	r3, [pc, #144]	; (d7594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7502:	681a      	ldr	r2, [r3, #0]
   d7504:	07d0      	lsls	r0, r2, #31
   d7506:	bf5c      	itt	pl
   d7508:	2201      	movpl	r2, #1
   d750a:	601a      	strpl	r2, [r3, #0]
   d750c:	4b22      	ldr	r3, [pc, #136]	; (d7598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d750e:	681a      	ldr	r2, [r3, #0]
   d7510:	07d1      	lsls	r1, r2, #31
   d7512:	bf5c      	itt	pl
   d7514:	2201      	movpl	r2, #1
   d7516:	601a      	strpl	r2, [r3, #0]
   d7518:	4b20      	ldr	r3, [pc, #128]	; (d759c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d751a:	681a      	ldr	r2, [r3, #0]
   d751c:	07d2      	lsls	r2, r2, #31
   d751e:	bf5c      	itt	pl
   d7520:	2201      	movpl	r2, #1
   d7522:	601a      	strpl	r2, [r3, #0]
   d7524:	4b1e      	ldr	r3, [pc, #120]	; (d75a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7526:	681a      	ldr	r2, [r3, #0]
   d7528:	07d0      	lsls	r0, r2, #31
   d752a:	bf5c      	itt	pl
   d752c:	2201      	movpl	r2, #1
   d752e:	601a      	strpl	r2, [r3, #0]
   d7530:	4b1c      	ldr	r3, [pc, #112]	; (d75a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7532:	681a      	ldr	r2, [r3, #0]
   d7534:	07d1      	lsls	r1, r2, #31
   d7536:	bf5c      	itt	pl
   d7538:	2201      	movpl	r2, #1
   d753a:	601a      	strpl	r2, [r3, #0]
   d753c:	4b1a      	ldr	r3, [pc, #104]	; (d75a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d753e:	681a      	ldr	r2, [r3, #0]
   d7540:	07d2      	lsls	r2, r2, #31
   d7542:	bf5c      	itt	pl
   d7544:	2201      	movpl	r2, #1
   d7546:	601a      	strpl	r2, [r3, #0]
   d7548:	4b18      	ldr	r3, [pc, #96]	; (d75ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d754a:	681a      	ldr	r2, [r3, #0]
   d754c:	07d0      	lsls	r0, r2, #31
   d754e:	bf5c      	itt	pl
   d7550:	2201      	movpl	r2, #1
   d7552:	601a      	strpl	r2, [r3, #0]
   d7554:	4b16      	ldr	r3, [pc, #88]	; (d75b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7556:	681a      	ldr	r2, [r3, #0]
   d7558:	07d1      	lsls	r1, r2, #31
   d755a:	bf5c      	itt	pl
   d755c:	2201      	movpl	r2, #1
   d755e:	601a      	strpl	r2, [r3, #0]
   d7560:	4b14      	ldr	r3, [pc, #80]	; (d75b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7562:	681a      	ldr	r2, [r3, #0]
   d7564:	07d2      	lsls	r2, r2, #31
   d7566:	bf5c      	itt	pl
   d7568:	2201      	movpl	r2, #1
   d756a:	601a      	strpl	r2, [r3, #0]
   d756c:	4b12      	ldr	r3, [pc, #72]	; (d75b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d756e:	681a      	ldr	r2, [r3, #0]
   d7570:	07d0      	lsls	r0, r2, #31
   d7572:	bf5c      	itt	pl
   d7574:	2201      	movpl	r2, #1
   d7576:	601a      	strpl	r2, [r3, #0]
   d7578:	4b10      	ldr	r3, [pc, #64]	; (d75bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d757a:	681a      	ldr	r2, [r3, #0]
   d757c:	07d1      	lsls	r1, r2, #31
   d757e:	bf5c      	itt	pl
   d7580:	2201      	movpl	r2, #1
   d7582:	601a      	strpl	r2, [r3, #0]
   d7584:	4b0e      	ldr	r3, [pc, #56]	; (d75c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7586:	681a      	ldr	r2, [r3, #0]
   d7588:	07d2      	lsls	r2, r2, #31
   d758a:	bf5c      	itt	pl
   d758c:	2201      	movpl	r2, #1
   d758e:	601a      	strpl	r2, [r3, #0]
   d7590:	4770      	bx	lr
   d7592:	bf00      	nop
   d7594:	2003e7a4 	.word	0x2003e7a4
   d7598:	2003e7a0 	.word	0x2003e7a0
   d759c:	2003e79c 	.word	0x2003e79c
   d75a0:	2003e798 	.word	0x2003e798
   d75a4:	2003e794 	.word	0x2003e794
   d75a8:	2003e790 	.word	0x2003e790
   d75ac:	2003e78c 	.word	0x2003e78c
   d75b0:	2003e788 	.word	0x2003e788
   d75b4:	2003e784 	.word	0x2003e784
   d75b8:	2003e780 	.word	0x2003e780
   d75bc:	2003e77c 	.word	0x2003e77c
   d75c0:	2003e778 	.word	0x2003e778

000d75c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d75c4:	4b18      	ldr	r3, [pc, #96]	; (d7628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d75c6:	681a      	ldr	r2, [r3, #0]
   d75c8:	07d1      	lsls	r1, r2, #31
   d75ca:	bf5c      	itt	pl
   d75cc:	2201      	movpl	r2, #1
   d75ce:	601a      	strpl	r2, [r3, #0]
   d75d0:	4b16      	ldr	r3, [pc, #88]	; (d762c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d75d2:	681a      	ldr	r2, [r3, #0]
   d75d4:	07d2      	lsls	r2, r2, #31
   d75d6:	bf5c      	itt	pl
   d75d8:	2201      	movpl	r2, #1
   d75da:	601a      	strpl	r2, [r3, #0]
   d75dc:	4b14      	ldr	r3, [pc, #80]	; (d7630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d75de:	681a      	ldr	r2, [r3, #0]
   d75e0:	07d0      	lsls	r0, r2, #31
   d75e2:	bf5c      	itt	pl
   d75e4:	2201      	movpl	r2, #1
   d75e6:	601a      	strpl	r2, [r3, #0]
   d75e8:	4b12      	ldr	r3, [pc, #72]	; (d7634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d75ea:	681a      	ldr	r2, [r3, #0]
   d75ec:	07d1      	lsls	r1, r2, #31
   d75ee:	bf5c      	itt	pl
   d75f0:	2201      	movpl	r2, #1
   d75f2:	601a      	strpl	r2, [r3, #0]
   d75f4:	4b10      	ldr	r3, [pc, #64]	; (d7638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d75f6:	681a      	ldr	r2, [r3, #0]
   d75f8:	07d2      	lsls	r2, r2, #31
   d75fa:	bf5c      	itt	pl
   d75fc:	2201      	movpl	r2, #1
   d75fe:	601a      	strpl	r2, [r3, #0]
   d7600:	4b0e      	ldr	r3, [pc, #56]	; (d763c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7602:	681a      	ldr	r2, [r3, #0]
   d7604:	07d0      	lsls	r0, r2, #31
   d7606:	bf5c      	itt	pl
   d7608:	2201      	movpl	r2, #1
   d760a:	601a      	strpl	r2, [r3, #0]
   d760c:	4b0c      	ldr	r3, [pc, #48]	; (d7640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d760e:	681a      	ldr	r2, [r3, #0]
   d7610:	07d1      	lsls	r1, r2, #31
   d7612:	bf5c      	itt	pl
   d7614:	2201      	movpl	r2, #1
   d7616:	601a      	strpl	r2, [r3, #0]
   d7618:	4b0a      	ldr	r3, [pc, #40]	; (d7644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d761a:	681a      	ldr	r2, [r3, #0]
   d761c:	07d2      	lsls	r2, r2, #31
   d761e:	bf5c      	itt	pl
   d7620:	2201      	movpl	r2, #1
   d7622:	601a      	strpl	r2, [r3, #0]
   d7624:	4770      	bx	lr
   d7626:	bf00      	nop
   d7628:	2003e7c4 	.word	0x2003e7c4
   d762c:	2003e7c0 	.word	0x2003e7c0
   d7630:	2003e7bc 	.word	0x2003e7bc
   d7634:	2003e7b8 	.word	0x2003e7b8
   d7638:	2003e7b4 	.word	0x2003e7b4
   d763c:	2003e7b0 	.word	0x2003e7b0
   d7640:	2003e7ac 	.word	0x2003e7ac
   d7644:	2003e7a8 	.word	0x2003e7a8

000d7648 <asctime>:
   d7648:	4b09      	ldr	r3, [pc, #36]	; (d7670 <asctime+0x28>)
   d764a:	b570      	push	{r4, r5, r6, lr}
   d764c:	681c      	ldr	r4, [r3, #0]
   d764e:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d7650:	4606      	mov	r6, r0
   d7652:	b93d      	cbnz	r5, d7664 <asctime+0x1c>
   d7654:	201a      	movs	r0, #26
   d7656:	f7fe fe85 	bl	d6364 <malloc>
   d765a:	221a      	movs	r2, #26
   d765c:	6420      	str	r0, [r4, #64]	; 0x40
   d765e:	4629      	mov	r1, r5
   d7660:	f000 f94e 	bl	d7900 <memset>
   d7664:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d7666:	4630      	mov	r0, r6
   d7668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d766c:	f000 b802 	b.w	d7674 <asctime_r>
   d7670:	2003de18 	.word	0x2003de18

000d7674 <asctime_r>:
   d7674:	b510      	push	{r4, lr}
   d7676:	460c      	mov	r4, r1
   d7678:	6941      	ldr	r1, [r0, #20]
   d767a:	6903      	ldr	r3, [r0, #16]
   d767c:	6982      	ldr	r2, [r0, #24]
   d767e:	b086      	sub	sp, #24
   d7680:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d7684:	9104      	str	r1, [sp, #16]
   d7686:	6801      	ldr	r1, [r0, #0]
   d7688:	9103      	str	r1, [sp, #12]
   d768a:	6841      	ldr	r1, [r0, #4]
   d768c:	9102      	str	r1, [sp, #8]
   d768e:	6881      	ldr	r1, [r0, #8]
   d7690:	9101      	str	r1, [sp, #4]
   d7692:	68c1      	ldr	r1, [r0, #12]
   d7694:	9100      	str	r1, [sp, #0]
   d7696:	4907      	ldr	r1, [pc, #28]	; (d76b4 <asctime_r+0x40>)
   d7698:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d769c:	440b      	add	r3, r1
   d769e:	4906      	ldr	r1, [pc, #24]	; (d76b8 <asctime_r+0x44>)
   d76a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d76a4:	440a      	add	r2, r1
   d76a6:	4620      	mov	r0, r4
   d76a8:	4904      	ldr	r1, [pc, #16]	; (d76bc <asctime_r+0x48>)
   d76aa:	f7fe fe73 	bl	d6394 <siprintf>
   d76ae:	4620      	mov	r0, r4
   d76b0:	b006      	add	sp, #24
   d76b2:	bd10      	pop	{r4, pc}
   d76b4:	000d856e 	.word	0x000d856e
   d76b8:	000d8559 	.word	0x000d8559
   d76bc:	000d8592 	.word	0x000d8592

000d76c0 <__cxa_atexit>:
   d76c0:	b510      	push	{r4, lr}
   d76c2:	4c05      	ldr	r4, [pc, #20]	; (d76d8 <__cxa_atexit+0x18>)
   d76c4:	4613      	mov	r3, r2
   d76c6:	b12c      	cbz	r4, d76d4 <__cxa_atexit+0x14>
   d76c8:	460a      	mov	r2, r1
   d76ca:	4601      	mov	r1, r0
   d76cc:	2002      	movs	r0, #2
   d76ce:	f3af 8000 	nop.w
   d76d2:	bd10      	pop	{r4, pc}
   d76d4:	4620      	mov	r0, r4
   d76d6:	bd10      	pop	{r4, pc}
   d76d8:	00000000 	.word	0x00000000

000d76dc <localtime>:
   d76dc:	b538      	push	{r3, r4, r5, lr}
   d76de:	4b07      	ldr	r3, [pc, #28]	; (d76fc <localtime+0x20>)
   d76e0:	681c      	ldr	r4, [r3, #0]
   d76e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d76e4:	4605      	mov	r5, r0
   d76e6:	b91b      	cbnz	r3, d76f0 <localtime+0x14>
   d76e8:	2024      	movs	r0, #36	; 0x24
   d76ea:	f7fe fe3b 	bl	d6364 <malloc>
   d76ee:	63e0      	str	r0, [r4, #60]	; 0x3c
   d76f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d76f2:	4628      	mov	r0, r5
   d76f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d76f8:	f000 b802 	b.w	d7700 <localtime_r>
   d76fc:	2003de18 	.word	0x2003de18

000d7700 <localtime_r>:
   d7700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7704:	460c      	mov	r4, r1
   d7706:	4680      	mov	r8, r0
   d7708:	f000 fc68 	bl	d7fdc <__gettzinfo>
   d770c:	4621      	mov	r1, r4
   d770e:	4607      	mov	r7, r0
   d7710:	4640      	mov	r0, r8
   d7712:	f000 fc67 	bl	d7fe4 <gmtime_r>
   d7716:	6946      	ldr	r6, [r0, #20]
   d7718:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d771c:	07b3      	lsls	r3, r6, #30
   d771e:	4604      	mov	r4, r0
   d7720:	d105      	bne.n	d772e <localtime_r+0x2e>
   d7722:	2264      	movs	r2, #100	; 0x64
   d7724:	fb96 f3f2 	sdiv	r3, r6, r2
   d7728:	fb02 6313 	mls	r3, r2, r3, r6
   d772c:	b94b      	cbnz	r3, d7742 <localtime_r+0x42>
   d772e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d7732:	fb96 f3f5 	sdiv	r3, r6, r5
   d7736:	fb05 6513 	mls	r5, r5, r3, r6
   d773a:	fab5 f385 	clz	r3, r5
   d773e:	095b      	lsrs	r3, r3, #5
   d7740:	e000      	b.n	d7744 <localtime_r+0x44>
   d7742:	2301      	movs	r3, #1
   d7744:	4a5f      	ldr	r2, [pc, #380]	; (d78c4 <localtime_r+0x1c4>)
   d7746:	2530      	movs	r5, #48	; 0x30
   d7748:	fb05 2503 	mla	r5, r5, r3, r2
   d774c:	f000 fa7a 	bl	d7c44 <__tz_lock>
   d7750:	f000 fa7a 	bl	d7c48 <_tzset_unlocked>
   d7754:	4b5c      	ldr	r3, [pc, #368]	; (d78c8 <localtime_r+0x1c8>)
   d7756:	681b      	ldr	r3, [r3, #0]
   d7758:	b1f3      	cbz	r3, d7798 <localtime_r+0x98>
   d775a:	687b      	ldr	r3, [r7, #4]
   d775c:	429e      	cmp	r6, r3
   d775e:	d105      	bne.n	d776c <localtime_r+0x6c>
   d7760:	6839      	ldr	r1, [r7, #0]
   d7762:	f8d8 3000 	ldr.w	r3, [r8]
   d7766:	69fa      	ldr	r2, [r7, #28]
   d7768:	b941      	cbnz	r1, d777c <localtime_r+0x7c>
   d776a:	e00a      	b.n	d7782 <localtime_r+0x82>
   d776c:	4630      	mov	r0, r6
   d776e:	f000 f9c1 	bl	d7af4 <__tzcalc_limits>
   d7772:	2800      	cmp	r0, #0
   d7774:	d1f4      	bne.n	d7760 <localtime_r+0x60>
   d7776:	f04f 33ff 	mov.w	r3, #4294967295
   d777a:	e00d      	b.n	d7798 <localtime_r+0x98>
   d777c:	4293      	cmp	r3, r2
   d777e:	db08      	blt.n	d7792 <localtime_r+0x92>
   d7780:	e001      	b.n	d7786 <localtime_r+0x86>
   d7782:	4293      	cmp	r3, r2
   d7784:	da07      	bge.n	d7796 <localtime_r+0x96>
   d7786:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d7788:	4293      	cmp	r3, r2
   d778a:	bfac      	ite	ge
   d778c:	2300      	movge	r3, #0
   d778e:	2301      	movlt	r3, #1
   d7790:	e002      	b.n	d7798 <localtime_r+0x98>
   d7792:	2300      	movs	r3, #0
   d7794:	e000      	b.n	d7798 <localtime_r+0x98>
   d7796:	2301      	movs	r3, #1
   d7798:	6223      	str	r3, [r4, #32]
   d779a:	6a23      	ldr	r3, [r4, #32]
   d779c:	2b01      	cmp	r3, #1
   d779e:	bf0c      	ite	eq
   d77a0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d77a2:	6a39      	ldrne	r1, [r7, #32]
   d77a4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d77a8:	203c      	movs	r0, #60	; 0x3c
   d77aa:	fb91 f6f3 	sdiv	r6, r1, r3
   d77ae:	fb03 1316 	mls	r3, r3, r6, r1
   d77b2:	6861      	ldr	r1, [r4, #4]
   d77b4:	fb93 f2f0 	sdiv	r2, r3, r0
   d77b8:	fb00 3012 	mls	r0, r0, r2, r3
   d77bc:	6823      	ldr	r3, [r4, #0]
   d77be:	1a89      	subs	r1, r1, r2
   d77c0:	68a2      	ldr	r2, [r4, #8]
   d77c2:	6061      	str	r1, [r4, #4]
   d77c4:	1a1b      	subs	r3, r3, r0
   d77c6:	1b92      	subs	r2, r2, r6
   d77c8:	2b3b      	cmp	r3, #59	; 0x3b
   d77ca:	6023      	str	r3, [r4, #0]
   d77cc:	60a2      	str	r2, [r4, #8]
   d77ce:	dd03      	ble.n	d77d8 <localtime_r+0xd8>
   d77d0:	3101      	adds	r1, #1
   d77d2:	6061      	str	r1, [r4, #4]
   d77d4:	3b3c      	subs	r3, #60	; 0x3c
   d77d6:	e004      	b.n	d77e2 <localtime_r+0xe2>
   d77d8:	2b00      	cmp	r3, #0
   d77da:	da03      	bge.n	d77e4 <localtime_r+0xe4>
   d77dc:	3901      	subs	r1, #1
   d77de:	6061      	str	r1, [r4, #4]
   d77e0:	333c      	adds	r3, #60	; 0x3c
   d77e2:	6023      	str	r3, [r4, #0]
   d77e4:	6863      	ldr	r3, [r4, #4]
   d77e6:	2b3b      	cmp	r3, #59	; 0x3b
   d77e8:	dd03      	ble.n	d77f2 <localtime_r+0xf2>
   d77ea:	3201      	adds	r2, #1
   d77ec:	60a2      	str	r2, [r4, #8]
   d77ee:	3b3c      	subs	r3, #60	; 0x3c
   d77f0:	e004      	b.n	d77fc <localtime_r+0xfc>
   d77f2:	2b00      	cmp	r3, #0
   d77f4:	da03      	bge.n	d77fe <localtime_r+0xfe>
   d77f6:	3a01      	subs	r2, #1
   d77f8:	60a2      	str	r2, [r4, #8]
   d77fa:	333c      	adds	r3, #60	; 0x3c
   d77fc:	6063      	str	r3, [r4, #4]
   d77fe:	68a3      	ldr	r3, [r4, #8]
   d7800:	2b17      	cmp	r3, #23
   d7802:	dd22      	ble.n	d784a <localtime_r+0x14a>
   d7804:	69e2      	ldr	r2, [r4, #28]
   d7806:	3201      	adds	r2, #1
   d7808:	61e2      	str	r2, [r4, #28]
   d780a:	69a2      	ldr	r2, [r4, #24]
   d780c:	3201      	adds	r2, #1
   d780e:	2a06      	cmp	r2, #6
   d7810:	bfc8      	it	gt
   d7812:	2200      	movgt	r2, #0
   d7814:	61a2      	str	r2, [r4, #24]
   d7816:	68e2      	ldr	r2, [r4, #12]
   d7818:	3b18      	subs	r3, #24
   d781a:	3201      	adds	r2, #1
   d781c:	60a3      	str	r3, [r4, #8]
   d781e:	6923      	ldr	r3, [r4, #16]
   d7820:	60e2      	str	r2, [r4, #12]
   d7822:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7826:	428a      	cmp	r2, r1
   d7828:	dd46      	ble.n	d78b8 <localtime_r+0x1b8>
   d782a:	3301      	adds	r3, #1
   d782c:	2b0c      	cmp	r3, #12
   d782e:	bf0c      	ite	eq
   d7830:	6963      	ldreq	r3, [r4, #20]
   d7832:	6123      	strne	r3, [r4, #16]
   d7834:	eba2 0201 	sub.w	r2, r2, r1
   d7838:	60e2      	str	r2, [r4, #12]
   d783a:	bf01      	itttt	eq
   d783c:	3301      	addeq	r3, #1
   d783e:	2200      	moveq	r2, #0
   d7840:	6122      	streq	r2, [r4, #16]
   d7842:	6163      	streq	r3, [r4, #20]
   d7844:	bf08      	it	eq
   d7846:	61e2      	streq	r2, [r4, #28]
   d7848:	e036      	b.n	d78b8 <localtime_r+0x1b8>
   d784a:	2b00      	cmp	r3, #0
   d784c:	da34      	bge.n	d78b8 <localtime_r+0x1b8>
   d784e:	69e2      	ldr	r2, [r4, #28]
   d7850:	3a01      	subs	r2, #1
   d7852:	61e2      	str	r2, [r4, #28]
   d7854:	69a2      	ldr	r2, [r4, #24]
   d7856:	3a01      	subs	r2, #1
   d7858:	bf48      	it	mi
   d785a:	2206      	movmi	r2, #6
   d785c:	61a2      	str	r2, [r4, #24]
   d785e:	68e2      	ldr	r2, [r4, #12]
   d7860:	3318      	adds	r3, #24
   d7862:	3a01      	subs	r2, #1
   d7864:	60e2      	str	r2, [r4, #12]
   d7866:	60a3      	str	r3, [r4, #8]
   d7868:	bb32      	cbnz	r2, d78b8 <localtime_r+0x1b8>
   d786a:	6923      	ldr	r3, [r4, #16]
   d786c:	3b01      	subs	r3, #1
   d786e:	d401      	bmi.n	d7874 <localtime_r+0x174>
   d7870:	6123      	str	r3, [r4, #16]
   d7872:	e01d      	b.n	d78b0 <localtime_r+0x1b0>
   d7874:	230b      	movs	r3, #11
   d7876:	6123      	str	r3, [r4, #16]
   d7878:	6963      	ldr	r3, [r4, #20]
   d787a:	1e5a      	subs	r2, r3, #1
   d787c:	f012 0f03 	tst.w	r2, #3
   d7880:	6162      	str	r2, [r4, #20]
   d7882:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d7886:	d105      	bne.n	d7894 <localtime_r+0x194>
   d7888:	2164      	movs	r1, #100	; 0x64
   d788a:	fb93 f2f1 	sdiv	r2, r3, r1
   d788e:	fb01 3212 	mls	r2, r1, r2, r3
   d7892:	b94a      	cbnz	r2, d78a8 <localtime_r+0x1a8>
   d7894:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d7898:	fb93 f2f1 	sdiv	r2, r3, r1
   d789c:	fb01 3312 	mls	r3, r1, r2, r3
   d78a0:	fab3 f383 	clz	r3, r3
   d78a4:	095b      	lsrs	r3, r3, #5
   d78a6:	e000      	b.n	d78aa <localtime_r+0x1aa>
   d78a8:	2301      	movs	r3, #1
   d78aa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d78ae:	61e3      	str	r3, [r4, #28]
   d78b0:	6923      	ldr	r3, [r4, #16]
   d78b2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d78b6:	60e3      	str	r3, [r4, #12]
   d78b8:	f000 f9c5 	bl	d7c46 <__tz_unlock>
   d78bc:	4620      	mov	r0, r4
   d78be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d78c2:	bf00      	nop
   d78c4:	000d8718 	.word	0x000d8718
   d78c8:	2003e7e4 	.word	0x2003e7e4

000d78cc <memcmp>:
   d78cc:	b510      	push	{r4, lr}
   d78ce:	3901      	subs	r1, #1
   d78d0:	4402      	add	r2, r0
   d78d2:	4290      	cmp	r0, r2
   d78d4:	d007      	beq.n	d78e6 <memcmp+0x1a>
   d78d6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d78da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d78de:	42a3      	cmp	r3, r4
   d78e0:	d0f7      	beq.n	d78d2 <memcmp+0x6>
   d78e2:	1b18      	subs	r0, r3, r4
   d78e4:	bd10      	pop	{r4, pc}
   d78e6:	2000      	movs	r0, #0
   d78e8:	bd10      	pop	{r4, pc}

000d78ea <memcpy>:
   d78ea:	b510      	push	{r4, lr}
   d78ec:	1e43      	subs	r3, r0, #1
   d78ee:	440a      	add	r2, r1
   d78f0:	4291      	cmp	r1, r2
   d78f2:	d004      	beq.n	d78fe <memcpy+0x14>
   d78f4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d78f8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d78fc:	e7f8      	b.n	d78f0 <memcpy+0x6>
   d78fe:	bd10      	pop	{r4, pc}

000d7900 <memset>:
   d7900:	4402      	add	r2, r0
   d7902:	4603      	mov	r3, r0
   d7904:	4293      	cmp	r3, r2
   d7906:	d002      	beq.n	d790e <memset+0xe>
   d7908:	f803 1b01 	strb.w	r1, [r3], #1
   d790c:	e7fa      	b.n	d7904 <memset+0x4>
   d790e:	4770      	bx	lr

000d7910 <srand>:
   d7910:	b538      	push	{r3, r4, r5, lr}
   d7912:	4b12      	ldr	r3, [pc, #72]	; (d795c <srand+0x4c>)
   d7914:	681c      	ldr	r4, [r3, #0]
   d7916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7918:	4605      	mov	r5, r0
   d791a:	b9d3      	cbnz	r3, d7952 <srand+0x42>
   d791c:	2018      	movs	r0, #24
   d791e:	f7fe fd21 	bl	d6364 <malloc>
   d7922:	f243 330e 	movw	r3, #13070	; 0x330e
   d7926:	63a0      	str	r0, [r4, #56]	; 0x38
   d7928:	8003      	strh	r3, [r0, #0]
   d792a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d792e:	8043      	strh	r3, [r0, #2]
   d7930:	f241 2334 	movw	r3, #4660	; 0x1234
   d7934:	8083      	strh	r3, [r0, #4]
   d7936:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d793a:	80c3      	strh	r3, [r0, #6]
   d793c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7940:	8103      	strh	r3, [r0, #8]
   d7942:	2305      	movs	r3, #5
   d7944:	8143      	strh	r3, [r0, #10]
   d7946:	230b      	movs	r3, #11
   d7948:	8183      	strh	r3, [r0, #12]
   d794a:	2201      	movs	r2, #1
   d794c:	2300      	movs	r3, #0
   d794e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7952:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7954:	2200      	movs	r2, #0
   d7956:	611d      	str	r5, [r3, #16]
   d7958:	615a      	str	r2, [r3, #20]
   d795a:	bd38      	pop	{r3, r4, r5, pc}
   d795c:	2003de18 	.word	0x2003de18

000d7960 <strcmp>:
   d7960:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7964:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7968:	2a01      	cmp	r2, #1
   d796a:	bf28      	it	cs
   d796c:	429a      	cmpcs	r2, r3
   d796e:	d0f7      	beq.n	d7960 <strcmp>
   d7970:	1ad0      	subs	r0, r2, r3
   d7972:	4770      	bx	lr

000d7974 <strcpy>:
   d7974:	4603      	mov	r3, r0
   d7976:	f811 2b01 	ldrb.w	r2, [r1], #1
   d797a:	f803 2b01 	strb.w	r2, [r3], #1
   d797e:	2a00      	cmp	r2, #0
   d7980:	d1f9      	bne.n	d7976 <strcpy+0x2>
   d7982:	4770      	bx	lr

000d7984 <strlen>:
   d7984:	4603      	mov	r3, r0
   d7986:	f813 2b01 	ldrb.w	r2, [r3], #1
   d798a:	2a00      	cmp	r2, #0
   d798c:	d1fb      	bne.n	d7986 <strlen+0x2>
   d798e:	1a18      	subs	r0, r3, r0
   d7990:	3801      	subs	r0, #1
   d7992:	4770      	bx	lr

000d7994 <strncmp>:
   d7994:	b530      	push	{r4, r5, lr}
   d7996:	b182      	cbz	r2, d79ba <strncmp+0x26>
   d7998:	1e45      	subs	r5, r0, #1
   d799a:	3901      	subs	r1, #1
   d799c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d79a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d79a4:	42a3      	cmp	r3, r4
   d79a6:	d106      	bne.n	d79b6 <strncmp+0x22>
   d79a8:	43ec      	mvns	r4, r5
   d79aa:	4414      	add	r4, r2
   d79ac:	42e0      	cmn	r0, r4
   d79ae:	d001      	beq.n	d79b4 <strncmp+0x20>
   d79b0:	2b00      	cmp	r3, #0
   d79b2:	d1f3      	bne.n	d799c <strncmp+0x8>
   d79b4:	461c      	mov	r4, r3
   d79b6:	1b18      	subs	r0, r3, r4
   d79b8:	bd30      	pop	{r4, r5, pc}
   d79ba:	4610      	mov	r0, r2
   d79bc:	bd30      	pop	{r4, r5, pc}

000d79be <strncpy>:
   d79be:	b510      	push	{r4, lr}
   d79c0:	4603      	mov	r3, r0
   d79c2:	b142      	cbz	r2, d79d6 <strncpy+0x18>
   d79c4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d79c8:	f803 4b01 	strb.w	r4, [r3], #1
   d79cc:	3a01      	subs	r2, #1
   d79ce:	2c00      	cmp	r4, #0
   d79d0:	d1f7      	bne.n	d79c2 <strncpy+0x4>
   d79d2:	441a      	add	r2, r3
   d79d4:	e000      	b.n	d79d8 <strncpy+0x1a>
   d79d6:	bd10      	pop	{r4, pc}
   d79d8:	4293      	cmp	r3, r2
   d79da:	d002      	beq.n	d79e2 <strncpy+0x24>
   d79dc:	f803 4b01 	strb.w	r4, [r3], #1
   d79e0:	e7fa      	b.n	d79d8 <strncpy+0x1a>
   d79e2:	bd10      	pop	{r4, pc}

000d79e4 <_strtoul_r>:
   d79e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d79e8:	4680      	mov	r8, r0
   d79ea:	483c      	ldr	r0, [pc, #240]	; (d7adc <_strtoul_r+0xf8>)
   d79ec:	f8d0 9000 	ldr.w	r9, [r0]
   d79f0:	460e      	mov	r6, r1
   d79f2:	4635      	mov	r5, r6
   d79f4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d79f8:	eb09 0004 	add.w	r0, r9, r4
   d79fc:	7840      	ldrb	r0, [r0, #1]
   d79fe:	f000 0008 	and.w	r0, r0, #8
   d7a02:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7a06:	b108      	cbz	r0, d7a0c <_strtoul_r+0x28>
   d7a08:	462e      	mov	r6, r5
   d7a0a:	e7f2      	b.n	d79f2 <_strtoul_r+0xe>
   d7a0c:	2c2d      	cmp	r4, #45	; 0x2d
   d7a0e:	d103      	bne.n	d7a18 <_strtoul_r+0x34>
   d7a10:	1cb5      	adds	r5, r6, #2
   d7a12:	7874      	ldrb	r4, [r6, #1]
   d7a14:	2701      	movs	r7, #1
   d7a16:	e003      	b.n	d7a20 <_strtoul_r+0x3c>
   d7a18:	2c2b      	cmp	r4, #43	; 0x2b
   d7a1a:	bf04      	itt	eq
   d7a1c:	7874      	ldrbeq	r4, [r6, #1]
   d7a1e:	1cb5      	addeq	r5, r6, #2
   d7a20:	b113      	cbz	r3, d7a28 <_strtoul_r+0x44>
   d7a22:	2b10      	cmp	r3, #16
   d7a24:	d10a      	bne.n	d7a3c <_strtoul_r+0x58>
   d7a26:	e053      	b.n	d7ad0 <_strtoul_r+0xec>
   d7a28:	2c30      	cmp	r4, #48	; 0x30
   d7a2a:	d14f      	bne.n	d7acc <_strtoul_r+0xe8>
   d7a2c:	7828      	ldrb	r0, [r5, #0]
   d7a2e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7a32:	2858      	cmp	r0, #88	; 0x58
   d7a34:	d145      	bne.n	d7ac2 <_strtoul_r+0xde>
   d7a36:	786c      	ldrb	r4, [r5, #1]
   d7a38:	2310      	movs	r3, #16
   d7a3a:	3502      	adds	r5, #2
   d7a3c:	f04f 3cff 	mov.w	ip, #4294967295
   d7a40:	2600      	movs	r6, #0
   d7a42:	fbbc fcf3 	udiv	ip, ip, r3
   d7a46:	fb03 fa0c 	mul.w	sl, r3, ip
   d7a4a:	ea6f 0a0a 	mvn.w	sl, sl
   d7a4e:	4630      	mov	r0, r6
   d7a50:	eb09 0e04 	add.w	lr, r9, r4
   d7a54:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7a58:	f01e 0f04 	tst.w	lr, #4
   d7a5c:	d001      	beq.n	d7a62 <_strtoul_r+0x7e>
   d7a5e:	3c30      	subs	r4, #48	; 0x30
   d7a60:	e00b      	b.n	d7a7a <_strtoul_r+0x96>
   d7a62:	f01e 0e03 	ands.w	lr, lr, #3
   d7a66:	d01a      	beq.n	d7a9e <_strtoul_r+0xba>
   d7a68:	f1be 0f01 	cmp.w	lr, #1
   d7a6c:	bf0c      	ite	eq
   d7a6e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7a72:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7a76:	ebce 0404 	rsb	r4, lr, r4
   d7a7a:	42a3      	cmp	r3, r4
   d7a7c:	dd0f      	ble.n	d7a9e <_strtoul_r+0xba>
   d7a7e:	2e00      	cmp	r6, #0
   d7a80:	db08      	blt.n	d7a94 <_strtoul_r+0xb0>
   d7a82:	4560      	cmp	r0, ip
   d7a84:	d806      	bhi.n	d7a94 <_strtoul_r+0xb0>
   d7a86:	d101      	bne.n	d7a8c <_strtoul_r+0xa8>
   d7a88:	4554      	cmp	r4, sl
   d7a8a:	dc03      	bgt.n	d7a94 <_strtoul_r+0xb0>
   d7a8c:	fb03 4000 	mla	r0, r3, r0, r4
   d7a90:	2601      	movs	r6, #1
   d7a92:	e001      	b.n	d7a98 <_strtoul_r+0xb4>
   d7a94:	f04f 36ff 	mov.w	r6, #4294967295
   d7a98:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7a9c:	e7d8      	b.n	d7a50 <_strtoul_r+0x6c>
   d7a9e:	2e00      	cmp	r6, #0
   d7aa0:	da07      	bge.n	d7ab2 <_strtoul_r+0xce>
   d7aa2:	2322      	movs	r3, #34	; 0x22
   d7aa4:	f8c8 3000 	str.w	r3, [r8]
   d7aa8:	f04f 30ff 	mov.w	r0, #4294967295
   d7aac:	b92a      	cbnz	r2, d7aba <_strtoul_r+0xd6>
   d7aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ab2:	b107      	cbz	r7, d7ab6 <_strtoul_r+0xd2>
   d7ab4:	4240      	negs	r0, r0
   d7ab6:	b172      	cbz	r2, d7ad6 <_strtoul_r+0xf2>
   d7ab8:	b106      	cbz	r6, d7abc <_strtoul_r+0xd8>
   d7aba:	1e69      	subs	r1, r5, #1
   d7abc:	6011      	str	r1, [r2, #0]
   d7abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ac2:	2430      	movs	r4, #48	; 0x30
   d7ac4:	2b00      	cmp	r3, #0
   d7ac6:	d1b9      	bne.n	d7a3c <_strtoul_r+0x58>
   d7ac8:	2308      	movs	r3, #8
   d7aca:	e7b7      	b.n	d7a3c <_strtoul_r+0x58>
   d7acc:	230a      	movs	r3, #10
   d7ace:	e7b5      	b.n	d7a3c <_strtoul_r+0x58>
   d7ad0:	2c30      	cmp	r4, #48	; 0x30
   d7ad2:	d0ab      	beq.n	d7a2c <_strtoul_r+0x48>
   d7ad4:	e7b2      	b.n	d7a3c <_strtoul_r+0x58>
   d7ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ada:	bf00      	nop
   d7adc:	2003ddb4 	.word	0x2003ddb4

000d7ae0 <strtoul>:
   d7ae0:	4613      	mov	r3, r2
   d7ae2:	460a      	mov	r2, r1
   d7ae4:	4601      	mov	r1, r0
   d7ae6:	4802      	ldr	r0, [pc, #8]	; (d7af0 <strtoul+0x10>)
   d7ae8:	6800      	ldr	r0, [r0, #0]
   d7aea:	f7ff bf7b 	b.w	d79e4 <_strtoul_r>
   d7aee:	bf00      	nop
   d7af0:	2003de18 	.word	0x2003de18

000d7af4 <__tzcalc_limits>:
   d7af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7af8:	4604      	mov	r4, r0
   d7afa:	f000 fa6f 	bl	d7fdc <__gettzinfo>
   d7afe:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7b02:	429c      	cmp	r4, r3
   d7b04:	f340 8096 	ble.w	d7c34 <__tzcalc_limits+0x140>
   d7b08:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7b0c:	18e3      	adds	r3, r4, r3
   d7b0e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7b12:	109b      	asrs	r3, r3, #2
   d7b14:	f240 156d 	movw	r5, #365	; 0x16d
   d7b18:	fb05 3502 	mla	r5, r5, r2, r3
   d7b1c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7b20:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7b24:	fb92 f3f3 	sdiv	r3, r2, r3
   d7b28:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7b2c:	442b      	add	r3, r5
   d7b2e:	18a5      	adds	r5, r4, r2
   d7b30:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7b34:	fb95 f5f2 	sdiv	r5, r5, r2
   d7b38:	441d      	add	r5, r3
   d7b3a:	2364      	movs	r3, #100	; 0x64
   d7b3c:	fb94 f7f2 	sdiv	r7, r4, r2
   d7b40:	fb94 f6f3 	sdiv	r6, r4, r3
   d7b44:	fb02 4717 	mls	r7, r2, r7, r4
   d7b48:	fb03 4616 	mls	r6, r3, r6, r4
   d7b4c:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7b50:	fab7 fe87 	clz	lr, r7
   d7b54:	9301      	str	r3, [sp, #4]
   d7b56:	f004 0303 	and.w	r3, r4, #3
   d7b5a:	6044      	str	r4, [r0, #4]
   d7b5c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7b60:	4601      	mov	r1, r0
   d7b62:	9300      	str	r3, [sp, #0]
   d7b64:	f04f 0c07 	mov.w	ip, #7
   d7b68:	7a0b      	ldrb	r3, [r1, #8]
   d7b6a:	2b4a      	cmp	r3, #74	; 0x4a
   d7b6c:	d10e      	bne.n	d7b8c <__tzcalc_limits+0x98>
   d7b6e:	694b      	ldr	r3, [r1, #20]
   d7b70:	9a00      	ldr	r2, [sp, #0]
   d7b72:	18ec      	adds	r4, r5, r3
   d7b74:	b902      	cbnz	r2, d7b78 <__tzcalc_limits+0x84>
   d7b76:	b906      	cbnz	r6, d7b7a <__tzcalc_limits+0x86>
   d7b78:	b927      	cbnz	r7, d7b84 <__tzcalc_limits+0x90>
   d7b7a:	2b3b      	cmp	r3, #59	; 0x3b
   d7b7c:	bfd4      	ite	le
   d7b7e:	2300      	movle	r3, #0
   d7b80:	2301      	movgt	r3, #1
   d7b82:	e000      	b.n	d7b86 <__tzcalc_limits+0x92>
   d7b84:	2300      	movs	r3, #0
   d7b86:	4423      	add	r3, r4
   d7b88:	3b01      	subs	r3, #1
   d7b8a:	e03f      	b.n	d7c0c <__tzcalc_limits+0x118>
   d7b8c:	2b44      	cmp	r3, #68	; 0x44
   d7b8e:	d102      	bne.n	d7b96 <__tzcalc_limits+0xa2>
   d7b90:	694b      	ldr	r3, [r1, #20]
   d7b92:	442b      	add	r3, r5
   d7b94:	e03a      	b.n	d7c0c <__tzcalc_limits+0x118>
   d7b96:	9b00      	ldr	r3, [sp, #0]
   d7b98:	b92b      	cbnz	r3, d7ba6 <__tzcalc_limits+0xb2>
   d7b9a:	2e00      	cmp	r6, #0
   d7b9c:	bf0c      	ite	eq
   d7b9e:	46f0      	moveq	r8, lr
   d7ba0:	f04f 0801 	movne.w	r8, #1
   d7ba4:	e000      	b.n	d7ba8 <__tzcalc_limits+0xb4>
   d7ba6:	46f0      	mov	r8, lr
   d7ba8:	4b24      	ldr	r3, [pc, #144]	; (d7c3c <__tzcalc_limits+0x148>)
   d7baa:	68cc      	ldr	r4, [r1, #12]
   d7bac:	2230      	movs	r2, #48	; 0x30
   d7bae:	fb02 3808 	mla	r8, r2, r8, r3
   d7bb2:	f1a8 0a04 	sub.w	sl, r8, #4
   d7bb6:	46a9      	mov	r9, r5
   d7bb8:	2301      	movs	r3, #1
   d7bba:	42a3      	cmp	r3, r4
   d7bbc:	da04      	bge.n	d7bc8 <__tzcalc_limits+0xd4>
   d7bbe:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7bc2:	3301      	adds	r3, #1
   d7bc4:	44d9      	add	r9, fp
   d7bc6:	e7f8      	b.n	d7bba <__tzcalc_limits+0xc6>
   d7bc8:	f109 0304 	add.w	r3, r9, #4
   d7bcc:	fb93 fbfc 	sdiv	fp, r3, ip
   d7bd0:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7bd4:	2c01      	cmp	r4, #1
   d7bd6:	ebca 0a03 	rsb	sl, sl, r3
   d7bda:	694b      	ldr	r3, [r1, #20]
   d7bdc:	bfb8      	it	lt
   d7bde:	2401      	movlt	r4, #1
   d7be0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7be4:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7be8:	690b      	ldr	r3, [r1, #16]
   d7bea:	f104 34ff 	add.w	r4, r4, #4294967295
   d7bee:	f103 33ff 	add.w	r3, r3, #4294967295
   d7bf2:	bf48      	it	mi
   d7bf4:	f10a 0a07 	addmi.w	sl, sl, #7
   d7bf8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7bfc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7c00:	4453      	add	r3, sl
   d7c02:	42a3      	cmp	r3, r4
   d7c04:	db01      	blt.n	d7c0a <__tzcalc_limits+0x116>
   d7c06:	3b07      	subs	r3, #7
   d7c08:	e7fb      	b.n	d7c02 <__tzcalc_limits+0x10e>
   d7c0a:	444b      	add	r3, r9
   d7c0c:	698c      	ldr	r4, [r1, #24]
   d7c0e:	4a0c      	ldr	r2, [pc, #48]	; (d7c40 <__tzcalc_limits+0x14c>)
   d7c10:	fb02 4303 	mla	r3, r2, r3, r4
   d7c14:	6a0c      	ldr	r4, [r1, #32]
   d7c16:	4423      	add	r3, r4
   d7c18:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7c1c:	9b01      	ldr	r3, [sp, #4]
   d7c1e:	4299      	cmp	r1, r3
   d7c20:	d1a2      	bne.n	d7b68 <__tzcalc_limits+0x74>
   d7c22:	69c3      	ldr	r3, [r0, #28]
   d7c24:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7c26:	4293      	cmp	r3, r2
   d7c28:	bfac      	ite	ge
   d7c2a:	2300      	movge	r3, #0
   d7c2c:	2301      	movlt	r3, #1
   d7c2e:	6003      	str	r3, [r0, #0]
   d7c30:	2001      	movs	r0, #1
   d7c32:	e000      	b.n	d7c36 <__tzcalc_limits+0x142>
   d7c34:	2000      	movs	r0, #0
   d7c36:	b003      	add	sp, #12
   d7c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7c3c:	000d8718 	.word	0x000d8718
   d7c40:	00015180 	.word	0x00015180

000d7c44 <__tz_lock>:
   d7c44:	4770      	bx	lr

000d7c46 <__tz_unlock>:
   d7c46:	4770      	bx	lr

000d7c48 <_tzset_unlocked>:
   d7c48:	4b01      	ldr	r3, [pc, #4]	; (d7c50 <_tzset_unlocked+0x8>)
   d7c4a:	6818      	ldr	r0, [r3, #0]
   d7c4c:	f000 b802 	b.w	d7c54 <_tzset_unlocked_r>
   d7c50:	2003de18 	.word	0x2003de18

000d7c54 <_tzset_unlocked_r>:
   d7c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c58:	b08d      	sub	sp, #52	; 0x34
   d7c5a:	4607      	mov	r7, r0
   d7c5c:	f000 f9be 	bl	d7fdc <__gettzinfo>
   d7c60:	49b0      	ldr	r1, [pc, #704]	; (d7f24 <_tzset_unlocked_r+0x2d0>)
   d7c62:	4eb1      	ldr	r6, [pc, #708]	; (d7f28 <_tzset_unlocked_r+0x2d4>)
   d7c64:	4604      	mov	r4, r0
   d7c66:	4638      	mov	r0, r7
   d7c68:	f000 f9b0 	bl	d7fcc <_getenv_r>
   d7c6c:	4605      	mov	r5, r0
   d7c6e:	b960      	cbnz	r0, d7c8a <_tzset_unlocked_r+0x36>
   d7c70:	4bae      	ldr	r3, [pc, #696]	; (d7f2c <_tzset_unlocked_r+0x2d8>)
   d7c72:	4aaf      	ldr	r2, [pc, #700]	; (d7f30 <_tzset_unlocked_r+0x2dc>)
   d7c74:	6018      	str	r0, [r3, #0]
   d7c76:	4baf      	ldr	r3, [pc, #700]	; (d7f34 <_tzset_unlocked_r+0x2e0>)
   d7c78:	6018      	str	r0, [r3, #0]
   d7c7a:	4baf      	ldr	r3, [pc, #700]	; (d7f38 <_tzset_unlocked_r+0x2e4>)
   d7c7c:	6830      	ldr	r0, [r6, #0]
   d7c7e:	601a      	str	r2, [r3, #0]
   d7c80:	605a      	str	r2, [r3, #4]
   d7c82:	f7fe fb77 	bl	d6374 <free>
   d7c86:	6035      	str	r5, [r6, #0]
   d7c88:	e148      	b.n	d7f1c <_tzset_unlocked_r+0x2c8>
   d7c8a:	6831      	ldr	r1, [r6, #0]
   d7c8c:	b979      	cbnz	r1, d7cae <_tzset_unlocked_r+0x5a>
   d7c8e:	6830      	ldr	r0, [r6, #0]
   d7c90:	f7fe fb70 	bl	d6374 <free>
   d7c94:	4628      	mov	r0, r5
   d7c96:	f7ff fe75 	bl	d7984 <strlen>
   d7c9a:	1c41      	adds	r1, r0, #1
   d7c9c:	4638      	mov	r0, r7
   d7c9e:	f7fe fb91 	bl	d63c4 <_malloc_r>
   d7ca2:	6030      	str	r0, [r6, #0]
   d7ca4:	b148      	cbz	r0, d7cba <_tzset_unlocked_r+0x66>
   d7ca6:	4629      	mov	r1, r5
   d7ca8:	f7ff fe64 	bl	d7974 <strcpy>
   d7cac:	e005      	b.n	d7cba <_tzset_unlocked_r+0x66>
   d7cae:	f7ff fe57 	bl	d7960 <strcmp>
   d7cb2:	2800      	cmp	r0, #0
   d7cb4:	f000 8132 	beq.w	d7f1c <_tzset_unlocked_r+0x2c8>
   d7cb8:	e7e9      	b.n	d7c8e <_tzset_unlocked_r+0x3a>
   d7cba:	782b      	ldrb	r3, [r5, #0]
   d7cbc:	4a9f      	ldr	r2, [pc, #636]	; (d7f3c <_tzset_unlocked_r+0x2e8>)
   d7cbe:	49a0      	ldr	r1, [pc, #640]	; (d7f40 <_tzset_unlocked_r+0x2ec>)
   d7cc0:	2b3a      	cmp	r3, #58	; 0x3a
   d7cc2:	bf08      	it	eq
   d7cc4:	3501      	addeq	r5, #1
   d7cc6:	ae0a      	add	r6, sp, #40	; 0x28
   d7cc8:	4633      	mov	r3, r6
   d7cca:	4628      	mov	r0, r5
   d7ccc:	f7fe fb6a 	bl	d63a4 <siscanf>
   d7cd0:	2800      	cmp	r0, #0
   d7cd2:	f340 8123 	ble.w	d7f1c <_tzset_unlocked_r+0x2c8>
   d7cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7cd8:	18ef      	adds	r7, r5, r3
   d7cda:	5ceb      	ldrb	r3, [r5, r3]
   d7cdc:	2b2d      	cmp	r3, #45	; 0x2d
   d7cde:	d103      	bne.n	d7ce8 <_tzset_unlocked_r+0x94>
   d7ce0:	3701      	adds	r7, #1
   d7ce2:	f04f 35ff 	mov.w	r5, #4294967295
   d7ce6:	e003      	b.n	d7cf0 <_tzset_unlocked_r+0x9c>
   d7ce8:	2b2b      	cmp	r3, #43	; 0x2b
   d7cea:	bf08      	it	eq
   d7cec:	3701      	addeq	r7, #1
   d7cee:	2501      	movs	r5, #1
   d7cf0:	f10d 0a20 	add.w	sl, sp, #32
   d7cf4:	f10d 0b1e 	add.w	fp, sp, #30
   d7cf8:	f04f 0800 	mov.w	r8, #0
   d7cfc:	9603      	str	r6, [sp, #12]
   d7cfe:	f8cd a008 	str.w	sl, [sp, #8]
   d7d02:	9601      	str	r6, [sp, #4]
   d7d04:	f8cd b000 	str.w	fp, [sp]
   d7d08:	4633      	mov	r3, r6
   d7d0a:	aa07      	add	r2, sp, #28
   d7d0c:	498d      	ldr	r1, [pc, #564]	; (d7f44 <_tzset_unlocked_r+0x2f0>)
   d7d0e:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7d12:	4638      	mov	r0, r7
   d7d14:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7d18:	f7fe fb44 	bl	d63a4 <siscanf>
   d7d1c:	4540      	cmp	r0, r8
   d7d1e:	f340 80fd 	ble.w	d7f1c <_tzset_unlocked_r+0x2c8>
   d7d22:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7d26:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7d2a:	f8df 9224 	ldr.w	r9, [pc, #548]	; d7f50 <_tzset_unlocked_r+0x2fc>
   d7d2e:	213c      	movs	r1, #60	; 0x3c
   d7d30:	fb01 3302 	mla	r3, r1, r2, r3
   d7d34:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7d38:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7d3c:	fb01 3302 	mla	r3, r1, r2, r3
   d7d40:	435d      	muls	r5, r3
   d7d42:	6225      	str	r5, [r4, #32]
   d7d44:	4d7c      	ldr	r5, [pc, #496]	; (d7f38 <_tzset_unlocked_r+0x2e4>)
   d7d46:	4b7d      	ldr	r3, [pc, #500]	; (d7f3c <_tzset_unlocked_r+0x2e8>)
   d7d48:	602b      	str	r3, [r5, #0]
   d7d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7d4c:	497c      	ldr	r1, [pc, #496]	; (d7f40 <_tzset_unlocked_r+0x2ec>)
   d7d4e:	441f      	add	r7, r3
   d7d50:	464a      	mov	r2, r9
   d7d52:	4633      	mov	r3, r6
   d7d54:	4638      	mov	r0, r7
   d7d56:	f7fe fb25 	bl	d63a4 <siscanf>
   d7d5a:	4540      	cmp	r0, r8
   d7d5c:	dc08      	bgt.n	d7d70 <_tzset_unlocked_r+0x11c>
   d7d5e:	682b      	ldr	r3, [r5, #0]
   d7d60:	606b      	str	r3, [r5, #4]
   d7d62:	4b72      	ldr	r3, [pc, #456]	; (d7f2c <_tzset_unlocked_r+0x2d8>)
   d7d64:	6a22      	ldr	r2, [r4, #32]
   d7d66:	601a      	str	r2, [r3, #0]
   d7d68:	4b72      	ldr	r3, [pc, #456]	; (d7f34 <_tzset_unlocked_r+0x2e0>)
   d7d6a:	f8c3 8000 	str.w	r8, [r3]
   d7d6e:	e0d5      	b.n	d7f1c <_tzset_unlocked_r+0x2c8>
   d7d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7d72:	f8c5 9004 	str.w	r9, [r5, #4]
   d7d76:	18fd      	adds	r5, r7, r3
   d7d78:	5cfb      	ldrb	r3, [r7, r3]
   d7d7a:	2b2d      	cmp	r3, #45	; 0x2d
   d7d7c:	d103      	bne.n	d7d86 <_tzset_unlocked_r+0x132>
   d7d7e:	3501      	adds	r5, #1
   d7d80:	f04f 37ff 	mov.w	r7, #4294967295
   d7d84:	e003      	b.n	d7d8e <_tzset_unlocked_r+0x13a>
   d7d86:	2b2b      	cmp	r3, #43	; 0x2b
   d7d88:	bf08      	it	eq
   d7d8a:	3501      	addeq	r5, #1
   d7d8c:	2701      	movs	r7, #1
   d7d8e:	2300      	movs	r3, #0
   d7d90:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7d94:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7d98:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7d9c:	930a      	str	r3, [sp, #40]	; 0x28
   d7d9e:	9603      	str	r6, [sp, #12]
   d7da0:	f8cd a008 	str.w	sl, [sp, #8]
   d7da4:	9601      	str	r6, [sp, #4]
   d7da6:	f8cd b000 	str.w	fp, [sp]
   d7daa:	4633      	mov	r3, r6
   d7dac:	aa07      	add	r2, sp, #28
   d7dae:	4965      	ldr	r1, [pc, #404]	; (d7f44 <_tzset_unlocked_r+0x2f0>)
   d7db0:	4628      	mov	r0, r5
   d7db2:	f7fe faf7 	bl	d63a4 <siscanf>
   d7db6:	2800      	cmp	r0, #0
   d7db8:	dc04      	bgt.n	d7dc4 <_tzset_unlocked_r+0x170>
   d7dba:	6a23      	ldr	r3, [r4, #32]
   d7dbc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7dc0:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7dc2:	e00e      	b.n	d7de2 <_tzset_unlocked_r+0x18e>
   d7dc4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7dc8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7dcc:	213c      	movs	r1, #60	; 0x3c
   d7dce:	fb01 3302 	mla	r3, r1, r2, r3
   d7dd2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7dd6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7dda:	fb01 3302 	mla	r3, r1, r2, r3
   d7dde:	435f      	muls	r7, r3
   d7de0:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7de4:	4627      	mov	r7, r4
   d7de6:	441d      	add	r5, r3
   d7de8:	f04f 0900 	mov.w	r9, #0
   d7dec:	782b      	ldrb	r3, [r5, #0]
   d7dee:	2b2c      	cmp	r3, #44	; 0x2c
   d7df0:	bf08      	it	eq
   d7df2:	3501      	addeq	r5, #1
   d7df4:	f895 8000 	ldrb.w	r8, [r5]
   d7df8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7dfc:	d126      	bne.n	d7e4c <_tzset_unlocked_r+0x1f8>
   d7dfe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7e02:	9302      	str	r3, [sp, #8]
   d7e04:	ab09      	add	r3, sp, #36	; 0x24
   d7e06:	9300      	str	r3, [sp, #0]
   d7e08:	9603      	str	r6, [sp, #12]
   d7e0a:	9601      	str	r6, [sp, #4]
   d7e0c:	4633      	mov	r3, r6
   d7e0e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7e12:	494d      	ldr	r1, [pc, #308]	; (d7f48 <_tzset_unlocked_r+0x2f4>)
   d7e14:	4628      	mov	r0, r5
   d7e16:	f7fe fac5 	bl	d63a4 <siscanf>
   d7e1a:	2803      	cmp	r0, #3
   d7e1c:	d17e      	bne.n	d7f1c <_tzset_unlocked_r+0x2c8>
   d7e1e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d7e22:	1e4b      	subs	r3, r1, #1
   d7e24:	2b0b      	cmp	r3, #11
   d7e26:	d879      	bhi.n	d7f1c <_tzset_unlocked_r+0x2c8>
   d7e28:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7e2c:	1e53      	subs	r3, r2, #1
   d7e2e:	2b04      	cmp	r3, #4
   d7e30:	d874      	bhi.n	d7f1c <_tzset_unlocked_r+0x2c8>
   d7e32:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7e36:	2b06      	cmp	r3, #6
   d7e38:	d870      	bhi.n	d7f1c <_tzset_unlocked_r+0x2c8>
   d7e3a:	f887 8008 	strb.w	r8, [r7, #8]
   d7e3e:	60f9      	str	r1, [r7, #12]
   d7e40:	613a      	str	r2, [r7, #16]
   d7e42:	617b      	str	r3, [r7, #20]
   d7e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e46:	eb05 0803 	add.w	r8, r5, r3
   d7e4a:	e02a      	b.n	d7ea2 <_tzset_unlocked_r+0x24e>
   d7e4c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d7e50:	bf06      	itte	eq
   d7e52:	3501      	addeq	r5, #1
   d7e54:	4643      	moveq	r3, r8
   d7e56:	2344      	movne	r3, #68	; 0x44
   d7e58:	220a      	movs	r2, #10
   d7e5a:	a90b      	add	r1, sp, #44	; 0x2c
   d7e5c:	4628      	mov	r0, r5
   d7e5e:	9305      	str	r3, [sp, #20]
   d7e60:	f7ff fe3e 	bl	d7ae0 <strtoul>
   d7e64:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d7e68:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7e6c:	4545      	cmp	r5, r8
   d7e6e:	9b05      	ldr	r3, [sp, #20]
   d7e70:	d114      	bne.n	d7e9c <_tzset_unlocked_r+0x248>
   d7e72:	234d      	movs	r3, #77	; 0x4d
   d7e74:	f1b9 0f00 	cmp.w	r9, #0
   d7e78:	d107      	bne.n	d7e8a <_tzset_unlocked_r+0x236>
   d7e7a:	7223      	strb	r3, [r4, #8]
   d7e7c:	2303      	movs	r3, #3
   d7e7e:	60e3      	str	r3, [r4, #12]
   d7e80:	2302      	movs	r3, #2
   d7e82:	6123      	str	r3, [r4, #16]
   d7e84:	f8c4 9014 	str.w	r9, [r4, #20]
   d7e88:	e00b      	b.n	d7ea2 <_tzset_unlocked_r+0x24e>
   d7e8a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d7e8e:	230b      	movs	r3, #11
   d7e90:	62a3      	str	r3, [r4, #40]	; 0x28
   d7e92:	2301      	movs	r3, #1
   d7e94:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7e96:	2300      	movs	r3, #0
   d7e98:	6323      	str	r3, [r4, #48]	; 0x30
   d7e9a:	e002      	b.n	d7ea2 <_tzset_unlocked_r+0x24e>
   d7e9c:	b280      	uxth	r0, r0
   d7e9e:	723b      	strb	r3, [r7, #8]
   d7ea0:	6178      	str	r0, [r7, #20]
   d7ea2:	2302      	movs	r3, #2
   d7ea4:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7ea8:	2300      	movs	r3, #0
   d7eaa:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7eae:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7eb2:	930a      	str	r3, [sp, #40]	; 0x28
   d7eb4:	f898 3000 	ldrb.w	r3, [r8]
   d7eb8:	2b2f      	cmp	r3, #47	; 0x2f
   d7eba:	d10b      	bne.n	d7ed4 <_tzset_unlocked_r+0x280>
   d7ebc:	9603      	str	r6, [sp, #12]
   d7ebe:	f8cd a008 	str.w	sl, [sp, #8]
   d7ec2:	9601      	str	r6, [sp, #4]
   d7ec4:	f8cd b000 	str.w	fp, [sp]
   d7ec8:	4633      	mov	r3, r6
   d7eca:	aa07      	add	r2, sp, #28
   d7ecc:	491f      	ldr	r1, [pc, #124]	; (d7f4c <_tzset_unlocked_r+0x2f8>)
   d7ece:	4640      	mov	r0, r8
   d7ed0:	f7fe fa68 	bl	d63a4 <siscanf>
   d7ed4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7ed8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7edc:	213c      	movs	r1, #60	; 0x3c
   d7ede:	fb01 3302 	mla	r3, r1, r2, r3
   d7ee2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7ee6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7eea:	fb01 3302 	mla	r3, r1, r2, r3
   d7eee:	61bb      	str	r3, [r7, #24]
   d7ef0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7ef2:	f109 0901 	add.w	r9, r9, #1
   d7ef6:	f1b9 0f02 	cmp.w	r9, #2
   d7efa:	4445      	add	r5, r8
   d7efc:	f107 071c 	add.w	r7, r7, #28
   d7f00:	f47f af74 	bne.w	d7dec <_tzset_unlocked_r+0x198>
   d7f04:	6860      	ldr	r0, [r4, #4]
   d7f06:	f7ff fdf5 	bl	d7af4 <__tzcalc_limits>
   d7f0a:	4b08      	ldr	r3, [pc, #32]	; (d7f2c <_tzset_unlocked_r+0x2d8>)
   d7f0c:	6a22      	ldr	r2, [r4, #32]
   d7f0e:	601a      	str	r2, [r3, #0]
   d7f10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7f12:	1a9b      	subs	r3, r3, r2
   d7f14:	4a07      	ldr	r2, [pc, #28]	; (d7f34 <_tzset_unlocked_r+0x2e0>)
   d7f16:	bf18      	it	ne
   d7f18:	2301      	movne	r3, #1
   d7f1a:	6013      	str	r3, [r2, #0]
   d7f1c:	b00d      	add	sp, #52	; 0x34
   d7f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f22:	bf00      	nop
   d7f24:	000d8778 	.word	0x000d8778
   d7f28:	2003e7e0 	.word	0x2003e7e0
   d7f2c:	2003e7e8 	.word	0x2003e7e8
   d7f30:	000d877b 	.word	0x000d877b
   d7f34:	2003e7e4 	.word	0x2003e7e4
   d7f38:	2003de1c 	.word	0x2003de1c
   d7f3c:	2003e7d3 	.word	0x2003e7d3
   d7f40:	000d877f 	.word	0x000d877f
   d7f44:	000d87a2 	.word	0x000d87a2
   d7f48:	000d878e 	.word	0x000d878e
   d7f4c:	000d87a1 	.word	0x000d87a1
   d7f50:	2003e7c8 	.word	0x2003e7c8

000d7f54 <_findenv_r>:
   d7f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7f58:	4607      	mov	r7, r0
   d7f5a:	468b      	mov	fp, r1
   d7f5c:	4690      	mov	r8, r2
   d7f5e:	f000 f8d9 	bl	d8114 <__env_lock>
   d7f62:	4b19      	ldr	r3, [pc, #100]	; (d7fc8 <_findenv_r+0x74>)
   d7f64:	681d      	ldr	r5, [r3, #0]
   d7f66:	469a      	mov	sl, r3
   d7f68:	b13d      	cbz	r5, d7f7a <_findenv_r+0x26>
   d7f6a:	465c      	mov	r4, fp
   d7f6c:	4623      	mov	r3, r4
   d7f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f72:	b142      	cbz	r2, d7f86 <_findenv_r+0x32>
   d7f74:	2a3d      	cmp	r2, #61	; 0x3d
   d7f76:	461c      	mov	r4, r3
   d7f78:	d1f8      	bne.n	d7f6c <_findenv_r+0x18>
   d7f7a:	4638      	mov	r0, r7
   d7f7c:	f000 f8cb 	bl	d8116 <__env_unlock>
   d7f80:	2000      	movs	r0, #0
   d7f82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f86:	ebcb 0404 	rsb	r4, fp, r4
   d7f8a:	46a9      	mov	r9, r5
   d7f8c:	f859 0b04 	ldr.w	r0, [r9], #4
   d7f90:	2800      	cmp	r0, #0
   d7f92:	d0f2      	beq.n	d7f7a <_findenv_r+0x26>
   d7f94:	4622      	mov	r2, r4
   d7f96:	4659      	mov	r1, fp
   d7f98:	f7ff fcfc 	bl	d7994 <strncmp>
   d7f9c:	b988      	cbnz	r0, d7fc2 <_findenv_r+0x6e>
   d7f9e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d7fa2:	191e      	adds	r6, r3, r4
   d7fa4:	5d1b      	ldrb	r3, [r3, r4]
   d7fa6:	2b3d      	cmp	r3, #61	; 0x3d
   d7fa8:	d10b      	bne.n	d7fc2 <_findenv_r+0x6e>
   d7faa:	f8da 3000 	ldr.w	r3, [sl]
   d7fae:	1aed      	subs	r5, r5, r3
   d7fb0:	10ad      	asrs	r5, r5, #2
   d7fb2:	4638      	mov	r0, r7
   d7fb4:	f8c8 5000 	str.w	r5, [r8]
   d7fb8:	f000 f8ad 	bl	d8116 <__env_unlock>
   d7fbc:	1c70      	adds	r0, r6, #1
   d7fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7fc2:	464d      	mov	r5, r9
   d7fc4:	e7e1      	b.n	d7f8a <_findenv_r+0x36>
   d7fc6:	bf00      	nop
   d7fc8:	2003de64 	.word	0x2003de64

000d7fcc <_getenv_r>:
   d7fcc:	b507      	push	{r0, r1, r2, lr}
   d7fce:	aa01      	add	r2, sp, #4
   d7fd0:	f7ff ffc0 	bl	d7f54 <_findenv_r>
   d7fd4:	b003      	add	sp, #12
   d7fd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7fdc <__gettzinfo>:
   d7fdc:	4800      	ldr	r0, [pc, #0]	; (d7fe0 <__gettzinfo+0x4>)
   d7fde:	4770      	bx	lr
   d7fe0:	2003de24 	.word	0x2003de24

000d7fe4 <gmtime_r>:
   d7fe4:	6802      	ldr	r2, [r0, #0]
   d7fe6:	4b47      	ldr	r3, [pc, #284]	; (d8104 <gmtime_r+0x120>)
   d7fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7fea:	fb92 f4f3 	sdiv	r4, r2, r3
   d7fee:	fb03 2214 	mls	r2, r3, r4, r2
   d7ff2:	2a00      	cmp	r2, #0
   d7ff4:	bfbc      	itt	lt
   d7ff6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7ffa:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d7ffe:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d8002:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d8006:	fb92 f3f0 	sdiv	r3, r2, r0
   d800a:	fb00 2213 	mls	r2, r0, r3, r2
   d800e:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d8012:	bfac      	ite	ge
   d8014:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d8018:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d801c:	608b      	str	r3, [r1, #8]
   d801e:	fb92 f3f0 	sdiv	r3, r2, r0
   d8022:	fb00 2213 	mls	r2, r0, r3, r2
   d8026:	604b      	str	r3, [r1, #4]
   d8028:	600a      	str	r2, [r1, #0]
   d802a:	2307      	movs	r3, #7
   d802c:	1ce2      	adds	r2, r4, #3
   d802e:	fb92 f3f3 	sdiv	r3, r2, r3
   d8032:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8036:	1ad3      	subs	r3, r2, r3
   d8038:	618b      	str	r3, [r1, #24]
   d803a:	4b33      	ldr	r3, [pc, #204]	; (d8108 <gmtime_r+0x124>)
   d803c:	4d33      	ldr	r5, [pc, #204]	; (d810c <gmtime_r+0x128>)
   d803e:	fb94 f5f5 	sdiv	r5, r4, r5
   d8042:	fb03 4405 	mla	r4, r3, r5, r4
   d8046:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d804a:	fbb4 f2f2 	udiv	r2, r4, r2
   d804e:	4422      	add	r2, r4
   d8050:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8054:	fbb4 f3f7 	udiv	r3, r4, r7
   d8058:	1ad2      	subs	r2, r2, r3
   d805a:	482d      	ldr	r0, [pc, #180]	; (d8110 <gmtime_r+0x12c>)
   d805c:	fbb4 f0f0 	udiv	r0, r4, r0
   d8060:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8064:	1a13      	subs	r3, r2, r0
   d8066:	fbb3 f6f6 	udiv	r6, r3, r6
   d806a:	4434      	add	r4, r6
   d806c:	f240 126d 	movw	r2, #365	; 0x16d
   d8070:	fbb3 f0f2 	udiv	r0, r3, r2
   d8074:	fbb3 f3f7 	udiv	r3, r3, r7
   d8078:	1ae3      	subs	r3, r4, r3
   d807a:	fb02 3310 	mls	r3, r2, r0, r3
   d807e:	2499      	movs	r4, #153	; 0x99
   d8080:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8084:	3202      	adds	r2, #2
   d8086:	fbb2 f2f4 	udiv	r2, r2, r4
   d808a:	2a0a      	cmp	r2, #10
   d808c:	fb04 f402 	mul.w	r4, r4, r2
   d8090:	f104 0602 	add.w	r6, r4, #2
   d8094:	f04f 0405 	mov.w	r4, #5
   d8098:	fbb6 f4f4 	udiv	r4, r6, r4
   d809c:	bf34      	ite	cc
   d809e:	2602      	movcc	r6, #2
   d80a0:	f06f 0609 	mvncs.w	r6, #9
   d80a4:	4416      	add	r6, r2
   d80a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d80aa:	fb02 0505 	mla	r5, r2, r5, r0
   d80ae:	1c5f      	adds	r7, r3, #1
   d80b0:	2e01      	cmp	r6, #1
   d80b2:	bf98      	it	ls
   d80b4:	3501      	addls	r5, #1
   d80b6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d80ba:	eba7 0704 	sub.w	r7, r7, r4
   d80be:	d302      	bcc.n	d80c6 <gmtime_r+0xe2>
   d80c0:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d80c4:	e014      	b.n	d80f0 <gmtime_r+0x10c>
   d80c6:	0782      	lsls	r2, r0, #30
   d80c8:	d105      	bne.n	d80d6 <gmtime_r+0xf2>
   d80ca:	2464      	movs	r4, #100	; 0x64
   d80cc:	fbb0 f2f4 	udiv	r2, r0, r4
   d80d0:	fb04 0212 	mls	r2, r4, r2, r0
   d80d4:	b94a      	cbnz	r2, d80ea <gmtime_r+0x106>
   d80d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d80da:	fbb0 f4f2 	udiv	r4, r0, r2
   d80de:	fb02 0014 	mls	r0, r2, r4, r0
   d80e2:	fab0 f280 	clz	r2, r0
   d80e6:	0952      	lsrs	r2, r2, #5
   d80e8:	e000      	b.n	d80ec <gmtime_r+0x108>
   d80ea:	2201      	movs	r2, #1
   d80ec:	333b      	adds	r3, #59	; 0x3b
   d80ee:	441a      	add	r2, r3
   d80f0:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d80f4:	2300      	movs	r3, #0
   d80f6:	61ca      	str	r2, [r1, #28]
   d80f8:	614d      	str	r5, [r1, #20]
   d80fa:	610e      	str	r6, [r1, #16]
   d80fc:	60cf      	str	r7, [r1, #12]
   d80fe:	620b      	str	r3, [r1, #32]
   d8100:	4608      	mov	r0, r1
   d8102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8104:	00015180 	.word	0x00015180
   d8108:	fffdc54f 	.word	0xfffdc54f
   d810c:	00023ab1 	.word	0x00023ab1
   d8110:	00023ab0 	.word	0x00023ab0

000d8114 <__env_lock>:
   d8114:	4770      	bx	lr

000d8116 <__env_unlock>:
   d8116:	4770      	bx	lr

000d8118 <dynalib_user>:
   d8118:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d8128:	0000 0000                                   ....

000d812c <_ZTVN8particle13__SPISettingsE>:
	...
   d8134:	4125 000d                                   %A..

000d8138 <_ZTV4File>:
	...
   d8140:	40cb 000d 4117 000d 40ff 000d 40f9 000d     .@...A...@...@..
   d8150:	40af 000d 40d9 000d 40d3 000d 40cd 000d     .@...@...@...@..
   d8160:	ff7e 0006 0001 0000 ef00 6564 6166 6c75     ~.........defaul
   d8170:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   d8180:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   d8190:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   d81a0:	6c25 2075 7325 4d20 444f 2545 3e64 7000     %lu %s MODE%d>.p
   d81b0:	7869 6c65 7720 726f 696b 676e 4400 7461     ixel working.Dat
   d81c0:	4c61 676f 632e 7673 6e00 6d6f 6e69 6c61     aLog.csv.nominal
   d81d0:	7220 6165 7364 002e 6f6e 696d 616e 206c      reads..nominal 
   d81e0:	6572 6461 6e69 7367 202e 6f6e 6874 6e69     readings. nothin
   d81f0:	2067 6f74 7220 6365 726f 0064 6f6e 696d     g to record.nomi
   d8200:	616e 206c 6572 6461 6e69 7367 7720 6972     nal readings wri
   d8210:	6574 6520 7272 726f 002e 6941 2072 7551     te error..Air Qu
   d8220:	6c61 7469 2079 6177 6e72 6e69 2e67 4100     ality warning..A
   d8230:	7269 5120 6175 696c 7974 6120 656c 7472     ir Quality alert
   d8240:	4100 2051 6c61 7265 2074 7277 7469 2065     .AQ alert write 
   d8250:	7265 6f72 0072 514d 392d 7720 7261 696e     error.MQ-9 warni
   d8260:	676e 002e 514d 392d 6120 656c 7472 4d00     ng..MQ-9 alert.M
   d8270:	2d51 2039 6c61 7265 2074 7277 7469 2065     Q-9 alert write 
   d8280:	7265 6f72 0072 4144 474e 5245 4920 4d4d     error.DANGER IMM
   d8290:	4e49 4e41 2e54 4800 6769 2068 6144 676e     INANT..High Dang
   d82a0:	7265 002e 6948 6867 6420 6e61 6567 2072     er..High danger 
   d82b0:	7277 7469 2065 7265 6f72 2e72 0000 0000     write error.....
   d82c0:	c000 4001 1000 4002 2000 4002               ...@...@. .@

000d82cc <CSWTCH.65>:
   d82cc:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d82dc:	0050 0000                                   P...

000d82e0 <_ZTVN5spark13EthernetClassE>:
	...
   d82e8:	6433 000d 6429 000d 641f 000d 6415 000d     3d..)d...d...d..
   d82f8:	6409 000d 63fd 000d 63f1 000d 63e9 000d     .d...c...c...c..
   d8308:	63df 000d 63d5 000d 7125 000d               .c...c..%q..

000d8314 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8314:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d8324:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d8334:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d8344:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d8354:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d8364:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d8374:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d8384:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d8394:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d83a4:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d83b4:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d83c4:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d83d4:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d83e4:	666e 006f 6177 6e72 7000 6e61 6369 6100     nfo.warn.panic.a
   d83f4:	6c6c 2500 302b 6433 253a 3230 0075 5925     ll.%+03d:%02u.%Y
   d8404:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d8414:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d8420 <_ZTV9IPAddress>:
	...
   d8428:	6b59 000d 6b49 000d 6b4b 000d               Yk..Ik..Kk..

000d8434 <_ZTV9USBSerial>:
	...
   d843c:	6c31 000d 6c81 000d 6c8f 000d 67b9 000d     1l...l...l...g..
   d844c:	6c6d 000d 6c33 000d 6c49 000d 6c7b 000d     ml..3l..Il..{l..
   d845c:	6c5f 000d 6c2d 000d                         _l..-l..

000d8464 <_ZTV11USARTSerial>:
	...
   d846c:	6d3d 000d 6d8d 000d 6d9b 000d 67b9 000d     =m...m...m...g..
   d847c:	6d51 000d 6d73 000d 6d5f 000d 6d87 000d     Qm..sm.._m...m..
   d848c:	6d3f 000d 6d43 000d                         ?m..Cm..

000d8494 <_ZTV7TwoWire>:
	...
   d849c:	6e41 000d 6e8b 000d 6e63 000d 6e43 000d     An...n..cn..Cn..
   d84ac:	6e6b 000d 6e73 000d 6e7b 000d 6e83 000d     kn..sn..{n...n..

000d84bc <_ZTVN5spark9MeshClassE>:
	...
   d84c4:	6f23 000d 6f19 000d 6f0f 000d 6f05 000d     #o...o...o...o..
   d84d4:	6ef9 000d 6eed 000d 6ee1 000d 6ed9 000d     .n...n...n...n..
   d84e4:	6ecf 000d 6ec5 000d 7125 000d               .n...n..%q..

000d84f0 <_ZTVN5spark9WiFiClassE>:
	...
   d84f8:	709f 000d 7095 000d 708b 000d 7041 000d     .p...p...p..Ap..
   d8508:	707f 000d 7073 000d 7067 000d 705f 000d     .p..sp..gp.._p..
   d8518:	7055 000d 704b 000d 7125 000d               Up..Kp..%q..

000d8524 <_ZTVN5spark12NetworkClassE>:
	...
   d852c:	70bd 000d 70c7 000d 70d1 000d 70db 000d     .p...p...p...p..
   d853c:	70e5 000d 70f1 000d 70fd 000d 7109 000d     .p...p...p...q..
   d854c:	7111 000d 711b 000d 7125 000d               .q...q..%q..

000d8558 <_ZSt7nothrow>:
	...

000d8559 <day_name.4725>:
   d8559:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d8569:	6972 6153 4a74                                   riSat

000d856e <mon_name.4726>:
   d856e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d857e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d858e:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d859e:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d85ae:	6425 000a                                   %d..

000d85b2 <_ctype_>:
   d85b2:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d85c2:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d85d2:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d85e2:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d85f2:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8602:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8612:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8622:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8632:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d86b4 <__sf_fake_stdin>:
	...

000d86d4 <__sf_fake_stdout>:
	...

000d86f4 <__sf_fake_stderr>:
	...
   d8714:	0043 0000                                   C...

000d8718 <__month_lengths>:
   d8718:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d8728:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8738:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8748:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d8758:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8768:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8778:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d8788:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d8798:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d87a8:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d87b4 <link_const_variable_data_end>:
   d87b4:	000d453d 	.word	0x000d453d
   d87b8:	000d4b29 	.word	0x000d4b29
   d87bc:	000d4b3d 	.word	0x000d4b3d
   d87c0:	000d4b41 	.word	0x000d4b41
   d87c4:	000d4b45 	.word	0x000d4b45
   d87c8:	000d516d 	.word	0x000d516d
   d87cc:	000d5171 	.word	0x000d5171
   d87d0:	000d5175 	.word	0x000d5175
   d87d4:	000d5179 	.word	0x000d5179
   d87d8:	000d5845 	.word	0x000d5845
   d87dc:	000d5869 	.word	0x000d5869
   d87e0:	000d586d 	.word	0x000d586d
   d87e4:	000d5a8f 	.word	0x000d5a8f
   d87e8:	000d5a93 	.word	0x000d5a93
   d87ec:	000d5a97 	.word	0x000d5a97
   d87f0:	000d5e4d 	.word	0x000d5e4d
   d87f4:	000d5e51 	.word	0x000d5e51
   d87f8:	000d5e55 	.word	0x000d5e55
   d87fc:	000d5ed9 	.word	0x000d5ed9
   d8800:	000d643d 	.word	0x000d643d
   d8804:	000d65dd 	.word	0x000d65dd
   d8808:	000d6791 	.word	0x000d6791
   d880c:	000d68d5 	.word	0x000d68d5
   d8810:	000d69cd 	.word	0x000d69cd
   d8814:	000d6a1d 	.word	0x000d6a1d
   d8818:	000d6ff1 	.word	0x000d6ff1
   d881c:	000d70a9 	.word	0x000d70a9
   d8820:	000d71f1 	.word	0x000d71f1
   d8824:	000d73b9 	.word	0x000d73b9
   d8828:	000d743d 	.word	0x000d743d
   d882c:	000d7501 	.word	0x000d7501
   d8830:	000d75c5 	.word	0x000d75c5

000d8834 <link_constructors_end>:
	...
