
c:/Users/mauri/Documents/IoTc2/Capstone-Deep-Dive-Coding/Code/Demonstration/target/1.5.2/argon/Demonstration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002b74  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6b90  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003de48  000d6b94  0001de48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000093c  2003deb4  2003deb4  0002deb4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6c00  000d6c00  00026c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6c28  000d6c28  00026c28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00188ec6  00000000  00000000  00026c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001e172  00000000  00000000  001afaf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027b59  00000000  00000000  001cdc64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c30  00000000  00000000  001f57bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000053e8  00000000  00000000  001f83ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004c404  00000000  00000000  001fd7d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000514d6  00000000  00000000  00249bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b876  00000000  00000000  0029b0af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e128  00000000  00000000  003a6928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb37 	bl	d66a0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb3c 	bl	d66b6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003de48 	.word	0x2003de48
   d4048:	000d6b94 	.word	0x000d6b94
   d404c:	2003deb4 	.word	0x2003deb4
   d4050:	2003deb4 	.word	0x2003deb4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fd6b 	bl	d5b34 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6b90 	.word	0x000d6b90
   d4080:	000d6b10 	.word	0x000d6b10

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b884 	b.w	d4190 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8ab 	bl	d41e4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bd11 	b.w	d5ab8 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 baf7 	b.w	d5688 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 baf5 	b.w	d5688 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40ae:	7c03      	ldrb	r3, [r0, #16]
   d40b0:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40b4:	4602      	mov	r2, r0
   d40b6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40ba:	b12b      	cbz	r3, d40c8 <_ZN4File9availableEv+0x1a>
   d40bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40be:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c0:	1a18      	subs	r0, r3, r0
   d40c2:	bf48      	it	mi
   d40c4:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40c8:	4770      	bx	lr

000d40ca <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40ca:	4770      	bx	lr

000d40cc <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d40cc:	3010      	adds	r0, #16
   d40ce:	f000 bcd5 	b.w	d4a7c <_ZN7FatFile5writeEPKvj>
	...

000d40d4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40d6:	4602      	mov	r2, r0
   d40d8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40da:	7913      	ldrb	r3, [r2, #4]
   d40dc:	6895      	ldr	r5, [r2, #8]
   d40de:	b133      	cbz	r3, d40ee <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40e0:	b93d      	cbnz	r5, d40f2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40e2:	490c      	ldr	r1, [pc, #48]	; (d4114 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40e4:	b004      	add	sp, #16
   d40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40ea:	f001 bc1d 	b.w	d5928 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40ee:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40f0:	e000      	b.n	d40f4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40f2:	4b0a      	ldr	r3, [pc, #40]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40f4:	7b16      	ldrb	r6, [r2, #12]
   d40f6:	4c0a      	ldr	r4, [pc, #40]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40f8:	490a      	ldr	r1, [pc, #40]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40fa:	7b52      	ldrb	r2, [r2, #13]
   d40fc:	9202      	str	r2, [sp, #8]
   d40fe:	2e01      	cmp	r6, #1
   d4100:	bf08      	it	eq
   d4102:	4621      	moveq	r1, r4
   d4104:	9101      	str	r1, [sp, #4]
   d4106:	9500      	str	r5, [sp, #0]
   d4108:	4a07      	ldr	r2, [pc, #28]	; (d4128 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d410a:	2100      	movs	r1, #0
   d410c:	f001 fc49 	bl	d59a2 <_ZN5Print11printf_implEbPKcz>
  }
   d4110:	b004      	add	sp, #16
   d4112:	bd70      	pop	{r4, r5, r6, pc}
   d4114:	000d678b 	.word	0x000d678b
   d4118:	000d690b 	.word	0x000d690b
   d411c:	000d677a 	.word	0x000d677a
   d4120:	000d6783 	.word	0x000d6783
   d4124:	000d6787 	.word	0x000d6787
   d4128:	000d67a1 	.word	0x000d67a1

000d412c <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d412c:	b510      	push	{r4, lr}
   d412e:	2134      	movs	r1, #52	; 0x34
   d4130:	4604      	mov	r4, r0
   d4132:	f002 f94b 	bl	d63cc <_ZdlPvj>
   d4136:	4620      	mov	r0, r4
   d4138:	bd10      	pop	{r4, pc}

000d413a <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d413a:	3010      	adds	r0, #16
   d413c:	f000 bc68 	b.w	d4a10 <_ZN7FatFile4syncEv>

000d4140 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4140:	3010      	adds	r0, #16
   d4142:	f000 bc08 	b.w	d4956 <_ZN7FatFile4peekEv>

000d4146 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4146:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4148:	2201      	movs	r2, #1
   d414a:	f10d 0107 	add.w	r1, sp, #7
   d414e:	3010      	adds	r0, #16
   d4150:	f000 fb4e 	bl	d47f0 <_ZN7FatFile4readEPvj>
   d4154:	2801      	cmp	r0, #1
   d4156:	bf0c      	ite	eq
   d4158:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d415c:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d4160:	b003      	add	sp, #12
   d4162:	f85d fb04 	ldr.w	pc, [sp], #4

000d4166 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4166:	b510      	push	{r4, lr}
   d4168:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d416a:	6800      	ldr	r0, [r0, #0]
   d416c:	b108      	cbz	r0, d4172 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d416e:	f001 fa8b 	bl	d5688 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4172:	4620      	mov	r0, r4
   d4174:	bd10      	pop	{r4, pc}

000d4176 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4176:	b507      	push	{r0, r1, r2, lr}
   d4178:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d417a:	2201      	movs	r2, #1
   d417c:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4180:	3010      	adds	r0, #16
   d4182:	4619      	mov	r1, r3
   d4184:	f000 fc7a 	bl	d4a7c <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4188:	b003      	add	sp, #12
   d418a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4190 <setup>:
int demoBpin = D3; 
bool demoButtonState = false;
int caseSwitch;
bool run = false;

void setup() {
   d4190:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d4192:	f001 fdcf 	bl	d5d34 <_Z16_fetch_usbserialv>
  delay(100);
  pixel.begin();
   d4196:	4c0f      	ldr	r4, [pc, #60]	; (d41d4 <setup+0x44>)
bool demoButtonState = false;
int caseSwitch;
bool run = false;

void setup() {
  Serial.begin(9600);
   d4198:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d419c:	f001 fdbe 	bl	d5d1c <_ZN9USBSerial5beginEl>
  delay(100);
   d41a0:	2064      	movs	r0, #100	; 0x64
   d41a2:	f001 fc4b 	bl	d5a3c <delay>
  pixel.begin();
   d41a6:	4620      	mov	r0, r4
   d41a8:	f000 f90b 	bl	d43c2 <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.show();
   d41ac:	4620      	mov	r0, r4
   d41ae:	f000 f93f 	bl	d4430 <_ZN17Adafruit_NeoPixel4showEv>
  pinMode(demoBpin, INPUT_PULLDOWN);
   d41b2:	4b09      	ldr	r3, [pc, #36]	; (d41d8 <setup+0x48>)
   d41b4:	2103      	movs	r1, #3
   d41b6:	8818      	ldrh	r0, [r3, #0]
   d41b8:	f002 f87c 	bl	d62b4 <pinMode>
  if(!myDFP.begin(Serial1)){
    Serial.println("DFPlayer init failed");
    while(true);
  }
  */
  Serial.println("DFPlayer init");
   d41bc:	f001 fdba 	bl	d5d34 <_Z16_fetch_usbserialv>
   d41c0:	4906      	ldr	r1, [pc, #24]	; (d41dc <setup+0x4c>)
   d41c2:	f001 fbc4 	bl	d594e <_ZN5Print7printlnEPKc>
  Serial.println("Initialization finished");
   d41c6:	f001 fdb5 	bl	d5d34 <_Z16_fetch_usbserialv>
   d41ca:	4905      	ldr	r1, [pc, #20]	; (d41e0 <setup+0x50>)
  //attachInterrupt(demoBpin, enableButton, RISING);

}
   d41cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("DFPlayer init failed");
    while(true);
  }
  */
  Serial.println("DFPlayer init");
  Serial.println("Initialization finished");
   d41d0:	f001 bbbd 	b.w	d594e <_ZN5Print7printlnEPKc>
   d41d4:	2003e3b4 	.word	0x2003e3b4
   d41d8:	2003de48 	.word	0x2003de48
   d41dc:	000d67bf 	.word	0x000d67bf
   d41e0:	000d67cd 	.word	0x000d67cd

000d41e4 <loop>:
  //attachInterrupt(demoBpin, enableButton, RISING);

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d41e4:	b538      	push	{r3, r4, r5, lr}
  // The core of your code will likely live here.
  demoButtonState = digitalRead(demoBpin);
   d41e6:	4b16      	ldr	r3, [pc, #88]	; (d4240 <loop+0x5c>)
   d41e8:	4c16      	ldr	r4, [pc, #88]	; (d4244 <loop+0x60>)
   d41ea:	8818      	ldrh	r0, [r3, #0]
   d41ec:	f002 f88c 	bl	d6308 <digitalRead>
   d41f0:	4b15      	ldr	r3, [pc, #84]	; (d4248 <loop+0x64>)
   d41f2:	2800      	cmp	r0, #0
   d41f4:	bf14      	ite	ne
   d41f6:	2201      	movne	r2, #1
   d41f8:	2200      	moveq	r2, #0
   d41fa:	701a      	strb	r2, [r3, #0]
  if(demoButtonState){
   d41fc:	d00a      	beq.n	d4214 <loop+0x30>
    //for(caseSwitch=0;caseSwitch<5;caseSwitch++);
    caseSwitch++;
   d41fe:	6823      	ldr	r3, [r4, #0]
   d4200:	3301      	adds	r3, #1
    if(caseSwitch>4){
   d4202:	2b04      	cmp	r3, #4
   d4204:	dc01      	bgt.n	d420a <loop+0x26>
void loop() {
  // The core of your code will likely live here.
  demoButtonState = digitalRead(demoBpin);
  if(demoButtonState){
    //for(caseSwitch=0;caseSwitch<5;caseSwitch++);
    caseSwitch++;
   d4206:	6023      	str	r3, [r4, #0]
   d4208:	e004      	b.n	d4214 <loop+0x30>
    if(caseSwitch>4){
     caseSwitch=1;//maybe 1 since first case is enum as 1
   d420a:	2301      	movs	r3, #1
     delay(100);
   d420c:	2064      	movs	r0, #100	; 0x64
  demoButtonState = digitalRead(demoBpin);
  if(demoButtonState){
    //for(caseSwitch=0;caseSwitch<5;caseSwitch++);
    caseSwitch++;
    if(caseSwitch>4){
     caseSwitch=1;//maybe 1 since first case is enum as 1
   d420e:	6023      	str	r3, [r4, #0]
     delay(100);
   d4210:	f001 fc14 	bl	d5a3c <delay>
    }
  }
  Serial.println(caseSwitch);
   d4214:	f001 fd8e 	bl	d5d34 <_Z16_fetch_usbserialv>
   d4218:	6824      	ldr	r4, [r4, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d421a:	2c00      	cmp	r4, #0
   d421c:	4605      	mov	r5, r0
   d421e:	da04      	bge.n	d422a <loop+0x46>
            t = print('-');
   d4220:	212d      	movs	r1, #45	; 0x2d
   d4222:	f001 fb85 	bl	d5930 <_ZN5Print5printEc>
            val = -n;
   d4226:	4261      	negs	r1, r4
   d4228:	e000      	b.n	d422c <loop+0x48>
        } else {
            val = n;
   d422a:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d422c:	4628      	mov	r0, r5
   d422e:	220a      	movs	r2, #10
   d4230:	f001 fb97 	bl	d5962 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4234:	4628      	mov	r0, r5
          Serial.println("High danger write error.");
        }
      break;  
  }
  */
}
   d4236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d423a:	f001 bb7c 	b.w	d5936 <_ZN5Print7printlnEv>
   d423e:	bf00      	nop
   d4240:	2003de48 	.word	0x2003de48
   d4244:	2003dec4 	.word	0x2003dec4
   d4248:	2003e3c8 	.word	0x2003e3c8

000d424c <_GLOBAL__sub_I_SystemMode>:
  //demoButtonState = true;
  caseSwitch++;
  if(caseSwitch>4){
    caseSwitch = 1;
  }
   d424c:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d424e:	4d37      	ldr	r5, [pc, #220]	; (d432c <_GLOBAL__sub_I_SystemMode+0xe0>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4250:	4e37      	ldr	r6, [pc, #220]	; (d4330 <_GLOBAL__sub_I_SystemMode+0xe4>)
   d4252:	2400      	movs	r4, #0

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4254:	f001 f81c 	bl	d5290 <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4258:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d425c:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d425e:	602c      	str	r4, [r5, #0]
   d4260:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4262:	71ac      	strb	r4, [r5, #6]
   d4264:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4266:	2002      	movs	r0, #2
   d4268:	f001 f982 	bl	d5570 <set_system_mode>
 * Project Demonstration
 * Description:
 * Author:
 * Date:
 */
SYSTEM_MODE(SEMI_AUTOMATIC)
   d426c:	4a31      	ldr	r2, [pc, #196]	; (d4334 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d426e:	4932      	ldr	r1, [pc, #200]	; (d4338 <_GLOBAL__sub_I_SystemMode+0xec>)
   d4270:	4628      	mov	r0, r5
   d4272:	f002 f89d 	bl	d63b0 <__aeabi_atexit>
#include <DFRobotDFPlayerMini.h>

  #define PIXEL_PIN A1
  #define PIXEL_COUNT 2
  #define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixel(PIXEL_COUNT,PIXEL_PIN,PIXEL_TYPE);
   d4276:	2302      	movs	r3, #2
   d4278:	4619      	mov	r1, r3
   d427a:	2212      	movs	r2, #18
   d427c:	482f      	ldr	r0, [pc, #188]	; (d433c <_GLOBAL__sub_I_SystemMode+0xf0>)
   d427e:	f000 f8c5 	bl	d440c <_ZN17Adafruit_NeoPixelC1Ethh>
   d4282:	4a2c      	ldr	r2, [pc, #176]	; (d4334 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d4284:	492e      	ldr	r1, [pc, #184]	; (d4340 <_GLOBAL__sub_I_SystemMode+0xf4>)
   d4286:	482d      	ldr	r0, [pc, #180]	; (d433c <_GLOBAL__sub_I_SystemMode+0xf0>)
   d4288:	f002 f892 	bl	d63b0 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d428c:	4b2d      	ldr	r3, [pc, #180]	; (d4344 <_GLOBAL__sub_I_SystemMode+0xf8>)
   d428e:	6831      	ldr	r1, [r6, #0]
   d4290:	71dc      	strb	r4, [r3, #7]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4292:	2264      	movs	r2, #100	; 0x64
   d4294:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4298:	4a2b      	ldr	r2, [pc, #172]	; (d4348 <_GLOBAL__sub_I_SystemMode+0xfc>)
   d429a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d429e:	2201      	movs	r2, #1
   d42a0:	ea11 0502 	ands.w	r5, r1, r2
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d42a4:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d42a8:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d42ac:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d42b0:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d42b4:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d42b8:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d42bc:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
   d42c0:	461c      	mov	r4, r3
   d42c2:	d10a      	bne.n	d42da <_GLOBAL__sub_I_SystemMode+0x8e>
   d42c4:	4630      	mov	r0, r6
   d42c6:	f7ff feea 	bl	d409e <__cxa_guard_acquire>
   d42ca:	b130      	cbz	r0, d42da <_GLOBAL__sub_I_SystemMode+0x8e>
   d42cc:	4629      	mov	r1, r5
   d42ce:	481f      	ldr	r0, [pc, #124]	; (d434c <_GLOBAL__sub_I_SystemMode+0x100>)
   d42d0:	f001 fa2e 	bl	d5730 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d42d4:	4630      	mov	r0, r6
   d42d6:	f7ff fee7 	bl	d40a8 <__cxa_guard_release>
   d42da:	481d      	ldr	r0, [pc, #116]	; (d4350 <_GLOBAL__sub_I_SystemMode+0x104>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d42dc:	4b1b      	ldr	r3, [pc, #108]	; (d434c <_GLOBAL__sub_I_SystemMode+0x100>)
   d42de:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d42e2:	2400      	movs	r4, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d42e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d42e8:	6083      	str	r3, [r0, #8]
};

/*      for SD logging        */
int i;
SdFat SD;
File file;
   d42ea:	4a12      	ldr	r2, [pc, #72]	; (d4334 <_GLOBAL__sub_I_SystemMode+0xe8>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
   d42ec:	4b19      	ldr	r3, [pc, #100]	; (d4354 <_GLOBAL__sub_I_SystemMode+0x108>)
   d42ee:	491a      	ldr	r1, [pc, #104]	; (d4358 <_GLOBAL__sub_I_SystemMode+0x10c>)
   d42f0:	7404      	strb	r4, [r0, #16]
   d42f2:	7444      	strb	r4, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d42f4:	6044      	str	r4, [r0, #4]
   d42f6:	6003      	str	r3, [r0, #0]
   d42f8:	f002 f85a 	bl	d63b0 <__aeabi_atexit>
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
   d42fc:	4b17      	ldr	r3, [pc, #92]	; (d435c <_GLOBAL__sub_I_SystemMode+0x110>)
   d42fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d4302:	609a      	str	r2, [r3, #8]
   d4304:	4a16      	ldr	r2, [pc, #88]	; (d4360 <_GLOBAL__sub_I_SystemMode+0x114>)
   d4306:	f883 4020 	strb.w	r4, [r3, #32]
   d430a:	6811      	ldr	r1, [r2, #0]
   d430c:	f8c3 1016 	str.w	r1, [r3, #22]
   d4310:	6851      	ldr	r1, [r2, #4]
   d4312:	8912      	ldrh	r2, [r2, #8]
   d4314:	83da      	strh	r2, [r3, #30]
   d4316:	2202      	movs	r2, #2
   d4318:	f8c3 101a 	str.w	r1, [r3, #26]
   d431c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   d4320:	f883 4026 	strb.w	r4, [r3, #38]	; 0x26
   d4324:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
   d4328:	bd70      	pop	{r4, r5, r6, pc}
   d432a:	bf00      	nop
   d432c:	2003e374 	.word	0x2003e374
   d4330:	2003deb8 	.word	0x2003deb8
   d4334:	2003deb4 	.word	0x2003deb4
   d4338:	000d4167 	.word	0x000d4167
   d433c:	2003e3b4 	.word	0x2003e3b4
   d4340:	000d436d 	.word	0x000d436d
   d4344:	2003dec8 	.word	0x2003dec8
   d4348:	000d6744 	.word	0x000d6744
   d434c:	2003debc 	.word	0x2003debc
   d4350:	2003e380 	.word	0x2003e380
   d4354:	000d6750 	.word	0x000d6750
   d4358:	000d40cb 	.word	0x000d40cb
   d435c:	2003e34c 	.word	0x2003e34c
   d4360:	000d6770 	.word	0x000d6770

000d4364 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4364:	f001 b814 	b.w	d5390 <HAL_Timer_Get_Micro_Seconds>

000d4368 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4368:	f001 b80a 	b.w	d5380 <HAL_Delay_Microseconds>

000d436c <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d436c:	b510      	push	{r4, lr}
   d436e:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4370:	68c0      	ldr	r0, [r0, #12]
   d4372:	b108      	cbz	r0, d4378 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4374:	f001 f988 	bl	d5688 <free>
  if (begun) pinMode(pin, INPUT);
   d4378:	7823      	ldrb	r3, [r4, #0]
   d437a:	b11b      	cbz	r3, d4384 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d437c:	2100      	movs	r1, #0
   d437e:	79e0      	ldrb	r0, [r4, #7]
   d4380:	f001 ff98 	bl	d62b4 <pinMode>
}
   d4384:	4620      	mov	r0, r4
   d4386:	bd10      	pop	{r4, pc}

000d4388 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4388:	b538      	push	{r3, r4, r5, lr}
   d438a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d438c:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d438e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4390:	b108      	cbz	r0, d4396 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4392:	f001 f979 	bl	d5688 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4396:	79a3      	ldrb	r3, [r4, #6]
   d4398:	2b06      	cmp	r3, #6
   d439a:	bf0c      	ite	eq
   d439c:	2004      	moveq	r0, #4
   d439e:	2003      	movne	r0, #3
   d43a0:	fb10 f005 	smulbb	r0, r0, r5
   d43a4:	b280      	uxth	r0, r0
   d43a6:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d43a8:	f001 f966 	bl	d5678 <malloc>
   d43ac:	60e0      	str	r0, [r4, #12]
   d43ae:	b128      	cbz	r0, d43bc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d43b0:	88a2      	ldrh	r2, [r4, #4]
   d43b2:	2100      	movs	r1, #0
   d43b4:	f002 f97f 	bl	d66b6 <memset>
    numLEDs = n;
   d43b8:	8065      	strh	r5, [r4, #2]
   d43ba:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d43bc:	80a0      	strh	r0, [r4, #4]
   d43be:	8060      	strh	r0, [r4, #2]
   d43c0:	bd38      	pop	{r3, r4, r5, pc}

000d43c2 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d43c2:	b510      	push	{r4, lr}
   d43c4:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d43c6:	2101      	movs	r1, #1
   d43c8:	79c0      	ldrb	r0, [r0, #7]
   d43ca:	f001 ff73 	bl	d62b4 <pinMode>
  digitalWrite(pin, LOW);
   d43ce:	2100      	movs	r1, #0
   d43d0:	79e0      	ldrb	r0, [r4, #7]
   d43d2:	f001 ff80 	bl	d62d6 <digitalWrite>
  begun = true;
   d43d6:	2301      	movs	r3, #1
   d43d8:	7023      	strb	r3, [r4, #0]
   d43da:	bd10      	pop	{r4, pc}

000d43dc <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d43dc:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d43de:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d43e0:	4605      	mov	r5, r0
   d43e2:	460c      	mov	r4, r1
    if (begun) {
   d43e4:	b11b      	cbz	r3, d43ee <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d43e6:	2100      	movs	r1, #0
   d43e8:	79c0      	ldrb	r0, [r0, #7]
   d43ea:	f001 ff63 	bl	d62b4 <pinMode>
    }
    pin = p;
    if (begun) {
   d43ee:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d43f0:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d43f2:	b153      	cbz	r3, d440a <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d43f4:	b2a4      	uxth	r4, r4
   d43f6:	4620      	mov	r0, r4
   d43f8:	2101      	movs	r1, #1
   d43fa:	f001 ff5b 	bl	d62b4 <pinMode>
        digitalWrite(p, LOW);
   d43fe:	4620      	mov	r0, r4
   d4400:	2100      	movs	r1, #0
    }
}
   d4402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d4406:	f001 bf66 	b.w	d62d6 <digitalWrite>
   d440a:	bd38      	pop	{r3, r4, r5, pc}

000d440c <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d440c:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d440e:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4410:	4604      	mov	r4, r0
   d4412:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4414:	7183      	strb	r3, [r0, #6]
   d4416:	7005      	strb	r5, [r0, #0]
   d4418:	7205      	strb	r5, [r0, #8]
   d441a:	60c5      	str	r5, [r0, #12]
   d441c:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d441e:	f7ff ffb3 	bl	d4388 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4422:	4620      	mov	r0, r4
   d4424:	4631      	mov	r1, r6
   d4426:	f7ff ffd9 	bl	d43dc <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d442a:	4620      	mov	r0, r4
   d442c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4430 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4430:	68c3      	ldr	r3, [r0, #12]
   d4432:	2b00      	cmp	r3, #0
   d4434:	f000 818b 	beq.w	d474e <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d4438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d443c:	7983      	ldrb	r3, [r0, #6]
   d443e:	3b02      	subs	r3, #2
   d4440:	b2db      	uxtb	r3, r3
   d4442:	2b04      	cmp	r3, #4
   d4444:	bf9c      	itt	ls
   d4446:	4ac4      	ldrls	r2, [pc, #784]	; (d4758 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d4448:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d444c:	b087      	sub	sp, #28
   d444e:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4450:	bf88      	it	hi
   d4452:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4454:	f7ff ff86 	bl	d4364 <micros>
   d4458:	692b      	ldr	r3, [r5, #16]
   d445a:	1ac0      	subs	r0, r0, r3
   d445c:	42a0      	cmp	r0, r4
   d445e:	d3f9      	bcc.n	d4454 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4460:	4abe      	ldr	r2, [pc, #760]	; (d475c <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4462:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4464:	ca07      	ldmia	r2, {r0, r1, r2}
   d4466:	ac06      	add	r4, sp, #24
   d4468:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d446c:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d446e:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4470:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4474:	3304      	adds	r3, #4
   d4476:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4478:	b922      	cbnz	r2, d4484 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d447a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d447e:	2b00      	cmp	r3, #0
   d4480:	f2c0 8155 	blt.w	d472e <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d4484:	9c04      	ldr	r4, [sp, #16]
   d4486:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d448a:	b923      	cbnz	r3, d4496 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d448c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4490:	2b00      	cmp	r3, #0
   d4492:	f2c0 813c 	blt.w	d470e <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d4496:	9c05      	ldr	r4, [sp, #20]
   d4498:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d449c:	b91b      	cbnz	r3, d44a6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d449e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d44a2:	2b00      	cmp	r3, #0
   d44a4:	db6e      	blt.n	d4584 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d44a6:	4bae      	ldr	r3, [pc, #696]	; (d4760 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d44a8:	79ea      	ldrb	r2, [r5, #7]
   d44aa:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d44ac:	4cad      	ldr	r4, [pc, #692]	; (d4764 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d44ae:	49ae      	ldr	r1, [pc, #696]	; (d4768 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d44b0:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d44b2:	0112      	lsls	r2, r2, #4
   d44b4:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d44b6:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d44ba:	785b      	ldrb	r3, [r3, #1]
   d44bc:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d44be:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d44c0:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d44c2:	f003 031f 	and.w	r3, r3, #31
   d44c6:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d44ca:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d44cc:	433a      	orrs	r2, r7
   d44ce:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d44d0:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d44d2:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d44d4:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d44d8:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d44dc:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d44de:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d44e0:	2800      	cmp	r0, #0
   d44e2:	d044      	beq.n	d456e <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d44e4:	46cc      	mov	ip, r9
   d44e6:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d44e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d44ec:	f81c eb01 	ldrb.w	lr, [ip], #1
   d44f0:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d44f2:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d44f4:	6863      	ldr	r3, [r4, #4]
   d44f6:	1a9b      	subs	r3, r3, r2
   d44f8:	2b46      	cmp	r3, #70	; 0x46
   d44fa:	d9fb      	bls.n	d44f4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d44fc:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d4500:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4504:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4508:	ea43 0307 	orr.w	r3, r3, r7
   d450c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4510:	d02f      	beq.n	d4572 <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4512:	6863      	ldr	r3, [r4, #4]
   d4514:	1a9b      	subs	r3, r3, r2
   d4516:	2b28      	cmp	r3, #40	; 0x28
   d4518:	d9fb      	bls.n	d4512 <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d451a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d451e:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4520:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4524:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4528:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d452c:	d1e2      	bne.n	d44f4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d452e:	ebc9 030c 	rsb	r3, r9, ip
   d4532:	88a8      	ldrh	r0, [r5, #4]
   d4534:	b29b      	uxth	r3, r3
   d4536:	4298      	cmp	r0, r3
   d4538:	d8d8      	bhi.n	d44ec <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d453a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d453e:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4542:	6863      	ldr	r3, [r4, #4]
   d4544:	1a9b      	subs	r3, r3, r2
   d4546:	2b46      	cmp	r3, #70	; 0x46
   d4548:	d9fb      	bls.n	d4542 <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d454a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d454e:	ebca 0a03 	rsb	sl, sl, r3
   d4552:	4582      	cmp	sl, r0
   d4554:	f0c0 80d5 	bcc.w	d4702 <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4558:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d455c:	f7ff ff04 	bl	d4368 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4560:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4562:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4566:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d456a:	2800      	cmp	r0, #0
   d456c:	d1ba      	bne.n	d44e4 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d456e:	4602      	mov	r2, r0
   d4570:	e7e7      	b.n	d4542 <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4572:	6863      	ldr	r3, [r4, #4]
   d4574:	1a9b      	subs	r3, r3, r2
   d4576:	2b11      	cmp	r3, #17
   d4578:	d8cf      	bhi.n	d451a <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d457a:	6863      	ldr	r3, [r4, #4]
   d457c:	1a9b      	subs	r3, r3, r2
   d457e:	2b11      	cmp	r3, #17
   d4580:	d9f7      	bls.n	d4572 <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d4582:	e7ca      	b.n	d451a <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4584:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4588:	2b00      	cmp	r3, #0
   d458a:	da8c      	bge.n	d44a6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d458c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4590:	2b00      	cmp	r3, #0
   d4592:	da88      	bge.n	d44a6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4594:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4598:	2b00      	cmp	r3, #0
   d459a:	da84      	bge.n	d44a6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d459c:	9801      	ldr	r0, [sp, #4]
   d459e:	f001 f86b 	bl	d5678 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d45a2:	2800      	cmp	r0, #0
   d45a4:	f43f af7f 	beq.w	d44a6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d45a8:	88ab      	ldrh	r3, [r5, #4]
   d45aa:	2b00      	cmp	r3, #0
   d45ac:	f000 80d0 	beq.w	d4750 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d45b0:	2700      	movs	r7, #0
   d45b2:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d45b4:	4e6d      	ldr	r6, [pc, #436]	; (d476c <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d45b6:	496e      	ldr	r1, [pc, #440]	; (d4770 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d45b8:	e000      	b.n	d45bc <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d45ba:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d45bc:	68ea      	ldr	r2, [r5, #12]
   d45be:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d45c0:	f103 0e01 	add.w	lr, r3, #1
   d45c4:	f012 0f80 	tst.w	r2, #128	; 0x80
   d45c8:	bf14      	ite	ne
   d45ca:	46b0      	movne	r8, r6
   d45cc:	4688      	moveq	r8, r1
   d45ce:	fa1f fe8e 	uxth.w	lr, lr
   d45d2:	f012 0f40 	tst.w	r2, #64	; 0x40
   d45d6:	bf14      	ite	ne
   d45d8:	46b1      	movne	r9, r6
   d45da:	4689      	moveq	r9, r1
   d45dc:	f012 0f20 	tst.w	r2, #32
   d45e0:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d45e4:	bf18      	it	ne
   d45e6:	46b2      	movne	sl, r6
   d45e8:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d45ec:	bf08      	it	eq
   d45ee:	468a      	moveq	sl, r1
   d45f0:	f103 0802 	add.w	r8, r3, #2
   d45f4:	f012 0f10 	tst.w	r2, #16
   d45f8:	f103 0e03 	add.w	lr, r3, #3
   d45fc:	bf14      	ite	ne
   d45fe:	46b4      	movne	ip, r6
   d4600:	468c      	moveq	ip, r1
   d4602:	fa1f f888 	uxth.w	r8, r8
   d4606:	f012 0f08 	tst.w	r2, #8
   d460a:	fa1f fe8e 	uxth.w	lr, lr
   d460e:	f103 0904 	add.w	r9, r3, #4
   d4612:	fa1f f989 	uxth.w	r9, r9
   d4616:	bf14      	ite	ne
   d4618:	46b3      	movne	fp, r6
   d461a:	468b      	moveq	fp, r1
   d461c:	f012 0f04 	tst.w	r2, #4
   d4620:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4624:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d4628:	bf14      	ite	ne
   d462a:	46b2      	movne	sl, r6
   d462c:	468a      	moveq	sl, r1
   d462e:	f103 0805 	add.w	r8, r3, #5
   d4632:	f012 0f02 	tst.w	r2, #2
   d4636:	f103 0c06 	add.w	ip, r3, #6
   d463a:	f103 0e07 	add.w	lr, r3, #7
   d463e:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d4642:	fa1f fe8e 	uxth.w	lr, lr
   d4646:	bf14      	ite	ne
   d4648:	46b1      	movne	r9, r6
   d464a:	4689      	moveq	r9, r1
   d464c:	fa1f f888 	uxth.w	r8, r8
   d4650:	f012 0f01 	tst.w	r2, #1
   d4654:	fa1f fc8c 	uxth.w	ip, ip
   d4658:	bf14      	ite	ne
   d465a:	4632      	movne	r2, r6
   d465c:	460a      	moveq	r2, r1
   d465e:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4662:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d4666:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d466a:	3701      	adds	r7, #1
   d466c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4670:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4672:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4676:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4678:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d467a:	d89e      	bhi.n	d45ba <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d467c:	f103 0209 	add.w	r2, r3, #9
   d4680:	330a      	adds	r3, #10
   d4682:	b292      	uxth	r2, r2
   d4684:	b29b      	uxth	r3, r3
   d4686:	0052      	lsls	r2, r2, #1
   d4688:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d468a:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d468c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4690:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4692:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4694:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4696:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4698:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d469a:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d469e:	4e30      	ldr	r6, [pc, #192]	; (d4760 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d46a0:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d46a4:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d46a8:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d46ac:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d46b0:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d46b4:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d46b8:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d46bc:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d46c0:	79eb      	ldrb	r3, [r5, #7]
   d46c2:	6831      	ldr	r1, [r6, #0]
   d46c4:	011b      	lsls	r3, r3, #4
   d46c6:	18ce      	adds	r6, r1, r3
   d46c8:	5cc9      	ldrb	r1, [r1, r3]
   d46ca:	7873      	ldrb	r3, [r6, #1]
   d46cc:	f003 031f 	and.w	r3, r3, #31
   d46d0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d46d4:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d46d6:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d46da:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d46de:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d46e2:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d46e4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d46e8:	2b00      	cmp	r3, #0
   d46ea:	d0fb      	beq.n	d46e4 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d46ec:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d46ee:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d46f2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d46f6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d46fa:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d46fe:	f000 ffc3 	bl	d5688 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4702:	f7ff fe2f 	bl	d4364 <micros>
   d4706:	6128      	str	r0, [r5, #16]
}
   d4708:	b007      	add	sp, #28
   d470a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d470e:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4712:	2b00      	cmp	r3, #0
   d4714:	f6bf aebf 	bge.w	d4496 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4718:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d471c:	2b00      	cmp	r3, #0
   d471e:	f6bf aeba 	bge.w	d4496 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4722:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4726:	2b00      	cmp	r3, #0
   d4728:	f6bf aeb5 	bge.w	d4496 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d472c:	e736      	b.n	d459c <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d472e:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4732:	2b00      	cmp	r3, #0
   d4734:	f6bf aea6 	bge.w	d4484 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4738:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d473c:	2b00      	cmp	r3, #0
   d473e:	f6bf aea1 	bge.w	d4484 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4742:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4746:	2b00      	cmp	r3, #0
   d4748:	f6bf ae9c 	bge.w	d4484 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d474c:	e726      	b.n	d459c <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d474e:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4750:	2304      	movs	r3, #4
   d4752:	2202      	movs	r2, #2
   d4754:	e799      	b.n	d468a <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d4756:	bf00      	nop
   d4758:	000d6814 	.word	0x000d6814
   d475c:	000d6808 	.word	0x000d6808
   d4760:	2003e3cc 	.word	0x2003e3cc
   d4764:	e000edf0 	.word	0xe000edf0
   d4768:	e0001000 	.word	0xe0001000
   d476c:	ffff800d 	.word	0xffff800d
   d4770:	ffff8006 	.word	0xffff8006

000d4774 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d4774:	b508      	push	{r3, lr}
   d4776:	f000 fd8b 	bl	d5290 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d477a:	f000 fd89 	bl	d5290 <HAL_Pin_Map>
   d477e:	4b01      	ldr	r3, [pc, #4]	; (d4784 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4780:	6018      	str	r0, [r3, #0]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	2003e3cc 	.word	0x2003e3cc

000d4788 <_GLOBAL__sub_I__ZN19DFRobotDFPlayerMini10setTimeOutEm>:
   d4788:	f000 bd82 	b.w	d5290 <HAL_Pin_Map>

000d478c <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d478c:	f000 bd80 	b.w	d5290 <HAL_Pin_Map>

000d4790 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d4790:	f000 bd7e 	b.w	d5290 <HAL_Pin_Map>

000d4794 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4794:	b510      	push	{r4, lr}
   d4796:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4798:	3024      	adds	r0, #36	; 0x24
   d479a:	f000 fa51 	bl	d4c40 <_ZN8FatCache4syncEv>
   d479e:	b128      	cbz	r0, d47ac <_ZN9FatVolume9cacheSyncEv+0x18>
   d47a0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d47a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d47a8:	f000 ba4a 	b.w	d4c40 <_ZN8FatCache4syncEv>
  }
   d47ac:	bd10      	pop	{r4, pc}

000d47ae <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d47ae:	f000 bd6f 	b.w	d5290 <HAL_Pin_Map>

000d47b2 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d47b2:	f000 bd6d 	b.w	d5290 <HAL_Pin_Map>

000d47b6 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d47b6:	f000 bd6b 	b.w	d5290 <HAL_Pin_Map>

000d47ba <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d47ba:	f000 bd69 	b.w	d5290 <HAL_Pin_Map>

000d47be <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d47be:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d47c0:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d47c2:	f043 0304 	orr.w	r3, r3, #4
   d47c6:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d47c8:	f100 0210 	add.w	r2, r0, #16
   d47cc:	6880      	ldr	r0, [r0, #8]
   d47ce:	f000 baed 	b.w	d4dac <_ZN9FatVolume15allocateClusterEmPm>

000d47d2 <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d47d2:	b510      	push	{r4, lr}
   d47d4:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d47d6:	6880      	ldr	r0, [r0, #8]
   d47d8:	460a      	mov	r2, r1
   d47da:	3024      	adds	r0, #36	; 0x24
   d47dc:	69a1      	ldr	r1, [r4, #24]
   d47de:	f000 fa56 	bl	d4c8e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d47e2:	b120      	cbz	r0, d47ee <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d47e4:	88a3      	ldrh	r3, [r4, #4]
   d47e6:	f003 030f 	and.w	r3, r3, #15
   d47ea:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d47ee:	bd10      	pop	{r4, pc}

000d47f0 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d47f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d47f4:	7803      	ldrb	r3, [r0, #0]
   d47f6:	4604      	mov	r4, r0
   d47f8:	4689      	mov	r9, r1
   d47fa:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d47fc:	b14b      	cbz	r3, d4812 <_ZN7FatFile4readEPvj+0x22>
   d47fe:	7882      	ldrb	r2, [r0, #2]
   d4800:	07d1      	lsls	r1, r2, #31
   d4802:	d506      	bpl.n	d4812 <_ZN7FatFile4readEPvj+0x22>
   d4804:	e00c      	b.n	d4820 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4806:	465a      	mov	r2, fp
   d4808:	6921      	ldr	r1, [r4, #16]
   d480a:	f000 fa6a 	bl	d4ce2 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d480e:	2800      	cmp	r0, #0
   d4810:	da3d      	bge.n	d488e <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d4812:	7863      	ldrb	r3, [r4, #1]
   d4814:	f043 0302 	orr.w	r3, r3, #2
   d4818:	7063      	strb	r3, [r4, #1]
  return -1;
   d481a:	f04f 30ff 	mov.w	r0, #4294967295
   d481e:	e097      	b.n	d4950 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d4820:	071a      	lsls	r2, r3, #28
   d4822:	d503      	bpl.n	d482c <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d4824:	69e3      	ldr	r3, [r4, #28]
   d4826:	6962      	ldr	r2, [r4, #20]
   d4828:	1a9b      	subs	r3, r3, r2
   d482a:	e007      	b.n	d483c <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d482c:	069a      	lsls	r2, r3, #26
   d482e:	d508      	bpl.n	d4842 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d4830:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d4832:	891a      	ldrh	r2, [r3, #8]
   d4834:	6963      	ldr	r3, [r4, #20]
   d4836:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d483a:	b29b      	uxth	r3, r3
   d483c:	429d      	cmp	r5, r3
   d483e:	bf28      	it	cs
   d4840:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d4842:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d4844:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4848:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d484c:	2e00      	cmp	r6, #0
   d484e:	d035      	beq.n	d48bc <_ZN7FatFile4readEPvj+0xcc>
   d4850:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4852:	6963      	ldr	r3, [r4, #20]
   d4854:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d4856:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d485a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d485e:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d4862:	d002      	beq.n	d486a <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d4864:	6a03      	ldr	r3, [r0, #32]
   d4866:	4419      	add	r1, r3
   d4868:	e01d      	b.n	d48a6 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d486a:	f890 8005 	ldrb.w	r8, [r0, #5]
   d486e:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d4872:	f1ba 0f00 	cmp.w	sl, #0
   d4876:	d110      	bne.n	d489a <_ZN7FatFile4readEPvj+0xaa>
   d4878:	f1b8 0f00 	cmp.w	r8, #0
   d487c:	d10d      	bne.n	d489a <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d487e:	2b00      	cmp	r3, #0
   d4880:	d1c1      	bne.n	d4806 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4882:	0653      	lsls	r3, r2, #25
   d4884:	bf4c      	ite	mi
   d4886:	6a03      	ldrmi	r3, [r0, #32]
   d4888:	6a23      	ldrpl	r3, [r4, #32]
   d488a:	6123      	str	r3, [r4, #16]
   d488c:	e005      	b.n	d489a <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d488e:	d104      	bne.n	d489a <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d4890:	7823      	ldrb	r3, [r4, #0]
   d4892:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4896:	d111      	bne.n	d48bc <_ZN7FatFile4readEPvj+0xcc>
   d4898:	e7bb      	b.n	d4812 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d489a:	6921      	ldr	r1, [r4, #16]
   d489c:	68a0      	ldr	r0, [r4, #8]
   d489e:	f000 fa1a 	bl	d4cd6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d48a2:	eb08 0100 	add.w	r1, r8, r0
   d48a6:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d48a8:	f1ba 0f00 	cmp.w	sl, #0
   d48ac:	d135      	bne.n	d491a <_ZN7FatFile4readEPvj+0x12a>
   d48ae:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d48b2:	d332      	bcc.n	d491a <_ZN7FatFile4readEPvj+0x12a>
   d48b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d48b6:	4299      	cmp	r1, r3
   d48b8:	d102      	bne.n	d48c0 <_ZN7FatFile4readEPvj+0xd0>
   d48ba:	e02e      	b.n	d491a <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d48bc:	1ba8      	subs	r0, r5, r6
   d48be:	e047      	b.n	d4950 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d48c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d48c4:	d31b      	bcc.n	d48fe <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d48c6:	7822      	ldrb	r2, [r4, #0]
   d48c8:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d48ca:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d48ce:	d406      	bmi.n	d48de <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d48d0:	7902      	ldrb	r2, [r0, #4]
   d48d2:	ebc8 0202 	rsb	r2, r8, r2
   d48d6:	b2d2      	uxtb	r2, r2
   d48d8:	4592      	cmp	sl, r2
   d48da:	bf28      	it	cs
   d48dc:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d48de:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d48e0:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d48e4:	d207      	bcs.n	d48f6 <_ZN7FatFile4readEPvj+0x106>
   d48e6:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d48e8:	4653      	mov	r3, sl
   d48ea:	464a      	mov	r2, r9
   d48ec:	6800      	ldr	r0, [r0, #0]
   d48ee:	f000 fba8 	bl	d5042 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d48f2:	b960      	cbnz	r0, d490e <_ZN7FatFile4readEPvj+0x11e>
   d48f4:	e78d      	b.n	d4812 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d48f6:	4453      	add	r3, sl
   d48f8:	4299      	cmp	r1, r3
   d48fa:	d321      	bcc.n	d4940 <_ZN7FatFile4readEPvj+0x150>
   d48fc:	e7f3      	b.n	d48e6 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d48fe:	464a      	mov	r2, r9
   d4900:	6800      	ldr	r0, [r0, #0]
   d4902:	f000 fb56 	bl	d4fb2 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d4906:	2800      	cmp	r0, #0
   d4908:	d083      	beq.n	d4812 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d490a:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d490e:	6963      	ldr	r3, [r4, #20]
   d4910:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d4912:	44b9      	add	r9, r7
    m_curPosition += n;
   d4914:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d4916:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4918:	e798      	b.n	d484c <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d491a:	2200      	movs	r2, #0
   d491c:	3024      	adds	r0, #36	; 0x24
   d491e:	f000 f9b6 	bl	d4c8e <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d4922:	2800      	cmp	r0, #0
   d4924:	f43f af75 	beq.w	d4812 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d4928:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d492c:	42b7      	cmp	r7, r6
   d492e:	bf28      	it	cs
   d4930:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d4932:	eb00 010a 	add.w	r1, r0, sl
   d4936:	463a      	mov	r2, r7
   d4938:	4648      	mov	r0, r9
   d493a:	f001 feb1 	bl	d66a0 <memcpy>
   d493e:	e7e6      	b.n	d490e <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4940:	3024      	adds	r0, #36	; 0x24
   d4942:	9101      	str	r1, [sp, #4]
   d4944:	f000 f97c 	bl	d4c40 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d4948:	9901      	ldr	r1, [sp, #4]
   d494a:	2800      	cmp	r0, #0
   d494c:	d1cb      	bne.n	d48e6 <_ZN7FatFile4readEPvj+0xf6>
   d494e:	e760      	b.n	d4812 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d4950:	b003      	add	sp, #12
   d4952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4956 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d4956:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4958:	2201      	movs	r2, #1
   d495a:	f10d 0107 	add.w	r1, sp, #7
   d495e:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d4960:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d4962:	6905      	ldr	r5, [r0, #16]
   d4964:	f7ff ff44 	bl	d47f0 <_ZN7FatFile4readEPvj>
   d4968:	2801      	cmp	r0, #1
   d496a:	bf05      	ittet	eq
   d496c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d4970:	6166      	streq	r6, [r4, #20]
   d4972:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d4976:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d4978:	b002      	add	sp, #8
   d497a:	bd70      	pop	{r4, r5, r6, pc}

000d497c <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4980:	460e      	mov	r6, r1
   d4982:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d4984:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4986:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d4988:	2900      	cmp	r1, #0
   d498a:	d039      	beq.n	d4a00 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d498c:	6945      	ldr	r5, [r0, #20]
   d498e:	42b5      	cmp	r5, r6
   d4990:	d03a      	beq.n	d4a08 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d4992:	b90e      	cbnz	r6, d4998 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d4994:	6106      	str	r6, [r0, #16]
    goto done;
   d4996:	e031      	b.n	d49fc <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d4998:	070b      	lsls	r3, r1, #28
   d499a:	d503      	bpl.n	d49a4 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d499c:	69c3      	ldr	r3, [r0, #28]
   d499e:	429e      	cmp	r6, r3
   d49a0:	d82e      	bhi.n	d4a00 <_ZN7FatFile7seekSetEm+0x84>
   d49a2:	e007      	b.n	d49b4 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d49a4:	0688      	lsls	r0, r1, #26
   d49a6:	d505      	bpl.n	d49b4 <_ZN7FatFile7seekSetEm+0x38>
   d49a8:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d49aa:	891b      	ldrh	r3, [r3, #8]
   d49ac:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d49b0:	d826      	bhi.n	d4a00 <_ZN7FatFile7seekSetEm+0x84>
   d49b2:	e023      	b.n	d49fc <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d49b4:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d49b8:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d49bc:	1e6a      	subs	r2, r5, #1
   d49be:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d49c2:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d49c4:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d49c6:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d49c8:	429a      	cmp	r2, r3
   d49ca:	d800      	bhi.n	d49ce <_ZN7FatFile7seekSetEm+0x52>
   d49cc:	b94d      	cbnz	r5, d49e2 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d49ce:	064a      	lsls	r2, r1, #25
   d49d0:	bf4c      	ite	mi
   d49d2:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d49d6:	6a22      	ldrpl	r2, [r4, #32]
   d49d8:	6122      	str	r2, [r4, #16]
   d49da:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d49dc:	f104 0810 	add.w	r8, r4, #16
   d49e0:	e00a      	b.n	d49f8 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d49e2:	1a9b      	subs	r3, r3, r2
   d49e4:	e7f9      	b.n	d49da <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d49e6:	4642      	mov	r2, r8
   d49e8:	6921      	ldr	r1, [r4, #16]
   d49ea:	68a0      	ldr	r0, [r4, #8]
   d49ec:	f000 f979 	bl	d4ce2 <_ZN9FatVolume6fatGetEmPm>
   d49f0:	2800      	cmp	r0, #0
   d49f2:	f105 35ff 	add.w	r5, r5, #4294967295
   d49f6:	dd03      	ble.n	d4a00 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d49f8:	2d00      	cmp	r5, #0
   d49fa:	d1f4      	bne.n	d49e6 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d49fc:	6166      	str	r6, [r4, #20]
   d49fe:	e003      	b.n	d4a08 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d4a00:	6127      	str	r7, [r4, #16]
  return false;
   d4a02:	2000      	movs	r0, #0
   d4a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d4a08:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d4a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4a10 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4a10:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d4a12:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4a14:	4604      	mov	r4, r0
  if (!isOpen()) {
   d4a16:	b90b      	cbnz	r3, d4a1c <_ZN7FatFile4syncEv+0xc>
    return true;
   d4a18:	2001      	movs	r0, #1
   d4a1a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d4a1c:	7883      	ldrb	r3, [r0, #2]
   d4a1e:	075a      	lsls	r2, r3, #29
   d4a20:	d523      	bpl.n	d4a6a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d4a22:	2101      	movs	r1, #1
   d4a24:	f7ff fed5 	bl	d47d2 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4a28:	4605      	mov	r5, r0
   d4a2a:	b928      	cbnz	r0, d4a38 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d4a2c:	7863      	ldrb	r3, [r4, #1]
   d4a2e:	f043 0301 	orr.w	r3, r3, #1
   d4a32:	7063      	strb	r3, [r4, #1]
  return false;
   d4a34:	2000      	movs	r0, #0
   d4a36:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4a38:	7803      	ldrb	r3, [r0, #0]
   d4a3a:	2be5      	cmp	r3, #229	; 0xe5
   d4a3c:	d0f6      	beq.n	d4a2c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d4a3e:	7823      	ldrb	r3, [r4, #0]
   d4a40:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d4a42:	bf44      	itt	mi
   d4a44:	69e3      	ldrmi	r3, [r4, #28]
   d4a46:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d4a48:	8c23      	ldrh	r3, [r4, #32]
   d4a4a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d4a4c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4a4e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d4a50:	4b09      	ldr	r3, [pc, #36]	; (d4a78 <_ZN7FatFile4syncEv+0x68>)
   d4a52:	681b      	ldr	r3, [r3, #0]
   d4a54:	b12b      	cbz	r3, d4a62 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d4a56:	f100 0116 	add.w	r1, r0, #22
   d4a5a:	3018      	adds	r0, #24
   d4a5c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d4a5e:	8b2b      	ldrh	r3, [r5, #24]
   d4a60:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d4a62:	78a3      	ldrb	r3, [r4, #2]
   d4a64:	f023 0304 	bic.w	r3, r3, #4
   d4a68:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d4a6a:	68a0      	ldr	r0, [r4, #8]
   d4a6c:	f7ff fe92 	bl	d4794 <_ZN9FatVolume9cacheSyncEv>
   d4a70:	2800      	cmp	r0, #0
   d4a72:	d0db      	beq.n	d4a2c <_ZN7FatFile4syncEv+0x1c>
   d4a74:	e7d0      	b.n	d4a18 <_ZN7FatFile4syncEv+0x8>
   d4a76:	bf00      	nop
   d4a78:	2003e3d0 	.word	0x2003e3d0

000d4a7c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4a80:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4a82:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4a84:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4a86:	4604      	mov	r4, r0
   d4a88:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4a8a:	d508      	bpl.n	d4a9e <_ZN7FatFile5writeEPKvj+0x22>
   d4a8c:	7883      	ldrb	r3, [r0, #2]
   d4a8e:	079a      	lsls	r2, r3, #30
   d4a90:	d505      	bpl.n	d4a9e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d4a92:	071b      	lsls	r3, r3, #28
   d4a94:	d50b      	bpl.n	d4aae <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d4a96:	69e1      	ldr	r1, [r4, #28]
   d4a98:	f7ff ff70 	bl	d497c <_ZN7FatFile7seekSetEm>
   d4a9c:	b938      	cbnz	r0, d4aae <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d4a9e:	7863      	ldrb	r3, [r4, #1]
   d4aa0:	f043 0301 	orr.w	r3, r3, #1
   d4aa4:	7063      	strb	r3, [r4, #1]
  return -1;
   d4aa6:	f04f 30ff 	mov.w	r0, #4294967295
   d4aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d4aae:	6963      	ldr	r3, [r4, #20]
   d4ab0:	43db      	mvns	r3, r3
   d4ab2:	4598      	cmp	r8, r3
   d4ab4:	d8f3      	bhi.n	d4a9e <_ZN7FatFile5writeEPKvj+0x22>
   d4ab6:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4ab8:	f04f 0a00 	mov.w	sl, #0
   d4abc:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4abe:	2e00      	cmp	r6, #0
   d4ac0:	f000 8081 	beq.w	d4bc6 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d4ac4:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4ac6:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4ac8:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d4acc:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4ad0:	d11c      	bne.n	d4b0c <_ZN7FatFile5writeEPKvj+0x90>
   d4ad2:	b9df      	cbnz	r7, d4b0c <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d4ad4:	6921      	ldr	r1, [r4, #16]
   d4ad6:	b171      	cbz	r1, d4af6 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4ad8:	f104 0210 	add.w	r2, r4, #16
   d4adc:	f000 f901 	bl	d4ce2 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d4ae0:	2800      	cmp	r0, #0
   d4ae2:	dbdc      	blt.n	d4a9e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d4ae4:	f040 808e 	bne.w	d4c04 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d4ae8:	4620      	mov	r0, r4
   d4aea:	f7ff fe68 	bl	d47be <_ZN7FatFile10addClusterEv>
   d4aee:	2800      	cmp	r0, #0
   d4af0:	f040 8088 	bne.w	d4c04 <_ZN7FatFile5writeEPKvj+0x188>
   d4af4:	e7d3      	b.n	d4a9e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d4af6:	6a23      	ldr	r3, [r4, #32]
   d4af8:	b93b      	cbnz	r3, d4b0a <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d4afa:	4620      	mov	r0, r4
   d4afc:	f7ff fe5f 	bl	d47be <_ZN7FatFile10addClusterEv>
   d4b00:	2800      	cmp	r0, #0
   d4b02:	d0cc      	beq.n	d4a9e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d4b04:	6923      	ldr	r3, [r4, #16]
   d4b06:	6223      	str	r3, [r4, #32]
   d4b08:	e000      	b.n	d4b0c <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d4b0a:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4b0c:	6921      	ldr	r1, [r4, #16]
   d4b0e:	68a0      	ldr	r0, [r4, #8]
   d4b10:	f000 f8e1 	bl	d4cd6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4b14:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d4b16:	b917      	cbnz	r7, d4b1e <_ZN7FatFile5writeEPKvj+0xa2>
   d4b18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d4b1c:	d221      	bcs.n	d4b62 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d4b1e:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d4b22:	42b5      	cmp	r5, r6
   d4b24:	bf28      	it	cs
   d4b26:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d4b28:	b937      	cbnz	r7, d4b38 <_ZN7FatFile5writeEPKvj+0xbc>
   d4b2a:	6963      	ldr	r3, [r4, #20]
   d4b2c:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d4b2e:	4293      	cmp	r3, r2
   d4b30:	bf34      	ite	cc
   d4b32:	2201      	movcc	r2, #1
   d4b34:	2205      	movcs	r2, #5
   d4b36:	e000      	b.n	d4b3a <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d4b38:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4b3a:	68a0      	ldr	r0, [r4, #8]
   d4b3c:	3024      	adds	r0, #36	; 0x24
   d4b3e:	f000 f8a6 	bl	d4c8e <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d4b42:	2800      	cmp	r0, #0
   d4b44:	d0ab      	beq.n	d4a9e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4b46:	4438      	add	r0, r7
   d4b48:	462a      	mov	r2, r5
   d4b4a:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d4b4c:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4b4e:	f001 fda7 	bl	d66a0 <memcpy>
      if (512 == (n + blockOffset)) {
   d4b52:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d4b56:	d130      	bne.n	d4bba <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4b58:	68a0      	ldr	r0, [r4, #8]
   d4b5a:	3024      	adds	r0, #36	; 0x24
   d4b5c:	f000 f870 	bl	d4c40 <_ZN8FatCache4syncEv>
   d4b60:	e017      	b.n	d4b92 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d4b62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d4b66:	68a0      	ldr	r0, [r4, #8]
   d4b68:	d315      	bcc.n	d4b96 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d4b6a:	7902      	ldrb	r2, [r0, #4]
   d4b6c:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d4b6e:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d4b70:	b2d2      	uxtb	r2, r2
   d4b72:	4293      	cmp	r3, r2
   d4b74:	bf28      	it	cs
   d4b76:	4613      	movcs	r3, r2
   d4b78:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4b7a:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d4b7c:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4b80:	d302      	bcc.n	d4b88 <_ZN7FatFile5writeEPKvj+0x10c>
   d4b82:	441a      	add	r2, r3
   d4b84:	4291      	cmp	r1, r2
   d4b86:	d337      	bcc.n	d4bf8 <_ZN7FatFile5writeEPKvj+0x17c>
   d4b88:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d4b8a:	464a      	mov	r2, r9
   d4b8c:	6838      	ldr	r0, [r7, #0]
   d4b8e:	f000 fb0c 	bl	d51aa <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d4b92:	b990      	cbnz	r0, d4bba <_ZN7FatFile5writeEPKvj+0x13e>
   d4b94:	e783      	b.n	d4a9e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d4b96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4b98:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4b9a:	bf02      	ittt	eq
   d4b9c:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4ba0:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4ba4:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d4ba6:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4ba8:	464a      	mov	r2, r9
   d4baa:	6818      	ldr	r0, [r3, #0]
   d4bac:	f000 fa8b 	bl	d50c6 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d4bb0:	2800      	cmp	r0, #0
   d4bb2:	f43f af74 	beq.w	d4a9e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d4bb6:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d4bba:	6963      	ldr	r3, [r4, #20]
   d4bbc:	442b      	add	r3, r5
   d4bbe:	6163      	str	r3, [r4, #20]
    src += n;
   d4bc0:	44a9      	add	r9, r5
    nToWrite -= n;
   d4bc2:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4bc4:	e77a      	b.n	d4abc <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d4bc6:	69e2      	ldr	r2, [r4, #28]
   d4bc8:	4293      	cmp	r3, r2
   d4bca:	d901      	bls.n	d4bd0 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d4bcc:	61e3      	str	r3, [r4, #28]
   d4bce:	e002      	b.n	d4bd6 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d4bd0:	4b0f      	ldr	r3, [pc, #60]	; (d4c10 <_ZN7FatFile5writeEPKvj+0x194>)
   d4bd2:	681b      	ldr	r3, [r3, #0]
   d4bd4:	b11b      	cbz	r3, d4bde <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d4bd6:	78a3      	ldrb	r3, [r4, #2]
   d4bd8:	f043 0304 	orr.w	r3, r3, #4
   d4bdc:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d4bde:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d4be2:	2b00      	cmp	r3, #0
   d4be4:	db02      	blt.n	d4bec <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d4be6:	4640      	mov	r0, r8
   d4be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d4bec:	4620      	mov	r0, r4
   d4bee:	f7ff ff0f 	bl	d4a10 <_ZN7FatFile4syncEv>
   d4bf2:	2800      	cmp	r0, #0
   d4bf4:	d1f7      	bne.n	d4be6 <_ZN7FatFile5writeEPKvj+0x16a>
   d4bf6:	e752      	b.n	d4a9e <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4bf8:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4bfc:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4c00:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4c02:	e7c1      	b.n	d4b88 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4c04:	6921      	ldr	r1, [r4, #16]
   d4c06:	68a0      	ldr	r0, [r4, #8]
   d4c08:	f000 f865 	bl	d4cd6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4c0c:	4601      	mov	r1, r0
   d4c0e:	e783      	b.n	d4b18 <_ZN7FatFile5writeEPKvj+0x9c>
   d4c10:	2003e3d0 	.word	0x2003e3d0

000d4c14 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d4c14:	f000 bb3c 	b.w	d5290 <HAL_Pin_Map>

000d4c18 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4c18:	b570      	push	{r4, r5, r6, lr}
   d4c1a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4c1c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4c1e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4c20:	b149      	cbz	r1, d4c36 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4c22:	f001 fd79 	bl	d6718 <strlen>
   d4c26:	682b      	ldr	r3, [r5, #0]
   d4c28:	4602      	mov	r2, r0
   d4c2a:	4621      	mov	r1, r4
   d4c2c:	4628      	mov	r0, r5
   d4c2e:	68db      	ldr	r3, [r3, #12]
    }
   d4c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c34:	4718      	bx	r3
    }
   d4c36:	bd70      	pop	{r4, r5, r6, pc}

000d4c38 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d4c38:	f000 bb2a 	b.w	d5290 <HAL_Pin_Map>

000d4c3c <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d4c3c:	f000 bb28 	b.w	d5290 <HAL_Pin_Map>

000d4c40 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d4c40:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d4c42:	7803      	ldrb	r3, [r0, #0]
   d4c44:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d4c46:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d4c48:	d51e      	bpl.n	d4c88 <_ZN8FatCache4syncEv+0x48>
   d4c4a:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4c4c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d4c4e:	f100 060c 	add.w	r6, r0, #12
   d4c52:	4632      	mov	r2, r6
   d4c54:	6818      	ldr	r0, [r3, #0]
   d4c56:	f000 fa36 	bl	d50c6 <_ZN9SdSpiCard10writeBlockEmPKh>
   d4c5a:	4605      	mov	r5, r0
   d4c5c:	b908      	cbnz	r0, d4c62 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d4c5e:	2500      	movs	r5, #0
   d4c60:	e013      	b.n	d4c8a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d4c62:	7823      	ldrb	r3, [r4, #0]
   d4c64:	079b      	lsls	r3, r3, #30
   d4c66:	d404      	bmi.n	d4c72 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d4c68:	7823      	ldrb	r3, [r4, #0]
   d4c6a:	f023 0301 	bic.w	r3, r3, #1
   d4c6e:	7023      	strb	r3, [r4, #0]
   d4c70:	e00b      	b.n	d4c8a <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d4c72:	6863      	ldr	r3, [r4, #4]
   d4c74:	68a0      	ldr	r0, [r4, #8]
   d4c76:	6919      	ldr	r1, [r3, #16]
   d4c78:	4632      	mov	r2, r6
   d4c7a:	4401      	add	r1, r0
   d4c7c:	6818      	ldr	r0, [r3, #0]
   d4c7e:	f000 fa22 	bl	d50c6 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d4c82:	2800      	cmp	r0, #0
   d4c84:	d1f0      	bne.n	d4c68 <_ZN8FatCache4syncEv+0x28>
   d4c86:	e7ea      	b.n	d4c5e <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d4c88:	2501      	movs	r5, #1

fail:
  return false;
}
   d4c8a:	4628      	mov	r0, r5
   d4c8c:	bd70      	pop	{r4, r5, r6, pc}

000d4c8e <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d4c8e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d4c90:	6883      	ldr	r3, [r0, #8]
   d4c92:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d4c94:	4604      	mov	r4, r0
   d4c96:	460e      	mov	r6, r1
   d4c98:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d4c9a:	d014      	beq.n	d4cc6 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d4c9c:	f7ff ffd0 	bl	d4c40 <_ZN8FatCache4syncEv>
   d4ca0:	b908      	cbnz	r0, d4ca6 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d4ca2:	2000      	movs	r0, #0
   d4ca4:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d4ca6:	076b      	lsls	r3, r5, #29
   d4ca8:	d503      	bpl.n	d4cb2 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d4caa:	2300      	movs	r3, #0
   d4cac:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d4cae:	60a6      	str	r6, [r4, #8]
   d4cb0:	e009      	b.n	d4cc6 <_ZN8FatCache4readEmh+0x38>
   d4cb2:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d4cb4:	f104 020c 	add.w	r2, r4, #12
   d4cb8:	4631      	mov	r1, r6
   d4cba:	6818      	ldr	r0, [r3, #0]
   d4cbc:	f000 f979 	bl	d4fb2 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d4cc0:	2800      	cmp	r0, #0
   d4cc2:	d1f2      	bne.n	d4caa <_ZN8FatCache4readEmh+0x1c>
   d4cc4:	e7ed      	b.n	d4ca2 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d4cc6:	7823      	ldrb	r3, [r4, #0]
   d4cc8:	4620      	mov	r0, r4
   d4cca:	f005 0503 	and.w	r5, r5, #3
   d4cce:	431d      	orrs	r5, r3
   d4cd0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d4cd4:	bd70      	pop	{r4, r5, r6, pc}

000d4cd6 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d4cd6:	7983      	ldrb	r3, [r0, #6]
   d4cd8:	6940      	ldr	r0, [r0, #20]
   d4cda:	3902      	subs	r1, #2
   d4cdc:	4099      	lsls	r1, r3
}
   d4cde:	4408      	add	r0, r1
   d4ce0:	4770      	bx	lr

000d4ce2 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4ce2:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d4ce4:	b570      	push	{r4, r5, r6, lr}
   d4ce6:	4605      	mov	r5, r0
   d4ce8:	460c      	mov	r4, r1
   d4cea:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4cec:	d802      	bhi.n	d4cf4 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d4cee:	f04f 30ff 	mov.w	r0, #4294967295
   d4cf2:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4cf4:	69c3      	ldr	r3, [r0, #28]
   d4cf6:	4299      	cmp	r1, r3
   d4cf8:	d8f9      	bhi.n	d4cee <_ZN9FatVolume6fatGetEmPm+0xc>
   d4cfa:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d4cfc:	2b20      	cmp	r3, #32
   d4cfe:	d110      	bne.n	d4d22 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d4d00:	6981      	ldr	r1, [r0, #24]
   d4d02:	2202      	movs	r2, #2
   d4d04:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d4d08:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d4d0c:	f7ff ffbf 	bl	d4c8e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d4d10:	2800      	cmp	r0, #0
   d4d12:	d0ec      	beq.n	d4cee <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d4d14:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d4d18:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d4d1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d4d20:	e00f      	b.n	d4d42 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d4d22:	2b10      	cmp	r3, #16
   d4d24:	d1e3      	bne.n	d4cee <_ZN9FatVolume6fatGetEmPm+0xc>
   d4d26:	6983      	ldr	r3, [r0, #24]
   d4d28:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d4d2c:	2202      	movs	r2, #2
   d4d2e:	4419      	add	r1, r3
   d4d30:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d4d34:	f7ff ffab 	bl	d4c8e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d4d38:	2800      	cmp	r0, #0
   d4d3a:	d0d8      	beq.n	d4cee <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d4d3c:	b2e4      	uxtb	r4, r4
   d4d3e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d4d42:	69ea      	ldr	r2, [r5, #28]
   d4d44:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d4d46:	bf9a      	itte	ls
   d4d48:	6033      	strls	r3, [r6, #0]
  return 1;
   d4d4a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d4d4c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d4d4e:	bd70      	pop	{r4, r5, r6, pc}

000d4d50 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4d50:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d4d52:	b538      	push	{r3, r4, r5, lr}
   d4d54:	460c      	mov	r4, r1
   d4d56:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4d58:	d801      	bhi.n	d4d5e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d4d5a:	2000      	movs	r0, #0
   d4d5c:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d4d5e:	69c3      	ldr	r3, [r0, #28]
   d4d60:	4299      	cmp	r1, r3
   d4d62:	d8fa      	bhi.n	d4d5a <_ZN9FatVolume6fatPutEmm+0xa>
   d4d64:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d4d66:	2b20      	cmp	r3, #32
   d4d68:	d10e      	bne.n	d4d88 <_ZN9FatVolume6fatPutEmm+0x38>
   d4d6a:	6981      	ldr	r1, [r0, #24]
   d4d6c:	2203      	movs	r2, #3
   d4d6e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d4d72:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d4d76:	f7ff ff8a 	bl	d4c8e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d4d7a:	2800      	cmp	r0, #0
   d4d7c:	d0ed      	beq.n	d4d5a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d4d7e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d4d82:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d4d86:	e00f      	b.n	d4da8 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d4d88:	2b10      	cmp	r3, #16
   d4d8a:	d1e6      	bne.n	d4d5a <_ZN9FatVolume6fatPutEmm+0xa>
   d4d8c:	6983      	ldr	r3, [r0, #24]
   d4d8e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d4d92:	2203      	movs	r2, #3
   d4d94:	4419      	add	r1, r3
   d4d96:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d4d9a:	f7ff ff78 	bl	d4c8e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d4d9e:	2800      	cmp	r0, #0
   d4da0:	d0db      	beq.n	d4d5a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d4da2:	b2e4      	uxtb	r4, r4
   d4da4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d4da8:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d4daa:	bd38      	pop	{r3, r4, r5, pc}

000d4dac <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d4dac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d4db0:	68c4      	ldr	r4, [r0, #12]
   d4db2:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d4db4:	4605      	mov	r5, r0
   d4db6:	460e      	mov	r6, r1
   d4db8:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d4dba:	d207      	bcs.n	d4dcc <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d4dbc:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d4dbe:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d4dc0:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d4dc2:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d4dc4:	429c      	cmp	r4, r3
   d4dc6:	d903      	bls.n	d4dd0 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d4dc8:	b9cf      	cbnz	r7, d4dfe <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d4dca:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d4dcc:	2701      	movs	r7, #1
   d4dce:	e7f7      	b.n	d4dc0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d4dd0:	42a6      	cmp	r6, r4
   d4dd2:	d014      	beq.n	d4dfe <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d4dd4:	aa01      	add	r2, sp, #4
   d4dd6:	4621      	mov	r1, r4
   d4dd8:	4628      	mov	r0, r5
   d4dda:	f7ff ff82 	bl	d4ce2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d4dde:	2800      	cmp	r0, #0
   d4de0:	db0d      	blt.n	d4dfe <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d4de2:	d0ed      	beq.n	d4dc0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d4de4:	9b01      	ldr	r3, [sp, #4]
   d4de6:	2b00      	cmp	r3, #0
   d4de8:	d1ea      	bne.n	d4dc0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d4dea:	b107      	cbz	r7, d4dee <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d4dec:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d4dee:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d4df2:	4621      	mov	r1, r4
   d4df4:	4628      	mov	r0, r5
   d4df6:	f7ff ffab 	bl	d4d50 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d4dfa:	4607      	mov	r7, r0
   d4dfc:	b908      	cbnz	r0, d4e02 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d4dfe:	2700      	movs	r7, #0
   d4e00:	e00b      	b.n	d4e1a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d4e02:	b916      	cbnz	r6, d4e0a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d4e04:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d4e08:	e007      	b.n	d4e1a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d4e0a:	4622      	mov	r2, r4
   d4e0c:	4631      	mov	r1, r6
   d4e0e:	4628      	mov	r0, r5
   d4e10:	f7ff ff9e 	bl	d4d50 <_ZN9FatVolume6fatPutEmm>
   d4e14:	2800      	cmp	r0, #0
   d4e16:	d1f5      	bne.n	d4e04 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d4e18:	e7f1      	b.n	d4dfe <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d4e1a:	4638      	mov	r0, r7
   d4e1c:	b002      	add	sp, #8
   d4e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4e22 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d4e22:	f000 ba35 	b.w	d5290 <HAL_Pin_Map>

000d4e26 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d4e26:	f000 ba33 	b.w	d5290 <HAL_Pin_Map>

000d4e2a <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d4e2a:	f000 ba31 	b.w	d5290 <HAL_Pin_Map>
	...

000d4e30 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d4e30:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d4e32:	4c0e      	ldr	r4, [pc, #56]	; (d4e6c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d4e34:	460e      	mov	r6, r1
   d4e36:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4e38:	f000 faaa 	bl	d5390 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d4e3c:	6823      	ldr	r3, [r4, #0]
   d4e3e:	1ac0      	subs	r0, r0, r3
   d4e40:	4b0b      	ldr	r3, [pc, #44]	; (d4e70 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d4e42:	4298      	cmp	r0, r3
   d4e44:	d908      	bls.n	d4e58 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4e46:	f000 faab 	bl	d53a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4e4a:	4b0a      	ldr	r3, [pc, #40]	; (d4e74 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d4e4c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d4e4e:	f000 fc03 	bl	d5658 <spark_process>
   d4e52:	f000 fa9d 	bl	d5390 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d4e56:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4e58:	f000 faa2 	bl	d53a0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d4e5c:	b280      	uxth	r0, r0
   d4e5e:	1b80      	subs	r0, r0, r6
}
   d4e60:	42a8      	cmp	r0, r5
   d4e62:	bfd4      	ite	le
   d4e64:	2000      	movle	r0, #0
   d4e66:	2001      	movgt	r0, #1
   d4e68:	bd70      	pop	{r4, r5, r6, pc}
   d4e6a:	bf00      	nop
   d4e6c:	2003e3d4 	.word	0x2003e3d4
   d4e70:	000186a0 	.word	0x000186a0
   d4e74:	2003e730 	.word	0x2003e730

000d4e78 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d4e78:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d4e7a:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d4e7c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d4e7e:	b94d      	cbnz	r5, d4e94 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d4e80:	6840      	ldr	r0, [r0, #4]
   d4e82:	f000 f9b9 	bl	d51f8 <_ZN14SdSpiAltDriver8activateEv>
   d4e86:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d4e88:	4629      	mov	r1, r5
   d4e8a:	7d18      	ldrb	r0, [r3, #20]
   d4e8c:	f001 fa23 	bl	d62d6 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d4e90:	2301      	movs	r3, #1
   d4e92:	7223      	strb	r3, [r4, #8]
   d4e94:	bd38      	pop	{r3, r4, r5, pc}

000d4e96 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d4e96:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d4e98:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d4e9a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d4e9c:	b16b      	cbz	r3, d4eba <_ZN9SdSpiCard7spiStopEv+0x24>
   d4e9e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d4ea0:	2101      	movs	r1, #1
   d4ea2:	7d18      	ldrb	r0, [r3, #20]
   d4ea4:	f001 fa17 	bl	d62d6 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d4ea8:	21ff      	movs	r1, #255	; 0xff
   d4eaa:	6860      	ldr	r0, [r4, #4]
   d4eac:	f000 f9c6 	bl	d523c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d4eb0:	6860      	ldr	r0, [r4, #4]
   d4eb2:	f000 f9a5 	bl	d5200 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d4eb6:	2300      	movs	r3, #0
   d4eb8:	7223      	strb	r3, [r4, #8]
   d4eba:	bd10      	pop	{r4, pc}

000d4ebc <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d4ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ebe:	4604      	mov	r4, r0
   d4ec0:	460d      	mov	r5, r1
   d4ec2:	4616      	mov	r6, r2
   d4ec4:	f000 fa6c 	bl	d53a0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d4ec8:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d4eca:	6860      	ldr	r0, [r4, #4]
   d4ecc:	f000 f99b 	bl	d5206 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d4ed0:	28ff      	cmp	r0, #255	; 0xff
   d4ed2:	7260      	strb	r0, [r4, #9]
   d4ed4:	d109      	bne.n	d4eea <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d4ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4eda:	4639      	mov	r1, r7
   d4edc:	4620      	mov	r0, r4
   d4ede:	f7ff ffa7 	bl	d4e30 <_ZN9SdSpiCard10isTimedOutEtt>
   d4ee2:	2800      	cmp	r0, #0
   d4ee4:	d0f1      	beq.n	d4eca <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d4ee6:	2355      	movs	r3, #85	; 0x55
   d4ee8:	e00b      	b.n	d4f02 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d4eea:	28fe      	cmp	r0, #254	; 0xfe
   d4eec:	d001      	beq.n	d4ef2 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d4eee:	2350      	movs	r3, #80	; 0x50
   d4ef0:	e007      	b.n	d4f02 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d4ef2:	4632      	mov	r2, r6
   d4ef4:	4629      	mov	r1, r5
   d4ef6:	6860      	ldr	r0, [r4, #4]
   d4ef8:	f000 f98a 	bl	d5210 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d4efc:	7260      	strb	r0, [r4, #9]
   d4efe:	b130      	cbz	r0, d4f0e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d4f00:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d4f02:	4620      	mov	r0, r4
   d4f04:	7023      	strb	r3, [r4, #0]
   d4f06:	f7ff ffc6 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d4f0a:	2000      	movs	r0, #0
}
   d4f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d4f0e:	6860      	ldr	r0, [r4, #4]
   d4f10:	f000 f979 	bl	d5206 <_ZN14SdSpiAltDriver7receiveEv>
   d4f14:	6860      	ldr	r0, [r4, #4]
   d4f16:	f000 f976 	bl	d5206 <_ZN14SdSpiAltDriver7receiveEv>
   d4f1a:	2001      	movs	r0, #1
   d4f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f1e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d4f1e:	b570      	push	{r4, r5, r6, lr}
   d4f20:	4604      	mov	r4, r0
   d4f22:	460e      	mov	r6, r1
   d4f24:	f000 fa3c 	bl	d53a0 <HAL_Timer_Get_Milli_Seconds>
   d4f28:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d4f2a:	4632      	mov	r2, r6
   d4f2c:	4629      	mov	r1, r5
   d4f2e:	4620      	mov	r0, r4
   d4f30:	f7ff ff7e 	bl	d4e30 <_ZN9SdSpiCard10isTimedOutEtt>
   d4f34:	b930      	cbnz	r0, d4f44 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d4f36:	6860      	ldr	r0, [r4, #4]
   d4f38:	f000 f965 	bl	d5206 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d4f3c:	28ff      	cmp	r0, #255	; 0xff
   d4f3e:	d1f4      	bne.n	d4f2a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d4f40:	2001      	movs	r0, #1
   d4f42:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d4f44:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d4f46:	bd70      	pop	{r4, r5, r6, pc}

000d4f48 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d4f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d4f4a:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d4f4c:	9201      	str	r2, [sp, #4]
   d4f4e:	4604      	mov	r4, r0
   d4f50:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d4f52:	b90b      	cbnz	r3, d4f58 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d4f54:	f7ff ff90 	bl	d4e78 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d4f58:	b125      	cbz	r5, d4f64 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d4f5a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d4f5e:	4620      	mov	r0, r4
   d4f60:	f7ff ffdd 	bl	d4f1e <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d4f64:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d4f68:	6860      	ldr	r0, [r4, #4]
   d4f6a:	f000 f967 	bl	d523c <_ZN14SdSpiAltDriver4sendEh>
   d4f6e:	f10d 0607 	add.w	r6, sp, #7
   d4f72:	f10d 0703 	add.w	r7, sp, #3
   d4f76:	f816 1901 	ldrb.w	r1, [r6], #-1
   d4f7a:	6860      	ldr	r0, [r4, #4]
   d4f7c:	f000 f95e 	bl	d523c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d4f80:	42be      	cmp	r6, r7
   d4f82:	d1f8      	bne.n	d4f76 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d4f84:	2d00      	cmp	r5, #0
   d4f86:	bf0c      	ite	eq
   d4f88:	2195      	moveq	r1, #149	; 0x95
   d4f8a:	2187      	movne	r1, #135	; 0x87
   d4f8c:	6860      	ldr	r0, [r4, #4]
   d4f8e:	f000 f955 	bl	d523c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d4f92:	6860      	ldr	r0, [r4, #4]
   d4f94:	f000 f937 	bl	d5206 <_ZN14SdSpiAltDriver7receiveEv>
   d4f98:	250b      	movs	r5, #11
   d4f9a:	6860      	ldr	r0, [r4, #4]
   d4f9c:	f000 f933 	bl	d5206 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d4fa0:	0603      	lsls	r3, r0, #24
   d4fa2:	7260      	strb	r0, [r4, #9]
   d4fa4:	d503      	bpl.n	d4fae <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d4fa6:	3d01      	subs	r5, #1
   d4fa8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d4fac:	d1f5      	bne.n	d4f9a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d4fae:	b003      	add	sp, #12
   d4fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4fb2 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d4fb2:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d4fb4:	7a83      	ldrb	r3, [r0, #10]
   d4fb6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d4fb8:	bf18      	it	ne
   d4fba:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d4fbc:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d4fbe:	460a      	mov	r2, r1
   d4fc0:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d4fc2:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d4fc4:	f7ff ffc0 	bl	d4f48 <_ZN9SdSpiCard11cardCommandEhm>
   d4fc8:	b110      	cbz	r0, d4fd0 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d4fca:	2330      	movs	r3, #48	; 0x30
   d4fcc:	7023      	strb	r3, [r4, #0]
   d4fce:	e00b      	b.n	d4fe8 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d4fd0:	4629      	mov	r1, r5
   d4fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4fd6:	4620      	mov	r0, r4
   d4fd8:	f7ff ff70 	bl	d4ebc <_ZN9SdSpiCard8readDataEPhj>
   d4fdc:	4605      	mov	r5, r0
   d4fde:	b118      	cbz	r0, d4fe8 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	f7ff ff58 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d4fe6:	e003      	b.n	d4ff0 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d4fe8:	4620      	mov	r0, r4
   d4fea:	f7ff ff54 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d4fee:	2500      	movs	r5, #0
}
   d4ff0:	4628      	mov	r0, r5
   d4ff2:	bd38      	pop	{r3, r4, r5, pc}

000d4ff4 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d4ff4:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d4ff6:	7a83      	ldrb	r3, [r0, #10]
   d4ff8:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d4ffa:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d4ffc:	bf18      	it	ne
   d4ffe:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5000:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5002:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5004:	f7ff ffa0 	bl	d4f48 <_ZN9SdSpiCard11cardCommandEhm>
   d5008:	b130      	cbz	r0, d5018 <_ZN9SdSpiCard9readStartEm+0x24>
   d500a:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d500c:	4620      	mov	r0, r4
   d500e:	7023      	strb	r3, [r4, #0]
   d5010:	f7ff ff41 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5014:	2000      	movs	r0, #0
   d5016:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d5018:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d501a:	bd10      	pop	{r4, pc}

000d501c <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d501c:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d501e:	2200      	movs	r2, #0
   d5020:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5022:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d5024:	f7ff ff90 	bl	d4f48 <_ZN9SdSpiCard11cardCommandEhm>
   d5028:	b130      	cbz	r0, d5038 <_ZN9SdSpiCard8readStopEv+0x1c>
   d502a:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d502c:	4620      	mov	r0, r4
   d502e:	7023      	strb	r3, [r4, #0]
   d5030:	f7ff ff31 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5034:	2000      	movs	r0, #0
   d5036:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d5038:	4620      	mov	r0, r4
   d503a:	f7ff ff2c 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d503e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5040:	bd10      	pop	{r4, pc}

000d5042 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d5042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5044:	4605      	mov	r5, r0
   d5046:	4616      	mov	r6, r2
   d5048:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d504a:	f7ff ffd3 	bl	d4ff4 <_ZN9SdSpiCard9readStartEm>
   d504e:	b198      	cbz	r0, d5078 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d5050:	2400      	movs	r4, #0
   d5052:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d5054:	429f      	cmp	r7, r3
   d5056:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d505a:	d908      	bls.n	d506e <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d505c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5060:	4628      	mov	r0, r5
   d5062:	f7ff ff2b 	bl	d4ebc <_ZN9SdSpiCard8readDataEPhj>
   d5066:	3401      	adds	r4, #1
   d5068:	2800      	cmp	r0, #0
   d506a:	d1f2      	bne.n	d5052 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d506c:	e004      	b.n	d5078 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d506e:	4628      	mov	r0, r5
}
   d5070:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d5074:	f7ff bfd2 	b.w	d501c <_ZN9SdSpiCard8readStopEv>
}
   d5078:	2000      	movs	r0, #0
   d507a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d507c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d507c:	b538      	push	{r3, r4, r5, lr}
   d507e:	4604      	mov	r4, r0
   d5080:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5082:	6840      	ldr	r0, [r0, #4]
   d5084:	f000 f8da 	bl	d523c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d5088:	f44f 7200 	mov.w	r2, #512	; 0x200
   d508c:	4629      	mov	r1, r5
   d508e:	6860      	ldr	r0, [r4, #4]
   d5090:	f000 f8d8 	bl	d5244 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5094:	21ff      	movs	r1, #255	; 0xff
   d5096:	6860      	ldr	r0, [r4, #4]
   d5098:	f000 f8d0 	bl	d523c <_ZN14SdSpiAltDriver4sendEh>
   d509c:	21ff      	movs	r1, #255	; 0xff
   d509e:	6860      	ldr	r0, [r4, #4]
   d50a0:	f000 f8cc 	bl	d523c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d50a4:	6860      	ldr	r0, [r4, #4]
   d50a6:	f000 f8ae 	bl	d5206 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d50aa:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d50ac:	f000 001f 	and.w	r0, r0, #31
   d50b0:	2805      	cmp	r0, #5
   d50b2:	d006      	beq.n	d50c2 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d50b4:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d50b6:	4620      	mov	r0, r4
   d50b8:	7023      	strb	r3, [r4, #0]
   d50ba:	f7ff feec 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d50be:	2000      	movs	r0, #0
   d50c0:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d50c2:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d50c4:	bd38      	pop	{r3, r4, r5, pc}

000d50c6 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d50c6:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d50c8:	7a83      	ldrb	r3, [r0, #10]
   d50ca:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d50cc:	bf18      	it	ne
   d50ce:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d50d0:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d50d2:	460a      	mov	r2, r1
   d50d4:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d50d6:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d50d8:	f7ff ff36 	bl	d4f48 <_ZN9SdSpiCard11cardCommandEhm>
   d50dc:	4606      	mov	r6, r0
   d50de:	b108      	cbz	r0, d50e4 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d50e0:	2332      	movs	r3, #50	; 0x32
   d50e2:	e01d      	b.n	d5120 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d50e4:	462a      	mov	r2, r5
   d50e6:	21fe      	movs	r1, #254	; 0xfe
   d50e8:	4620      	mov	r0, r4
   d50ea:	f7ff ffc7 	bl	d507c <_ZN9SdSpiCard9writeDataEhPKh>
   d50ee:	b1c0      	cbz	r0, d5122 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d50f0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d50f4:	4620      	mov	r0, r4
   d50f6:	f7ff ff12 	bl	d4f1e <_ZN9SdSpiCard11waitNotBusyEt>
   d50fa:	4605      	mov	r5, r0
   d50fc:	b908      	cbnz	r0, d5102 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d50fe:	235a      	movs	r3, #90	; 0x5a
   d5100:	e00e      	b.n	d5120 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d5102:	4632      	mov	r2, r6
   d5104:	210d      	movs	r1, #13
   d5106:	4620      	mov	r0, r4
   d5108:	f7ff ff1e 	bl	d4f48 <_ZN9SdSpiCard11cardCommandEhm>
   d510c:	b938      	cbnz	r0, d511e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d510e:	6860      	ldr	r0, [r4, #4]
   d5110:	f000 f879 	bl	d5206 <_ZN14SdSpiAltDriver7receiveEv>
   d5114:	b918      	cbnz	r0, d511e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5116:	4620      	mov	r0, r4
   d5118:	f7ff febd 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d511c:	e005      	b.n	d512a <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d511e:	2329      	movs	r3, #41	; 0x29
   d5120:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d5122:	4620      	mov	r0, r4
   d5124:	f7ff feb7 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5128:	2500      	movs	r5, #0
}
   d512a:	4628      	mov	r0, r5
   d512c:	bd70      	pop	{r4, r5, r6, pc}

000d512e <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d512e:	b538      	push	{r3, r4, r5, lr}
   d5130:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5132:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5136:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5138:	f7ff fef1 	bl	d4f1e <_ZN9SdSpiCard11waitNotBusyEt>
   d513c:	b910      	cbnz	r0, d5144 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d513e:	235b      	movs	r3, #91	; 0x5b
   d5140:	7023      	strb	r3, [r4, #0]
   d5142:	e005      	b.n	d5150 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d5144:	462a      	mov	r2, r5
   d5146:	21fc      	movs	r1, #252	; 0xfc
   d5148:	4620      	mov	r0, r4
   d514a:	f7ff ff97 	bl	d507c <_ZN9SdSpiCard9writeDataEhPKh>
   d514e:	b918      	cbnz	r0, d5158 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5150:	4620      	mov	r0, r4
   d5152:	f7ff fea0 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5156:	2000      	movs	r0, #0
}
   d5158:	bd38      	pop	{r3, r4, r5, pc}

000d515a <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d515a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d515c:	7a83      	ldrb	r3, [r0, #10]
   d515e:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5160:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5162:	bf18      	it	ne
   d5164:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5166:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5168:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d516a:	f7ff feed 	bl	d4f48 <_ZN9SdSpiCard11cardCommandEhm>
   d516e:	b130      	cbz	r0, d517e <_ZN9SdSpiCard10writeStartEm+0x24>
   d5170:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5172:	4620      	mov	r0, r4
   d5174:	7023      	strb	r3, [r4, #0]
   d5176:	f7ff fe8e 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d517a:	2000      	movs	r0, #0
   d517c:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d517e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5180:	bd10      	pop	{r4, pc}

000d5182 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5182:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5184:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5188:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d518a:	f7ff fec8 	bl	d4f1e <_ZN9SdSpiCard11waitNotBusyEt>
   d518e:	4605      	mov	r5, r0
   d5190:	b120      	cbz	r0, d519c <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5192:	21fd      	movs	r1, #253	; 0xfd
   d5194:	6860      	ldr	r0, [r4, #4]
   d5196:	f000 f851 	bl	d523c <_ZN14SdSpiAltDriver4sendEh>
   d519a:	e001      	b.n	d51a0 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d519c:	2356      	movs	r3, #86	; 0x56
   d519e:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d51a0:	4620      	mov	r0, r4
   d51a2:	f7ff fe78 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d51a6:	4628      	mov	r0, r5
   d51a8:	bd38      	pop	{r3, r4, r5, pc}

000d51aa <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d51aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51ac:	4605      	mov	r5, r0
   d51ae:	4616      	mov	r6, r2
   d51b0:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d51b2:	f7ff ffd2 	bl	d515a <_ZN9SdSpiCard10writeStartEm>
   d51b6:	b170      	cbz	r0, d51d6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d51b8:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d51ba:	42bc      	cmp	r4, r7
   d51bc:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d51c0:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d51c2:	d004      	beq.n	d51ce <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d51c4:	f7ff ffb3 	bl	d512e <_ZN9SdSpiCard9writeDataEPKh>
   d51c8:	b128      	cbz	r0, d51d6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d51ca:	3401      	adds	r4, #1
   d51cc:	e7f5      	b.n	d51ba <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d51ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d51d2:	f7ff bfd6 	b.w	d5182 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d51d6:	4628      	mov	r0, r5
   d51d8:	f7ff fe5d 	bl	d4e96 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d51dc:	2000      	movs	r0, #0
   d51de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51e0 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d51e0:	f000 b856 	b.w	d5290 <HAL_Pin_Map>

000d51e4 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d51e4:	f000 b854 	b.w	d5290 <HAL_Pin_Map>

000d51e8 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d51e8:	f000 b852 	b.w	d5290 <HAL_Pin_Map>

000d51ec <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d51ec:	4b01      	ldr	r3, [pc, #4]	; (d51f4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d51ee:	2201      	movs	r2, #1
   d51f0:	701a      	strb	r2, [r3, #0]
   d51f2:	4770      	bx	lr
   d51f4:	2003e3d8 	.word	0x2003e3d8

000d51f8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d51f8:	1d01      	adds	r1, r0, #4
   d51fa:	6800      	ldr	r0, [r0, #0]
   d51fc:	f000 babc 	b.w	d5778 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5200 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5200:	6800      	ldr	r0, [r0, #0]
   d5202:	f000 ba9f 	b.w	d5744 <_ZN8SPIClass14endTransactionEv>

000d5206 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5206:	21ff      	movs	r1, #255	; 0xff
   d5208:	6800      	ldr	r0, [r0, #0]
   d520a:	f000 bb25 	b.w	d5858 <_ZN8SPIClass8transferEh>
	...

000d5210 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5210:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5212:	4b08      	ldr	r3, [pc, #32]	; (d5234 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5214:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5216:	2500      	movs	r5, #0
   d5218:	4c07      	ldr	r4, [pc, #28]	; (d5238 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d521a:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d521c:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d521e:	4613      	mov	r3, r2
   d5220:	460a      	mov	r2, r1
   d5222:	4629      	mov	r1, r5
   d5224:	f000 fb1e 	bl	d5864 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5228:	7823      	ldrb	r3, [r4, #0]
   d522a:	2b00      	cmp	r3, #0
   d522c:	d0fc      	beq.n	d5228 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d522e:	2000      	movs	r0, #0
   d5230:	b003      	add	sp, #12
   d5232:	bd30      	pop	{r4, r5, pc}
   d5234:	000d51ed 	.word	0x000d51ed
   d5238:	2003e3d8 	.word	0x2003e3d8

000d523c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d523c:	6800      	ldr	r0, [r0, #0]
   d523e:	f000 bb0b 	b.w	d5858 <_ZN8SPIClass8transferEh>
	...

000d5244 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5244:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5246:	4b07      	ldr	r3, [pc, #28]	; (d5264 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5248:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d524a:	2500      	movs	r5, #0
   d524c:	4c06      	ldr	r4, [pc, #24]	; (d5268 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d524e:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5250:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5252:	4613      	mov	r3, r2
   d5254:	462a      	mov	r2, r5
   d5256:	f000 fb05 	bl	d5864 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d525a:	7823      	ldrb	r3, [r4, #0]
   d525c:	2b00      	cmp	r3, #0
   d525e:	d0fc      	beq.n	d525a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5260:	b003      	add	sp, #12
   d5262:	bd30      	pop	{r4, r5, pc}
   d5264:	000d51ed 	.word	0x000d51ed
   d5268:	2003e3d8 	.word	0x2003e3d8

000d526c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d526c:	f000 b810 	b.w	d5290 <HAL_Pin_Map>

000d5270 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <netdb_freeaddrinfo+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	689b      	ldr	r3, [r3, #8]
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	00030268 	.word	0x00030268

000d5280 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <netdb_getaddrinfo+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	68db      	ldr	r3, [r3, #12]
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	00030268 	.word	0x00030268

000d5290 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <HAL_Pin_Map+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	681b      	ldr	r3, [r3, #0]
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	0003022c 	.word	0x0003022c

000d52a0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d52a0:	b508      	push	{r3, lr}
   d52a2:	4b02      	ldr	r3, [pc, #8]	; (d52ac <HAL_Pin_Mode+0xc>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	689b      	ldr	r3, [r3, #8]
   d52a8:	9301      	str	r3, [sp, #4]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	0003022c 	.word	0x0003022c

000d52b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d52b0:	b508      	push	{r3, lr}
   d52b2:	4b02      	ldr	r3, [pc, #8]	; (d52bc <HAL_Get_Pin_Mode+0xc>)
   d52b4:	681b      	ldr	r3, [r3, #0]
   d52b6:	68db      	ldr	r3, [r3, #12]
   d52b8:	9301      	str	r3, [sp, #4]
   d52ba:	bd08      	pop	{r3, pc}
   d52bc:	0003022c 	.word	0x0003022c

000d52c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d52c0:	b508      	push	{r3, lr}
   d52c2:	4b02      	ldr	r3, [pc, #8]	; (d52cc <HAL_GPIO_Write+0xc>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   d52c6:	691b      	ldr	r3, [r3, #16]
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	bd08      	pop	{r3, pc}
   d52cc:	0003022c 	.word	0x0003022c

000d52d0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d52d0:	b508      	push	{r3, lr}
   d52d2:	4b02      	ldr	r3, [pc, #8]	; (d52dc <HAL_GPIO_Read+0xc>)
   d52d4:	681b      	ldr	r3, [r3, #0]
   d52d6:	695b      	ldr	r3, [r3, #20]
   d52d8:	9301      	str	r3, [sp, #4]
   d52da:	bd08      	pop	{r3, pc}
   d52dc:	0003022c 	.word	0x0003022c

000d52e0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b02      	ldr	r3, [pc, #8]	; (d52ec <HAL_SPI_Send_Receive_Data+0xc>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	695b      	ldr	r3, [r3, #20]
   d52e8:	9301      	str	r3, [sp, #4]
   d52ea:	bd08      	pop	{r3, pc}
   d52ec:	00030230 	.word	0x00030230

000d52f0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d52f0:	b508      	push	{r3, lr}
   d52f2:	4b02      	ldr	r3, [pc, #8]	; (d52fc <HAL_SPI_Init+0xc>)
   d52f4:	681b      	ldr	r3, [r3, #0]
   d52f6:	69db      	ldr	r3, [r3, #28]
   d52f8:	9301      	str	r3, [sp, #4]
   d52fa:	bd08      	pop	{r3, pc}
   d52fc:	00030230 	.word	0x00030230

000d5300 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b02      	ldr	r3, [pc, #8]	; (d530c <HAL_SPI_Is_Enabled+0xc>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	6a1b      	ldr	r3, [r3, #32]
   d5308:	9301      	str	r3, [sp, #4]
   d530a:	bd08      	pop	{r3, pc}
   d530c:	00030230 	.word	0x00030230

000d5310 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <HAL_SPI_Info+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	00030230 	.word	0x00030230

000d5320 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <HAL_SPI_DMA_Transfer+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	00030230 	.word	0x00030230

000d5330 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <HAL_SPI_DMA_Transfer_Status+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	00030230 	.word	0x00030230

000d5340 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <HAL_SPI_Set_Settings+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	00030230 	.word	0x00030230

000d5350 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <HAL_SPI_Acquire+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	00030230 	.word	0x00030230

000d5360 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <HAL_SPI_Release+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	00030230 	.word	0x00030230

000d5370 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <HAL_RNG_GetRandomNumber+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	685b      	ldr	r3, [r3, #4]
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	00030218 	.word	0x00030218

000d5380 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <HAL_Delay_Microseconds+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	68db      	ldr	r3, [r3, #12]
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	00030218 	.word	0x00030218

000d5390 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	691b      	ldr	r3, [r3, #16]
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	00030218 	.word	0x00030218

000d53a0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b02      	ldr	r3, [pc, #8]	; (d53ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	695b      	ldr	r3, [r3, #20]
   d53a8:	9301      	str	r3, [sp, #4]
   d53aa:	bd08      	pop	{r3, pc}
   d53ac:	00030218 	.word	0x00030218

000d53b0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d53b0:	b508      	push	{r3, lr}
   d53b2:	4b02      	ldr	r3, [pc, #8]	; (d53bc <os_thread_is_current+0xc>)
   d53b4:	681b      	ldr	r3, [r3, #0]
   d53b6:	689b      	ldr	r3, [r3, #8]
   d53b8:	9301      	str	r3, [sp, #4]
   d53ba:	bd08      	pop	{r3, pc}
   d53bc:	00030248 	.word	0x00030248

000d53c0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d53c0:	b508      	push	{r3, lr}
   d53c2:	4b02      	ldr	r3, [pc, #8]	; (d53cc <os_thread_join+0xc>)
   d53c4:	681b      	ldr	r3, [r3, #0]
   d53c6:	691b      	ldr	r3, [r3, #16]
   d53c8:	9301      	str	r3, [sp, #4]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	00030248 	.word	0x00030248

000d53d0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d53d0:	b508      	push	{r3, lr}
   d53d2:	4b02      	ldr	r3, [pc, #8]	; (d53dc <os_thread_cleanup+0xc>)
   d53d4:	681b      	ldr	r3, [r3, #0]
   d53d6:	695b      	ldr	r3, [r3, #20]
   d53d8:	9301      	str	r3, [sp, #4]
   d53da:	bd08      	pop	{r3, pc}
   d53dc:	00030248 	.word	0x00030248

000d53e0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d53e0:	b508      	push	{r3, lr}
   d53e2:	4b02      	ldr	r3, [pc, #8]	; (d53ec <os_mutex_recursive_create+0xc>)
   d53e4:	681b      	ldr	r3, [r3, #0]
   d53e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d53e8:	9301      	str	r3, [sp, #4]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	00030248 	.word	0x00030248

000d53f0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d53f0:	b508      	push	{r3, lr}
   d53f2:	4b02      	ldr	r3, [pc, #8]	; (d53fc <os_mutex_recursive_destroy+0xc>)
   d53f4:	681b      	ldr	r3, [r3, #0]
   d53f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d53f8:	9301      	str	r3, [sp, #4]
   d53fa:	bd08      	pop	{r3, pc}
   d53fc:	00030248 	.word	0x00030248

000d5400 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5400:	b508      	push	{r3, lr}
   d5402:	4b02      	ldr	r3, [pc, #8]	; (d540c <inet_inet_ntop+0xc>)
   d5404:	681b      	ldr	r3, [r3, #0]
   d5406:	695b      	ldr	r3, [r3, #20]
   d5408:	9301      	str	r3, [sp, #4]
   d540a:	bd08      	pop	{r3, pc}
   d540c:	00030264 	.word	0x00030264

000d5410 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5410:	b508      	push	{r3, lr}
   d5412:	4b02      	ldr	r3, [pc, #8]	; (d541c <HAL_USART_Init+0xc>)
   d5414:	681b      	ldr	r3, [r3, #0]
   d5416:	681b      	ldr	r3, [r3, #0]
   d5418:	9301      	str	r3, [sp, #4]
   d541a:	bd08      	pop	{r3, pc}
   d541c:	0003023c 	.word	0x0003023c

000d5420 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b02      	ldr	r3, [pc, #8]	; (d542c <HAL_USART_Write_Data+0xc>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	68db      	ldr	r3, [r3, #12]
   d5428:	9301      	str	r3, [sp, #4]
   d542a:	bd08      	pop	{r3, pc}
   d542c:	0003023c 	.word	0x0003023c

000d5430 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5430:	b508      	push	{r3, lr}
   d5432:	4b02      	ldr	r3, [pc, #8]	; (d543c <HAL_USART_Available_Data+0xc>)
   d5434:	681b      	ldr	r3, [r3, #0]
   d5436:	691b      	ldr	r3, [r3, #16]
   d5438:	9301      	str	r3, [sp, #4]
   d543a:	bd08      	pop	{r3, pc}
   d543c:	0003023c 	.word	0x0003023c

000d5440 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5440:	b508      	push	{r3, lr}
   d5442:	4b02      	ldr	r3, [pc, #8]	; (d544c <HAL_USART_Read_Data+0xc>)
   d5444:	681b      	ldr	r3, [r3, #0]
   d5446:	695b      	ldr	r3, [r3, #20]
   d5448:	9301      	str	r3, [sp, #4]
   d544a:	bd08      	pop	{r3, pc}
   d544c:	0003023c 	.word	0x0003023c

000d5450 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5450:	b508      	push	{r3, lr}
   d5452:	4b02      	ldr	r3, [pc, #8]	; (d545c <HAL_USART_Peek_Data+0xc>)
   d5454:	681b      	ldr	r3, [r3, #0]
   d5456:	699b      	ldr	r3, [r3, #24]
   d5458:	9301      	str	r3, [sp, #4]
   d545a:	bd08      	pop	{r3, pc}
   d545c:	0003023c 	.word	0x0003023c

000d5460 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5460:	b508      	push	{r3, lr}
   d5462:	4b02      	ldr	r3, [pc, #8]	; (d546c <HAL_USART_Flush_Data+0xc>)
   d5464:	681b      	ldr	r3, [r3, #0]
   d5466:	69db      	ldr	r3, [r3, #28]
   d5468:	9301      	str	r3, [sp, #4]
   d546a:	bd08      	pop	{r3, pc}
   d546c:	0003023c 	.word	0x0003023c

000d5470 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5470:	b508      	push	{r3, lr}
   d5472:	4b02      	ldr	r3, [pc, #8]	; (d547c <HAL_USART_Is_Enabled+0xc>)
   d5474:	681b      	ldr	r3, [r3, #0]
   d5476:	6a1b      	ldr	r3, [r3, #32]
   d5478:	9301      	str	r3, [sp, #4]
   d547a:	bd08      	pop	{r3, pc}
   d547c:	0003023c 	.word	0x0003023c

000d5480 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5480:	b508      	push	{r3, lr}
   d5482:	4b02      	ldr	r3, [pc, #8]	; (d548c <HAL_USART_Available_Data_For_Write+0xc>)
   d5484:	681b      	ldr	r3, [r3, #0]
   d5486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5488:	9301      	str	r3, [sp, #4]
   d548a:	bd08      	pop	{r3, pc}
   d548c:	0003023c 	.word	0x0003023c

000d5490 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5490:	b508      	push	{r3, lr}
   d5492:	4b02      	ldr	r3, [pc, #8]	; (d549c <HAL_I2C_Write_Data+0xc>)
   d5494:	681b      	ldr	r3, [r3, #0]
   d5496:	6a1b      	ldr	r3, [r3, #32]
   d5498:	9301      	str	r3, [sp, #4]
   d549a:	bd08      	pop	{r3, pc}
   d549c:	00030228 	.word	0x00030228

000d54a0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d54a0:	b508      	push	{r3, lr}
   d54a2:	4b02      	ldr	r3, [pc, #8]	; (d54ac <HAL_I2C_Available_Data+0xc>)
   d54a4:	681b      	ldr	r3, [r3, #0]
   d54a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54a8:	9301      	str	r3, [sp, #4]
   d54aa:	bd08      	pop	{r3, pc}
   d54ac:	00030228 	.word	0x00030228

000d54b0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d54b0:	b508      	push	{r3, lr}
   d54b2:	4b02      	ldr	r3, [pc, #8]	; (d54bc <HAL_I2C_Read_Data+0xc>)
   d54b4:	681b      	ldr	r3, [r3, #0]
   d54b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54b8:	9301      	str	r3, [sp, #4]
   d54ba:	bd08      	pop	{r3, pc}
   d54bc:	00030228 	.word	0x00030228

000d54c0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d54c0:	b508      	push	{r3, lr}
   d54c2:	4b02      	ldr	r3, [pc, #8]	; (d54cc <HAL_I2C_Peek_Data+0xc>)
   d54c4:	681b      	ldr	r3, [r3, #0]
   d54c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54c8:	9301      	str	r3, [sp, #4]
   d54ca:	bd08      	pop	{r3, pc}
   d54cc:	00030228 	.word	0x00030228

000d54d0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d54d0:	b508      	push	{r3, lr}
   d54d2:	4b02      	ldr	r3, [pc, #8]	; (d54dc <HAL_I2C_Flush_Data+0xc>)
   d54d4:	681b      	ldr	r3, [r3, #0]
   d54d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54d8:	9301      	str	r3, [sp, #4]
   d54da:	bd08      	pop	{r3, pc}
   d54dc:	00030228 	.word	0x00030228

000d54e0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d54e0:	b508      	push	{r3, lr}
   d54e2:	4b02      	ldr	r3, [pc, #8]	; (d54ec <HAL_I2C_Is_Enabled+0xc>)
   d54e4:	681b      	ldr	r3, [r3, #0]
   d54e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d54e8:	9301      	str	r3, [sp, #4]
   d54ea:	bd08      	pop	{r3, pc}
   d54ec:	00030228 	.word	0x00030228

000d54f0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d54f0:	b508      	push	{r3, lr}
   d54f2:	4b02      	ldr	r3, [pc, #8]	; (d54fc <HAL_I2C_Init+0xc>)
   d54f4:	681b      	ldr	r3, [r3, #0]
   d54f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d54f8:	9301      	str	r3, [sp, #4]
   d54fa:	bd08      	pop	{r3, pc}
   d54fc:	00030228 	.word	0x00030228

000d5500 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5500:	b508      	push	{r3, lr}
   d5502:	4b02      	ldr	r3, [pc, #8]	; (d550c <HAL_USB_USART_Init+0xc>)
   d5504:	681b      	ldr	r3, [r3, #0]
   d5506:	681b      	ldr	r3, [r3, #0]
   d5508:	9301      	str	r3, [sp, #4]
   d550a:	bd08      	pop	{r3, pc}
   d550c:	0003024c 	.word	0x0003024c

000d5510 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5510:	b508      	push	{r3, lr}
   d5512:	4b02      	ldr	r3, [pc, #8]	; (d551c <HAL_USB_USART_Begin+0xc>)
   d5514:	681b      	ldr	r3, [r3, #0]
   d5516:	685b      	ldr	r3, [r3, #4]
   d5518:	9301      	str	r3, [sp, #4]
   d551a:	bd08      	pop	{r3, pc}
   d551c:	0003024c 	.word	0x0003024c

000d5520 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5520:	b508      	push	{r3, lr}
   d5522:	4b02      	ldr	r3, [pc, #8]	; (d552c <HAL_USB_USART_Available_Data+0xc>)
   d5524:	681b      	ldr	r3, [r3, #0]
   d5526:	691b      	ldr	r3, [r3, #16]
   d5528:	9301      	str	r3, [sp, #4]
   d552a:	bd08      	pop	{r3, pc}
   d552c:	0003024c 	.word	0x0003024c

000d5530 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5530:	b508      	push	{r3, lr}
   d5532:	4b02      	ldr	r3, [pc, #8]	; (d553c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5534:	681b      	ldr	r3, [r3, #0]
   d5536:	695b      	ldr	r3, [r3, #20]
   d5538:	9301      	str	r3, [sp, #4]
   d553a:	bd08      	pop	{r3, pc}
   d553c:	0003024c 	.word	0x0003024c

000d5540 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5540:	b508      	push	{r3, lr}
   d5542:	4b02      	ldr	r3, [pc, #8]	; (d554c <HAL_USB_USART_Receive_Data+0xc>)
   d5544:	681b      	ldr	r3, [r3, #0]
   d5546:	699b      	ldr	r3, [r3, #24]
   d5548:	9301      	str	r3, [sp, #4]
   d554a:	bd08      	pop	{r3, pc}
   d554c:	0003024c 	.word	0x0003024c

000d5550 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5550:	b508      	push	{r3, lr}
   d5552:	4b02      	ldr	r3, [pc, #8]	; (d555c <HAL_USB_USART_Send_Data+0xc>)
   d5554:	681b      	ldr	r3, [r3, #0]
   d5556:	69db      	ldr	r3, [r3, #28]
   d5558:	9301      	str	r3, [sp, #4]
   d555a:	bd08      	pop	{r3, pc}
   d555c:	0003024c 	.word	0x0003024c

000d5560 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5560:	b508      	push	{r3, lr}
   d5562:	4b02      	ldr	r3, [pc, #8]	; (d556c <HAL_USB_USART_Flush_Data+0xc>)
   d5564:	681b      	ldr	r3, [r3, #0]
   d5566:	6a1b      	ldr	r3, [r3, #32]
   d5568:	9301      	str	r3, [sp, #4]
   d556a:	bd08      	pop	{r3, pc}
   d556c:	0003024c 	.word	0x0003024c

000d5570 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5570:	b508      	push	{r3, lr}
   d5572:	4b02      	ldr	r3, [pc, #8]	; (d557c <set_system_mode+0xc>)
   d5574:	681b      	ldr	r3, [r3, #0]
   d5576:	685b      	ldr	r3, [r3, #4]
   d5578:	9301      	str	r3, [sp, #4]
   d557a:	bd08      	pop	{r3, pc}
   d557c:	00030220 	.word	0x00030220

000d5580 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5580:	b508      	push	{r3, lr}
   d5582:	4b02      	ldr	r3, [pc, #8]	; (d558c <system_delay_ms+0xc>)
   d5584:	681b      	ldr	r3, [r3, #0]
   d5586:	695b      	ldr	r3, [r3, #20]
   d5588:	9301      	str	r3, [sp, #4]
   d558a:	bd08      	pop	{r3, pc}
   d558c:	00030220 	.word	0x00030220

000d5590 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5590:	b508      	push	{r3, lr}
   d5592:	4b03      	ldr	r3, [pc, #12]	; (d55a0 <system_ctrl_set_app_request_handler+0x10>)
   d5594:	681b      	ldr	r3, [r3, #0]
   d5596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d559a:	9301      	str	r3, [sp, #4]
   d559c:	bd08      	pop	{r3, pc}
   d559e:	0000      	.short	0x0000
   d55a0:	00030220 	.word	0x00030220

000d55a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b03      	ldr	r3, [pc, #12]	; (d55b4 <system_ctrl_set_result+0x10>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d55ae:	9301      	str	r3, [sp, #4]
   d55b0:	bd08      	pop	{r3, pc}
   d55b2:	0000      	.short	0x0000
   d55b4:	00030220 	.word	0x00030220

000d55b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <network_connect+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	685b      	ldr	r3, [r3, #4]
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	00030240 	.word	0x00030240

000d55c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <network_connecting+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	689b      	ldr	r3, [r3, #8]
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	00030240 	.word	0x00030240

000d55d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <network_disconnect+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	68db      	ldr	r3, [r3, #12]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	00030240 	.word	0x00030240

000d55e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <network_ready+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	691b      	ldr	r3, [r3, #16]
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	00030240 	.word	0x00030240

000d55f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <network_on+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	695b      	ldr	r3, [r3, #20]
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	00030240 	.word	0x00030240

000d5608 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <network_off+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	699b      	ldr	r3, [r3, #24]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	00030240 	.word	0x00030240

000d5618 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <network_listen+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	69db      	ldr	r3, [r3, #28]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	00030240 	.word	0x00030240

000d5628 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <network_listening+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	6a1b      	ldr	r3, [r3, #32]
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	00030240 	.word	0x00030240

000d5638 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <network_set_listen_timeout+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030240 	.word	0x00030240

000d5648 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <network_get_listen_timeout+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	00030240 	.word	0x00030240

000d5658 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <spark_process+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	689b      	ldr	r3, [r3, #8]
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	00030244 	.word	0x00030244

000d5668 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <spark_set_random_seed_from_cloud_handler+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030244 	.word	0x00030244

000d5678 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <malloc+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	681b      	ldr	r3, [r3, #0]
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	0003021c 	.word	0x0003021c

000d5688 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <free+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	685b      	ldr	r3, [r3, #4]
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	0003021c 	.word	0x0003021c

000d5698 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <vsnprintf+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	0003021c 	.word	0x0003021c

000d56a8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56a8:	2200      	movs	r2, #0
   d56aa:	4611      	mov	r1, r2
   d56ac:	6840      	ldr	r0, [r0, #4]
   d56ae:	f7ff bfbb 	b.w	d5628 <network_listening>

000d56b2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d56b2:	2200      	movs	r2, #0
   d56b4:	4611      	mov	r1, r2
   d56b6:	6840      	ldr	r0, [r0, #4]
   d56b8:	f7ff bfc6 	b.w	d5648 <network_get_listen_timeout>

000d56bc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d56bc:	2200      	movs	r2, #0
   d56be:	6840      	ldr	r0, [r0, #4]
   d56c0:	f7ff bfba 	b.w	d5638 <network_set_listen_timeout>

000d56c4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d56c4:	2200      	movs	r2, #0
   d56c6:	f081 0101 	eor.w	r1, r1, #1
   d56ca:	6840      	ldr	r0, [r0, #4]
   d56cc:	f7ff bfa4 	b.w	d5618 <network_listen>

000d56d0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d56d0:	2300      	movs	r3, #0
   d56d2:	461a      	mov	r2, r3
   d56d4:	4619      	mov	r1, r3
   d56d6:	6840      	ldr	r0, [r0, #4]
   d56d8:	f7ff bf96 	b.w	d5608 <network_off>

000d56dc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d56dc:	2300      	movs	r3, #0
   d56de:	461a      	mov	r2, r3
   d56e0:	4619      	mov	r1, r3
   d56e2:	6840      	ldr	r0, [r0, #4]
   d56e4:	f7ff bf88 	b.w	d55f8 <network_on>

000d56e8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d56e8:	2200      	movs	r2, #0
   d56ea:	4611      	mov	r1, r2
   d56ec:	6840      	ldr	r0, [r0, #4]
   d56ee:	f7ff bf7b 	b.w	d55e8 <network_ready>

000d56f2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56f2:	2200      	movs	r2, #0
   d56f4:	4611      	mov	r1, r2
   d56f6:	6840      	ldr	r0, [r0, #4]
   d56f8:	f7ff bf66 	b.w	d55c8 <network_connecting>

000d56fc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56fc:	2200      	movs	r2, #0
   d56fe:	2102      	movs	r1, #2
   d5700:	6840      	ldr	r0, [r0, #4]
   d5702:	f7ff bf69 	b.w	d55d8 <network_disconnect>

000d5706 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5706:	2300      	movs	r3, #0
   d5708:	461a      	mov	r2, r3
   d570a:	6840      	ldr	r0, [r0, #4]
   d570c:	f7ff bf54 	b.w	d55b8 <network_connect>

000d5710 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5710:	4b02      	ldr	r3, [pc, #8]	; (d571c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5712:	2203      	movs	r2, #3
   d5714:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5716:	4a02      	ldr	r2, [pc, #8]	; (d5720 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5718:	601a      	str	r2, [r3, #0]
   d571a:	4770      	bx	lr
   d571c:	2003e3dc 	.word	0x2003e3dc
   d5720:	000d6830 	.word	0x000d6830

000d5724 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5724:	2100      	movs	r1, #0
   d5726:	f7ff be13 	b.w	d5350 <HAL_SPI_Acquire>

000d572a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d572a:	2100      	movs	r1, #0
   d572c:	f7ff be18 	b.w	d5360 <HAL_SPI_Release>

000d5730 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5730:	b510      	push	{r4, lr}
   d5732:	4604      	mov	r4, r0
{
    _spi = spi;
   d5734:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5736:	4608      	mov	r0, r1
   d5738:	f7ff fdda 	bl	d52f0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d573c:	2300      	movs	r3, #0
   d573e:	6063      	str	r3, [r4, #4]
}
   d5740:	4620      	mov	r0, r4
   d5742:	bd10      	pop	{r4, pc}

000d5744 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5744:	7800      	ldrb	r0, [r0, #0]
   d5746:	f7ff bff0 	b.w	d572a <_ZN8SPIClass6unlockEv.isra.1>
	...

000d574c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d574c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d574e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5750:	6018      	str	r0, [r3, #0]
   d5752:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5754:	6818      	ldr	r0, [r3, #0]
   d5756:	4288      	cmp	r0, r1
   d5758:	b2e5      	uxtb	r5, r4
   d575a:	d906      	bls.n	d576a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d575c:	3401      	adds	r4, #1
   d575e:	2c08      	cmp	r4, #8
   d5760:	d002      	beq.n	d5768 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5762:	0840      	lsrs	r0, r0, #1
   d5764:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5766:	e7f5      	b.n	d5754 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5768:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d576c:	5d5b      	ldrb	r3, [r3, r5]
   d576e:	7013      	strb	r3, [r2, #0]
   d5770:	bd30      	pop	{r4, r5, pc}
   d5772:	bf00      	nop
   d5774:	000d685c 	.word	0x000d685c

000d5778 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d577c:	4607      	mov	r7, r0
   d577e:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d5780:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5782:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d5784:	f7ff ffce 	bl	d5724 <_ZN8SPIClass4lockEv.isra.0>
   d5788:	2800      	cmp	r0, #0
   d578a:	db62      	blt.n	d5852 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d578c:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d578e:	2214      	movs	r2, #20
   d5790:	2100      	movs	r1, #0
   d5792:	a809      	add	r0, sp, #36	; 0x24
   d5794:	f000 ff8f 	bl	d66b6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5798:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d579a:	4620      	mov	r0, r4
   d579c:	2200      	movs	r2, #0
   d579e:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d57a0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d57a4:	f7ff fdb4 	bl	d5310 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d57a8:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d57ac:	b154      	cbz	r4, d57c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d57ae:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d57b2:	b935      	cbnz	r5, d57c2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d57b4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d57b8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d57bc:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d57c0:	e003      	b.n	d57ca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d57c2:	2400      	movs	r4, #0
   d57c4:	46a1      	mov	r9, r4
   d57c6:	46a0      	mov	r8, r4
   d57c8:	2501      	movs	r5, #1
   d57ca:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d57cc:	b105      	cbz	r5, d57d0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d57ce:	b9bb      	cbnz	r3, d5800 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d57d0:	429d      	cmp	r5, r3
   d57d2:	d10b      	bne.n	d57ec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d57d4:	68b2      	ldr	r2, [r6, #8]
   d57d6:	4542      	cmp	r2, r8
   d57d8:	d108      	bne.n	d57ec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d57da:	f88d 9020 	strb.w	r9, [sp, #32]
   d57de:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d57e2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d57e6:	89b2      	ldrh	r2, [r6, #12]
   d57e8:	4291      	cmp	r1, r2
   d57ea:	d009      	beq.n	d5800 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d57ec:	b153      	cbz	r3, d5804 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d57ee:	2400      	movs	r4, #0
   d57f0:	7838      	ldrb	r0, [r7, #0]
   d57f2:	9401      	str	r4, [sp, #4]
   d57f4:	9400      	str	r4, [sp, #0]
   d57f6:	4623      	mov	r3, r4
   d57f8:	4622      	mov	r2, r4
   d57fa:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d57fc:	f7ff fda0 	bl	d5340 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d5800:	2000      	movs	r0, #0
   d5802:	e026      	b.n	d5852 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d5804:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d5808:	68b1      	ldr	r1, [r6, #8]
   d580a:	980a      	ldr	r0, [sp, #40]	; 0x28
   d580c:	ab04      	add	r3, sp, #16
   d580e:	f10d 020f 	add.w	r2, sp, #15
   d5812:	f7ff ff9b 	bl	d574c <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d5816:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5818:	b105      	cbz	r5, d581c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d581a:	b9b1      	cbnz	r1, d584a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d581c:	42a9      	cmp	r1, r5
   d581e:	d008      	beq.n	d5832 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5820:	2400      	movs	r4, #0
   d5822:	7838      	ldrb	r0, [r7, #0]
   d5824:	9401      	str	r4, [sp, #4]
   d5826:	7b74      	ldrb	r4, [r6, #13]
   d5828:	7b33      	ldrb	r3, [r6, #12]
   d582a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d582e:	9400      	str	r4, [sp, #0]
   d5830:	e7e4      	b.n	d57fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d5832:	68b3      	ldr	r3, [r6, #8]
   d5834:	4543      	cmp	r3, r8
   d5836:	d3f3      	bcc.n	d5820 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5838:	f88d 9020 	strb.w	r9, [sp, #32]
   d583c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5840:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5844:	89b3      	ldrh	r3, [r6, #12]
   d5846:	429a      	cmp	r2, r3
   d5848:	d1ea      	bne.n	d5820 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d584a:	9b04      	ldr	r3, [sp, #16]
   d584c:	4543      	cmp	r3, r8
   d584e:	d1e7      	bne.n	d5820 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d5850:	e7d6      	b.n	d5800 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d5852:	b00f      	add	sp, #60	; 0x3c
   d5854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5858 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5858:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d585a:	7800      	ldrb	r0, [r0, #0]
   d585c:	f7ff fd40 	bl	d52e0 <HAL_SPI_Send_Receive_Data>
}
   d5860:	b2c0      	uxtb	r0, r0
   d5862:	bd08      	pop	{r3, pc}

000d5864 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d5864:	b530      	push	{r4, r5, lr}
   d5866:	b087      	sub	sp, #28
   d5868:	4604      	mov	r4, r0
   d586a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d586c:	7800      	ldrb	r0, [r0, #0]
   d586e:	9500      	str	r5, [sp, #0]
   d5870:	f7ff fd56 	bl	d5320 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d5874:	b93d      	cbnz	r5, d5886 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d5876:	a902      	add	r1, sp, #8
   d5878:	7820      	ldrb	r0, [r4, #0]
   d587a:	f7ff fd59 	bl	d5330 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d587e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d5882:	07db      	lsls	r3, r3, #31
   d5884:	d4f7      	bmi.n	d5876 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d5886:	b007      	add	sp, #28
   d5888:	bd30      	pop	{r4, r5, pc}

000d588a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d588a:	7800      	ldrb	r0, [r0, #0]
   d588c:	f7ff bd38 	b.w	d5300 <HAL_SPI_Is_Enabled>

000d5890 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5890:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5892:	4c09      	ldr	r4, [pc, #36]	; (d58b8 <_GLOBAL__sub_I_System+0x28>)
   d5894:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5896:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d589a:	6020      	str	r0, [r4, #0]
   d589c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d589e:	71a0      	strb	r0, [r4, #6]
   d58a0:	8120      	strh	r0, [r4, #8]
   d58a2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d58a4:	f7ff fe64 	bl	d5570 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d58a8:	4620      	mov	r0, r4
   d58aa:	4a04      	ldr	r2, [pc, #16]	; (d58bc <_GLOBAL__sub_I_System+0x2c>)
   d58ac:	4904      	ldr	r1, [pc, #16]	; (d58c0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d58ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d58b2:	f000 bd7d 	b.w	d63b0 <__aeabi_atexit>
   d58b6:	bf00      	nop
   d58b8:	2003e3e4 	.word	0x2003e3e4
   d58bc:	2003deb4 	.word	0x2003deb4
   d58c0:	000d4167 	.word	0x000d4167

000d58c4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d58c4:	b510      	push	{r4, lr}
   d58c6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d58c8:	6800      	ldr	r0, [r0, #0]
   d58ca:	b108      	cbz	r0, d58d0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d58cc:	f7ff fd90 	bl	d53f0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d58d0:	4620      	mov	r0, r4
   d58d2:	bd10      	pop	{r4, pc}

000d58d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d58d4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d58d6:	4c06      	ldr	r4, [pc, #24]	; (d58f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d58d8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d58da:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d58dc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d58de:	f7ff fd7f 	bl	d53e0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d58e2:	4620      	mov	r0, r4
   d58e4:	4a03      	ldr	r2, [pc, #12]	; (d58f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d58e6:	4904      	ldr	r1, [pc, #16]	; (d58f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d58e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d58ec:	f000 bd60 	b.w	d63b0 <__aeabi_atexit>
   d58f0:	2003e3f0 	.word	0x2003e3f0
   d58f4:	2003deb4 	.word	0x2003deb4
   d58f8:	000d58c5 	.word	0x000d58c5

000d58fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d58fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58fe:	4606      	mov	r6, r0
   d5900:	460d      	mov	r5, r1
   d5902:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5904:	2400      	movs	r4, #0
  while (size--) {
   d5906:	42bd      	cmp	r5, r7
   d5908:	d00c      	beq.n	d5924 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d590a:	6833      	ldr	r3, [r6, #0]
   d590c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5910:	689b      	ldr	r3, [r3, #8]
   d5912:	4630      	mov	r0, r6
   d5914:	4798      	blx	r3
     if (chunk>=0)
   d5916:	2800      	cmp	r0, #0
   d5918:	db01      	blt.n	d591e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d591a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d591c:	e7f3      	b.n	d5906 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d591e:	2c00      	cmp	r4, #0
   d5920:	bf08      	it	eq
   d5922:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5924:	4620      	mov	r0, r4
   d5926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5928 <_ZN5Print5printEPKc>:
   d5928:	b508      	push	{r3, lr}
   d592a:	f7ff f975 	bl	d4c18 <_ZN5Print5writeEPKc>
   d592e:	bd08      	pop	{r3, pc}

000d5930 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5930:	6803      	ldr	r3, [r0, #0]
   d5932:	689b      	ldr	r3, [r3, #8]
   d5934:	4718      	bx	r3

000d5936 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5936:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5938:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d593a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d593c:	f7ff fff8 	bl	d5930 <_ZN5Print5printEc>
  n += print('\n');
   d5940:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5942:	4604      	mov	r4, r0
  n += print('\n');
   d5944:	4628      	mov	r0, r5
   d5946:	f7ff fff3 	bl	d5930 <_ZN5Print5printEc>
  return n;
}
   d594a:	4420      	add	r0, r4
   d594c:	bd38      	pop	{r3, r4, r5, pc}

000d594e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d594e:	b538      	push	{r3, r4, r5, lr}
   d5950:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5952:	f7ff f961 	bl	d4c18 <_ZN5Print5writeEPKc>
   d5956:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5958:	4628      	mov	r0, r5
   d595a:	f7ff ffec 	bl	d5936 <_ZN5Print7printlnEv>
  return n;
}
   d595e:	4420      	add	r0, r4
   d5960:	bd38      	pop	{r3, r4, r5, pc}

000d5962 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5962:	b530      	push	{r4, r5, lr}
   d5964:	b08b      	sub	sp, #44	; 0x2c
   d5966:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5968:	2100      	movs	r1, #0
   d596a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d596e:	2a01      	cmp	r2, #1
   d5970:	bf98      	it	ls
   d5972:	220a      	movls	r2, #10
   d5974:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5978:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d597c:	fb05 3312 	mls	r3, r5, r2, r3
   d5980:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5984:	2b09      	cmp	r3, #9
   d5986:	bf94      	ite	ls
   d5988:	3330      	addls	r3, #48	; 0x30
   d598a:	3337      	addhi	r3, #55	; 0x37
   d598c:	b2db      	uxtb	r3, r3
   d598e:	4621      	mov	r1, r4
   d5990:	f804 3901 	strb.w	r3, [r4], #-1
   d5994:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5996:	2d00      	cmp	r5, #0
   d5998:	d1ee      	bne.n	d5978 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d599a:	f7ff f93d 	bl	d4c18 <_ZN5Print5writeEPKc>
}
   d599e:	b00b      	add	sp, #44	; 0x2c
   d59a0:	bd30      	pop	{r4, r5, pc}

000d59a2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d59a2:	b40c      	push	{r2, r3}
   d59a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d59a8:	b087      	sub	sp, #28
   d59aa:	af00      	add	r7, sp, #0
   d59ac:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d59b0:	4605      	mov	r5, r0
   d59b2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d59b6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d59b8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d59ba:	4623      	mov	r3, r4
   d59bc:	464a      	mov	r2, r9
   d59be:	2114      	movs	r1, #20
   d59c0:	1d38      	adds	r0, r7, #4
   d59c2:	f7ff fe69 	bl	d5698 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d59c6:	2813      	cmp	r0, #19
   d59c8:	d805      	bhi.n	d59d6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d59ca:	1d39      	adds	r1, r7, #4
   d59cc:	4628      	mov	r0, r5
   d59ce:	f7ff f923 	bl	d4c18 <_ZN5Print5writeEPKc>
   d59d2:	4604      	mov	r4, r0
   d59d4:	e013      	b.n	d59fe <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d59d6:	f100 0308 	add.w	r3, r0, #8
   d59da:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d59de:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d59e0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d59e4:	1c41      	adds	r1, r0, #1
   d59e6:	4623      	mov	r3, r4
   d59e8:	464a      	mov	r2, r9
   d59ea:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d59ec:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d59ee:	f7ff fe53 	bl	d5698 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d59f2:	4669      	mov	r1, sp
   d59f4:	4628      	mov	r0, r5
   d59f6:	f7ff f90f 	bl	d4c18 <_ZN5Print5writeEPKc>
   d59fa:	4604      	mov	r4, r0
   d59fc:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d59fe:	b11e      	cbz	r6, d5a08 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5a00:	4628      	mov	r0, r5
   d5a02:	f7ff ff98 	bl	d5936 <_ZN5Print7printlnEv>
   d5a06:	4404      	add	r4, r0
    return n;
}
   d5a08:	4620      	mov	r0, r4
   d5a0a:	371c      	adds	r7, #28
   d5a0c:	46bd      	mov	sp, r7
   d5a0e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a12:	b002      	add	sp, #8
   d5a14:	4770      	bx	lr
	...

000d5a18 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5a18:	4b01      	ldr	r3, [pc, #4]	; (d5a20 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5a1a:	4a02      	ldr	r2, [pc, #8]	; (d5a24 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5a1c:	601a      	str	r2, [r3, #0]
   d5a1e:	4770      	bx	lr
   d5a20:	2003e3f4 	.word	0x2003e3f4
   d5a24:	000d68d7 	.word	0x000d68d7

000d5a28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a28:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a2a:	681a      	ldr	r2, [r3, #0]
   d5a2c:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a2e:	601a      	str	r2, [r3, #0]
   d5a30:	4770      	bx	lr
   d5a32:	bf00      	nop
   d5a34:	2003de4c 	.word	0x2003de4c
   d5a38:	2003e3f8 	.word	0x2003e3f8

000d5a3c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5a3c:	2100      	movs	r1, #0
   d5a3e:	f7ff bd9f 	b.w	d5580 <system_delay_ms>

000d5a42 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a42:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5a44:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a46:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5a48:	b113      	cbz	r3, d5a50 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a4a:	2203      	movs	r2, #3
   d5a4c:	4601      	mov	r1, r0
   d5a4e:	4798      	blx	r3
    }
   d5a50:	4620      	mov	r0, r4
   d5a52:	bd10      	pop	{r4, pc}

000d5a54 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5a54:	b510      	push	{r4, lr}
   d5a56:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a58:	f7ff fff3 	bl	d5a42 <_ZNSt14_Function_baseD1Ev>
   d5a5c:	4620      	mov	r0, r4
   d5a5e:	bd10      	pop	{r4, pc}

000d5a60 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a60:	4803      	ldr	r0, [pc, #12]	; (d5a70 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5a62:	4a04      	ldr	r2, [pc, #16]	; (d5a74 <_GLOBAL__sub_I_RGB+0x14>)
   d5a64:	4904      	ldr	r1, [pc, #16]	; (d5a78 <_GLOBAL__sub_I_RGB+0x18>)
   d5a66:	2300      	movs	r3, #0
   d5a68:	6083      	str	r3, [r0, #8]
   d5a6a:	f000 bca1 	b.w	d63b0 <__aeabi_atexit>
   d5a6e:	bf00      	nop
   d5a70:	2003e3fc 	.word	0x2003e3fc
   d5a74:	2003deb4 	.word	0x2003deb4
   d5a78:	000d5a55 	.word	0x000d5a55

000d5a7c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5a7c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5a7e:	4b0c      	ldr	r3, [pc, #48]	; (d5ab0 <serialEventRun+0x34>)
   d5a80:	b133      	cbz	r3, d5a90 <serialEventRun+0x14>
   d5a82:	f000 f957 	bl	d5d34 <_Z16_fetch_usbserialv>
   d5a86:	6803      	ldr	r3, [r0, #0]
   d5a88:	691b      	ldr	r3, [r3, #16]
   d5a8a:	4798      	blx	r3
   d5a8c:	2800      	cmp	r0, #0
   d5a8e:	dc09      	bgt.n	d5aa4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5a90:	4b08      	ldr	r3, [pc, #32]	; (d5ab4 <serialEventRun+0x38>)
   d5a92:	b163      	cbz	r3, d5aae <serialEventRun+0x32>
   d5a94:	f000 f9d0 	bl	d5e38 <_Z22__fetch_global_Serial1v>
   d5a98:	6803      	ldr	r3, [r0, #0]
   d5a9a:	691b      	ldr	r3, [r3, #16]
   d5a9c:	4798      	blx	r3
   d5a9e:	2800      	cmp	r0, #0
   d5aa0:	dc03      	bgt.n	d5aaa <serialEventRun+0x2e>
   d5aa2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5aa4:	f3af 8000 	nop.w
   d5aa8:	e7f2      	b.n	d5a90 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5aaa:	f3af 8000 	nop.w
   d5aae:	bd08      	pop	{r3, pc}
	...

000d5ab8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5ab8:	b508      	push	{r3, lr}
	serialEventRun();
   d5aba:	f7ff ffdf 	bl	d5a7c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5abe:	f7ff fc6f 	bl	d53a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5ac2:	4b01      	ldr	r3, [pc, #4]	; (d5ac8 <_post_loop+0x10>)
   d5ac4:	6018      	str	r0, [r3, #0]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	2003e730 	.word	0x2003e730

000d5acc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5acc:	4802      	ldr	r0, [pc, #8]	; (d5ad8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5ace:	4a03      	ldr	r2, [pc, #12]	; (d5adc <_Z33system_initialize_user_backup_ramv+0x10>)
   d5ad0:	4903      	ldr	r1, [pc, #12]	; (d5ae0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5ad2:	1a12      	subs	r2, r2, r0
   d5ad4:	f000 bde4 	b.w	d66a0 <memcpy>
   d5ad8:	2003f400 	.word	0x2003f400
   d5adc:	2003f404 	.word	0x2003f404
   d5ae0:	000d6b90 	.word	0x000d6b90

000d5ae4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5ae4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5ae6:	2300      	movs	r3, #0
   d5ae8:	9300      	str	r3, [sp, #0]
   d5aea:	461a      	mov	r2, r3
   d5aec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5af0:	f7ff fd58 	bl	d55a4 <system_ctrl_set_result>
}
   d5af4:	b003      	add	sp, #12
   d5af6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5afc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5afc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5afe:	8843      	ldrh	r3, [r0, #2]
   d5b00:	2b0a      	cmp	r3, #10
   d5b02:	d008      	beq.n	d5b16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5b04:	2b50      	cmp	r3, #80	; 0x50
   d5b06:	d109      	bne.n	d5b1c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5b08:	4b09      	ldr	r3, [pc, #36]	; (d5b30 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5b0a:	681b      	ldr	r3, [r3, #0]
   d5b0c:	b13b      	cbz	r3, d5b1e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5b0e:	b003      	add	sp, #12
   d5b10:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5b14:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5b16:	f7ff ffe5 	bl	d5ae4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5b1a:	e006      	b.n	d5b2a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b1c:	2300      	movs	r3, #0
   d5b1e:	9300      	str	r3, [sp, #0]
   d5b20:	461a      	mov	r2, r3
   d5b22:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b26:	f7ff fd3d 	bl	d55a4 <system_ctrl_set_result>
        break;
    }
}
   d5b2a:	b003      	add	sp, #12
   d5b2c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5b30:	2003e40c 	.word	0x2003e40c

000d5b34 <module_user_init_hook>:

void module_user_init_hook()
{
   d5b34:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5b36:	4c10      	ldr	r4, [pc, #64]	; (d5b78 <module_user_init_hook+0x44>)
   d5b38:	4d10      	ldr	r5, [pc, #64]	; (d5b7c <module_user_init_hook+0x48>)
   d5b3a:	6823      	ldr	r3, [r4, #0]
   d5b3c:	42ab      	cmp	r3, r5
   d5b3e:	4b10      	ldr	r3, [pc, #64]	; (d5b80 <module_user_init_hook+0x4c>)
   d5b40:	bf0c      	ite	eq
   d5b42:	2201      	moveq	r2, #1
   d5b44:	2200      	movne	r2, #0
   d5b46:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5b48:	d002      	beq.n	d5b50 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5b4a:	f7ff ffbf 	bl	d5acc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5b4e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5b50:	f7ff fc0e 	bl	d5370 <HAL_RNG_GetRandomNumber>
   d5b54:	4604      	mov	r4, r0
    srand(seed);
   d5b56:	f000 fdb7 	bl	d66c8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5b5a:	4b0a      	ldr	r3, [pc, #40]	; (d5b84 <module_user_init_hook+0x50>)
   d5b5c:	b113      	cbz	r3, d5b64 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5b5e:	4620      	mov	r0, r4
   d5b60:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5b64:	2100      	movs	r1, #0
   d5b66:	4807      	ldr	r0, [pc, #28]	; (d5b84 <module_user_init_hook+0x50>)
   d5b68:	f7ff fd7e 	bl	d5668 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5b6c:	2100      	movs	r1, #0
   d5b6e:	4806      	ldr	r0, [pc, #24]	; (d5b88 <module_user_init_hook+0x54>)
}
   d5b70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5b74:	f7ff bd0c 	b.w	d5590 <system_ctrl_set_app_request_handler>
   d5b78:	2003f400 	.word	0x2003f400
   d5b7c:	9a271c1e 	.word	0x9a271c1e
   d5b80:	2003e410 	.word	0x2003e410
   d5b84:	00000000 	.word	0x00000000
   d5b88:	000d5afd 	.word	0x000d5afd

000d5b8c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5b8c:	4770      	bx	lr

000d5b8e <_ZN9IPAddressD0Ev>:
   d5b8e:	b510      	push	{r4, lr}
   d5b90:	2118      	movs	r1, #24
   d5b92:	4604      	mov	r4, r0
   d5b94:	f000 fc1a 	bl	d63cc <_ZdlPvj>
   d5b98:	4620      	mov	r0, r4
   d5b9a:	bd10      	pop	{r4, pc}

000d5b9c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b9e:	7d03      	ldrb	r3, [r0, #20]
   d5ba0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5ba2:	b08d      	sub	sp, #52	; 0x34
   d5ba4:	460e      	mov	r6, r1
   d5ba6:	f100 0704 	add.w	r7, r0, #4
   d5baa:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5bae:	d002      	beq.n	d5bb6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5bb0:	f100 0508 	add.w	r5, r0, #8
   d5bb4:	e018      	b.n	d5be8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bb6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bb8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bba:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bbe:	232f      	movs	r3, #47	; 0x2f
   d5bc0:	462a      	mov	r2, r5
   d5bc2:	200a      	movs	r0, #10
   d5bc4:	f7ff fc1c 	bl	d5400 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5bc8:	4628      	mov	r0, r5
   d5bca:	f000 fda5 	bl	d6718 <strlen>
   d5bce:	6833      	ldr	r3, [r6, #0]
   d5bd0:	4602      	mov	r2, r0
   d5bd2:	68db      	ldr	r3, [r3, #12]
   d5bd4:	4629      	mov	r1, r5
   d5bd6:	4630      	mov	r0, r6
   d5bd8:	4798      	blx	r3
   d5bda:	e00f      	b.n	d5bfc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5bdc:	b124      	cbz	r4, d5be8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5bde:	212e      	movs	r1, #46	; 0x2e
   d5be0:	4630      	mov	r0, r6
   d5be2:	f7ff fea5 	bl	d5930 <_ZN5Print5printEc>
   d5be6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5be8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5bec:	220a      	movs	r2, #10
   d5bee:	4630      	mov	r0, r6
   d5bf0:	f7ff feb7 	bl	d5962 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5bf4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5bf6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5bf8:	d1f0      	bne.n	d5bdc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5bfa:	4620      	mov	r0, r4
    }
    return n;
}
   d5bfc:	b00d      	add	sp, #52	; 0x34
   d5bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c00 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5c00:	b510      	push	{r4, lr}
   d5c02:	4b05      	ldr	r3, [pc, #20]	; (d5c18 <_ZN9IPAddressC1Ev+0x18>)
   d5c04:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c06:	2211      	movs	r2, #17
   d5c08:	f840 3b04 	str.w	r3, [r0], #4
   d5c0c:	2100      	movs	r1, #0
   d5c0e:	f000 fd52 	bl	d66b6 <memset>
{
    clear();
}
   d5c12:	4620      	mov	r0, r4
   d5c14:	bd10      	pop	{r4, pc}
   d5c16:	bf00      	nop
   d5c18:	000d6978 	.word	0x000d6978

000d5c1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5c1c:	4603      	mov	r3, r0
   d5c1e:	4a07      	ldr	r2, [pc, #28]	; (d5c3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5c20:	b510      	push	{r4, lr}
   d5c22:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5c26:	f101 0210 	add.w	r2, r1, #16
   d5c2a:	f851 4b04 	ldr.w	r4, [r1], #4
   d5c2e:	f843 4b04 	str.w	r4, [r3], #4
   d5c32:	4291      	cmp	r1, r2
   d5c34:	d1f9      	bne.n	d5c2a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5c36:	780a      	ldrb	r2, [r1, #0]
   d5c38:	701a      	strb	r2, [r3, #0]
}
   d5c3a:	bd10      	pop	{r4, pc}
   d5c3c:	000d6978 	.word	0x000d6978

000d5c40 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5c40:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5c42:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5c46:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5c4a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5c4e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5c52:	2304      	movs	r3, #4
   d5c54:	6041      	str	r1, [r0, #4]
   d5c56:	7503      	strb	r3, [r0, #20]
   d5c58:	bd10      	pop	{r4, pc}

000d5c5a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5c5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5c5c:	780d      	ldrb	r5, [r1, #0]
   d5c5e:	788b      	ldrb	r3, [r1, #2]
   d5c60:	784a      	ldrb	r2, [r1, #1]
   d5c62:	78c9      	ldrb	r1, [r1, #3]
   d5c64:	9100      	str	r1, [sp, #0]
   d5c66:	4629      	mov	r1, r5
   d5c68:	f7ff ffea 	bl	d5c40 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5c6c:	b003      	add	sp, #12
   d5c6e:	bd30      	pop	{r4, r5, pc}

000d5c70 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c70:	7441      	strb	r1, [r0, #17]
   d5c72:	4770      	bx	lr

000d5c74 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5c74:	4770      	bx	lr

000d5c76 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5c76:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5c78:	2100      	movs	r1, #0
   d5c7a:	7c00      	ldrb	r0, [r0, #16]
   d5c7c:	f7ff fc60 	bl	d5540 <HAL_USB_USART_Receive_Data>
}
   d5c80:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c84:	bf28      	it	cs
   d5c86:	f04f 30ff 	movcs.w	r0, #4294967295
   d5c8a:	bd08      	pop	{r3, pc}

000d5c8c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5c8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5c8e:	2101      	movs	r1, #1
   d5c90:	7c00      	ldrb	r0, [r0, #16]
   d5c92:	f7ff fc55 	bl	d5540 <HAL_USB_USART_Receive_Data>
}
   d5c96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c9a:	bf28      	it	cs
   d5c9c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ca0:	bd08      	pop	{r3, pc}

000d5ca2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5ca2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5ca4:	7c00      	ldrb	r0, [r0, #16]
   d5ca6:	f7ff fc43 	bl	d5530 <HAL_USB_USART_Available_Data_For_Write>
}
   d5caa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cae:	bd08      	pop	{r3, pc}

000d5cb0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5cb0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5cb2:	7c00      	ldrb	r0, [r0, #16]
   d5cb4:	f7ff fc34 	bl	d5520 <HAL_USB_USART_Available_Data>
}
   d5cb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cbc:	bd08      	pop	{r3, pc}

000d5cbe <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5cbe:	7c00      	ldrb	r0, [r0, #16]
   d5cc0:	f7ff bc4e 	b.w	d5560 <HAL_USB_USART_Flush_Data>

000d5cc4 <_ZN9USBSerialD0Ev>:
   d5cc4:	b510      	push	{r4, lr}
   d5cc6:	2114      	movs	r1, #20
   d5cc8:	4604      	mov	r4, r0
   d5cca:	f000 fb7f 	bl	d63cc <_ZdlPvj>
   d5cce:	4620      	mov	r0, r4
   d5cd0:	bd10      	pop	{r4, pc}

000d5cd2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5cd2:	b538      	push	{r3, r4, r5, lr}
   d5cd4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5cd6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5cd8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5cda:	f7ff fc29 	bl	d5530 <HAL_USB_USART_Available_Data_For_Write>
   d5cde:	2800      	cmp	r0, #0
   d5ce0:	dc01      	bgt.n	d5ce6 <_ZN9USBSerial5writeEh+0x14>
   d5ce2:	7c60      	ldrb	r0, [r4, #17]
   d5ce4:	b128      	cbz	r0, d5cf2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5ce6:	4629      	mov	r1, r5
   d5ce8:	7c20      	ldrb	r0, [r4, #16]
   d5cea:	f7ff fc31 	bl	d5550 <HAL_USB_USART_Send_Data>
   d5cee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5cf2:	bd38      	pop	{r3, r4, r5, pc}

000d5cf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5cf4:	b510      	push	{r4, lr}
   d5cf6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5cf8:	2300      	movs	r3, #0
   d5cfa:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d00:	60a3      	str	r3, [r4, #8]
   d5d02:	4b05      	ldr	r3, [pc, #20]	; (d5d18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5d04:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5d06:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d08:	4608      	mov	r0, r1
{
  _serial = serial;
   d5d0a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5d0c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5d0e:	4611      	mov	r1, r2
   d5d10:	f7ff fbf6 	bl	d5500 <HAL_USB_USART_Init>
}
   d5d14:	4620      	mov	r0, r4
   d5d16:	bd10      	pop	{r4, pc}
   d5d18:	000d698c 	.word	0x000d698c

000d5d1c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5d1c:	2200      	movs	r2, #0
   d5d1e:	7c00      	ldrb	r0, [r0, #16]
   d5d20:	f7ff bbf6 	b.w	d5510 <HAL_USB_USART_Begin>

000d5d24 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5d26:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d28:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5d2a:	2100      	movs	r1, #0
   d5d2c:	f000 fcc3 	bl	d66b6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5d30:	4620      	mov	r0, r4
   d5d32:	bd10      	pop	{r4, pc}

000d5d34 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5d34:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d36:	4d0e      	ldr	r5, [pc, #56]	; (d5d70 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5d38:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5d3a:	a801      	add	r0, sp, #4
   d5d3c:	f7ff fff2 	bl	d5d24 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d40:	6829      	ldr	r1, [r5, #0]
   d5d42:	f011 0401 	ands.w	r4, r1, #1
   d5d46:	d110      	bne.n	d5d6a <_Z16_fetch_usbserialv+0x36>
   d5d48:	4628      	mov	r0, r5
   d5d4a:	f7fe f9a8 	bl	d409e <__cxa_guard_acquire>
   d5d4e:	b160      	cbz	r0, d5d6a <_Z16_fetch_usbserialv+0x36>
   d5d50:	aa01      	add	r2, sp, #4
   d5d52:	4621      	mov	r1, r4
   d5d54:	4807      	ldr	r0, [pc, #28]	; (d5d74 <_Z16_fetch_usbserialv+0x40>)
   d5d56:	f7ff ffcd 	bl	d5cf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5d5a:	4628      	mov	r0, r5
   d5d5c:	f7fe f9a4 	bl	d40a8 <__cxa_guard_release>
   d5d60:	4a05      	ldr	r2, [pc, #20]	; (d5d78 <_Z16_fetch_usbserialv+0x44>)
   d5d62:	4906      	ldr	r1, [pc, #24]	; (d5d7c <_Z16_fetch_usbserialv+0x48>)
   d5d64:	4803      	ldr	r0, [pc, #12]	; (d5d74 <_Z16_fetch_usbserialv+0x40>)
   d5d66:	f000 fb23 	bl	d63b0 <__aeabi_atexit>
	return _usbserial;
}
   d5d6a:	4802      	ldr	r0, [pc, #8]	; (d5d74 <_Z16_fetch_usbserialv+0x40>)
   d5d6c:	b007      	add	sp, #28
   d5d6e:	bd30      	pop	{r4, r5, pc}
   d5d70:	2003e414 	.word	0x2003e414
   d5d74:	2003e418 	.word	0x2003e418
   d5d78:	2003deb4 	.word	0x2003deb4
   d5d7c:	000d5c75 	.word	0x000d5c75

000d5d80 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5d80:	4770      	bx	lr

000d5d82 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5d82:	7441      	strb	r1, [r0, #17]
   d5d84:	4770      	bx	lr

000d5d86 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5d86:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5d88:	7c00      	ldrb	r0, [r0, #16]
   d5d8a:	f7ff fb79 	bl	d5480 <HAL_USART_Available_Data_For_Write>
}
   d5d8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d92:	bd08      	pop	{r3, pc}

000d5d94 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5d94:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5d96:	7c00      	ldrb	r0, [r0, #16]
   d5d98:	f7ff fb4a 	bl	d5430 <HAL_USART_Available_Data>
}
   d5d9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5da0:	bd08      	pop	{r3, pc}

000d5da2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5da2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5da4:	7c00      	ldrb	r0, [r0, #16]
   d5da6:	f7ff fb53 	bl	d5450 <HAL_USART_Peek_Data>
}
   d5daa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5dae:	bf28      	it	cs
   d5db0:	f04f 30ff 	movcs.w	r0, #4294967295
   d5db4:	bd08      	pop	{r3, pc}

000d5db6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5db6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5db8:	7c00      	ldrb	r0, [r0, #16]
   d5dba:	f7ff fb41 	bl	d5440 <HAL_USART_Read_Data>
}
   d5dbe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5dc2:	bf28      	it	cs
   d5dc4:	f04f 30ff 	movcs.w	r0, #4294967295
   d5dc8:	bd08      	pop	{r3, pc}

000d5dca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5dca:	7c00      	ldrb	r0, [r0, #16]
   d5dcc:	f7ff bb48 	b.w	d5460 <HAL_USART_Flush_Data>

000d5dd0 <_ZN11USARTSerialD0Ev>:
   d5dd0:	b510      	push	{r4, lr}
   d5dd2:	2114      	movs	r1, #20
   d5dd4:	4604      	mov	r4, r0
   d5dd6:	f000 faf9 	bl	d63cc <_ZdlPvj>
   d5dda:	4620      	mov	r0, r4
   d5ddc:	bd10      	pop	{r4, pc}

000d5dde <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5dde:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5de0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5de2:	4604      	mov	r4, r0
   d5de4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5de6:	b925      	cbnz	r5, d5df2 <_ZN11USARTSerial5writeEh+0x14>
   d5de8:	7c00      	ldrb	r0, [r0, #16]
   d5dea:	f7ff fb49 	bl	d5480 <HAL_USART_Available_Data_For_Write>
   d5dee:	2800      	cmp	r0, #0
   d5df0:	dd05      	ble.n	d5dfe <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5df2:	4631      	mov	r1, r6
   d5df4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5dfa:	f7ff bb11 	b.w	d5420 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5dfe:	4628      	mov	r0, r5
   d5e00:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5e04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5e04:	b510      	push	{r4, lr}
   d5e06:	4604      	mov	r4, r0
   d5e08:	4608      	mov	r0, r1
   d5e0a:	4611      	mov	r1, r2
   d5e0c:	2200      	movs	r2, #0
   d5e0e:	6062      	str	r2, [r4, #4]
   d5e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5e14:	60a2      	str	r2, [r4, #8]
   d5e16:	4a05      	ldr	r2, [pc, #20]	; (d5e2c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5e18:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5e1a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5e1c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5e1e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5e20:	461a      	mov	r2, r3
   d5e22:	f7ff faf5 	bl	d5410 <HAL_USART_Init>
}
   d5e26:	4620      	mov	r0, r4
   d5e28:	bd10      	pop	{r4, pc}
   d5e2a:	bf00      	nop
   d5e2c:	000d69bc 	.word	0x000d69bc

000d5e30 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5e30:	7c00      	ldrb	r0, [r0, #16]
   d5e32:	f7ff bb1d 	b.w	d5470 <HAL_USART_Is_Enabled>
	...

000d5e38 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5e38:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5e3a:	4d0c      	ldr	r5, [pc, #48]	; (d5e6c <_Z22__fetch_global_Serial1v+0x34>)
   d5e3c:	6829      	ldr	r1, [r5, #0]
   d5e3e:	f011 0401 	ands.w	r4, r1, #1
   d5e42:	d111      	bne.n	d5e68 <_Z22__fetch_global_Serial1v+0x30>
   d5e44:	4628      	mov	r0, r5
   d5e46:	f7fe f92a 	bl	d409e <__cxa_guard_acquire>
   d5e4a:	b168      	cbz	r0, d5e68 <_Z22__fetch_global_Serial1v+0x30>
   d5e4c:	4a08      	ldr	r2, [pc, #32]	; (d5e70 <_Z22__fetch_global_Serial1v+0x38>)
   d5e4e:	4b09      	ldr	r3, [pc, #36]	; (d5e74 <_Z22__fetch_global_Serial1v+0x3c>)
   d5e50:	4809      	ldr	r0, [pc, #36]	; (d5e78 <_Z22__fetch_global_Serial1v+0x40>)
   d5e52:	4621      	mov	r1, r4
   d5e54:	f7ff ffd6 	bl	d5e04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5e58:	4628      	mov	r0, r5
   d5e5a:	f7fe f925 	bl	d40a8 <__cxa_guard_release>
   d5e5e:	4a07      	ldr	r2, [pc, #28]	; (d5e7c <_Z22__fetch_global_Serial1v+0x44>)
   d5e60:	4907      	ldr	r1, [pc, #28]	; (d5e80 <_Z22__fetch_global_Serial1v+0x48>)
   d5e62:	4805      	ldr	r0, [pc, #20]	; (d5e78 <_Z22__fetch_global_Serial1v+0x40>)
   d5e64:	f000 faa4 	bl	d63b0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5e68:	4803      	ldr	r0, [pc, #12]	; (d5e78 <_Z22__fetch_global_Serial1v+0x40>)
   d5e6a:	bd38      	pop	{r3, r4, r5, pc}
   d5e6c:	2003e4c4 	.word	0x2003e4c4
   d5e70:	2003e4c8 	.word	0x2003e4c8
   d5e74:	2003e440 	.word	0x2003e440
   d5e78:	2003e42c 	.word	0x2003e42c
   d5e7c:	2003deb4 	.word	0x2003deb4
   d5e80:	000d5d81 	.word	0x000d5d81

000d5e84 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5e84:	4770      	bx	lr

000d5e86 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e88:	4606      	mov	r6, r0
   d5e8a:	4615      	mov	r5, r2
   d5e8c:	460c      	mov	r4, r1
   d5e8e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5e90:	42bc      	cmp	r4, r7
   d5e92:	d006      	beq.n	d5ea2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5e94:	6833      	ldr	r3, [r6, #0]
   d5e96:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5e9a:	689b      	ldr	r3, [r3, #8]
   d5e9c:	4630      	mov	r0, r6
   d5e9e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ea0:	e7f6      	b.n	d5e90 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5ea2:	4628      	mov	r0, r5
   d5ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ea6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5ea6:	2200      	movs	r2, #0
   d5ea8:	7c00      	ldrb	r0, [r0, #16]
   d5eaa:	f7ff baf1 	b.w	d5490 <HAL_I2C_Write_Data>

000d5eae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5eae:	2100      	movs	r1, #0
   d5eb0:	7c00      	ldrb	r0, [r0, #16]
   d5eb2:	f7ff baf5 	b.w	d54a0 <HAL_I2C_Available_Data>

000d5eb6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5eb6:	2100      	movs	r1, #0
   d5eb8:	7c00      	ldrb	r0, [r0, #16]
   d5eba:	f7ff baf9 	b.w	d54b0 <HAL_I2C_Read_Data>

000d5ebe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5ebe:	2100      	movs	r1, #0
   d5ec0:	7c00      	ldrb	r0, [r0, #16]
   d5ec2:	f7ff bafd 	b.w	d54c0 <HAL_I2C_Peek_Data>

000d5ec6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5ec6:	2100      	movs	r1, #0
   d5ec8:	7c00      	ldrb	r0, [r0, #16]
   d5eca:	f7ff bb01 	b.w	d54d0 <HAL_I2C_Flush_Data>

000d5ece <_ZN7TwoWireD0Ev>:
   d5ece:	b510      	push	{r4, lr}
   d5ed0:	2114      	movs	r1, #20
   d5ed2:	4604      	mov	r4, r0
   d5ed4:	f000 fa7a 	bl	d63cc <_ZdlPvj>
   d5ed8:	4620      	mov	r0, r4
   d5eda:	bd10      	pop	{r4, pc}

000d5edc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5edc:	b510      	push	{r4, lr}
   d5ede:	4604      	mov	r4, r0
   d5ee0:	2300      	movs	r3, #0
   d5ee2:	6063      	str	r3, [r4, #4]
   d5ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ee8:	60a3      	str	r3, [r4, #8]
   d5eea:	4b04      	ldr	r3, [pc, #16]	; (d5efc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5eec:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5eee:	4608      	mov	r0, r1
   d5ef0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5ef2:	4611      	mov	r1, r2
   d5ef4:	f7ff fafc 	bl	d54f0 <HAL_I2C_Init>
}
   d5ef8:	4620      	mov	r0, r4
   d5efa:	bd10      	pop	{r4, pc}
   d5efc:	000d69ec 	.word	0x000d69ec

000d5f00 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5f00:	2100      	movs	r1, #0
   d5f02:	7c00      	ldrb	r0, [r0, #16]
   d5f04:	f7ff baec 	b.w	d54e0 <HAL_I2C_Is_Enabled>

000d5f08 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f08:	2200      	movs	r2, #0
   d5f0a:	4611      	mov	r1, r2
   d5f0c:	6840      	ldr	r0, [r0, #4]
   d5f0e:	f7ff bb8b 	b.w	d5628 <network_listening>

000d5f12 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5f12:	2200      	movs	r2, #0
   d5f14:	4611      	mov	r1, r2
   d5f16:	6840      	ldr	r0, [r0, #4]
   d5f18:	f7ff bb96 	b.w	d5648 <network_get_listen_timeout>

000d5f1c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5f1c:	2200      	movs	r2, #0
   d5f1e:	6840      	ldr	r0, [r0, #4]
   d5f20:	f7ff bb8a 	b.w	d5638 <network_set_listen_timeout>

000d5f24 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f24:	2200      	movs	r2, #0
   d5f26:	f081 0101 	eor.w	r1, r1, #1
   d5f2a:	6840      	ldr	r0, [r0, #4]
   d5f2c:	f7ff bb74 	b.w	d5618 <network_listen>

000d5f30 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5f30:	2300      	movs	r3, #0
   d5f32:	461a      	mov	r2, r3
   d5f34:	2101      	movs	r1, #1
   d5f36:	6840      	ldr	r0, [r0, #4]
   d5f38:	f7ff bb66 	b.w	d5608 <network_off>

000d5f3c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5f3c:	2300      	movs	r3, #0
   d5f3e:	461a      	mov	r2, r3
   d5f40:	4619      	mov	r1, r3
   d5f42:	6840      	ldr	r0, [r0, #4]
   d5f44:	f7ff bb58 	b.w	d55f8 <network_on>

000d5f48 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5f48:	2200      	movs	r2, #0
   d5f4a:	4611      	mov	r1, r2
   d5f4c:	6840      	ldr	r0, [r0, #4]
   d5f4e:	f7ff bb4b 	b.w	d55e8 <network_ready>

000d5f52 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f52:	2200      	movs	r2, #0
   d5f54:	4611      	mov	r1, r2
   d5f56:	6840      	ldr	r0, [r0, #4]
   d5f58:	f7ff bb36 	b.w	d55c8 <network_connecting>

000d5f5c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f5c:	2200      	movs	r2, #0
   d5f5e:	2102      	movs	r1, #2
   d5f60:	6840      	ldr	r0, [r0, #4]
   d5f62:	f7ff bb39 	b.w	d55d8 <network_disconnect>

000d5f66 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f66:	2300      	movs	r3, #0
   d5f68:	461a      	mov	r2, r3
   d5f6a:	6840      	ldr	r0, [r0, #4]
   d5f6c:	f7ff bb24 	b.w	d55b8 <network_connect>

000d5f70 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5f70:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f72:	4605      	mov	r5, r0
   d5f74:	b188      	cbz	r0, d5f9a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f76:	6804      	ldr	r4, [r0, #0]
   d5f78:	b14c      	cbz	r4, d5f8e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5f7a:	68a3      	ldr	r3, [r4, #8]
   d5f7c:	b11b      	cbz	r3, d5f86 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5f7e:	2203      	movs	r2, #3
   d5f80:	4621      	mov	r1, r4
   d5f82:	4620      	mov	r0, r4
   d5f84:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f86:	2110      	movs	r1, #16
   d5f88:	4620      	mov	r0, r4
   d5f8a:	f000 fa1f 	bl	d63cc <_ZdlPvj>
   d5f8e:	4628      	mov	r0, r5
   d5f90:	2114      	movs	r1, #20
      }
   d5f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5f96:	f000 ba19 	b.w	d63cc <_ZdlPvj>
   d5f9a:	bd38      	pop	{r3, r4, r5, pc}

000d5f9c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5f9c:	b110      	cbz	r0, d5fa4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5f9e:	6803      	ldr	r3, [r0, #0]
   d5fa0:	685b      	ldr	r3, [r3, #4]
   d5fa2:	4718      	bx	r3
   d5fa4:	4770      	bx	lr

000d5fa6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5fa6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5fa8:	6803      	ldr	r3, [r0, #0]
   d5faa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5fac:	b1bb      	cbz	r3, d5fde <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5fae:	6858      	ldr	r0, [r3, #4]
   d5fb0:	f7ff f9fe 	bl	d53b0 <os_thread_is_current>
   d5fb4:	b978      	cbnz	r0, d5fd6 <_ZN6ThreadD1Ev+0x30>
   d5fb6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5fb8:	7c5a      	ldrb	r2, [r3, #17]
   d5fba:	b912      	cbnz	r2, d5fc2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5fbc:	6858      	ldr	r0, [r3, #4]
   d5fbe:	f7ff f9ff 	bl	d53c0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5fc2:	6823      	ldr	r3, [r4, #0]
   d5fc4:	6858      	ldr	r0, [r3, #4]
   d5fc6:	f7ff fa03 	bl	d53d0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5fca:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5fcc:	2300      	movs	r3, #0
   d5fce:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5fd0:	b128      	cbz	r0, d5fde <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5fd2:	f7ff ffcd 	bl	d5f70 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fd6:	6820      	ldr	r0, [r4, #0]
   d5fd8:	b108      	cbz	r0, d5fde <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5fda:	f7ff ffc9 	bl	d5f70 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5fde:	4620      	mov	r0, r4
   d5fe0:	bd10      	pop	{r4, pc}

000d5fe2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5fe2:	b538      	push	{r3, r4, r5, lr}
   d5fe4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fe6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5fea:	b108      	cbz	r0, d5ff0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5fec:	f7fe f855 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5ff0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5ff4:	b108      	cbz	r0, d5ffa <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5ff6:	f7ff f9fb 	bl	d53f0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5ffa:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5ffe:	b135      	cbz	r5, d600e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6000:	4628      	mov	r0, r5
   d6002:	f7ff ffd0 	bl	d5fa6 <_ZN6ThreadD1Ev>
   d6006:	2104      	movs	r1, #4
   d6008:	4628      	mov	r0, r5
   d600a:	f000 f9df 	bl	d63cc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d600e:	6820      	ldr	r0, [r4, #0]
   d6010:	b108      	cbz	r0, d6016 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6012:	f7ff ffc3 	bl	d5f9c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6016:	4620      	mov	r0, r4
   d6018:	bd38      	pop	{r3, r4, r5, pc}
	...

000d601c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d601c:	b510      	push	{r4, lr}
   d601e:	4b04      	ldr	r3, [pc, #16]	; (d6030 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6020:	4604      	mov	r4, r0
   d6022:	f840 3b08 	str.w	r3, [r0], #8
   d6026:	f7ff ffdc 	bl	d5fe2 <_ZN5spark11MeshPublishD1Ev>
   d602a:	4620      	mov	r0, r4
   d602c:	bd10      	pop	{r4, pc}
   d602e:	bf00      	nop
   d6030:	000d6a14 	.word	0x000d6a14

000d6034 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6034:	b538      	push	{r3, r4, r5, lr}
   d6036:	4c0e      	ldr	r4, [pc, #56]	; (d6070 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6038:	4b0e      	ldr	r3, [pc, #56]	; (d6074 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d603a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d603c:	2500      	movs	r5, #0
   d603e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6040:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6044:	6063      	str	r3, [r4, #4]
   d6046:	60a5      	str	r5, [r4, #8]
   d6048:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d604c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6050:	f7ff f9c6 	bl	d53e0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6054:	4b08      	ldr	r3, [pc, #32]	; (d6078 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6056:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d605a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d605e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6060:	4620      	mov	r0, r4
   d6062:	4a06      	ldr	r2, [pc, #24]	; (d607c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6064:	4906      	ldr	r1, [pc, #24]	; (d6080 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d606a:	f000 b9a1 	b.w	d63b0 <__aeabi_atexit>
   d606e:	bf00      	nop
   d6070:	2003e54c 	.word	0x2003e54c
   d6074:	000d6a7c 	.word	0x000d6a7c
   d6078:	000d6a14 	.word	0x000d6a14
   d607c:	2003deb4 	.word	0x2003deb4
   d6080:	000d601d 	.word	0x000d601d

000d6084 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6084:	2200      	movs	r2, #0
   d6086:	4611      	mov	r1, r2
   d6088:	6840      	ldr	r0, [r0, #4]
   d608a:	f7ff baad 	b.w	d55e8 <network_ready>

000d608e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d608e:	2200      	movs	r2, #0
   d6090:	4611      	mov	r1, r2
   d6092:	6840      	ldr	r0, [r0, #4]
   d6094:	f7ff bac8 	b.w	d5628 <network_listening>

000d6098 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6098:	2200      	movs	r2, #0
   d609a:	4611      	mov	r1, r2
   d609c:	6840      	ldr	r0, [r0, #4]
   d609e:	f7ff bad3 	b.w	d5648 <network_get_listen_timeout>

000d60a2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d60a2:	2200      	movs	r2, #0
   d60a4:	6840      	ldr	r0, [r0, #4]
   d60a6:	f7ff bac7 	b.w	d5638 <network_set_listen_timeout>

000d60aa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d60aa:	2200      	movs	r2, #0
   d60ac:	f081 0101 	eor.w	r1, r1, #1
   d60b0:	6840      	ldr	r0, [r0, #4]
   d60b2:	f7ff bab1 	b.w	d5618 <network_listen>

000d60b6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d60b6:	2300      	movs	r3, #0
   d60b8:	461a      	mov	r2, r3
   d60ba:	4619      	mov	r1, r3
   d60bc:	6840      	ldr	r0, [r0, #4]
   d60be:	f7ff baa3 	b.w	d5608 <network_off>

000d60c2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d60c2:	2300      	movs	r3, #0
   d60c4:	461a      	mov	r2, r3
   d60c6:	4619      	mov	r1, r3
   d60c8:	6840      	ldr	r0, [r0, #4]
   d60ca:	f7ff ba95 	b.w	d55f8 <network_on>

000d60ce <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d60ce:	2200      	movs	r2, #0
   d60d0:	4611      	mov	r1, r2
   d60d2:	6840      	ldr	r0, [r0, #4]
   d60d4:	f7ff ba78 	b.w	d55c8 <network_connecting>

000d60d8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d60d8:	2200      	movs	r2, #0
   d60da:	2102      	movs	r1, #2
   d60dc:	6840      	ldr	r0, [r0, #4]
   d60de:	f7ff ba7b 	b.w	d55d8 <network_disconnect>

000d60e2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d60e2:	2300      	movs	r3, #0
   d60e4:	461a      	mov	r2, r3
   d60e6:	6840      	ldr	r0, [r0, #4]
   d60e8:	f7ff ba66 	b.w	d55b8 <network_connect>

000d60ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d60ec:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d60ee:	2204      	movs	r2, #4
   d60f0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d60f2:	4a02      	ldr	r2, [pc, #8]	; (d60fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d60f4:	601a      	str	r2, [r3, #0]
   d60f6:	4770      	bx	lr
   d60f8:	2003e720 	.word	0x2003e720
   d60fc:	000d6a48 	.word	0x000d6a48

000d6100 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6100:	2300      	movs	r3, #0
   d6102:	461a      	mov	r2, r3
   d6104:	6840      	ldr	r0, [r0, #4]
   d6106:	f7ff ba57 	b.w	d55b8 <network_connect>

000d610a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d610a:	2200      	movs	r2, #0
   d610c:	2102      	movs	r1, #2
   d610e:	6840      	ldr	r0, [r0, #4]
   d6110:	f7ff ba62 	b.w	d55d8 <network_disconnect>

000d6114 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6114:	2200      	movs	r2, #0
   d6116:	4611      	mov	r1, r2
   d6118:	6840      	ldr	r0, [r0, #4]
   d611a:	f7ff ba55 	b.w	d55c8 <network_connecting>

000d611e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d611e:	2200      	movs	r2, #0
   d6120:	4611      	mov	r1, r2
   d6122:	6840      	ldr	r0, [r0, #4]
   d6124:	f7ff ba60 	b.w	d55e8 <network_ready>

000d6128 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6128:	2300      	movs	r3, #0
   d612a:	461a      	mov	r2, r3
   d612c:	4619      	mov	r1, r3
   d612e:	6840      	ldr	r0, [r0, #4]
   d6130:	f7ff ba62 	b.w	d55f8 <network_on>

000d6134 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6134:	2300      	movs	r3, #0
   d6136:	461a      	mov	r2, r3
   d6138:	4619      	mov	r1, r3
   d613a:	6840      	ldr	r0, [r0, #4]
   d613c:	f7ff ba64 	b.w	d5608 <network_off>

000d6140 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6140:	2200      	movs	r2, #0
   d6142:	f081 0101 	eor.w	r1, r1, #1
   d6146:	6840      	ldr	r0, [r0, #4]
   d6148:	f7ff ba66 	b.w	d5618 <network_listen>

000d614c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d614c:	2200      	movs	r2, #0
   d614e:	6840      	ldr	r0, [r0, #4]
   d6150:	f7ff ba72 	b.w	d5638 <network_set_listen_timeout>

000d6154 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6154:	2200      	movs	r2, #0
   d6156:	4611      	mov	r1, r2
   d6158:	6840      	ldr	r0, [r0, #4]
   d615a:	f7ff ba75 	b.w	d5648 <network_get_listen_timeout>

000d615e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d615e:	2200      	movs	r2, #0
   d6160:	4611      	mov	r1, r2
   d6162:	6840      	ldr	r0, [r0, #4]
   d6164:	f7ff ba60 	b.w	d5628 <network_listening>

000d6168 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d616c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d616e:	b095      	sub	sp, #84	; 0x54
   d6170:	4616      	mov	r6, r2
   d6172:	460d      	mov	r5, r1
   d6174:	4607      	mov	r7, r0
    IPAddress addr;
   d6176:	f7ff fd43 	bl	d5c00 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d617a:	4621      	mov	r1, r4
   d617c:	2220      	movs	r2, #32
   d617e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6180:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6182:	f000 fa98 	bl	d66b6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6186:	2340      	movs	r3, #64	; 0x40
   d6188:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d618a:	4621      	mov	r1, r4
   d618c:	466b      	mov	r3, sp
   d618e:	aa0c      	add	r2, sp, #48	; 0x30
   d6190:	4630      	mov	r0, r6
   d6192:	f7ff f875 	bl	d5280 <netdb_getaddrinfo>
    if (!r) {
   d6196:	4604      	mov	r4, r0
   d6198:	2800      	cmp	r0, #0
   d619a:	d144      	bne.n	d6226 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d619c:	4602      	mov	r2, r0
   d619e:	2101      	movs	r1, #1
   d61a0:	6868      	ldr	r0, [r5, #4]
   d61a2:	f7ff fa21 	bl	d55e8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61a6:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d61a8:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61aa:	4622      	mov	r2, r4
   d61ac:	6868      	ldr	r0, [r5, #4]
   d61ae:	f7ff fa1b 	bl	d55e8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d61b2:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61b4:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d61b6:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d61b8:	2e00      	cmp	r6, #0
   d61ba:	d034      	beq.n	d6226 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d61bc:	2900      	cmp	r1, #0
   d61be:	d132      	bne.n	d6226 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d61c0:	6873      	ldr	r3, [r6, #4]
   d61c2:	2b02      	cmp	r3, #2
   d61c4:	d002      	beq.n	d61cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d61c6:	2b0a      	cmp	r3, #10
   d61c8:	d009      	beq.n	d61de <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d61ca:	e02a      	b.n	d6222 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d61cc:	f1b8 0f00 	cmp.w	r8, #0
   d61d0:	d027      	beq.n	d6222 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d61d2:	6971      	ldr	r1, [r6, #20]
   d61d4:	4638      	mov	r0, r7
   d61d6:	3104      	adds	r1, #4
   d61d8:	f7ff fd3f 	bl	d5c5a <_ZN9IPAddressaSEPKh>
   d61dc:	e020      	b.n	d6220 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d61de:	f1b9 0f00 	cmp.w	r9, #0
   d61e2:	d01e      	beq.n	d6222 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d61e4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d61e6:	2211      	movs	r2, #17
   d61e8:	a801      	add	r0, sp, #4
   d61ea:	f000 fa64 	bl	d66b6 <memset>
                    a.v = 6;
   d61ee:	2306      	movs	r3, #6
   d61f0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d61f4:	ad01      	add	r5, sp, #4
   d61f6:	f104 0308 	add.w	r3, r4, #8
   d61fa:	3418      	adds	r4, #24
   d61fc:	6818      	ldr	r0, [r3, #0]
   d61fe:	6859      	ldr	r1, [r3, #4]
   d6200:	462a      	mov	r2, r5
   d6202:	c203      	stmia	r2!, {r0, r1}
   d6204:	3308      	adds	r3, #8
   d6206:	42a3      	cmp	r3, r4
   d6208:	4615      	mov	r5, r2
   d620a:	d1f7      	bne.n	d61fc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d620c:	a901      	add	r1, sp, #4
   d620e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6210:	ad07      	add	r5, sp, #28
   d6212:	f7ff fd03 	bl	d5c1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6218:	1d3c      	adds	r4, r7, #4
   d621a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d621c:	682b      	ldr	r3, [r5, #0]
   d621e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6220:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6222:	69f6      	ldr	r6, [r6, #28]
   d6224:	e7c8      	b.n	d61b8 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6226:	9800      	ldr	r0, [sp, #0]
   d6228:	f7ff f822 	bl	d5270 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d622c:	4638      	mov	r0, r7
   d622e:	b015      	add	sp, #84	; 0x54
   d6230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6234 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6234:	4b02      	ldr	r3, [pc, #8]	; (d6240 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6236:	4a03      	ldr	r2, [pc, #12]	; (d6244 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6238:	601a      	str	r2, [r3, #0]
   d623a:	2200      	movs	r2, #0
   d623c:	605a      	str	r2, [r3, #4]
   d623e:	4770      	bx	lr
   d6240:	2003e728 	.word	0x2003e728
   d6244:	000d6a7c 	.word	0x000d6a7c

000d6248 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6248:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d624a:	4e18      	ldr	r6, [pc, #96]	; (d62ac <pinAvailable+0x64>)
   d624c:	6831      	ldr	r1, [r6, #0]
   d624e:	f011 0501 	ands.w	r5, r1, #1
   d6252:	4604      	mov	r4, r0
   d6254:	d10a      	bne.n	d626c <pinAvailable+0x24>
   d6256:	4630      	mov	r0, r6
   d6258:	f7fd ff21 	bl	d409e <__cxa_guard_acquire>
   d625c:	b130      	cbz	r0, d626c <pinAvailable+0x24>
   d625e:	4629      	mov	r1, r5
   d6260:	4813      	ldr	r0, [pc, #76]	; (d62b0 <pinAvailable+0x68>)
   d6262:	f7ff fa65 	bl	d5730 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6266:	4630      	mov	r0, r6
   d6268:	f7fd ff1e 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d626c:	4810      	ldr	r0, [pc, #64]	; (d62b0 <pinAvailable+0x68>)
   d626e:	f7ff fb0c 	bl	d588a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6272:	b128      	cbz	r0, d6280 <pinAvailable+0x38>
   d6274:	f1a4 030b 	sub.w	r3, r4, #11
   d6278:	2b02      	cmp	r3, #2
   d627a:	d801      	bhi.n	d6280 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d627c:	2000      	movs	r0, #0
   d627e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6280:	f000 f870 	bl	d6364 <_Z19__fetch_global_Wirev>
   d6284:	f7ff fe3c 	bl	d5f00 <_ZN7TwoWire9isEnabledEv>
   d6288:	b108      	cbz	r0, d628e <pinAvailable+0x46>
   d628a:	2c01      	cmp	r4, #1
   d628c:	d9f6      	bls.n	d627c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d628e:	f7ff fdd3 	bl	d5e38 <_Z22__fetch_global_Serial1v>
   d6292:	f7ff fdcd 	bl	d5e30 <_ZN11USARTSerial9isEnabledEv>
   d6296:	b118      	cbz	r0, d62a0 <pinAvailable+0x58>
   d6298:	f1a4 0309 	sub.w	r3, r4, #9
   d629c:	2b01      	cmp	r3, #1
   d629e:	d9ed      	bls.n	d627c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d62a0:	2c23      	cmp	r4, #35	; 0x23
   d62a2:	bf8c      	ite	hi
   d62a4:	2000      	movhi	r0, #0
   d62a6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d62a8:	bd70      	pop	{r4, r5, r6, pc}
   d62aa:	bf00      	nop
   d62ac:	2003deb8 	.word	0x2003deb8
   d62b0:	2003debc 	.word	0x2003debc

000d62b4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62b4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d62b6:	b538      	push	{r3, r4, r5, lr}
   d62b8:	4604      	mov	r4, r0
   d62ba:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62bc:	d80a      	bhi.n	d62d4 <pinMode+0x20>
   d62be:	29ff      	cmp	r1, #255	; 0xff
   d62c0:	d008      	beq.n	d62d4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d62c2:	f7ff ffc1 	bl	d6248 <pinAvailable>
   d62c6:	b128      	cbz	r0, d62d4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62c8:	4629      	mov	r1, r5
   d62ca:	4620      	mov	r0, r4
}
   d62cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62d0:	f7fe bfe6 	b.w	d52a0 <HAL_Pin_Mode>
   d62d4:	bd38      	pop	{r3, r4, r5, pc}

000d62d6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d62d6:	b538      	push	{r3, r4, r5, lr}
   d62d8:	4604      	mov	r4, r0
   d62da:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d62dc:	f7fe ffe8 	bl	d52b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d62e0:	28ff      	cmp	r0, #255	; 0xff
   d62e2:	d010      	beq.n	d6306 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d62e4:	2806      	cmp	r0, #6
   d62e6:	d804      	bhi.n	d62f2 <digitalWrite+0x1c>
   d62e8:	234d      	movs	r3, #77	; 0x4d
   d62ea:	fa23 f000 	lsr.w	r0, r3, r0
   d62ee:	07c3      	lsls	r3, r0, #31
   d62f0:	d409      	bmi.n	d6306 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d62f2:	4620      	mov	r0, r4
   d62f4:	f7ff ffa8 	bl	d6248 <pinAvailable>
   d62f8:	b128      	cbz	r0, d6306 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d62fa:	4629      	mov	r1, r5
   d62fc:	4620      	mov	r0, r4
}
   d62fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6302:	f7fe bfdd 	b.w	d52c0 <HAL_GPIO_Write>
   d6306:	bd38      	pop	{r3, r4, r5, pc}

000d6308 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6308:	b510      	push	{r4, lr}
   d630a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d630c:	f7fe ffd0 	bl	d52b0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6310:	3804      	subs	r0, #4
   d6312:	b2c0      	uxtb	r0, r0
   d6314:	2801      	cmp	r0, #1
   d6316:	d908      	bls.n	d632a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6318:	4620      	mov	r0, r4
   d631a:	f7ff ff95 	bl	d6248 <pinAvailable>
   d631e:	b120      	cbz	r0, d632a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6320:	4620      	mov	r0, r4
}
   d6322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6326:	f7fe bfd3 	b.w	d52d0 <HAL_GPIO_Read>
}
   d632a:	2000      	movs	r0, #0
   d632c:	bd10      	pop	{r4, pc}
	...

000d6330 <_Z17acquireWireBufferv>:
   d6330:	b570      	push	{r4, r5, r6, lr}
   d6332:	4604      	mov	r4, r0
   d6334:	2514      	movs	r5, #20
   d6336:	462a      	mov	r2, r5
   d6338:	4e09      	ldr	r6, [pc, #36]	; (d6360 <_Z17acquireWireBufferv+0x30>)
   d633a:	2100      	movs	r1, #0
   d633c:	f000 f9bb 	bl	d66b6 <memset>
   d6340:	8025      	strh	r5, [r4, #0]
   d6342:	2520      	movs	r5, #32
   d6344:	4631      	mov	r1, r6
   d6346:	60a5      	str	r5, [r4, #8]
   d6348:	6125      	str	r5, [r4, #16]
   d634a:	4628      	mov	r0, r5
   d634c:	f000 f840 	bl	d63d0 <_ZnajRKSt9nothrow_t>
   d6350:	4631      	mov	r1, r6
   d6352:	6060      	str	r0, [r4, #4]
   d6354:	4628      	mov	r0, r5
   d6356:	f000 f83b 	bl	d63d0 <_ZnajRKSt9nothrow_t>
   d635a:	60e0      	str	r0, [r4, #12]
   d635c:	4620      	mov	r0, r4
   d635e:	bd70      	pop	{r4, r5, r6, pc}
   d6360:	000d6aa8 	.word	0x000d6aa8

000d6364 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6364:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6366:	4d0e      	ldr	r5, [pc, #56]	; (d63a0 <_Z19__fetch_global_Wirev+0x3c>)
   d6368:	6829      	ldr	r1, [r5, #0]
   d636a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d636e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6370:	d113      	bne.n	d639a <_Z19__fetch_global_Wirev+0x36>
   d6372:	4628      	mov	r0, r5
   d6374:	f7fd fe93 	bl	d409e <__cxa_guard_acquire>
   d6378:	b178      	cbz	r0, d639a <_Z19__fetch_global_Wirev+0x36>
   d637a:	a801      	add	r0, sp, #4
   d637c:	f7ff ffd8 	bl	d6330 <_Z17acquireWireBufferv>
   d6380:	aa01      	add	r2, sp, #4
   d6382:	4621      	mov	r1, r4
   d6384:	4807      	ldr	r0, [pc, #28]	; (d63a4 <_Z19__fetch_global_Wirev+0x40>)
   d6386:	f7ff fda9 	bl	d5edc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d638a:	4628      	mov	r0, r5
   d638c:	f7fd fe8c 	bl	d40a8 <__cxa_guard_release>
   d6390:	4a05      	ldr	r2, [pc, #20]	; (d63a8 <_Z19__fetch_global_Wirev+0x44>)
   d6392:	4906      	ldr	r1, [pc, #24]	; (d63ac <_Z19__fetch_global_Wirev+0x48>)
   d6394:	4803      	ldr	r0, [pc, #12]	; (d63a4 <_Z19__fetch_global_Wirev+0x40>)
   d6396:	f000 f80b 	bl	d63b0 <__aeabi_atexit>
	return wire;
}
   d639a:	4802      	ldr	r0, [pc, #8]	; (d63a4 <_Z19__fetch_global_Wirev+0x40>)
   d639c:	b007      	add	sp, #28
   d639e:	bd30      	pop	{r4, r5, pc}
   d63a0:	2003e734 	.word	0x2003e734
   d63a4:	2003e738 	.word	0x2003e738
   d63a8:	2003deb4 	.word	0x2003deb4
   d63ac:	000d5e85 	.word	0x000d5e85

000d63b0 <__aeabi_atexit>:
   d63b0:	460b      	mov	r3, r1
   d63b2:	4601      	mov	r1, r0
   d63b4:	4618      	mov	r0, r3
   d63b6:	f000 b965 	b.w	d6684 <__cxa_atexit>
	...

000d63bc <_ZSt15get_new_handlerv>:
   d63bc:	4b02      	ldr	r3, [pc, #8]	; (d63c8 <_ZSt15get_new_handlerv+0xc>)
   d63be:	6818      	ldr	r0, [r3, #0]
   d63c0:	f3bf 8f5f 	dmb	sy
   d63c4:	4770      	bx	lr
   d63c6:	bf00      	nop
   d63c8:	2003e74c 	.word	0x2003e74c

000d63cc <_ZdlPvj>:
   d63cc:	f7fd be63 	b.w	d4096 <_ZdlPv>

000d63d0 <_ZnajRKSt9nothrow_t>:
   d63d0:	f000 b800 	b.w	d63d4 <_ZnwjRKSt9nothrow_t>

000d63d4 <_ZnwjRKSt9nothrow_t>:
   d63d4:	b510      	push	{r4, lr}
   d63d6:	2800      	cmp	r0, #0
   d63d8:	bf14      	ite	ne
   d63da:	4604      	movne	r4, r0
   d63dc:	2401      	moveq	r4, #1
   d63de:	4620      	mov	r0, r4
   d63e0:	f7ff f94a 	bl	d5678 <malloc>
   d63e4:	b920      	cbnz	r0, d63f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d63e6:	f7ff ffe9 	bl	d63bc <_ZSt15get_new_handlerv>
   d63ea:	b108      	cbz	r0, d63f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d63ec:	4780      	blx	r0
   d63ee:	e7f6      	b.n	d63de <_ZnwjRKSt9nothrow_t+0xa>
   d63f0:	bd10      	pop	{r4, pc}
	...

000d63f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d63f4:	4b18      	ldr	r3, [pc, #96]	; (d6458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d63f6:	681a      	ldr	r2, [r3, #0]
   d63f8:	07d1      	lsls	r1, r2, #31
   d63fa:	bf5c      	itt	pl
   d63fc:	2201      	movpl	r2, #1
   d63fe:	601a      	strpl	r2, [r3, #0]
   d6400:	4b16      	ldr	r3, [pc, #88]	; (d645c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6402:	681a      	ldr	r2, [r3, #0]
   d6404:	07d2      	lsls	r2, r2, #31
   d6406:	bf5c      	itt	pl
   d6408:	2201      	movpl	r2, #1
   d640a:	601a      	strpl	r2, [r3, #0]
   d640c:	4b14      	ldr	r3, [pc, #80]	; (d6460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d640e:	681a      	ldr	r2, [r3, #0]
   d6410:	07d0      	lsls	r0, r2, #31
   d6412:	bf5c      	itt	pl
   d6414:	2201      	movpl	r2, #1
   d6416:	601a      	strpl	r2, [r3, #0]
   d6418:	4b12      	ldr	r3, [pc, #72]	; (d6464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d641a:	681a      	ldr	r2, [r3, #0]
   d641c:	07d1      	lsls	r1, r2, #31
   d641e:	bf5c      	itt	pl
   d6420:	2201      	movpl	r2, #1
   d6422:	601a      	strpl	r2, [r3, #0]
   d6424:	4b10      	ldr	r3, [pc, #64]	; (d6468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6426:	681a      	ldr	r2, [r3, #0]
   d6428:	07d2      	lsls	r2, r2, #31
   d642a:	bf5c      	itt	pl
   d642c:	2201      	movpl	r2, #1
   d642e:	601a      	strpl	r2, [r3, #0]
   d6430:	4b0e      	ldr	r3, [pc, #56]	; (d646c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6432:	681a      	ldr	r2, [r3, #0]
   d6434:	07d0      	lsls	r0, r2, #31
   d6436:	bf5c      	itt	pl
   d6438:	2201      	movpl	r2, #1
   d643a:	601a      	strpl	r2, [r3, #0]
   d643c:	4b0c      	ldr	r3, [pc, #48]	; (d6470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d643e:	681a      	ldr	r2, [r3, #0]
   d6440:	07d1      	lsls	r1, r2, #31
   d6442:	bf5c      	itt	pl
   d6444:	2201      	movpl	r2, #1
   d6446:	601a      	strpl	r2, [r3, #0]
   d6448:	4b0a      	ldr	r3, [pc, #40]	; (d6474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d644a:	681a      	ldr	r2, [r3, #0]
   d644c:	07d2      	lsls	r2, r2, #31
   d644e:	bf5c      	itt	pl
   d6450:	2201      	movpl	r2, #1
   d6452:	601a      	strpl	r2, [r3, #0]
   d6454:	4770      	bx	lr
   d6456:	bf00      	nop
   d6458:	2003e76c 	.word	0x2003e76c
   d645c:	2003e768 	.word	0x2003e768
   d6460:	2003e764 	.word	0x2003e764
   d6464:	2003e760 	.word	0x2003e760
   d6468:	2003e75c 	.word	0x2003e75c
   d646c:	2003e758 	.word	0x2003e758
   d6470:	2003e754 	.word	0x2003e754
   d6474:	2003e750 	.word	0x2003e750

000d6478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6478:	4b24      	ldr	r3, [pc, #144]	; (d650c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d647a:	681a      	ldr	r2, [r3, #0]
   d647c:	07d0      	lsls	r0, r2, #31
   d647e:	bf5c      	itt	pl
   d6480:	2201      	movpl	r2, #1
   d6482:	601a      	strpl	r2, [r3, #0]
   d6484:	4b22      	ldr	r3, [pc, #136]	; (d6510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6486:	681a      	ldr	r2, [r3, #0]
   d6488:	07d1      	lsls	r1, r2, #31
   d648a:	bf5c      	itt	pl
   d648c:	2201      	movpl	r2, #1
   d648e:	601a      	strpl	r2, [r3, #0]
   d6490:	4b20      	ldr	r3, [pc, #128]	; (d6514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6492:	681a      	ldr	r2, [r3, #0]
   d6494:	07d2      	lsls	r2, r2, #31
   d6496:	bf5c      	itt	pl
   d6498:	2201      	movpl	r2, #1
   d649a:	601a      	strpl	r2, [r3, #0]
   d649c:	4b1e      	ldr	r3, [pc, #120]	; (d6518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d649e:	681a      	ldr	r2, [r3, #0]
   d64a0:	07d0      	lsls	r0, r2, #31
   d64a2:	bf5c      	itt	pl
   d64a4:	2201      	movpl	r2, #1
   d64a6:	601a      	strpl	r2, [r3, #0]
   d64a8:	4b1c      	ldr	r3, [pc, #112]	; (d651c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d64aa:	681a      	ldr	r2, [r3, #0]
   d64ac:	07d1      	lsls	r1, r2, #31
   d64ae:	bf5c      	itt	pl
   d64b0:	2201      	movpl	r2, #1
   d64b2:	601a      	strpl	r2, [r3, #0]
   d64b4:	4b1a      	ldr	r3, [pc, #104]	; (d6520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d64b6:	681a      	ldr	r2, [r3, #0]
   d64b8:	07d2      	lsls	r2, r2, #31
   d64ba:	bf5c      	itt	pl
   d64bc:	2201      	movpl	r2, #1
   d64be:	601a      	strpl	r2, [r3, #0]
   d64c0:	4b18      	ldr	r3, [pc, #96]	; (d6524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d64c2:	681a      	ldr	r2, [r3, #0]
   d64c4:	07d0      	lsls	r0, r2, #31
   d64c6:	bf5c      	itt	pl
   d64c8:	2201      	movpl	r2, #1
   d64ca:	601a      	strpl	r2, [r3, #0]
   d64cc:	4b16      	ldr	r3, [pc, #88]	; (d6528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d64ce:	681a      	ldr	r2, [r3, #0]
   d64d0:	07d1      	lsls	r1, r2, #31
   d64d2:	bf5c      	itt	pl
   d64d4:	2201      	movpl	r2, #1
   d64d6:	601a      	strpl	r2, [r3, #0]
   d64d8:	4b14      	ldr	r3, [pc, #80]	; (d652c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d64da:	681a      	ldr	r2, [r3, #0]
   d64dc:	07d2      	lsls	r2, r2, #31
   d64de:	bf5c      	itt	pl
   d64e0:	2201      	movpl	r2, #1
   d64e2:	601a      	strpl	r2, [r3, #0]
   d64e4:	4b12      	ldr	r3, [pc, #72]	; (d6530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	07d0      	lsls	r0, r2, #31
   d64ea:	bf5c      	itt	pl
   d64ec:	2201      	movpl	r2, #1
   d64ee:	601a      	strpl	r2, [r3, #0]
   d64f0:	4b10      	ldr	r3, [pc, #64]	; (d6534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d64f2:	681a      	ldr	r2, [r3, #0]
   d64f4:	07d1      	lsls	r1, r2, #31
   d64f6:	bf5c      	itt	pl
   d64f8:	2201      	movpl	r2, #1
   d64fa:	601a      	strpl	r2, [r3, #0]
   d64fc:	4b0e      	ldr	r3, [pc, #56]	; (d6538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d64fe:	681a      	ldr	r2, [r3, #0]
   d6500:	07d2      	lsls	r2, r2, #31
   d6502:	bf5c      	itt	pl
   d6504:	2201      	movpl	r2, #1
   d6506:	601a      	strpl	r2, [r3, #0]
   d6508:	4770      	bx	lr
   d650a:	bf00      	nop
   d650c:	2003e79c 	.word	0x2003e79c
   d6510:	2003e798 	.word	0x2003e798
   d6514:	2003e794 	.word	0x2003e794
   d6518:	2003e790 	.word	0x2003e790
   d651c:	2003e78c 	.word	0x2003e78c
   d6520:	2003e788 	.word	0x2003e788
   d6524:	2003e784 	.word	0x2003e784
   d6528:	2003e780 	.word	0x2003e780
   d652c:	2003e77c 	.word	0x2003e77c
   d6530:	2003e778 	.word	0x2003e778
   d6534:	2003e774 	.word	0x2003e774
   d6538:	2003e770 	.word	0x2003e770

000d653c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d653c:	4b24      	ldr	r3, [pc, #144]	; (d65d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d653e:	681a      	ldr	r2, [r3, #0]
   d6540:	07d0      	lsls	r0, r2, #31
   d6542:	bf5c      	itt	pl
   d6544:	2201      	movpl	r2, #1
   d6546:	601a      	strpl	r2, [r3, #0]
   d6548:	4b22      	ldr	r3, [pc, #136]	; (d65d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d654a:	681a      	ldr	r2, [r3, #0]
   d654c:	07d1      	lsls	r1, r2, #31
   d654e:	bf5c      	itt	pl
   d6550:	2201      	movpl	r2, #1
   d6552:	601a      	strpl	r2, [r3, #0]
   d6554:	4b20      	ldr	r3, [pc, #128]	; (d65d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6556:	681a      	ldr	r2, [r3, #0]
   d6558:	07d2      	lsls	r2, r2, #31
   d655a:	bf5c      	itt	pl
   d655c:	2201      	movpl	r2, #1
   d655e:	601a      	strpl	r2, [r3, #0]
   d6560:	4b1e      	ldr	r3, [pc, #120]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6562:	681a      	ldr	r2, [r3, #0]
   d6564:	07d0      	lsls	r0, r2, #31
   d6566:	bf5c      	itt	pl
   d6568:	2201      	movpl	r2, #1
   d656a:	601a      	strpl	r2, [r3, #0]
   d656c:	4b1c      	ldr	r3, [pc, #112]	; (d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d656e:	681a      	ldr	r2, [r3, #0]
   d6570:	07d1      	lsls	r1, r2, #31
   d6572:	bf5c      	itt	pl
   d6574:	2201      	movpl	r2, #1
   d6576:	601a      	strpl	r2, [r3, #0]
   d6578:	4b1a      	ldr	r3, [pc, #104]	; (d65e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d657a:	681a      	ldr	r2, [r3, #0]
   d657c:	07d2      	lsls	r2, r2, #31
   d657e:	bf5c      	itt	pl
   d6580:	2201      	movpl	r2, #1
   d6582:	601a      	strpl	r2, [r3, #0]
   d6584:	4b18      	ldr	r3, [pc, #96]	; (d65e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6586:	681a      	ldr	r2, [r3, #0]
   d6588:	07d0      	lsls	r0, r2, #31
   d658a:	bf5c      	itt	pl
   d658c:	2201      	movpl	r2, #1
   d658e:	601a      	strpl	r2, [r3, #0]
   d6590:	4b16      	ldr	r3, [pc, #88]	; (d65ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6592:	681a      	ldr	r2, [r3, #0]
   d6594:	07d1      	lsls	r1, r2, #31
   d6596:	bf5c      	itt	pl
   d6598:	2201      	movpl	r2, #1
   d659a:	601a      	strpl	r2, [r3, #0]
   d659c:	4b14      	ldr	r3, [pc, #80]	; (d65f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d659e:	681a      	ldr	r2, [r3, #0]
   d65a0:	07d2      	lsls	r2, r2, #31
   d65a2:	bf5c      	itt	pl
   d65a4:	2201      	movpl	r2, #1
   d65a6:	601a      	strpl	r2, [r3, #0]
   d65a8:	4b12      	ldr	r3, [pc, #72]	; (d65f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d65aa:	681a      	ldr	r2, [r3, #0]
   d65ac:	07d0      	lsls	r0, r2, #31
   d65ae:	bf5c      	itt	pl
   d65b0:	2201      	movpl	r2, #1
   d65b2:	601a      	strpl	r2, [r3, #0]
   d65b4:	4b10      	ldr	r3, [pc, #64]	; (d65f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d65b6:	681a      	ldr	r2, [r3, #0]
   d65b8:	07d1      	lsls	r1, r2, #31
   d65ba:	bf5c      	itt	pl
   d65bc:	2201      	movpl	r2, #1
   d65be:	601a      	strpl	r2, [r3, #0]
   d65c0:	4b0e      	ldr	r3, [pc, #56]	; (d65fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d65c2:	681a      	ldr	r2, [r3, #0]
   d65c4:	07d2      	lsls	r2, r2, #31
   d65c6:	bf5c      	itt	pl
   d65c8:	2201      	movpl	r2, #1
   d65ca:	601a      	strpl	r2, [r3, #0]
   d65cc:	4770      	bx	lr
   d65ce:	bf00      	nop
   d65d0:	2003e7cc 	.word	0x2003e7cc
   d65d4:	2003e7c8 	.word	0x2003e7c8
   d65d8:	2003e7c4 	.word	0x2003e7c4
   d65dc:	2003e7c0 	.word	0x2003e7c0
   d65e0:	2003e7bc 	.word	0x2003e7bc
   d65e4:	2003e7b8 	.word	0x2003e7b8
   d65e8:	2003e7b4 	.word	0x2003e7b4
   d65ec:	2003e7b0 	.word	0x2003e7b0
   d65f0:	2003e7ac 	.word	0x2003e7ac
   d65f4:	2003e7a8 	.word	0x2003e7a8
   d65f8:	2003e7a4 	.word	0x2003e7a4
   d65fc:	2003e7a0 	.word	0x2003e7a0

000d6600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6600:	4b18      	ldr	r3, [pc, #96]	; (d6664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6602:	681a      	ldr	r2, [r3, #0]
   d6604:	07d1      	lsls	r1, r2, #31
   d6606:	bf5c      	itt	pl
   d6608:	2201      	movpl	r2, #1
   d660a:	601a      	strpl	r2, [r3, #0]
   d660c:	4b16      	ldr	r3, [pc, #88]	; (d6668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d660e:	681a      	ldr	r2, [r3, #0]
   d6610:	07d2      	lsls	r2, r2, #31
   d6612:	bf5c      	itt	pl
   d6614:	2201      	movpl	r2, #1
   d6616:	601a      	strpl	r2, [r3, #0]
   d6618:	4b14      	ldr	r3, [pc, #80]	; (d666c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d661a:	681a      	ldr	r2, [r3, #0]
   d661c:	07d0      	lsls	r0, r2, #31
   d661e:	bf5c      	itt	pl
   d6620:	2201      	movpl	r2, #1
   d6622:	601a      	strpl	r2, [r3, #0]
   d6624:	4b12      	ldr	r3, [pc, #72]	; (d6670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6626:	681a      	ldr	r2, [r3, #0]
   d6628:	07d1      	lsls	r1, r2, #31
   d662a:	bf5c      	itt	pl
   d662c:	2201      	movpl	r2, #1
   d662e:	601a      	strpl	r2, [r3, #0]
   d6630:	4b10      	ldr	r3, [pc, #64]	; (d6674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6632:	681a      	ldr	r2, [r3, #0]
   d6634:	07d2      	lsls	r2, r2, #31
   d6636:	bf5c      	itt	pl
   d6638:	2201      	movpl	r2, #1
   d663a:	601a      	strpl	r2, [r3, #0]
   d663c:	4b0e      	ldr	r3, [pc, #56]	; (d6678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d663e:	681a      	ldr	r2, [r3, #0]
   d6640:	07d0      	lsls	r0, r2, #31
   d6642:	bf5c      	itt	pl
   d6644:	2201      	movpl	r2, #1
   d6646:	601a      	strpl	r2, [r3, #0]
   d6648:	4b0c      	ldr	r3, [pc, #48]	; (d667c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d664a:	681a      	ldr	r2, [r3, #0]
   d664c:	07d1      	lsls	r1, r2, #31
   d664e:	bf5c      	itt	pl
   d6650:	2201      	movpl	r2, #1
   d6652:	601a      	strpl	r2, [r3, #0]
   d6654:	4b0a      	ldr	r3, [pc, #40]	; (d6680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6656:	681a      	ldr	r2, [r3, #0]
   d6658:	07d2      	lsls	r2, r2, #31
   d665a:	bf5c      	itt	pl
   d665c:	2201      	movpl	r2, #1
   d665e:	601a      	strpl	r2, [r3, #0]
   d6660:	4770      	bx	lr
   d6662:	bf00      	nop
   d6664:	2003e7ec 	.word	0x2003e7ec
   d6668:	2003e7e8 	.word	0x2003e7e8
   d666c:	2003e7e4 	.word	0x2003e7e4
   d6670:	2003e7e0 	.word	0x2003e7e0
   d6674:	2003e7dc 	.word	0x2003e7dc
   d6678:	2003e7d8 	.word	0x2003e7d8
   d667c:	2003e7d4 	.word	0x2003e7d4
   d6680:	2003e7d0 	.word	0x2003e7d0

000d6684 <__cxa_atexit>:
   d6684:	b510      	push	{r4, lr}
   d6686:	4c05      	ldr	r4, [pc, #20]	; (d669c <__cxa_atexit+0x18>)
   d6688:	4613      	mov	r3, r2
   d668a:	b12c      	cbz	r4, d6698 <__cxa_atexit+0x14>
   d668c:	460a      	mov	r2, r1
   d668e:	4601      	mov	r1, r0
   d6690:	2002      	movs	r0, #2
   d6692:	f3af 8000 	nop.w
   d6696:	bd10      	pop	{r4, pc}
   d6698:	4620      	mov	r0, r4
   d669a:	bd10      	pop	{r4, pc}
   d669c:	00000000 	.word	0x00000000

000d66a0 <memcpy>:
   d66a0:	b510      	push	{r4, lr}
   d66a2:	1e43      	subs	r3, r0, #1
   d66a4:	440a      	add	r2, r1
   d66a6:	4291      	cmp	r1, r2
   d66a8:	d004      	beq.n	d66b4 <memcpy+0x14>
   d66aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d66ae:	f803 4f01 	strb.w	r4, [r3, #1]!
   d66b2:	e7f8      	b.n	d66a6 <memcpy+0x6>
   d66b4:	bd10      	pop	{r4, pc}

000d66b6 <memset>:
   d66b6:	4402      	add	r2, r0
   d66b8:	4603      	mov	r3, r0
   d66ba:	4293      	cmp	r3, r2
   d66bc:	d002      	beq.n	d66c4 <memset+0xe>
   d66be:	f803 1b01 	strb.w	r1, [r3], #1
   d66c2:	e7fa      	b.n	d66ba <memset+0x4>
   d66c4:	4770      	bx	lr
	...

000d66c8 <srand>:
   d66c8:	b538      	push	{r3, r4, r5, lr}
   d66ca:	4b12      	ldr	r3, [pc, #72]	; (d6714 <srand+0x4c>)
   d66cc:	681c      	ldr	r4, [r3, #0]
   d66ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d66d0:	4605      	mov	r5, r0
   d66d2:	b9d3      	cbnz	r3, d670a <srand+0x42>
   d66d4:	2018      	movs	r0, #24
   d66d6:	f7fe ffcf 	bl	d5678 <malloc>
   d66da:	f243 330e 	movw	r3, #13070	; 0x330e
   d66de:	63a0      	str	r0, [r4, #56]	; 0x38
   d66e0:	8003      	strh	r3, [r0, #0]
   d66e2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d66e6:	8043      	strh	r3, [r0, #2]
   d66e8:	f241 2334 	movw	r3, #4660	; 0x1234
   d66ec:	8083      	strh	r3, [r0, #4]
   d66ee:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d66f2:	80c3      	strh	r3, [r0, #6]
   d66f4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d66f8:	8103      	strh	r3, [r0, #8]
   d66fa:	2305      	movs	r3, #5
   d66fc:	8143      	strh	r3, [r0, #10]
   d66fe:	230b      	movs	r3, #11
   d6700:	8183      	strh	r3, [r0, #12]
   d6702:	2201      	movs	r2, #1
   d6704:	2300      	movs	r3, #0
   d6706:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d670a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d670c:	2200      	movs	r2, #0
   d670e:	611d      	str	r5, [r3, #16]
   d6710:	615a      	str	r2, [r3, #20]
   d6712:	bd38      	pop	{r3, r4, r5, pc}
   d6714:	2003deb0 	.word	0x2003deb0

000d6718 <strlen>:
   d6718:	4603      	mov	r3, r0
   d671a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d671e:	2a00      	cmp	r2, #0
   d6720:	d1fb      	bne.n	d671a <strlen+0x2>
   d6722:	1a18      	subs	r0, r3, r0
   d6724:	3801      	subs	r0, #1
   d6726:	4770      	bx	lr

000d6728 <dynalib_user>:
   d6728:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6738:	0000 0000                                   ....

000d673c <_ZTVN8particle13__SPISettingsE>:
	...
   d6744:	40d5 000d                                   .@..

000d6748 <_ZTV4File>:
	...
   d6750:	40cb 000d 412d 000d 4177 000d 40cd 000d     .@..-A..wA...@..
   d6760:	40af 000d 4147 000d 4141 000d 413b 000d     .@..GA..AA..;A..
   d6770:	ff7e 0006 0001 0000 ef00 6564 6166 6c75     ~.........defaul
   d6780:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   d6790:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   d67a0:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   d67b0:	6c25 2075 7325 4d20 444f 2545 3e64 4400     %lu %s MODE%d>.D
   d67c0:	5046 616c 6579 2072 6e69 7469 4900 696e     FPlayer init.Ini
   d67d0:	6974 6c61 7a69 7461 6f69 206e 6966 696e     tialization fini
   d67e0:	6873 6465 7000 7869 6c65 6220 6972 6867     shed.pixel brigh
   d67f0:	6e74 7365 3a73 2520 2069 000a 6974 656d     tness: %i ..time
   d6800:	7473 6d61 3a70 0020 c000 4001 1000 4002     stamp: ....@...@
   d6810:	2000 4002                                   . .@

000d6814 <CSWTCH.65>:
   d6814:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d6824:	0050 0000                                   P...

000d6828 <_ZTVN5spark13EthernetClassE>:
	...
   d6830:	5707 000d 56fd 000d 56f3 000d 56e9 000d     .W...V...V...V..
   d6840:	56dd 000d 56d1 000d 56c5 000d 56bd 000d     .V...V...V...V..
   d6850:	56b3 000d 56a9 000d 6169 000d               .V...V..ia..

000d685c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d685c:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d686c:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d687c:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d688c:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d689c:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d68ac:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d68bc:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d68cc:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d68dc:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d68ec:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d68fc:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d690c:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d691c:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d692c:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d693c:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d694c:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d695c:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d696c:	0065 0000                                   e...

000d6970 <_ZTV9IPAddress>:
	...
   d6978:	5b9d 000d 5b8d 000d 5b8f 000d               .[...[...[..

000d6984 <_ZTV9USBSerial>:
	...
   d698c:	5c75 000d 5cc5 000d 5cd3 000d 58fd 000d     u\...\...\...X..
   d699c:	5cb1 000d 5c77 000d 5c8d 000d 5cbf 000d     .\..w\...\...\..
   d69ac:	5ca3 000d 5c71 000d                         .\..q\..

000d69b4 <_ZTV11USARTSerial>:
	...
   d69bc:	5d81 000d 5dd1 000d 5ddf 000d 58fd 000d     .]...]...]...X..
   d69cc:	5d95 000d 5db7 000d 5da3 000d 5dcb 000d     .]...]...]...]..
   d69dc:	5d83 000d 5d87 000d                         .]...]..

000d69e4 <_ZTV7TwoWire>:
	...
   d69ec:	5e85 000d 5ecf 000d 5ea7 000d 5e87 000d     .^...^...^...^..
   d69fc:	5eaf 000d 5eb7 000d 5ebf 000d 5ec7 000d     .^...^...^...^..

000d6a0c <_ZTVN5spark9MeshClassE>:
	...
   d6a14:	5f67 000d 5f5d 000d 5f53 000d 5f49 000d     g_..]_..S_..I_..
   d6a24:	5f3d 000d 5f31 000d 5f25 000d 5f1d 000d     =_..1_..%_..._..
   d6a34:	5f13 000d 5f09 000d 6169 000d               ._..._..ia..

000d6a40 <_ZTVN5spark9WiFiClassE>:
	...
   d6a48:	60e3 000d 60d9 000d 60cf 000d 6085 000d     .`...`...`...`..
   d6a58:	60c3 000d 60b7 000d 60ab 000d 60a3 000d     .`...`...`...`..
   d6a68:	6099 000d 608f 000d 6169 000d               .`...`..ia..

000d6a74 <_ZTVN5spark12NetworkClassE>:
	...
   d6a7c:	6101 000d 610b 000d 6115 000d 611f 000d     .a...a...a...a..
   d6a8c:	6129 000d 6135 000d 6141 000d 614d 000d     )a..5a..Aa..Ma..
   d6a9c:	6155 000d 615f 000d 6169 000d               Ua.._a..ia..

000d6aa8 <_ZSt7nothrow>:
   d6aa8:	0000 0000                                   ....

000d6aac <__sf_fake_stdin>:
	...

000d6acc <__sf_fake_stdout>:
	...

000d6aec <__sf_fake_stderr>:
	...
   d6b0c:	0043                                        C.

000d6b0e <link_const_variable_data_end>:
	...

000d6b10 <link_constructors_location>:
   d6b10:	000d424d 	.word	0x000d424d
   d6b14:	000d4775 	.word	0x000d4775
   d6b18:	000d4789 	.word	0x000d4789
   d6b1c:	000d478d 	.word	0x000d478d
   d6b20:	000d4791 	.word	0x000d4791
   d6b24:	000d47af 	.word	0x000d47af
   d6b28:	000d47b3 	.word	0x000d47b3
   d6b2c:	000d47b7 	.word	0x000d47b7
   d6b30:	000d47bb 	.word	0x000d47bb
   d6b34:	000d4c15 	.word	0x000d4c15
   d6b38:	000d4c39 	.word	0x000d4c39
   d6b3c:	000d4c3d 	.word	0x000d4c3d
   d6b40:	000d4e23 	.word	0x000d4e23
   d6b44:	000d4e27 	.word	0x000d4e27
   d6b48:	000d4e2b 	.word	0x000d4e2b
   d6b4c:	000d51e1 	.word	0x000d51e1
   d6b50:	000d51e5 	.word	0x000d51e5
   d6b54:	000d51e9 	.word	0x000d51e9
   d6b58:	000d526d 	.word	0x000d526d
   d6b5c:	000d5711 	.word	0x000d5711
   d6b60:	000d5891 	.word	0x000d5891
   d6b64:	000d58d5 	.word	0x000d58d5
   d6b68:	000d5a19 	.word	0x000d5a19
   d6b6c:	000d5a29 	.word	0x000d5a29
   d6b70:	000d5a61 	.word	0x000d5a61
   d6b74:	000d6035 	.word	0x000d6035
   d6b78:	000d60ed 	.word	0x000d60ed
   d6b7c:	000d6235 	.word	0x000d6235
   d6b80:	000d63f5 	.word	0x000d63f5
   d6b84:	000d6479 	.word	0x000d6479
   d6b88:	000d653d 	.word	0x000d653d
   d6b8c:	000d6601 	.word	0x000d6601
