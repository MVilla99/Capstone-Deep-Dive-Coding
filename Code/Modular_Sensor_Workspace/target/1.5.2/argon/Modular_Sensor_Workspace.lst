
c:/Users/mauri/Documents/IoTc2/Capstone-Deep-Dive-Coding/Code/Modular_Sensor_Workspace/target/1.5.2/argon/Modular_Sensor_Workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005534  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9550  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000047c  2003d8b4  000d9554  0001d8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ac0  2003dd30  2003dd30  0002dd30  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d99d0  000d99d0  000299d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d99f8  000d99f8  000299f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b4b79  00000000  00000000  000299fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00022c43  00000000  00000000  001de575  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002e360  00000000  00000000  002011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003388  00000000  00000000  0022f518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000060a8  00000000  00000000  002328a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00054462  00000000  00000000  00238948  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005fcce  00000000  00000000  0028cdaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001128d9  00000000  00000000  002eca78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f67c  00000000  00000000  003ff354  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fb2f 	bl	d8690 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fb34 	bl	d86a6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d8b4 	.word	0x2003d8b4
   d4048:	000d9554 	.word	0x000d9554
   d404c:	2003dd30 	.word	0x2003dd30
   d4050:	2003dd30 	.word	0x2003dd30
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fa07 	bl	d746c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9550 	.word	0x000d9550
   d4080:	000d94bc 	.word	0x000d94bc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8ae 	b.w	d41e4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f95d 	bl	d4348 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 b9ad 	b.w	d73f0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bedf 	b.w	d6e58 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 bee5 	b.w	d6e68 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 bee3 	b.w	d6e68 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fe40 	bl	d6d30 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6a81 	.word	0x000d6a81

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40c8:	7c03      	ldrb	r3, [r0, #16]
   d40ca:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40ce:	4602      	mov	r2, r0
   d40d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40d4:	b12b      	cbz	r3, d40e2 <_ZN4File9availableEv+0x1a>
   d40d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40d8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40da:	1a18      	subs	r0, r3, r0
   d40dc:	bf48      	it	mi
   d40de:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40e2:	4770      	bx	lr

000d40e4 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40e4:	4770      	bx	lr

000d40e6 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40e6:	4770      	bx	lr

000d40e8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40e8:	4770      	bx	lr
	...

000d40ec <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40ee:	4602      	mov	r2, r0
   d40f0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40f2:	7913      	ldrb	r3, [r2, #4]
   d40f4:	6895      	ldr	r5, [r2, #8]
   d40f6:	b133      	cbz	r3, d4106 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40f8:	b93d      	cbnz	r5, d410a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40fa:	490c      	ldr	r1, [pc, #48]	; (d412c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40fc:	b004      	add	sp, #16
   d40fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d4102:	f003 b8a1 	b.w	d7248 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4106:	4b0a      	ldr	r3, [pc, #40]	; (d4130 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4108:	e000      	b.n	d410c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d410a:	4b0a      	ldr	r3, [pc, #40]	; (d4134 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d410c:	7b16      	ldrb	r6, [r2, #12]
   d410e:	4c0a      	ldr	r4, [pc, #40]	; (d4138 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4110:	490a      	ldr	r1, [pc, #40]	; (d413c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4112:	7b52      	ldrb	r2, [r2, #13]
   d4114:	9202      	str	r2, [sp, #8]
   d4116:	2e01      	cmp	r6, #1
   d4118:	bf08      	it	eq
   d411a:	4621      	moveq	r1, r4
   d411c:	9101      	str	r1, [sp, #4]
   d411e:	9500      	str	r5, [sp, #0]
   d4120:	4a07      	ldr	r2, [pc, #28]	; (d4140 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4122:	2100      	movs	r1, #0
   d4124:	f003 f8cd 	bl	d72c2 <_ZN5Print11printf_implEbPKcz>
  }
   d4128:	b004      	add	sp, #16
   d412a:	bd70      	pop	{r4, r5, r6, pc}
   d412c:	000d8781 	.word	0x000d8781
   d4130:	000d8f7d 	.word	0x000d8f7d
   d4134:	000d8770 	.word	0x000d8770
   d4138:	000d8779 	.word	0x000d8779
   d413c:	000d877d 	.word	0x000d877d
   d4140:	000d8797 	.word	0x000d8797

000d4144 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4144:	3010      	adds	r0, #16
   d4146:	f001 be33 	b.w	d5db0 <_ZN7FatFile4syncEv>

000d414a <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d414a:	3010      	adds	r0, #16
   d414c:	f001 bdd3 	b.w	d5cf6 <_ZN7FatFile4peekEv>

000d4150 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4150:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4152:	2201      	movs	r2, #1
   d4154:	f10d 0107 	add.w	r1, sp, #7
   d4158:	3010      	adds	r0, #16
   d415a:	f001 fd19 	bl	d5b90 <_ZN7FatFile4readEPvj>
   d415e:	2801      	cmp	r0, #1
   d4160:	bf0c      	ite	eq
   d4162:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4166:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d416a:	b003      	add	sp, #12
   d416c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4170 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4170:	3010      	adds	r0, #16
   d4172:	f001 be5b 	b.w	d5e2c <_ZN7FatFile5writeEPKvj>

000d4176 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4176:	b507      	push	{r0, r1, r2, lr}
   d4178:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d417a:	2201      	movs	r2, #1
   d417c:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4180:	3010      	adds	r0, #16
   d4182:	4619      	mov	r1, r3
   d4184:	f001 fe52 	bl	d5e2c <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4188:	b003      	add	sp, #12
   d418a:	f85d fb04 	ldr.w	pc, [sp], #4

000d418e <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d418e:	b510      	push	{r4, lr}
   d4190:	2134      	movs	r1, #52	; 0x34
   d4192:	4604      	mov	r4, r0
   d4194:	f004 f912 	bl	d83bc <_ZdlPvj>
   d4198:	4620      	mov	r0, r4
   d419a:	bd10      	pop	{r4, pc}

000d419c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d419c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d419e:	6984      	ldr	r4, [r0, #24]
   d41a0:	4b0a      	ldr	r3, [pc, #40]	; (d41cc <_ZN9TCPClientD1Ev+0x30>)
   d41a2:	6003      	str	r3, [r0, #0]
   d41a4:	4605      	mov	r5, r0
   d41a6:	b17c      	cbz	r4, d41c8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41a8:	6863      	ldr	r3, [r4, #4]
   d41aa:	3b01      	subs	r3, #1
   d41ac:	6063      	str	r3, [r4, #4]
   d41ae:	b95b      	cbnz	r3, d41c8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d41b0:	6823      	ldr	r3, [r4, #0]
   d41b2:	4620      	mov	r0, r4
   d41b4:	689b      	ldr	r3, [r3, #8]
   d41b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41b8:	68a3      	ldr	r3, [r4, #8]
   d41ba:	3b01      	subs	r3, #1
   d41bc:	60a3      	str	r3, [r4, #8]
   d41be:	b91b      	cbnz	r3, d41c8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d41c0:	6823      	ldr	r3, [r4, #0]
   d41c2:	4620      	mov	r0, r4
   d41c4:	68db      	ldr	r3, [r3, #12]
   d41c6:	4798      	blx	r3
   d41c8:	4628      	mov	r0, r5
   d41ca:	bd38      	pop	{r3, r4, r5, pc}
   d41cc:	000d9390 	.word	0x000d9390

000d41d0 <_ZN9TCPClientD0Ev>:
   d41d0:	b510      	push	{r4, lr}
   d41d2:	4604      	mov	r4, r0
   d41d4:	f7ff ffe2 	bl	d419c <_ZN9TCPClientD1Ev>
   d41d8:	4620      	mov	r0, r4
   d41da:	211c      	movs	r1, #28
   d41dc:	f004 f8ee 	bl	d83bc <_ZdlPvj>
   d41e0:	4620      	mov	r0, r4
   d41e2:	bd10      	pop	{r4, pc}

000d41e4 <setup>:
float temp;
float press;
float hum;
float alt;

void setup() {
   d41e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Serial.begin(9600);
   d41e6:	f003 fa57 	bl	d7698 <_Z16_fetch_usbserialv>
   d41ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41ee:	f003 fa47 	bl	d7680 <_ZN9USBSerial5beginEl>
  delay(100); // waiting for serial monitor to initialize 
   d41f2:	2064      	movs	r0, #100	; 0x64
   d41f4:	f003 f8be 	bl	d7374 <delay>
  Wire.begin();
   d41f8:	f004 f8ac 	bl	d8354 <_Z19__fetch_global_Wirev>
   d41fc:	f003 fb32 	bl	d7864 <_ZN7TwoWire5beginEv>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4200:	223c      	movs	r2, #60	; 0x3c
   d4202:	2102      	movs	r1, #2
   d4204:	482e      	ldr	r0, [pc, #184]	; (d42c0 <setup+0xdc>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4206:	4c2f      	ldr	r4, [pc, #188]	; (d42c4 <setup+0xe0>)
   d4208:	f001 f8b0 	bl	d536c <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   d420c:	482c      	ldr	r0, [pc, #176]	; (d42c0 <setup+0xdc>)
   d420e:	f001 f97f 	bl	d5510 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();
   d4212:	482b      	ldr	r0, [pc, #172]	; (d42c0 <setup+0xdc>)
   d4214:	f001 f85a 	bl	d52cc <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4218:	4829      	ldr	r0, [pc, #164]	; (d42c0 <setup+0xdc>)
   d421a:	f001 f979 	bl	d5510 <_ZN16Adafruit_SSD13067displayEv>

  pixel.begin();
   d421e:	482a      	ldr	r0, [pc, #168]	; (d42c8 <setup+0xe4>)
   d4220:	f000 fc26 	bl	d4a70 <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.show();
   d4224:	4828      	ldr	r0, [pc, #160]	; (d42c8 <setup+0xe4>)
   d4226:	f000 fc59 	bl	d4adc <_ZN17Adafruit_NeoPixel4showEv>

  bme.begin(0x76);
   d422a:	2176      	movs	r1, #118	; 0x76
   d422c:	4827      	ldr	r0, [pc, #156]	; (d42cc <setup+0xe8>)
   d422e:	f000 fbe3 	bl	d49f8 <_ZN15Adafruit_BME2805beginEh>
  senseAQ.init();
   d4232:	4827      	ldr	r0, [pc, #156]	; (d42d0 <setup+0xec>)
   d4234:	f002 fb4d 	bl	d68d2 <_ZN16AirQualitySensor4initEv>
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4238:	4b26      	ldr	r3, [pc, #152]	; (d42d4 <setup+0xf0>)
   d423a:	4a27      	ldr	r2, [pc, #156]	; (d42d8 <setup+0xf4>)
   d423c:	9300      	str	r3, [sp, #0]
   d423e:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d4242:	2300      	movs	r3, #0
   d4244:	f88d 3004 	strb.w	r3, [sp, #4]
   d4248:	9202      	str	r2, [sp, #8]
   d424a:	2501      	movs	r5, #1
   d424c:	f88d 300d 	strb.w	r3, [sp, #13]
   d4250:	220e      	movs	r2, #14
   d4252:	466b      	mov	r3, sp
   d4254:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d4258:	4630      	mov	r0, r6
   d425a:	f88d 500c 	strb.w	r5, [sp, #12]
   d425e:	f002 f90f 	bl	d6480 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4262:	b330      	cbz	r0, d42b2 <setup+0xce>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d4264:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4268:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d426a:	f001 fdd7 	bl	d5e1c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d426e:	4629      	mov	r1, r5
   d4270:	4620      	mov	r0, r4
   d4272:	f001 ffae 	bl	d61d2 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4276:	4601      	mov	r1, r0
   d4278:	b140      	cbz	r0, d428c <setup+0xa8>
   d427a:	4c12      	ldr	r4, [pc, #72]	; (d42c4 <setup+0xe0>)
   d427c:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d4280:	4621      	mov	r1, r4
   d4282:	4628      	mov	r0, r5
   d4284:	f001 fc6c 	bl	d5b60 <_ZN7FatFile8openRootEP9FatVolume>
   d4288:	b198      	cbz	r0, d42b2 <setup+0xce>
   d428a:	e005      	b.n	d4298 <setup+0xb4>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d428c:	4620      	mov	r0, r4
   d428e:	f001 ffa0 	bl	d61d2 <_ZN9FatVolume4initEh>
   d4292:	2800      	cmp	r0, #0
   d4294:	d1f1      	bne.n	d427a <setup+0x96>
   d4296:	e00c      	b.n	d42b2 <setup+0xce>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4298:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d429c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d42a0:	d007      	beq.n	d42b2 <setup+0xce>
      return false;
    }
    m_cwd = dir;
   d42a2:	4b0e      	ldr	r3, [pc, #56]	; (d42dc <setup+0xf8>)
   d42a4:	601d      	str	r5, [r3, #0]

  if(!SD.begin(SD_CS_PIN)){
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("SD init");
   d42a6:	f003 f9f7 	bl	d7698 <_Z16_fetch_usbserialv>
   d42aa:	490d      	ldr	r1, [pc, #52]	; (d42e0 <setup+0xfc>)
   d42ac:	f002 ffdf 	bl	d726e <_ZN5Print7printlnEPKc>
   d42b0:	e004      	b.n	d42bc <setup+0xd8>

  bme.begin(0x76);
  senseAQ.init();

  if(!SD.begin(SD_CS_PIN)){
    Serial.println("initialization failed!");
   d42b2:	f003 f9f1 	bl	d7698 <_Z16_fetch_usbserialv>
   d42b6:	490b      	ldr	r1, [pc, #44]	; (d42e4 <setup+0x100>)
   d42b8:	f002 ffd9 	bl	d726e <_ZN5Print7printlnEPKc>
    Serial.println("FILE_BASE_NAME too long");
    while(1);
  }
  file.printf("timestamp, whatever data"); // printing data header. "timestamp" and "data" are remanents
  */
}
   d42bc:	b004      	add	sp, #16
   d42be:	bd70      	pop	{r4, r5, r6, pc}
   d42c0:	2003e304 	.word	0x2003e304
   d42c4:	2003de64 	.word	0x2003de64
   d42c8:	2003e37c 	.word	0x2003e37c
   d42cc:	2003dd4c 	.word	0x2003dd4c
   d42d0:	2003e2e8 	.word	0x2003e2e8
   d42d4:	000d8744 	.word	0x000d8744
   d42d8:	02faf080 	.word	0x02faf080
   d42dc:	2003e3cc 	.word	0x2003e3cc
   d42e0:	000d87b5 	.word	0x000d87b5
   d42e4:	000d87bd 	.word	0x000d87bd

000d42e8 <_Z14highQualityLEDv>:
  }
  // could also write a statement for "high decibel reading" warning could read as follows; "decibel reading above nominal parameters, ear protection reccomended"
}


void highQualityLED(){
   d42e8:	b510      	push	{r4, lr}
  pixel.clear();
   d42ea:	4c0a      	ldr	r4, [pc, #40]	; (d4314 <_Z14highQualityLEDv+0x2c>)
   d42ec:	4620      	mov	r0, r4
   d42ee:	f000 fe08 	bl	d4f02 <_ZN17Adafruit_NeoPixel5clearEv>
  pixel.setPixelColor(pixNum, green);
   d42f2:	4b09      	ldr	r3, [pc, #36]	; (d4318 <_Z14highQualityLEDv+0x30>)
   d42f4:	4620      	mov	r0, r4
   d42f6:	8819      	ldrh	r1, [r3, #0]
   d42f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   d42fc:	f000 fd90 	bl	d4e20 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.setBrightness(luminoscity);
   d4300:	4b06      	ldr	r3, [pc, #24]	; (d431c <_Z14highQualityLEDv+0x34>)
   d4302:	4620      	mov	r0, r4
   d4304:	7819      	ldrb	r1, [r3, #0]
   d4306:	f000 fdd6 	bl	d4eb6 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  pixel.show();
   d430a:	4620      	mov	r0, r4
}
   d430c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void highQualityLED(){
  pixel.clear();
  pixel.setPixelColor(pixNum, green);
  pixel.setBrightness(luminoscity);
  pixel.show();
   d4310:	f000 bbe4 	b.w	d4adc <_ZN17Adafruit_NeoPixel4showEv>
   d4314:	2003e37c 	.word	0x2003e37c
   d4318:	2003d8b4 	.word	0x2003d8b4
   d431c:	2003e344 	.word	0x2003e344

000d4320 <_Z13ledBrightnessv>:
}

  // photoresistor fully covered is at 37k
  // with flourescent lights its 22k
  // with flashlight on top of it, its ~20 
void ledBrightness(){
   d4320:	b507      	push	{r0, r1, r2, lr}
  int pVal;
  int pPin = A1;
  pVal = analogRead(pPin);
   d4322:	2012      	movs	r0, #18
   d4324:	f003 ffc1 	bl	d82aa <analogRead>
  luminoscity = map(pVal, 40, 3000,10,255);
   d4328:	23ff      	movs	r3, #255	; 0xff
   d432a:	9300      	str	r3, [sp, #0]
   d432c:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d4330:	230a      	movs	r3, #10
   d4332:	2128      	movs	r1, #40	; 0x28
   d4334:	f003 f812 	bl	d735c <_Z3mapiiiii>
   d4338:	4b02      	ldr	r3, [pc, #8]	; (d4344 <_Z13ledBrightnessv+0x24>)
   d433a:	6018      	str	r0, [r3, #0]
   d433c:	b003      	add	sp, #12
   d433e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4342:	bf00      	nop
   d4344:	2003e344 	.word	0x2003e344

000d4348 <loop>:
  file.printf("timestamp, whatever data"); // printing data header. "timestamp" and "data" are remanents
  */
}


void loop() {
   d4348:	b508      	push	{r3, lr}
//MQTT_connect(); // still need to impliment the subscribe/publish code.
  ledBrightness();
   d434a:	f7ff ffe9 	bl	d4320 <_Z13ledBrightnessv>
  highQualityLED();
}
   d434e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}


void loop() {
//MQTT_connect(); // still need to impliment the subscribe/publish code.
  ledBrightness();
  highQualityLED();
   d4352:	f7ff bfc9 	b.w	d42e8 <_Z14highQualityLEDv>

000d4356 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d4356:	b510      	push	{r4, lr}
   d4358:	21d4      	movs	r1, #212	; 0xd4
   d435a:	4604      	mov	r4, r0
   d435c:	f004 f82e 	bl	d83bc <_ZdlPvj>
   d4360:	4620      	mov	r0, r4
   d4362:	bd10      	pop	{r4, pc}

000d4364 <_ZN16Adafruit_SSD1306D0Ev>:
   d4364:	b510      	push	{r4, lr}
   d4366:	2124      	movs	r1, #36	; 0x24
   d4368:	4604      	mov	r4, r0
   d436a:	f004 f827 	bl	d83bc <_ZdlPvj>
   d436e:	4620      	mov	r0, r4
   d4370:	bd10      	pop	{r4, pc}
	...

000d4374 <_GLOBAL__sub_I_i>:
void ledBrightness(){
  int pVal;
  int pPin = A1;
  pVal = analogRead(pPin);
  luminoscity = map(pVal, 40, 3000,10,255);
   d4374:	b573      	push	{r0, r1, r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4376:	f002 fad3 	bl	d6920 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d437a:	4b40      	ldr	r3, [pc, #256]	; (d447c <_GLOBAL__sub_I_i+0x108>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d437c:	4e40      	ldr	r6, [pc, #256]	; (d4480 <_GLOBAL__sub_I_i+0x10c>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d437e:	2164      	movs	r1, #100	; 0x64
   d4380:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4384:	493f      	ldr	r1, [pc, #252]	; (d4484 <_GLOBAL__sub_I_i+0x110>)
   d4386:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d438a:	2101      	movs	r1, #1
   d438c:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d4390:	6831      	ldr	r1, [r6, #0]
   d4392:	2200      	movs	r2, #0
   d4394:	f011 0501 	ands.w	r5, r1, #1
   d4398:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d439a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d439e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d43a2:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d43a6:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d43aa:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d43ae:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d43b2:	461c      	mov	r4, r3
   d43b4:	d10a      	bne.n	d43cc <_GLOBAL__sub_I_i+0x58>
   d43b6:	4630      	mov	r0, r6
   d43b8:	f7ff fe7e 	bl	d40b8 <__cxa_guard_acquire>
   d43bc:	b130      	cbz	r0, d43cc <_GLOBAL__sub_I_i+0x58>
   d43be:	4629      	mov	r1, r5
   d43c0:	4831      	ldr	r0, [pc, #196]	; (d4488 <_GLOBAL__sub_I_i+0x114>)
   d43c2:	f002 fdad 	bl	d6f20 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d43c6:	4630      	mov	r0, r6
   d43c8:	f7ff fe7b 	bl	d40c2 <__cxa_guard_release>
   d43cc:	482f      	ldr	r0, [pc, #188]	; (d448c <_GLOBAL__sub_I_i+0x118>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d43ce:	4b2e      	ldr	r3, [pc, #184]	; (d4488 <_GLOBAL__sub_I_i+0x114>)
  #define SD_CS_PIN SS
  #define error(msg) sd.errorHalt(msg)


/*      for subscribing | publishing        */
  TCPClient TheClient;
   d43d0:	4e2f      	ldr	r6, [pc, #188]	; (d4490 <_GLOBAL__sub_I_i+0x11c>)
   d43d2:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d43d6:	2500      	movs	r5, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d43d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  #define OLED_RESET A0

/*      for SD logging        */
int i;
SdFat SD;
File file;
   d43dc:	4a2d      	ldr	r2, [pc, #180]	; (d4494 <_GLOBAL__sub_I_i+0x120>)
   d43de:	492e      	ldr	r1, [pc, #184]	; (d4498 <_GLOBAL__sub_I_i+0x124>)
   d43e0:	7405      	strb	r5, [r0, #16]
   d43e2:	7445      	strb	r5, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d43e4:	6045      	str	r5, [r0, #4]
   d43e6:	6083      	str	r3, [r0, #8]
 public:
  File() {}
   d43e8:	4b2c      	ldr	r3, [pc, #176]	; (d449c <_GLOBAL__sub_I_i+0x128>)
   d43ea:	6003      	str	r3, [r0, #0]
   d43ec:	f003 ffd8 	bl	d83a0 <__aeabi_atexit>
  #define SD_CS_PIN SS
  #define error(msg) sd.errorHalt(msg)


/*      for subscribing | publishing        */
  TCPClient TheClient;
   d43f0:	4630      	mov	r0, r6
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d43f2:	4c2b      	ldr	r4, [pc, #172]	; (d44a0 <_GLOBAL__sub_I_i+0x12c>)
   d43f4:	f003 fde6 	bl	d7fc4 <_ZN9TCPClientC1Ev>
   d43f8:	4a26      	ldr	r2, [pc, #152]	; (d4494 <_GLOBAL__sub_I_i+0x120>)
   d43fa:	492a      	ldr	r1, [pc, #168]	; (d44a4 <_GLOBAL__sub_I_i+0x130>)
   d43fc:	4630      	mov	r0, r6
   d43fe:	f003 ffcf 	bl	d83a0 <__aeabi_atexit>
   d4402:	4b29      	ldr	r3, [pc, #164]	; (d44a8 <_GLOBAL__sub_I_i+0x134>)
   d4404:	9300      	str	r3, [sp, #0]
   d4406:	f240 7229 	movw	r2, #1833	; 0x729
   d440a:	4b28      	ldr	r3, [pc, #160]	; (d44ac <_GLOBAL__sub_I_i+0x138>)
   d440c:	4928      	ldr	r1, [pc, #160]	; (d44b0 <_GLOBAL__sub_I_i+0x13c>)
   d440e:	4620      	mov	r0, r4
   d4410:	f001 fb3e 	bl	d5a90 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4414:	4b27      	ldr	r3, [pc, #156]	; (d44b4 <_GLOBAL__sub_I_i+0x140>)
  Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d4416:	4a1f      	ldr	r2, [pc, #124]	; (d4494 <_GLOBAL__sub_I_i+0x120>)
   d4418:	4927      	ldr	r1, [pc, #156]	; (d44b8 <_GLOBAL__sub_I_i+0x144>)
   d441a:	6023      	str	r3, [r4, #0]
   d441c:	4620      	mov	r0, r4
   d441e:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d4422:	f003 ffbd 	bl	d83a0 <__aeabi_atexit>
  Adafruit_MQTT_Subscribe subData = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/ "); // put feed
   d4426:	462b      	mov	r3, r5
   d4428:	4621      	mov	r1, r4
   d442a:	4a24      	ldr	r2, [pc, #144]	; (d44bc <_GLOBAL__sub_I_i+0x148>)
   d442c:	4824      	ldr	r0, [pc, #144]	; (d44c0 <_GLOBAL__sub_I_i+0x14c>)
   d442e:	f001 fb56 	bl	d5ade <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Publish pubData = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds "); // put feed
   d4432:	462b      	mov	r3, r5
   d4434:	4a23      	ldr	r2, [pc, #140]	; (d44c4 <_GLOBAL__sub_I_i+0x150>)
   d4436:	4824      	ldr	r0, [pc, #144]	; (d44c8 <_GLOBAL__sub_I_i+0x154>)
   d4438:	4621      	mov	r1, r4
   d443a:	f001 fb4b 	bl	d5ad4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

  
Adafruit_BME280 bme; // for bme 
   d443e:	4823      	ldr	r0, [pc, #140]	; (d44cc <_GLOBAL__sub_I_i+0x158>)
   d4440:	f000 f850 	bl	d44e4 <_ZN15Adafruit_BME280C1Ev>
  #define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_SSD1306 display(OLED_RESET); // for oled
   d4444:	2113      	movs	r1, #19
   d4446:	4822      	ldr	r0, [pc, #136]	; (d44d0 <_GLOBAL__sub_I_i+0x15c>)
   d4448:	f000 ff2a 	bl	d52a0 <_ZN16Adafruit_SSD1306C1Ea>
   d444c:	4a11      	ldr	r2, [pc, #68]	; (d4494 <_GLOBAL__sub_I_i+0x120>)
   d444e:	4921      	ldr	r1, [pc, #132]	; (d44d4 <_GLOBAL__sub_I_i+0x160>)
   d4450:	481f      	ldr	r0, [pc, #124]	; (d44d0 <_GLOBAL__sub_I_i+0x15c>)
   d4452:	f003 ffa5 	bl	d83a0 <__aeabi_atexit>
AirQualitySensor senseAQ(A2); // put sensor pin in here
   d4456:	2111      	movs	r1, #17
   d4458:	481f      	ldr	r0, [pc, #124]	; (d44d8 <_GLOBAL__sub_I_i+0x164>)
   d445a:	f002 fa35 	bl	d68c8 <_ZN16AirQualitySensorC1Ei>

/*    for NeoPixels       */
  #define PIXEL_PIN A0// add pin for pixels
  #define PIXEL_COUNT 2// put number of pixels
  #define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixel(PIXEL_COUNT,PIXEL_PIN,PIXEL_TYPE);
   d445e:	2302      	movs	r3, #2
   d4460:	4619      	mov	r1, r3
   d4462:	2213      	movs	r2, #19
   d4464:	481d      	ldr	r0, [pc, #116]	; (d44dc <_GLOBAL__sub_I_i+0x168>)
   d4466:	f000 fb28 	bl	d4aba <_ZN17Adafruit_NeoPixelC1Ethh>
   d446a:	4a0a      	ldr	r2, [pc, #40]	; (d4494 <_GLOBAL__sub_I_i+0x120>)
   d446c:	491c      	ldr	r1, [pc, #112]	; (d44e0 <_GLOBAL__sub_I_i+0x16c>)
   d446e:	481b      	ldr	r0, [pc, #108]	; (d44dc <_GLOBAL__sub_I_i+0x168>)
void ledBrightness(){
  int pVal;
  int pPin = A1;
  pVal = analogRead(pPin);
  luminoscity = map(pVal, 40, 3000,10,255);
   d4470:	b002      	add	sp, #8
   d4472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

/*    for NeoPixels       */
  #define PIXEL_PIN A0// add pin for pixels
  #define PIXEL_COUNT 2// put number of pixels
  #define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixel(PIXEL_COUNT,PIXEL_PIN,PIXEL_TYPE);
   d4476:	f003 bf93 	b.w	d83a0 <__aeabi_atexit>
   d447a:	bf00      	nop
   d447c:	2003de64 	.word	0x2003de64
   d4480:	2003dd34 	.word	0x2003dd34
   d4484:	000d8744 	.word	0x000d8744
   d4488:	2003dd38 	.word	0x2003dd38
   d448c:	2003e348 	.word	0x2003e348
   d4490:	2003e328 	.word	0x2003e328
   d4494:	2003dd30 	.word	0x2003dd30
   d4498:	000d40e5 	.word	0x000d40e5
   d449c:	000d8750 	.word	0x000d8750
   d44a0:	2003dd90 	.word	0x2003dd90
   d44a4:	000d419d 	.word	0x000d419d
   d44a8:	000d8958 	.word	0x000d8958
   d44ac:	000d893c 	.word	0x000d893c
   d44b0:	000d8948 	.word	0x000d8948
   d44b4:	000d8f30 	.word	0x000d8f30
   d44b8:	000d40e7 	.word	0x000d40e7
   d44bc:	000d8973 	.word	0x000d8973
   d44c0:	2003e390 	.word	0x2003e390
   d44c4:	000d8987 	.word	0x000d8987
   d44c8:	2003dd40 	.word	0x2003dd40
   d44cc:	2003dd4c 	.word	0x2003dd4c
   d44d0:	2003e304 	.word	0x2003e304
   d44d4:	000d40e9 	.word	0x000d40e9
   d44d8:	2003e2e8 	.word	0x2003e2e8
   d44dc:	2003e37c 	.word	0x2003e37c
   d44e0:	000d4a1b 	.word	0x000d4a1b

000d44e4 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d44e4:	22ff      	movs	r2, #255	; 0xff
   d44e6:	7402      	strb	r2, [r0, #16]
   d44e8:	7442      	strb	r2, [r0, #17]
   d44ea:	7482      	strb	r2, [r0, #18]
   d44ec:	74c2      	strb	r2, [r0, #19]
{ }
   d44ee:	4770      	bx	lr

000d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d44f0:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d44f2:	4d09      	ldr	r5, [pc, #36]	; (d4518 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d44f4:	6829      	ldr	r1, [r5, #0]
   d44f6:	f011 0401 	ands.w	r4, r1, #1
   d44fa:	d10a      	bne.n	d4512 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d44fc:	4628      	mov	r0, r5
   d44fe:	f7ff fddb 	bl	d40b8 <__cxa_guard_acquire>
   d4502:	b130      	cbz	r0, d4512 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4504:	4621      	mov	r1, r4
   d4506:	4805      	ldr	r0, [pc, #20]	; (d451c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4508:	f002 fd0a 	bl	d6f20 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d450c:	4628      	mov	r0, r5
   d450e:	f7ff fdd8 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4512:	4802      	ldr	r0, [pc, #8]	; (d451c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4514:	bd38      	pop	{r3, r4, r5, pc}
   d4516:	bf00      	nop
   d4518:	2003dd34 	.word	0x2003dd34
   d451c:	2003dd38 	.word	0x2003dd38

000d4520 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4524:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4528:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d452a:	4605      	mov	r5, r0
   d452c:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d452e:	d106      	bne.n	d453e <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4530:	f7ff ffde 	bl	d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4534:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d453a:	f002 be0d 	b.w	d7158 <_ZN8SPIClass8transferEh>
   d453e:	2607      	movs	r6, #7
   d4540:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4542:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4546:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d454a:	2100      	movs	r1, #0
   d454c:	b280      	uxth	r0, r0
   d454e:	f003 fe80 	bl	d8252 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4552:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4556:	fa08 f106 	lsl.w	r1, r8, r6
   d455a:	4039      	ands	r1, r7
   d455c:	b280      	uxth	r0, r0
   d455e:	f003 fe78 	bl	d8252 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4562:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4566:	2101      	movs	r1, #1
   d4568:	b280      	uxth	r0, r0
   d456a:	f003 fe72 	bl	d8252 <digitalWrite>
        if (digitalRead(_miso))
   d456e:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4572:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4574:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4576:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4578:	f003 fe84 	bl	d8284 <digitalRead>
   d457c:	b108      	cbz	r0, d4582 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d457e:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4582:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4586:	d2de      	bcs.n	d4546 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4588:	4620      	mov	r0, r4
   d458a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d458e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d458e:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4590:	f7ff ffae 	bl	d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4598:	f002 bcff 	b.w	d6f9a <_ZN8SPIClass14endTransactionEv>

000d459c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d459c:	b510      	push	{r4, lr}
   d459e:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d45a0:	f7ff ffa6 	bl	d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d45a4:	4621      	mov	r1, r4
    }
   d45a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d45aa:	f002 bd0f 	b.w	d6fcc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d45b0 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d45b0:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d45b2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d45b6:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d45b8:	b085      	sub	sp, #20
   d45ba:	4604      	mov	r4, r0
   d45bc:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d45be:	d11d      	bne.n	d45fc <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d45c0:	7901      	ldrb	r1, [r0, #4]
   d45c2:	6800      	ldr	r0, [r0, #0]
   d45c4:	f003 f985 	bl	d78d2 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d45c8:	6820      	ldr	r0, [r4, #0]
   d45ca:	6803      	ldr	r3, [r0, #0]
   d45cc:	4629      	mov	r1, r5
   d45ce:	689b      	ldr	r3, [r3, #8]
   d45d0:	4798      	blx	r3
        _wire -> endTransmission();
   d45d2:	6820      	ldr	r0, [r4, #0]
   d45d4:	f003 f988 	bl	d78e8 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d45d8:	2202      	movs	r2, #2
   d45da:	7921      	ldrb	r1, [r4, #4]
   d45dc:	6820      	ldr	r0, [r4, #0]
   d45de:	f003 f975 	bl	d78cc <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d45e2:	6820      	ldr	r0, [r4, #0]
   d45e4:	6803      	ldr	r3, [r0, #0]
   d45e6:	695b      	ldr	r3, [r3, #20]
   d45e8:	4798      	blx	r3
   d45ea:	4605      	mov	r5, r0
   d45ec:	6820      	ldr	r0, [r4, #0]
   d45ee:	6803      	ldr	r3, [r0, #0]
   d45f0:	695b      	ldr	r3, [r3, #20]
   d45f2:	4798      	blx	r3
   d45f4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d45f8:	b285      	uxth	r5, r0
   d45fa:	e035      	b.n	d4668 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d45fc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4600:	3301      	adds	r3, #1
   d4602:	d10e      	bne.n	d4622 <_ZN15Adafruit_BME2806read16Eh+0x72>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4604:	4b1a      	ldr	r3, [pc, #104]	; (d4670 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4606:	4a1b      	ldr	r2, [pc, #108]	; (d4674 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d4608:	9300      	str	r3, [sp, #0]
   d460a:	9202      	str	r2, [sp, #8]
   d460c:	2300      	movs	r3, #0
   d460e:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4610:	4668      	mov	r0, sp
   d4612:	f88d 3004 	strb.w	r3, [sp, #4]
   d4616:	f88d 200c 	strb.w	r2, [sp, #12]
   d461a:	f88d 300d 	strb.w	r3, [sp, #13]
   d461e:	f7ff ffbd 	bl	d459c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4622:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4626:	2100      	movs	r1, #0
   d4628:	b280      	uxth	r0, r0
   d462a:	f003 fe12 	bl	d8252 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d462e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4632:	4620      	mov	r0, r4
   d4634:	f7ff ff74 	bl	d4520 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4638:	2100      	movs	r1, #0
   d463a:	4620      	mov	r0, r4
   d463c:	f7ff ff70 	bl	d4520 <_ZN15Adafruit_BME2807spixferEh>
   d4640:	2100      	movs	r1, #0
   d4642:	4605      	mov	r5, r0
   d4644:	4620      	mov	r0, r4
   d4646:	f7ff ff6b 	bl	d4520 <_ZN15Adafruit_BME2807spixferEh>
   d464a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d464e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4650:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4654:	2101      	movs	r1, #1
   d4656:	b280      	uxth	r0, r0
   d4658:	f003 fdfb 	bl	d8252 <digitalWrite>
        if (_sck == -1)
   d465c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4660:	3301      	adds	r3, #1
   d4662:	d101      	bne.n	d4668 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4664:	f7ff ff93 	bl	d458e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4668:	4628      	mov	r0, r5
   d466a:	b005      	add	sp, #20
   d466c:	bd30      	pop	{r4, r5, pc}
   d466e:	bf00      	nop
   d4670:	000d8744 	.word	0x000d8744
   d4674:	0007a120 	.word	0x0007a120

000d4678 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4678:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d467a:	f7ff ff99 	bl	d45b0 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d467e:	ba40      	rev16	r0, r0
}
   d4680:	b280      	uxth	r0, r0
   d4682:	bd08      	pop	{r3, pc}

000d4684 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4684:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4686:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d468a:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d468c:	b085      	sub	sp, #20
   d468e:	4604      	mov	r4, r0
   d4690:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4692:	d116      	bne.n	d46c2 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4694:	7901      	ldrb	r1, [r0, #4]
   d4696:	6800      	ldr	r0, [r0, #0]
   d4698:	f003 f91b 	bl	d78d2 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d469c:	6820      	ldr	r0, [r4, #0]
   d469e:	6803      	ldr	r3, [r0, #0]
   d46a0:	4629      	mov	r1, r5
   d46a2:	689b      	ldr	r3, [r3, #8]
   d46a4:	4798      	blx	r3
        _wire -> endTransmission();
   d46a6:	6820      	ldr	r0, [r4, #0]
   d46a8:	f003 f91e 	bl	d78e8 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d46ac:	2201      	movs	r2, #1
   d46ae:	7921      	ldrb	r1, [r4, #4]
   d46b0:	6820      	ldr	r0, [r4, #0]
   d46b2:	f003 f90b 	bl	d78cc <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d46b6:	6820      	ldr	r0, [r4, #0]
   d46b8:	6803      	ldr	r3, [r0, #0]
   d46ba:	695b      	ldr	r3, [r3, #20]
   d46bc:	4798      	blx	r3
   d46be:	b2c5      	uxtb	r5, r0
   d46c0:	e02e      	b.n	d4720 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d46c2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d46c6:	3301      	adds	r3, #1
   d46c8:	d10e      	bne.n	d46e8 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d46ca:	4b17      	ldr	r3, [pc, #92]	; (d4728 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d46cc:	4a17      	ldr	r2, [pc, #92]	; (d472c <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d46ce:	9300      	str	r3, [sp, #0]
   d46d0:	9202      	str	r2, [sp, #8]
   d46d2:	2300      	movs	r3, #0
   d46d4:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d46d6:	4668      	mov	r0, sp
   d46d8:	f88d 3004 	strb.w	r3, [sp, #4]
   d46dc:	f88d 200c 	strb.w	r2, [sp, #12]
   d46e0:	f88d 300d 	strb.w	r3, [sp, #13]
   d46e4:	f7ff ff5a 	bl	d459c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d46e8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46ec:	2100      	movs	r1, #0
   d46ee:	b280      	uxth	r0, r0
   d46f0:	f003 fdaf 	bl	d8252 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d46f4:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d46f8:	4620      	mov	r0, r4
   d46fa:	f7ff ff11 	bl	d4520 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d46fe:	2100      	movs	r1, #0
   d4700:	4620      	mov	r0, r4
   d4702:	f7ff ff0d 	bl	d4520 <_ZN15Adafruit_BME2807spixferEh>
   d4706:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4708:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d470c:	2101      	movs	r1, #1
   d470e:	b280      	uxth	r0, r0
   d4710:	f003 fd9f 	bl	d8252 <digitalWrite>
        if (_sck == -1)
   d4714:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4718:	3301      	adds	r3, #1
   d471a:	d101      	bne.n	d4720 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d471c:	f7ff ff37 	bl	d458e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4720:	4628      	mov	r0, r5
   d4722:	b005      	add	sp, #20
   d4724:	bd30      	pop	{r4, r5, pc}
   d4726:	bf00      	nop
   d4728:	000d8744 	.word	0x000d8744
   d472c:	0007a120 	.word	0x0007a120

000d4730 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4730:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4732:	21f3      	movs	r1, #243	; 0xf3
   d4734:	f7ff ffa6 	bl	d4684 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4738:	f000 0001 	and.w	r0, r0, #1
   d473c:	bd08      	pop	{r3, pc}

000d473e <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d473e:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4740:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4742:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4744:	f7ff ff98 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4748:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d474a:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d474c:	4620      	mov	r0, r4
   d474e:	f7ff ff93 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
   d4752:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4754:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4756:	4620      	mov	r0, r4
   d4758:	f7ff ff8e 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d475c:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d475e:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4760:	4620      	mov	r0, r4
   d4762:	f7ff ff89 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4766:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4768:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d476a:	4620      	mov	r0, r4
   d476c:	f7ff ff84 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
   d4770:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4772:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4774:	4620      	mov	r0, r4
   d4776:	f7ff ff7f 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
   d477a:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d477c:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d477e:	4620      	mov	r0, r4
   d4780:	f7ff ff7a 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
   d4784:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4786:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4788:	4620      	mov	r0, r4
   d478a:	f7ff ff75 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
   d478e:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4790:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4792:	4620      	mov	r0, r4
   d4794:	f7ff ff70 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
   d4798:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d479a:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d479c:	4620      	mov	r0, r4
   d479e:	f7ff ff6b 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
   d47a2:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d47a4:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47a6:	4620      	mov	r0, r4
   d47a8:	f7ff ff66 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
   d47ac:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d47ae:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47b0:	4620      	mov	r0, r4
   d47b2:	f7ff ff61 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d47b6:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d47b8:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d47ba:	4620      	mov	r0, r4
   d47bc:	f7ff ff62 	bl	d4684 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47c0:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d47c2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47c6:	4620      	mov	r0, r4
   d47c8:	f7ff ff56 	bl	d4678 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d47cc:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d47ce:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d47d0:	4620      	mov	r0, r4
   d47d2:	f7ff ff57 	bl	d4684 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d47d6:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d47d8:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d47dc:	4620      	mov	r0, r4
   d47de:	f7ff ff51 	bl	d4684 <_ZN15Adafruit_BME2805read8Eh>
   d47e2:	21e5      	movs	r1, #229	; 0xe5
   d47e4:	4605      	mov	r5, r0
   d47e6:	4620      	mov	r0, r4
   d47e8:	f7ff ff4c 	bl	d4684 <_ZN15Adafruit_BME2805read8Eh>
   d47ec:	f000 000f 	and.w	r0, r0, #15
   d47f0:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d47f4:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d47f6:	21e6      	movs	r1, #230	; 0xe6
   d47f8:	4620      	mov	r0, r4
   d47fa:	f7ff ff43 	bl	d4684 <_ZN15Adafruit_BME2805read8Eh>
   d47fe:	21e5      	movs	r1, #229	; 0xe5
   d4800:	4605      	mov	r5, r0
   d4802:	4620      	mov	r0, r4
   d4804:	f7ff ff3e 	bl	d4684 <_ZN15Adafruit_BME2805read8Eh>
   d4808:	1100      	asrs	r0, r0, #4
   d480a:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d480e:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4810:	21e7      	movs	r1, #231	; 0xe7
   d4812:	4620      	mov	r0, r4
   d4814:	f7ff ff36 	bl	d4684 <_ZN15Adafruit_BME2805read8Eh>
   d4818:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d481c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4820 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4822:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4826:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4828:	4604      	mov	r4, r0
   d482a:	460e      	mov	r6, r1
   d482c:	4615      	mov	r5, r2
    if (_cs == -1) {
   d482e:	d111      	bne.n	d4854 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4830:	7901      	ldrb	r1, [r0, #4]
   d4832:	6800      	ldr	r0, [r0, #0]
   d4834:	f003 f84d 	bl	d78d2 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4838:	6820      	ldr	r0, [r4, #0]
   d483a:	6803      	ldr	r3, [r0, #0]
   d483c:	4631      	mov	r1, r6
   d483e:	689b      	ldr	r3, [r3, #8]
   d4840:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4842:	6820      	ldr	r0, [r4, #0]
   d4844:	6803      	ldr	r3, [r0, #0]
   d4846:	4629      	mov	r1, r5
   d4848:	689b      	ldr	r3, [r3, #8]
   d484a:	4798      	blx	r3
        _wire -> endTransmission();
   d484c:	6820      	ldr	r0, [r4, #0]
   d484e:	f003 f84b 	bl	d78e8 <_ZN7TwoWire15endTransmissionEv>
   d4852:	e02d      	b.n	d48b0 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4854:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4858:	3301      	adds	r3, #1
   d485a:	d10e      	bne.n	d487a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d485c:	4b15      	ldr	r3, [pc, #84]	; (d48b4 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d485e:	4a16      	ldr	r2, [pc, #88]	; (d48b8 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4860:	9300      	str	r3, [sp, #0]
   d4862:	9202      	str	r2, [sp, #8]
   d4864:	2300      	movs	r3, #0
   d4866:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4868:	4668      	mov	r0, sp
   d486a:	f88d 3004 	strb.w	r3, [sp, #4]
   d486e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4872:	f88d 300d 	strb.w	r3, [sp, #13]
   d4876:	f7ff fe91 	bl	d459c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d487a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d487e:	2100      	movs	r1, #0
   d4880:	b280      	uxth	r0, r0
   d4882:	f003 fce6 	bl	d8252 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4886:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d488a:	4620      	mov	r0, r4
   d488c:	f7ff fe48 	bl	d4520 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4890:	4629      	mov	r1, r5
   d4892:	4620      	mov	r0, r4
   d4894:	f7ff fe44 	bl	d4520 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4898:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d489c:	2101      	movs	r1, #1
   d489e:	b280      	uxth	r0, r0
   d48a0:	f003 fcd7 	bl	d8252 <digitalWrite>
    if (_sck == -1)
   d48a4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d48a8:	3301      	adds	r3, #1
   d48aa:	d101      	bne.n	d48b0 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d48ac:	f7ff fe6f 	bl	d458e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d48b0:	b004      	add	sp, #16
   d48b2:	bd70      	pop	{r4, r5, r6, pc}
   d48b4:	000d8744 	.word	0x000d8744
   d48b8:	0007a120 	.word	0x0007a120

000d48bc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d48bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d48be:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d48c2:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d48c6:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d48ca:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d48ce:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d48d2:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d48d6:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d48da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d48de:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d48e2:	f366 1347 	bfi	r3, r6, #5, #3
   d48e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d48ea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d48ee:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d48f2:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d48f4:	f367 0302 	bfi	r3, r7, #0, #3
   d48f8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d48fc:	f006 0207 	and.w	r2, r6, #7
   d4900:	21f2      	movs	r1, #242	; 0xf2
   d4902:	f7ff ff8d 	bl	d4820 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4906:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d490a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d490e:	f002 0107 	and.w	r1, r2, #7
   d4912:	009b      	lsls	r3, r3, #2
   d4914:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4918:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d491c:	4620      	mov	r0, r4
   d491e:	21f5      	movs	r1, #245	; 0xf5
   d4920:	f7ff ff7e 	bl	d4820 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4924:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4928:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d492c:	f002 0107 	and.w	r1, r2, #7
   d4930:	009b      	lsls	r3, r3, #2
   d4932:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4936:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d493a:	4620      	mov	r0, r4
   d493c:	21f4      	movs	r1, #244	; 0xf4
}
   d493e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4942:	f7ff bf6d 	b.w	d4820 <_ZN15Adafruit_BME2806write8Ehh>

000d4946 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4946:	b530      	push	{r4, r5, lr}
   d4948:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d494a:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d494e:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4950:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4952:	d103      	bne.n	d495c <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4954:	6820      	ldr	r0, [r4, #0]
   d4956:	f002 ff85 	bl	d7864 <_ZN7TwoWire5beginEv>
   d495a:	e022      	b.n	d49a2 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d495c:	2101      	movs	r1, #1
   d495e:	b280      	uxth	r0, r0
   d4960:	f003 fc77 	bl	d8252 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4964:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4968:	2101      	movs	r1, #1
   d496a:	b280      	uxth	r0, r0
   d496c:	f003 fc60 	bl	d8230 <pinMode>
        if (_sck == -1) {
   d4970:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4974:	1c43      	adds	r3, r0, #1
   d4976:	d104      	bne.n	d4982 <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4978:	f7ff fdba 	bl	d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d497c:	f002 fada 	bl	d6f34 <_ZN8SPIClass5beginEv>
   d4980:	e00f      	b.n	d49a2 <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4982:	2101      	movs	r1, #1
   d4984:	b280      	uxth	r0, r0
   d4986:	f003 fc53 	bl	d8230 <pinMode>
            pinMode(_mosi, OUTPUT);
   d498a:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d498e:	2101      	movs	r1, #1
   d4990:	b280      	uxth	r0, r0
   d4992:	f003 fc4d 	bl	d8230 <pinMode>
            pinMode(_miso, INPUT);
   d4996:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d499a:	2100      	movs	r1, #0
   d499c:	b280      	uxth	r0, r0
   d499e:	f003 fc47 	bl	d8230 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d49a2:	21d0      	movs	r1, #208	; 0xd0
   d49a4:	4620      	mov	r0, r4
   d49a6:	f7ff fe6d 	bl	d4684 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d49aa:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d49ac:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d49ae:	d120      	bne.n	d49f2 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d49b0:	4620      	mov	r0, r4
   d49b2:	22b6      	movs	r2, #182	; 0xb6
   d49b4:	21e0      	movs	r1, #224	; 0xe0
   d49b6:	f7ff ff33 	bl	d4820 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d49ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d49be:	f002 fcd9 	bl	d7374 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d49c2:	4620      	mov	r0, r4
   d49c4:	f7ff feb4 	bl	d4730 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d49c8:	4605      	mov	r5, r0
   d49ca:	b108      	cbz	r0, d49d0 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d49cc:	2064      	movs	r0, #100	; 0x64
   d49ce:	e7f6      	b.n	d49be <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d49d0:	4620      	mov	r0, r4
   d49d2:	f7ff feb4 	bl	d473e <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d49d6:	2305      	movs	r3, #5
   d49d8:	9300      	str	r3, [sp, #0]
   d49da:	461a      	mov	r2, r3
   d49dc:	2103      	movs	r1, #3
   d49de:	4620      	mov	r0, r4
   d49e0:	9502      	str	r5, [sp, #8]
   d49e2:	9501      	str	r5, [sp, #4]
   d49e4:	f7ff ff6a 	bl	d48bc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d49e8:	2064      	movs	r0, #100	; 0x64
   d49ea:	f002 fcc3 	bl	d7374 <delay>
   d49ee:	2001      	movs	r0, #1
   d49f0:	e000      	b.n	d49f4 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d49f2:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d49f4:	b005      	add	sp, #20
   d49f6:	bd30      	pop	{r4, r5, pc}

000d49f8 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d49f8:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d49fa:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d49fc:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d49fe:	f003 fca9 	bl	d8354 <_Z19__fetch_global_Wirev>
   d4a02:	6020      	str	r0, [r4, #0]
	return init();
   d4a04:	4620      	mov	r0, r4
}
   d4a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d4a0a:	f7ff bf9c 	b.w	d4946 <_ZN15Adafruit_BME2804initEv>

000d4a0e <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4a0e:	f001 bf87 	b.w	d6920 <HAL_Pin_Map>

000d4a12 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4a12:	f002 b83d 	b.w	d6a90 <HAL_Timer_Get_Micro_Seconds>

000d4a16 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4a16:	f002 b833 	b.w	d6a80 <HAL_Delay_Microseconds>

000d4a1a <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4a1a:	b510      	push	{r4, lr}
   d4a1c:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4a1e:	68c0      	ldr	r0, [r0, #12]
   d4a20:	b108      	cbz	r0, d4a26 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4a22:	f002 fa21 	bl	d6e68 <free>
  if (begun) pinMode(pin, INPUT);
   d4a26:	7823      	ldrb	r3, [r4, #0]
   d4a28:	b11b      	cbz	r3, d4a32 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4a2a:	2100      	movs	r1, #0
   d4a2c:	79e0      	ldrb	r0, [r4, #7]
   d4a2e:	f003 fbff 	bl	d8230 <pinMode>
}
   d4a32:	4620      	mov	r0, r4
   d4a34:	bd10      	pop	{r4, pc}

000d4a36 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4a36:	b538      	push	{r3, r4, r5, lr}
   d4a38:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4a3a:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4a3c:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4a3e:	b108      	cbz	r0, d4a44 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4a40:	f002 fa12 	bl	d6e68 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4a44:	79a3      	ldrb	r3, [r4, #6]
   d4a46:	2b06      	cmp	r3, #6
   d4a48:	bf0c      	ite	eq
   d4a4a:	2004      	moveq	r0, #4
   d4a4c:	2003      	movne	r0, #3
   d4a4e:	fb10 f005 	smulbb	r0, r0, r5
   d4a52:	b280      	uxth	r0, r0
   d4a54:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4a56:	f002 f9ff 	bl	d6e58 <malloc>
   d4a5a:	60e0      	str	r0, [r4, #12]
   d4a5c:	b128      	cbz	r0, d4a6a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4a5e:	88a2      	ldrh	r2, [r4, #4]
   d4a60:	2100      	movs	r1, #0
   d4a62:	f003 fe20 	bl	d86a6 <memset>
    numLEDs = n;
   d4a66:	8065      	strh	r5, [r4, #2]
   d4a68:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4a6a:	80a0      	strh	r0, [r4, #4]
   d4a6c:	8060      	strh	r0, [r4, #2]
   d4a6e:	bd38      	pop	{r3, r4, r5, pc}

000d4a70 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d4a70:	b510      	push	{r4, lr}
   d4a72:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4a74:	2101      	movs	r1, #1
   d4a76:	79c0      	ldrb	r0, [r0, #7]
   d4a78:	f003 fbda 	bl	d8230 <pinMode>
  digitalWrite(pin, LOW);
   d4a7c:	2100      	movs	r1, #0
   d4a7e:	79e0      	ldrb	r0, [r4, #7]
   d4a80:	f003 fbe7 	bl	d8252 <digitalWrite>
  begun = true;
   d4a84:	2301      	movs	r3, #1
   d4a86:	7023      	strb	r3, [r4, #0]
   d4a88:	bd10      	pop	{r4, pc}

000d4a8a <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4a8a:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d4a8c:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4a8e:	4605      	mov	r5, r0
   d4a90:	460c      	mov	r4, r1
    if (begun) {
   d4a92:	b11b      	cbz	r3, d4a9c <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4a94:	2100      	movs	r1, #0
   d4a96:	79c0      	ldrb	r0, [r0, #7]
   d4a98:	f003 fbca 	bl	d8230 <pinMode>
    }
    pin = p;
    if (begun) {
   d4a9c:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d4a9e:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4aa0:	b153      	cbz	r3, d4ab8 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d4aa2:	b2a4      	uxth	r4, r4
   d4aa4:	4620      	mov	r0, r4
   d4aa6:	2101      	movs	r1, #1
   d4aa8:	f003 fbc2 	bl	d8230 <pinMode>
        digitalWrite(p, LOW);
   d4aac:	4620      	mov	r0, r4
   d4aae:	2100      	movs	r1, #0
    }
}
   d4ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d4ab4:	f003 bbcd 	b.w	d8252 <digitalWrite>
   d4ab8:	bd38      	pop	{r3, r4, r5, pc}

000d4aba <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4aba:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4abc:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4abe:	4604      	mov	r4, r0
   d4ac0:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4ac2:	7183      	strb	r3, [r0, #6]
   d4ac4:	7005      	strb	r5, [r0, #0]
   d4ac6:	7205      	strb	r5, [r0, #8]
   d4ac8:	60c5      	str	r5, [r0, #12]
   d4aca:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d4acc:	f7ff ffb3 	bl	d4a36 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4ad0:	4620      	mov	r0, r4
   d4ad2:	4631      	mov	r1, r6
   d4ad4:	f7ff ffd9 	bl	d4a8a <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4ad8:	4620      	mov	r0, r4
   d4ada:	bd70      	pop	{r4, r5, r6, pc}

000d4adc <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4adc:	68c3      	ldr	r3, [r0, #12]
   d4ade:	2b00      	cmp	r3, #0
   d4ae0:	f000 818b 	beq.w	d4dfa <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d4ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ae8:	7983      	ldrb	r3, [r0, #6]
   d4aea:	3b02      	subs	r3, #2
   d4aec:	b2db      	uxtb	r3, r3
   d4aee:	2b04      	cmp	r3, #4
   d4af0:	bf9c      	itt	ls
   d4af2:	4ac4      	ldrls	r2, [pc, #784]	; (d4e04 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d4af4:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4af8:	b087      	sub	sp, #28
   d4afa:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4afc:	bf88      	it	hi
   d4afe:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4b00:	f7ff ff87 	bl	d4a12 <micros>
   d4b04:	692b      	ldr	r3, [r5, #16]
   d4b06:	1ac0      	subs	r0, r0, r3
   d4b08:	42a0      	cmp	r0, r4
   d4b0a:	d3f9      	bcc.n	d4b00 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4b0c:	4abe      	ldr	r2, [pc, #760]	; (d4e08 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4b0e:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4b10:	ca07      	ldmia	r2, {r0, r1, r2}
   d4b12:	ac06      	add	r4, sp, #24
   d4b14:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4b18:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4b1a:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4b1c:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4b20:	3304      	adds	r3, #4
   d4b22:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4b24:	b922      	cbnz	r2, d4b30 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4b26:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4b2a:	2b00      	cmp	r3, #0
   d4b2c:	f2c0 8155 	blt.w	d4dda <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d4b30:	9c04      	ldr	r4, [sp, #16]
   d4b32:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4b36:	b923      	cbnz	r3, d4b42 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4b38:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4b3c:	2b00      	cmp	r3, #0
   d4b3e:	f2c0 813c 	blt.w	d4dba <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d4b42:	9c05      	ldr	r4, [sp, #20]
   d4b44:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4b48:	b91b      	cbnz	r3, d4b52 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4b4a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4b4e:	2b00      	cmp	r3, #0
   d4b50:	db6e      	blt.n	d4c30 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b52:	4bae      	ldr	r3, [pc, #696]	; (d4e0c <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d4b54:	79ea      	ldrb	r2, [r5, #7]
   d4b56:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4b58:	4cad      	ldr	r4, [pc, #692]	; (d4e10 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4b5a:	49ae      	ldr	r1, [pc, #696]	; (d4e14 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4b5c:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b5e:	0112      	lsls	r2, r2, #4
   d4b60:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4b62:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b66:	785b      	ldrb	r3, [r3, #1]
   d4b68:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4b6a:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4b6c:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b6e:	f003 031f 	and.w	r3, r3, #31
   d4b72:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4b76:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4b78:	433a      	orrs	r2, r7
   d4b7a:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d4b7c:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4b7e:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4b80:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4b84:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b88:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4b8a:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4b8c:	2800      	cmp	r0, #0
   d4b8e:	d044      	beq.n	d4c1a <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d4b90:	46cc      	mov	ip, r9
   d4b92:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4b94:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d4b98:	f81c eb01 	ldrb.w	lr, [ip], #1
   d4b9c:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4b9e:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4ba0:	6863      	ldr	r3, [r4, #4]
   d4ba2:	1a9b      	subs	r3, r3, r2
   d4ba4:	2b46      	cmp	r3, #70	; 0x46
   d4ba6:	d9fb      	bls.n	d4ba0 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d4ba8:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d4bac:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4bb0:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4bb4:	ea43 0307 	orr.w	r3, r3, r7
   d4bb8:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4bbc:	d02f      	beq.n	d4c1e <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4bbe:	6863      	ldr	r3, [r4, #4]
   d4bc0:	1a9b      	subs	r3, r3, r2
   d4bc2:	2b28      	cmp	r3, #40	; 0x28
   d4bc4:	d9fb      	bls.n	d4bbe <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4bc6:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4bca:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4bcc:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4bd0:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4bd4:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4bd8:	d1e2      	bne.n	d4ba0 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4bda:	ebc9 030c 	rsb	r3, r9, ip
   d4bde:	88a8      	ldrh	r0, [r5, #4]
   d4be0:	b29b      	uxth	r3, r3
   d4be2:	4298      	cmp	r0, r3
   d4be4:	d8d8      	bhi.n	d4b98 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d4be6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d4bea:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4bee:	6863      	ldr	r3, [r4, #4]
   d4bf0:	1a9b      	subs	r3, r3, r2
   d4bf2:	2b46      	cmp	r3, #70	; 0x46
   d4bf4:	d9fb      	bls.n	d4bee <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4bf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4bfa:	ebca 0a03 	rsb	sl, sl, r3
   d4bfe:	4582      	cmp	sl, r0
   d4c00:	f0c0 80d5 	bcc.w	d4dae <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4c04:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4c08:	f7ff ff05 	bl	d4a16 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4c0c:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4c0e:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4c12:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4c16:	2800      	cmp	r0, #0
   d4c18:	d1ba      	bne.n	d4b90 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d4c1a:	4602      	mov	r2, r0
   d4c1c:	e7e7      	b.n	d4bee <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4c1e:	6863      	ldr	r3, [r4, #4]
   d4c20:	1a9b      	subs	r3, r3, r2
   d4c22:	2b11      	cmp	r3, #17
   d4c24:	d8cf      	bhi.n	d4bc6 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d4c26:	6863      	ldr	r3, [r4, #4]
   d4c28:	1a9b      	subs	r3, r3, r2
   d4c2a:	2b11      	cmp	r3, #17
   d4c2c:	d9f7      	bls.n	d4c1e <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d4c2e:	e7ca      	b.n	d4bc6 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c30:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c34:	2b00      	cmp	r3, #0
   d4c36:	da8c      	bge.n	d4b52 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c38:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c3c:	2b00      	cmp	r3, #0
   d4c3e:	da88      	bge.n	d4b52 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4c40:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c44:	2b00      	cmp	r3, #0
   d4c46:	da84      	bge.n	d4b52 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4c48:	9801      	ldr	r0, [sp, #4]
   d4c4a:	f002 f905 	bl	d6e58 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4c4e:	2800      	cmp	r0, #0
   d4c50:	f43f af7f 	beq.w	d4b52 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4c54:	88ab      	ldrh	r3, [r5, #4]
   d4c56:	2b00      	cmp	r3, #0
   d4c58:	f000 80d0 	beq.w	d4dfc <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d4c5c:	2700      	movs	r7, #0
   d4c5e:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4c60:	4e6d      	ldr	r6, [pc, #436]	; (d4e18 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d4c62:	496e      	ldr	r1, [pc, #440]	; (d4e1c <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d4c64:	e000      	b.n	d4c68 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d4c66:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4c68:	68ea      	ldr	r2, [r5, #12]
   d4c6a:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4c6c:	f103 0e01 	add.w	lr, r3, #1
   d4c70:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4c74:	bf14      	ite	ne
   d4c76:	46b0      	movne	r8, r6
   d4c78:	4688      	moveq	r8, r1
   d4c7a:	fa1f fe8e 	uxth.w	lr, lr
   d4c7e:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4c82:	bf14      	ite	ne
   d4c84:	46b1      	movne	r9, r6
   d4c86:	4689      	moveq	r9, r1
   d4c88:	f012 0f20 	tst.w	r2, #32
   d4c8c:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4c90:	bf18      	it	ne
   d4c92:	46b2      	movne	sl, r6
   d4c94:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d4c98:	bf08      	it	eq
   d4c9a:	468a      	moveq	sl, r1
   d4c9c:	f103 0802 	add.w	r8, r3, #2
   d4ca0:	f012 0f10 	tst.w	r2, #16
   d4ca4:	f103 0e03 	add.w	lr, r3, #3
   d4ca8:	bf14      	ite	ne
   d4caa:	46b4      	movne	ip, r6
   d4cac:	468c      	moveq	ip, r1
   d4cae:	fa1f f888 	uxth.w	r8, r8
   d4cb2:	f012 0f08 	tst.w	r2, #8
   d4cb6:	fa1f fe8e 	uxth.w	lr, lr
   d4cba:	f103 0904 	add.w	r9, r3, #4
   d4cbe:	fa1f f989 	uxth.w	r9, r9
   d4cc2:	bf14      	ite	ne
   d4cc4:	46b3      	movne	fp, r6
   d4cc6:	468b      	moveq	fp, r1
   d4cc8:	f012 0f04 	tst.w	r2, #4
   d4ccc:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4cd0:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d4cd4:	bf14      	ite	ne
   d4cd6:	46b2      	movne	sl, r6
   d4cd8:	468a      	moveq	sl, r1
   d4cda:	f103 0805 	add.w	r8, r3, #5
   d4cde:	f012 0f02 	tst.w	r2, #2
   d4ce2:	f103 0c06 	add.w	ip, r3, #6
   d4ce6:	f103 0e07 	add.w	lr, r3, #7
   d4cea:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d4cee:	fa1f fe8e 	uxth.w	lr, lr
   d4cf2:	bf14      	ite	ne
   d4cf4:	46b1      	movne	r9, r6
   d4cf6:	4689      	moveq	r9, r1
   d4cf8:	fa1f f888 	uxth.w	r8, r8
   d4cfc:	f012 0f01 	tst.w	r2, #1
   d4d00:	fa1f fc8c 	uxth.w	ip, ip
   d4d04:	bf14      	ite	ne
   d4d06:	4632      	movne	r2, r6
   d4d08:	460a      	moveq	r2, r1
   d4d0a:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4d0e:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d4d12:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4d16:	3701      	adds	r7, #1
   d4d18:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4d1c:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4d1e:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4d22:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4d24:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4d26:	d89e      	bhi.n	d4c66 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4d28:	f103 0209 	add.w	r2, r3, #9
   d4d2c:	330a      	adds	r3, #10
   d4d2e:	b292      	uxth	r2, r2
   d4d30:	b29b      	uxth	r3, r3
   d4d32:	0052      	lsls	r2, r2, #1
   d4d34:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4d36:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4d38:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4d3c:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4d3e:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4d40:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4d42:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4d44:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4d46:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d4a:	4e30      	ldr	r6, [pc, #192]	; (d4e0c <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4d4c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4d50:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4d54:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4d58:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4d5c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4d60:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d4d64:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4d68:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d6c:	79eb      	ldrb	r3, [r5, #7]
   d4d6e:	6831      	ldr	r1, [r6, #0]
   d4d70:	011b      	lsls	r3, r3, #4
   d4d72:	18ce      	adds	r6, r1, r3
   d4d74:	5cc9      	ldrb	r1, [r1, r3]
   d4d76:	7873      	ldrb	r3, [r6, #1]
   d4d78:	f003 031f 	and.w	r3, r3, #31
   d4d7c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4d80:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d82:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d4d86:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d4d8a:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4d8e:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4d90:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4d94:	2b00      	cmp	r3, #0
   d4d96:	d0fb      	beq.n	d4d90 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4d98:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4d9a:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4d9e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d4da2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4da6:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d4daa:	f002 f85d 	bl	d6e68 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4dae:	f7ff fe30 	bl	d4a12 <micros>
   d4db2:	6128      	str	r0, [r5, #16]
}
   d4db4:	b007      	add	sp, #28
   d4db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dba:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dbe:	2b00      	cmp	r3, #0
   d4dc0:	f6bf aebf 	bge.w	d4b42 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dc4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dc8:	2b00      	cmp	r3, #0
   d4dca:	f6bf aeba 	bge.w	d4b42 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4dce:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dd2:	2b00      	cmp	r3, #0
   d4dd4:	f6bf aeb5 	bge.w	d4b42 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d4dd8:	e736      	b.n	d4c48 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dda:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dde:	2b00      	cmp	r3, #0
   d4de0:	f6bf aea6 	bge.w	d4b30 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4de4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4de8:	2b00      	cmp	r3, #0
   d4dea:	f6bf aea1 	bge.w	d4b30 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4dee:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4df2:	2b00      	cmp	r3, #0
   d4df4:	f6bf ae9c 	bge.w	d4b30 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d4df8:	e726      	b.n	d4c48 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d4dfa:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4dfc:	2304      	movs	r3, #4
   d4dfe:	2202      	movs	r2, #2
   d4e00:	e799      	b.n	d4d36 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d4e02:	bf00      	nop
   d4e04:	000d89a8 	.word	0x000d89a8
   d4e08:	000d899c 	.word	0x000d899c
   d4e0c:	2003e3c8 	.word	0x2003e3c8
   d4e10:	e000edf0 	.word	0xe000edf0
   d4e14:	e0001000 	.word	0xe0001000
   d4e18:	ffff800d 	.word	0xffff800d
   d4e1c:	ffff8006 	.word	0xffff8006

000d4e20 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d4e20:	8843      	ldrh	r3, [r0, #2]
   d4e22:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d4e24:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d4e26:	d945      	bls.n	d4eb4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d4e28:	7a05      	ldrb	r5, [r0, #8]
   d4e2a:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d4e2e:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d4e32:	b2d6      	uxtb	r6, r2
   d4e34:	b145      	cbz	r5, d4e48 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d4e36:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d4e38:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d4e3a:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d4e3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d4e40:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d4e44:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d4e48:	f890 c006 	ldrb.w	ip, [r0, #6]
   d4e4c:	68c7      	ldr	r7, [r0, #12]
   d4e4e:	f1bc 0f06 	cmp.w	ip, #6
   d4e52:	bf0c      	ite	eq
   d4e54:	2504      	moveq	r5, #4
   d4e56:	2503      	movne	r5, #3
   d4e58:	4369      	muls	r1, r5
   d4e5a:	f1bc 0f08 	cmp.w	ip, #8
   d4e5e:	eb07 0501 	add.w	r5, r7, r1
   d4e62:	d824      	bhi.n	d4eae <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d4e64:	f04f 0e01 	mov.w	lr, #1
   d4e68:	fa0e fe0c 	lsl.w	lr, lr, ip
   d4e6c:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d4e70:	d10c      	bne.n	d4e8c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d4e72:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d4e76:	d10d      	bne.n	d4e94 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d4e78:	f01e 0f10 	tst.w	lr, #16
   d4e7c:	d017      	beq.n	d4eae <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d4e7e:	2bff      	cmp	r3, #255	; 0xff
   d4e80:	bf08      	it	eq
   d4e82:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d4e84:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d4e86:	706e      	strb	r6, [r5, #1]
          *p = g;
   d4e88:	70ac      	strb	r4, [r5, #2]
        } break;
   d4e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d4e8c:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d4e8e:	706b      	strb	r3, [r5, #1]
          *p = b;
   d4e90:	70ae      	strb	r6, [r5, #2]
        } break;
   d4e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d4e94:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4e96:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d4e98:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4e9a:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d4e9c:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4e9e:	b90b      	cbnz	r3, d4ea4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d4ea0:	b2d2      	uxtb	r2, r2
   d4ea2:	e002      	b.n	d4eaa <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d4ea4:	435a      	muls	r2, r3
   d4ea6:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d4eaa:	70ea      	strb	r2, [r5, #3]
        } break;
   d4eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d4eae:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d4eb0:	706c      	strb	r4, [r5, #1]
          *p = b;
   d4eb2:	70ae      	strb	r6, [r5, #2]
   d4eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4eb6 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d4eb6:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
   d4eb8:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d4eba:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d4ebc:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d4ebe:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d4ec0:	d01e      	beq.n	d4f00 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d4ec2:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d4ec4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d4ec8:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d4eca:	d00c      	beq.n	d4ee6 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d4ecc:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d4ece:	bf1f      	itttt	ne
   d4ed0:	0211      	lslne	r1, r2, #8
   d4ed2:	f101 31ff 	addne.w	r1, r1, #4294967295
   d4ed6:	fb91 f3f3 	sdivne	r3, r1, r3
   d4eda:	b29b      	uxthne	r3, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
   d4edc:	bf04      	itt	eq
   d4ede:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d4ee2:	fb91 f3f3 	sdiveq	r3, r1, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d4ee6:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d4ee8:	1b29      	subs	r1, r5, r4
   d4eea:	8886      	ldrh	r6, [r0, #4]
   d4eec:	b289      	uxth	r1, r1
   d4eee:	428e      	cmp	r6, r1
   d4ef0:	d905      	bls.n	d4efe <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
   d4ef2:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
   d4ef4:	4359      	muls	r1, r3
   d4ef6:	1209      	asrs	r1, r1, #8
   d4ef8:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d4efc:	e7f4      	b.n	d4ee8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
   d4efe:	7202      	strb	r2, [r0, #8]
   d4f00:	bd70      	pop	{r4, r5, r6, pc}

000d4f02 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d4f02:	8882      	ldrh	r2, [r0, #4]
   d4f04:	68c0      	ldr	r0, [r0, #12]
   d4f06:	2100      	movs	r1, #0
   d4f08:	f003 bbcd 	b.w	d86a6 <memset>

000d4f0c <_GLOBAL__sub_I_PIN_MAP2>:
}
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	f001 fd07 	bl	d6920 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4f12:	f001 fd05 	bl	d6920 <HAL_Pin_Map>
   d4f16:	4b01      	ldr	r3, [pc, #4]	; (d4f1c <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4f18:	6018      	str	r0, [r3, #0]
   d4f1a:	bd08      	pop	{r3, pc}
   d4f1c:	2003e3c8 	.word	0x2003e3c8

000d4f20 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4f20:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4f22:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4f24:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4f28:	2c02      	cmp	r4, #2
   d4f2a:	d008      	beq.n	d4f3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4f2c:	2c03      	cmp	r4, #3
   d4f2e:	d00f      	beq.n	d4f50 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4f30:	2c01      	cmp	r4, #1
   d4f32:	d170      	bne.n	d5016 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4f34:	8904      	ldrh	r4, [r0, #8]
   d4f36:	3c01      	subs	r4, #1
   d4f38:	1aa2      	subs	r2, r4, r2
   d4f3a:	b212      	sxth	r2, r2
      break;
   d4f3c:	e00c      	b.n	d4f58 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4f3e:	8944      	ldrh	r4, [r0, #10]
   d4f40:	3c01      	subs	r4, #1
   d4f42:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4f44:	8904      	ldrh	r4, [r0, #8]
   d4f46:	1ae4      	subs	r4, r4, r3
   d4f48:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4f4a:	b212      	sxth	r2, r2
      x -= (w-1);
   d4f4c:	b209      	sxth	r1, r1
      break;
   d4f4e:	e062      	b.n	d5016 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4f50:	8944      	ldrh	r4, [r0, #10]
   d4f52:	1ae4      	subs	r4, r4, r3
   d4f54:	1a61      	subs	r1, r4, r1
   d4f56:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4f58:	2a00      	cmp	r2, #0
   d4f5a:	db5b      	blt.n	d5014 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4f5c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4f60:	4294      	cmp	r4, r2
   d4f62:	f340 8090 	ble.w	d5086 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4f66:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4f68:	bfbe      	ittt	lt
   d4f6a:	185b      	addlt	r3, r3, r1
   d4f6c:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4f6e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4f70:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4f74:	18cc      	adds	r4, r1, r3
   d4f76:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4f78:	bfc4      	itt	gt
   d4f7a:	1a43      	subgt	r3, r0, r1
   d4f7c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4f7e:	2b00      	cmp	r3, #0
   d4f80:	f340 8081 	ble.w	d5086 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4f84:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4f86:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4f88:	4f3f      	ldr	r7, [pc, #252]	; (d5088 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4f8a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4f8e:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4f92:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4f94:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4f98:	d017      	beq.n	d4fca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4f9a:	f1c1 0108 	rsb	r1, r1, #8
   d4f9e:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4fa0:	493a      	ldr	r1, [pc, #232]	; (d508c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4fa2:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4fa4:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4fa6:	bf3f      	itttt	cc
   d4fa8:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4fac:	21ff      	movcc	r1, #255	; 0xff
   d4fae:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4fb2:	400e      	andcc	r6, r1
   d4fb4:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4fb6:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4fb8:	bf0c      	ite	eq
   d4fba:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4fbc:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4fbe:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4fc0:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4fc2:	d360      	bcc.n	d5086 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4fc4:	1a18      	subs	r0, r3, r0
   d4fc6:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4fc8:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4fca:	2b07      	cmp	r3, #7
   d4fcc:	d917      	bls.n	d4ffe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4fce:	2d01      	cmp	r5, #1
   d4fd0:	bf0c      	ite	eq
   d4fd2:	20ff      	moveq	r0, #255	; 0xff
   d4fd4:	2000      	movne	r0, #0
   d4fd6:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4fda:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4fdc:	3a08      	subs	r2, #8
   d4fde:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4fe0:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4fe2:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4fe6:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4fea:	d8f7      	bhi.n	d4fdc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4fec:	f1a3 0208 	sub.w	r2, r3, #8
   d4ff0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4ff4:	3201      	adds	r2, #1
   d4ff6:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4ffa:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4ffe:	2b00      	cmp	r3, #0
   d5000:	d041      	beq.n	d5086 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d5002:	4a23      	ldr	r2, [pc, #140]	; (d5090 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d5004:	5cd2      	ldrb	r2, [r2, r3]
   d5006:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d5008:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d500a:	bf0c      	ite	eq
   d500c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d500e:	4393      	bicne	r3, r2
   d5010:	7023      	strb	r3, [r4, #0]
   d5012:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5014:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d5016:	2a00      	cmp	r2, #0
   d5018:	db35      	blt.n	d5086 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d501a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d501e:	4294      	cmp	r4, r2
   d5020:	dd31      	ble.n	d5086 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d5022:	2900      	cmp	r1, #0
    w += x;
   d5024:	bfbc      	itt	lt
   d5026:	18c9      	addlt	r1, r1, r3
   d5028:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d502a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d502e:	bfb8      	it	lt
   d5030:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5032:	18ce      	adds	r6, r1, r3
   d5034:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d5036:	bfc4      	itt	gt
   d5038:	1a63      	subgt	r3, r4, r1
   d503a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d503c:	2b00      	cmp	r3, #0
   d503e:	dd22      	ble.n	d5086 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5040:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d5042:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d5046:	4810      	ldr	r0, [pc, #64]	; (d5088 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d5048:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d504c:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d504e:	2001      	movs	r0, #1
   d5050:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d5054:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d5056:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d5058:	d109      	bne.n	d506e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d505a:	3b01      	subs	r3, #1
   d505c:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d505e:	1c5c      	adds	r4, r3, #1
   d5060:	d011      	beq.n	d5086 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d5062:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5066:	4310      	orrs	r0, r2
   d5068:	f801 0c01 	strb.w	r0, [r1, #-1]
   d506c:	e7f5      	b.n	d505a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d506e:	43d2      	mvns	r2, r2
   d5070:	b2d2      	uxtb	r2, r2
   d5072:	3b01      	subs	r3, #1
   d5074:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d5076:	1c58      	adds	r0, r3, #1
   d5078:	d005      	beq.n	d5086 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d507a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d507e:	4010      	ands	r0, r2
   d5080:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5084:	e7f5      	b.n	d5072 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d5086:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5088:	2003d8c8 	.word	0x2003d8c8
   d508c:	2003d8c0 	.word	0x2003d8c0
   d5090:	2003d8b8 	.word	0x2003d8b8

000d5094 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5094:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d5096:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5098:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d509c:	2c02      	cmp	r4, #2
   d509e:	d008      	beq.n	d50b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d50a0:	2c03      	cmp	r4, #3
   d50a2:	d00f      	beq.n	d50c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d50a4:	2c01      	cmp	r4, #1
   d50a6:	d112      	bne.n	d50ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d50a8:	8904      	ldrh	r4, [r0, #8]
   d50aa:	1ae4      	subs	r4, r4, r3
   d50ac:	1aa2      	subs	r2, r4, r2
   d50ae:	b212      	sxth	r2, r2
      break;
   d50b0:	e06d      	b.n	d518e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d50b2:	8904      	ldrh	r4, [r0, #8]
   d50b4:	3c01      	subs	r4, #1
   d50b6:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d50b8:	8944      	ldrh	r4, [r0, #10]
   d50ba:	1ae4      	subs	r4, r4, r3
   d50bc:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d50be:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d50c0:	b212      	sxth	r2, r2
      break;
   d50c2:	e004      	b.n	d50ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d50c4:	8944      	ldrh	r4, [r0, #10]
   d50c6:	3c01      	subs	r4, #1
   d50c8:	1a61      	subs	r1, r4, r1
   d50ca:	b209      	sxth	r1, r1
      break;
   d50cc:	e05f      	b.n	d518e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d50ce:	2900      	cmp	r1, #0
   d50d0:	db5c      	blt.n	d518c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d50d2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d50d6:	428c      	cmp	r4, r1
   d50d8:	f340 8091 	ble.w	d51fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d50dc:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d50de:	bfbc      	itt	lt
   d50e0:	18d2      	addlt	r2, r2, r3
   d50e2:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d50e4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d50e8:	bfb8      	it	lt
   d50ea:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d50ec:	18d4      	adds	r4, r2, r3
   d50ee:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d50f0:	bfc4      	itt	gt
   d50f2:	1a83      	subgt	r3, r0, r2
   d50f4:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d50f6:	2b00      	cmp	r3, #0
   d50f8:	f340 8081 	ble.w	d51fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d50fc:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d50fe:	4e40      	ldr	r6, [pc, #256]	; (d5200 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d5100:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5102:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d5104:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5108:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d510c:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5110:	d017      	beq.n	d5142 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d5112:	f1c4 0408 	rsb	r4, r4, #8
   d5116:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5118:	4c3a      	ldr	r4, [pc, #232]	; (d5204 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d511a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d511c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d511e:	bf3f      	itttt	cc
   d5120:	ebc2 0e00 	rsbcc	lr, r2, r0
   d5124:	24ff      	movcc	r4, #255	; 0xff
   d5126:	fa44 f40e 	asrcc.w	r4, r4, lr
   d512a:	4027      	andcc	r7, r4
   d512c:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d512e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5130:	bf0c      	ite	eq
   d5132:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d5134:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5136:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d5138:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d513a:	d360      	bcc.n	d51fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d513c:	1a10      	subs	r0, r2, r0
   d513e:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d5140:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d5142:	2a07      	cmp	r2, #7
   d5144:	d917      	bls.n	d5176 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d5146:	2d01      	cmp	r5, #1
   d5148:	bf0c      	ite	eq
   d514a:	24ff      	moveq	r4, #255	; 0xff
   d514c:	2400      	movne	r4, #0
   d514e:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d5152:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5154:	3908      	subs	r1, #8
   d5156:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d5158:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d515a:	f800 4c80 	strb.w	r4, [r0, #-128]
   d515e:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d5162:	d8f7      	bhi.n	d5154 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d5164:	f1a2 0108 	sub.w	r1, r2, #8
   d5168:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d516c:	3101      	adds	r1, #1
   d516e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d5172:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d5176:	2a00      	cmp	r2, #0
   d5178:	d041      	beq.n	d51fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d517a:	4923      	ldr	r1, [pc, #140]	; (d5208 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d517c:	5c89      	ldrb	r1, [r1, r2]
   d517e:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d5180:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5182:	bf0c      	ite	eq
   d5184:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d5186:	438a      	bicne	r2, r1
   d5188:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d518a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d518c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d518e:	2900      	cmp	r1, #0
   d5190:	db35      	blt.n	d51fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d5192:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5196:	428c      	cmp	r4, r1
   d5198:	dd31      	ble.n	d51fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d519a:	2a00      	cmp	r2, #0
    w += x;
   d519c:	bfbc      	itt	lt
   d519e:	18d2      	addlt	r2, r2, r3
   d51a0:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d51a2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d51a6:	bfb8      	it	lt
   d51a8:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d51aa:	18d6      	adds	r6, r2, r3
   d51ac:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d51ae:	bfc4      	itt	gt
   d51b0:	1aa3      	subgt	r3, r4, r2
   d51b2:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d51b4:	2b00      	cmp	r3, #0
   d51b6:	dd22      	ble.n	d51fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d51b8:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d51ba:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d51be:	4810      	ldr	r0, [pc, #64]	; (d5200 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d51c0:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d51c4:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d51c6:	2201      	movs	r2, #1
   d51c8:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d51cc:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d51ce:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d51d0:	d109      	bne.n	d51e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d51d2:	1e5a      	subs	r2, r3, #1
   d51d4:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d51d6:	1c5c      	adds	r4, r3, #1
   d51d8:	d011      	beq.n	d51fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d51da:	f810 2b01 	ldrb.w	r2, [r0], #1
   d51de:	430a      	orrs	r2, r1
   d51e0:	f800 2c01 	strb.w	r2, [r0, #-1]
   d51e4:	e7f5      	b.n	d51d2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d51e6:	43c9      	mvns	r1, r1
   d51e8:	b2c9      	uxtb	r1, r1
   d51ea:	1e5a      	subs	r2, r3, #1
   d51ec:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d51ee:	1c5a      	adds	r2, r3, #1
   d51f0:	d005      	beq.n	d51fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d51f2:	f810 2b01 	ldrb.w	r2, [r0], #1
   d51f6:	400a      	ands	r2, r1
   d51f8:	f800 2c01 	strb.w	r2, [r0, #-1]
   d51fc:	e7f5      	b.n	d51ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d51fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5200:	2003d8c8 	.word	0x2003d8c8
   d5204:	2003d8c0 	.word	0x2003d8c0
   d5208:	2003d8b8 	.word	0x2003d8b8

000d520c <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d520e:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5210:	4606      	mov	r6, r0
   d5212:	4614      	mov	r4, r2
   d5214:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d5216:	db3f      	blt.n	d5298 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5218:	f000 fbb1 	bl	d597e <_ZN12Adafruit_GFX5widthEv>
   d521c:	4285      	cmp	r5, r0
   d521e:	da3b      	bge.n	d5298 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5220:	2c00      	cmp	r4, #0
   d5222:	db39      	blt.n	d5298 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5224:	4630      	mov	r0, r6
   d5226:	f000 fbad 	bl	d5984 <_ZN12Adafruit_GFX6heightEv>
   d522a:	4284      	cmp	r4, r0
   d522c:	da34      	bge.n	d5298 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d522e:	4630      	mov	r0, r6
   d5230:	f000 fba3 	bl	d597a <_ZN12Adafruit_GFX11getRotationEv>
   d5234:	2802      	cmp	r0, #2
   d5236:	d127      	bne.n	d5288 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5238:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d523a:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d523c:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d523e:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5240:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d5242:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5244:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d5246:	b204      	sxth	r4, r0
   d5248:	e006      	b.n	d5258 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d524a:	2801      	cmp	r0, #1
   d524c:	d104      	bne.n	d5258 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d524e:	8933      	ldrh	r3, [r6, #8]
   d5250:	3b01      	subs	r3, #1
   d5252:	1b1b      	subs	r3, r3, r4
   d5254:	462c      	mov	r4, r5
   d5256:	b21d      	sxth	r5, r3
   d5258:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d525a:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d525c:	fb94 f0f0 	sdiv	r0, r4, r0
   d5260:	b200      	sxth	r0, r0
   d5262:	4b0e      	ldr	r3, [pc, #56]	; (d529c <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d5264:	f004 0207 	and.w	r2, r4, #7
   d5268:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d526c:	d104      	bne.n	d5278 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d526e:	4097      	lsls	r7, r2
   d5270:	5c5a      	ldrb	r2, [r3, r1]
   d5272:	4317      	orrs	r7, r2
   d5274:	545f      	strb	r7, [r3, r1]
   d5276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d5278:	5c58      	ldrb	r0, [r3, r1]
   d527a:	2701      	movs	r7, #1
   d527c:	fa07 f202 	lsl.w	r2, r7, r2
   d5280:	ea20 0202 	bic.w	r2, r0, r2
   d5284:	545a      	strb	r2, [r3, r1]
   d5286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5288:	2803      	cmp	r0, #3
   d528a:	d1de      	bne.n	d524a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d528c:	8973      	ldrh	r3, [r6, #10]
   d528e:	3b01      	subs	r3, #1
   d5290:	1b5b      	subs	r3, r3, r5
   d5292:	4625      	mov	r5, r4
   d5294:	b21c      	sxth	r4, r3
   d5296:	e7df      	b.n	d5258 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d5298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d529a:	bf00      	nop
   d529c:	2003d8c8 	.word	0x2003d8c8

000d52a0 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d52a0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d52a2:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d52a4:	4604      	mov	r4, r0
   d52a6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d52a8:	2180      	movs	r1, #128	; 0x80
   d52aa:	f000 fa87 	bl	d57bc <_ZN12Adafruit_GFXC1Ess>
   d52ae:	4b06      	ldr	r3, [pc, #24]	; (d52c8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d52b0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d52b2:	23ff      	movs	r3, #255	; 0xff
   d52b4:	7763      	strb	r3, [r4, #29]
   d52b6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d52ba:	77e3      	strb	r3, [r4, #31]
   d52bc:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d52be:	f884 5020 	strb.w	r5, [r4, #32]
}
   d52c2:	4620      	mov	r0, r4
   d52c4:	bd38      	pop	{r3, r4, r5, pc}
   d52c6:	bf00      	nop
   d52c8:	000d89c4 	.word	0x000d89c4

000d52cc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d52cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d52d0:	2100      	movs	r1, #0
   d52d2:	4801      	ldr	r0, [pc, #4]	; (d52d8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d52d4:	f003 b9e7 	b.w	d86a6 <memset>
   d52d8:	2003d8c8 	.word	0x2003d8c8

000d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d52dc:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d52de:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d52e2:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d52e4:	4604      	mov	r4, r0
   d52e6:	460d      	mov	r5, r1
  if (sid != -1)
   d52e8:	d028      	beq.n	d533c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d52ea:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d52ee:	2101      	movs	r1, #1
   d52f0:	b280      	uxth	r0, r0
   d52f2:	f002 ffae 	bl	d8252 <digitalWrite>
    digitalWrite(dc, LOW);
   d52f6:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d52fa:	2100      	movs	r1, #0
   d52fc:	b280      	uxth	r0, r0
   d52fe:	f002 ffa8 	bl	d8252 <digitalWrite>
    digitalWrite(cs, LOW);
   d5302:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5306:	2100      	movs	r1, #0
   d5308:	b280      	uxth	r0, r0
   d530a:	f002 ffa2 	bl	d8252 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d530e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5312:	b12b      	cbz	r3, d5320 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5314:	f7ff f8ec 	bl	d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5318:	4629      	mov	r1, r5
   d531a:	f001 ff1d 	bl	d7158 <_ZN8SPIClass8transferEh>
   d531e:	e005      	b.n	d532c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5320:	462b      	mov	r3, r5
   d5322:	2201      	movs	r2, #1
   d5324:	7fa1      	ldrb	r1, [r4, #30]
   d5326:	7f60      	ldrb	r0, [r4, #29]
   d5328:	f002 ffd6 	bl	d82d8 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d532c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5330:	2101      	movs	r1, #1
   d5332:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d5334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5338:	f002 bf8b 	b.w	d8252 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d533c:	f003 f80a 	bl	d8354 <_Z19__fetch_global_Wirev>
   d5340:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5344:	f002 fac9 	bl	d78da <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d5348:	f003 f804 	bl	d8354 <_Z19__fetch_global_Wirev>
   d534c:	6803      	ldr	r3, [r0, #0]
   d534e:	2100      	movs	r1, #0
   d5350:	689b      	ldr	r3, [r3, #8]
   d5352:	4798      	blx	r3
    Wire.write(c);
   d5354:	f002 fffe 	bl	d8354 <_Z19__fetch_global_Wirev>
   d5358:	6803      	ldr	r3, [r0, #0]
   d535a:	4629      	mov	r1, r5
   d535c:	689b      	ldr	r3, [r3, #8]
   d535e:	4798      	blx	r3
    Wire.endTransmission();
   d5360:	f002 fff8 	bl	d8354 <_Z19__fetch_global_Wirev>
  }
}
   d5364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d5368:	f002 babe 	b.w	d78e8 <_ZN7TwoWire15endTransmissionEv>

000d536c <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d536c:	b538      	push	{r3, r4, r5, lr}
   d536e:	4604      	mov	r4, r0
   d5370:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d5372:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d5374:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d5378:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d537a:	3301      	adds	r3, #1
   d537c:	d037      	beq.n	d53ee <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d537e:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d5382:	2101      	movs	r1, #1
   d5384:	b280      	uxth	r0, r0
   d5386:	f002 ff53 	bl	d8230 <pinMode>
    pinMode(cs, OUTPUT);
   d538a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d538e:	2101      	movs	r1, #1
   d5390:	b280      	uxth	r0, r0
   d5392:	f002 ff4d 	bl	d8230 <pinMode>
    if (!hwSPI){
   d5396:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d539a:	b95b      	cbnz	r3, d53b4 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d539c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d53a0:	2101      	movs	r1, #1
   d53a2:	b280      	uxth	r0, r0
   d53a4:	f002 ff44 	bl	d8230 <pinMode>
    	pinMode(sclk, OUTPUT);
   d53a8:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d53ac:	2101      	movs	r1, #1
   d53ae:	b280      	uxth	r0, r0
   d53b0:	f002 ff3e 	bl	d8230 <pinMode>
    	}
    if (hwSPI){
   d53b4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d53b8:	b1eb      	cbz	r3, d53f6 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d53ba:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d53be:	2101      	movs	r1, #1
   d53c0:	b280      	uxth	r0, r0
   d53c2:	f002 ff46 	bl	d8252 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d53c6:	f7ff f893 	bl	d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53ca:	2101      	movs	r1, #1
   d53cc:	f001 fdc3 	bl	d6f56 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d53d0:	f7ff f88e 	bl	d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53d4:	2110      	movs	r1, #16
   d53d6:	f001 fe9b 	bl	d7110 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d53da:	f7ff f889 	bl	d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53de:	2100      	movs	r1, #0
   d53e0:	f001 fdca 	bl	d6f78 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d53e4:	f7ff f884 	bl	d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53e8:	f001 fda4 	bl	d6f34 <_ZN8SPIClass5beginEv>
   d53ec:	e003      	b.n	d53f6 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d53ee:	f002 ffb1 	bl	d8354 <_Z19__fetch_global_Wirev>
   d53f2:	f002 fa37 	bl	d7864 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d53f6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d53fa:	2101      	movs	r1, #1
   d53fc:	b280      	uxth	r0, r0
   d53fe:	f002 ff17 	bl	d8230 <pinMode>
  digitalWrite(rst, HIGH);
   d5402:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5406:	2101      	movs	r1, #1
   d5408:	b280      	uxth	r0, r0
   d540a:	f002 ff22 	bl	d8252 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d540e:	2001      	movs	r0, #1
   d5410:	f001 ffb0 	bl	d7374 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d5414:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5418:	2100      	movs	r1, #0
   d541a:	b280      	uxth	r0, r0
   d541c:	f002 ff19 	bl	d8252 <digitalWrite>
  // wait 10ms
  delay(10);
   d5420:	200a      	movs	r0, #10
   d5422:	f001 ffa7 	bl	d7374 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d5426:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d542a:	2101      	movs	r1, #1
   d542c:	b280      	uxth	r0, r0
   d542e:	f002 ff10 	bl	d8252 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d5432:	4620      	mov	r0, r4
   d5434:	21ae      	movs	r1, #174	; 0xae
   d5436:	f7ff ff51 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d543a:	4620      	mov	r0, r4
   d543c:	21d5      	movs	r1, #213	; 0xd5
   d543e:	f7ff ff4d 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d5442:	4620      	mov	r0, r4
   d5444:	2180      	movs	r1, #128	; 0x80
   d5446:	f7ff ff49 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d544a:	4620      	mov	r0, r4
   d544c:	21a8      	movs	r1, #168	; 0xa8
   d544e:	f7ff ff45 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d5452:	4620      	mov	r0, r4
   d5454:	213f      	movs	r1, #63	; 0x3f
   d5456:	f7ff ff41 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d545a:	4620      	mov	r0, r4
   d545c:	21d3      	movs	r1, #211	; 0xd3
   d545e:	f7ff ff3d 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d5462:	4620      	mov	r0, r4
   d5464:	2100      	movs	r1, #0
   d5466:	f7ff ff39 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d546a:	4620      	mov	r0, r4
   d546c:	2140      	movs	r1, #64	; 0x40
   d546e:	f7ff ff35 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d5472:	218d      	movs	r1, #141	; 0x8d
   d5474:	4620      	mov	r0, r4
   d5476:	f7ff ff31 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d547a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d547c:	bf0c      	ite	eq
   d547e:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d5480:	2114      	movne	r1, #20
   d5482:	4620      	mov	r0, r4
   d5484:	f7ff ff2a 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d5488:	4620      	mov	r0, r4
   d548a:	2120      	movs	r1, #32
   d548c:	f7ff ff26 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d5490:	4620      	mov	r0, r4
   d5492:	2100      	movs	r1, #0
   d5494:	f7ff ff22 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d5498:	4620      	mov	r0, r4
   d549a:	21a1      	movs	r1, #161	; 0xa1
   d549c:	f7ff ff1e 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d54a0:	4620      	mov	r0, r4
   d54a2:	21c8      	movs	r1, #200	; 0xc8
   d54a4:	f7ff ff1a 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d54a8:	4620      	mov	r0, r4
   d54aa:	21da      	movs	r1, #218	; 0xda
   d54ac:	f7ff ff16 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d54b0:	4620      	mov	r0, r4
   d54b2:	2112      	movs	r1, #18
   d54b4:	f7ff ff12 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d54b8:	2181      	movs	r1, #129	; 0x81
   d54ba:	4620      	mov	r0, r4
   d54bc:	f7ff ff0e 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d54c0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d54c2:	bf0c      	ite	eq
   d54c4:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d54c6:	21cf      	movne	r1, #207	; 0xcf
   d54c8:	4620      	mov	r0, r4
   d54ca:	f7ff ff07 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d54ce:	21d9      	movs	r1, #217	; 0xd9
   d54d0:	4620      	mov	r0, r4
   d54d2:	f7ff ff03 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d54d6:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d54d8:	bf0c      	ite	eq
   d54da:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d54dc:	21f1      	movne	r1, #241	; 0xf1
   d54de:	4620      	mov	r0, r4
   d54e0:	f7ff fefc 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d54e4:	4620      	mov	r0, r4
   d54e6:	21db      	movs	r1, #219	; 0xdb
   d54e8:	f7ff fef8 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d54ec:	4620      	mov	r0, r4
   d54ee:	2140      	movs	r1, #64	; 0x40
   d54f0:	f7ff fef4 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d54f4:	4620      	mov	r0, r4
   d54f6:	21a4      	movs	r1, #164	; 0xa4
   d54f8:	f7ff fef0 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d54fc:	4620      	mov	r0, r4
   d54fe:	21a6      	movs	r1, #166	; 0xa6
   d5500:	f7ff feec 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5504:	4620      	mov	r0, r4
   d5506:	21af      	movs	r1, #175	; 0xaf
}
   d5508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d550c:	f7ff bee6 	b.w	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d5510 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d5514:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5516:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5518:	f7ff fee0 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d551c:	2100      	movs	r1, #0
   d551e:	4620      	mov	r0, r4
   d5520:	f7ff fedc 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d5524:	217f      	movs	r1, #127	; 0x7f
   d5526:	4620      	mov	r0, r4
   d5528:	f7ff fed8 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d552c:	2122      	movs	r1, #34	; 0x22
   d552e:	4620      	mov	r0, r4
   d5530:	f7ff fed4 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d5534:	2100      	movs	r1, #0
   d5536:	4620      	mov	r0, r4
   d5538:	f7ff fed0 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d553c:	2107      	movs	r1, #7
   d553e:	4620      	mov	r0, r4
   d5540:	f7ff fecc 	bl	d52dc <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d5544:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d5548:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d5608 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d554c:	3301      	adds	r3, #1
   d554e:	d035      	beq.n	d55bc <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d5550:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5554:	2101      	movs	r1, #1
   d5556:	b280      	uxth	r0, r0
   d5558:	f002 fe7b 	bl	d8252 <digitalWrite>
    digitalWrite(dc, HIGH);
   d555c:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5560:	2101      	movs	r1, #1
   d5562:	b280      	uxth	r0, r0
   d5564:	f002 fe75 	bl	d8252 <digitalWrite>
    digitalWrite(cs, LOW);
   d5568:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d556c:	2100      	movs	r1, #0
   d556e:	b280      	uxth	r0, r0
   d5570:	f002 fe6f 	bl	d8252 <digitalWrite>
   d5574:	2001      	movs	r0, #1
   d5576:	f001 fa83 	bl	d6a80 <HAL_Delay_Microseconds>
   d557a:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d557c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d5580:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d5584:	b12b      	cbz	r3, d5592 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5586:	f7fe ffb3 	bl	d44f0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d558a:	4631      	mov	r1, r6
   d558c:	f001 fde4 	bl	d7158 <_ZN8SPIClass8transferEh>
   d5590:	e005      	b.n	d559e <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5592:	4633      	mov	r3, r6
   d5594:	2201      	movs	r2, #1
   d5596:	7fa1      	ldrb	r1, [r4, #30]
   d5598:	7f60      	ldrb	r0, [r4, #29]
   d559a:	f002 fe9d 	bl	d82d8 <shiftOut>
   d559e:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d55a0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d55a4:	d1ea      	bne.n	d557c <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d55a6:	2001      	movs	r0, #1
   d55a8:	f001 fa6a 	bl	d6a80 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d55ac:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d55b0:	2101      	movs	r1, #1
   d55b2:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d55b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d55b8:	f002 be4b 	b.w	d8252 <digitalWrite>
   d55bc:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d55be:	f002 fec9 	bl	d8354 <_Z19__fetch_global_Wirev>
   d55c2:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d55c6:	f002 f988 	bl	d78da <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d55ca:	f002 fec3 	bl	d8354 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d55ce:	6803      	ldr	r3, [r0, #0]
   d55d0:	2140      	movs	r1, #64	; 0x40
   d55d2:	689b      	ldr	r3, [r3, #8]
   d55d4:	4798      	blx	r3
   d55d6:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d55d8:	f002 febc 	bl	d8354 <_Z19__fetch_global_Wirev>
   d55dc:	19af      	adds	r7, r5, r6
   d55de:	6803      	ldr	r3, [r0, #0]
   d55e0:	b2bf      	uxth	r7, r7
   d55e2:	689b      	ldr	r3, [r3, #8]
   d55e4:	f818 1007 	ldrb.w	r1, [r8, r7]
   d55e8:	3601      	adds	r6, #1
   d55ea:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d55ec:	2e10      	cmp	r6, #16
   d55ee:	d1f3      	bne.n	d55d8 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d55f0:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d55f2:	f002 feaf 	bl	d8354 <_Z19__fetch_global_Wirev>
   d55f6:	b2ad      	uxth	r5, r5
   d55f8:	f002 f976 	bl	d78e8 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d55fc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5600:	d1dd      	bne.n	d55be <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5606:	bf00      	nop
   d5608:	2003d8c8 	.word	0x2003d8c8

000d560c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d560c:	f001 b988 	b.w	d6920 <HAL_Pin_Map>

000d5610 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5614:	b085      	sub	sp, #20
   d5616:	461e      	mov	r6, r3
   d5618:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d561c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d5620:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5622:	1a9a      	subs	r2, r3, r2
   d5624:	2a00      	cmp	r2, #0
   d5626:	bfb8      	it	lt
   d5628:	4252      	neglt	r2, r2
   d562a:	9200      	str	r2, [sp, #0]
   d562c:	1a72      	subs	r2, r6, r1
   d562e:	2a00      	cmp	r2, #0
   d5630:	bfb8      	it	lt
   d5632:	4252      	neglt	r2, r2
   d5634:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5636:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5638:	9a00      	ldr	r2, [sp, #0]
   d563a:	9901      	ldr	r1, [sp, #4]
   d563c:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d563e:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5640:	dd05      	ble.n	d564e <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d5642:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d5644:	461e      	mov	r6, r3
   d5646:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5648:	4622      	mov	r2, r4
    swap(x0, y0);
   d564a:	462c      	mov	r4, r5
   d564c:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d564e:	42b4      	cmp	r4, r6
   d5650:	dd05      	ble.n	d565e <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d5652:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d5654:	461d      	mov	r5, r3
   d5656:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d5658:	4622      	mov	r2, r4
   d565a:	4634      	mov	r4, r6
   d565c:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d565e:	1b5a      	subs	r2, r3, r5
   d5660:	2a00      	cmp	r2, #0
   d5662:	bfb8      	it	lt
   d5664:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d5666:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d566a:	429d      	cmp	r5, r3
   d566c:	bfb4      	ite	lt
   d566e:	2301      	movlt	r3, #1
   d5670:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d5674:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d5678:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d567a:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d567c:	fa0f f788 	sxth.w	r7, r8
   d5680:	2202      	movs	r2, #2
   d5682:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d5686:	42b4      	cmp	r4, r6
   d5688:	dc1f      	bgt.n	d56ca <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d568a:	9a01      	ldr	r2, [sp, #4]
   d568c:	9b00      	ldr	r3, [sp, #0]
   d568e:	4293      	cmp	r3, r2
   d5690:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d5694:	bfc8      	it	gt
   d5696:	4622      	movgt	r2, r4
   d5698:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d569c:	bfc8      	it	gt
   d569e:	4629      	movgt	r1, r5
   d56a0:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d56a2:	bfdc      	itt	le
   d56a4:	462a      	movle	r2, r5
   d56a6:	4621      	movle	r1, r4
   d56a8:	4648      	mov	r0, r9
   d56aa:	47d8      	blx	fp
    }
    err -= dy;
   d56ac:	9b03      	ldr	r3, [sp, #12]
   d56ae:	1aff      	subs	r7, r7, r3
   d56b0:	b2bb      	uxth	r3, r7
   d56b2:	b21f      	sxth	r7, r3
    if (err < 0) {
   d56b4:	2f00      	cmp	r7, #0
   d56b6:	da05      	bge.n	d56c4 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d56b8:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d56ba:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d56be:	4415      	add	r5, r2
   d56c0:	b22d      	sxth	r5, r5
      err += dx;
   d56c2:	b23f      	sxth	r7, r7
   d56c4:	3401      	adds	r4, #1
   d56c6:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d56c8:	e7dd      	b.n	d5686 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d56ca:	b005      	add	sp, #20
   d56cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d56d0 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d56d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d56d4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d56d8:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d56da:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d56de:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d56e0:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d56e2:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d56e4:	4691      	mov	r9, r2
   d56e6:	460d      	mov	r5, r1
   d56e8:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d56ea:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d56ec:	6823      	ldr	r3, [r4, #0]
   d56ee:	9600      	str	r6, [sp, #0]
   d56f0:	f10a 32ff 	add.w	r2, sl, #4294967295
   d56f4:	444a      	add	r2, r9
   d56f6:	69df      	ldr	r7, [r3, #28]
   d56f8:	4629      	mov	r1, r5
   d56fa:	4643      	mov	r3, r8
   d56fc:	4620      	mov	r0, r4
   d56fe:	b212      	sxth	r2, r2
   d5700:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d5702:	6823      	ldr	r3, [r4, #0]
   d5704:	9600      	str	r6, [sp, #0]
   d5706:	699f      	ldr	r7, [r3, #24]
   d5708:	464a      	mov	r2, r9
   d570a:	4653      	mov	r3, sl
   d570c:	4629      	mov	r1, r5
   d570e:	4620      	mov	r0, r4
   d5710:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d5712:	6823      	ldr	r3, [r4, #0]
   d5714:	960a      	str	r6, [sp, #40]	; 0x28
   d5716:	f108 31ff 	add.w	r1, r8, #4294967295
   d571a:	4429      	add	r1, r5
   d571c:	699d      	ldr	r5, [r3, #24]
   d571e:	464a      	mov	r2, r9
   d5720:	4653      	mov	r3, sl
   d5722:	b209      	sxth	r1, r1
   d5724:	4620      	mov	r0, r4
   d5726:	46ac      	mov	ip, r5
}
   d5728:	b002      	add	sp, #8
   d572a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d572e:	4760      	bx	ip

000d5730 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d5730:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d5732:	3b01      	subs	r3, #1
   d5734:	4413      	add	r3, r2
   d5736:	6804      	ldr	r4, [r0, #0]
   d5738:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d573c:	9501      	str	r5, [sp, #4]
   d573e:	b21b      	sxth	r3, r3
   d5740:	9300      	str	r3, [sp, #0]
   d5742:	6964      	ldr	r4, [r4, #20]
   d5744:	460b      	mov	r3, r1
   d5746:	47a0      	blx	r4
}
   d5748:	b003      	add	sp, #12
   d574a:	bd30      	pop	{r4, r5, pc}

000d574c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d574c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d574e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5752:	6804      	ldr	r4, [r0, #0]
   d5754:	e88d 0024 	stmia.w	sp, {r2, r5}
   d5758:	3b01      	subs	r3, #1
   d575a:	440b      	add	r3, r1
   d575c:	6964      	ldr	r4, [r4, #20]
   d575e:	b21b      	sxth	r3, r3
   d5760:	47a0      	blx	r4
}
   d5762:	b003      	add	sp, #12
   d5764:	bd30      	pop	{r4, r5, pc}

000d5766 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d5766:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d576a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d576e:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d5772:	4605      	mov	r5, r0
   d5774:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d5776:	460c      	mov	r4, r1
   d5778:	eb01 0a03 	add.w	sl, r1, r3
   d577c:	4554      	cmp	r4, sl
   d577e:	da0b      	bge.n	d5798 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d5780:	682b      	ldr	r3, [r5, #0]
   d5782:	f8cd 9000 	str.w	r9, [sp]
   d5786:	699e      	ldr	r6, [r3, #24]
   d5788:	4621      	mov	r1, r4
   d578a:	4643      	mov	r3, r8
   d578c:	463a      	mov	r2, r7
   d578e:	4628      	mov	r0, r5
   d5790:	3401      	adds	r4, #1
   d5792:	47b0      	blx	r6
   d5794:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d5796:	e7f1      	b.n	d577c <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d5798:	b002      	add	sp, #8
   d579a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d579e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d579e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d57a0:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d57a4:	6804      	ldr	r4, [r0, #0]
   d57a6:	9101      	str	r1, [sp, #4]
   d57a8:	9200      	str	r2, [sp, #0]
   d57aa:	2200      	movs	r2, #0
   d57ac:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d57b0:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d57b2:	4611      	mov	r1, r2
   d57b4:	47a0      	blx	r4
}
   d57b6:	b002      	add	sp, #8
   d57b8:	bd10      	pop	{r4, pc}

000d57ba <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d57ba:	4770      	bx	lr

000d57bc <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d57bc:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d57be:	8101      	strh	r1, [r0, #8]
   d57c0:	2400      	movs	r4, #0
   d57c2:	4d08      	ldr	r5, [pc, #32]	; (d57e4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d57c4:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d57c6:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d57c8:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d57ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d57ce:	2201      	movs	r2, #1
   d57d0:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d57d2:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d57d4:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d57d6:	8204      	strh	r4, [r0, #16]
   d57d8:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d57da:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d57dc:	82c1      	strh	r1, [r0, #22]
   d57de:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d57e0:	7682      	strb	r2, [r0, #26]
}
   d57e2:	bd30      	pop	{r4, r5, pc}
   d57e4:	000d89fc 	.word	0x000d89fc

000d57e8 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d57e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57ec:	b08f      	sub	sp, #60	; 0x3c
   d57ee:	4605      	mov	r5, r0
   d57f0:	9106      	str	r1, [sp, #24]
   d57f2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d57f6:	9107      	str	r1, [sp, #28]
   d57f8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d57fc:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d57fe:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5802:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5804:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d5808:	4281      	cmp	r1, r0
   d580a:	dd7c      	ble.n	d5906 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d580c:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d5810:	4291      	cmp	r1, r2
   d5812:	dd78      	ble.n	d5906 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d5814:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d5816:	fb11 0008 	smlabb	r0, r1, r8, r0
   d581a:	2800      	cmp	r0, #0
   d581c:	dd73      	ble.n	d5906 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d581e:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d5822:	2800      	cmp	r0, #0
   d5824:	dd6f      	ble.n	d5906 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5826:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d582a:	b296      	uxth	r6, r2
   d582c:	930c      	str	r3, [sp, #48]	; 0x30
   d582e:	f106 0308 	add.w	r3, r6, #8
   d5832:	b29b      	uxth	r3, r3
   d5834:	9109      	str	r1, [sp, #36]	; 0x24
   d5836:	2400      	movs	r4, #0
   d5838:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d583a:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d583c:	bf1c      	itt	ne
   d583e:	4b33      	ldrne	r3, [pc, #204]	; (d590c <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d5840:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5842:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5844:	bf16      	itet	ne
   d5846:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d5848:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d584c:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5850:	9604      	str	r6, [sp, #16]
   d5852:	fa1f f388 	uxth.w	r3, r8
   d5856:	9303      	str	r3, [sp, #12]
   d5858:	9a03      	ldr	r2, [sp, #12]
   d585a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d585e:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d5862:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5866:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d5868:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d586a:	920a      	str	r2, [sp, #40]	; 0x28
   d586c:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d586e:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d5872:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d5874:	f019 0f01 	tst.w	r9, #1
   d5878:	d011      	beq.n	d589e <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d587a:	f1b8 0f01 	cmp.w	r8, #1
   d587e:	682b      	ldr	r3, [r5, #0]
   d5880:	d103      	bne.n	d588a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d5882:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5886:	9b07      	ldr	r3, [sp, #28]
   d5888:	e014      	b.n	d58b4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d588a:	9a07      	ldr	r2, [sp, #28]
   d588c:	9201      	str	r2, [sp, #4]
   d588e:	f8cd a000 	str.w	sl, [sp]
   d5892:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5896:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d589a:	4653      	mov	r3, sl
   d589c:	e018      	b.n	d58d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d589e:	9b07      	ldr	r3, [sp, #28]
   d58a0:	9a08      	ldr	r2, [sp, #32]
   d58a2:	4293      	cmp	r3, r2
   d58a4:	d017      	beq.n	d58d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d58a6:	f1b8 0f01 	cmp.w	r8, #1
   d58aa:	682b      	ldr	r3, [r5, #0]
   d58ac:	d107      	bne.n	d58be <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d58ae:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d58b2:	4613      	mov	r3, r2
   d58b4:	b23a      	sxth	r2, r7
   d58b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d58b8:	4628      	mov	r0, r5
   d58ba:	47d8      	blx	fp
   d58bc:	e00b      	b.n	d58d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d58be:	9a08      	ldr	r2, [sp, #32]
   d58c0:	9201      	str	r2, [sp, #4]
   d58c2:	f8cd a000 	str.w	sl, [sp]
   d58c6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d58ca:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d58ce:	4653      	mov	r3, sl
   d58d0:	990a      	ldr	r1, [sp, #40]	; 0x28
   d58d2:	4628      	mov	r0, r5
   d58d4:	47d8      	blx	fp
   d58d6:	9b04      	ldr	r3, [sp, #16]
   d58d8:	9a03      	ldr	r2, [sp, #12]
   d58da:	4413      	add	r3, r2
   d58dc:	b29b      	uxth	r3, r3
   d58de:	9304      	str	r3, [sp, #16]
   d58e0:	9b05      	ldr	r3, [sp, #20]
   d58e2:	4413      	add	r3, r2
   d58e4:	b29b      	uxth	r3, r3
   d58e6:	3701      	adds	r7, #1
   d58e8:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d58ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d58ec:	b2bf      	uxth	r7, r7
   d58ee:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d58f0:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d58f4:	d1be      	bne.n	d5874 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d58f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d58f8:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d58fa:	3401      	adds	r4, #1
   d58fc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5900:	b264      	sxtb	r4, r4
   d5902:	9309      	str	r3, [sp, #36]	; 0x24
   d5904:	d199      	bne.n	d583a <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d5906:	b00f      	add	sp, #60	; 0x3c
   d5908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d590c:	000d8a2c 	.word	0x000d8a2c

000d5910 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5910:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d5912:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5914:	b085      	sub	sp, #20
   d5916:	4604      	mov	r4, r0
   d5918:	460b      	mov	r3, r1

  if (c == '\n') {
   d591a:	d104      	bne.n	d5926 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d591c:	7e02      	ldrb	r2, [r0, #24]
   d591e:	8a43      	ldrh	r3, [r0, #18]
   d5920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5924:	e023      	b.n	d596e <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d5926:	290d      	cmp	r1, #13
   d5928:	d024      	beq.n	d5974 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d592a:	7e05      	ldrb	r5, [r0, #24]
   d592c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d5930:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5934:	9502      	str	r5, [sp, #8]
   d5936:	8ac5      	ldrh	r5, [r0, #22]
   d5938:	9501      	str	r5, [sp, #4]
   d593a:	8a85      	ldrh	r5, [r0, #20]
   d593c:	9500      	str	r5, [sp, #0]
   d593e:	f7ff ff53 	bl	d57e8 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d5942:	7e22      	ldrb	r2, [r4, #24]
   d5944:	8a23      	ldrh	r3, [r4, #16]
   d5946:	b291      	uxth	r1, r2
   d5948:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d594c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5950:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d5952:	b21b      	sxth	r3, r3
   d5954:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5956:	b168      	cbz	r0, d5974 <_ZN12Adafruit_GFX5writeEh+0x64>
   d5958:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d595c:	f06f 0505 	mvn.w	r5, #5
   d5960:	fb05 0202 	mla	r2, r5, r2, r0
   d5964:	4293      	cmp	r3, r2
   d5966:	dd05      	ble.n	d5974 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d5968:	8a63      	ldrh	r3, [r4, #18]
   d596a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d596e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d5970:	2300      	movs	r3, #0
   d5972:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d5974:	2001      	movs	r0, #1
   d5976:	b005      	add	sp, #20
   d5978:	bd30      	pop	{r4, r5, pc}

000d597a <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d597a:	7e40      	ldrb	r0, [r0, #25]
   d597c:	4770      	bx	lr

000d597e <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d597e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d5982:	4770      	bx	lr

000d5984 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d5984:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d5988:	4770      	bx	lr

000d598a <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d598a:	f000 bfc9 	b.w	d6920 <HAL_Pin_Map>

000d598e <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d598e:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d5990:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5994:	6803      	ldr	r3, [r0, #0]
   d5996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5998:	4798      	blx	r3
}
   d599a:	3000      	adds	r0, #0
   d599c:	bf18      	it	ne
   d599e:	2001      	movne	r0, #1
   d59a0:	bd08      	pop	{r3, pc}

000d59a2 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d59a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59a4:	4606      	mov	r6, r0
   d59a6:	460f      	mov	r7, r1
   d59a8:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d59aa:	b1c4      	cbz	r4, d59de <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d59ac:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d59b0:	6803      	ldr	r3, [r0, #0]
   d59b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59b4:	4798      	blx	r3
   d59b6:	b908      	cbnz	r0, d59bc <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d59b8:	2000      	movs	r0, #0
   d59ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d59bc:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d59c0:	2cfa      	cmp	r4, #250	; 0xfa
   d59c2:	6803      	ldr	r3, [r0, #0]
   d59c4:	4625      	mov	r5, r4
   d59c6:	bfa8      	it	ge
   d59c8:	25fa      	movge	r5, #250	; 0xfa
   d59ca:	68db      	ldr	r3, [r3, #12]
   d59cc:	462a      	mov	r2, r5
   d59ce:	4639      	mov	r1, r7
   d59d0:	4798      	blx	r3
   d59d2:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d59d4:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d59d6:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d59d8:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d59da:	d0e6      	beq.n	d59aa <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d59dc:	e7ec      	b.n	d59b8 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d59de:	2001      	movs	r0, #1
}
   d59e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59e2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d59e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d59e6:	4606      	mov	r6, r0
   d59e8:	4688      	mov	r8, r1
   d59ea:	4691      	mov	r9, r2
   d59ec:	461f      	mov	r7, r3
   d59ee:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d59f0:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d59f2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d59f6:	6803      	ldr	r3, [r0, #0]
   d59f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59fa:	4798      	blx	r3
   d59fc:	b1d0      	cbz	r0, d5a34 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d59fe:	2d00      	cmp	r5, #0
   d5a00:	db18      	blt.n	d5a34 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d5a02:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5a06:	6803      	ldr	r3, [r0, #0]
   d5a08:	691b      	ldr	r3, [r3, #16]
   d5a0a:	4798      	blx	r3
   d5a0c:	b160      	cbz	r0, d5a28 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d5a0e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5a12:	6803      	ldr	r3, [r0, #0]
   d5a14:	695b      	ldr	r3, [r3, #20]
   d5a16:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d5a18:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d5a1c:	3401      	adds	r4, #1
   d5a1e:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5a20:	454c      	cmp	r4, r9
   d5a22:	d007      	beq.n	d5a34 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d5a24:	463d      	mov	r5, r7
   d5a26:	e7ec      	b.n	d5a02 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5a28:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5a2a:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5a2c:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5a2e:	f001 fca1 	bl	d7374 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5a32:	e7de      	b.n	d59f2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d5a34:	4620      	mov	r0, r4
   d5a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5a3a <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d5a3a:	b570      	push	{r4, r5, r6, lr}
   d5a3c:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d5a3e:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d5a42:	2296      	movs	r2, #150	; 0x96
   d5a44:	2100      	movs	r1, #0
   d5a46:	4628      	mov	r0, r5
   d5a48:	f002 fe2d 	bl	d86a6 <memset>
  strcpy((char *)buffer, servername);
   d5a4c:	6861      	ldr	r1, [r4, #4]
   d5a4e:	4628      	mov	r0, r5
   d5a50:	f002 fe5a 	bl	d8708 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d5a54:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5a58:	8922      	ldrh	r2, [r4, #8]
   d5a5a:	6803      	ldr	r3, [r0, #0]
   d5a5c:	4629      	mov	r1, r5
   d5a5e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d5a60:	2300      	movs	r3, #0
   d5a62:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d5a64:	3000      	adds	r0, #0
   d5a66:	bf18      	it	ne
   d5a68:	2001      	movne	r0, #1
   d5a6a:	bd70      	pop	{r4, r5, r6, pc}

000d5a6c <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d5a6c:	b510      	push	{r4, lr}
   d5a6e:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d5a70:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5a74:	6803      	ldr	r3, [r0, #0]
   d5a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a78:	4798      	blx	r3
   d5a7a:	b120      	cbz	r0, d5a86 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d5a7c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5a80:	6803      	ldr	r3, [r0, #0]
   d5a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a84:	4798      	blx	r3
  }
  return true;
}
   d5a86:	2001      	movs	r0, #1
   d5a88:	bd10      	pop	{r4, pc}

000d5a8a <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d5a8a:	f000 bf49 	b.w	d6920 <HAL_Pin_Map>
	...

000d5a90 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5a90:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d5a92:	6103      	str	r3, [r0, #16]
  password = pass;
   d5a94:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5a96:	4d0d      	ldr	r5, [pc, #52]	; (d5acc <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5a98:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d5a9a:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d5a9c:	4a0c      	ldr	r2, [pc, #48]	; (d5ad0 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5a9e:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5aa0:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d5aa2:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5aa4:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5aa6:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d5aaa:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d5aae:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d5ab2:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d5ab6:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d5aba:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d5abc:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d5abe:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d5ac2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d5ac6:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d5aca:	bd30      	pop	{r4, r5, pc}
   d5acc:	000d8f54 	.word	0x000d8f54
   d5ad0:	000d8f7d 	.word	0x000d8f7d

000d5ad4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5ad4:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5ad6:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5ada:	7203      	strb	r3, [r0, #8]
}
   d5adc:	bd10      	pop	{r4, pc}

000d5ade <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5ade:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5ae0:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5ae2:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5ae4:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5ae6:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5ae8:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5aea:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5aec:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5aee:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5af0:	6283      	str	r3, [r0, #40]	; 0x28
   d5af2:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5af4:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5af6:	bd10      	pop	{r4, pc}

000d5af8 <_GLOBAL__sub_I__Z11printBufferPht>:
   d5af8:	f000 bf12 	b.w	d6920 <HAL_Pin_Map>

000d5afc <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5afc:	f000 bf10 	b.w	d6920 <HAL_Pin_Map>

000d5b00 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5b00:	f000 bf0e 	b.w	d6920 <HAL_Pin_Map>

000d5b04 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5b04:	b510      	push	{r4, lr}
   d5b06:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5b08:	3024      	adds	r0, #36	; 0x24
   d5b0a:	f000 fa71 	bl	d5ff0 <_ZN8FatCache4syncEv>
   d5b0e:	b128      	cbz	r0, d5b1c <_ZN9FatVolume9cacheSyncEv+0x18>
   d5b10:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5b18:	f000 ba6a 	b.w	d5ff0 <_ZN8FatCache4syncEv>
  }
   d5b1c:	bd10      	pop	{r4, pc}

000d5b1e <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5b1e:	f000 beff 	b.w	d6920 <HAL_Pin_Map>

000d5b22 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5b22:	f000 befd 	b.w	d6920 <HAL_Pin_Map>

000d5b26 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5b26:	f000 befb 	b.w	d6920 <HAL_Pin_Map>

000d5b2a <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5b2a:	f000 bef9 	b.w	d6920 <HAL_Pin_Map>

000d5b2e <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5b2e:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5b30:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5b32:	f043 0304 	orr.w	r3, r3, #4
   d5b36:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5b38:	f100 0210 	add.w	r2, r0, #16
   d5b3c:	6880      	ldr	r0, [r0, #8]
   d5b3e:	f000 bb0d 	b.w	d615c <_ZN9FatVolume15allocateClusterEmPm>

000d5b42 <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5b42:	b510      	push	{r4, lr}
   d5b44:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5b46:	6880      	ldr	r0, [r0, #8]
   d5b48:	460a      	mov	r2, r1
   d5b4a:	3024      	adds	r0, #36	; 0x24
   d5b4c:	69a1      	ldr	r1, [r4, #24]
   d5b4e:	f000 fa76 	bl	d603e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5b52:	b120      	cbz	r0, d5b5e <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5b54:	88a3      	ldrh	r3, [r4, #4]
   d5b56:	f003 030f 	and.w	r3, r3, #15
   d5b5a:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5b5e:	bd10      	pop	{r4, pc}

000d5b60 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5b60:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5b62:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5b64:	4605      	mov	r5, r0
   d5b66:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5b68:	b984      	cbnz	r4, d5b8c <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5b6a:	2224      	movs	r2, #36	; 0x24
   d5b6c:	4621      	mov	r1, r4
   d5b6e:	f002 fd9a 	bl	d86a6 <memset>

  m_vol = vol;
   d5b72:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5b74:	79f3      	ldrb	r3, [r6, #7]
   d5b76:	2b10      	cmp	r3, #16
   d5b78:	d003      	beq.n	d5b82 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5b7a:	2b20      	cmp	r3, #32
   d5b7c:	d106      	bne.n	d5b8c <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5b7e:	2340      	movs	r3, #64	; 0x40
   d5b80:	e000      	b.n	d5b84 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5b82:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5b84:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5b86:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5b88:	70a8      	strb	r0, [r5, #2]
   d5b8a:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5b8c:	2000      	movs	r0, #0
   d5b8e:	bd70      	pop	{r4, r5, r6, pc}

000d5b90 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b94:	7803      	ldrb	r3, [r0, #0]
   d5b96:	4604      	mov	r4, r0
   d5b98:	4689      	mov	r9, r1
   d5b9a:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5b9c:	b14b      	cbz	r3, d5bb2 <_ZN7FatFile4readEPvj+0x22>
   d5b9e:	7882      	ldrb	r2, [r0, #2]
   d5ba0:	07d1      	lsls	r1, r2, #31
   d5ba2:	d506      	bpl.n	d5bb2 <_ZN7FatFile4readEPvj+0x22>
   d5ba4:	e00c      	b.n	d5bc0 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5ba6:	465a      	mov	r2, fp
   d5ba8:	6921      	ldr	r1, [r4, #16]
   d5baa:	f000 fa72 	bl	d6092 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5bae:	2800      	cmp	r0, #0
   d5bb0:	da3d      	bge.n	d5c2e <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5bb2:	7863      	ldrb	r3, [r4, #1]
   d5bb4:	f043 0302 	orr.w	r3, r3, #2
   d5bb8:	7063      	strb	r3, [r4, #1]
  return -1;
   d5bba:	f04f 30ff 	mov.w	r0, #4294967295
   d5bbe:	e097      	b.n	d5cf0 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5bc0:	071a      	lsls	r2, r3, #28
   d5bc2:	d503      	bpl.n	d5bcc <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5bc4:	69e3      	ldr	r3, [r4, #28]
   d5bc6:	6962      	ldr	r2, [r4, #20]
   d5bc8:	1a9b      	subs	r3, r3, r2
   d5bca:	e007      	b.n	d5bdc <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5bcc:	069a      	lsls	r2, r3, #26
   d5bce:	d508      	bpl.n	d5be2 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5bd0:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5bd2:	891a      	ldrh	r2, [r3, #8]
   d5bd4:	6963      	ldr	r3, [r4, #20]
   d5bd6:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5bda:	b29b      	uxth	r3, r3
   d5bdc:	429d      	cmp	r5, r3
   d5bde:	bf28      	it	cs
   d5be0:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5be2:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5be4:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5be8:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5bec:	2e00      	cmp	r6, #0
   d5bee:	d035      	beq.n	d5c5c <_ZN7FatFile4readEPvj+0xcc>
   d5bf0:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5bf2:	6963      	ldr	r3, [r4, #20]
   d5bf4:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5bf6:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5bfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5bfe:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5c02:	d002      	beq.n	d5c0a <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5c04:	6a03      	ldr	r3, [r0, #32]
   d5c06:	4419      	add	r1, r3
   d5c08:	e01d      	b.n	d5c46 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5c0a:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5c0e:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5c12:	f1ba 0f00 	cmp.w	sl, #0
   d5c16:	d110      	bne.n	d5c3a <_ZN7FatFile4readEPvj+0xaa>
   d5c18:	f1b8 0f00 	cmp.w	r8, #0
   d5c1c:	d10d      	bne.n	d5c3a <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5c1e:	2b00      	cmp	r3, #0
   d5c20:	d1c1      	bne.n	d5ba6 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5c22:	0653      	lsls	r3, r2, #25
   d5c24:	bf4c      	ite	mi
   d5c26:	6a03      	ldrmi	r3, [r0, #32]
   d5c28:	6a23      	ldrpl	r3, [r4, #32]
   d5c2a:	6123      	str	r3, [r4, #16]
   d5c2c:	e005      	b.n	d5c3a <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5c2e:	d104      	bne.n	d5c3a <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5c30:	7823      	ldrb	r3, [r4, #0]
   d5c32:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5c36:	d111      	bne.n	d5c5c <_ZN7FatFile4readEPvj+0xcc>
   d5c38:	e7bb      	b.n	d5bb2 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5c3a:	6921      	ldr	r1, [r4, #16]
   d5c3c:	68a0      	ldr	r0, [r4, #8]
   d5c3e:	f000 fa22 	bl	d6086 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5c42:	eb08 0100 	add.w	r1, r8, r0
   d5c46:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5c48:	f1ba 0f00 	cmp.w	sl, #0
   d5c4c:	d135      	bne.n	d5cba <_ZN7FatFile4readEPvj+0x12a>
   d5c4e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5c52:	d332      	bcc.n	d5cba <_ZN7FatFile4readEPvj+0x12a>
   d5c54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5c56:	4299      	cmp	r1, r3
   d5c58:	d102      	bne.n	d5c60 <_ZN7FatFile4readEPvj+0xd0>
   d5c5a:	e02e      	b.n	d5cba <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5c5c:	1ba8      	subs	r0, r5, r6
   d5c5e:	e047      	b.n	d5cf0 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5c60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5c64:	d31b      	bcc.n	d5c9e <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5c66:	7822      	ldrb	r2, [r4, #0]
   d5c68:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5c6a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5c6e:	d406      	bmi.n	d5c7e <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5c70:	7902      	ldrb	r2, [r0, #4]
   d5c72:	ebc8 0202 	rsb	r2, r8, r2
   d5c76:	b2d2      	uxtb	r2, r2
   d5c78:	4592      	cmp	sl, r2
   d5c7a:	bf28      	it	cs
   d5c7c:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5c7e:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5c80:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5c84:	d207      	bcs.n	d5c96 <_ZN7FatFile4readEPvj+0x106>
   d5c86:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5c88:	4653      	mov	r3, sl
   d5c8a:	464a      	mov	r2, r9
   d5c8c:	6800      	ldr	r0, [r0, #0]
   d5c8e:	f000 fcf3 	bl	d6678 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5c92:	b960      	cbnz	r0, d5cae <_ZN7FatFile4readEPvj+0x11e>
   d5c94:	e78d      	b.n	d5bb2 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5c96:	4453      	add	r3, sl
   d5c98:	4299      	cmp	r1, r3
   d5c9a:	d321      	bcc.n	d5ce0 <_ZN7FatFile4readEPvj+0x150>
   d5c9c:	e7f3      	b.n	d5c86 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5c9e:	464a      	mov	r2, r9
   d5ca0:	6800      	ldr	r0, [r0, #0]
   d5ca2:	f000 fca1 	bl	d65e8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5ca6:	2800      	cmp	r0, #0
   d5ca8:	d083      	beq.n	d5bb2 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5caa:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5cae:	6963      	ldr	r3, [r4, #20]
   d5cb0:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5cb2:	44b9      	add	r9, r7
    m_curPosition += n;
   d5cb4:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5cb6:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5cb8:	e798      	b.n	d5bec <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5cba:	2200      	movs	r2, #0
   d5cbc:	3024      	adds	r0, #36	; 0x24
   d5cbe:	f000 f9be 	bl	d603e <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5cc2:	2800      	cmp	r0, #0
   d5cc4:	f43f af75 	beq.w	d5bb2 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5cc8:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5ccc:	42b7      	cmp	r7, r6
   d5cce:	bf28      	it	cs
   d5cd0:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5cd2:	eb00 010a 	add.w	r1, r0, sl
   d5cd6:	463a      	mov	r2, r7
   d5cd8:	4648      	mov	r0, r9
   d5cda:	f002 fcd9 	bl	d8690 <memcpy>
   d5cde:	e7e6      	b.n	d5cae <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5ce0:	3024      	adds	r0, #36	; 0x24
   d5ce2:	9101      	str	r1, [sp, #4]
   d5ce4:	f000 f984 	bl	d5ff0 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5ce8:	9901      	ldr	r1, [sp, #4]
   d5cea:	2800      	cmp	r0, #0
   d5cec:	d1cb      	bne.n	d5c86 <_ZN7FatFile4readEPvj+0xf6>
   d5cee:	e760      	b.n	d5bb2 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5cf0:	b003      	add	sp, #12
   d5cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5cf6 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5cf8:	2201      	movs	r2, #1
   d5cfa:	f10d 0107 	add.w	r1, sp, #7
   d5cfe:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5d00:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d5d02:	6905      	ldr	r5, [r0, #16]
   d5d04:	f7ff ff44 	bl	d5b90 <_ZN7FatFile4readEPvj>
   d5d08:	2801      	cmp	r0, #1
   d5d0a:	bf05      	ittet	eq
   d5d0c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5d10:	6166      	streq	r6, [r4, #20]
   d5d12:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d5d16:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5d18:	b002      	add	sp, #8
   d5d1a:	bd70      	pop	{r4, r5, r6, pc}

000d5d1c <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d20:	460e      	mov	r6, r1
   d5d22:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5d24:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5d26:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5d28:	2900      	cmp	r1, #0
   d5d2a:	d039      	beq.n	d5da0 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5d2c:	6945      	ldr	r5, [r0, #20]
   d5d2e:	42b5      	cmp	r5, r6
   d5d30:	d03a      	beq.n	d5da8 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5d32:	b90e      	cbnz	r6, d5d38 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5d34:	6106      	str	r6, [r0, #16]
    goto done;
   d5d36:	e031      	b.n	d5d9c <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5d38:	070b      	lsls	r3, r1, #28
   d5d3a:	d503      	bpl.n	d5d44 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5d3c:	69c3      	ldr	r3, [r0, #28]
   d5d3e:	429e      	cmp	r6, r3
   d5d40:	d82e      	bhi.n	d5da0 <_ZN7FatFile7seekSetEm+0x84>
   d5d42:	e007      	b.n	d5d54 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5d44:	0688      	lsls	r0, r1, #26
   d5d46:	d505      	bpl.n	d5d54 <_ZN7FatFile7seekSetEm+0x38>
   d5d48:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5d4a:	891b      	ldrh	r3, [r3, #8]
   d5d4c:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5d50:	d826      	bhi.n	d5da0 <_ZN7FatFile7seekSetEm+0x84>
   d5d52:	e023      	b.n	d5d9c <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5d54:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5d58:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5d5c:	1e6a      	subs	r2, r5, #1
   d5d5e:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5d62:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5d64:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5d66:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5d68:	429a      	cmp	r2, r3
   d5d6a:	d800      	bhi.n	d5d6e <_ZN7FatFile7seekSetEm+0x52>
   d5d6c:	b94d      	cbnz	r5, d5d82 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5d6e:	064a      	lsls	r2, r1, #25
   d5d70:	bf4c      	ite	mi
   d5d72:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5d76:	6a22      	ldrpl	r2, [r4, #32]
   d5d78:	6122      	str	r2, [r4, #16]
   d5d7a:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5d7c:	f104 0810 	add.w	r8, r4, #16
   d5d80:	e00a      	b.n	d5d98 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5d82:	1a9b      	subs	r3, r3, r2
   d5d84:	e7f9      	b.n	d5d7a <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5d86:	4642      	mov	r2, r8
   d5d88:	6921      	ldr	r1, [r4, #16]
   d5d8a:	68a0      	ldr	r0, [r4, #8]
   d5d8c:	f000 f981 	bl	d6092 <_ZN9FatVolume6fatGetEmPm>
   d5d90:	2800      	cmp	r0, #0
   d5d92:	f105 35ff 	add.w	r5, r5, #4294967295
   d5d96:	dd03      	ble.n	d5da0 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5d98:	2d00      	cmp	r5, #0
   d5d9a:	d1f4      	bne.n	d5d86 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5d9c:	6166      	str	r6, [r4, #20]
   d5d9e:	e003      	b.n	d5da8 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5da0:	6127      	str	r7, [r4, #16]
  return false;
   d5da2:	2000      	movs	r0, #0
   d5da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5da8:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5db0 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5db0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5db2:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5db4:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5db6:	b90b      	cbnz	r3, d5dbc <_ZN7FatFile4syncEv+0xc>
    return true;
   d5db8:	2001      	movs	r0, #1
   d5dba:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5dbc:	7883      	ldrb	r3, [r0, #2]
   d5dbe:	075a      	lsls	r2, r3, #29
   d5dc0:	d523      	bpl.n	d5e0a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5dc2:	2101      	movs	r1, #1
   d5dc4:	f7ff febd 	bl	d5b42 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5dc8:	4605      	mov	r5, r0
   d5dca:	b928      	cbnz	r0, d5dd8 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5dcc:	7863      	ldrb	r3, [r4, #1]
   d5dce:	f043 0301 	orr.w	r3, r3, #1
   d5dd2:	7063      	strb	r3, [r4, #1]
  return false;
   d5dd4:	2000      	movs	r0, #0
   d5dd6:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5dd8:	7803      	ldrb	r3, [r0, #0]
   d5dda:	2be5      	cmp	r3, #229	; 0xe5
   d5ddc:	d0f6      	beq.n	d5dcc <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5dde:	7823      	ldrb	r3, [r4, #0]
   d5de0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5de2:	bf44      	itt	mi
   d5de4:	69e3      	ldrmi	r3, [r4, #28]
   d5de6:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5de8:	8c23      	ldrh	r3, [r4, #32]
   d5dea:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5dec:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5dee:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5df0:	4b09      	ldr	r3, [pc, #36]	; (d5e18 <_ZN7FatFile4syncEv+0x68>)
   d5df2:	681b      	ldr	r3, [r3, #0]
   d5df4:	b12b      	cbz	r3, d5e02 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5df6:	f100 0116 	add.w	r1, r0, #22
   d5dfa:	3018      	adds	r0, #24
   d5dfc:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5dfe:	8b2b      	ldrh	r3, [r5, #24]
   d5e00:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5e02:	78a3      	ldrb	r3, [r4, #2]
   d5e04:	f023 0304 	bic.w	r3, r3, #4
   d5e08:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5e0a:	68a0      	ldr	r0, [r4, #8]
   d5e0c:	f7ff fe7a 	bl	d5b04 <_ZN9FatVolume9cacheSyncEv>
   d5e10:	2800      	cmp	r0, #0
   d5e12:	d0db      	beq.n	d5dcc <_ZN7FatFile4syncEv+0x1c>
   d5e14:	e7d0      	b.n	d5db8 <_ZN7FatFile4syncEv+0x8>
   d5e16:	bf00      	nop
   d5e18:	2003e3d0 	.word	0x2003e3d0

000d5e1c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5e1c:	b510      	push	{r4, lr}
   d5e1e:	4604      	mov	r4, r0
  bool rtn = sync();
   d5e20:	f7ff ffc6 	bl	d5db0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5e24:	2300      	movs	r3, #0
   d5e26:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5e28:	bd10      	pop	{r4, pc}
	...

000d5e2c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e30:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e32:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e34:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e36:	4604      	mov	r4, r0
   d5e38:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e3a:	d508      	bpl.n	d5e4e <_ZN7FatFile5writeEPKvj+0x22>
   d5e3c:	7883      	ldrb	r3, [r0, #2]
   d5e3e:	079a      	lsls	r2, r3, #30
   d5e40:	d505      	bpl.n	d5e4e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5e42:	071b      	lsls	r3, r3, #28
   d5e44:	d50b      	bpl.n	d5e5e <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5e46:	69e1      	ldr	r1, [r4, #28]
   d5e48:	f7ff ff68 	bl	d5d1c <_ZN7FatFile7seekSetEm>
   d5e4c:	b938      	cbnz	r0, d5e5e <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5e4e:	7863      	ldrb	r3, [r4, #1]
   d5e50:	f043 0301 	orr.w	r3, r3, #1
   d5e54:	7063      	strb	r3, [r4, #1]
  return -1;
   d5e56:	f04f 30ff 	mov.w	r0, #4294967295
   d5e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5e5e:	6963      	ldr	r3, [r4, #20]
   d5e60:	43db      	mvns	r3, r3
   d5e62:	4598      	cmp	r8, r3
   d5e64:	d8f3      	bhi.n	d5e4e <_ZN7FatFile5writeEPKvj+0x22>
   d5e66:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5e68:	f04f 0a00 	mov.w	sl, #0
   d5e6c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5e6e:	2e00      	cmp	r6, #0
   d5e70:	f000 8081 	beq.w	d5f76 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5e74:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5e76:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5e78:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5e7c:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5e80:	d11c      	bne.n	d5ebc <_ZN7FatFile5writeEPKvj+0x90>
   d5e82:	b9df      	cbnz	r7, d5ebc <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5e84:	6921      	ldr	r1, [r4, #16]
   d5e86:	b171      	cbz	r1, d5ea6 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5e88:	f104 0210 	add.w	r2, r4, #16
   d5e8c:	f000 f901 	bl	d6092 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5e90:	2800      	cmp	r0, #0
   d5e92:	dbdc      	blt.n	d5e4e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5e94:	f040 808e 	bne.w	d5fb4 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5e98:	4620      	mov	r0, r4
   d5e9a:	f7ff fe48 	bl	d5b2e <_ZN7FatFile10addClusterEv>
   d5e9e:	2800      	cmp	r0, #0
   d5ea0:	f040 8088 	bne.w	d5fb4 <_ZN7FatFile5writeEPKvj+0x188>
   d5ea4:	e7d3      	b.n	d5e4e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5ea6:	6a23      	ldr	r3, [r4, #32]
   d5ea8:	b93b      	cbnz	r3, d5eba <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5eaa:	4620      	mov	r0, r4
   d5eac:	f7ff fe3f 	bl	d5b2e <_ZN7FatFile10addClusterEv>
   d5eb0:	2800      	cmp	r0, #0
   d5eb2:	d0cc      	beq.n	d5e4e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5eb4:	6923      	ldr	r3, [r4, #16]
   d5eb6:	6223      	str	r3, [r4, #32]
   d5eb8:	e000      	b.n	d5ebc <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5eba:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5ebc:	6921      	ldr	r1, [r4, #16]
   d5ebe:	68a0      	ldr	r0, [r4, #8]
   d5ec0:	f000 f8e1 	bl	d6086 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5ec4:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5ec6:	b917      	cbnz	r7, d5ece <_ZN7FatFile5writeEPKvj+0xa2>
   d5ec8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5ecc:	d221      	bcs.n	d5f12 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5ece:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5ed2:	42b5      	cmp	r5, r6
   d5ed4:	bf28      	it	cs
   d5ed6:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5ed8:	b937      	cbnz	r7, d5ee8 <_ZN7FatFile5writeEPKvj+0xbc>
   d5eda:	6963      	ldr	r3, [r4, #20]
   d5edc:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5ede:	4293      	cmp	r3, r2
   d5ee0:	bf34      	ite	cc
   d5ee2:	2201      	movcc	r2, #1
   d5ee4:	2205      	movcs	r2, #5
   d5ee6:	e000      	b.n	d5eea <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5ee8:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5eea:	68a0      	ldr	r0, [r4, #8]
   d5eec:	3024      	adds	r0, #36	; 0x24
   d5eee:	f000 f8a6 	bl	d603e <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5ef2:	2800      	cmp	r0, #0
   d5ef4:	d0ab      	beq.n	d5e4e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5ef6:	4438      	add	r0, r7
   d5ef8:	462a      	mov	r2, r5
   d5efa:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5efc:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5efe:	f002 fbc7 	bl	d8690 <memcpy>
      if (512 == (n + blockOffset)) {
   d5f02:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5f06:	d130      	bne.n	d5f6a <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5f08:	68a0      	ldr	r0, [r4, #8]
   d5f0a:	3024      	adds	r0, #36	; 0x24
   d5f0c:	f000 f870 	bl	d5ff0 <_ZN8FatCache4syncEv>
   d5f10:	e017      	b.n	d5f42 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5f12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5f16:	68a0      	ldr	r0, [r4, #8]
   d5f18:	d315      	bcc.n	d5f46 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5f1a:	7902      	ldrb	r2, [r0, #4]
   d5f1c:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5f1e:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5f20:	b2d2      	uxtb	r2, r2
   d5f22:	4293      	cmp	r3, r2
   d5f24:	bf28      	it	cs
   d5f26:	4613      	movcs	r3, r2
   d5f28:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5f2a:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5f2c:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5f30:	d302      	bcc.n	d5f38 <_ZN7FatFile5writeEPKvj+0x10c>
   d5f32:	441a      	add	r2, r3
   d5f34:	4291      	cmp	r1, r2
   d5f36:	d337      	bcc.n	d5fa8 <_ZN7FatFile5writeEPKvj+0x17c>
   d5f38:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5f3a:	464a      	mov	r2, r9
   d5f3c:	6838      	ldr	r0, [r7, #0]
   d5f3e:	f000 fc4f 	bl	d67e0 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5f42:	b990      	cbnz	r0, d5f6a <_ZN7FatFile5writeEPKvj+0x13e>
   d5f44:	e783      	b.n	d5e4e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5f46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5f48:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5f4a:	bf02      	ittt	eq
   d5f4c:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5f50:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5f54:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5f56:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5f58:	464a      	mov	r2, r9
   d5f5a:	6818      	ldr	r0, [r3, #0]
   d5f5c:	f000 fbce 	bl	d66fc <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5f60:	2800      	cmp	r0, #0
   d5f62:	f43f af74 	beq.w	d5e4e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5f66:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5f6a:	6963      	ldr	r3, [r4, #20]
   d5f6c:	442b      	add	r3, r5
   d5f6e:	6163      	str	r3, [r4, #20]
    src += n;
   d5f70:	44a9      	add	r9, r5
    nToWrite -= n;
   d5f72:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5f74:	e77a      	b.n	d5e6c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5f76:	69e2      	ldr	r2, [r4, #28]
   d5f78:	4293      	cmp	r3, r2
   d5f7a:	d901      	bls.n	d5f80 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5f7c:	61e3      	str	r3, [r4, #28]
   d5f7e:	e002      	b.n	d5f86 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5f80:	4b0f      	ldr	r3, [pc, #60]	; (d5fc0 <_ZN7FatFile5writeEPKvj+0x194>)
   d5f82:	681b      	ldr	r3, [r3, #0]
   d5f84:	b11b      	cbz	r3, d5f8e <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5f86:	78a3      	ldrb	r3, [r4, #2]
   d5f88:	f043 0304 	orr.w	r3, r3, #4
   d5f8c:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5f8e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5f92:	2b00      	cmp	r3, #0
   d5f94:	db02      	blt.n	d5f9c <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5f96:	4640      	mov	r0, r8
   d5f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5f9c:	4620      	mov	r0, r4
   d5f9e:	f7ff ff07 	bl	d5db0 <_ZN7FatFile4syncEv>
   d5fa2:	2800      	cmp	r0, #0
   d5fa4:	d1f7      	bne.n	d5f96 <_ZN7FatFile5writeEPKvj+0x16a>
   d5fa6:	e752      	b.n	d5e4e <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5fa8:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5fac:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5fb0:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5fb2:	e7c1      	b.n	d5f38 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5fb4:	6921      	ldr	r1, [r4, #16]
   d5fb6:	68a0      	ldr	r0, [r4, #8]
   d5fb8:	f000 f865 	bl	d6086 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5fbc:	4601      	mov	r1, r0
   d5fbe:	e783      	b.n	d5ec8 <_ZN7FatFile5writeEPKvj+0x9c>
   d5fc0:	2003e3d0 	.word	0x2003e3d0

000d5fc4 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5fc4:	f000 bcac 	b.w	d6920 <HAL_Pin_Map>

000d5fc8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5fc8:	b570      	push	{r4, r5, r6, lr}
   d5fca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5fcc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5fce:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5fd0:	b149      	cbz	r1, d5fe6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5fd2:	f002 fba1 	bl	d8718 <strlen>
   d5fd6:	682b      	ldr	r3, [r5, #0]
   d5fd8:	4602      	mov	r2, r0
   d5fda:	4621      	mov	r1, r4
   d5fdc:	4628      	mov	r0, r5
   d5fde:	68db      	ldr	r3, [r3, #12]
    }
   d5fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5fe4:	4718      	bx	r3
    }
   d5fe6:	bd70      	pop	{r4, r5, r6, pc}

000d5fe8 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5fe8:	f000 bc9a 	b.w	d6920 <HAL_Pin_Map>

000d5fec <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5fec:	f000 bc98 	b.w	d6920 <HAL_Pin_Map>

000d5ff0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5ff0:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5ff2:	7803      	ldrb	r3, [r0, #0]
   d5ff4:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5ff6:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5ff8:	d51e      	bpl.n	d6038 <_ZN8FatCache4syncEv+0x48>
   d5ffa:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5ffc:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5ffe:	f100 060c 	add.w	r6, r0, #12
   d6002:	4632      	mov	r2, r6
   d6004:	6818      	ldr	r0, [r3, #0]
   d6006:	f000 fb79 	bl	d66fc <_ZN9SdSpiCard10writeBlockEmPKh>
   d600a:	4605      	mov	r5, r0
   d600c:	b908      	cbnz	r0, d6012 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d600e:	2500      	movs	r5, #0
   d6010:	e013      	b.n	d603a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d6012:	7823      	ldrb	r3, [r4, #0]
   d6014:	079b      	lsls	r3, r3, #30
   d6016:	d404      	bmi.n	d6022 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d6018:	7823      	ldrb	r3, [r4, #0]
   d601a:	f023 0301 	bic.w	r3, r3, #1
   d601e:	7023      	strb	r3, [r4, #0]
   d6020:	e00b      	b.n	d603a <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d6022:	6863      	ldr	r3, [r4, #4]
   d6024:	68a0      	ldr	r0, [r4, #8]
   d6026:	6919      	ldr	r1, [r3, #16]
   d6028:	4632      	mov	r2, r6
   d602a:	4401      	add	r1, r0
   d602c:	6818      	ldr	r0, [r3, #0]
   d602e:	f000 fb65 	bl	d66fc <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d6032:	2800      	cmp	r0, #0
   d6034:	d1f0      	bne.n	d6018 <_ZN8FatCache4syncEv+0x28>
   d6036:	e7ea      	b.n	d600e <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d6038:	2501      	movs	r5, #1

fail:
  return false;
}
   d603a:	4628      	mov	r0, r5
   d603c:	bd70      	pop	{r4, r5, r6, pc}

000d603e <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d603e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6040:	6883      	ldr	r3, [r0, #8]
   d6042:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6044:	4604      	mov	r4, r0
   d6046:	460e      	mov	r6, r1
   d6048:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d604a:	d014      	beq.n	d6076 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d604c:	f7ff ffd0 	bl	d5ff0 <_ZN8FatCache4syncEv>
   d6050:	b908      	cbnz	r0, d6056 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d6052:	2000      	movs	r0, #0
   d6054:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d6056:	076b      	lsls	r3, r5, #29
   d6058:	d503      	bpl.n	d6062 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d605a:	2300      	movs	r3, #0
   d605c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d605e:	60a6      	str	r6, [r4, #8]
   d6060:	e009      	b.n	d6076 <_ZN8FatCache4readEmh+0x38>
   d6062:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6064:	f104 020c 	add.w	r2, r4, #12
   d6068:	4631      	mov	r1, r6
   d606a:	6818      	ldr	r0, [r3, #0]
   d606c:	f000 fabc 	bl	d65e8 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d6070:	2800      	cmp	r0, #0
   d6072:	d1f2      	bne.n	d605a <_ZN8FatCache4readEmh+0x1c>
   d6074:	e7ed      	b.n	d6052 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d6076:	7823      	ldrb	r3, [r4, #0]
   d6078:	4620      	mov	r0, r4
   d607a:	f005 0503 	and.w	r5, r5, #3
   d607e:	431d      	orrs	r5, r3
   d6080:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d6084:	bd70      	pop	{r4, r5, r6, pc}

000d6086 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d6086:	7983      	ldrb	r3, [r0, #6]
   d6088:	6940      	ldr	r0, [r0, #20]
   d608a:	3902      	subs	r1, #2
   d608c:	4099      	lsls	r1, r3
}
   d608e:	4408      	add	r0, r1
   d6090:	4770      	bx	lr

000d6092 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6092:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d6094:	b570      	push	{r4, r5, r6, lr}
   d6096:	4605      	mov	r5, r0
   d6098:	460c      	mov	r4, r1
   d609a:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d609c:	d802      	bhi.n	d60a4 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d609e:	f04f 30ff 	mov.w	r0, #4294967295
   d60a2:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60a4:	69c3      	ldr	r3, [r0, #28]
   d60a6:	4299      	cmp	r1, r3
   d60a8:	d8f9      	bhi.n	d609e <_ZN9FatVolume6fatGetEmPm+0xc>
   d60aa:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d60ac:	2b20      	cmp	r3, #32
   d60ae:	d110      	bne.n	d60d2 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d60b0:	6981      	ldr	r1, [r0, #24]
   d60b2:	2202      	movs	r2, #2
   d60b4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d60b8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d60bc:	f7ff ffbf 	bl	d603e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d60c0:	2800      	cmp	r0, #0
   d60c2:	d0ec      	beq.n	d609e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d60c4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d60c8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d60cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d60d0:	e00f      	b.n	d60f2 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d60d2:	2b10      	cmp	r3, #16
   d60d4:	d1e3      	bne.n	d609e <_ZN9FatVolume6fatGetEmPm+0xc>
   d60d6:	6983      	ldr	r3, [r0, #24]
   d60d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d60dc:	2202      	movs	r2, #2
   d60de:	4419      	add	r1, r3
   d60e0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d60e4:	f7ff ffab 	bl	d603e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d60e8:	2800      	cmp	r0, #0
   d60ea:	d0d8      	beq.n	d609e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d60ec:	b2e4      	uxtb	r4, r4
   d60ee:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d60f2:	69ea      	ldr	r2, [r5, #28]
   d60f4:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d60f6:	bf9a      	itte	ls
   d60f8:	6033      	strls	r3, [r6, #0]
  return 1;
   d60fa:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d60fc:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d60fe:	bd70      	pop	{r4, r5, r6, pc}

000d6100 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6100:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d6102:	b538      	push	{r3, r4, r5, lr}
   d6104:	460c      	mov	r4, r1
   d6106:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6108:	d801      	bhi.n	d610e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d610a:	2000      	movs	r0, #0
   d610c:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d610e:	69c3      	ldr	r3, [r0, #28]
   d6110:	4299      	cmp	r1, r3
   d6112:	d8fa      	bhi.n	d610a <_ZN9FatVolume6fatPutEmm+0xa>
   d6114:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d6116:	2b20      	cmp	r3, #32
   d6118:	d10e      	bne.n	d6138 <_ZN9FatVolume6fatPutEmm+0x38>
   d611a:	6981      	ldr	r1, [r0, #24]
   d611c:	2203      	movs	r2, #3
   d611e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6122:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6126:	f7ff ff8a 	bl	d603e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d612a:	2800      	cmp	r0, #0
   d612c:	d0ed      	beq.n	d610a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d612e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6132:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d6136:	e00f      	b.n	d6158 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d6138:	2b10      	cmp	r3, #16
   d613a:	d1e6      	bne.n	d610a <_ZN9FatVolume6fatPutEmm+0xa>
   d613c:	6983      	ldr	r3, [r0, #24]
   d613e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6142:	2203      	movs	r2, #3
   d6144:	4419      	add	r1, r3
   d6146:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d614a:	f7ff ff78 	bl	d603e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d614e:	2800      	cmp	r0, #0
   d6150:	d0db      	beq.n	d610a <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d6152:	b2e4      	uxtb	r4, r4
   d6154:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d6158:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d615a:	bd38      	pop	{r3, r4, r5, pc}

000d615c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d615c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6160:	68c4      	ldr	r4, [r0, #12]
   d6162:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6164:	4605      	mov	r5, r0
   d6166:	460e      	mov	r6, r1
   d6168:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d616a:	d207      	bcs.n	d617c <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d616c:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d616e:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d6170:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d6172:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d6174:	429c      	cmp	r4, r3
   d6176:	d903      	bls.n	d6180 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d6178:	b9cf      	cbnz	r7, d61ae <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d617a:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d617c:	2701      	movs	r7, #1
   d617e:	e7f7      	b.n	d6170 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d6180:	42a6      	cmp	r6, r4
   d6182:	d014      	beq.n	d61ae <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d6184:	aa01      	add	r2, sp, #4
   d6186:	4621      	mov	r1, r4
   d6188:	4628      	mov	r0, r5
   d618a:	f7ff ff82 	bl	d6092 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d618e:	2800      	cmp	r0, #0
   d6190:	db0d      	blt.n	d61ae <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d6192:	d0ed      	beq.n	d6170 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d6194:	9b01      	ldr	r3, [sp, #4]
   d6196:	2b00      	cmp	r3, #0
   d6198:	d1ea      	bne.n	d6170 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d619a:	b107      	cbz	r7, d619e <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d619c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d619e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d61a2:	4621      	mov	r1, r4
   d61a4:	4628      	mov	r0, r5
   d61a6:	f7ff ffab 	bl	d6100 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d61aa:	4607      	mov	r7, r0
   d61ac:	b908      	cbnz	r0, d61b2 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d61ae:	2700      	movs	r7, #0
   d61b0:	e00b      	b.n	d61ca <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d61b2:	b916      	cbnz	r6, d61ba <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d61b4:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d61b8:	e007      	b.n	d61ca <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d61ba:	4622      	mov	r2, r4
   d61bc:	4631      	mov	r1, r6
   d61be:	4628      	mov	r0, r5
   d61c0:	f7ff ff9e 	bl	d6100 <_ZN9FatVolume6fatPutEmm>
   d61c4:	2800      	cmp	r0, #0
   d61c6:	d1f5      	bne.n	d61b4 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d61c8:	e7f1      	b.n	d61ae <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d61ca:	4638      	mov	r0, r7
   d61cc:	b002      	add	sp, #8
   d61ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d61d2 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d61d2:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d61d4:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d61d6:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d61d8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d61da:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d61dc:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d61e0:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d61e2:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d61e4:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d61e6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d61ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d61ec:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d61f0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d61f4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d61f8:	b1a1      	cbz	r1, d6224 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d61fa:	2904      	cmp	r1, #4
   d61fc:	d85d      	bhi.n	d62ba <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d61fe:	4611      	mov	r1, r2
   d6200:	3024      	adds	r0, #36	; 0x24
   d6202:	f7ff ff1c 	bl	d603e <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6206:	2800      	cmp	r0, #0
   d6208:	d057      	beq.n	d62ba <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d620a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d620e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d6212:	065b      	lsls	r3, r3, #25
   d6214:	d151      	bne.n	d62ba <_ZN9FatVolume4initEh+0xe8>
   d6216:	351b      	adds	r5, #27
   d6218:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d621c:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d6220:	2d00      	cmp	r5, #0
   d6222:	d04a      	beq.n	d62ba <_ZN9FatVolume4initEh+0xe8>
   d6224:	2200      	movs	r2, #0
   d6226:	4629      	mov	r1, r5
   d6228:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d622c:	f7ff ff07 	bl	d603e <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d6230:	2800      	cmp	r0, #0
   d6232:	d042      	beq.n	d62ba <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d6234:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d6238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d623c:	d13d      	bne.n	d62ba <_ZN9FatVolume4initEh+0xe8>
   d623e:	7c03      	ldrb	r3, [r0, #16]
   d6240:	2b02      	cmp	r3, #2
   d6242:	d13a      	bne.n	d62ba <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d6244:	89c3      	ldrh	r3, [r0, #14]
   d6246:	2b00      	cmp	r3, #0
   d6248:	d037      	beq.n	d62ba <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d624a:	7b41      	ldrb	r1, [r0, #13]
   d624c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d624e:	1e4b      	subs	r3, r1, #1
   d6250:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d6252:	2300      	movs	r3, #0
   d6254:	71a3      	strb	r3, [r4, #6]
   d6256:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6258:	2301      	movs	r3, #1
   d625a:	428b      	cmp	r3, r1
   d625c:	d007      	beq.n	d626e <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d625e:	3e01      	subs	r6, #1
   d6260:	d02b      	beq.n	d62ba <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6262:	79a2      	ldrb	r2, [r4, #6]
   d6264:	005b      	lsls	r3, r3, #1
   d6266:	3201      	adds	r2, #1
   d6268:	b2db      	uxtb	r3, r3
   d626a:	71a2      	strb	r2, [r4, #6]
   d626c:	e7f5      	b.n	d625a <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d626e:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d6270:	b902      	cbnz	r2, d6274 <_ZN9FatVolume4initEh+0xa2>
   d6272:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d6274:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d6276:	89c6      	ldrh	r6, [r0, #14]
   d6278:	442e      	add	r6, r5
   d627a:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d627c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d6280:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d6282:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d6286:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d6288:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d628c:	0152      	lsls	r2, r2, #5
   d628e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d6292:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d6296:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d6298:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d629c:	b903      	cbnz	r3, d62a0 <_ZN9FatVolume4initEh+0xce>
   d629e:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d62a0:	1aad      	subs	r5, r5, r2
   d62a2:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d62a4:	79a5      	ldrb	r5, [r4, #6]
   d62a6:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d62aa:	1c6b      	adds	r3, r5, #1
   d62ac:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d62ae:	f640 73f4 	movw	r3, #4084	; 0xff4
   d62b2:	429d      	cmp	r5, r3
   d62b4:	d803      	bhi.n	d62be <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d62b6:	230c      	movs	r3, #12
   d62b8:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d62ba:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d62bc:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d62be:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d62c2:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d62c4:	bf85      	ittet	hi
   d62c6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d62c8:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d62ca:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d62cc:	2320      	movhi	r3, #32
   d62ce:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d62d0:	2001      	movs	r0, #1

fail:
  return false;
}
   d62d2:	bd70      	pop	{r4, r5, r6, pc}

000d62d4 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d62d4:	f000 bb24 	b.w	d6920 <HAL_Pin_Map>

000d62d8 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d62d8:	f000 bb22 	b.w	d6920 <HAL_Pin_Map>

000d62dc <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d62dc:	f000 bb20 	b.w	d6920 <HAL_Pin_Map>

000d62e0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d62e0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d62e2:	4c0e      	ldr	r4, [pc, #56]	; (d631c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d62e4:	460e      	mov	r6, r1
   d62e6:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d62e8:	f000 fbd2 	bl	d6a90 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d62ec:	6823      	ldr	r3, [r4, #0]
   d62ee:	1ac0      	subs	r0, r0, r3
   d62f0:	4b0b      	ldr	r3, [pc, #44]	; (d6320 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d62f2:	4298      	cmp	r0, r3
   d62f4:	d908      	bls.n	d6308 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d62f6:	f000 fbd3 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d62fa:	4b0a      	ldr	r3, [pc, #40]	; (d6324 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d62fc:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d62fe:	f000 fd9b 	bl	d6e38 <spark_process>
   d6302:	f000 fbc5 	bl	d6a90 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d6306:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6308:	f000 fbca 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d630c:	b280      	uxth	r0, r0
   d630e:	1b80      	subs	r0, r0, r6
}
   d6310:	42a8      	cmp	r0, r5
   d6312:	bfd4      	ite	le
   d6314:	2000      	movle	r0, #0
   d6316:	2001      	movgt	r0, #1
   d6318:	bd70      	pop	{r4, r5, r6, pc}
   d631a:	bf00      	nop
   d631c:	2003e3d4 	.word	0x2003e3d4
   d6320:	000186a0 	.word	0x000186a0
   d6324:	2003e730 	.word	0x2003e730

000d6328 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6328:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d632a:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d632c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d632e:	b94d      	cbnz	r5, d6344 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6330:	6840      	ldr	r0, [r0, #4]
   d6332:	f000 fa7d 	bl	d6830 <_ZN14SdSpiAltDriver8activateEv>
   d6336:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6338:	4629      	mov	r1, r5
   d633a:	7d18      	ldrb	r0, [r3, #20]
   d633c:	f001 ff89 	bl	d8252 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6340:	2301      	movs	r3, #1
   d6342:	7223      	strb	r3, [r4, #8]
   d6344:	bd38      	pop	{r3, r4, r5, pc}

000d6346 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d6346:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d6348:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d634a:	4604      	mov	r4, r0
  if (m_spiActive) {
   d634c:	b16b      	cbz	r3, d636a <_ZN9SdSpiCard7spiStopEv+0x24>
   d634e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d6350:	2101      	movs	r1, #1
   d6352:	7d18      	ldrb	r0, [r3, #20]
   d6354:	f001 ff7d 	bl	d8252 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6358:	21ff      	movs	r1, #255	; 0xff
   d635a:	6860      	ldr	r0, [r4, #4]
   d635c:	f000 fa9a 	bl	d6894 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d6360:	6860      	ldr	r0, [r4, #4]
   d6362:	f000 fa79 	bl	d6858 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d6366:	2300      	movs	r3, #0
   d6368:	7223      	strb	r3, [r4, #8]
   d636a:	bd10      	pop	{r4, pc}

000d636c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d636e:	4604      	mov	r4, r0
   d6370:	460d      	mov	r5, r1
   d6372:	4616      	mov	r6, r2
   d6374:	f000 fb94 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d6378:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d637a:	6860      	ldr	r0, [r4, #4]
   d637c:	f000 fa6f 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d6380:	28ff      	cmp	r0, #255	; 0xff
   d6382:	7260      	strb	r0, [r4, #9]
   d6384:	d109      	bne.n	d639a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d6386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d638a:	4639      	mov	r1, r7
   d638c:	4620      	mov	r0, r4
   d638e:	f7ff ffa7 	bl	d62e0 <_ZN9SdSpiCard10isTimedOutEtt>
   d6392:	2800      	cmp	r0, #0
   d6394:	d0f1      	beq.n	d637a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6396:	2355      	movs	r3, #85	; 0x55
   d6398:	e00b      	b.n	d63b2 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d639a:	28fe      	cmp	r0, #254	; 0xfe
   d639c:	d001      	beq.n	d63a2 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d639e:	2350      	movs	r3, #80	; 0x50
   d63a0:	e007      	b.n	d63b2 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d63a2:	4632      	mov	r2, r6
   d63a4:	4629      	mov	r1, r5
   d63a6:	6860      	ldr	r0, [r4, #4]
   d63a8:	f000 fa5e 	bl	d6868 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d63ac:	7260      	strb	r0, [r4, #9]
   d63ae:	b130      	cbz	r0, d63be <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63b0:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d63b2:	4620      	mov	r0, r4
   d63b4:	7023      	strb	r3, [r4, #0]
   d63b6:	f7ff ffc6 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d63ba:	2000      	movs	r0, #0
}
   d63bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d63be:	6860      	ldr	r0, [r4, #4]
   d63c0:	f000 fa4d 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
   d63c4:	6860      	ldr	r0, [r4, #4]
   d63c6:	f000 fa4a 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
   d63ca:	2001      	movs	r0, #1
   d63cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63ce <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d63ce:	b570      	push	{r4, r5, r6, lr}
   d63d0:	4604      	mov	r4, r0
   d63d2:	460e      	mov	r6, r1
   d63d4:	f000 fb64 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
   d63d8:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d63da:	4632      	mov	r2, r6
   d63dc:	4629      	mov	r1, r5
   d63de:	4620      	mov	r0, r4
   d63e0:	f7ff ff7e 	bl	d62e0 <_ZN9SdSpiCard10isTimedOutEtt>
   d63e4:	b930      	cbnz	r0, d63f4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d63e6:	6860      	ldr	r0, [r4, #4]
   d63e8:	f000 fa39 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d63ec:	28ff      	cmp	r0, #255	; 0xff
   d63ee:	d1f4      	bne.n	d63da <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d63f0:	2001      	movs	r0, #1
   d63f2:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d63f4:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d63f6:	bd70      	pop	{r4, r5, r6, pc}

000d63f8 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d63f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d63fa:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d63fc:	9201      	str	r2, [sp, #4]
   d63fe:	4604      	mov	r4, r0
   d6400:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d6402:	b90b      	cbnz	r3, d6408 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6404:	f7ff ff90 	bl	d6328 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6408:	b125      	cbz	r5, d6414 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d640a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d640e:	4620      	mov	r0, r4
   d6410:	f7ff ffdd 	bl	d63ce <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6414:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6418:	6860      	ldr	r0, [r4, #4]
   d641a:	f000 fa3b 	bl	d6894 <_ZN14SdSpiAltDriver4sendEh>
   d641e:	f10d 0607 	add.w	r6, sp, #7
   d6422:	f10d 0703 	add.w	r7, sp, #3
   d6426:	f816 1901 	ldrb.w	r1, [r6], #-1
   d642a:	6860      	ldr	r0, [r4, #4]
   d642c:	f000 fa32 	bl	d6894 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d6430:	42be      	cmp	r6, r7
   d6432:	d1f8      	bne.n	d6426 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d6434:	2d00      	cmp	r5, #0
   d6436:	bf0c      	ite	eq
   d6438:	2195      	moveq	r1, #149	; 0x95
   d643a:	2187      	movne	r1, #135	; 0x87
   d643c:	6860      	ldr	r0, [r4, #4]
   d643e:	f000 fa29 	bl	d6894 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6442:	6860      	ldr	r0, [r4, #4]
   d6444:	f000 fa0b 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
   d6448:	250b      	movs	r5, #11
   d644a:	6860      	ldr	r0, [r4, #4]
   d644c:	f000 fa07 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d6450:	0603      	lsls	r3, r0, #24
   d6452:	7260      	strb	r0, [r4, #9]
   d6454:	d503      	bpl.n	d645e <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d6456:	3d01      	subs	r5, #1
   d6458:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d645c:	d1f5      	bne.n	d644a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d645e:	b003      	add	sp, #12
   d6460:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6462 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d6462:	b570      	push	{r4, r5, r6, lr}
   d6464:	4604      	mov	r4, r0
   d6466:	460d      	mov	r5, r1
   d6468:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d646a:	2137      	movs	r1, #55	; 0x37
   d646c:	2200      	movs	r2, #0
   d646e:	f7ff ffc3 	bl	d63f8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d6472:	4632      	mov	r2, r6
   d6474:	4629      	mov	r1, r5
   d6476:	4620      	mov	r0, r4
  }
   d6478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d647c:	f7ff bfbc 	b.w	d63f8 <_ZN9SdSpiCard11cardCommandEhm>

000d6480 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d6484:	2500      	movs	r5, #0
   d6486:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d6488:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d648a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d648c:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d648e:	4604      	mov	r4, r0
   d6490:	4690      	mov	r8, r2
   d6492:	461e      	mov	r6, r3
   d6494:	f000 fb04 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d6498:	4641      	mov	r1, r8
   d649a:	4607      	mov	r7, r0
   d649c:	6860      	ldr	r0, [r4, #4]
   d649e:	f000 f9cb 	bl	d6838 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d64a2:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d64a4:	4a4f      	ldr	r2, [pc, #316]	; (d65e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d64a6:	721d      	strb	r5, [r3, #8]
   d64a8:	f04f 0801 	mov.w	r8, #1
   d64ac:	60da      	str	r2, [r3, #12]
   d64ae:	745d      	strb	r5, [r3, #17]
   d64b0:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d64b4:	4620      	mov	r0, r4
   d64b6:	f7ff ff37 	bl	d6328 <_ZN9SdSpiCard8spiStartEv>
   d64ba:	6863      	ldr	r3, [r4, #4]
   d64bc:	4641      	mov	r1, r8
   d64be:	7d18      	ldrb	r0, [r3, #20]
   d64c0:	f001 fec7 	bl	d8252 <digitalWrite>
   d64c4:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d64c6:	21ff      	movs	r1, #255	; 0xff
   d64c8:	6860      	ldr	r0, [r4, #4]
   d64ca:	3d01      	subs	r5, #1
   d64cc:	f000 f9e2 	bl	d6894 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d64d0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d64d4:	d1f7      	bne.n	d64c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d64d6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d64d8:	4629      	mov	r1, r5
   d64da:	7d18      	ldrb	r0, [r3, #20]
   d64dc:	f001 feb9 	bl	d8252 <digitalWrite>
   d64e0:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d64e2:	2200      	movs	r2, #0
   d64e4:	4611      	mov	r1, r2
   d64e6:	4620      	mov	r0, r4
   d64e8:	f7ff ff86 	bl	d63f8 <_ZN9SdSpiCard11cardCommandEhm>
   d64ec:	2801      	cmp	r0, #1
   d64ee:	4680      	mov	r8, r0
   d64f0:	d012      	beq.n	d6518 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d64f2:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d64f4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d64f8:	d101      	bne.n	d64fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d64fa:	2320      	movs	r3, #32
   d64fc:	e057      	b.n	d65ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d64fe:	21fd      	movs	r1, #253	; 0xfd
   d6500:	6860      	ldr	r0, [r4, #4]
   d6502:	f000 f9c7 	bl	d6894 <_ZN14SdSpiAltDriver4sendEh>
   d6506:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d650a:	6860      	ldr	r0, [r4, #4]
   d650c:	f000 f9a7 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6510:	f1b8 0801 	subs.w	r8, r8, #1
   d6514:	d1f9      	bne.n	d650a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d6516:	e7e4      	b.n	d64e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6518:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d651c:	2108      	movs	r1, #8
   d651e:	4620      	mov	r0, r4
   d6520:	f7ff ff6a 	bl	d63f8 <_ZN9SdSpiCard11cardCommandEhm>
   d6524:	2805      	cmp	r0, #5
   d6526:	d102      	bne.n	d652e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6528:	f884 800a 	strb.w	r8, [r4, #10]
   d652c:	e00f      	b.n	d654e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d652e:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6530:	6860      	ldr	r0, [r4, #4]
   d6532:	f000 f994 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
   d6536:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6538:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d653c:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d653e:	d1f7      	bne.n	d6530 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d6540:	28aa      	cmp	r0, #170	; 0xaa
   d6542:	d102      	bne.n	d654a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6544:	2302      	movs	r3, #2
   d6546:	72a3      	strb	r3, [r4, #10]
   d6548:	e001      	b.n	d654e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d654a:	2325      	movs	r3, #37	; 0x25
   d654c:	e02f      	b.n	d65ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d654e:	7aa3      	ldrb	r3, [r4, #10]
   d6550:	2b02      	cmp	r3, #2
   d6552:	bf0c      	ite	eq
   d6554:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d6558:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d655a:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d655c:	462a      	mov	r2, r5
   d655e:	2129      	movs	r1, #41	; 0x29
   d6560:	4620      	mov	r0, r4
   d6562:	f7ff ff7e 	bl	d6462 <_ZN9SdSpiCard8cardAcmdEhm>
   d6566:	4602      	mov	r2, r0
   d6568:	b148      	cbz	r0, d657e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d656a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d656e:	4639      	mov	r1, r7
   d6570:	4620      	mov	r0, r4
   d6572:	f7ff feb5 	bl	d62e0 <_ZN9SdSpiCard10isTimedOutEtt>
   d6576:	2800      	cmp	r0, #0
   d6578:	d0f0      	beq.n	d655c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d657a:	2343      	movs	r3, #67	; 0x43
   d657c:	e017      	b.n	d65ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d657e:	7aa3      	ldrb	r3, [r4, #10]
   d6580:	2b02      	cmp	r3, #2
   d6582:	d00e      	beq.n	d65a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d6584:	4620      	mov	r0, r4
   d6586:	f7ff fede 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d658a:	6863      	ldr	r3, [r4, #4]
   d658c:	68b0      	ldr	r0, [r6, #8]
   d658e:	7934      	ldrb	r4, [r6, #4]
   d6590:	7b31      	ldrb	r1, [r6, #12]
   d6592:	7b72      	ldrb	r2, [r6, #13]
   d6594:	745a      	strb	r2, [r3, #17]
   d6596:	60d8      	str	r0, [r3, #12]
   d6598:	721c      	strb	r4, [r3, #8]
   d659a:	7419      	strb	r1, [r3, #16]
  return true;
   d659c:	2001      	movs	r0, #1
   d659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d65a2:	213a      	movs	r1, #58	; 0x3a
   d65a4:	4620      	mov	r0, r4
   d65a6:	f7ff ff27 	bl	d63f8 <_ZN9SdSpiCard11cardCommandEhm>
   d65aa:	b138      	cbz	r0, d65bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d65ac:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d65ae:	4620      	mov	r0, r4
   d65b0:	7023      	strb	r3, [r4, #0]
   d65b2:	f7ff fec8 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65b6:	2000      	movs	r0, #0
}
   d65b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d65bc:	6860      	ldr	r0, [r4, #4]
   d65be:	f000 f94e 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d65c2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d65c6:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d65c8:	bf04      	itt	eq
   d65ca:	2303      	moveq	r3, #3
   d65cc:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d65ce:	6860      	ldr	r0, [r4, #4]
   d65d0:	f000 f945 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
   d65d4:	6860      	ldr	r0, [r4, #4]
   d65d6:	f000 f942 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
   d65da:	6860      	ldr	r0, [r4, #4]
   d65dc:	f000 f93f 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
   d65e0:	e7d0      	b.n	d6584 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d65e2:	bf00      	nop
   d65e4:	0003d090 	.word	0x0003d090

000d65e8 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d65e8:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d65ea:	7a83      	ldrb	r3, [r0, #10]
   d65ec:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d65ee:	bf18      	it	ne
   d65f0:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d65f2:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d65f4:	460a      	mov	r2, r1
   d65f6:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d65f8:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d65fa:	f7ff fefd 	bl	d63f8 <_ZN9SdSpiCard11cardCommandEhm>
   d65fe:	b110      	cbz	r0, d6606 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6600:	2330      	movs	r3, #48	; 0x30
   d6602:	7023      	strb	r3, [r4, #0]
   d6604:	e00b      	b.n	d661e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d6606:	4629      	mov	r1, r5
   d6608:	f44f 7200 	mov.w	r2, #512	; 0x200
   d660c:	4620      	mov	r0, r4
   d660e:	f7ff fead 	bl	d636c <_ZN9SdSpiCard8readDataEPhj>
   d6612:	4605      	mov	r5, r0
   d6614:	b118      	cbz	r0, d661e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d6616:	4620      	mov	r0, r4
   d6618:	f7ff fe95 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d661c:	e003      	b.n	d6626 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d661e:	4620      	mov	r0, r4
   d6620:	f7ff fe91 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6624:	2500      	movs	r5, #0
}
   d6626:	4628      	mov	r0, r5
   d6628:	bd38      	pop	{r3, r4, r5, pc}

000d662a <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d662a:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d662c:	7a83      	ldrb	r3, [r0, #10]
   d662e:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6630:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6632:	bf18      	it	ne
   d6634:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6636:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6638:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d663a:	f7ff fedd 	bl	d63f8 <_ZN9SdSpiCard11cardCommandEhm>
   d663e:	b130      	cbz	r0, d664e <_ZN9SdSpiCard9readStartEm+0x24>
   d6640:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d6642:	4620      	mov	r0, r4
   d6644:	7023      	strb	r3, [r4, #0]
   d6646:	f7ff fe7e 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d664a:	2000      	movs	r0, #0
   d664c:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d664e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6650:	bd10      	pop	{r4, pc}

000d6652 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6652:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6654:	2200      	movs	r2, #0
   d6656:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6658:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d665a:	f7ff fecd 	bl	d63f8 <_ZN9SdSpiCard11cardCommandEhm>
   d665e:	b130      	cbz	r0, d666e <_ZN9SdSpiCard8readStopEv+0x1c>
   d6660:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d6662:	4620      	mov	r0, r4
   d6664:	7023      	strb	r3, [r4, #0]
   d6666:	f7ff fe6e 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d666a:	2000      	movs	r0, #0
   d666c:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d666e:	4620      	mov	r0, r4
   d6670:	f7ff fe69 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6674:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6676:	bd10      	pop	{r4, pc}

000d6678 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d667a:	4605      	mov	r5, r0
   d667c:	4616      	mov	r6, r2
   d667e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6680:	f7ff ffd3 	bl	d662a <_ZN9SdSpiCard9readStartEm>
   d6684:	b198      	cbz	r0, d66ae <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d6686:	2400      	movs	r4, #0
   d6688:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d668a:	429f      	cmp	r7, r3
   d668c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d6690:	d908      	bls.n	d66a4 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d6692:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6696:	4628      	mov	r0, r5
   d6698:	f7ff fe68 	bl	d636c <_ZN9SdSpiCard8readDataEPhj>
   d669c:	3401      	adds	r4, #1
   d669e:	2800      	cmp	r0, #0
   d66a0:	d1f2      	bne.n	d6688 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d66a2:	e004      	b.n	d66ae <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d66a4:	4628      	mov	r0, r5
}
   d66a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d66aa:	f7ff bfd2 	b.w	d6652 <_ZN9SdSpiCard8readStopEv>
}
   d66ae:	2000      	movs	r0, #0
   d66b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66b2 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d66b2:	b538      	push	{r3, r4, r5, lr}
   d66b4:	4604      	mov	r4, r0
   d66b6:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d66b8:	6840      	ldr	r0, [r0, #4]
   d66ba:	f000 f8eb 	bl	d6894 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d66be:	f44f 7200 	mov.w	r2, #512	; 0x200
   d66c2:	4629      	mov	r1, r5
   d66c4:	6860      	ldr	r0, [r4, #4]
   d66c6:	f000 f8e9 	bl	d689c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d66ca:	21ff      	movs	r1, #255	; 0xff
   d66cc:	6860      	ldr	r0, [r4, #4]
   d66ce:	f000 f8e1 	bl	d6894 <_ZN14SdSpiAltDriver4sendEh>
   d66d2:	21ff      	movs	r1, #255	; 0xff
   d66d4:	6860      	ldr	r0, [r4, #4]
   d66d6:	f000 f8dd 	bl	d6894 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d66da:	6860      	ldr	r0, [r4, #4]
   d66dc:	f000 f8bf 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d66e0:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d66e2:	f000 001f 	and.w	r0, r0, #31
   d66e6:	2805      	cmp	r0, #5
   d66e8:	d006      	beq.n	d66f8 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d66ea:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d66ec:	4620      	mov	r0, r4
   d66ee:	7023      	strb	r3, [r4, #0]
   d66f0:	f7ff fe29 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d66f4:	2000      	movs	r0, #0
   d66f6:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d66f8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d66fa:	bd38      	pop	{r3, r4, r5, pc}

000d66fc <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d66fc:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d66fe:	7a83      	ldrb	r3, [r0, #10]
   d6700:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6702:	bf18      	it	ne
   d6704:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6706:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6708:	460a      	mov	r2, r1
   d670a:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d670c:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d670e:	f7ff fe73 	bl	d63f8 <_ZN9SdSpiCard11cardCommandEhm>
   d6712:	4606      	mov	r6, r0
   d6714:	b108      	cbz	r0, d671a <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d6716:	2332      	movs	r3, #50	; 0x32
   d6718:	e01d      	b.n	d6756 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d671a:	462a      	mov	r2, r5
   d671c:	21fe      	movs	r1, #254	; 0xfe
   d671e:	4620      	mov	r0, r4
   d6720:	f7ff ffc7 	bl	d66b2 <_ZN9SdSpiCard9writeDataEhPKh>
   d6724:	b1c0      	cbz	r0, d6758 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6726:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d672a:	4620      	mov	r0, r4
   d672c:	f7ff fe4f 	bl	d63ce <_ZN9SdSpiCard11waitNotBusyEt>
   d6730:	4605      	mov	r5, r0
   d6732:	b908      	cbnz	r0, d6738 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d6734:	235a      	movs	r3, #90	; 0x5a
   d6736:	e00e      	b.n	d6756 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6738:	4632      	mov	r2, r6
   d673a:	210d      	movs	r1, #13
   d673c:	4620      	mov	r0, r4
   d673e:	f7ff fe5b 	bl	d63f8 <_ZN9SdSpiCard11cardCommandEhm>
   d6742:	b938      	cbnz	r0, d6754 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6744:	6860      	ldr	r0, [r4, #4]
   d6746:	f000 f88a 	bl	d685e <_ZN14SdSpiAltDriver7receiveEv>
   d674a:	b918      	cbnz	r0, d6754 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d674c:	4620      	mov	r0, r4
   d674e:	f7ff fdfa 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6752:	e005      	b.n	d6760 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6754:	2329      	movs	r3, #41	; 0x29
   d6756:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d6758:	4620      	mov	r0, r4
   d675a:	f7ff fdf4 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d675e:	2500      	movs	r5, #0
}
   d6760:	4628      	mov	r0, r5
   d6762:	bd70      	pop	{r4, r5, r6, pc}

000d6764 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6764:	b538      	push	{r3, r4, r5, lr}
   d6766:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6768:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d676c:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d676e:	f7ff fe2e 	bl	d63ce <_ZN9SdSpiCard11waitNotBusyEt>
   d6772:	b910      	cbnz	r0, d677a <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d6774:	235b      	movs	r3, #91	; 0x5b
   d6776:	7023      	strb	r3, [r4, #0]
   d6778:	e005      	b.n	d6786 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d677a:	462a      	mov	r2, r5
   d677c:	21fc      	movs	r1, #252	; 0xfc
   d677e:	4620      	mov	r0, r4
   d6780:	f7ff ff97 	bl	d66b2 <_ZN9SdSpiCard9writeDataEhPKh>
   d6784:	b918      	cbnz	r0, d678e <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6786:	4620      	mov	r0, r4
   d6788:	f7ff fddd 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d678c:	2000      	movs	r0, #0
}
   d678e:	bd38      	pop	{r3, r4, r5, pc}

000d6790 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6790:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6792:	7a83      	ldrb	r3, [r0, #10]
   d6794:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6796:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6798:	bf18      	it	ne
   d679a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d679c:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d679e:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d67a0:	f7ff fe2a 	bl	d63f8 <_ZN9SdSpiCard11cardCommandEhm>
   d67a4:	b130      	cbz	r0, d67b4 <_ZN9SdSpiCard10writeStartEm+0x24>
   d67a6:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d67a8:	4620      	mov	r0, r4
   d67aa:	7023      	strb	r3, [r4, #0]
   d67ac:	f7ff fdcb 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d67b0:	2000      	movs	r0, #0
   d67b2:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d67b4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d67b6:	bd10      	pop	{r4, pc}

000d67b8 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d67b8:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d67be:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67c0:	f7ff fe05 	bl	d63ce <_ZN9SdSpiCard11waitNotBusyEt>
   d67c4:	4605      	mov	r5, r0
   d67c6:	b120      	cbz	r0, d67d2 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d67c8:	21fd      	movs	r1, #253	; 0xfd
   d67ca:	6860      	ldr	r0, [r4, #4]
   d67cc:	f000 f862 	bl	d6894 <_ZN14SdSpiAltDriver4sendEh>
   d67d0:	e001      	b.n	d67d6 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d67d2:	2356      	movs	r3, #86	; 0x56
   d67d4:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d67d6:	4620      	mov	r0, r4
   d67d8:	f7ff fdb5 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d67dc:	4628      	mov	r0, r5
   d67de:	bd38      	pop	{r3, r4, r5, pc}

000d67e0 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d67e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67e2:	4605      	mov	r5, r0
   d67e4:	4616      	mov	r6, r2
   d67e6:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d67e8:	f7ff ffd2 	bl	d6790 <_ZN9SdSpiCard10writeStartEm>
   d67ec:	b170      	cbz	r0, d680c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d67ee:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d67f0:	42bc      	cmp	r4, r7
   d67f2:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d67f6:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d67f8:	d004      	beq.n	d6804 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d67fa:	f7ff ffb3 	bl	d6764 <_ZN9SdSpiCard9writeDataEPKh>
   d67fe:	b128      	cbz	r0, d680c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6800:	3401      	adds	r4, #1
   d6802:	e7f5      	b.n	d67f0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6804:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6808:	f7ff bfd6 	b.w	d67b8 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d680c:	4628      	mov	r0, r5
   d680e:	f7ff fd9a 	bl	d6346 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6812:	2000      	movs	r0, #0
   d6814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6816 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6816:	f000 b883 	b.w	d6920 <HAL_Pin_Map>

000d681a <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d681a:	f000 b881 	b.w	d6920 <HAL_Pin_Map>

000d681e <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d681e:	f000 b87f 	b.w	d6920 <HAL_Pin_Map>
	...

000d6824 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6824:	4b01      	ldr	r3, [pc, #4]	; (d682c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d6826:	2201      	movs	r2, #1
   d6828:	701a      	strb	r2, [r3, #0]
   d682a:	4770      	bx	lr
   d682c:	2003e3d8 	.word	0x2003e3d8

000d6830 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6830:	1d01      	adds	r1, r0, #4
   d6832:	6800      	ldr	r0, [r0, #0]
   d6834:	f000 bbca 	b.w	d6fcc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6838 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d6838:	b510      	push	{r4, lr}
   d683a:	4604      	mov	r4, r0
  m_csPin = csPin;
   d683c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d683e:	6800      	ldr	r0, [r0, #0]
   d6840:	f000 fb78 	bl	d6f34 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d6844:	7d20      	ldrb	r0, [r4, #20]
   d6846:	2101      	movs	r1, #1
   d6848:	f001 fcf2 	bl	d8230 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d684c:	7d20      	ldrb	r0, [r4, #20]
   d684e:	2101      	movs	r1, #1
}
   d6850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d6854:	f001 bcfd 	b.w	d8252 <digitalWrite>

000d6858 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6858:	6800      	ldr	r0, [r0, #0]
   d685a:	f000 bb9e 	b.w	d6f9a <_ZN8SPIClass14endTransactionEv>

000d685e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d685e:	21ff      	movs	r1, #255	; 0xff
   d6860:	6800      	ldr	r0, [r0, #0]
   d6862:	f000 bc79 	b.w	d7158 <_ZN8SPIClass8transferEh>
	...

000d6868 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d6868:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d686a:	4b08      	ldr	r3, [pc, #32]	; (d688c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d686c:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d686e:	2500      	movs	r5, #0
   d6870:	4c07      	ldr	r4, [pc, #28]	; (d6890 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6872:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6874:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6876:	4613      	mov	r3, r2
   d6878:	460a      	mov	r2, r1
   d687a:	4629      	mov	r1, r5
   d687c:	f000 fc72 	bl	d7164 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6880:	7823      	ldrb	r3, [r4, #0]
   d6882:	2b00      	cmp	r3, #0
   d6884:	d0fc      	beq.n	d6880 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d6886:	2000      	movs	r0, #0
   d6888:	b003      	add	sp, #12
   d688a:	bd30      	pop	{r4, r5, pc}
   d688c:	000d6825 	.word	0x000d6825
   d6890:	2003e3d8 	.word	0x2003e3d8

000d6894 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6894:	6800      	ldr	r0, [r0, #0]
   d6896:	f000 bc5f 	b.w	d7158 <_ZN8SPIClass8transferEh>
	...

000d689c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d689c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d689e:	4b07      	ldr	r3, [pc, #28]	; (d68bc <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d68a0:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d68a2:	2500      	movs	r5, #0
   d68a4:	4c06      	ldr	r4, [pc, #24]	; (d68c0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d68a6:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d68a8:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d68aa:	4613      	mov	r3, r2
   d68ac:	462a      	mov	r2, r5
   d68ae:	f000 fc59 	bl	d7164 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d68b2:	7823      	ldrb	r3, [r4, #0]
   d68b4:	2b00      	cmp	r3, #0
   d68b6:	d0fc      	beq.n	d68b2 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d68b8:	b003      	add	sp, #12
   d68ba:	bd30      	pop	{r4, r5, pc}
   d68bc:	000d6825 	.word	0x000d6825
   d68c0:	2003e3d8 	.word	0x2003e3d8

000d68c4 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d68c4:	f000 b82c 	b.w	d6920 <HAL_Pin_Map>

000d68c8 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d68c8:	2200      	movs	r2, #0
   d68ca:	6001      	str	r1, [r0, #0]
   d68cc:	6102      	str	r2, [r0, #16]
   d68ce:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d68d0:	4770      	bx	lr

000d68d2 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d68d2:	b510      	push	{r4, lr}
   d68d4:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d68d6:	8800      	ldrh	r0, [r0, #0]
   d68d8:	f001 fce7 	bl	d82aa <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d68dc:	f240 3312 	movw	r3, #786	; 0x312
   d68e0:	f1a0 020b 	sub.w	r2, r0, #11
   d68e4:	429a      	cmp	r2, r3
   d68e6:	d807      	bhi.n	d68f8 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d68e8:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d68ea:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d68ec:	60e0      	str	r0, [r4, #12]
   d68ee:	f000 f8d7 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d68f2:	61a0      	str	r0, [r4, #24]

        return true;
   d68f4:	2001      	movs	r0, #1
   d68f6:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d68f8:	2000      	movs	r0, #0
    }
}
   d68fa:	bd10      	pop	{r4, pc}

000d68fc <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d68fc:	f000 b810 	b.w	d6920 <HAL_Pin_Map>

000d6900 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6900:	b508      	push	{r3, lr}
   d6902:	4b02      	ldr	r3, [pc, #8]	; (d690c <netdb_freeaddrinfo+0xc>)
   d6904:	681b      	ldr	r3, [r3, #0]
   d6906:	689b      	ldr	r3, [r3, #8]
   d6908:	9301      	str	r3, [sp, #4]
   d690a:	bd08      	pop	{r3, pc}
   d690c:	00030268 	.word	0x00030268

000d6910 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6910:	b508      	push	{r3, lr}
   d6912:	4b02      	ldr	r3, [pc, #8]	; (d691c <netdb_getaddrinfo+0xc>)
   d6914:	681b      	ldr	r3, [r3, #0]
   d6916:	68db      	ldr	r3, [r3, #12]
   d6918:	9301      	str	r3, [sp, #4]
   d691a:	bd08      	pop	{r3, pc}
   d691c:	00030268 	.word	0x00030268

000d6920 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6920:	b508      	push	{r3, lr}
   d6922:	4b02      	ldr	r3, [pc, #8]	; (d692c <HAL_Pin_Map+0xc>)
   d6924:	681b      	ldr	r3, [r3, #0]
   d6926:	681b      	ldr	r3, [r3, #0]
   d6928:	9301      	str	r3, [sp, #4]
   d692a:	bd08      	pop	{r3, pc}
   d692c:	0003022c 	.word	0x0003022c

000d6930 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6930:	b508      	push	{r3, lr}
   d6932:	4b02      	ldr	r3, [pc, #8]	; (d693c <HAL_Validate_Pin_Function+0xc>)
   d6934:	681b      	ldr	r3, [r3, #0]
   d6936:	685b      	ldr	r3, [r3, #4]
   d6938:	9301      	str	r3, [sp, #4]
   d693a:	bd08      	pop	{r3, pc}
   d693c:	0003022c 	.word	0x0003022c

000d6940 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6940:	b508      	push	{r3, lr}
   d6942:	4b02      	ldr	r3, [pc, #8]	; (d694c <HAL_Pin_Mode+0xc>)
   d6944:	681b      	ldr	r3, [r3, #0]
   d6946:	689b      	ldr	r3, [r3, #8]
   d6948:	9301      	str	r3, [sp, #4]
   d694a:	bd08      	pop	{r3, pc}
   d694c:	0003022c 	.word	0x0003022c

000d6950 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6950:	b508      	push	{r3, lr}
   d6952:	4b02      	ldr	r3, [pc, #8]	; (d695c <HAL_Get_Pin_Mode+0xc>)
   d6954:	681b      	ldr	r3, [r3, #0]
   d6956:	68db      	ldr	r3, [r3, #12]
   d6958:	9301      	str	r3, [sp, #4]
   d695a:	bd08      	pop	{r3, pc}
   d695c:	0003022c 	.word	0x0003022c

000d6960 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6960:	b508      	push	{r3, lr}
   d6962:	4b02      	ldr	r3, [pc, #8]	; (d696c <HAL_GPIO_Write+0xc>)
   d6964:	681b      	ldr	r3, [r3, #0]
   d6966:	691b      	ldr	r3, [r3, #16]
   d6968:	9301      	str	r3, [sp, #4]
   d696a:	bd08      	pop	{r3, pc}
   d696c:	0003022c 	.word	0x0003022c

000d6970 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6970:	b508      	push	{r3, lr}
   d6972:	4b02      	ldr	r3, [pc, #8]	; (d697c <HAL_GPIO_Read+0xc>)
   d6974:	681b      	ldr	r3, [r3, #0]
   d6976:	695b      	ldr	r3, [r3, #20]
   d6978:	9301      	str	r3, [sp, #4]
   d697a:	bd08      	pop	{r3, pc}
   d697c:	0003022c 	.word	0x0003022c

000d6980 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d6980:	b508      	push	{r3, lr}
   d6982:	4b02      	ldr	r3, [pc, #8]	; (d698c <HAL_ADC_Read+0xc>)
   d6984:	681b      	ldr	r3, [r3, #0]
   d6986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6988:	9301      	str	r3, [sp, #4]
   d698a:	bd08      	pop	{r3, pc}
   d698c:	0003022c 	.word	0x0003022c

000d6990 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6990:	b508      	push	{r3, lr}
   d6992:	4b02      	ldr	r3, [pc, #8]	; (d699c <HAL_SPI_Begin+0xc>)
   d6994:	681b      	ldr	r3, [r3, #0]
   d6996:	681b      	ldr	r3, [r3, #0]
   d6998:	9301      	str	r3, [sp, #4]
   d699a:	bd08      	pop	{r3, pc}
   d699c:	00030230 	.word	0x00030230

000d69a0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d69a0:	b508      	push	{r3, lr}
   d69a2:	4b02      	ldr	r3, [pc, #8]	; (d69ac <HAL_SPI_Set_Bit_Order+0xc>)
   d69a4:	681b      	ldr	r3, [r3, #0]
   d69a6:	689b      	ldr	r3, [r3, #8]
   d69a8:	9301      	str	r3, [sp, #4]
   d69aa:	bd08      	pop	{r3, pc}
   d69ac:	00030230 	.word	0x00030230

000d69b0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d69b0:	b508      	push	{r3, lr}
   d69b2:	4b02      	ldr	r3, [pc, #8]	; (d69bc <HAL_SPI_Set_Data_Mode+0xc>)
   d69b4:	681b      	ldr	r3, [r3, #0]
   d69b6:	68db      	ldr	r3, [r3, #12]
   d69b8:	9301      	str	r3, [sp, #4]
   d69ba:	bd08      	pop	{r3, pc}
   d69bc:	00030230 	.word	0x00030230

000d69c0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d69c0:	b508      	push	{r3, lr}
   d69c2:	4b02      	ldr	r3, [pc, #8]	; (d69cc <HAL_SPI_Set_Clock_Divider+0xc>)
   d69c4:	681b      	ldr	r3, [r3, #0]
   d69c6:	691b      	ldr	r3, [r3, #16]
   d69c8:	9301      	str	r3, [sp, #4]
   d69ca:	bd08      	pop	{r3, pc}
   d69cc:	00030230 	.word	0x00030230

000d69d0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d69d0:	b508      	push	{r3, lr}
   d69d2:	4b02      	ldr	r3, [pc, #8]	; (d69dc <HAL_SPI_Send_Receive_Data+0xc>)
   d69d4:	681b      	ldr	r3, [r3, #0]
   d69d6:	695b      	ldr	r3, [r3, #20]
   d69d8:	9301      	str	r3, [sp, #4]
   d69da:	bd08      	pop	{r3, pc}
   d69dc:	00030230 	.word	0x00030230

000d69e0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d69e0:	b508      	push	{r3, lr}
   d69e2:	4b02      	ldr	r3, [pc, #8]	; (d69ec <HAL_SPI_Init+0xc>)
   d69e4:	681b      	ldr	r3, [r3, #0]
   d69e6:	69db      	ldr	r3, [r3, #28]
   d69e8:	9301      	str	r3, [sp, #4]
   d69ea:	bd08      	pop	{r3, pc}
   d69ec:	00030230 	.word	0x00030230

000d69f0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d69f0:	b508      	push	{r3, lr}
   d69f2:	4b02      	ldr	r3, [pc, #8]	; (d69fc <HAL_SPI_Is_Enabled+0xc>)
   d69f4:	681b      	ldr	r3, [r3, #0]
   d69f6:	6a1b      	ldr	r3, [r3, #32]
   d69f8:	9301      	str	r3, [sp, #4]
   d69fa:	bd08      	pop	{r3, pc}
   d69fc:	00030230 	.word	0x00030230

000d6a00 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6a00:	b508      	push	{r3, lr}
   d6a02:	4b02      	ldr	r3, [pc, #8]	; (d6a0c <HAL_SPI_Info+0xc>)
   d6a04:	681b      	ldr	r3, [r3, #0]
   d6a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a08:	9301      	str	r3, [sp, #4]
   d6a0a:	bd08      	pop	{r3, pc}
   d6a0c:	00030230 	.word	0x00030230

000d6a10 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d6a10:	b508      	push	{r3, lr}
   d6a12:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <HAL_SPI_DMA_Transfer+0xc>)
   d6a14:	681b      	ldr	r3, [r3, #0]
   d6a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6a18:	9301      	str	r3, [sp, #4]
   d6a1a:	bd08      	pop	{r3, pc}
   d6a1c:	00030230 	.word	0x00030230

000d6a20 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d6a20:	b508      	push	{r3, lr}
   d6a22:	4b02      	ldr	r3, [pc, #8]	; (d6a2c <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6a24:	681b      	ldr	r3, [r3, #0]
   d6a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6a28:	9301      	str	r3, [sp, #4]
   d6a2a:	bd08      	pop	{r3, pc}
   d6a2c:	00030230 	.word	0x00030230

000d6a30 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6a30:	b508      	push	{r3, lr}
   d6a32:	4b02      	ldr	r3, [pc, #8]	; (d6a3c <HAL_SPI_Set_Settings+0xc>)
   d6a34:	681b      	ldr	r3, [r3, #0]
   d6a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6a38:	9301      	str	r3, [sp, #4]
   d6a3a:	bd08      	pop	{r3, pc}
   d6a3c:	00030230 	.word	0x00030230

000d6a40 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6a40:	b508      	push	{r3, lr}
   d6a42:	4b02      	ldr	r3, [pc, #8]	; (d6a4c <HAL_SPI_Acquire+0xc>)
   d6a44:	681b      	ldr	r3, [r3, #0]
   d6a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a48:	9301      	str	r3, [sp, #4]
   d6a4a:	bd08      	pop	{r3, pc}
   d6a4c:	00030230 	.word	0x00030230

000d6a50 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6a50:	b508      	push	{r3, lr}
   d6a52:	4b02      	ldr	r3, [pc, #8]	; (d6a5c <HAL_SPI_Release+0xc>)
   d6a54:	681b      	ldr	r3, [r3, #0]
   d6a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6a58:	9301      	str	r3, [sp, #4]
   d6a5a:	bd08      	pop	{r3, pc}
   d6a5c:	00030230 	.word	0x00030230

000d6a60 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6a60:	b508      	push	{r3, lr}
   d6a62:	4b02      	ldr	r3, [pc, #8]	; (d6a6c <if_index_to_name+0xc>)
   d6a64:	681b      	ldr	r3, [r3, #0]
   d6a66:	695b      	ldr	r3, [r3, #20]
   d6a68:	9301      	str	r3, [sp, #4]
   d6a6a:	bd08      	pop	{r3, pc}
   d6a6c:	0003026c 	.word	0x0003026c

000d6a70 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6a70:	b508      	push	{r3, lr}
   d6a72:	4b02      	ldr	r3, [pc, #8]	; (d6a7c <HAL_RNG_GetRandomNumber+0xc>)
   d6a74:	681b      	ldr	r3, [r3, #0]
   d6a76:	685b      	ldr	r3, [r3, #4]
   d6a78:	9301      	str	r3, [sp, #4]
   d6a7a:	bd08      	pop	{r3, pc}
   d6a7c:	00030218 	.word	0x00030218

000d6a80 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6a80:	b508      	push	{r3, lr}
   d6a82:	4b02      	ldr	r3, [pc, #8]	; (d6a8c <HAL_Delay_Microseconds+0xc>)
   d6a84:	681b      	ldr	r3, [r3, #0]
   d6a86:	68db      	ldr	r3, [r3, #12]
   d6a88:	9301      	str	r3, [sp, #4]
   d6a8a:	bd08      	pop	{r3, pc}
   d6a8c:	00030218 	.word	0x00030218

000d6a90 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6a90:	b508      	push	{r3, lr}
   d6a92:	4b02      	ldr	r3, [pc, #8]	; (d6a9c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6a94:	681b      	ldr	r3, [r3, #0]
   d6a96:	691b      	ldr	r3, [r3, #16]
   d6a98:	9301      	str	r3, [sp, #4]
   d6a9a:	bd08      	pop	{r3, pc}
   d6a9c:	00030218 	.word	0x00030218

000d6aa0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6aa0:	b508      	push	{r3, lr}
   d6aa2:	4b02      	ldr	r3, [pc, #8]	; (d6aac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6aa4:	681b      	ldr	r3, [r3, #0]
   d6aa6:	695b      	ldr	r3, [r3, #20]
   d6aa8:	9301      	str	r3, [sp, #4]
   d6aaa:	bd08      	pop	{r3, pc}
   d6aac:	00030218 	.word	0x00030218

000d6ab0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6ab0:	b508      	push	{r3, lr}
   d6ab2:	4b02      	ldr	r3, [pc, #8]	; (d6abc <os_thread_is_current+0xc>)
   d6ab4:	681b      	ldr	r3, [r3, #0]
   d6ab6:	689b      	ldr	r3, [r3, #8]
   d6ab8:	9301      	str	r3, [sp, #4]
   d6aba:	bd08      	pop	{r3, pc}
   d6abc:	00030248 	.word	0x00030248

000d6ac0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6ac0:	b508      	push	{r3, lr}
   d6ac2:	4b02      	ldr	r3, [pc, #8]	; (d6acc <os_thread_join+0xc>)
   d6ac4:	681b      	ldr	r3, [r3, #0]
   d6ac6:	691b      	ldr	r3, [r3, #16]
   d6ac8:	9301      	str	r3, [sp, #4]
   d6aca:	bd08      	pop	{r3, pc}
   d6acc:	00030248 	.word	0x00030248

000d6ad0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6ad0:	b508      	push	{r3, lr}
   d6ad2:	4b02      	ldr	r3, [pc, #8]	; (d6adc <os_thread_cleanup+0xc>)
   d6ad4:	681b      	ldr	r3, [r3, #0]
   d6ad6:	695b      	ldr	r3, [r3, #20]
   d6ad8:	9301      	str	r3, [sp, #4]
   d6ada:	bd08      	pop	{r3, pc}
   d6adc:	00030248 	.word	0x00030248

000d6ae0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6ae0:	b508      	push	{r3, lr}
   d6ae2:	4b02      	ldr	r3, [pc, #8]	; (d6aec <os_mutex_recursive_create+0xc>)
   d6ae4:	681b      	ldr	r3, [r3, #0]
   d6ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ae8:	9301      	str	r3, [sp, #4]
   d6aea:	bd08      	pop	{r3, pc}
   d6aec:	00030248 	.word	0x00030248

000d6af0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6af0:	b508      	push	{r3, lr}
   d6af2:	4b02      	ldr	r3, [pc, #8]	; (d6afc <os_mutex_recursive_destroy+0xc>)
   d6af4:	681b      	ldr	r3, [r3, #0]
   d6af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6af8:	9301      	str	r3, [sp, #4]
   d6afa:	bd08      	pop	{r3, pc}
   d6afc:	00030248 	.word	0x00030248

000d6b00 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6b00:	b508      	push	{r3, lr}
   d6b02:	4b02      	ldr	r3, [pc, #8]	; (d6b0c <inet_inet_ntop+0xc>)
   d6b04:	681b      	ldr	r3, [r3, #0]
   d6b06:	695b      	ldr	r3, [r3, #20]
   d6b08:	9301      	str	r3, [sp, #4]
   d6b0a:	bd08      	pop	{r3, pc}
   d6b0c:	00030264 	.word	0x00030264

000d6b10 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6b10:	b508      	push	{r3, lr}
   d6b12:	4b02      	ldr	r3, [pc, #8]	; (d6b1c <inet_htonl+0xc>)
   d6b14:	681b      	ldr	r3, [r3, #0]
   d6b16:	6a1b      	ldr	r3, [r3, #32]
   d6b18:	9301      	str	r3, [sp, #4]
   d6b1a:	bd08      	pop	{r3, pc}
   d6b1c:	00030264 	.word	0x00030264

000d6b20 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6b20:	b508      	push	{r3, lr}
   d6b22:	4b02      	ldr	r3, [pc, #8]	; (d6b2c <inet_htons+0xc>)
   d6b24:	681b      	ldr	r3, [r3, #0]
   d6b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b28:	9301      	str	r3, [sp, #4]
   d6b2a:	bd08      	pop	{r3, pc}
   d6b2c:	00030264 	.word	0x00030264

000d6b30 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6b30:	b508      	push	{r3, lr}
   d6b32:	4b02      	ldr	r3, [pc, #8]	; (d6b3c <HAL_USART_Init+0xc>)
   d6b34:	681b      	ldr	r3, [r3, #0]
   d6b36:	681b      	ldr	r3, [r3, #0]
   d6b38:	9301      	str	r3, [sp, #4]
   d6b3a:	bd08      	pop	{r3, pc}
   d6b3c:	0003023c 	.word	0x0003023c

000d6b40 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6b40:	b508      	push	{r3, lr}
   d6b42:	4b02      	ldr	r3, [pc, #8]	; (d6b4c <HAL_USART_Write_Data+0xc>)
   d6b44:	681b      	ldr	r3, [r3, #0]
   d6b46:	68db      	ldr	r3, [r3, #12]
   d6b48:	9301      	str	r3, [sp, #4]
   d6b4a:	bd08      	pop	{r3, pc}
   d6b4c:	0003023c 	.word	0x0003023c

000d6b50 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6b50:	b508      	push	{r3, lr}
   d6b52:	4b02      	ldr	r3, [pc, #8]	; (d6b5c <HAL_USART_Available_Data+0xc>)
   d6b54:	681b      	ldr	r3, [r3, #0]
   d6b56:	691b      	ldr	r3, [r3, #16]
   d6b58:	9301      	str	r3, [sp, #4]
   d6b5a:	bd08      	pop	{r3, pc}
   d6b5c:	0003023c 	.word	0x0003023c

000d6b60 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6b60:	b508      	push	{r3, lr}
   d6b62:	4b02      	ldr	r3, [pc, #8]	; (d6b6c <HAL_USART_Read_Data+0xc>)
   d6b64:	681b      	ldr	r3, [r3, #0]
   d6b66:	695b      	ldr	r3, [r3, #20]
   d6b68:	9301      	str	r3, [sp, #4]
   d6b6a:	bd08      	pop	{r3, pc}
   d6b6c:	0003023c 	.word	0x0003023c

000d6b70 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6b70:	b508      	push	{r3, lr}
   d6b72:	4b02      	ldr	r3, [pc, #8]	; (d6b7c <HAL_USART_Peek_Data+0xc>)
   d6b74:	681b      	ldr	r3, [r3, #0]
   d6b76:	699b      	ldr	r3, [r3, #24]
   d6b78:	9301      	str	r3, [sp, #4]
   d6b7a:	bd08      	pop	{r3, pc}
   d6b7c:	0003023c 	.word	0x0003023c

000d6b80 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6b80:	b508      	push	{r3, lr}
   d6b82:	4b02      	ldr	r3, [pc, #8]	; (d6b8c <HAL_USART_Flush_Data+0xc>)
   d6b84:	681b      	ldr	r3, [r3, #0]
   d6b86:	69db      	ldr	r3, [r3, #28]
   d6b88:	9301      	str	r3, [sp, #4]
   d6b8a:	bd08      	pop	{r3, pc}
   d6b8c:	0003023c 	.word	0x0003023c

000d6b90 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6b90:	b508      	push	{r3, lr}
   d6b92:	4b02      	ldr	r3, [pc, #8]	; (d6b9c <HAL_USART_Is_Enabled+0xc>)
   d6b94:	681b      	ldr	r3, [r3, #0]
   d6b96:	6a1b      	ldr	r3, [r3, #32]
   d6b98:	9301      	str	r3, [sp, #4]
   d6b9a:	bd08      	pop	{r3, pc}
   d6b9c:	0003023c 	.word	0x0003023c

000d6ba0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6ba0:	b508      	push	{r3, lr}
   d6ba2:	4b02      	ldr	r3, [pc, #8]	; (d6bac <HAL_USART_Available_Data_For_Write+0xc>)
   d6ba4:	681b      	ldr	r3, [r3, #0]
   d6ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ba8:	9301      	str	r3, [sp, #4]
   d6baa:	bd08      	pop	{r3, pc}
   d6bac:	0003023c 	.word	0x0003023c

000d6bb0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6bb0:	b508      	push	{r3, lr}
   d6bb2:	4b02      	ldr	r3, [pc, #8]	; (d6bbc <HAL_I2C_Begin+0xc>)
   d6bb4:	681b      	ldr	r3, [r3, #0]
   d6bb6:	68db      	ldr	r3, [r3, #12]
   d6bb8:	9301      	str	r3, [sp, #4]
   d6bba:	bd08      	pop	{r3, pc}
   d6bbc:	00030228 	.word	0x00030228

000d6bc0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6bc0:	b508      	push	{r3, lr}
   d6bc2:	4b02      	ldr	r3, [pc, #8]	; (d6bcc <HAL_I2C_Begin_Transmission+0xc>)
   d6bc4:	681b      	ldr	r3, [r3, #0]
   d6bc6:	699b      	ldr	r3, [r3, #24]
   d6bc8:	9301      	str	r3, [sp, #4]
   d6bca:	bd08      	pop	{r3, pc}
   d6bcc:	00030228 	.word	0x00030228

000d6bd0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6bd0:	b508      	push	{r3, lr}
   d6bd2:	4b02      	ldr	r3, [pc, #8]	; (d6bdc <HAL_I2C_End_Transmission+0xc>)
   d6bd4:	681b      	ldr	r3, [r3, #0]
   d6bd6:	69db      	ldr	r3, [r3, #28]
   d6bd8:	9301      	str	r3, [sp, #4]
   d6bda:	bd08      	pop	{r3, pc}
   d6bdc:	00030228 	.word	0x00030228

000d6be0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6be0:	b508      	push	{r3, lr}
   d6be2:	4b02      	ldr	r3, [pc, #8]	; (d6bec <HAL_I2C_Write_Data+0xc>)
   d6be4:	681b      	ldr	r3, [r3, #0]
   d6be6:	6a1b      	ldr	r3, [r3, #32]
   d6be8:	9301      	str	r3, [sp, #4]
   d6bea:	bd08      	pop	{r3, pc}
   d6bec:	00030228 	.word	0x00030228

000d6bf0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6bf0:	b508      	push	{r3, lr}
   d6bf2:	4b02      	ldr	r3, [pc, #8]	; (d6bfc <HAL_I2C_Available_Data+0xc>)
   d6bf4:	681b      	ldr	r3, [r3, #0]
   d6bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6bf8:	9301      	str	r3, [sp, #4]
   d6bfa:	bd08      	pop	{r3, pc}
   d6bfc:	00030228 	.word	0x00030228

000d6c00 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6c00:	b508      	push	{r3, lr}
   d6c02:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <HAL_I2C_Read_Data+0xc>)
   d6c04:	681b      	ldr	r3, [r3, #0]
   d6c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c08:	9301      	str	r3, [sp, #4]
   d6c0a:	bd08      	pop	{r3, pc}
   d6c0c:	00030228 	.word	0x00030228

000d6c10 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6c10:	b508      	push	{r3, lr}
   d6c12:	4b02      	ldr	r3, [pc, #8]	; (d6c1c <HAL_I2C_Peek_Data+0xc>)
   d6c14:	681b      	ldr	r3, [r3, #0]
   d6c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c18:	9301      	str	r3, [sp, #4]
   d6c1a:	bd08      	pop	{r3, pc}
   d6c1c:	00030228 	.word	0x00030228

000d6c20 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6c20:	b508      	push	{r3, lr}
   d6c22:	4b02      	ldr	r3, [pc, #8]	; (d6c2c <HAL_I2C_Flush_Data+0xc>)
   d6c24:	681b      	ldr	r3, [r3, #0]
   d6c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c28:	9301      	str	r3, [sp, #4]
   d6c2a:	bd08      	pop	{r3, pc}
   d6c2c:	00030228 	.word	0x00030228

000d6c30 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6c30:	b508      	push	{r3, lr}
   d6c32:	4b02      	ldr	r3, [pc, #8]	; (d6c3c <HAL_I2C_Is_Enabled+0xc>)
   d6c34:	681b      	ldr	r3, [r3, #0]
   d6c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6c38:	9301      	str	r3, [sp, #4]
   d6c3a:	bd08      	pop	{r3, pc}
   d6c3c:	00030228 	.word	0x00030228

000d6c40 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b02      	ldr	r3, [pc, #8]	; (d6c4c <HAL_I2C_Init+0xc>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c48:	9301      	str	r3, [sp, #4]
   d6c4a:	bd08      	pop	{r3, pc}
   d6c4c:	00030228 	.word	0x00030228

000d6c50 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6c50:	b508      	push	{r3, lr}
   d6c52:	4b02      	ldr	r3, [pc, #8]	; (d6c5c <HAL_I2C_Request_Data_Ex+0xc>)
   d6c54:	681b      	ldr	r3, [r3, #0]
   d6c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6c58:	9301      	str	r3, [sp, #4]
   d6c5a:	bd08      	pop	{r3, pc}
   d6c5c:	00030228 	.word	0x00030228

000d6c60 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6c60:	b508      	push	{r3, lr}
   d6c62:	4b02      	ldr	r3, [pc, #8]	; (d6c6c <sock_setsockopt+0xc>)
   d6c64:	681b      	ldr	r3, [r3, #0]
   d6c66:	699b      	ldr	r3, [r3, #24]
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	bd08      	pop	{r3, pc}
   d6c6c:	00030238 	.word	0x00030238

000d6c70 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6c70:	b508      	push	{r3, lr}
   d6c72:	4b02      	ldr	r3, [pc, #8]	; (d6c7c <sock_close+0xc>)
   d6c74:	681b      	ldr	r3, [r3, #0]
   d6c76:	69db      	ldr	r3, [r3, #28]
   d6c78:	9301      	str	r3, [sp, #4]
   d6c7a:	bd08      	pop	{r3, pc}
   d6c7c:	00030238 	.word	0x00030238

000d6c80 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6c80:	b508      	push	{r3, lr}
   d6c82:	4b02      	ldr	r3, [pc, #8]	; (d6c8c <sock_connect+0xc>)
   d6c84:	681b      	ldr	r3, [r3, #0]
   d6c86:	6a1b      	ldr	r3, [r3, #32]
   d6c88:	9301      	str	r3, [sp, #4]
   d6c8a:	bd08      	pop	{r3, pc}
   d6c8c:	00030238 	.word	0x00030238

000d6c90 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6c90:	b508      	push	{r3, lr}
   d6c92:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <sock_recv+0xc>)
   d6c94:	681b      	ldr	r3, [r3, #0]
   d6c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c98:	9301      	str	r3, [sp, #4]
   d6c9a:	bd08      	pop	{r3, pc}
   d6c9c:	00030238 	.word	0x00030238

000d6ca0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6ca0:	b508      	push	{r3, lr}
   d6ca2:	4b02      	ldr	r3, [pc, #8]	; (d6cac <sock_send+0xc>)
   d6ca4:	681b      	ldr	r3, [r3, #0]
   d6ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ca8:	9301      	str	r3, [sp, #4]
   d6caa:	bd08      	pop	{r3, pc}
   d6cac:	00030238 	.word	0x00030238

000d6cb0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6cb0:	b508      	push	{r3, lr}
   d6cb2:	4b02      	ldr	r3, [pc, #8]	; (d6cbc <sock_socket+0xc>)
   d6cb4:	681b      	ldr	r3, [r3, #0]
   d6cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6cb8:	9301      	str	r3, [sp, #4]
   d6cba:	bd08      	pop	{r3, pc}
   d6cbc:	00030238 	.word	0x00030238

000d6cc0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6cc0:	b508      	push	{r3, lr}
   d6cc2:	4b02      	ldr	r3, [pc, #8]	; (d6ccc <HAL_USB_USART_Init+0xc>)
   d6cc4:	681b      	ldr	r3, [r3, #0]
   d6cc6:	681b      	ldr	r3, [r3, #0]
   d6cc8:	9301      	str	r3, [sp, #4]
   d6cca:	bd08      	pop	{r3, pc}
   d6ccc:	0003024c 	.word	0x0003024c

000d6cd0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6cd0:	b508      	push	{r3, lr}
   d6cd2:	4b02      	ldr	r3, [pc, #8]	; (d6cdc <HAL_USB_USART_Begin+0xc>)
   d6cd4:	681b      	ldr	r3, [r3, #0]
   d6cd6:	685b      	ldr	r3, [r3, #4]
   d6cd8:	9301      	str	r3, [sp, #4]
   d6cda:	bd08      	pop	{r3, pc}
   d6cdc:	0003024c 	.word	0x0003024c

000d6ce0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6ce0:	b508      	push	{r3, lr}
   d6ce2:	4b02      	ldr	r3, [pc, #8]	; (d6cec <HAL_USB_USART_Available_Data+0xc>)
   d6ce4:	681b      	ldr	r3, [r3, #0]
   d6ce6:	691b      	ldr	r3, [r3, #16]
   d6ce8:	9301      	str	r3, [sp, #4]
   d6cea:	bd08      	pop	{r3, pc}
   d6cec:	0003024c 	.word	0x0003024c

000d6cf0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6cf0:	b508      	push	{r3, lr}
   d6cf2:	4b02      	ldr	r3, [pc, #8]	; (d6cfc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6cf4:	681b      	ldr	r3, [r3, #0]
   d6cf6:	695b      	ldr	r3, [r3, #20]
   d6cf8:	9301      	str	r3, [sp, #4]
   d6cfa:	bd08      	pop	{r3, pc}
   d6cfc:	0003024c 	.word	0x0003024c

000d6d00 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d00:	b508      	push	{r3, lr}
   d6d02:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <HAL_USB_USART_Receive_Data+0xc>)
   d6d04:	681b      	ldr	r3, [r3, #0]
   d6d06:	699b      	ldr	r3, [r3, #24]
   d6d08:	9301      	str	r3, [sp, #4]
   d6d0a:	bd08      	pop	{r3, pc}
   d6d0c:	0003024c 	.word	0x0003024c

000d6d10 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6d10:	b508      	push	{r3, lr}
   d6d12:	4b02      	ldr	r3, [pc, #8]	; (d6d1c <HAL_USB_USART_Send_Data+0xc>)
   d6d14:	681b      	ldr	r3, [r3, #0]
   d6d16:	69db      	ldr	r3, [r3, #28]
   d6d18:	9301      	str	r3, [sp, #4]
   d6d1a:	bd08      	pop	{r3, pc}
   d6d1c:	0003024c 	.word	0x0003024c

000d6d20 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6d20:	b508      	push	{r3, lr}
   d6d22:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <HAL_USB_USART_Flush_Data+0xc>)
   d6d24:	681b      	ldr	r3, [r3, #0]
   d6d26:	6a1b      	ldr	r3, [r3, #32]
   d6d28:	9301      	str	r3, [sp, #4]
   d6d2a:	bd08      	pop	{r3, pc}
   d6d2c:	0003024c 	.word	0x0003024c

000d6d30 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6d30:	b508      	push	{r3, lr}
   d6d32:	4b02      	ldr	r3, [pc, #8]	; (d6d3c <panic_+0xc>)
   d6d34:	681b      	ldr	r3, [r3, #0]
   d6d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d38:	9301      	str	r3, [sp, #4]
   d6d3a:	bd08      	pop	{r3, pc}
   d6d3c:	00030260 	.word	0x00030260

000d6d40 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6d40:	b508      	push	{r3, lr}
   d6d42:	4b02      	ldr	r3, [pc, #8]	; (d6d4c <log_message+0xc>)
   d6d44:	681b      	ldr	r3, [r3, #0]
   d6d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6d48:	9301      	str	r3, [sp, #4]
   d6d4a:	bd08      	pop	{r3, pc}
   d6d4c:	00030260 	.word	0x00030260

000d6d50 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6d50:	b508      	push	{r3, lr}
   d6d52:	4b02      	ldr	r3, [pc, #8]	; (d6d5c <set_system_mode+0xc>)
   d6d54:	681b      	ldr	r3, [r3, #0]
   d6d56:	685b      	ldr	r3, [r3, #4]
   d6d58:	9301      	str	r3, [sp, #4]
   d6d5a:	bd08      	pop	{r3, pc}
   d6d5c:	00030220 	.word	0x00030220

000d6d60 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6d60:	b508      	push	{r3, lr}
   d6d62:	4b02      	ldr	r3, [pc, #8]	; (d6d6c <system_delay_ms+0xc>)
   d6d64:	681b      	ldr	r3, [r3, #0]
   d6d66:	695b      	ldr	r3, [r3, #20]
   d6d68:	9301      	str	r3, [sp, #4]
   d6d6a:	bd08      	pop	{r3, pc}
   d6d6c:	00030220 	.word	0x00030220

000d6d70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6d70:	b508      	push	{r3, lr}
   d6d72:	4b03      	ldr	r3, [pc, #12]	; (d6d80 <system_ctrl_set_app_request_handler+0x10>)
   d6d74:	681b      	ldr	r3, [r3, #0]
   d6d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6d7a:	9301      	str	r3, [sp, #4]
   d6d7c:	bd08      	pop	{r3, pc}
   d6d7e:	0000      	.short	0x0000
   d6d80:	00030220 	.word	0x00030220

000d6d84 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6d84:	b508      	push	{r3, lr}
   d6d86:	4b03      	ldr	r3, [pc, #12]	; (d6d94 <system_ctrl_set_result+0x10>)
   d6d88:	681b      	ldr	r3, [r3, #0]
   d6d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6d8e:	9301      	str	r3, [sp, #4]
   d6d90:	bd08      	pop	{r3, pc}
   d6d92:	0000      	.short	0x0000
   d6d94:	00030220 	.word	0x00030220

000d6d98 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <network_connect+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	685b      	ldr	r3, [r3, #4]
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	00030240 	.word	0x00030240

000d6da8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <network_connecting+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	689b      	ldr	r3, [r3, #8]
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	00030240 	.word	0x00030240

000d6db8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <network_disconnect+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	68db      	ldr	r3, [r3, #12]
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	00030240 	.word	0x00030240

000d6dc8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <network_ready+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	691b      	ldr	r3, [r3, #16]
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030240 	.word	0x00030240

000d6dd8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <network_on+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	695b      	ldr	r3, [r3, #20]
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030240 	.word	0x00030240

000d6de8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <network_off+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	699b      	ldr	r3, [r3, #24]
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030240 	.word	0x00030240

000d6df8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <network_listen+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	69db      	ldr	r3, [r3, #28]
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030240 	.word	0x00030240

000d6e08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <network_listening+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	6a1b      	ldr	r3, [r3, #32]
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	00030240 	.word	0x00030240

000d6e18 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <network_set_listen_timeout+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	00030240 	.word	0x00030240

000d6e28 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <network_get_listen_timeout+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	00030240 	.word	0x00030240

000d6e38 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <spark_process+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	689b      	ldr	r3, [r3, #8]
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	00030244 	.word	0x00030244

000d6e48 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	00030244 	.word	0x00030244

000d6e58 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <malloc+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	681b      	ldr	r3, [r3, #0]
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	0003021c 	.word	0x0003021c

000d6e68 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <free+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	685b      	ldr	r3, [r3, #4]
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	0003021c 	.word	0x0003021c

000d6e78 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <vsnprintf+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	0003021c 	.word	0x0003021c

000d6e88 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <__errno+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	0003021c 	.word	0x0003021c

000d6e98 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6e98:	2200      	movs	r2, #0
   d6e9a:	4611      	mov	r1, r2
   d6e9c:	6840      	ldr	r0, [r0, #4]
   d6e9e:	f7ff bfb3 	b.w	d6e08 <network_listening>

000d6ea2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6ea2:	2200      	movs	r2, #0
   d6ea4:	4611      	mov	r1, r2
   d6ea6:	6840      	ldr	r0, [r0, #4]
   d6ea8:	f7ff bfbe 	b.w	d6e28 <network_get_listen_timeout>

000d6eac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6eac:	2200      	movs	r2, #0
   d6eae:	6840      	ldr	r0, [r0, #4]
   d6eb0:	f7ff bfb2 	b.w	d6e18 <network_set_listen_timeout>

000d6eb4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6eb4:	2200      	movs	r2, #0
   d6eb6:	f081 0101 	eor.w	r1, r1, #1
   d6eba:	6840      	ldr	r0, [r0, #4]
   d6ebc:	f7ff bf9c 	b.w	d6df8 <network_listen>

000d6ec0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6ec0:	2300      	movs	r3, #0
   d6ec2:	461a      	mov	r2, r3
   d6ec4:	4619      	mov	r1, r3
   d6ec6:	6840      	ldr	r0, [r0, #4]
   d6ec8:	f7ff bf8e 	b.w	d6de8 <network_off>

000d6ecc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6ecc:	2300      	movs	r3, #0
   d6ece:	461a      	mov	r2, r3
   d6ed0:	4619      	mov	r1, r3
   d6ed2:	6840      	ldr	r0, [r0, #4]
   d6ed4:	f7ff bf80 	b.w	d6dd8 <network_on>

000d6ed8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6ed8:	2200      	movs	r2, #0
   d6eda:	4611      	mov	r1, r2
   d6edc:	6840      	ldr	r0, [r0, #4]
   d6ede:	f7ff bf73 	b.w	d6dc8 <network_ready>

000d6ee2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6ee2:	2200      	movs	r2, #0
   d6ee4:	4611      	mov	r1, r2
   d6ee6:	6840      	ldr	r0, [r0, #4]
   d6ee8:	f7ff bf5e 	b.w	d6da8 <network_connecting>

000d6eec <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6eec:	2200      	movs	r2, #0
   d6eee:	2102      	movs	r1, #2
   d6ef0:	6840      	ldr	r0, [r0, #4]
   d6ef2:	f7ff bf61 	b.w	d6db8 <network_disconnect>

000d6ef6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6ef6:	2300      	movs	r3, #0
   d6ef8:	461a      	mov	r2, r3
   d6efa:	6840      	ldr	r0, [r0, #4]
   d6efc:	f7ff bf4c 	b.w	d6d98 <network_connect>

000d6f00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6f00:	4b02      	ldr	r3, [pc, #8]	; (d6f0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6f02:	2203      	movs	r2, #3
   d6f04:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6f06:	4a02      	ldr	r2, [pc, #8]	; (d6f10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6f08:	601a      	str	r2, [r3, #0]
   d6f0a:	4770      	bx	lr
   d6f0c:	2003e3dc 	.word	0x2003e3dc
   d6f10:	000d916c 	.word	0x000d916c

000d6f14 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6f14:	2100      	movs	r1, #0
   d6f16:	f7ff bd93 	b.w	d6a40 <HAL_SPI_Acquire>

000d6f1a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6f1a:	2100      	movs	r1, #0
   d6f1c:	f7ff bd98 	b.w	d6a50 <HAL_SPI_Release>

000d6f20 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6f20:	b510      	push	{r4, lr}
   d6f22:	4604      	mov	r4, r0
{
    _spi = spi;
   d6f24:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6f26:	4608      	mov	r0, r1
   d6f28:	f7ff fd5a 	bl	d69e0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6f2c:	2300      	movs	r3, #0
   d6f2e:	6063      	str	r3, [r4, #4]
}
   d6f30:	4620      	mov	r0, r4
   d6f32:	bd10      	pop	{r4, pc}

000d6f34 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6f34:	b510      	push	{r4, lr}
   d6f36:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6f38:	7800      	ldrb	r0, [r0, #0]
   d6f3a:	f7ff ffeb 	bl	d6f14 <_ZN8SPIClass4lockEv.isra.0>
   d6f3e:	b948      	cbnz	r0, d6f54 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6f40:	7820      	ldrb	r0, [r4, #0]
   d6f42:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6f46:	f7ff fd23 	bl	d6990 <HAL_SPI_Begin>
        unlock();
   d6f4a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6f50:	f7ff bfe3 	b.w	d6f1a <_ZN8SPIClass6unlockEv.isra.1>
   d6f54:	bd10      	pop	{r4, pc}

000d6f56 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6f56:	b538      	push	{r3, r4, r5, lr}
   d6f58:	4604      	mov	r4, r0
    if (!lock())
   d6f5a:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6f5c:	460d      	mov	r5, r1
    if (!lock())
   d6f5e:	f7ff ffd9 	bl	d6f14 <_ZN8SPIClass4lockEv.isra.0>
   d6f62:	b940      	cbnz	r0, d6f76 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d6f64:	7820      	ldrb	r0, [r4, #0]
   d6f66:	4629      	mov	r1, r5
   d6f68:	f7ff fd1a 	bl	d69a0 <HAL_SPI_Set_Bit_Order>
        unlock();
   d6f6c:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d6f72:	f7ff bfd2 	b.w	d6f1a <_ZN8SPIClass6unlockEv.isra.1>
   d6f76:	bd38      	pop	{r3, r4, r5, pc}

000d6f78 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6f78:	b538      	push	{r3, r4, r5, lr}
   d6f7a:	4604      	mov	r4, r0
    if (!lock())
   d6f7c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6f7e:	460d      	mov	r5, r1
    if (!lock())
   d6f80:	f7ff ffc8 	bl	d6f14 <_ZN8SPIClass4lockEv.isra.0>
   d6f84:	b940      	cbnz	r0, d6f98 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d6f86:	7820      	ldrb	r0, [r4, #0]
   d6f88:	4629      	mov	r1, r5
   d6f8a:	f7ff fd11 	bl	d69b0 <HAL_SPI_Set_Data_Mode>
        unlock();
   d6f8e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d6f94:	f7ff bfc1 	b.w	d6f1a <_ZN8SPIClass6unlockEv.isra.1>
   d6f98:	bd38      	pop	{r3, r4, r5, pc}

000d6f9a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6f9a:	7800      	ldrb	r0, [r0, #0]
   d6f9c:	f7ff bfbd 	b.w	d6f1a <_ZN8SPIClass6unlockEv.isra.1>

000d6fa0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6fa0:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6fa2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6fa4:	6018      	str	r0, [r3, #0]
   d6fa6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6fa8:	6818      	ldr	r0, [r3, #0]
   d6faa:	4288      	cmp	r0, r1
   d6fac:	b2e5      	uxtb	r5, r4
   d6fae:	d906      	bls.n	d6fbe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6fb0:	3401      	adds	r4, #1
   d6fb2:	2c08      	cmp	r4, #8
   d6fb4:	d002      	beq.n	d6fbc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6fb6:	0840      	lsrs	r0, r0, #1
   d6fb8:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6fba:	e7f5      	b.n	d6fa8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6fbc:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6fbe:	4b02      	ldr	r3, [pc, #8]	; (d6fc8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6fc0:	5d5b      	ldrb	r3, [r3, r5]
   d6fc2:	7013      	strb	r3, [r2, #0]
   d6fc4:	bd30      	pop	{r4, r5, pc}
   d6fc6:	bf00      	nop
   d6fc8:	000d9198 	.word	0x000d9198

000d6fcc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6fd0:	4607      	mov	r7, r0
   d6fd2:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6fd4:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6fd6:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6fd8:	f7ff ff9c 	bl	d6f14 <_ZN8SPIClass4lockEv.isra.0>
   d6fdc:	2800      	cmp	r0, #0
   d6fde:	db62      	blt.n	d70a6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6fe0:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6fe2:	2214      	movs	r2, #20
   d6fe4:	2100      	movs	r1, #0
   d6fe6:	a809      	add	r0, sp, #36	; 0x24
   d6fe8:	f001 fb5d 	bl	d86a6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6fec:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6fee:	4620      	mov	r0, r4
   d6ff0:	2200      	movs	r2, #0
   d6ff2:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6ff4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6ff8:	f7ff fd02 	bl	d6a00 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6ffc:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7000:	b154      	cbz	r4, d7018 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d7002:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7006:	b935      	cbnz	r5, d7016 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d7008:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d700c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7010:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7014:	e003      	b.n	d701e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d7016:	2400      	movs	r4, #0
   d7018:	46a1      	mov	r9, r4
   d701a:	46a0      	mov	r8, r4
   d701c:	2501      	movs	r5, #1
   d701e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7020:	b105      	cbz	r5, d7024 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d7022:	b9bb      	cbnz	r3, d7054 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d7024:	429d      	cmp	r5, r3
   d7026:	d10b      	bne.n	d7040 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d7028:	68b2      	ldr	r2, [r6, #8]
   d702a:	4542      	cmp	r2, r8
   d702c:	d108      	bne.n	d7040 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d702e:	f88d 9020 	strb.w	r9, [sp, #32]
   d7032:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7036:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d703a:	89b2      	ldrh	r2, [r6, #12]
   d703c:	4291      	cmp	r1, r2
   d703e:	d009      	beq.n	d7054 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d7040:	b153      	cbz	r3, d7058 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7042:	2400      	movs	r4, #0
   d7044:	7838      	ldrb	r0, [r7, #0]
   d7046:	9401      	str	r4, [sp, #4]
   d7048:	9400      	str	r4, [sp, #0]
   d704a:	4623      	mov	r3, r4
   d704c:	4622      	mov	r2, r4
   d704e:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7050:	f7ff fcee 	bl	d6a30 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d7054:	2000      	movs	r0, #0
   d7056:	e026      	b.n	d70a6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d7058:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d705c:	68b1      	ldr	r1, [r6, #8]
   d705e:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7060:	ab04      	add	r3, sp, #16
   d7062:	f10d 020f 	add.w	r2, sp, #15
   d7066:	f7ff ff9b 	bl	d6fa0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d706a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d706c:	b105      	cbz	r5, d7070 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d706e:	b9b1      	cbnz	r1, d709e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d7070:	42a9      	cmp	r1, r5
   d7072:	d008      	beq.n	d7086 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7074:	2400      	movs	r4, #0
   d7076:	7838      	ldrb	r0, [r7, #0]
   d7078:	9401      	str	r4, [sp, #4]
   d707a:	7b74      	ldrb	r4, [r6, #13]
   d707c:	7b33      	ldrb	r3, [r6, #12]
   d707e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7082:	9400      	str	r4, [sp, #0]
   d7084:	e7e4      	b.n	d7050 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d7086:	68b3      	ldr	r3, [r6, #8]
   d7088:	4543      	cmp	r3, r8
   d708a:	d3f3      	bcc.n	d7074 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d708c:	f88d 9020 	strb.w	r9, [sp, #32]
   d7090:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7094:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7098:	89b3      	ldrh	r3, [r6, #12]
   d709a:	429a      	cmp	r2, r3
   d709c:	d1ea      	bne.n	d7074 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d709e:	9b04      	ldr	r3, [sp, #16]
   d70a0:	4543      	cmp	r3, r8
   d70a2:	d1e7      	bne.n	d7074 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d70a4:	e7d6      	b.n	d7054 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d70a6:	b00f      	add	sp, #60	; 0x3c
   d70a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d70ac <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d70ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d70b0:	b088      	sub	sp, #32
    unsigned clock = 0;
   d70b2:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d70b4:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d70b6:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d70b8:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d70ba:	460e      	mov	r6, r1
   d70bc:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d70be:	f7ff ff29 	bl	d6f14 <_ZN8SPIClass4lockEv.isra.0>
   d70c2:	4605      	mov	r5, r0
   d70c4:	bb00      	cbnz	r0, d7108 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d70c6:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d70ca:	4601      	mov	r1, r0
   d70cc:	2214      	movs	r2, #20
   d70ce:	a803      	add	r0, sp, #12
   d70d0:	f001 fae9 	bl	d86a6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d70d4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d70d6:	462a      	mov	r2, r5
   d70d8:	a903      	add	r1, sp, #12
   d70da:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d70dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d70e0:	f7ff fc8e 	bl	d6a00 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d70e4:	ab02      	add	r3, sp, #8
   d70e6:	f10d 0207 	add.w	r2, sp, #7
   d70ea:	fb07 f106 	mul.w	r1, r7, r6
   d70ee:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d70f0:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d70f4:	f7ff ff54 	bl	d6fa0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d70f8:	7820      	ldrb	r0, [r4, #0]
   d70fa:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d70fe:	f7ff fc5f 	bl	d69c0 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d7102:	7820      	ldrb	r0, [r4, #0]
   d7104:	f7ff ff09 	bl	d6f1a <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d7108:	9802      	ldr	r0, [sp, #8]
   d710a:	b008      	add	sp, #32
   d710c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7110 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7110:	b538      	push	{r3, r4, r5, lr}
   d7112:	4604      	mov	r4, r0
    if (!lock())
   d7114:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d7116:	460d      	mov	r5, r1
    if (!lock())
   d7118:	f7ff fefc 	bl	d6f14 <_ZN8SPIClass4lockEv.isra.0>
   d711c:	b9c8      	cbnz	r0, d7152 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d711e:	6861      	ldr	r1, [r4, #4]
   d7120:	b171      	cbz	r1, d7140 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d7122:	4b0c      	ldr	r3, [pc, #48]	; (d7154 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d7124:	5cc2      	ldrb	r2, [r0, r3]
   d7126:	42aa      	cmp	r2, r5
   d7128:	d002      	beq.n	d7130 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d712a:	3001      	adds	r0, #1
   d712c:	2808      	cmp	r0, #8
   d712e:	d1f9      	bne.n	d7124 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d7130:	3001      	adds	r0, #1
   d7132:	b2c0      	uxtb	r0, r0
   d7134:	40c1      	lsrs	r1, r0
   d7136:	2201      	movs	r2, #1
   d7138:	4620      	mov	r0, r4
   d713a:	f7ff ffb7 	bl	d70ac <_ZN8SPIClass13setClockSpeedEjj>
   d713e:	e003      	b.n	d7148 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d7140:	4629      	mov	r1, r5
   d7142:	7820      	ldrb	r0, [r4, #0]
   d7144:	f7ff fc3c 	bl	d69c0 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d7148:	7820      	ldrb	r0, [r4, #0]
    }
}
   d714a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d714e:	f7ff bee4 	b.w	d6f1a <_ZN8SPIClass6unlockEv.isra.1>
   d7152:	bd38      	pop	{r3, r4, r5, pc}
   d7154:	000d9198 	.word	0x000d9198

000d7158 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7158:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d715a:	7800      	ldrb	r0, [r0, #0]
   d715c:	f7ff fc38 	bl	d69d0 <HAL_SPI_Send_Receive_Data>
}
   d7160:	b2c0      	uxtb	r0, r0
   d7162:	bd08      	pop	{r3, pc}

000d7164 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7164:	b530      	push	{r4, r5, lr}
   d7166:	b087      	sub	sp, #28
   d7168:	4604      	mov	r4, r0
   d716a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d716c:	7800      	ldrb	r0, [r0, #0]
   d716e:	9500      	str	r5, [sp, #0]
   d7170:	f7ff fc4e 	bl	d6a10 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d7174:	b93d      	cbnz	r5, d7186 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d7176:	a902      	add	r1, sp, #8
   d7178:	7820      	ldrb	r0, [r4, #0]
   d717a:	f7ff fc51 	bl	d6a20 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d717e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7182:	07db      	lsls	r3, r3, #31
   d7184:	d4f7      	bmi.n	d7176 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d7186:	b007      	add	sp, #28
   d7188:	bd30      	pop	{r4, r5, pc}

000d718a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d718a:	7800      	ldrb	r0, [r0, #0]
   d718c:	f7ff bc30 	b.w	d69f0 <HAL_SPI_Is_Enabled>

000d7190 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7190:	b510      	push	{r4, lr}
   d7192:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7194:	6800      	ldr	r0, [r0, #0]
   d7196:	b118      	cbz	r0, d71a0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d7198:	f7ff fe66 	bl	d6e68 <free>
            wakeupSource_ = nullptr;
   d719c:	2300      	movs	r3, #0
   d719e:	6023      	str	r3, [r4, #0]
   d71a0:	bd10      	pop	{r4, pc}

000d71a2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d71a2:	b510      	push	{r4, lr}
   d71a4:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d71a6:	f7ff fff3 	bl	d7190 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d71aa:	4620      	mov	r0, r4
   d71ac:	bd10      	pop	{r4, pc}
	...

000d71b0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d71b0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d71b2:	4c09      	ldr	r4, [pc, #36]	; (d71d8 <_GLOBAL__sub_I_System+0x28>)
   d71b4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d71b6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d71ba:	6020      	str	r0, [r4, #0]
   d71bc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d71be:	71a0      	strb	r0, [r4, #6]
   d71c0:	8120      	strh	r0, [r4, #8]
   d71c2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d71c4:	f7ff fdc4 	bl	d6d50 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d71c8:	4620      	mov	r0, r4
   d71ca:	4a04      	ldr	r2, [pc, #16]	; (d71dc <_GLOBAL__sub_I_System+0x2c>)
   d71cc:	4904      	ldr	r1, [pc, #16]	; (d71e0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d71ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d71d2:	f001 b8e5 	b.w	d83a0 <__aeabi_atexit>
   d71d6:	bf00      	nop
   d71d8:	2003e3e4 	.word	0x2003e3e4
   d71dc:	2003dd30 	.word	0x2003dd30
   d71e0:	000d71a3 	.word	0x000d71a3

000d71e4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d71e4:	b510      	push	{r4, lr}
   d71e6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d71e8:	6800      	ldr	r0, [r0, #0]
   d71ea:	b108      	cbz	r0, d71f0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d71ec:	f7ff fc80 	bl	d6af0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d71f0:	4620      	mov	r0, r4
   d71f2:	bd10      	pop	{r4, pc}

000d71f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d71f4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d71f6:	4c06      	ldr	r4, [pc, #24]	; (d7210 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d71f8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d71fa:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d71fc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d71fe:	f7ff fc6f 	bl	d6ae0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7202:	4620      	mov	r0, r4
   d7204:	4a03      	ldr	r2, [pc, #12]	; (d7214 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7206:	4904      	ldr	r1, [pc, #16]	; (d7218 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d720c:	f001 b8c8 	b.w	d83a0 <__aeabi_atexit>
   d7210:	2003e3f0 	.word	0x2003e3f0
   d7214:	2003dd30 	.word	0x2003dd30
   d7218:	000d71e5 	.word	0x000d71e5

000d721c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d721e:	4606      	mov	r6, r0
   d7220:	460d      	mov	r5, r1
   d7222:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7224:	2400      	movs	r4, #0
  while (size--) {
   d7226:	42bd      	cmp	r5, r7
   d7228:	d00c      	beq.n	d7244 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d722a:	6833      	ldr	r3, [r6, #0]
   d722c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7230:	689b      	ldr	r3, [r3, #8]
   d7232:	4630      	mov	r0, r6
   d7234:	4798      	blx	r3
     if (chunk>=0)
   d7236:	2800      	cmp	r0, #0
   d7238:	db01      	blt.n	d723e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d723a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d723c:	e7f3      	b.n	d7226 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d723e:	2c00      	cmp	r4, #0
   d7240:	bf08      	it	eq
   d7242:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7244:	4620      	mov	r0, r4
   d7246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7248 <_ZN5Print5printEPKc>:
   d7248:	b508      	push	{r3, lr}
   d724a:	f7fe febd 	bl	d5fc8 <_ZN5Print5writeEPKc>
   d724e:	bd08      	pop	{r3, pc}

000d7250 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7250:	6803      	ldr	r3, [r0, #0]
   d7252:	689b      	ldr	r3, [r3, #8]
   d7254:	4718      	bx	r3

000d7256 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7256:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7258:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d725a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d725c:	f7ff fff8 	bl	d7250 <_ZN5Print5printEc>
  n += print('\n');
   d7260:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7262:	4604      	mov	r4, r0
  n += print('\n');
   d7264:	4628      	mov	r0, r5
   d7266:	f7ff fff3 	bl	d7250 <_ZN5Print5printEc>
  return n;
}
   d726a:	4420      	add	r0, r4
   d726c:	bd38      	pop	{r3, r4, r5, pc}

000d726e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d726e:	b538      	push	{r3, r4, r5, lr}
   d7270:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7272:	f7fe fea9 	bl	d5fc8 <_ZN5Print5writeEPKc>
   d7276:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7278:	4628      	mov	r0, r5
   d727a:	f7ff ffec 	bl	d7256 <_ZN5Print7printlnEv>
  return n;
}
   d727e:	4420      	add	r0, r4
   d7280:	bd38      	pop	{r3, r4, r5, pc}

000d7282 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7282:	b530      	push	{r4, r5, lr}
   d7284:	b08b      	sub	sp, #44	; 0x2c
   d7286:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7288:	2100      	movs	r1, #0
   d728a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d728e:	2a01      	cmp	r2, #1
   d7290:	bf98      	it	ls
   d7292:	220a      	movls	r2, #10
   d7294:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7298:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d729c:	fb05 3312 	mls	r3, r5, r2, r3
   d72a0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d72a4:	2b09      	cmp	r3, #9
   d72a6:	bf94      	ite	ls
   d72a8:	3330      	addls	r3, #48	; 0x30
   d72aa:	3337      	addhi	r3, #55	; 0x37
   d72ac:	b2db      	uxtb	r3, r3
   d72ae:	4621      	mov	r1, r4
   d72b0:	f804 3901 	strb.w	r3, [r4], #-1
   d72b4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d72b6:	2d00      	cmp	r5, #0
   d72b8:	d1ee      	bne.n	d7298 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d72ba:	f7fe fe85 	bl	d5fc8 <_ZN5Print5writeEPKc>
}
   d72be:	b00b      	add	sp, #44	; 0x2c
   d72c0:	bd30      	pop	{r4, r5, pc}

000d72c2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d72c2:	b40c      	push	{r2, r3}
   d72c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d72c8:	b087      	sub	sp, #28
   d72ca:	af00      	add	r7, sp, #0
   d72cc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d72d0:	4605      	mov	r5, r0
   d72d2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d72d6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d72d8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d72da:	4623      	mov	r3, r4
   d72dc:	464a      	mov	r2, r9
   d72de:	2114      	movs	r1, #20
   d72e0:	1d38      	adds	r0, r7, #4
   d72e2:	f7ff fdc9 	bl	d6e78 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d72e6:	2813      	cmp	r0, #19
   d72e8:	d805      	bhi.n	d72f6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d72ea:	1d39      	adds	r1, r7, #4
   d72ec:	4628      	mov	r0, r5
   d72ee:	f7fe fe6b 	bl	d5fc8 <_ZN5Print5writeEPKc>
   d72f2:	4604      	mov	r4, r0
   d72f4:	e013      	b.n	d731e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d72f6:	f100 0308 	add.w	r3, r0, #8
   d72fa:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d72fe:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7300:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7304:	1c41      	adds	r1, r0, #1
   d7306:	4623      	mov	r3, r4
   d7308:	464a      	mov	r2, r9
   d730a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d730c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d730e:	f7ff fdb3 	bl	d6e78 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7312:	4669      	mov	r1, sp
   d7314:	4628      	mov	r0, r5
   d7316:	f7fe fe57 	bl	d5fc8 <_ZN5Print5writeEPKc>
   d731a:	4604      	mov	r4, r0
   d731c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d731e:	b11e      	cbz	r6, d7328 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7320:	4628      	mov	r0, r5
   d7322:	f7ff ff98 	bl	d7256 <_ZN5Print7printlnEv>
   d7326:	4404      	add	r4, r0
    return n;
}
   d7328:	4620      	mov	r0, r4
   d732a:	371c      	adds	r7, #28
   d732c:	46bd      	mov	sp, r7
   d732e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7332:	b002      	add	sp, #8
   d7334:	4770      	bx	lr
	...

000d7338 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7338:	4b01      	ldr	r3, [pc, #4]	; (d7340 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d733a:	4a02      	ldr	r2, [pc, #8]	; (d7344 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d733c:	601a      	str	r2, [r3, #0]
   d733e:	4770      	bx	lr
   d7340:	2003e3f4 	.word	0x2003e3f4
   d7344:	000d9213 	.word	0x000d9213

000d7348 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7348:	4b02      	ldr	r3, [pc, #8]	; (d7354 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d734a:	681a      	ldr	r2, [r3, #0]
   d734c:	4b02      	ldr	r3, [pc, #8]	; (d7358 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d734e:	601a      	str	r2, [r3, #0]
   d7350:	4770      	bx	lr
   d7352:	bf00      	nop
   d7354:	2003dcc8 	.word	0x2003dcc8
   d7358:	2003e3f8 	.word	0x2003e3f8

000d735c <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d735c:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d735e:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d7360:	d007      	beq.n	d7372 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d7362:	9d03      	ldr	r5, [sp, #12]
   d7364:	1a44      	subs	r4, r0, r1
   d7366:	1aed      	subs	r5, r5, r3
   d7368:	436c      	muls	r4, r5
   d736a:	1a52      	subs	r2, r2, r1
   d736c:	fb94 f4f2 	sdiv	r4, r4, r2
   d7370:	18e0      	adds	r0, r4, r3
}
   d7372:	bd30      	pop	{r4, r5, pc}

000d7374 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7374:	2100      	movs	r1, #0
   d7376:	f7ff bcf3 	b.w	d6d60 <system_delay_ms>

000d737a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d737a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d737c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d737e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7380:	b113      	cbz	r3, d7388 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7382:	2203      	movs	r2, #3
   d7384:	4601      	mov	r1, r0
   d7386:	4798      	blx	r3
    }
   d7388:	4620      	mov	r0, r4
   d738a:	bd10      	pop	{r4, pc}

000d738c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d738c:	b510      	push	{r4, lr}
   d738e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7390:	f7ff fff3 	bl	d737a <_ZNSt14_Function_baseD1Ev>
   d7394:	4620      	mov	r0, r4
   d7396:	bd10      	pop	{r4, pc}

000d7398 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7398:	4803      	ldr	r0, [pc, #12]	; (d73a8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d739a:	4a04      	ldr	r2, [pc, #16]	; (d73ac <_GLOBAL__sub_I_RGB+0x14>)
   d739c:	4904      	ldr	r1, [pc, #16]	; (d73b0 <_GLOBAL__sub_I_RGB+0x18>)
   d739e:	2300      	movs	r3, #0
   d73a0:	6083      	str	r3, [r0, #8]
   d73a2:	f000 bffd 	b.w	d83a0 <__aeabi_atexit>
   d73a6:	bf00      	nop
   d73a8:	2003e3fc 	.word	0x2003e3fc
   d73ac:	2003dd30 	.word	0x2003dd30
   d73b0:	000d738d 	.word	0x000d738d

000d73b4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d73b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d73b6:	4b0c      	ldr	r3, [pc, #48]	; (d73e8 <serialEventRun+0x34>)
   d73b8:	b133      	cbz	r3, d73c8 <serialEventRun+0x14>
   d73ba:	f000 f96d 	bl	d7698 <_Z16_fetch_usbserialv>
   d73be:	6803      	ldr	r3, [r0, #0]
   d73c0:	691b      	ldr	r3, [r3, #16]
   d73c2:	4798      	blx	r3
   d73c4:	2800      	cmp	r0, #0
   d73c6:	dc09      	bgt.n	d73dc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d73c8:	4b08      	ldr	r3, [pc, #32]	; (d73ec <serialEventRun+0x38>)
   d73ca:	b163      	cbz	r3, d73e6 <serialEventRun+0x32>
   d73cc:	f000 f9e6 	bl	d779c <_Z22__fetch_global_Serial1v>
   d73d0:	6803      	ldr	r3, [r0, #0]
   d73d2:	691b      	ldr	r3, [r3, #16]
   d73d4:	4798      	blx	r3
   d73d6:	2800      	cmp	r0, #0
   d73d8:	dc03      	bgt.n	d73e2 <serialEventRun+0x2e>
   d73da:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d73dc:	f3af 8000 	nop.w
   d73e0:	e7f2      	b.n	d73c8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d73e2:	f3af 8000 	nop.w
   d73e6:	bd08      	pop	{r3, pc}
	...

000d73f0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d73f0:	b508      	push	{r3, lr}
	serialEventRun();
   d73f2:	f7ff ffdf 	bl	d73b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d73f6:	f7ff fb53 	bl	d6aa0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d73fa:	4b01      	ldr	r3, [pc, #4]	; (d7400 <_post_loop+0x10>)
   d73fc:	6018      	str	r0, [r3, #0]
   d73fe:	bd08      	pop	{r3, pc}
   d7400:	2003e730 	.word	0x2003e730

000d7404 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7404:	4802      	ldr	r0, [pc, #8]	; (d7410 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7406:	4a03      	ldr	r2, [pc, #12]	; (d7414 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7408:	4903      	ldr	r1, [pc, #12]	; (d7418 <_Z33system_initialize_user_backup_ramv+0x14>)
   d740a:	1a12      	subs	r2, r2, r0
   d740c:	f001 b940 	b.w	d8690 <memcpy>
   d7410:	2003f400 	.word	0x2003f400
   d7414:	2003f404 	.word	0x2003f404
   d7418:	000d9550 	.word	0x000d9550

000d741c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d741c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d741e:	2300      	movs	r3, #0
   d7420:	9300      	str	r3, [sp, #0]
   d7422:	461a      	mov	r2, r3
   d7424:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7428:	f7ff fcac 	bl	d6d84 <system_ctrl_set_result>
}
   d742c:	b003      	add	sp, #12
   d742e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7434 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7434:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7436:	8843      	ldrh	r3, [r0, #2]
   d7438:	2b0a      	cmp	r3, #10
   d743a:	d008      	beq.n	d744e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d743c:	2b50      	cmp	r3, #80	; 0x50
   d743e:	d109      	bne.n	d7454 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7440:	4b09      	ldr	r3, [pc, #36]	; (d7468 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7442:	681b      	ldr	r3, [r3, #0]
   d7444:	b13b      	cbz	r3, d7456 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7446:	b003      	add	sp, #12
   d7448:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d744c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d744e:	f7ff ffe5 	bl	d741c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7452:	e006      	b.n	d7462 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7454:	2300      	movs	r3, #0
   d7456:	9300      	str	r3, [sp, #0]
   d7458:	461a      	mov	r2, r3
   d745a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d745e:	f7ff fc91 	bl	d6d84 <system_ctrl_set_result>
        break;
    }
}
   d7462:	b003      	add	sp, #12
   d7464:	f85d fb04 	ldr.w	pc, [sp], #4
   d7468:	2003e40c 	.word	0x2003e40c

000d746c <module_user_init_hook>:

void module_user_init_hook()
{
   d746c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d746e:	4c10      	ldr	r4, [pc, #64]	; (d74b0 <module_user_init_hook+0x44>)
   d7470:	4d10      	ldr	r5, [pc, #64]	; (d74b4 <module_user_init_hook+0x48>)
   d7472:	6823      	ldr	r3, [r4, #0]
   d7474:	42ab      	cmp	r3, r5
   d7476:	4b10      	ldr	r3, [pc, #64]	; (d74b8 <module_user_init_hook+0x4c>)
   d7478:	bf0c      	ite	eq
   d747a:	2201      	moveq	r2, #1
   d747c:	2200      	movne	r2, #0
   d747e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7480:	d002      	beq.n	d7488 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7482:	f7ff ffbf 	bl	d7404 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7486:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7488:	f7ff faf2 	bl	d6a70 <HAL_RNG_GetRandomNumber>
   d748c:	4604      	mov	r4, r0
    srand(seed);
   d748e:	f001 f913 	bl	d86b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7492:	4b0a      	ldr	r3, [pc, #40]	; (d74bc <module_user_init_hook+0x50>)
   d7494:	b113      	cbz	r3, d749c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7496:	4620      	mov	r0, r4
   d7498:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d749c:	2100      	movs	r1, #0
   d749e:	4807      	ldr	r0, [pc, #28]	; (d74bc <module_user_init_hook+0x50>)
   d74a0:	f7ff fcd2 	bl	d6e48 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d74a4:	2100      	movs	r1, #0
   d74a6:	4806      	ldr	r0, [pc, #24]	; (d74c0 <module_user_init_hook+0x54>)
}
   d74a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d74ac:	f7ff bc60 	b.w	d6d70 <system_ctrl_set_app_request_handler>
   d74b0:	2003f400 	.word	0x2003f400
   d74b4:	9a271c1e 	.word	0x9a271c1e
   d74b8:	2003e410 	.word	0x2003e410
   d74bc:	00000000 	.word	0x00000000
   d74c0:	000d7435 	.word	0x000d7435

000d74c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d74c4:	4770      	bx	lr

000d74c6 <_ZN9IPAddressD0Ev>:
   d74c6:	b510      	push	{r4, lr}
   d74c8:	2118      	movs	r1, #24
   d74ca:	4604      	mov	r4, r0
   d74cc:	f000 ff76 	bl	d83bc <_ZdlPvj>
   d74d0:	4620      	mov	r0, r4
   d74d2:	bd10      	pop	{r4, pc}

000d74d4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d74d4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d74d6:	7d03      	ldrb	r3, [r0, #20]
   d74d8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d74da:	b08d      	sub	sp, #52	; 0x34
   d74dc:	460e      	mov	r6, r1
   d74de:	f100 0704 	add.w	r7, r0, #4
   d74e2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d74e6:	d002      	beq.n	d74ee <_ZNK9IPAddress7printToER5Print+0x1a>
   d74e8:	f100 0508 	add.w	r5, r0, #8
   d74ec:	e018      	b.n	d7520 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d74ee:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d74f0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d74f2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d74f6:	232f      	movs	r3, #47	; 0x2f
   d74f8:	462a      	mov	r2, r5
   d74fa:	200a      	movs	r0, #10
   d74fc:	f7ff fb00 	bl	d6b00 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7500:	4628      	mov	r0, r5
   d7502:	f001 f909 	bl	d8718 <strlen>
   d7506:	6833      	ldr	r3, [r6, #0]
   d7508:	4602      	mov	r2, r0
   d750a:	68db      	ldr	r3, [r3, #12]
   d750c:	4629      	mov	r1, r5
   d750e:	4630      	mov	r0, r6
   d7510:	4798      	blx	r3
   d7512:	e00f      	b.n	d7534 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7514:	b124      	cbz	r4, d7520 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7516:	212e      	movs	r1, #46	; 0x2e
   d7518:	4630      	mov	r0, r6
   d751a:	f7ff fe99 	bl	d7250 <_ZN5Print5printEc>
   d751e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7520:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7524:	220a      	movs	r2, #10
   d7526:	4630      	mov	r0, r6
   d7528:	f7ff feab 	bl	d7282 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d752c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d752e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7530:	d1f0      	bne.n	d7514 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7532:	4620      	mov	r0, r4
    }
    return n;
}
   d7534:	b00d      	add	sp, #52	; 0x34
   d7536:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7538 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7538:	b510      	push	{r4, lr}
   d753a:	4b05      	ldr	r3, [pc, #20]	; (d7550 <_ZN9IPAddressC1Ev+0x18>)
   d753c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d753e:	2211      	movs	r2, #17
   d7540:	f840 3b04 	str.w	r3, [r0], #4
   d7544:	2100      	movs	r1, #0
   d7546:	f001 f8ae 	bl	d86a6 <memset>
{
    clear();
}
   d754a:	4620      	mov	r0, r4
   d754c:	bd10      	pop	{r4, pc}
   d754e:	bf00      	nop
   d7550:	000d92a4 	.word	0x000d92a4

000d7554 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7554:	4603      	mov	r3, r0
   d7556:	4a07      	ldr	r2, [pc, #28]	; (d7574 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7558:	b510      	push	{r4, lr}
   d755a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d755e:	f101 0210 	add.w	r2, r1, #16
   d7562:	f851 4b04 	ldr.w	r4, [r1], #4
   d7566:	f843 4b04 	str.w	r4, [r3], #4
   d756a:	4291      	cmp	r1, r2
   d756c:	d1f9      	bne.n	d7562 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d756e:	780a      	ldrb	r2, [r1, #0]
   d7570:	701a      	strb	r2, [r3, #0]
}
   d7572:	bd10      	pop	{r4, pc}
   d7574:	000d92a4 	.word	0x000d92a4

000d7578 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d7578:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d757a:	2b04      	cmp	r3, #4
   d757c:	d101      	bne.n	d7582 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d757e:	6840      	ldr	r0, [r0, #4]
   d7580:	e008      	b.n	d7594 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d7582:	2b06      	cmp	r3, #6
   d7584:	d10a      	bne.n	d759c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7586:	6843      	ldr	r3, [r0, #4]
   d7588:	b953      	cbnz	r3, d75a0 <_ZNK9IPAddresscvbEv+0x28>
   d758a:	6883      	ldr	r3, [r0, #8]
   d758c:	b943      	cbnz	r3, d75a0 <_ZNK9IPAddresscvbEv+0x28>
   d758e:	68c3      	ldr	r3, [r0, #12]
   d7590:	b933      	cbnz	r3, d75a0 <_ZNK9IPAddresscvbEv+0x28>
   d7592:	6900      	ldr	r0, [r0, #16]
   d7594:	3000      	adds	r0, #0
   d7596:	bf18      	it	ne
   d7598:	2001      	movne	r0, #1
   d759a:	4770      	bx	lr
    } else {
        return false;
   d759c:	2000      	movs	r0, #0
   d759e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d75a0:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d75a2:	4770      	bx	lr

000d75a4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d75a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d75a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d75aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d75ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d75b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d75b6:	2304      	movs	r3, #4
   d75b8:	6041      	str	r1, [r0, #4]
   d75ba:	7503      	strb	r3, [r0, #20]
   d75bc:	bd10      	pop	{r4, pc}

000d75be <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d75be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d75c0:	780d      	ldrb	r5, [r1, #0]
   d75c2:	788b      	ldrb	r3, [r1, #2]
   d75c4:	784a      	ldrb	r2, [r1, #1]
   d75c6:	78c9      	ldrb	r1, [r1, #3]
   d75c8:	9100      	str	r1, [sp, #0]
   d75ca:	4629      	mov	r1, r5
   d75cc:	f7ff ffea 	bl	d75a4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d75d0:	b003      	add	sp, #12
   d75d2:	bd30      	pop	{r4, r5, pc}

000d75d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d75d4:	7441      	strb	r1, [r0, #17]
   d75d6:	4770      	bx	lr

000d75d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d75d8:	4770      	bx	lr

000d75da <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d75da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d75dc:	2100      	movs	r1, #0
   d75de:	7c00      	ldrb	r0, [r0, #16]
   d75e0:	f7ff fb8e 	bl	d6d00 <HAL_USB_USART_Receive_Data>
}
   d75e4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d75e8:	bf28      	it	cs
   d75ea:	f04f 30ff 	movcs.w	r0, #4294967295
   d75ee:	bd08      	pop	{r3, pc}

000d75f0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d75f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d75f2:	2101      	movs	r1, #1
   d75f4:	7c00      	ldrb	r0, [r0, #16]
   d75f6:	f7ff fb83 	bl	d6d00 <HAL_USB_USART_Receive_Data>
}
   d75fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d75fe:	bf28      	it	cs
   d7600:	f04f 30ff 	movcs.w	r0, #4294967295
   d7604:	bd08      	pop	{r3, pc}

000d7606 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7606:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7608:	7c00      	ldrb	r0, [r0, #16]
   d760a:	f7ff fb71 	bl	d6cf0 <HAL_USB_USART_Available_Data_For_Write>
}
   d760e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7612:	bd08      	pop	{r3, pc}

000d7614 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7614:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7616:	7c00      	ldrb	r0, [r0, #16]
   d7618:	f7ff fb62 	bl	d6ce0 <HAL_USB_USART_Available_Data>
}
   d761c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7620:	bd08      	pop	{r3, pc}

000d7622 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7622:	7c00      	ldrb	r0, [r0, #16]
   d7624:	f7ff bb7c 	b.w	d6d20 <HAL_USB_USART_Flush_Data>

000d7628 <_ZN9USBSerialD0Ev>:
   d7628:	b510      	push	{r4, lr}
   d762a:	2114      	movs	r1, #20
   d762c:	4604      	mov	r4, r0
   d762e:	f000 fec5 	bl	d83bc <_ZdlPvj>
   d7632:	4620      	mov	r0, r4
   d7634:	bd10      	pop	{r4, pc}

000d7636 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7636:	b538      	push	{r3, r4, r5, lr}
   d7638:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d763a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d763c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d763e:	f7ff fb57 	bl	d6cf0 <HAL_USB_USART_Available_Data_For_Write>
   d7642:	2800      	cmp	r0, #0
   d7644:	dc01      	bgt.n	d764a <_ZN9USBSerial5writeEh+0x14>
   d7646:	7c60      	ldrb	r0, [r4, #17]
   d7648:	b128      	cbz	r0, d7656 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d764a:	4629      	mov	r1, r5
   d764c:	7c20      	ldrb	r0, [r4, #16]
   d764e:	f7ff fb5f 	bl	d6d10 <HAL_USB_USART_Send_Data>
   d7652:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7656:	bd38      	pop	{r3, r4, r5, pc}

000d7658 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7658:	b510      	push	{r4, lr}
   d765a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d765c:	2300      	movs	r3, #0
   d765e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7664:	60a3      	str	r3, [r4, #8]
   d7666:	4b05      	ldr	r3, [pc, #20]	; (d767c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7668:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d766a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d766c:	4608      	mov	r0, r1
{
  _serial = serial;
   d766e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7670:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7672:	4611      	mov	r1, r2
   d7674:	f7ff fb24 	bl	d6cc0 <HAL_USB_USART_Init>
}
   d7678:	4620      	mov	r0, r4
   d767a:	bd10      	pop	{r4, pc}
   d767c:	000d92b8 	.word	0x000d92b8

000d7680 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7680:	2200      	movs	r2, #0
   d7682:	7c00      	ldrb	r0, [r0, #16]
   d7684:	f7ff bb24 	b.w	d6cd0 <HAL_USB_USART_Begin>

000d7688 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7688:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d768a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d768c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d768e:	2100      	movs	r1, #0
   d7690:	f001 f809 	bl	d86a6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7694:	4620      	mov	r0, r4
   d7696:	bd10      	pop	{r4, pc}

000d7698 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7698:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d769a:	4d0e      	ldr	r5, [pc, #56]	; (d76d4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d769c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d769e:	a801      	add	r0, sp, #4
   d76a0:	f7ff fff2 	bl	d7688 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d76a4:	6829      	ldr	r1, [r5, #0]
   d76a6:	f011 0401 	ands.w	r4, r1, #1
   d76aa:	d110      	bne.n	d76ce <_Z16_fetch_usbserialv+0x36>
   d76ac:	4628      	mov	r0, r5
   d76ae:	f7fc fd03 	bl	d40b8 <__cxa_guard_acquire>
   d76b2:	b160      	cbz	r0, d76ce <_Z16_fetch_usbserialv+0x36>
   d76b4:	aa01      	add	r2, sp, #4
   d76b6:	4621      	mov	r1, r4
   d76b8:	4807      	ldr	r0, [pc, #28]	; (d76d8 <_Z16_fetch_usbserialv+0x40>)
   d76ba:	f7ff ffcd 	bl	d7658 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d76be:	4628      	mov	r0, r5
   d76c0:	f7fc fcff 	bl	d40c2 <__cxa_guard_release>
   d76c4:	4a05      	ldr	r2, [pc, #20]	; (d76dc <_Z16_fetch_usbserialv+0x44>)
   d76c6:	4906      	ldr	r1, [pc, #24]	; (d76e0 <_Z16_fetch_usbserialv+0x48>)
   d76c8:	4803      	ldr	r0, [pc, #12]	; (d76d8 <_Z16_fetch_usbserialv+0x40>)
   d76ca:	f000 fe69 	bl	d83a0 <__aeabi_atexit>
	return _usbserial;
}
   d76ce:	4802      	ldr	r0, [pc, #8]	; (d76d8 <_Z16_fetch_usbserialv+0x40>)
   d76d0:	b007      	add	sp, #28
   d76d2:	bd30      	pop	{r4, r5, pc}
   d76d4:	2003e414 	.word	0x2003e414
   d76d8:	2003e418 	.word	0x2003e418
   d76dc:	2003dd30 	.word	0x2003dd30
   d76e0:	000d75d9 	.word	0x000d75d9

000d76e4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d76e4:	4770      	bx	lr

000d76e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d76e6:	7441      	strb	r1, [r0, #17]
   d76e8:	4770      	bx	lr

000d76ea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d76ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d76ec:	7c00      	ldrb	r0, [r0, #16]
   d76ee:	f7ff fa57 	bl	d6ba0 <HAL_USART_Available_Data_For_Write>
}
   d76f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d76f6:	bd08      	pop	{r3, pc}

000d76f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d76f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d76fa:	7c00      	ldrb	r0, [r0, #16]
   d76fc:	f7ff fa28 	bl	d6b50 <HAL_USART_Available_Data>
}
   d7700:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7704:	bd08      	pop	{r3, pc}

000d7706 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7706:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7708:	7c00      	ldrb	r0, [r0, #16]
   d770a:	f7ff fa31 	bl	d6b70 <HAL_USART_Peek_Data>
}
   d770e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7712:	bf28      	it	cs
   d7714:	f04f 30ff 	movcs.w	r0, #4294967295
   d7718:	bd08      	pop	{r3, pc}

000d771a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d771a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d771c:	7c00      	ldrb	r0, [r0, #16]
   d771e:	f7ff fa1f 	bl	d6b60 <HAL_USART_Read_Data>
}
   d7722:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7726:	bf28      	it	cs
   d7728:	f04f 30ff 	movcs.w	r0, #4294967295
   d772c:	bd08      	pop	{r3, pc}

000d772e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d772e:	7c00      	ldrb	r0, [r0, #16]
   d7730:	f7ff ba26 	b.w	d6b80 <HAL_USART_Flush_Data>

000d7734 <_ZN11USARTSerialD0Ev>:
   d7734:	b510      	push	{r4, lr}
   d7736:	2114      	movs	r1, #20
   d7738:	4604      	mov	r4, r0
   d773a:	f000 fe3f 	bl	d83bc <_ZdlPvj>
   d773e:	4620      	mov	r0, r4
   d7740:	bd10      	pop	{r4, pc}

000d7742 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7742:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7744:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7746:	4604      	mov	r4, r0
   d7748:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d774a:	b925      	cbnz	r5, d7756 <_ZN11USARTSerial5writeEh+0x14>
   d774c:	7c00      	ldrb	r0, [r0, #16]
   d774e:	f7ff fa27 	bl	d6ba0 <HAL_USART_Available_Data_For_Write>
   d7752:	2800      	cmp	r0, #0
   d7754:	dd05      	ble.n	d7762 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7756:	4631      	mov	r1, r6
   d7758:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d775a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d775e:	f7ff b9ef 	b.w	d6b40 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7762:	4628      	mov	r0, r5
   d7764:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7768 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7768:	b510      	push	{r4, lr}
   d776a:	4604      	mov	r4, r0
   d776c:	4608      	mov	r0, r1
   d776e:	4611      	mov	r1, r2
   d7770:	2200      	movs	r2, #0
   d7772:	6062      	str	r2, [r4, #4]
   d7774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7778:	60a2      	str	r2, [r4, #8]
   d777a:	4a05      	ldr	r2, [pc, #20]	; (d7790 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d777c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d777e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7780:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7782:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7784:	461a      	mov	r2, r3
   d7786:	f7ff f9d3 	bl	d6b30 <HAL_USART_Init>
}
   d778a:	4620      	mov	r0, r4
   d778c:	bd10      	pop	{r4, pc}
   d778e:	bf00      	nop
   d7790:	000d92e8 	.word	0x000d92e8

000d7794 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7794:	7c00      	ldrb	r0, [r0, #16]
   d7796:	f7ff b9fb 	b.w	d6b90 <HAL_USART_Is_Enabled>
	...

000d779c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d779c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d779e:	4d0c      	ldr	r5, [pc, #48]	; (d77d0 <_Z22__fetch_global_Serial1v+0x34>)
   d77a0:	6829      	ldr	r1, [r5, #0]
   d77a2:	f011 0401 	ands.w	r4, r1, #1
   d77a6:	d111      	bne.n	d77cc <_Z22__fetch_global_Serial1v+0x30>
   d77a8:	4628      	mov	r0, r5
   d77aa:	f7fc fc85 	bl	d40b8 <__cxa_guard_acquire>
   d77ae:	b168      	cbz	r0, d77cc <_Z22__fetch_global_Serial1v+0x30>
   d77b0:	4a08      	ldr	r2, [pc, #32]	; (d77d4 <_Z22__fetch_global_Serial1v+0x38>)
   d77b2:	4b09      	ldr	r3, [pc, #36]	; (d77d8 <_Z22__fetch_global_Serial1v+0x3c>)
   d77b4:	4809      	ldr	r0, [pc, #36]	; (d77dc <_Z22__fetch_global_Serial1v+0x40>)
   d77b6:	4621      	mov	r1, r4
   d77b8:	f7ff ffd6 	bl	d7768 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d77bc:	4628      	mov	r0, r5
   d77be:	f7fc fc80 	bl	d40c2 <__cxa_guard_release>
   d77c2:	4a07      	ldr	r2, [pc, #28]	; (d77e0 <_Z22__fetch_global_Serial1v+0x44>)
   d77c4:	4907      	ldr	r1, [pc, #28]	; (d77e4 <_Z22__fetch_global_Serial1v+0x48>)
   d77c6:	4805      	ldr	r0, [pc, #20]	; (d77dc <_Z22__fetch_global_Serial1v+0x40>)
   d77c8:	f000 fdea 	bl	d83a0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d77cc:	4803      	ldr	r0, [pc, #12]	; (d77dc <_Z22__fetch_global_Serial1v+0x40>)
   d77ce:	bd38      	pop	{r3, r4, r5, pc}
   d77d0:	2003e4c4 	.word	0x2003e4c4
   d77d4:	2003e4c8 	.word	0x2003e4c8
   d77d8:	2003e440 	.word	0x2003e440
   d77dc:	2003e42c 	.word	0x2003e42c
   d77e0:	2003dd30 	.word	0x2003dd30
   d77e4:	000d76e5 	.word	0x000d76e5

000d77e8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d77e8:	4770      	bx	lr

000d77ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d77ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77ec:	4606      	mov	r6, r0
   d77ee:	4615      	mov	r5, r2
   d77f0:	460c      	mov	r4, r1
   d77f2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d77f4:	42bc      	cmp	r4, r7
   d77f6:	d006      	beq.n	d7806 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d77f8:	6833      	ldr	r3, [r6, #0]
   d77fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d77fe:	689b      	ldr	r3, [r3, #8]
   d7800:	4630      	mov	r0, r6
   d7802:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7804:	e7f6      	b.n	d77f4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7806:	4628      	mov	r0, r5
   d7808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d780a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d780a:	2200      	movs	r2, #0
   d780c:	7c00      	ldrb	r0, [r0, #16]
   d780e:	f7ff b9e7 	b.w	d6be0 <HAL_I2C_Write_Data>

000d7812 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7812:	2100      	movs	r1, #0
   d7814:	7c00      	ldrb	r0, [r0, #16]
   d7816:	f7ff b9eb 	b.w	d6bf0 <HAL_I2C_Available_Data>

000d781a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d781a:	2100      	movs	r1, #0
   d781c:	7c00      	ldrb	r0, [r0, #16]
   d781e:	f7ff b9ef 	b.w	d6c00 <HAL_I2C_Read_Data>

000d7822 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7822:	2100      	movs	r1, #0
   d7824:	7c00      	ldrb	r0, [r0, #16]
   d7826:	f7ff b9f3 	b.w	d6c10 <HAL_I2C_Peek_Data>

000d782a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d782a:	2100      	movs	r1, #0
   d782c:	7c00      	ldrb	r0, [r0, #16]
   d782e:	f7ff b9f7 	b.w	d6c20 <HAL_I2C_Flush_Data>

000d7832 <_ZN7TwoWireD0Ev>:
   d7832:	b510      	push	{r4, lr}
   d7834:	2114      	movs	r1, #20
   d7836:	4604      	mov	r4, r0
   d7838:	f000 fdc0 	bl	d83bc <_ZdlPvj>
   d783c:	4620      	mov	r0, r4
   d783e:	bd10      	pop	{r4, pc}

000d7840 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7840:	b510      	push	{r4, lr}
   d7842:	4604      	mov	r4, r0
   d7844:	2300      	movs	r3, #0
   d7846:	6063      	str	r3, [r4, #4]
   d7848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d784c:	60a3      	str	r3, [r4, #8]
   d784e:	4b04      	ldr	r3, [pc, #16]	; (d7860 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7850:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7852:	4608      	mov	r0, r1
   d7854:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7856:	4611      	mov	r1, r2
   d7858:	f7ff f9f2 	bl	d6c40 <HAL_I2C_Init>
}
   d785c:	4620      	mov	r0, r4
   d785e:	bd10      	pop	{r4, pc}
   d7860:	000d9318 	.word	0x000d9318

000d7864 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7864:	2300      	movs	r3, #0
   d7866:	461a      	mov	r2, r3
   d7868:	4619      	mov	r1, r3
   d786a:	7c00      	ldrb	r0, [r0, #16]
   d786c:	f7ff b9a0 	b.w	d6bb0 <HAL_I2C_Begin>

000d7870 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7870:	b570      	push	{r4, r5, r6, lr}
   d7872:	460c      	mov	r4, r1
   d7874:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7876:	2514      	movs	r5, #20
   d7878:	4606      	mov	r6, r0
   d787a:	462a      	mov	r2, r5
   d787c:	2100      	movs	r1, #0
   d787e:	a801      	add	r0, sp, #4
   d7880:	f000 ff11 	bl	d86a6 <memset>
   d7884:	7823      	ldrb	r3, [r4, #0]
   d7886:	f88d 3008 	strb.w	r3, [sp, #8]
   d788a:	6863      	ldr	r3, [r4, #4]
   d788c:	9303      	str	r3, [sp, #12]
   d788e:	68e3      	ldr	r3, [r4, #12]
   d7890:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d7892:	2200      	movs	r2, #0
   d7894:	7a23      	ldrb	r3, [r4, #8]
   d7896:	7c30      	ldrb	r0, [r6, #16]
   d7898:	f8ad 5004 	strh.w	r5, [sp, #4]
   d789c:	a901      	add	r1, sp, #4
   d789e:	9305      	str	r3, [sp, #20]
   d78a0:	f7ff f9d6 	bl	d6c50 <HAL_I2C_Request_Data_Ex>
}
   d78a4:	b006      	add	sp, #24
   d78a6:	bd70      	pop	{r4, r5, r6, pc}

000d78a8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d78a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d78aa:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d78ac:	f88d 1000 	strb.w	r1, [sp]
   d78b0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d78b4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d78b6:	bf18      	it	ne
   d78b8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d78ba:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d78bc:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d78be:	f88d 3008 	strb.w	r3, [sp, #8]
   d78c2:	f7ff ffd5 	bl	d7870 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d78c6:	b005      	add	sp, #20
   d78c8:	f85d fb04 	ldr.w	pc, [sp], #4

000d78cc <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d78cc:	2301      	movs	r3, #1
   d78ce:	f7ff bfeb 	b.w	d78a8 <_ZN7TwoWire11requestFromEhjh>

000d78d2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d78d2:	2200      	movs	r2, #0
   d78d4:	7c00      	ldrb	r0, [r0, #16]
   d78d6:	f7ff b973 	b.w	d6bc0 <HAL_I2C_Begin_Transmission>

000d78da <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d78da:	b2c9      	uxtb	r1, r1
   d78dc:	f7ff bff9 	b.w	d78d2 <_ZN7TwoWire17beginTransmissionEh>

000d78e0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d78e0:	2200      	movs	r2, #0
   d78e2:	7c00      	ldrb	r0, [r0, #16]
   d78e4:	f7ff b974 	b.w	d6bd0 <HAL_I2C_End_Transmission>

000d78e8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d78e8:	2101      	movs	r1, #1
   d78ea:	f7ff bff9 	b.w	d78e0 <_ZN7TwoWire15endTransmissionEh>

000d78ee <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d78ee:	2100      	movs	r1, #0
   d78f0:	7c00      	ldrb	r0, [r0, #16]
   d78f2:	f7ff b99d 	b.w	d6c30 <HAL_I2C_Is_Enabled>

000d78f6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d78f6:	2200      	movs	r2, #0
   d78f8:	4611      	mov	r1, r2
   d78fa:	6840      	ldr	r0, [r0, #4]
   d78fc:	f7ff ba84 	b.w	d6e08 <network_listening>

000d7900 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7900:	2200      	movs	r2, #0
   d7902:	4611      	mov	r1, r2
   d7904:	6840      	ldr	r0, [r0, #4]
   d7906:	f7ff ba8f 	b.w	d6e28 <network_get_listen_timeout>

000d790a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d790a:	2200      	movs	r2, #0
   d790c:	6840      	ldr	r0, [r0, #4]
   d790e:	f7ff ba83 	b.w	d6e18 <network_set_listen_timeout>

000d7912 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7912:	2200      	movs	r2, #0
   d7914:	f081 0101 	eor.w	r1, r1, #1
   d7918:	6840      	ldr	r0, [r0, #4]
   d791a:	f7ff ba6d 	b.w	d6df8 <network_listen>

000d791e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d791e:	2300      	movs	r3, #0
   d7920:	461a      	mov	r2, r3
   d7922:	2101      	movs	r1, #1
   d7924:	6840      	ldr	r0, [r0, #4]
   d7926:	f7ff ba5f 	b.w	d6de8 <network_off>

000d792a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d792a:	2300      	movs	r3, #0
   d792c:	461a      	mov	r2, r3
   d792e:	4619      	mov	r1, r3
   d7930:	6840      	ldr	r0, [r0, #4]
   d7932:	f7ff ba51 	b.w	d6dd8 <network_on>

000d7936 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7936:	2200      	movs	r2, #0
   d7938:	4611      	mov	r1, r2
   d793a:	6840      	ldr	r0, [r0, #4]
   d793c:	f7ff ba44 	b.w	d6dc8 <network_ready>

000d7940 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7940:	2200      	movs	r2, #0
   d7942:	4611      	mov	r1, r2
   d7944:	6840      	ldr	r0, [r0, #4]
   d7946:	f7ff ba2f 	b.w	d6da8 <network_connecting>

000d794a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d794a:	2200      	movs	r2, #0
   d794c:	2102      	movs	r1, #2
   d794e:	6840      	ldr	r0, [r0, #4]
   d7950:	f7ff ba32 	b.w	d6db8 <network_disconnect>

000d7954 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7954:	2300      	movs	r3, #0
   d7956:	461a      	mov	r2, r3
   d7958:	6840      	ldr	r0, [r0, #4]
   d795a:	f7ff ba1d 	b.w	d6d98 <network_connect>

000d795e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d795e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7960:	4605      	mov	r5, r0
   d7962:	b188      	cbz	r0, d7988 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7964:	6804      	ldr	r4, [r0, #0]
   d7966:	b14c      	cbz	r4, d797c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d7968:	68a3      	ldr	r3, [r4, #8]
   d796a:	b11b      	cbz	r3, d7974 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d796c:	2203      	movs	r2, #3
   d796e:	4621      	mov	r1, r4
   d7970:	4620      	mov	r0, r4
   d7972:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7974:	2110      	movs	r1, #16
   d7976:	4620      	mov	r0, r4
   d7978:	f000 fd20 	bl	d83bc <_ZdlPvj>
   d797c:	4628      	mov	r0, r5
   d797e:	2114      	movs	r1, #20
      }
   d7980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7984:	f000 bd1a 	b.w	d83bc <_ZdlPvj>
   d7988:	bd38      	pop	{r3, r4, r5, pc}

000d798a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d798a:	b110      	cbz	r0, d7992 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d798c:	6803      	ldr	r3, [r0, #0]
   d798e:	685b      	ldr	r3, [r3, #4]
   d7990:	4718      	bx	r3
   d7992:	4770      	bx	lr

000d7994 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7994:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7996:	6803      	ldr	r3, [r0, #0]
   d7998:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d799a:	b1bb      	cbz	r3, d79cc <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d799c:	6858      	ldr	r0, [r3, #4]
   d799e:	f7ff f887 	bl	d6ab0 <os_thread_is_current>
   d79a2:	b978      	cbnz	r0, d79c4 <_ZN6ThreadD1Ev+0x30>
   d79a4:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d79a6:	7c5a      	ldrb	r2, [r3, #17]
   d79a8:	b912      	cbnz	r2, d79b0 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d79aa:	6858      	ldr	r0, [r3, #4]
   d79ac:	f7ff f888 	bl	d6ac0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d79b0:	6823      	ldr	r3, [r4, #0]
   d79b2:	6858      	ldr	r0, [r3, #4]
   d79b4:	f7ff f88c 	bl	d6ad0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d79b8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d79ba:	2300      	movs	r3, #0
   d79bc:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d79be:	b128      	cbz	r0, d79cc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d79c0:	f7ff ffcd 	bl	d795e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d79c4:	6820      	ldr	r0, [r4, #0]
   d79c6:	b108      	cbz	r0, d79cc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d79c8:	f7ff ffc9 	bl	d795e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d79cc:	4620      	mov	r0, r4
   d79ce:	bd10      	pop	{r4, pc}

000d79d0 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d79d0:	b538      	push	{r3, r4, r5, lr}
   d79d2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d79d4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d79d8:	b108      	cbz	r0, d79de <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d79da:	f7fc fb60 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d79de:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d79e2:	b108      	cbz	r0, d79e8 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d79e4:	f7ff f884 	bl	d6af0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d79e8:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d79ec:	b135      	cbz	r5, d79fc <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d79ee:	4628      	mov	r0, r5
   d79f0:	f7ff ffd0 	bl	d7994 <_ZN6ThreadD1Ev>
   d79f4:	2104      	movs	r1, #4
   d79f6:	4628      	mov	r0, r5
   d79f8:	f000 fce0 	bl	d83bc <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d79fc:	6820      	ldr	r0, [r4, #0]
   d79fe:	b108      	cbz	r0, d7a04 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7a00:	f7ff ffc3 	bl	d798a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7a04:	4620      	mov	r0, r4
   d7a06:	bd38      	pop	{r3, r4, r5, pc}

000d7a08 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7a08:	b510      	push	{r4, lr}
   d7a0a:	4b04      	ldr	r3, [pc, #16]	; (d7a1c <_ZN5spark9MeshClassD1Ev+0x14>)
   d7a0c:	4604      	mov	r4, r0
   d7a0e:	f840 3b08 	str.w	r3, [r0], #8
   d7a12:	f7ff ffdd 	bl	d79d0 <_ZN5spark11MeshPublishD1Ev>
   d7a16:	4620      	mov	r0, r4
   d7a18:	bd10      	pop	{r4, pc}
   d7a1a:	bf00      	nop
   d7a1c:	000d9340 	.word	0x000d9340

000d7a20 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7a20:	b538      	push	{r3, r4, r5, lr}
   d7a22:	4c0e      	ldr	r4, [pc, #56]	; (d7a5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7a24:	4b0e      	ldr	r3, [pc, #56]	; (d7a60 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7a26:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7a28:	2500      	movs	r5, #0
   d7a2a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7a2c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7a30:	6063      	str	r3, [r4, #4]
   d7a32:	60a5      	str	r5, [r4, #8]
   d7a34:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7a38:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7a3c:	f7ff f850 	bl	d6ae0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7a40:	4b08      	ldr	r3, [pc, #32]	; (d7a64 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7a42:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7a46:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7a4a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7a4c:	4620      	mov	r0, r4
   d7a4e:	4a06      	ldr	r2, [pc, #24]	; (d7a68 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7a50:	4906      	ldr	r1, [pc, #24]	; (d7a6c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7a56:	f000 bca3 	b.w	d83a0 <__aeabi_atexit>
   d7a5a:	bf00      	nop
   d7a5c:	2003e54c 	.word	0x2003e54c
   d7a60:	000d9428 	.word	0x000d9428
   d7a64:	000d9340 	.word	0x000d9340
   d7a68:	2003dd30 	.word	0x2003dd30
   d7a6c:	000d7a09 	.word	0x000d7a09

000d7a70 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7a72:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7a74:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7a76:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7a7a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7a7c:	2201      	movs	r2, #1
   d7a7e:	f04f 33ff 	mov.w	r3, #4294967295
   d7a82:	4621      	mov	r1, r4
   d7a84:	47a8      	blx	r5
}
   d7a86:	b003      	add	sp, #12
   d7a88:	bd30      	pop	{r4, r5, pc}

000d7a8a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7a8a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7a8c:	6803      	ldr	r3, [r0, #0]
   d7a8e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7a90:	f04f 33ff 	mov.w	r3, #4294967295
   d7a94:	46a4      	mov	ip, r4
}
   d7a96:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7a9a:	4760      	bx	ip

000d7a9c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7a9e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7aa0:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7aa2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7aa6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7aa8:	4621      	mov	r1, r4
   d7aaa:	4613      	mov	r3, r2
   d7aac:	2201      	movs	r2, #1
   d7aae:	47a8      	blx	r5
}
   d7ab0:	b003      	add	sp, #12
   d7ab2:	bd30      	pop	{r4, r5, pc}

000d7ab4 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7ab4:	4770      	bx	lr

000d7ab6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7ab6:	b538      	push	{r3, r4, r5, lr}
   d7ab8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7aba:	681a      	ldr	r2, [r3, #0]
   d7abc:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7abe:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7ac0:	da05      	bge.n	d7ace <_ZN9TCPClient9connectedEv+0x18>
   d7ac2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7ac6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7aca:	429a      	cmp	r2, r3
   d7acc:	d001      	beq.n	d7ad2 <_ZN9TCPClient9connectedEv+0x1c>
   d7ace:	2501      	movs	r5, #1
   d7ad0:	e00b      	b.n	d7aea <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7ad2:	6803      	ldr	r3, [r0, #0]
   d7ad4:	691b      	ldr	r3, [r3, #16]
   d7ad6:	4798      	blx	r3
   d7ad8:	2800      	cmp	r0, #0
   d7ada:	bf14      	ite	ne
   d7adc:	2501      	movne	r5, #1
   d7ade:	2500      	moveq	r5, #0
        if (!rv) {
   d7ae0:	d103      	bne.n	d7aea <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7ae2:	6823      	ldr	r3, [r4, #0]
   d7ae4:	4620      	mov	r0, r4
   d7ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7ae8:	4798      	blx	r3
        }
    }
    return rv;
}
   d7aea:	4628      	mov	r0, r5
   d7aec:	bd38      	pop	{r3, r4, r5, pc}

000d7aee <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7aee:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7af0:	6818      	ldr	r0, [r3, #0]
}
   d7af2:	43c0      	mvns	r0, r0
   d7af4:	0fc0      	lsrs	r0, r0, #31
   d7af6:	4770      	bx	lr

000d7af8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7af8:	4770      	bx	lr

000d7afa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7afa:	2000      	movs	r0, #0
   d7afc:	4770      	bx	lr

000d7afe <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7afe:	b510      	push	{r4, lr}
   d7b00:	2114      	movs	r1, #20
   d7b02:	4604      	mov	r4, r0
   d7b04:	f000 fc5a 	bl	d83bc <_ZdlPvj>
   d7b08:	4620      	mov	r0, r4
   d7b0a:	bd10      	pop	{r4, pc}

000d7b0c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7b0c:	f7fc bac5 	b.w	d409a <_ZdlPv>

000d7b10 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7b10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7b12:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7b14:	2200      	movs	r2, #0
   d7b16:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7b18:	9202      	str	r2, [sp, #8]
   d7b1a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7b1c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7b1e:	4604      	mov	r4, r0
   d7b20:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7b22:	d008      	beq.n	d7b36 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7b28:	fbb3 f1f2 	udiv	r1, r3, r2
   d7b2c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7b2e:	fb02 3111 	mls	r1, r2, r1, r3
   d7b32:	434a      	muls	r2, r1
   d7b34:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7b36:	6960      	ldr	r0, [r4, #20]
   d7b38:	2308      	movs	r3, #8
   d7b3a:	9300      	str	r3, [sp, #0]
   d7b3c:	f241 0205 	movw	r2, #4101	; 0x1005
   d7b40:	446b      	add	r3, sp
   d7b42:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7b46:	6800      	ldr	r0, [r0, #0]
   d7b48:	f7ff f88a 	bl	d6c60 <sock_setsockopt>
    if (ret < 0) {
   d7b4c:	2800      	cmp	r0, #0
   d7b4e:	db08      	blt.n	d7b62 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7b50:	6960      	ldr	r0, [r4, #20]
   d7b52:	2300      	movs	r3, #0
   d7b54:	4632      	mov	r2, r6
   d7b56:	4629      	mov	r1, r5
   d7b58:	6800      	ldr	r0, [r0, #0]
   d7b5a:	f7ff f8a1 	bl	d6ca0 <sock_send>
    if (ret < 0) {
   d7b5e:	2800      	cmp	r0, #0
   d7b60:	da04      	bge.n	d7b6c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7b62:	f7ff f991 	bl	d6e88 <__errno>
   d7b66:	6803      	ldr	r3, [r0, #0]
   d7b68:	6063      	str	r3, [r4, #4]
   d7b6a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d7b6c:	b004      	add	sp, #16
   d7b6e:	bd70      	pop	{r4, r5, r6, pc}

000d7b70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7b70:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7b72:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7b74:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7b76:	689b      	ldr	r3, [r3, #8]
   d7b78:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7b7a:	68a3      	ldr	r3, [r4, #8]
   d7b7c:	3b01      	subs	r3, #1
   d7b7e:	60a3      	str	r3, [r4, #8]
   d7b80:	b92b      	cbnz	r3, d7b8e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d7b82:	6823      	ldr	r3, [r4, #0]
   d7b84:	4620      	mov	r0, r4
   d7b86:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d7b8c:	4718      	bx	r3
   d7b8e:	bd10      	pop	{r4, pc}

000d7b90 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7b90:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7b92:	4604      	mov	r4, r0
   d7b94:	694d      	ldr	r5, [r1, #20]
   d7b96:	4b05      	ldr	r3, [pc, #20]	; (d7bac <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7b98:	f844 3b04 	str.w	r3, [r4], #4
   d7b9c:	358c      	adds	r5, #140	; 0x8c
   d7b9e:	4606      	mov	r6, r0
   d7ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ba4:	682b      	ldr	r3, [r5, #0]
   d7ba6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7ba8:	4630      	mov	r0, r6
   d7baa:	bd70      	pop	{r4, r5, r6, pc}
   d7bac:	000d92a4 	.word	0x000d92a4

000d7bb0 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7bb0:	b510      	push	{r4, lr}
   d7bb2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7bb4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7bb8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7bbc:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7bbe:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7bc0:	d005      	beq.n	d7bce <_ZN9TCPClient4peekEv+0x1e>
   d7bc2:	6962      	ldr	r2, [r4, #20]
   d7bc4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7bc8:	4413      	add	r3, r2
   d7bca:	7918      	ldrb	r0, [r3, #4]
   d7bcc:	bd10      	pop	{r4, pc}
   d7bce:	6803      	ldr	r3, [r0, #0]
   d7bd0:	691b      	ldr	r3, [r3, #16]
   d7bd2:	4798      	blx	r3
   d7bd4:	2800      	cmp	r0, #0
   d7bd6:	d1f4      	bne.n	d7bc2 <_ZN9TCPClient4peekEv+0x12>
   d7bd8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7bdc:	bd10      	pop	{r4, pc}

000d7bde <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7bde:	b510      	push	{r4, lr}
   d7be0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7be2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7be6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7bea:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7bec:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7bee:	d008      	beq.n	d7c02 <_ZN9TCPClient4readEv+0x24>
   d7bf0:	6962      	ldr	r2, [r4, #20]
   d7bf2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7bf6:	1c59      	adds	r1, r3, #1
   d7bf8:	4413      	add	r3, r2
   d7bfa:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d7bfe:	7918      	ldrb	r0, [r3, #4]
   d7c00:	bd10      	pop	{r4, pc}
   d7c02:	6803      	ldr	r3, [r0, #0]
   d7c04:	691b      	ldr	r3, [r3, #16]
   d7c06:	4798      	blx	r3
   d7c08:	2800      	cmp	r0, #0
   d7c0a:	d1f1      	bne.n	d7bf0 <_ZN9TCPClient4readEv+0x12>
   d7c0c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7c10:	bd10      	pop	{r4, pc}

000d7c12 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c14:	6943      	ldr	r3, [r0, #20]
   d7c16:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7c18:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7c1c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7c20:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7c22:	4605      	mov	r5, r0
   d7c24:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7c26:	d106      	bne.n	d7c36 <_ZN9TCPClient4readEPhj+0x24>
   d7c28:	6803      	ldr	r3, [r0, #0]
   d7c2a:	691b      	ldr	r3, [r3, #16]
   d7c2c:	4798      	blx	r3
   d7c2e:	b910      	cbnz	r0, d7c36 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7c30:	f04f 34ff 	mov.w	r4, #4294967295
   d7c34:	e014      	b.n	d7c60 <_ZN9TCPClient4readEPhj+0x4e>
   d7c36:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7c38:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7c3c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7c40:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7c42:	42bc      	cmp	r4, r7
   d7c44:	bf28      	it	cs
   d7c46:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7c48:	4419      	add	r1, r3
   d7c4a:	4622      	mov	r2, r4
   d7c4c:	3104      	adds	r1, #4
   d7c4e:	4630      	mov	r0, r6
   d7c50:	f000 fd1e 	bl	d8690 <memcpy>
   d7c54:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7c56:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7c5a:	4423      	add	r3, r4
   d7c5c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7c60:	4620      	mov	r0, r4
   d7c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c64 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7c68:	4698      	mov	r8, r3
    stop();
   d7c6a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7c6c:	b093      	sub	sp, #76	; 0x4c
    stop();
   d7c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7c70:	460d      	mov	r5, r1
   d7c72:	4606      	mov	r6, r0
   d7c74:	4617      	mov	r7, r2
    stop();
   d7c76:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d7c78:	ab12      	add	r3, sp, #72	; 0x48
   d7c7a:	2400      	movs	r4, #0
   d7c7c:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7c80:	4622      	mov	r2, r4
   d7c82:	4621      	mov	r1, r4
   d7c84:	4628      	mov	r0, r5
   d7c86:	f7fe fe43 	bl	d6910 <netdb_getaddrinfo>
   d7c8a:	4681      	mov	r9, r0
   d7c8c:	2800      	cmp	r0, #0
   d7c8e:	d13d      	bne.n	d7d0c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7c90:	9b00      	ldr	r3, [sp, #0]
   d7c92:	2b00      	cmp	r3, #0
   d7c94:	d056      	beq.n	d7d44 <_ZN9TCPClient7connectEPKctm+0xe0>
   d7c96:	695b      	ldr	r3, [r3, #20]
   d7c98:	2b00      	cmp	r3, #0
   d7c9a:	d053      	beq.n	d7d44 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d7c9c:	a806      	add	r0, sp, #24
   d7c9e:	f7ff fc4b 	bl	d7538 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7ca2:	9b00      	ldr	r3, [sp, #0]
   d7ca4:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7ca6:	7863      	ldrb	r3, [r4, #1]
   d7ca8:	2b02      	cmp	r3, #2
   d7caa:	d101      	bne.n	d7cb0 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7cac:	1d21      	adds	r1, r4, #4
   d7cae:	e013      	b.n	d7cd8 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7cb0:	2b0a      	cmp	r3, #10
   d7cb2:	d114      	bne.n	d7cde <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7cb4:	2211      	movs	r2, #17
   d7cb6:	4649      	mov	r1, r9
   d7cb8:	a801      	add	r0, sp, #4
   d7cba:	f000 fcf4 	bl	d86a6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7cbe:	68a3      	ldr	r3, [r4, #8]
   d7cc0:	bb33      	cbnz	r3, d7d10 <_ZN9TCPClient7connectEPKctm+0xac>
   d7cc2:	68e3      	ldr	r3, [r4, #12]
   d7cc4:	bb23      	cbnz	r3, d7d10 <_ZN9TCPClient7connectEPKctm+0xac>
   d7cc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7cca:	6925      	ldr	r5, [r4, #16]
   d7ccc:	f7fe ff20 	bl	d6b10 <inet_htonl>
   d7cd0:	4285      	cmp	r5, r0
   d7cd2:	d11d      	bne.n	d7d10 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7cd4:	f104 0114 	add.w	r1, r4, #20
   d7cd8:	a806      	add	r0, sp, #24
   d7cda:	f7ff fc70 	bl	d75be <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7cde:	a806      	add	r0, sp, #24
   d7ce0:	f7ff fc4a 	bl	d7578 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7ce4:	2800      	cmp	r0, #0
   d7ce6:	d02d      	beq.n	d7d44 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7ce8:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7cea:	ad07      	add	r5, sp, #28
   d7cec:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7cf0:	4b18      	ldr	r3, [pc, #96]	; (d7d54 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d7cf2:	930c      	str	r3, [sp, #48]	; 0x30
   d7cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7cf6:	ac0d      	add	r4, sp, #52	; 0x34
   d7cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7cfa:	682b      	ldr	r3, [r5, #0]
   d7cfc:	7023      	strb	r3, [r4, #0]
   d7cfe:	463a      	mov	r2, r7
   d7d00:	4643      	mov	r3, r8
   d7d02:	a90c      	add	r1, sp, #48	; 0x30
   d7d04:	4630      	mov	r0, r6
   d7d06:	47c8      	blx	r9
   d7d08:	4681      	mov	r9, r0
   d7d0a:	e01b      	b.n	d7d44 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7d0c:	46a1      	mov	r9, r4
   d7d0e:	e019      	b.n	d7d44 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7d10:	f104 0308 	add.w	r3, r4, #8
   d7d14:	ad01      	add	r5, sp, #4
   d7d16:	3418      	adds	r4, #24
   d7d18:	6818      	ldr	r0, [r3, #0]
   d7d1a:	6859      	ldr	r1, [r3, #4]
   d7d1c:	462a      	mov	r2, r5
   d7d1e:	c203      	stmia	r2!, {r0, r1}
   d7d20:	3308      	adds	r3, #8
   d7d22:	42a3      	cmp	r3, r4
   d7d24:	4615      	mov	r5, r2
   d7d26:	d1f7      	bne.n	d7d18 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7d28:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7d2a:	a901      	add	r1, sp, #4
   d7d2c:	a80c      	add	r0, sp, #48	; 0x30
   d7d2e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7d30:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7d34:	f7ff fc0e 	bl	d7554 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d3a:	ac07      	add	r4, sp, #28
   d7d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d3e:	682b      	ldr	r3, [r5, #0]
   d7d40:	7023      	strb	r3, [r4, #0]
   d7d42:	e7cc      	b.n	d7cde <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7d44:	9800      	ldr	r0, [sp, #0]
   d7d46:	f7fe fddb 	bl	d6900 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d7d4a:	4648      	mov	r0, r9
   d7d4c:	b013      	add	sp, #76	; 0x4c
   d7d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7d52:	bf00      	nop
   d7d54:	000d92a4 	.word	0x000d92a4

000d7d58 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7d58:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7d5a:	2300      	movs	r3, #0
   d7d5c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7d60:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7d62:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7d66:	4770      	bx	lr

000d7d68 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7d6c:	461e      	mov	r6, r3
    stop();
   d7d6e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7d70:	460c      	mov	r4, r1
   d7d72:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7d76:	4605      	mov	r5, r0
   d7d78:	4617      	mov	r7, r2
    stop();
   d7d7a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7d7c:	7d23      	ldrb	r3, [r4, #20]
   d7d7e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7d82:	2b04      	cmp	r3, #4
   d7d84:	bf0c      	ite	eq
   d7d86:	2002      	moveq	r0, #2
   d7d88:	200a      	movne	r0, #10
   d7d8a:	2206      	movs	r2, #6
   d7d8c:	2101      	movs	r1, #1
   d7d8e:	f7fe ff8f 	bl	d6cb0 <sock_socket>
   d7d92:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7d96:	696b      	ldr	r3, [r5, #20]
   d7d98:	681b      	ldr	r3, [r3, #0]
   d7d9a:	2b00      	cmp	r3, #0
   d7d9c:	db18      	blt.n	d7dd0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d7d9e:	4628      	mov	r0, r5
   d7da0:	f7ff ffda 	bl	d7d58 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7da4:	b1d6      	cbz	r6, d7ddc <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d7da6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7da8:	a903      	add	r1, sp, #12
   d7daa:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7dac:	9303      	str	r3, [sp, #12]
   d7dae:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7db2:	f7fe fe55 	bl	d6a60 <if_index_to_name>
   d7db6:	b958      	cbnz	r0, d7dd0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7db8:	6968      	ldr	r0, [r5, #20]
   d7dba:	2306      	movs	r3, #6
   d7dbc:	9300      	str	r3, [sp, #0]
   d7dbe:	f241 020b 	movw	r2, #4107	; 0x100b
   d7dc2:	ab03      	add	r3, sp, #12
   d7dc4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7dc8:	6800      	ldr	r0, [r0, #0]
   d7dca:	f7fe ff49 	bl	d6c60 <sock_setsockopt>
   d7dce:	b128      	cbz	r0, d7ddc <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7dd0:	682b      	ldr	r3, [r5, #0]
   d7dd2:	4628      	mov	r0, r5
   d7dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7dd6:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7dd8:	4798      	blx	r3
   d7dda:	e03b      	b.n	d7e54 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7ddc:	261c      	movs	r6, #28
   d7dde:	4632      	mov	r2, r6
   d7de0:	2100      	movs	r1, #0
   d7de2:	a803      	add	r0, sp, #12
   d7de4:	f000 fc5f 	bl	d86a6 <memset>
    if (ip.version() == 4) {
   d7de8:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7dea:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d7dee:	2b04      	cmp	r3, #4
   d7df0:	d10c      	bne.n	d7e0c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7df2:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7df4:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7df6:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7dfa:	f7fe fe91 	bl	d6b20 <inet_htons>
   d7dfe:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7e02:	6860      	ldr	r0, [r4, #4]
   d7e04:	f7fe fe84 	bl	d6b10 <inet_htonl>
   d7e08:	9004      	str	r0, [sp, #16]
   d7e0a:	e013      	b.n	d7e34 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7e0c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7e0e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7e10:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7e14:	f7fe fe84 	bl	d6b20 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7e18:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7e1a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7e1e:	1d23      	adds	r3, r4, #4
   d7e20:	f104 0714 	add.w	r7, r4, #20
   d7e24:	6818      	ldr	r0, [r3, #0]
   d7e26:	6859      	ldr	r1, [r3, #4]
   d7e28:	4632      	mov	r2, r6
   d7e2a:	c203      	stmia	r2!, {r0, r1}
   d7e2c:	3308      	adds	r3, #8
   d7e2e:	42bb      	cmp	r3, r7
   d7e30:	4616      	mov	r6, r2
   d7e32:	d1f7      	bne.n	d7e24 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7e34:	696b      	ldr	r3, [r5, #20]
   d7e36:	221c      	movs	r2, #28
   d7e38:	a903      	add	r1, sp, #12
   d7e3a:	6818      	ldr	r0, [r3, #0]
   d7e3c:	f7fe ff20 	bl	d6c80 <sock_connect>
   d7e40:	2800      	cmp	r0, #0
   d7e42:	d1c5      	bne.n	d7dd0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7e44:	3404      	adds	r4, #4
   d7e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7e48:	696d      	ldr	r5, [r5, #20]
   d7e4a:	358c      	adds	r5, #140	; 0x8c
   d7e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7e4e:	6823      	ldr	r3, [r4, #0]
   d7e50:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d7e52:	2401      	movs	r4, #1
}
   d7e54:	4620      	mov	r0, r4
   d7e56:	b00a      	add	sp, #40	; 0x28
   d7e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7e5c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7e5c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7e5e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7e60:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7e62:	6818      	ldr	r0, [r3, #0]
   d7e64:	2800      	cmp	r0, #0
   d7e66:	db01      	blt.n	d7e6c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7e68:	f7fe ff02 	bl	d6c70 <sock_close>
   d7e6c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7e6e:	f04f 32ff 	mov.w	r2, #4294967295
   d7e72:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7e74:	6960      	ldr	r0, [r4, #20]
   d7e76:	2211      	movs	r2, #17
   d7e78:	2100      	movs	r1, #0
   d7e7a:	308c      	adds	r0, #140	; 0x8c
   d7e7c:	f000 fc13 	bl	d86a6 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7e80:	4620      	mov	r0, r4
}
   d7e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7e86:	f7ff bf67 	b.w	d7d58 <_ZN9TCPClient12flush_bufferEv>
	...

000d7e8c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7e8c:	b530      	push	{r4, r5, lr}
   d7e8e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7e90:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7e94:	b08b      	sub	sp, #44	; 0x2c
   d7e96:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7e98:	b11b      	cbz	r3, d7ea2 <_ZN9TCPClient9availableEv+0x16>
   d7e9a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7e9e:	429a      	cmp	r2, r3
   d7ea0:	d040      	beq.n	d7f24 <_ZN9TCPClient9availableEv+0x98>
   d7ea2:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7ea4:	6818      	ldr	r0, [r3, #0]
   d7ea6:	2800      	cmp	r0, #0
   d7ea8:	db3f      	blt.n	d7f2a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7eaa:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7eae:	2d7f      	cmp	r5, #127	; 0x7f
   d7eb0:	d83b      	bhi.n	d7f2a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7eb2:	1d19      	adds	r1, r3, #4
   d7eb4:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7eb8:	2308      	movs	r3, #8
   d7eba:	4429      	add	r1, r5
   d7ebc:	f7fe fee8 	bl	d6c90 <sock_recv>
            if (ret > 0) {
   d7ec0:	2800      	cmp	r0, #0
   d7ec2:	dd0c      	ble.n	d7ede <_ZN9TCPClient9availableEv+0x52>
   d7ec4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7ec6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7eca:	b90a      	cbnz	r2, d7ed0 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7ecc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7ed0:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7ed2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7ed6:	4418      	add	r0, r3
   d7ed8:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7edc:	e025      	b.n	d7f2a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7ede:	f7fe ffd3 	bl	d6e88 <__errno>
   d7ee2:	6803      	ldr	r3, [r0, #0]
   d7ee4:	2b0b      	cmp	r3, #11
   d7ee6:	d020      	beq.n	d7f2a <_ZN9TCPClient9availableEv+0x9e>
   d7ee8:	f7fe ffce 	bl	d6e88 <__errno>
   d7eec:	6803      	ldr	r3, [r0, #0]
   d7eee:	2b0b      	cmp	r3, #11
   d7ef0:	d01b      	beq.n	d7f2a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7ef2:	2320      	movs	r3, #32
   d7ef4:	2500      	movs	r5, #0
   d7ef6:	9302      	str	r3, [sp, #8]
   d7ef8:	9503      	str	r5, [sp, #12]
   d7efa:	f7fe ffc5 	bl	d6e88 <__errno>
   d7efe:	6803      	ldr	r3, [r0, #0]
   d7f00:	9301      	str	r3, [sp, #4]
   d7f02:	4b0e      	ldr	r3, [pc, #56]	; (d7f3c <_ZN9TCPClient9availableEv+0xb0>)
   d7f04:	9300      	str	r3, [sp, #0]
   d7f06:	aa02      	add	r2, sp, #8
   d7f08:	462b      	mov	r3, r5
   d7f0a:	490d      	ldr	r1, [pc, #52]	; (d7f40 <_ZN9TCPClient9availableEv+0xb4>)
   d7f0c:	2032      	movs	r0, #50	; 0x32
   d7f0e:	f7fe ff17 	bl	d6d40 <log_message>
                    sock_close(d_->sock);
   d7f12:	6963      	ldr	r3, [r4, #20]
   d7f14:	6818      	ldr	r0, [r3, #0]
   d7f16:	f7fe feab 	bl	d6c70 <sock_close>
   d7f1a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7f1c:	f04f 32ff 	mov.w	r2, #4294967295
   d7f20:	601a      	str	r2, [r3, #0]
   d7f22:	e002      	b.n	d7f2a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7f24:	f7ff ff18 	bl	d7d58 <_ZN9TCPClient12flush_bufferEv>
   d7f28:	e7bb      	b.n	d7ea2 <_ZN9TCPClient9availableEv+0x16>
   d7f2a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7f2c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7f30:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7f34:	1a18      	subs	r0, r3, r0
}
   d7f36:	b00b      	add	sp, #44	; 0x2c
   d7f38:	bd30      	pop	{r4, r5, pc}
   d7f3a:	bf00      	nop
   d7f3c:	000d93db 	.word	0x000d93db
   d7f40:	000d93d4 	.word	0x000d93d4

000d7f44 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7f44:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7f46:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7f48:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d7f4a:	6001      	str	r1, [r0, #0]
   d7f4c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7f50:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7f54:	3088      	adds	r0, #136	; 0x88
   d7f56:	f7ff faef 	bl	d7538 <_ZN9IPAddressC1Ev>
}
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	bd10      	pop	{r4, pc}
	...

000d7f60 <_ZN9TCPClientC1Ei>:
   d7f60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7f64:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7f66:	2300      	movs	r3, #0
   d7f68:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d7f6a:	4a14      	ldr	r2, [pc, #80]	; (d7fbc <_ZN9TCPClientC1Ei+0x5c>)
   d7f6c:	6043      	str	r3, [r0, #4]
   d7f6e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7f70:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7f72:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7f74:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7f76:	20a0      	movs	r0, #160	; 0xa0
   d7f78:	460e      	mov	r6, r1
   d7f7a:	f7fc f88c 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7f7e:	4605      	mov	r5, r0
   d7f80:	b110      	cbz	r0, d7f88 <_ZN9TCPClientC1Ei+0x28>
   d7f82:	4631      	mov	r1, r6
   d7f84:	f7ff ffde 	bl	d7f44 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7f88:	2014      	movs	r0, #20
   d7f8a:	f7fc f884 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7f8e:	4603      	mov	r3, r0
   d7f90:	b128      	cbz	r0, d7f9e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7f92:	2201      	movs	r2, #1
   d7f94:	6042      	str	r2, [r0, #4]
   d7f96:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7f98:	4a09      	ldr	r2, [pc, #36]	; (d7fc0 <_ZN9TCPClientC1Ei+0x60>)
   d7f9a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7f9c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7f9e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7fa0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7fa2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7fa4:	b128      	cbz	r0, d7fb2 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7fa6:	6843      	ldr	r3, [r0, #4]
   d7fa8:	3b01      	subs	r3, #1
   d7faa:	6043      	str	r3, [r0, #4]
   d7fac:	b90b      	cbnz	r3, d7fb2 <_ZN9TCPClientC1Ei+0x52>
   d7fae:	f7ff fddf 	bl	d7b70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d7fb2:	4620      	mov	r0, r4
   d7fb4:	f7ff fed0 	bl	d7d58 <_ZN9TCPClient12flush_bufferEv>
}
   d7fb8:	4620      	mov	r0, r4
   d7fba:	bd70      	pop	{r4, r5, r6, pc}
   d7fbc:	000d9390 	.word	0x000d9390
   d7fc0:	000d9374 	.word	0x000d9374

000d7fc4 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7fc4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7fc6:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7fca:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7fcc:	f7ff ffc8 	bl	d7f60 <_ZN9TCPClientC1Ei>
}
   d7fd0:	4620      	mov	r0, r4
   d7fd2:	bd10      	pop	{r4, pc}

000d7fd4 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7fd4:	b510      	push	{r4, lr}
   d7fd6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7fd8:	6800      	ldr	r0, [r0, #0]
   d7fda:	2800      	cmp	r0, #0
   d7fdc:	db01      	blt.n	d7fe2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7fde:	f7fe fe47 	bl	d6c70 <sock_close>
    }
}
   d7fe2:	4620      	mov	r0, r4
   d7fe4:	bd10      	pop	{r4, pc}

000d7fe6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7fe6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7fe8:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d7fea:	4620      	mov	r0, r4
   d7fec:	f7ff fff2 	bl	d7fd4 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7ff0:	b124      	cbz	r4, d7ffc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7ff2:	4620      	mov	r0, r4
   d7ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7ff8:	f7fc b84f 	b.w	d409a <_ZdlPv>
   d7ffc:	bd10      	pop	{r4, pc}

000d7ffe <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7ffe:	2200      	movs	r2, #0
   d8000:	4611      	mov	r1, r2
   d8002:	6840      	ldr	r0, [r0, #4]
   d8004:	f7fe bee0 	b.w	d6dc8 <network_ready>

000d8008 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8008:	2200      	movs	r2, #0
   d800a:	4611      	mov	r1, r2
   d800c:	6840      	ldr	r0, [r0, #4]
   d800e:	f7fe befb 	b.w	d6e08 <network_listening>

000d8012 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8012:	2200      	movs	r2, #0
   d8014:	4611      	mov	r1, r2
   d8016:	6840      	ldr	r0, [r0, #4]
   d8018:	f7fe bf06 	b.w	d6e28 <network_get_listen_timeout>

000d801c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d801c:	2200      	movs	r2, #0
   d801e:	6840      	ldr	r0, [r0, #4]
   d8020:	f7fe befa 	b.w	d6e18 <network_set_listen_timeout>

000d8024 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8024:	2200      	movs	r2, #0
   d8026:	f081 0101 	eor.w	r1, r1, #1
   d802a:	6840      	ldr	r0, [r0, #4]
   d802c:	f7fe bee4 	b.w	d6df8 <network_listen>

000d8030 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8030:	2300      	movs	r3, #0
   d8032:	461a      	mov	r2, r3
   d8034:	4619      	mov	r1, r3
   d8036:	6840      	ldr	r0, [r0, #4]
   d8038:	f7fe bed6 	b.w	d6de8 <network_off>

000d803c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d803c:	2300      	movs	r3, #0
   d803e:	461a      	mov	r2, r3
   d8040:	4619      	mov	r1, r3
   d8042:	6840      	ldr	r0, [r0, #4]
   d8044:	f7fe bec8 	b.w	d6dd8 <network_on>

000d8048 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8048:	2200      	movs	r2, #0
   d804a:	4611      	mov	r1, r2
   d804c:	6840      	ldr	r0, [r0, #4]
   d804e:	f7fe beab 	b.w	d6da8 <network_connecting>

000d8052 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8052:	2200      	movs	r2, #0
   d8054:	2102      	movs	r1, #2
   d8056:	6840      	ldr	r0, [r0, #4]
   d8058:	f7fe beae 	b.w	d6db8 <network_disconnect>

000d805c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d805c:	2300      	movs	r3, #0
   d805e:	461a      	mov	r2, r3
   d8060:	6840      	ldr	r0, [r0, #4]
   d8062:	f7fe be99 	b.w	d6d98 <network_connect>
	...

000d8068 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8068:	4b02      	ldr	r3, [pc, #8]	; (d8074 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d806a:	2204      	movs	r2, #4
   d806c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d806e:	4a02      	ldr	r2, [pc, #8]	; (d8078 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8070:	601a      	str	r2, [r3, #0]
   d8072:	4770      	bx	lr
   d8074:	2003e720 	.word	0x2003e720
   d8078:	000d93f4 	.word	0x000d93f4

000d807c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d807c:	2300      	movs	r3, #0
   d807e:	461a      	mov	r2, r3
   d8080:	6840      	ldr	r0, [r0, #4]
   d8082:	f7fe be89 	b.w	d6d98 <network_connect>

000d8086 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8086:	2200      	movs	r2, #0
   d8088:	2102      	movs	r1, #2
   d808a:	6840      	ldr	r0, [r0, #4]
   d808c:	f7fe be94 	b.w	d6db8 <network_disconnect>

000d8090 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8090:	2200      	movs	r2, #0
   d8092:	4611      	mov	r1, r2
   d8094:	6840      	ldr	r0, [r0, #4]
   d8096:	f7fe be87 	b.w	d6da8 <network_connecting>

000d809a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d809a:	2200      	movs	r2, #0
   d809c:	4611      	mov	r1, r2
   d809e:	6840      	ldr	r0, [r0, #4]
   d80a0:	f7fe be92 	b.w	d6dc8 <network_ready>

000d80a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d80a4:	2300      	movs	r3, #0
   d80a6:	461a      	mov	r2, r3
   d80a8:	4619      	mov	r1, r3
   d80aa:	6840      	ldr	r0, [r0, #4]
   d80ac:	f7fe be94 	b.w	d6dd8 <network_on>

000d80b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d80b0:	2300      	movs	r3, #0
   d80b2:	461a      	mov	r2, r3
   d80b4:	4619      	mov	r1, r3
   d80b6:	6840      	ldr	r0, [r0, #4]
   d80b8:	f7fe be96 	b.w	d6de8 <network_off>

000d80bc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d80bc:	2200      	movs	r2, #0
   d80be:	f081 0101 	eor.w	r1, r1, #1
   d80c2:	6840      	ldr	r0, [r0, #4]
   d80c4:	f7fe be98 	b.w	d6df8 <network_listen>

000d80c8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d80c8:	2200      	movs	r2, #0
   d80ca:	6840      	ldr	r0, [r0, #4]
   d80cc:	f7fe bea4 	b.w	d6e18 <network_set_listen_timeout>

000d80d0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d80d0:	2200      	movs	r2, #0
   d80d2:	4611      	mov	r1, r2
   d80d4:	6840      	ldr	r0, [r0, #4]
   d80d6:	f7fe bea7 	b.w	d6e28 <network_get_listen_timeout>

000d80da <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d80da:	2200      	movs	r2, #0
   d80dc:	4611      	mov	r1, r2
   d80de:	6840      	ldr	r0, [r0, #4]
   d80e0:	f7fe be92 	b.w	d6e08 <network_listening>

000d80e4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d80e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d80e8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d80ea:	b095      	sub	sp, #84	; 0x54
   d80ec:	4616      	mov	r6, r2
   d80ee:	460d      	mov	r5, r1
   d80f0:	4607      	mov	r7, r0
    IPAddress addr;
   d80f2:	f7ff fa21 	bl	d7538 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d80f6:	4621      	mov	r1, r4
   d80f8:	2220      	movs	r2, #32
   d80fa:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d80fc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d80fe:	f000 fad2 	bl	d86a6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8102:	2340      	movs	r3, #64	; 0x40
   d8104:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8106:	4621      	mov	r1, r4
   d8108:	466b      	mov	r3, sp
   d810a:	aa0c      	add	r2, sp, #48	; 0x30
   d810c:	4630      	mov	r0, r6
   d810e:	f7fe fbff 	bl	d6910 <netdb_getaddrinfo>
    if (!r) {
   d8112:	4604      	mov	r4, r0
   d8114:	2800      	cmp	r0, #0
   d8116:	d144      	bne.n	d81a2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8118:	4602      	mov	r2, r0
   d811a:	2101      	movs	r1, #1
   d811c:	6868      	ldr	r0, [r5, #4]
   d811e:	f7fe fe53 	bl	d6dc8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8122:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8124:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8126:	4622      	mov	r2, r4
   d8128:	6868      	ldr	r0, [r5, #4]
   d812a:	f7fe fe4d 	bl	d6dc8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d812e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8130:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8132:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8134:	2e00      	cmp	r6, #0
   d8136:	d034      	beq.n	d81a2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8138:	2900      	cmp	r1, #0
   d813a:	d132      	bne.n	d81a2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d813c:	6873      	ldr	r3, [r6, #4]
   d813e:	2b02      	cmp	r3, #2
   d8140:	d002      	beq.n	d8148 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8142:	2b0a      	cmp	r3, #10
   d8144:	d009      	beq.n	d815a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8146:	e02a      	b.n	d819e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8148:	f1b8 0f00 	cmp.w	r8, #0
   d814c:	d027      	beq.n	d819e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d814e:	6971      	ldr	r1, [r6, #20]
   d8150:	4638      	mov	r0, r7
   d8152:	3104      	adds	r1, #4
   d8154:	f7ff fa33 	bl	d75be <_ZN9IPAddressaSEPKh>
   d8158:	e020      	b.n	d819c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d815a:	f1b9 0f00 	cmp.w	r9, #0
   d815e:	d01e      	beq.n	d819e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8160:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8162:	2211      	movs	r2, #17
   d8164:	a801      	add	r0, sp, #4
   d8166:	f000 fa9e 	bl	d86a6 <memset>
                    a.v = 6;
   d816a:	2306      	movs	r3, #6
   d816c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8170:	ad01      	add	r5, sp, #4
   d8172:	f104 0308 	add.w	r3, r4, #8
   d8176:	3418      	adds	r4, #24
   d8178:	6818      	ldr	r0, [r3, #0]
   d817a:	6859      	ldr	r1, [r3, #4]
   d817c:	462a      	mov	r2, r5
   d817e:	c203      	stmia	r2!, {r0, r1}
   d8180:	3308      	adds	r3, #8
   d8182:	42a3      	cmp	r3, r4
   d8184:	4615      	mov	r5, r2
   d8186:	d1f7      	bne.n	d8178 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8188:	a901      	add	r1, sp, #4
   d818a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d818c:	ad07      	add	r5, sp, #28
   d818e:	f7ff f9e1 	bl	d7554 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8194:	1d3c      	adds	r4, r7, #4
   d8196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8198:	682b      	ldr	r3, [r5, #0]
   d819a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d819c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d819e:	69f6      	ldr	r6, [r6, #28]
   d81a0:	e7c8      	b.n	d8134 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d81a2:	9800      	ldr	r0, [sp, #0]
   d81a4:	f7fe fbac 	bl	d6900 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d81a8:	4638      	mov	r0, r7
   d81aa:	b015      	add	sp, #84	; 0x54
   d81ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d81b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d81b0:	4b02      	ldr	r3, [pc, #8]	; (d81bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d81b2:	4a03      	ldr	r2, [pc, #12]	; (d81c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d81b4:	601a      	str	r2, [r3, #0]
   d81b6:	2200      	movs	r2, #0
   d81b8:	605a      	str	r2, [r3, #4]
   d81ba:	4770      	bx	lr
   d81bc:	2003e728 	.word	0x2003e728
   d81c0:	000d9428 	.word	0x000d9428

000d81c4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d81c4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d81c6:	4e18      	ldr	r6, [pc, #96]	; (d8228 <pinAvailable+0x64>)
   d81c8:	6831      	ldr	r1, [r6, #0]
   d81ca:	f011 0501 	ands.w	r5, r1, #1
   d81ce:	4604      	mov	r4, r0
   d81d0:	d10a      	bne.n	d81e8 <pinAvailable+0x24>
   d81d2:	4630      	mov	r0, r6
   d81d4:	f7fb ff70 	bl	d40b8 <__cxa_guard_acquire>
   d81d8:	b130      	cbz	r0, d81e8 <pinAvailable+0x24>
   d81da:	4629      	mov	r1, r5
   d81dc:	4813      	ldr	r0, [pc, #76]	; (d822c <pinAvailable+0x68>)
   d81de:	f7fe fe9f 	bl	d6f20 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d81e2:	4630      	mov	r0, r6
   d81e4:	f7fb ff6d 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d81e8:	4810      	ldr	r0, [pc, #64]	; (d822c <pinAvailable+0x68>)
   d81ea:	f7fe ffce 	bl	d718a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d81ee:	b128      	cbz	r0, d81fc <pinAvailable+0x38>
   d81f0:	f1a4 030b 	sub.w	r3, r4, #11
   d81f4:	2b02      	cmp	r3, #2
   d81f6:	d801      	bhi.n	d81fc <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d81f8:	2000      	movs	r0, #0
   d81fa:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d81fc:	f000 f8aa 	bl	d8354 <_Z19__fetch_global_Wirev>
   d8200:	f7ff fb75 	bl	d78ee <_ZN7TwoWire9isEnabledEv>
   d8204:	b108      	cbz	r0, d820a <pinAvailable+0x46>
   d8206:	2c01      	cmp	r4, #1
   d8208:	d9f6      	bls.n	d81f8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d820a:	f7ff fac7 	bl	d779c <_Z22__fetch_global_Serial1v>
   d820e:	f7ff fac1 	bl	d7794 <_ZN11USARTSerial9isEnabledEv>
   d8212:	b118      	cbz	r0, d821c <pinAvailable+0x58>
   d8214:	f1a4 0309 	sub.w	r3, r4, #9
   d8218:	2b01      	cmp	r3, #1
   d821a:	d9ed      	bls.n	d81f8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d821c:	2c23      	cmp	r4, #35	; 0x23
   d821e:	bf8c      	ite	hi
   d8220:	2000      	movhi	r0, #0
   d8222:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8224:	bd70      	pop	{r4, r5, r6, pc}
   d8226:	bf00      	nop
   d8228:	2003dd34 	.word	0x2003dd34
   d822c:	2003dd38 	.word	0x2003dd38

000d8230 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8230:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8232:	b538      	push	{r3, r4, r5, lr}
   d8234:	4604      	mov	r4, r0
   d8236:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8238:	d80a      	bhi.n	d8250 <pinMode+0x20>
   d823a:	29ff      	cmp	r1, #255	; 0xff
   d823c:	d008      	beq.n	d8250 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d823e:	f7ff ffc1 	bl	d81c4 <pinAvailable>
   d8242:	b128      	cbz	r0, d8250 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8244:	4629      	mov	r1, r5
   d8246:	4620      	mov	r0, r4
}
   d8248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d824c:	f7fe bb78 	b.w	d6940 <HAL_Pin_Mode>
   d8250:	bd38      	pop	{r3, r4, r5, pc}

000d8252 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8252:	b538      	push	{r3, r4, r5, lr}
   d8254:	4604      	mov	r4, r0
   d8256:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8258:	f7fe fb7a 	bl	d6950 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d825c:	28ff      	cmp	r0, #255	; 0xff
   d825e:	d010      	beq.n	d8282 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8260:	2806      	cmp	r0, #6
   d8262:	d804      	bhi.n	d826e <digitalWrite+0x1c>
   d8264:	234d      	movs	r3, #77	; 0x4d
   d8266:	fa23 f000 	lsr.w	r0, r3, r0
   d826a:	07c3      	lsls	r3, r0, #31
   d826c:	d409      	bmi.n	d8282 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d826e:	4620      	mov	r0, r4
   d8270:	f7ff ffa8 	bl	d81c4 <pinAvailable>
   d8274:	b128      	cbz	r0, d8282 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8276:	4629      	mov	r1, r5
   d8278:	4620      	mov	r0, r4
}
   d827a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d827e:	f7fe bb6f 	b.w	d6960 <HAL_GPIO_Write>
   d8282:	bd38      	pop	{r3, r4, r5, pc}

000d8284 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8284:	b510      	push	{r4, lr}
   d8286:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8288:	f7fe fb62 	bl	d6950 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d828c:	3804      	subs	r0, #4
   d828e:	b2c0      	uxtb	r0, r0
   d8290:	2801      	cmp	r0, #1
   d8292:	d908      	bls.n	d82a6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8294:	4620      	mov	r0, r4
   d8296:	f7ff ff95 	bl	d81c4 <pinAvailable>
   d829a:	b120      	cbz	r0, d82a6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d829c:	4620      	mov	r0, r4
}
   d829e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d82a2:	f7fe bb65 	b.w	d6970 <HAL_GPIO_Read>
}
   d82a6:	2000      	movs	r0, #0
   d82a8:	bd10      	pop	{r4, pc}

000d82aa <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d82aa:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d82ac:	b510      	push	{r4, lr}
   d82ae:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d82b0:	bf9c      	itt	ls
   d82b2:	340e      	addls	r4, #14
   d82b4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d82b6:	4620      	mov	r0, r4
   d82b8:	f7ff ff84 	bl	d81c4 <pinAvailable>
   d82bc:	b150      	cbz	r0, d82d4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d82be:	2103      	movs	r1, #3
   d82c0:	4620      	mov	r0, r4
   d82c2:	f7fe fb35 	bl	d6930 <HAL_Validate_Pin_Function>
   d82c6:	2803      	cmp	r0, #3
   d82c8:	d104      	bne.n	d82d4 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d82ca:	4620      	mov	r0, r4
}
   d82cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d82d0:	f7fe bb56 	b.w	d6980 <HAL_ADC_Read>
}
   d82d4:	2000      	movs	r0, #0
   d82d6:	bd10      	pop	{r4, pc}

000d82d8 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d82d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d82dc:	4690      	mov	r8, r2
   d82de:	461e      	mov	r6, r3
   d82e0:	2407      	movs	r4, #7
   d82e2:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d82e4:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d82e6:	f1b8 0f00 	cmp.w	r8, #0
   d82ea:	d104      	bne.n	d82f6 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d82ec:	f1c4 0107 	rsb	r1, r4, #7
   d82f0:	fa46 f101 	asr.w	r1, r6, r1
   d82f4:	e001      	b.n	d82fa <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d82f6:	fa46 f104 	asr.w	r1, r6, r4
   d82fa:	f001 0101 	and.w	r1, r1, #1
   d82fe:	4638      	mov	r0, r7
   d8300:	f7ff ffa7 	bl	d8252 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d8304:	2101      	movs	r1, #1
   d8306:	4628      	mov	r0, r5
   d8308:	f7ff ffa3 	bl	d8252 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d830c:	2100      	movs	r1, #0
   d830e:	4628      	mov	r0, r5
   d8310:	f7ff ff9f 	bl	d8252 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d8314:	f114 34ff 	adds.w	r4, r4, #4294967295
   d8318:	d2e5      	bcs.n	d82e6 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d831a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d8320 <_Z17acquireWireBufferv>:
   d8320:	b570      	push	{r4, r5, r6, lr}
   d8322:	4604      	mov	r4, r0
   d8324:	2514      	movs	r5, #20
   d8326:	462a      	mov	r2, r5
   d8328:	4e09      	ldr	r6, [pc, #36]	; (d8350 <_Z17acquireWireBufferv+0x30>)
   d832a:	2100      	movs	r1, #0
   d832c:	f000 f9bb 	bl	d86a6 <memset>
   d8330:	8025      	strh	r5, [r4, #0]
   d8332:	2520      	movs	r5, #32
   d8334:	4631      	mov	r1, r6
   d8336:	60a5      	str	r5, [r4, #8]
   d8338:	6125      	str	r5, [r4, #16]
   d833a:	4628      	mov	r0, r5
   d833c:	f000 f840 	bl	d83c0 <_ZnajRKSt9nothrow_t>
   d8340:	4631      	mov	r1, r6
   d8342:	6060      	str	r0, [r4, #4]
   d8344:	4628      	mov	r0, r5
   d8346:	f000 f83b 	bl	d83c0 <_ZnajRKSt9nothrow_t>
   d834a:	60e0      	str	r0, [r4, #12]
   d834c:	4620      	mov	r0, r4
   d834e:	bd70      	pop	{r4, r5, r6, pc}
   d8350:	000d9454 	.word	0x000d9454

000d8354 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8354:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8356:	4d0e      	ldr	r5, [pc, #56]	; (d8390 <_Z19__fetch_global_Wirev+0x3c>)
   d8358:	6829      	ldr	r1, [r5, #0]
   d835a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d835e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8360:	d113      	bne.n	d838a <_Z19__fetch_global_Wirev+0x36>
   d8362:	4628      	mov	r0, r5
   d8364:	f7fb fea8 	bl	d40b8 <__cxa_guard_acquire>
   d8368:	b178      	cbz	r0, d838a <_Z19__fetch_global_Wirev+0x36>
   d836a:	a801      	add	r0, sp, #4
   d836c:	f7ff ffd8 	bl	d8320 <_Z17acquireWireBufferv>
   d8370:	aa01      	add	r2, sp, #4
   d8372:	4621      	mov	r1, r4
   d8374:	4807      	ldr	r0, [pc, #28]	; (d8394 <_Z19__fetch_global_Wirev+0x40>)
   d8376:	f7ff fa63 	bl	d7840 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d837a:	4628      	mov	r0, r5
   d837c:	f7fb fea1 	bl	d40c2 <__cxa_guard_release>
   d8380:	4a05      	ldr	r2, [pc, #20]	; (d8398 <_Z19__fetch_global_Wirev+0x44>)
   d8382:	4906      	ldr	r1, [pc, #24]	; (d839c <_Z19__fetch_global_Wirev+0x48>)
   d8384:	4803      	ldr	r0, [pc, #12]	; (d8394 <_Z19__fetch_global_Wirev+0x40>)
   d8386:	f000 f80b 	bl	d83a0 <__aeabi_atexit>
	return wire;
}
   d838a:	4802      	ldr	r0, [pc, #8]	; (d8394 <_Z19__fetch_global_Wirev+0x40>)
   d838c:	b007      	add	sp, #28
   d838e:	bd30      	pop	{r4, r5, pc}
   d8390:	2003e734 	.word	0x2003e734
   d8394:	2003e738 	.word	0x2003e738
   d8398:	2003dd30 	.word	0x2003dd30
   d839c:	000d77e9 	.word	0x000d77e9

000d83a0 <__aeabi_atexit>:
   d83a0:	460b      	mov	r3, r1
   d83a2:	4601      	mov	r1, r0
   d83a4:	4618      	mov	r0, r3
   d83a6:	f000 b965 	b.w	d8674 <__cxa_atexit>
	...

000d83ac <_ZSt15get_new_handlerv>:
   d83ac:	4b02      	ldr	r3, [pc, #8]	; (d83b8 <_ZSt15get_new_handlerv+0xc>)
   d83ae:	6818      	ldr	r0, [r3, #0]
   d83b0:	f3bf 8f5f 	dmb	sy
   d83b4:	4770      	bx	lr
   d83b6:	bf00      	nop
   d83b8:	2003e74c 	.word	0x2003e74c

000d83bc <_ZdlPvj>:
   d83bc:	f7fb be6d 	b.w	d409a <_ZdlPv>

000d83c0 <_ZnajRKSt9nothrow_t>:
   d83c0:	f000 b800 	b.w	d83c4 <_ZnwjRKSt9nothrow_t>

000d83c4 <_ZnwjRKSt9nothrow_t>:
   d83c4:	b510      	push	{r4, lr}
   d83c6:	2800      	cmp	r0, #0
   d83c8:	bf14      	ite	ne
   d83ca:	4604      	movne	r4, r0
   d83cc:	2401      	moveq	r4, #1
   d83ce:	4620      	mov	r0, r4
   d83d0:	f7fe fd42 	bl	d6e58 <malloc>
   d83d4:	b920      	cbnz	r0, d83e0 <_ZnwjRKSt9nothrow_t+0x1c>
   d83d6:	f7ff ffe9 	bl	d83ac <_ZSt15get_new_handlerv>
   d83da:	b108      	cbz	r0, d83e0 <_ZnwjRKSt9nothrow_t+0x1c>
   d83dc:	4780      	blx	r0
   d83de:	e7f6      	b.n	d83ce <_ZnwjRKSt9nothrow_t+0xa>
   d83e0:	bd10      	pop	{r4, pc}
	...

000d83e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d83e4:	4b18      	ldr	r3, [pc, #96]	; (d8448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d83e6:	681a      	ldr	r2, [r3, #0]
   d83e8:	07d1      	lsls	r1, r2, #31
   d83ea:	bf5c      	itt	pl
   d83ec:	2201      	movpl	r2, #1
   d83ee:	601a      	strpl	r2, [r3, #0]
   d83f0:	4b16      	ldr	r3, [pc, #88]	; (d844c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d83f2:	681a      	ldr	r2, [r3, #0]
   d83f4:	07d2      	lsls	r2, r2, #31
   d83f6:	bf5c      	itt	pl
   d83f8:	2201      	movpl	r2, #1
   d83fa:	601a      	strpl	r2, [r3, #0]
   d83fc:	4b14      	ldr	r3, [pc, #80]	; (d8450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d83fe:	681a      	ldr	r2, [r3, #0]
   d8400:	07d0      	lsls	r0, r2, #31
   d8402:	bf5c      	itt	pl
   d8404:	2201      	movpl	r2, #1
   d8406:	601a      	strpl	r2, [r3, #0]
   d8408:	4b12      	ldr	r3, [pc, #72]	; (d8454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d840a:	681a      	ldr	r2, [r3, #0]
   d840c:	07d1      	lsls	r1, r2, #31
   d840e:	bf5c      	itt	pl
   d8410:	2201      	movpl	r2, #1
   d8412:	601a      	strpl	r2, [r3, #0]
   d8414:	4b10      	ldr	r3, [pc, #64]	; (d8458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8416:	681a      	ldr	r2, [r3, #0]
   d8418:	07d2      	lsls	r2, r2, #31
   d841a:	bf5c      	itt	pl
   d841c:	2201      	movpl	r2, #1
   d841e:	601a      	strpl	r2, [r3, #0]
   d8420:	4b0e      	ldr	r3, [pc, #56]	; (d845c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8422:	681a      	ldr	r2, [r3, #0]
   d8424:	07d0      	lsls	r0, r2, #31
   d8426:	bf5c      	itt	pl
   d8428:	2201      	movpl	r2, #1
   d842a:	601a      	strpl	r2, [r3, #0]
   d842c:	4b0c      	ldr	r3, [pc, #48]	; (d8460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d842e:	681a      	ldr	r2, [r3, #0]
   d8430:	07d1      	lsls	r1, r2, #31
   d8432:	bf5c      	itt	pl
   d8434:	2201      	movpl	r2, #1
   d8436:	601a      	strpl	r2, [r3, #0]
   d8438:	4b0a      	ldr	r3, [pc, #40]	; (d8464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d843a:	681a      	ldr	r2, [r3, #0]
   d843c:	07d2      	lsls	r2, r2, #31
   d843e:	bf5c      	itt	pl
   d8440:	2201      	movpl	r2, #1
   d8442:	601a      	strpl	r2, [r3, #0]
   d8444:	4770      	bx	lr
   d8446:	bf00      	nop
   d8448:	2003e76c 	.word	0x2003e76c
   d844c:	2003e768 	.word	0x2003e768
   d8450:	2003e764 	.word	0x2003e764
   d8454:	2003e760 	.word	0x2003e760
   d8458:	2003e75c 	.word	0x2003e75c
   d845c:	2003e758 	.word	0x2003e758
   d8460:	2003e754 	.word	0x2003e754
   d8464:	2003e750 	.word	0x2003e750

000d8468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8468:	4b24      	ldr	r3, [pc, #144]	; (d84fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d846a:	681a      	ldr	r2, [r3, #0]
   d846c:	07d0      	lsls	r0, r2, #31
   d846e:	bf5c      	itt	pl
   d8470:	2201      	movpl	r2, #1
   d8472:	601a      	strpl	r2, [r3, #0]
   d8474:	4b22      	ldr	r3, [pc, #136]	; (d8500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8476:	681a      	ldr	r2, [r3, #0]
   d8478:	07d1      	lsls	r1, r2, #31
   d847a:	bf5c      	itt	pl
   d847c:	2201      	movpl	r2, #1
   d847e:	601a      	strpl	r2, [r3, #0]
   d8480:	4b20      	ldr	r3, [pc, #128]	; (d8504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8482:	681a      	ldr	r2, [r3, #0]
   d8484:	07d2      	lsls	r2, r2, #31
   d8486:	bf5c      	itt	pl
   d8488:	2201      	movpl	r2, #1
   d848a:	601a      	strpl	r2, [r3, #0]
   d848c:	4b1e      	ldr	r3, [pc, #120]	; (d8508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d848e:	681a      	ldr	r2, [r3, #0]
   d8490:	07d0      	lsls	r0, r2, #31
   d8492:	bf5c      	itt	pl
   d8494:	2201      	movpl	r2, #1
   d8496:	601a      	strpl	r2, [r3, #0]
   d8498:	4b1c      	ldr	r3, [pc, #112]	; (d850c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d849a:	681a      	ldr	r2, [r3, #0]
   d849c:	07d1      	lsls	r1, r2, #31
   d849e:	bf5c      	itt	pl
   d84a0:	2201      	movpl	r2, #1
   d84a2:	601a      	strpl	r2, [r3, #0]
   d84a4:	4b1a      	ldr	r3, [pc, #104]	; (d8510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d84a6:	681a      	ldr	r2, [r3, #0]
   d84a8:	07d2      	lsls	r2, r2, #31
   d84aa:	bf5c      	itt	pl
   d84ac:	2201      	movpl	r2, #1
   d84ae:	601a      	strpl	r2, [r3, #0]
   d84b0:	4b18      	ldr	r3, [pc, #96]	; (d8514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d84b2:	681a      	ldr	r2, [r3, #0]
   d84b4:	07d0      	lsls	r0, r2, #31
   d84b6:	bf5c      	itt	pl
   d84b8:	2201      	movpl	r2, #1
   d84ba:	601a      	strpl	r2, [r3, #0]
   d84bc:	4b16      	ldr	r3, [pc, #88]	; (d8518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d84be:	681a      	ldr	r2, [r3, #0]
   d84c0:	07d1      	lsls	r1, r2, #31
   d84c2:	bf5c      	itt	pl
   d84c4:	2201      	movpl	r2, #1
   d84c6:	601a      	strpl	r2, [r3, #0]
   d84c8:	4b14      	ldr	r3, [pc, #80]	; (d851c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d84ca:	681a      	ldr	r2, [r3, #0]
   d84cc:	07d2      	lsls	r2, r2, #31
   d84ce:	bf5c      	itt	pl
   d84d0:	2201      	movpl	r2, #1
   d84d2:	601a      	strpl	r2, [r3, #0]
   d84d4:	4b12      	ldr	r3, [pc, #72]	; (d8520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d84d6:	681a      	ldr	r2, [r3, #0]
   d84d8:	07d0      	lsls	r0, r2, #31
   d84da:	bf5c      	itt	pl
   d84dc:	2201      	movpl	r2, #1
   d84de:	601a      	strpl	r2, [r3, #0]
   d84e0:	4b10      	ldr	r3, [pc, #64]	; (d8524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d84e2:	681a      	ldr	r2, [r3, #0]
   d84e4:	07d1      	lsls	r1, r2, #31
   d84e6:	bf5c      	itt	pl
   d84e8:	2201      	movpl	r2, #1
   d84ea:	601a      	strpl	r2, [r3, #0]
   d84ec:	4b0e      	ldr	r3, [pc, #56]	; (d8528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d84ee:	681a      	ldr	r2, [r3, #0]
   d84f0:	07d2      	lsls	r2, r2, #31
   d84f2:	bf5c      	itt	pl
   d84f4:	2201      	movpl	r2, #1
   d84f6:	601a      	strpl	r2, [r3, #0]
   d84f8:	4770      	bx	lr
   d84fa:	bf00      	nop
   d84fc:	2003e79c 	.word	0x2003e79c
   d8500:	2003e798 	.word	0x2003e798
   d8504:	2003e794 	.word	0x2003e794
   d8508:	2003e790 	.word	0x2003e790
   d850c:	2003e78c 	.word	0x2003e78c
   d8510:	2003e788 	.word	0x2003e788
   d8514:	2003e784 	.word	0x2003e784
   d8518:	2003e780 	.word	0x2003e780
   d851c:	2003e77c 	.word	0x2003e77c
   d8520:	2003e778 	.word	0x2003e778
   d8524:	2003e774 	.word	0x2003e774
   d8528:	2003e770 	.word	0x2003e770

000d852c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d852c:	4b24      	ldr	r3, [pc, #144]	; (d85c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d852e:	681a      	ldr	r2, [r3, #0]
   d8530:	07d0      	lsls	r0, r2, #31
   d8532:	bf5c      	itt	pl
   d8534:	2201      	movpl	r2, #1
   d8536:	601a      	strpl	r2, [r3, #0]
   d8538:	4b22      	ldr	r3, [pc, #136]	; (d85c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d853a:	681a      	ldr	r2, [r3, #0]
   d853c:	07d1      	lsls	r1, r2, #31
   d853e:	bf5c      	itt	pl
   d8540:	2201      	movpl	r2, #1
   d8542:	601a      	strpl	r2, [r3, #0]
   d8544:	4b20      	ldr	r3, [pc, #128]	; (d85c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8546:	681a      	ldr	r2, [r3, #0]
   d8548:	07d2      	lsls	r2, r2, #31
   d854a:	bf5c      	itt	pl
   d854c:	2201      	movpl	r2, #1
   d854e:	601a      	strpl	r2, [r3, #0]
   d8550:	4b1e      	ldr	r3, [pc, #120]	; (d85cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8552:	681a      	ldr	r2, [r3, #0]
   d8554:	07d0      	lsls	r0, r2, #31
   d8556:	bf5c      	itt	pl
   d8558:	2201      	movpl	r2, #1
   d855a:	601a      	strpl	r2, [r3, #0]
   d855c:	4b1c      	ldr	r3, [pc, #112]	; (d85d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d855e:	681a      	ldr	r2, [r3, #0]
   d8560:	07d1      	lsls	r1, r2, #31
   d8562:	bf5c      	itt	pl
   d8564:	2201      	movpl	r2, #1
   d8566:	601a      	strpl	r2, [r3, #0]
   d8568:	4b1a      	ldr	r3, [pc, #104]	; (d85d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d856a:	681a      	ldr	r2, [r3, #0]
   d856c:	07d2      	lsls	r2, r2, #31
   d856e:	bf5c      	itt	pl
   d8570:	2201      	movpl	r2, #1
   d8572:	601a      	strpl	r2, [r3, #0]
   d8574:	4b18      	ldr	r3, [pc, #96]	; (d85d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8576:	681a      	ldr	r2, [r3, #0]
   d8578:	07d0      	lsls	r0, r2, #31
   d857a:	bf5c      	itt	pl
   d857c:	2201      	movpl	r2, #1
   d857e:	601a      	strpl	r2, [r3, #0]
   d8580:	4b16      	ldr	r3, [pc, #88]	; (d85dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8582:	681a      	ldr	r2, [r3, #0]
   d8584:	07d1      	lsls	r1, r2, #31
   d8586:	bf5c      	itt	pl
   d8588:	2201      	movpl	r2, #1
   d858a:	601a      	strpl	r2, [r3, #0]
   d858c:	4b14      	ldr	r3, [pc, #80]	; (d85e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d858e:	681a      	ldr	r2, [r3, #0]
   d8590:	07d2      	lsls	r2, r2, #31
   d8592:	bf5c      	itt	pl
   d8594:	2201      	movpl	r2, #1
   d8596:	601a      	strpl	r2, [r3, #0]
   d8598:	4b12      	ldr	r3, [pc, #72]	; (d85e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d859a:	681a      	ldr	r2, [r3, #0]
   d859c:	07d0      	lsls	r0, r2, #31
   d859e:	bf5c      	itt	pl
   d85a0:	2201      	movpl	r2, #1
   d85a2:	601a      	strpl	r2, [r3, #0]
   d85a4:	4b10      	ldr	r3, [pc, #64]	; (d85e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d85a6:	681a      	ldr	r2, [r3, #0]
   d85a8:	07d1      	lsls	r1, r2, #31
   d85aa:	bf5c      	itt	pl
   d85ac:	2201      	movpl	r2, #1
   d85ae:	601a      	strpl	r2, [r3, #0]
   d85b0:	4b0e      	ldr	r3, [pc, #56]	; (d85ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d85b2:	681a      	ldr	r2, [r3, #0]
   d85b4:	07d2      	lsls	r2, r2, #31
   d85b6:	bf5c      	itt	pl
   d85b8:	2201      	movpl	r2, #1
   d85ba:	601a      	strpl	r2, [r3, #0]
   d85bc:	4770      	bx	lr
   d85be:	bf00      	nop
   d85c0:	2003e7cc 	.word	0x2003e7cc
   d85c4:	2003e7c8 	.word	0x2003e7c8
   d85c8:	2003e7c4 	.word	0x2003e7c4
   d85cc:	2003e7c0 	.word	0x2003e7c0
   d85d0:	2003e7bc 	.word	0x2003e7bc
   d85d4:	2003e7b8 	.word	0x2003e7b8
   d85d8:	2003e7b4 	.word	0x2003e7b4
   d85dc:	2003e7b0 	.word	0x2003e7b0
   d85e0:	2003e7ac 	.word	0x2003e7ac
   d85e4:	2003e7a8 	.word	0x2003e7a8
   d85e8:	2003e7a4 	.word	0x2003e7a4
   d85ec:	2003e7a0 	.word	0x2003e7a0

000d85f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d85f0:	4b18      	ldr	r3, [pc, #96]	; (d8654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d85f2:	681a      	ldr	r2, [r3, #0]
   d85f4:	07d1      	lsls	r1, r2, #31
   d85f6:	bf5c      	itt	pl
   d85f8:	2201      	movpl	r2, #1
   d85fa:	601a      	strpl	r2, [r3, #0]
   d85fc:	4b16      	ldr	r3, [pc, #88]	; (d8658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d85fe:	681a      	ldr	r2, [r3, #0]
   d8600:	07d2      	lsls	r2, r2, #31
   d8602:	bf5c      	itt	pl
   d8604:	2201      	movpl	r2, #1
   d8606:	601a      	strpl	r2, [r3, #0]
   d8608:	4b14      	ldr	r3, [pc, #80]	; (d865c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d860a:	681a      	ldr	r2, [r3, #0]
   d860c:	07d0      	lsls	r0, r2, #31
   d860e:	bf5c      	itt	pl
   d8610:	2201      	movpl	r2, #1
   d8612:	601a      	strpl	r2, [r3, #0]
   d8614:	4b12      	ldr	r3, [pc, #72]	; (d8660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8616:	681a      	ldr	r2, [r3, #0]
   d8618:	07d1      	lsls	r1, r2, #31
   d861a:	bf5c      	itt	pl
   d861c:	2201      	movpl	r2, #1
   d861e:	601a      	strpl	r2, [r3, #0]
   d8620:	4b10      	ldr	r3, [pc, #64]	; (d8664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8622:	681a      	ldr	r2, [r3, #0]
   d8624:	07d2      	lsls	r2, r2, #31
   d8626:	bf5c      	itt	pl
   d8628:	2201      	movpl	r2, #1
   d862a:	601a      	strpl	r2, [r3, #0]
   d862c:	4b0e      	ldr	r3, [pc, #56]	; (d8668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d862e:	681a      	ldr	r2, [r3, #0]
   d8630:	07d0      	lsls	r0, r2, #31
   d8632:	bf5c      	itt	pl
   d8634:	2201      	movpl	r2, #1
   d8636:	601a      	strpl	r2, [r3, #0]
   d8638:	4b0c      	ldr	r3, [pc, #48]	; (d866c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d863a:	681a      	ldr	r2, [r3, #0]
   d863c:	07d1      	lsls	r1, r2, #31
   d863e:	bf5c      	itt	pl
   d8640:	2201      	movpl	r2, #1
   d8642:	601a      	strpl	r2, [r3, #0]
   d8644:	4b0a      	ldr	r3, [pc, #40]	; (d8670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8646:	681a      	ldr	r2, [r3, #0]
   d8648:	07d2      	lsls	r2, r2, #31
   d864a:	bf5c      	itt	pl
   d864c:	2201      	movpl	r2, #1
   d864e:	601a      	strpl	r2, [r3, #0]
   d8650:	4770      	bx	lr
   d8652:	bf00      	nop
   d8654:	2003e7ec 	.word	0x2003e7ec
   d8658:	2003e7e8 	.word	0x2003e7e8
   d865c:	2003e7e4 	.word	0x2003e7e4
   d8660:	2003e7e0 	.word	0x2003e7e0
   d8664:	2003e7dc 	.word	0x2003e7dc
   d8668:	2003e7d8 	.word	0x2003e7d8
   d866c:	2003e7d4 	.word	0x2003e7d4
   d8670:	2003e7d0 	.word	0x2003e7d0

000d8674 <__cxa_atexit>:
   d8674:	b510      	push	{r4, lr}
   d8676:	4c05      	ldr	r4, [pc, #20]	; (d868c <__cxa_atexit+0x18>)
   d8678:	4613      	mov	r3, r2
   d867a:	b12c      	cbz	r4, d8688 <__cxa_atexit+0x14>
   d867c:	460a      	mov	r2, r1
   d867e:	4601      	mov	r1, r0
   d8680:	2002      	movs	r0, #2
   d8682:	f3af 8000 	nop.w
   d8686:	bd10      	pop	{r4, pc}
   d8688:	4620      	mov	r0, r4
   d868a:	bd10      	pop	{r4, pc}
   d868c:	00000000 	.word	0x00000000

000d8690 <memcpy>:
   d8690:	b510      	push	{r4, lr}
   d8692:	1e43      	subs	r3, r0, #1
   d8694:	440a      	add	r2, r1
   d8696:	4291      	cmp	r1, r2
   d8698:	d004      	beq.n	d86a4 <memcpy+0x14>
   d869a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d869e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d86a2:	e7f8      	b.n	d8696 <memcpy+0x6>
   d86a4:	bd10      	pop	{r4, pc}

000d86a6 <memset>:
   d86a6:	4402      	add	r2, r0
   d86a8:	4603      	mov	r3, r0
   d86aa:	4293      	cmp	r3, r2
   d86ac:	d002      	beq.n	d86b4 <memset+0xe>
   d86ae:	f803 1b01 	strb.w	r1, [r3], #1
   d86b2:	e7fa      	b.n	d86aa <memset+0x4>
   d86b4:	4770      	bx	lr
	...

000d86b8 <srand>:
   d86b8:	b538      	push	{r3, r4, r5, lr}
   d86ba:	4b12      	ldr	r3, [pc, #72]	; (d8704 <srand+0x4c>)
   d86bc:	681c      	ldr	r4, [r3, #0]
   d86be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d86c0:	4605      	mov	r5, r0
   d86c2:	b9d3      	cbnz	r3, d86fa <srand+0x42>
   d86c4:	2018      	movs	r0, #24
   d86c6:	f7fe fbc7 	bl	d6e58 <malloc>
   d86ca:	f243 330e 	movw	r3, #13070	; 0x330e
   d86ce:	63a0      	str	r0, [r4, #56]	; 0x38
   d86d0:	8003      	strh	r3, [r0, #0]
   d86d2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d86d6:	8043      	strh	r3, [r0, #2]
   d86d8:	f241 2334 	movw	r3, #4660	; 0x1234
   d86dc:	8083      	strh	r3, [r0, #4]
   d86de:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d86e2:	80c3      	strh	r3, [r0, #6]
   d86e4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d86e8:	8103      	strh	r3, [r0, #8]
   d86ea:	2305      	movs	r3, #5
   d86ec:	8143      	strh	r3, [r0, #10]
   d86ee:	230b      	movs	r3, #11
   d86f0:	8183      	strh	r3, [r0, #12]
   d86f2:	2201      	movs	r2, #1
   d86f4:	2300      	movs	r3, #0
   d86f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d86fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d86fc:	2200      	movs	r2, #0
   d86fe:	611d      	str	r5, [r3, #16]
   d8700:	615a      	str	r2, [r3, #20]
   d8702:	bd38      	pop	{r3, r4, r5, pc}
   d8704:	2003dd2c 	.word	0x2003dd2c

000d8708 <strcpy>:
   d8708:	4603      	mov	r3, r0
   d870a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d870e:	f803 2b01 	strb.w	r2, [r3], #1
   d8712:	2a00      	cmp	r2, #0
   d8714:	d1f9      	bne.n	d870a <strcpy+0x2>
   d8716:	4770      	bx	lr

000d8718 <strlen>:
   d8718:	4603      	mov	r3, r0
   d871a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d871e:	2a00      	cmp	r2, #0
   d8720:	d1fb      	bne.n	d871a <strlen+0x2>
   d8722:	1a18      	subs	r0, r3, r0
   d8724:	3801      	subs	r0, #1
   d8726:	4770      	bx	lr

000d8728 <dynalib_user>:
   d8728:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d8738:	0000 0000                                   ....

000d873c <_ZTVN8particle13__SPISettingsE>:
	...
   d8744:	40ed 000d                                   .@..

000d8748 <_ZTV4File>:
	...
   d8750:	40e5 000d 418f 000d 4177 000d 4171 000d     .@...A..wA..qA..
   d8760:	40c9 000d 4151 000d 414b 000d 4145 000d     .@..QA..KA..EA..
   d8770:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d8780:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d8790:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d87a0:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d87b0:	2545 3e64 5300 2044 6e69 7469 6900 696e     E%d>.SD init.ini
   d87c0:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   d87d0:	6465 0021 6f63 6e6e 6365 6974 676e 7420     ed!.connecting t
   d87e0:	206f 514d 5454 2e20 2e2e 7200 7465 7972     o MQTT ....retry
   d87f0:	6e69 2067 514d 5454 6320 6e6f 656e 7463     ing MQTT connect
   d8800:	6f69 206e 6e69 3520 7320 6365 6e6f 7364     ion in 5 seconds
   d8810:	2e2e 002e 514d 5454 6320 6e6f 656e 7463     ....MQTT connect
   d8820:	6465 003f 7277 7469 6e69 2067 6f74 6620     ed?.writing to f
   d8830:	6c69 0065 6e69 6573 7472 7420 7865 2074     ile.insert text 
   d8840:	6568 6572 6500 7272 726f 6f20 6570 696e     here.error openi
   d8850:	676e 6620 6c69 0065 6941 2072 7551 6c61     ng file.Air Qual
   d8860:	7469 2079 6177 6e72 6e69 2e67 4120 2051     ity warning. AQ 
   d8870:	6572 6461 203a 6925 0a20 4100 7269 5120     read: %i ..Air Q
   d8880:	6175 696c 7974 5220 6165 3a64 2520 2069     uality Read: %i 
   d8890:	000a 5141 7720 6972 6574 6520 7272 726f     ..AQ write error
   d88a0:	4d00 2d51 2039 6177 6e72 6e69 2e67 4d20     .MQ-9 warning. M
   d88b0:	2d51 2039 6572 6461 203a 6925 0a20 4d00     Q-9 read: %i ..M
   d88c0:	2d51 2039 7277 7469 2065 7265 6f72 0072     Q-9 write error.
   d88d0:	4144 474e 5245 4920 4d4d 4e49 4e41 2e54     DANGER IMMINANT.
   d88e0:	4d20 2d51 3a39 2520 2069 5141 203a 6925      MQ-9: %i AQ: %i
   d88f0:	5420 6d65 3a70 2520 2069 000a 6948 6867      Temp: %i ..High
   d8900:	4420 6e61 6567 2e72 4d20 2d51 3a39 2520      Danger. MQ-9: %
   d8910:	2069 5141 203a 6925 5420 6d65 2070 6925     i AQ: %i Temp %i
   d8920:	0a20 4800 6769 2068 6164 676e 7265 7720      ..High danger w
   d8930:	6972 6574 6520 7272 726f 002e 616d 7275     rite error..maur
   d8940:	6369 6f69 3976 0039 6f69 612e 6164 7266     iciov99.io.adafr
   d8950:	6975 2e74 6f63 006d 6874 7369 7369 7261     uit.com.thisisar
   d8960:	6e61 6f64 736d 7274 6e69 6667 726f 6b61     andomstringforak
   d8970:	7965 6d00 7561 6972 6963 766f 3939 662f     ey.mauriciov99/f
   d8980:	6565 7364 202f 6d00 7561 6972 6963 766f     eeds/ .mauriciov
   d8990:	3939 662f 6565 7364 0020 0000 c000 4001     99/feeds ......@
   d89a0:	1000 4002 2000 4002                         ...@. .@

000d89a8 <CSWTCH.65>:
   d89a8:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d89b8:	0050 0000                                   P...

000d89bc <_ZTV16Adafruit_SSD1306>:
	...
   d89c4:	40e9 000d 4365 000d 5911 000d 721d 000d     .@..eC...Y...r..
   d89d4:	520d 000d 5611 000d 5095 000d 4f21 000d     .R...V...P..!O..
   d89e4:	56d1 000d 5767 000d 579f 000d 57bb 000d     .V..gW...W...W..

000d89f4 <_ZTV12Adafruit_GFX>:
	...
   d8a04:	5911 000d 721d 000d 40a5 000d 5611 000d     .Y...r...@...V..
   d8a14:	5731 000d 574d 000d 56d1 000d 5767 000d     1W..MW...V..gW..
   d8a24:	579f 000d 57bb 000d                         .W...W..

000d8a2c <_ZL4font>:
   d8a2c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d8a3c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d8a4c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d8a5c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d8a6c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d8a7c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d8a8c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d8a9c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d8aac:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d8abc:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d8acc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d8adc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d8aec:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d8afc:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d8b0c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d8b1c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d8b2c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d8b3c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d8b4c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d8b5c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d8b6c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d8b7c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d8b8c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d8b9c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d8bac:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d8bbc:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d8bcc:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d8bdc:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d8bec:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d8bfc:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d8c0c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d8c1c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d8c2c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d8c3c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d8c4c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d8c5c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d8c6c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d8c7c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d8c8c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d8c9c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d8cac:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d8cbc:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d8ccc:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d8cdc:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d8cec:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d8cfc:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d8d0c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d8d1c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d8d2c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d8d3c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d8d4c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d8d5c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d8d6c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d8d7c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d8d8c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d8d9c:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d8dac:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d8dbc:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d8dcc:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d8ddc:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d8dec:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d8dfc:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d8e0c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d8e1c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d8e2c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d8e3c:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d8e4c:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d8e5c:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d8e6c:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d8e7c:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d8e8c:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d8e9c:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d8eac:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d8ebc:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d8ecc:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d8edc:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d8eec:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d8efc:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d8f0c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d8f1c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d8f28 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d8f30:	40e7 000d 4357 000d 598f 000d 5a3b 000d     .@..WC...Y..;Z..
   d8f40:	5a6d 000d 59a3 000d 59e3 000d               mZ...Y...Y..

000d8f4c <_ZTV13Adafruit_MQTT>:
	...
   d8f5c:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   d8f6c:	40a5 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   d8f7c:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   d8f8c:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   d8f9c:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   d8fac:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   d8fbc:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   d8fcc:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   d8fdc:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   d8fec:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   d8ffc:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   d900c:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   d901c:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   d902c:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   d903c:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   d904c:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   d905c:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   d906c:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   d907c:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   d908c:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   d909c:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   d90ac:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   d90bc:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   d90cc:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   d90dc:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   d90ec:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   d90fc:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   d910c:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   d911c:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   d912c:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   d913c:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   d914c:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   d915c:	7465 6961 736c 002e                         etails..

000d9164 <_ZTVN5spark13EthernetClassE>:
	...
   d916c:	6ef7 000d 6eed 000d 6ee3 000d 6ed9 000d     .n...n...n...n..
   d917c:	6ecd 000d 6ec1 000d 6eb5 000d 6ead 000d     .n...n...n...n..
   d918c:	6ea3 000d 6e99 000d 80e5 000d               .n...n......

000d9198 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9198:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d91a8:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d91b8:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d91c8:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d91d8:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d91e8:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d91f8:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d9208:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d9218:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   d9228:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   d9238:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   d9248:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d9258:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d9268:	7000 6e61 6369 6100 6c6c 5a00 2500 302b     .panic.all.Z.%+0
   d9278:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   d9288:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d9298:	6d69 0065                                   ime.

000d929c <_ZTV9IPAddress>:
	...
   d92a4:	74d5 000d 74c5 000d 74c7 000d               .t...t...t..

000d92b0 <_ZTV9USBSerial>:
	...
   d92b8:	75d9 000d 7629 000d 7637 000d 721d 000d     .u..)v..7v...r..
   d92c8:	7615 000d 75db 000d 75f1 000d 7623 000d     .v...u...u..#v..
   d92d8:	7607 000d 75d5 000d                         .v...u..

000d92e0 <_ZTV11USARTSerial>:
	...
   d92e8:	76e5 000d 7735 000d 7743 000d 721d 000d     .v..5w..Cw...r..
   d92f8:	76f9 000d 771b 000d 7707 000d 772f 000d     .v...w...w../w..
   d9308:	76e7 000d 76eb 000d                         .v...v..

000d9310 <_ZTV7TwoWire>:
	...
   d9318:	77e9 000d 7833 000d 780b 000d 77eb 000d     .w..3x...x...w..
   d9328:	7813 000d 781b 000d 7823 000d 782b 000d     .x...x..#x..+x..

000d9338 <_ZTVN5spark9MeshClassE>:
	...
   d9340:	7955 000d 794b 000d 7941 000d 7937 000d     Uy..Ky..Ay..7y..
   d9350:	792b 000d 791f 000d 7913 000d 790b 000d     +y...y...y...y..
   d9360:	7901 000d 78f7 000d 80e5 000d               .y...x......

000d936c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9374:	7af9 000d 7aff 000d 7fe7 000d 7b0d 000d     .z...z.......{..
   d9384:	7afb 000d                                   .z..

000d9388 <_ZTV9TCPClient>:
	...
   d9390:	419d 000d 41d1 000d 7a71 000d 7a8b 000d     .A...A..qz...z..
   d93a0:	7e8d 000d 7bdf 000d 7bb1 000d 7ab5 000d     .~...{...{...z..
   d93b0:	7d69 000d 7c65 000d 7c13 000d 7e5d 000d     i}..e|...|..]~..
   d93c0:	7ab7 000d 7aef 000d 7a9d 000d 7b11 000d     .z...z...z...{..
   d93d0:	7b91 000d 6977 6972 676e 7200 6365 2076     .{..wiring.recv 
   d93e0:	7265 6f72 2072 203d 6425 0000               error = %d..

000d93ec <_ZTVN5spark9WiFiClassE>:
	...
   d93f4:	805d 000d 8053 000d 8049 000d 7fff 000d     ]...S...I.......
   d9404:	803d 000d 8031 000d 8025 000d 801d 000d     =...1...%.......
   d9414:	8013 000d 8009 000d 80e5 000d               ............

000d9420 <_ZTVN5spark12NetworkClassE>:
	...
   d9428:	807d 000d 8087 000d 8091 000d 809b 000d     }...............
   d9438:	80a5 000d 80b1 000d 80bd 000d 80c9 000d     ................
   d9448:	80d1 000d 80db 000d 80e5 000d               ............

000d9454 <_ZSt7nothrow>:
   d9454:	0000 0000                                   ....

000d9458 <__sf_fake_stdin>:
	...

000d9478 <__sf_fake_stdout>:
	...

000d9498 <__sf_fake_stderr>:
	...
   d94b8:	0043                                        C.

000d94ba <link_const_variable_data_end>:
	...

000d94bc <link_constructors_location>:
   d94bc:	000d4375 	.word	0x000d4375
   d94c0:	000d4a0f 	.word	0x000d4a0f
   d94c4:	000d4f0d 	.word	0x000d4f0d
   d94c8:	000d560d 	.word	0x000d560d
   d94cc:	000d598b 	.word	0x000d598b
   d94d0:	000d5a8b 	.word	0x000d5a8b
   d94d4:	000d5af9 	.word	0x000d5af9
   d94d8:	000d5afd 	.word	0x000d5afd
   d94dc:	000d5b01 	.word	0x000d5b01
   d94e0:	000d5b1f 	.word	0x000d5b1f
   d94e4:	000d5b23 	.word	0x000d5b23
   d94e8:	000d5b27 	.word	0x000d5b27
   d94ec:	000d5b2b 	.word	0x000d5b2b
   d94f0:	000d5fc5 	.word	0x000d5fc5
   d94f4:	000d5fe9 	.word	0x000d5fe9
   d94f8:	000d5fed 	.word	0x000d5fed
   d94fc:	000d62d5 	.word	0x000d62d5
   d9500:	000d62d9 	.word	0x000d62d9
   d9504:	000d62dd 	.word	0x000d62dd
   d9508:	000d6817 	.word	0x000d6817
   d950c:	000d681b 	.word	0x000d681b
   d9510:	000d681f 	.word	0x000d681f
   d9514:	000d68c5 	.word	0x000d68c5
   d9518:	000d68fd 	.word	0x000d68fd
   d951c:	000d6f01 	.word	0x000d6f01
   d9520:	000d71b1 	.word	0x000d71b1
   d9524:	000d71f5 	.word	0x000d71f5
   d9528:	000d7339 	.word	0x000d7339
   d952c:	000d7349 	.word	0x000d7349
   d9530:	000d7399 	.word	0x000d7399
   d9534:	000d7a21 	.word	0x000d7a21
   d9538:	000d8069 	.word	0x000d8069
   d953c:	000d81b1 	.word	0x000d81b1
   d9540:	000d83e5 	.word	0x000d83e5
   d9544:	000d8469 	.word	0x000d8469
   d9548:	000d852d 	.word	0x000d852d
   d954c:	000d85f1 	.word	0x000d85f1
