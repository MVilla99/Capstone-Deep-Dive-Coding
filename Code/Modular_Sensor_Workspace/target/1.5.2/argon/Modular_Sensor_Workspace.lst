
c:/Users/mauri/Documents/IoTc2/Capstone-Deep-Dive-Coding/Code/Modular_Sensor_Workspace/target/1.5.2/argon/Modular_Sensor_Workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006f40  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000daf60  000daf60  0000af60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000daf68  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  2003d8c8  000daf6c  0001d8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000aac  2003dd44  2003dd44  0002dd44  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000db3e8  000db3e8  0002b3e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000db410  000db410  0002b410  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001b3c8b  00000000  00000000  0002b414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00022bce  00000000  00000000  001df09f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002de32  00000000  00000000  00201c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003348  00000000  00000000  0022fa9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005fb8  00000000  00000000  00232de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000543fb  00000000  00000000  00238d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0005fae6  00000000  00000000  0028d19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001128f8  00000000  00000000  002ecc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000f82c  00000000  00000000  003ff578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 f88d 	bl	da150 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 f892 	bl	da166 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003d8c8 	.word	0x2003d8c8
   d404c:	000daf6c 	.word	0x000daf6c
   d4050:	2003dd44 	.word	0x2003dd44
   d4054:	2003dd44 	.word	0x2003dd44
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 fea3 	bl	d6da8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000daf60 	.word	0x000daf60
   d4084:	000daecc 	.word	0x000daecc

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b88a 	b.w	d41a0 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8f1 	bl	d4274 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 be49 	b.w	d6d2c <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 bb91 	b.w	d67c0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bb97 	b.w	d67d0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bb95 	b.w	d67d0 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 faf2 	bl	d6698 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d63e9 	.word	0x000d63e9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40cc:	4770      	bx	lr

000d40ce <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40d0:	4770      	bx	lr
	...

000d40d4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40d6:	4602      	mov	r2, r0
   d40d8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40da:	7913      	ldrb	r3, [r2, #4]
   d40dc:	6895      	ldr	r5, [r2, #8]
   d40de:	b133      	cbz	r3, d40ee <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40e0:	b93d      	cbnz	r5, d40f2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40e2:	490c      	ldr	r1, [pc, #48]	; (d4114 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40e4:	b004      	add	sp, #16
   d40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40ea:	f002 bd61 	b.w	d6bb0 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40ee:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40f0:	e000      	b.n	d40f4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40f2:	4b0a      	ldr	r3, [pc, #40]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40f4:	7b16      	ldrb	r6, [r2, #12]
   d40f6:	4c0a      	ldr	r4, [pc, #40]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40f8:	490a      	ldr	r1, [pc, #40]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40fa:	7b52      	ldrb	r2, [r2, #13]
   d40fc:	9202      	str	r2, [sp, #8]
   d40fe:	2e01      	cmp	r6, #1
   d4100:	bf08      	it	eq
   d4102:	4621      	moveq	r1, r4
   d4104:	9101      	str	r1, [sp, #4]
   d4106:	9500      	str	r5, [sp, #0]
   d4108:	4a07      	ldr	r2, [pc, #28]	; (d4128 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d410a:	2100      	movs	r1, #0
   d410c:	f002 fd83 	bl	d6c16 <_ZN5Print11printf_implEbPKcz>
  }
   d4110:	b004      	add	sp, #16
   d4112:	bd70      	pop	{r4, r5, r6, pc}
   d4114:	000da231 	.word	0x000da231
   d4118:	000da975 	.word	0x000da975
   d411c:	000da220 	.word	0x000da220
   d4120:	000da229 	.word	0x000da229
   d4124:	000da22d 	.word	0x000da22d
   d4128:	000da247 	.word	0x000da247

000d412c <_ZN6SdFileD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	212c      	movs	r1, #44	; 0x2c
   d4130:	4604      	mov	r4, r0
   d4132:	f003 fde1 	bl	d7cf8 <_ZdlPvj>
   d4136:	4620      	mov	r0, r4
   d4138:	bd10      	pop	{r4, pc}

000d413a <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d413a:	3008      	adds	r0, #8
   d413c:	f001 bcc2 	b.w	d5ac4 <_ZN7FatFile5writeEPKvj>

000d4140 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4140:	b507      	push	{r0, r1, r2, lr}
   d4142:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4144:	2201      	movs	r2, #1
   d4146:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d414a:	3008      	adds	r0, #8
   d414c:	4619      	mov	r1, r3
   d414e:	f001 fcb9 	bl	d5ac4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4152:	b003      	add	sp, #12
   d4154:	f85d fb04 	ldr.w	pc, [sp], #4

000d4158 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4158:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d415a:	6984      	ldr	r4, [r0, #24]
   d415c:	4b0a      	ldr	r3, [pc, #40]	; (d4188 <_ZN9TCPClientD1Ev+0x30>)
   d415e:	6003      	str	r3, [r0, #0]
   d4160:	4605      	mov	r5, r0
   d4162:	b17c      	cbz	r4, d4184 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4164:	6863      	ldr	r3, [r4, #4]
   d4166:	3b01      	subs	r3, #1
   d4168:	6063      	str	r3, [r4, #4]
   d416a:	b95b      	cbnz	r3, d4184 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d416c:	6823      	ldr	r3, [r4, #0]
   d416e:	4620      	mov	r0, r4
   d4170:	689b      	ldr	r3, [r3, #8]
   d4172:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4174:	68a3      	ldr	r3, [r4, #8]
   d4176:	3b01      	subs	r3, #1
   d4178:	60a3      	str	r3, [r4, #8]
   d417a:	b91b      	cbnz	r3, d4184 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d417c:	6823      	ldr	r3, [r4, #0]
   d417e:	4620      	mov	r0, r4
   d4180:	68db      	ldr	r3, [r3, #12]
   d4182:	4798      	blx	r3
   d4184:	4628      	mov	r0, r5
   d4186:	bd38      	pop	{r3, r4, r5, pc}
   d4188:	000dad88 	.word	0x000dad88

000d418c <_ZN9TCPClientD0Ev>:
   d418c:	b510      	push	{r4, lr}
   d418e:	4604      	mov	r4, r0
   d4190:	f7ff ffe2 	bl	d4158 <_ZN9TCPClientD1Ev>
   d4194:	4620      	mov	r0, r4
   d4196:	211c      	movs	r1, #28
   d4198:	f003 fdae 	bl	d7cf8 <_ZdlPvj>
   d419c:	4620      	mov	r0, r4
   d419e:	bd10      	pop	{r4, pc}

000d41a0 <setup>:
float temp;
float press;
float hum;
float alt;

void setup() {
   d41a0:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d41a2:	f002 ff17 	bl	d6fd4 <_Z16_fetch_usbserialv>
   d41a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41aa:	f002 ff07 	bl	d6fbc <_ZN9USBSerial5beginEl>
  delay(100); // waiting for serial monitor to initialize 
  Wire.begin();
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d41ae:	4c0f      	ldr	r4, [pc, #60]	; (d41ec <setup+0x4c>)
float hum;
float alt;

void setup() {
  Serial.begin(9600);
  delay(100); // waiting for serial monitor to initialize 
   d41b0:	2064      	movs	r0, #100	; 0x64
   d41b2:	f002 fd7d 	bl	d6cb0 <delay>
  Wire.begin();
   d41b6:	f003 fd6b 	bl	d7c90 <_Z19__fetch_global_Wirev>
   d41ba:	f002 fff1 	bl	d71a0 <_ZN7TwoWire5beginEv>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d41be:	223c      	movs	r2, #60	; 0x3c
   d41c0:	2102      	movs	r1, #2
   d41c2:	4620      	mov	r0, r4
   d41c4:	f001 f804 	bl	d51d0 <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   d41c8:	4620      	mov	r0, r4
   d41ca:	f001 f8d3 	bl	d5374 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();
   d41ce:	4620      	mov	r0, r4
   d41d0:	f000 ffae 	bl	d5130 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d41d4:	4620      	mov	r0, r4
   d41d6:	f001 f8cd 	bl	d5374 <_ZN16Adafruit_SSD13067displayEv>

  bme.begin(0x76);
   d41da:	2176      	movs	r1, #118	; 0x76
   d41dc:	4804      	ldr	r0, [pc, #16]	; (d41f0 <setup+0x50>)
   d41de:	f000 fdb9 	bl	d4d54 <_ZN15Adafruit_BME2805beginEh>
  senseAQ.init();
   d41e2:	4804      	ldr	r0, [pc, #16]	; (d41f4 <setup+0x54>)
    Serial.println("FILE_BASE_NAME too long");
    while(1);
  }
  file.printf("timestamp, whatever data"); // printing data header. "timestamp" and "data" are remanents
  */
}
   d41e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
  display.clearDisplay();
  display.display();

  bme.begin(0x76);
  senseAQ.init();
   d41e8:	f002 b827 	b.w	d623a <_ZN16AirQualitySensor4initEv>
   d41ec:	2003dea0 	.word	0x2003dea0
   d41f0:	2003dd64 	.word	0x2003dd64
   d41f4:	2003de80 	.word	0x2003de80

000d41f8 <_Z8BMEreadsv>:
      Serial.printf("Ready for next data log \n");
    }
  }
}

void BMEreads(){
   d41f8:	b510      	push	{r4, lr}
 

  temp = (bme.readTemperature()* 9/5)+32; // converted to fahrenheit becasue 'merica
   d41fa:	4c16      	ldr	r4, [pc, #88]	; (d4254 <_Z8BMEreadsv+0x5c>)
   d41fc:	4620      	mov	r0, r4
   d41fe:	f000 f9f5 	bl	d45ec <_ZN15Adafruit_BME28015readTemperatureEv>
   d4202:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4206:	ee20 0a27 	vmul.f32	s0, s0, s15
   d420a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   d420e:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d4212:	4b11      	ldr	r3, [pc, #68]	; (d4258 <_Z8BMEreadsv+0x60>)
  hum = bme.readHumidity();
   d4214:	4620      	mov	r0, r4
}

void BMEreads(){
 

  temp = (bme.readTemperature()* 9/5)+32; // converted to fahrenheit becasue 'merica
   d4216:	ed9f 7a11 	vldr	s14, [pc, #68]	; d425c <_Z8BMEreadsv+0x64>
   d421a:	ee77 7a87 	vadd.f32	s15, s15, s14
   d421e:	edc3 7a00 	vstr	s15, [r3]
  hum = bme.readHumidity();
   d4222:	f000 fb93 	bl	d494c <_ZN15Adafruit_BME28012readHumidityEv>
   d4226:	4b0e      	ldr	r3, [pc, #56]	; (d4260 <_Z8BMEreadsv+0x68>)
  press = (bme.readPressure() / 100.0F);
   d4228:	4620      	mov	r0, r4

void BMEreads(){
 

  temp = (bme.readTemperature()* 9/5)+32; // converted to fahrenheit becasue 'merica
  hum = bme.readHumidity();
   d422a:	ed83 0a00 	vstr	s0, [r3]
  press = (bme.readPressure() / 100.0F);
   d422e:	f000 fa0b 	bl	d4648 <_ZN15Adafruit_BME28012readPressureEv>
   d4232:	eddf 7a0c 	vldr	s15, [pc, #48]	; d4264 <_Z8BMEreadsv+0x6c>
   d4236:	4b0c      	ldr	r3, [pc, #48]	; (d4268 <_Z8BMEreadsv+0x70>)
   d4238:	ee80 0a27 	vdiv.f32	s0, s0, s15
  alt = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d423c:	4620      	mov	r0, r4
void BMEreads(){
 

  temp = (bme.readTemperature()* 9/5)+32; // converted to fahrenheit becasue 'merica
  hum = bme.readHumidity();
  press = (bme.readPressure() / 100.0F);
   d423e:	ed83 0a00 	vstr	s0, [r3]
  alt = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d4242:	ed9f 0a0a 	vldr	s0, [pc, #40]	; d426c <_Z8BMEreadsv+0x74>
   d4246:	f000 fadf 	bl	d4808 <_ZN15Adafruit_BME28012readAltitudeEf>
   d424a:	4b09      	ldr	r3, [pc, #36]	; (d4270 <_Z8BMEreadsv+0x78>)
   d424c:	ed83 0a00 	vstr	s0, [r3]
   d4250:	bd10      	pop	{r4, pc}
   d4252:	bf00      	nop
   d4254:	2003dd64 	.word	0x2003dd64
   d4258:	2003dd60 	.word	0x2003dd60
   d425c:	42000000 	.word	0x42000000
   d4260:	2003de7c 	.word	0x2003de7c
   d4264:	42c80000 	.word	0x42c80000
   d4268:	2003e3c8 	.word	0x2003e3c8
   d426c:	447d5000 	.word	0x447d5000
   d4270:	2003de9c 	.word	0x2003de9c

000d4274 <loop>:
  file.printf("timestamp, whatever data"); // printing data header. "timestamp" and "data" are remanents
  */
}


void loop() {
   d4274:	b510      	push	{r4, lr}
   d4276:	b088      	sub	sp, #32
//MQTT_connect(); // still need to impliment the subscribe/publish code.
BMEreads();
   d4278:	f7ff ffbe 	bl	d41f8 <_Z8BMEreadsv>
Serial.printf("temp: %0.2f alt: %0.2f M press: %0.2f hum: %0.2f \n",temp,alt,press,hum);
   d427c:	f002 feaa 	bl	d6fd4 <_Z16_fetch_usbserialv>
   d4280:	4b12      	ldr	r3, [pc, #72]	; (d42cc <loop+0x58>)
   d4282:	4604      	mov	r4, r0
   d4284:	6818      	ldr	r0, [r3, #0]
   d4286:	f005 f92f 	bl	d94e8 <__aeabi_f2d>
   d428a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d428e:	4b10      	ldr	r3, [pc, #64]	; (d42d0 <loop+0x5c>)
   d4290:	6818      	ldr	r0, [r3, #0]
   d4292:	f005 f929 	bl	d94e8 <__aeabi_f2d>
   d4296:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d429a:	4b0e      	ldr	r3, [pc, #56]	; (d42d4 <loop+0x60>)
   d429c:	6818      	ldr	r0, [r3, #0]
   d429e:	f005 f923 	bl	d94e8 <__aeabi_f2d>
   d42a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d42a6:	4b0c      	ldr	r3, [pc, #48]	; (d42d8 <loop+0x64>)
   d42a8:	6818      	ldr	r0, [r3, #0]
   d42aa:	f005 f91d 	bl	d94e8 <__aeabi_f2d>
   d42ae:	4a0b      	ldr	r2, [pc, #44]	; (d42dc <loop+0x68>)
   d42b0:	e9cd 0100 	strd	r0, r1, [sp]
   d42b4:	2100      	movs	r1, #0
   d42b6:	4620      	mov	r0, r4
   d42b8:	f002 fcad 	bl	d6c16 <_ZN5Print11printf_implEbPKcz>
delay(5000);
   d42bc:	f241 3088 	movw	r0, #5000	; 0x1388

}
   d42c0:	b008      	add	sp, #32
   d42c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void loop() {
//MQTT_connect(); // still need to impliment the subscribe/publish code.
BMEreads();
Serial.printf("temp: %0.2f alt: %0.2f M press: %0.2f hum: %0.2f \n",temp,alt,press,hum);
delay(5000);
   d42c6:	f002 bcf3 	b.w	d6cb0 <delay>
   d42ca:	bf00      	nop
   d42cc:	2003de7c 	.word	0x2003de7c
   d42d0:	2003e3c8 	.word	0x2003e3c8
   d42d4:	2003de9c 	.word	0x2003de9c
   d42d8:	2003dd60 	.word	0x2003dd60
   d42dc:	000da2b5 	.word	0x000da2b5

000d42e0 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d42e0:	b510      	push	{r4, lr}
   d42e2:	21d4      	movs	r1, #212	; 0xd4
   d42e4:	4604      	mov	r4, r0
   d42e6:	f003 fd07 	bl	d7cf8 <_ZdlPvj>
   d42ea:	4620      	mov	r0, r4
   d42ec:	bd10      	pop	{r4, pc}

000d42ee <_ZN16Adafruit_SSD1306D0Ev>:
   d42ee:	b510      	push	{r4, lr}
   d42f0:	2124      	movs	r1, #36	; 0x24
   d42f2:	4604      	mov	r4, r0
   d42f4:	f003 fd00 	bl	d7cf8 <_ZdlPvj>
   d42f8:	4620      	mov	r0, r4
   d42fa:	bd10      	pop	{r4, pc}

000d42fc <_GLOBAL__sub_I_logTime>:

  temp = (bme.readTemperature()* 9/5)+32; // converted to fahrenheit becasue 'merica
  hum = bme.readHumidity();
  press = (bme.readPressure() / 100.0F);
  alt = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d42fc:	b573      	push	{r0, r1, r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42fe:	f001 ffc3 	bl	d6288 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4302:	4b39      	ldr	r3, [pc, #228]	; (d43e8 <_GLOBAL__sub_I_logTime+0xec>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4304:	4e39      	ldr	r6, [pc, #228]	; (d43ec <_GLOBAL__sub_I_logTime+0xf0>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4306:	2164      	movs	r1, #100	; 0x64
   d4308:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d430c:	4938      	ldr	r1, [pc, #224]	; (d43f0 <_GLOBAL__sub_I_logTime+0xf4>)
   d430e:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d4312:	2101      	movs	r1, #1
   d4314:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d4318:	6831      	ldr	r1, [r6, #0]
   d431a:	2200      	movs	r2, #0
   d431c:	f011 0501 	ands.w	r5, r1, #1
   d4320:	71da      	strb	r2, [r3, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4322:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d4326:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d432a:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d432e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4332:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d4336:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d433a:	461c      	mov	r4, r3
   d433c:	d10a      	bne.n	d4354 <_GLOBAL__sub_I_logTime+0x58>
   d433e:	4630      	mov	r0, r6
   d4340:	f7ff febc 	bl	d40bc <__cxa_guard_acquire>
   d4344:	b130      	cbz	r0, d4354 <_GLOBAL__sub_I_logTime+0x58>
   d4346:	4629      	mov	r1, r5
   d4348:	482a      	ldr	r0, [pc, #168]	; (d43f4 <_GLOBAL__sub_I_logTime+0xf8>)
   d434a:	f002 fa9d 	bl	d6888 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d434e:	4630      	mov	r0, r6
   d4350:	f7ff feb9 	bl	d40c6 <__cxa_guard_release>
   d4354:	4828      	ldr	r0, [pc, #160]	; (d43f8 <_GLOBAL__sub_I_logTime+0xfc>)
const uint8_t BASE_NAME_SIZE = sizeof(FILE_BASE_NAME) -1;
  #define error(msg) sd.errorHalt(msg)


/*      for subscribing | publishing        */
  TCPClient TheClient;
   d4356:	4e29      	ldr	r6, [pc, #164]	; (d43fc <_GLOBAL__sub_I_logTime+0x100>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4358:	4b26      	ldr	r3, [pc, #152]	; (d43f4 <_GLOBAL__sub_I_logTime+0xf8>)
   d435a:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d435e:	2500      	movs	r5, #0
 public:
  SdFile() {}
   d4360:	4b27      	ldr	r3, [pc, #156]	; (d4400 <_GLOBAL__sub_I_logTime+0x104>)
unsigned long logTime;
bool logStart; 
const int chipSelect = SS;
int i;
SdFat sd;
SdFile file;
   d4362:	4a28      	ldr	r2, [pc, #160]	; (d4404 <_GLOBAL__sub_I_logTime+0x108>)
   d4364:	4928      	ldr	r1, [pc, #160]	; (d4408 <_GLOBAL__sub_I_logTime+0x10c>)
   d4366:	7205      	strb	r5, [r0, #8]
   d4368:	7245      	strb	r5, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d436a:	6045      	str	r5, [r0, #4]
   d436c:	6003      	str	r3, [r0, #0]
   d436e:	f003 fcb5 	bl	d7cdc <__aeabi_atexit>
const uint8_t BASE_NAME_SIZE = sizeof(FILE_BASE_NAME) -1;
  #define error(msg) sd.errorHalt(msg)


/*      for subscribing | publishing        */
  TCPClient TheClient;
   d4372:	4630      	mov	r0, r6
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4374:	4c25      	ldr	r4, [pc, #148]	; (d440c <_GLOBAL__sub_I_logTime+0x110>)
   d4376:	f003 fac3 	bl	d7900 <_ZN9TCPClientC1Ev>
   d437a:	4a22      	ldr	r2, [pc, #136]	; (d4404 <_GLOBAL__sub_I_logTime+0x108>)
   d437c:	4924      	ldr	r1, [pc, #144]	; (d4410 <_GLOBAL__sub_I_logTime+0x114>)
   d437e:	4630      	mov	r0, r6
   d4380:	f003 fcac 	bl	d7cdc <__aeabi_atexit>
   d4384:	4b23      	ldr	r3, [pc, #140]	; (d4414 <_GLOBAL__sub_I_logTime+0x118>)
   d4386:	9300      	str	r3, [sp, #0]
   d4388:	f240 7229 	movw	r2, #1833	; 0x729
   d438c:	4b22      	ldr	r3, [pc, #136]	; (d4418 <_GLOBAL__sub_I_logTime+0x11c>)
   d438e:	4923      	ldr	r1, [pc, #140]	; (d441c <_GLOBAL__sub_I_logTime+0x120>)
   d4390:	4620      	mov	r0, r4
   d4392:	f001 faaf 	bl	d58f4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4396:	4b22      	ldr	r3, [pc, #136]	; (d4420 <_GLOBAL__sub_I_logTime+0x124>)
  Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d4398:	4a1a      	ldr	r2, [pc, #104]	; (d4404 <_GLOBAL__sub_I_logTime+0x108>)
   d439a:	4922      	ldr	r1, [pc, #136]	; (d4424 <_GLOBAL__sub_I_logTime+0x128>)
   d439c:	6023      	str	r3, [r4, #0]
   d439e:	4620      	mov	r0, r4
   d43a0:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d43a4:	f003 fc9a 	bl	d7cdc <__aeabi_atexit>
  Adafruit_MQTT_Subscribe subData = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/ "); // put feed
   d43a8:	462b      	mov	r3, r5
   d43aa:	4621      	mov	r1, r4
   d43ac:	4a1e      	ldr	r2, [pc, #120]	; (d4428 <_GLOBAL__sub_I_logTime+0x12c>)
   d43ae:	481f      	ldr	r0, [pc, #124]	; (d442c <_GLOBAL__sub_I_logTime+0x130>)
   d43b0:	f001 fac7 	bl	d5942 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Publish pubData = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds "); // put feed
   d43b4:	462b      	mov	r3, r5
   d43b6:	4a1e      	ldr	r2, [pc, #120]	; (d4430 <_GLOBAL__sub_I_logTime+0x134>)
   d43b8:	481e      	ldr	r0, [pc, #120]	; (d4434 <_GLOBAL__sub_I_logTime+0x138>)
   d43ba:	4621      	mov	r1, r4
   d43bc:	f001 fabc 	bl	d5938 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

  
Adafruit_BME280 bme; // for bme 
   d43c0:	481d      	ldr	r0, [pc, #116]	; (d4438 <_GLOBAL__sub_I_logTime+0x13c>)
   d43c2:	f000 f841 	bl	d4448 <_ZN15Adafruit_BME280C1Ev>
  #define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_SSD1306 display(OLED_RESET); // for oled
   d43c6:	2113      	movs	r1, #19
   d43c8:	481c      	ldr	r0, [pc, #112]	; (d443c <_GLOBAL__sub_I_logTime+0x140>)
   d43ca:	f000 fe9b 	bl	d5104 <_ZN16Adafruit_SSD1306C1Ea>
   d43ce:	4a0d      	ldr	r2, [pc, #52]	; (d4404 <_GLOBAL__sub_I_logTime+0x108>)
   d43d0:	491b      	ldr	r1, [pc, #108]	; (d4440 <_GLOBAL__sub_I_logTime+0x144>)
   d43d2:	481a      	ldr	r0, [pc, #104]	; (d443c <_GLOBAL__sub_I_logTime+0x140>)
   d43d4:	f003 fc82 	bl	d7cdc <__aeabi_atexit>
AirQualitySensor senseAQ(A2); // put sensor pin in here
   d43d8:	481a      	ldr	r0, [pc, #104]	; (d4444 <_GLOBAL__sub_I_logTime+0x148>)
   d43da:	2111      	movs	r1, #17

  temp = (bme.readTemperature()* 9/5)+32; // converted to fahrenheit becasue 'merica
  hum = bme.readHumidity();
  press = (bme.readPressure() / 100.0F);
  alt = bme.readAltitude(SEALEVELPRESSURE_HPA);
   d43dc:	b002      	add	sp, #8
   d43de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  
Adafruit_BME280 bme; // for bme 
  #define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_SSD1306 display(OLED_RESET); // for oled
AirQualitySensor senseAQ(A2); // put sensor pin in here
   d43e2:	f001 bf25 	b.w	d6230 <_ZN16AirQualitySensorC1Ei>
   d43e6:	bf00      	nop
   d43e8:	2003df44 	.word	0x2003df44
   d43ec:	2003dd48 	.word	0x2003dd48
   d43f0:	000da204 	.word	0x000da204
   d43f4:	2003dd4c 	.word	0x2003dd4c
   d43f8:	2003dee0 	.word	0x2003dee0
   d43fc:	2003dec4 	.word	0x2003dec4
   d4400:	000da210 	.word	0x000da210
   d4404:	2003dd44 	.word	0x2003dd44
   d4408:	000d40cd 	.word	0x000d40cd
   d440c:	2003dda8 	.word	0x2003dda8
   d4410:	000d4159 	.word	0x000d4159
   d4414:	000da36f 	.word	0x000da36f
   d4418:	000da353 	.word	0x000da353
   d441c:	000da35f 	.word	0x000da35f
   d4420:	000da928 	.word	0x000da928
   d4424:	000d40cf 	.word	0x000d40cf
   d4428:	000da38a 	.word	0x000da38a
   d442c:	2003df0c 	.word	0x2003df0c
   d4430:	000da39e 	.word	0x000da39e
   d4434:	2003dd54 	.word	0x2003dd54
   d4438:	2003dd64 	.word	0x2003dd64
   d443c:	2003dea0 	.word	0x2003dea0
   d4440:	000d40d1 	.word	0x000d40d1
   d4444:	2003de80 	.word	0x2003de80

000d4448 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4448:	22ff      	movs	r2, #255	; 0xff
   d444a:	7402      	strb	r2, [r0, #16]
   d444c:	7442      	strb	r2, [r0, #17]
   d444e:	7482      	strb	r2, [r0, #18]
   d4450:	74c2      	strb	r2, [r0, #19]
{ }
   d4452:	4770      	bx	lr

000d4454 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4454:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4456:	4d09      	ldr	r5, [pc, #36]	; (d447c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4458:	6829      	ldr	r1, [r5, #0]
   d445a:	f011 0401 	ands.w	r4, r1, #1
   d445e:	d10a      	bne.n	d4476 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4460:	4628      	mov	r0, r5
   d4462:	f7ff fe2b 	bl	d40bc <__cxa_guard_acquire>
   d4466:	b130      	cbz	r0, d4476 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4468:	4621      	mov	r1, r4
   d446a:	4805      	ldr	r0, [pc, #20]	; (d4480 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d446c:	f002 fa0c 	bl	d6888 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4470:	4628      	mov	r0, r5
   d4472:	f7ff fe28 	bl	d40c6 <__cxa_guard_release>
        return instance;
    }
   d4476:	4802      	ldr	r0, [pc, #8]	; (d4480 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4478:	bd38      	pop	{r3, r4, r5, pc}
   d447a:	bf00      	nop
   d447c:	2003dd48 	.word	0x2003dd48
   d4480:	2003dd4c 	.word	0x2003dd4c

000d4484 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4488:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d448c:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d448e:	4605      	mov	r5, r0
   d4490:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4492:	d106      	bne.n	d44a2 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4494:	f7ff ffde 	bl	d4454 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4498:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d449a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d449e:	f002 bb0f 	b.w	d6ac0 <_ZN8SPIClass8transferEh>
   d44a2:	2607      	movs	r6, #7
   d44a4:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d44a6:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d44aa:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d44ae:	2100      	movs	r1, #0
   d44b0:	b280      	uxth	r0, r0
   d44b2:	f003 fb6c 	bl	d7b8e <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d44b6:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d44ba:	fa08 f106 	lsl.w	r1, r8, r6
   d44be:	4039      	ands	r1, r7
   d44c0:	b280      	uxth	r0, r0
   d44c2:	f003 fb64 	bl	d7b8e <digitalWrite>
        digitalWrite(_sck, HIGH);
   d44c6:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d44ca:	2101      	movs	r1, #1
   d44cc:	b280      	uxth	r0, r0
   d44ce:	f003 fb5e 	bl	d7b8e <digitalWrite>
        if (digitalRead(_miso))
   d44d2:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d44d6:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d44d8:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d44da:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d44dc:	f003 fb70 	bl	d7bc0 <digitalRead>
   d44e0:	b108      	cbz	r0, d44e6 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d44e2:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d44e6:	f116 36ff 	adds.w	r6, r6, #4294967295
   d44ea:	d2de      	bcs.n	d44aa <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d44ec:	4620      	mov	r0, r4
   d44ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d44f2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d44f2:	b508      	push	{r3, lr}
        instance().endTransaction();
   d44f4:	f7ff ffae 	bl	d4454 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d44f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d44fc:	f002 ba01 	b.w	d6902 <_ZN8SPIClass14endTransactionEv>

000d4500 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4500:	b510      	push	{r4, lr}
   d4502:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4504:	f7ff ffa6 	bl	d4454 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4508:	4621      	mov	r1, r4
    }
   d450a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d450e:	f002 ba11 	b.w	d6934 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d4514 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4514:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4516:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d451a:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d451c:	b085      	sub	sp, #20
   d451e:	4604      	mov	r4, r0
   d4520:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d4522:	d121      	bne.n	d4568 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4524:	7901      	ldrb	r1, [r0, #4]
   d4526:	6800      	ldr	r0, [r0, #0]
   d4528:	f002 fe71 	bl	d720e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d452c:	6820      	ldr	r0, [r4, #0]
   d452e:	6803      	ldr	r3, [r0, #0]
   d4530:	4629      	mov	r1, r5
   d4532:	689b      	ldr	r3, [r3, #8]
   d4534:	4798      	blx	r3
        _wire -> endTransmission();
   d4536:	6820      	ldr	r0, [r4, #0]
   d4538:	f002 fe74 	bl	d7224 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d453c:	2203      	movs	r2, #3
   d453e:	7921      	ldrb	r1, [r4, #4]
   d4540:	6820      	ldr	r0, [r4, #0]
   d4542:	f002 fe61 	bl	d7208 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4546:	6820      	ldr	r0, [r4, #0]
   d4548:	6803      	ldr	r3, [r0, #0]
   d454a:	695b      	ldr	r3, [r3, #20]
   d454c:	4798      	blx	r3
        value <<= 8;
   d454e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4550:	6820      	ldr	r0, [r4, #0]
   d4552:	6803      	ldr	r3, [r0, #0]
   d4554:	695b      	ldr	r3, [r3, #20]
   d4556:	4798      	blx	r3
   d4558:	4328      	orrs	r0, r5
        value <<= 8;
   d455a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d455c:	6820      	ldr	r0, [r4, #0]
   d455e:	6803      	ldr	r3, [r0, #0]
   d4560:	695b      	ldr	r3, [r3, #20]
   d4562:	4798      	blx	r3
   d4564:	4305      	orrs	r5, r0
   d4566:	e039      	b.n	d45dc <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d4568:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d456c:	3301      	adds	r3, #1
   d456e:	d10e      	bne.n	d458e <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4570:	4b1c      	ldr	r3, [pc, #112]	; (d45e4 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4572:	4a1d      	ldr	r2, [pc, #116]	; (d45e8 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d4574:	9300      	str	r3, [sp, #0]
   d4576:	9202      	str	r2, [sp, #8]
   d4578:	2300      	movs	r3, #0
   d457a:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d457c:	4668      	mov	r0, sp
   d457e:	f88d 3004 	strb.w	r3, [sp, #4]
   d4582:	f88d 200c 	strb.w	r2, [sp, #12]
   d4586:	f88d 300d 	strb.w	r3, [sp, #13]
   d458a:	f7ff ffb9 	bl	d4500 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d458e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4592:	2100      	movs	r1, #0
   d4594:	b280      	uxth	r0, r0
   d4596:	f003 fafa 	bl	d7b8e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d459a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d459e:	4620      	mov	r0, r4
   d45a0:	f7ff ff70 	bl	d4484 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d45a4:	2100      	movs	r1, #0
   d45a6:	4620      	mov	r0, r4
   d45a8:	f7ff ff6c 	bl	d4484 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d45ac:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d45ae:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d45b0:	4620      	mov	r0, r4
   d45b2:	f7ff ff67 	bl	d4484 <_ZN15Adafruit_BME2807spixferEh>
   d45b6:	4328      	orrs	r0, r5
        value <<= 8;
   d45b8:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d45ba:	2100      	movs	r1, #0
   d45bc:	4620      	mov	r0, r4
   d45be:	f7ff ff61 	bl	d4484 <_ZN15Adafruit_BME2807spixferEh>
   d45c2:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d45c4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d45c8:	2101      	movs	r1, #1
   d45ca:	b280      	uxth	r0, r0
   d45cc:	f003 fadf 	bl	d7b8e <digitalWrite>
        if (_sck == -1)
   d45d0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d45d4:	3301      	adds	r3, #1
   d45d6:	d101      	bne.n	d45dc <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d45d8:	f7ff ff8b 	bl	d44f2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d45dc:	4628      	mov	r0, r5
   d45de:	b005      	add	sp, #20
   d45e0:	bd30      	pop	{r4, r5, pc}
   d45e2:	bf00      	nop
   d45e4:	000da204 	.word	0x000da204
   d45e8:	0007a120 	.word	0x0007a120

000d45ec <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d45ec:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d45ee:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d45f0:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d45f2:	f7ff ff8f 	bl	d4514 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d45f6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d45fa:	d01e      	beq.n	d463a <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d45fc:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d45fe:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4640 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4602:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d4606:	0052      	lsls	r2, r2, #1
   d4608:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d460c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4610:	435b      	muls	r3, r3
   d4612:	4350      	muls	r0, r2
   d4614:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4618:	131b      	asrs	r3, r3, #12
   d461a:	4353      	muls	r3, r2
   d461c:	139b      	asrs	r3, r3, #14
   d461e:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4622:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4624:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4628:	3080      	adds	r0, #128	; 0x80
   d462a:	1200      	asrs	r0, r0, #8
   d462c:	ee07 0a90 	vmov	s15, r0
   d4630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4634:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4638:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d463a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4644 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d463e:	bd10      	pop	{r4, pc}
   d4640:	42c80000 	.word	0x42c80000
   d4644:	7fc00000 	.word	0x7fc00000

000d4648 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d4648:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d464c:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d464e:	f7ff ffcd 	bl	d45ec <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4652:	21f7      	movs	r1, #247	; 0xf7
   d4654:	4630      	mov	r0, r6
   d4656:	f7ff ff5d 	bl	d4514 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d465a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d465e:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4660:	f000 80c1 	beq.w	d47e6 <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4664:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4666:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d466a:	17e5      	asrs	r5, r4, #31
   d466c:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d4670:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4674:	fba4 8904 	umull	r8, r9, r4, r4
   d4678:	fb04 f305 	mul.w	r3, r4, r5
   d467c:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4680:	fb02 f105 	mul.w	r1, r2, r5
   d4684:	17d3      	asrs	r3, r2, #31
   d4686:	fb04 1103 	mla	r1, r4, r3, r1
   d468a:	fba2 2304 	umull	r2, r3, r2, r4
   d468e:	440b      	add	r3, r1
   d4690:	0319      	lsls	r1, r3, #12
   d4692:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d4696:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4698:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d469c:	17d3      	asrs	r3, r2, #31
   d469e:	fb02 fe09 	mul.w	lr, r2, r9
   d46a2:	fb08 ee03 	mla	lr, r8, r3, lr
   d46a6:	fba2 2308 	umull	r2, r3, r2, r8
   d46aa:	4473      	add	r3, lr
   d46ac:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d46b0:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d46b4:	eb1a 0a00 	adds.w	sl, sl, r0
   d46b8:	8b72      	ldrh	r2, [r6, #26]
   d46ba:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d46be:	eb4b 0b01 	adc.w	fp, fp, r1
   d46c2:	f11a 0000 	adds.w	r0, sl, #0
   d46c6:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d46ca:	fba0 ab02 	umull	sl, fp, r0, r2
   d46ce:	fb02 bb01 	mla	fp, r2, r1, fp
   d46d2:	ea4f 026b 	mov.w	r2, fp, asr #1
   d46d6:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d46da:	ea52 0103 	orrs.w	r1, r2, r3
   d46de:	f000 8086 	beq.w	d47ee <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d46e2:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d46e6:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d46ea:	fb0a f109 	mul.w	r1, sl, r9
   d46ee:	fb08 110b 	mla	r1, r8, fp, r1
   d46f2:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d46f6:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d46fa:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d46fc:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4700:	fb0a f105 	mul.w	r1, sl, r5
   d4704:	fb04 110b 	mla	r1, r4, fp, r1
   d4708:	fbaa 4504 	umull	r4, r5, sl, r4
   d470c:	440d      	add	r5, r1
   d470e:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d4712:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4716:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4718:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d471c:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4720:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d4724:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4728:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d472c:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d4730:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d4734:	07c4      	lsls	r4, r0, #31
   d4736:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d473a:	f04f 0800 	mov.w	r8, #0
   d473e:	eb18 080a 	adds.w	r8, r8, sl
   d4742:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d4746:	eb49 090b 	adc.w	r9, r9, fp
   d474a:	f640 4735 	movw	r7, #3125	; 0xc35
   d474e:	ebb4 0408 	subs.w	r4, r4, r8
   d4752:	eb65 0509 	sbc.w	r5, r5, r9
   d4756:	fba4 0107 	umull	r0, r1, r4, r7
   d475a:	fb07 1105 	mla	r1, r7, r5, r1
   d475e:	f005 fb25 	bl	d9dac <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4762:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4766:	134c      	asrs	r4, r1, #13
   d4768:	0b45      	lsrs	r5, r0, #13
   d476a:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d476e:	fb02 f704 	mul.w	r7, r2, r4
   d4772:	17d3      	asrs	r3, r2, #31
   d4774:	fb05 7703 	mla	r7, r5, r3, r7
   d4778:	fba2 2305 	umull	r2, r3, r2, r5
   d477c:	443b      	add	r3, r7
   d477e:	4354      	muls	r4, r2
   d4780:	fb05 4403 	mla	r4, r5, r3, r4
   d4784:	fba2 2305 	umull	r2, r3, r2, r5
   d4788:	4423      	add	r3, r4
   d478a:	0e54      	lsrs	r4, r2, #25
   d478c:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d4790:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d4794:	1824      	adds	r4, r4, r0
   d4796:	ea4f 6563 	mov.w	r5, r3, asr #25
   d479a:	414d      	adcs	r5, r1
   d479c:	17d3      	asrs	r3, r2, #31
   d479e:	4351      	muls	r1, r2
   d47a0:	fb00 1303 	mla	r3, r0, r3, r1
   d47a4:	fba2 0100 	umull	r0, r1, r2, r0
   d47a8:	4419      	add	r1, r3
   d47aa:	0cc2      	lsrs	r2, r0, #19
   d47ac:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d47b0:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d47b2:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d47b6:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d47ba:	416b      	adcs	r3, r5
   d47bc:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d47be:	17e5      	asrs	r5, r4, #31
   d47c0:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d47c2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d47c6:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d47c8:	012b      	lsls	r3, r5, #4
   d47ca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d47ce:	1880      	adds	r0, r0, r2
   d47d0:	4159      	adcs	r1, r3
   d47d2:	f005 faad 	bl	d9d30 <__aeabi_l2f>
   d47d6:	ed9f 0a08 	vldr	s0, [pc, #32]	; d47f8 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d47da:	ee07 0a90 	vmov	s15, r0
   d47de:	ee27 0a80 	vmul.f32	s0, s15, s0
   d47e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d47e6:	ed9f 0a05 	vldr	s0, [pc, #20]	; d47fc <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d47ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d47ee:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4800 <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d47f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f6:	bf00      	nop
   d47f8:	3b800000 	.word	0x3b800000
   d47fc:	7fc00000 	.word	0x7fc00000
	...

000d4808 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   d4808:	b508      	push	{r3, lr}
   d480a:	ed2d 8b02 	vpush	{d8}
   d480e:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   d4812:	f7ff ff19 	bl	d4648 <_ZN15Adafruit_BME28012readPressureEv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d4816:	eddf 7a16 	vldr	s15, [pc, #88]	; d4870 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d481a:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d481e:	eec0 7a08 	vdiv.f32	s15, s0, s16
   d4822:	ee17 0a90 	vmov	r0, s15
   d4826:	f004 fe5f 	bl	d94e8 <__aeabi_f2d>
   d482a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d4860 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d482e:	ec41 0b10 	vmov	d0, r0, r1
   d4832:	f003 fbbd 	bl	d7fb0 <pow>
   d4836:	2000      	movs	r0, #0
   d4838:	ec53 2b10 	vmov	r2, r3, d0
   d483c:	490d      	ldr	r1, [pc, #52]	; (d4874 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d483e:	f004 fcf3 	bl	d9228 <__aeabi_dsub>
   d4842:	a309      	add	r3, pc, #36	; (adr r3, d4868 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d4844:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4848:	f004 fea2 	bl	d9590 <__aeabi_dmul>
   d484c:	f005 f950 	bl	d9af0 <__aeabi_d2f>
}
   d4850:	ecbd 8b02 	vpop	{d8}
   d4854:	ee00 0a10 	vmov	s0, r0
   d4858:	bd08      	pop	{r3, pc}
   d485a:	bf00      	nop
   d485c:	f3af 8000 	nop.w
   d4860:	1a36e2eb 	.word	0x1a36e2eb
   d4864:	3fc85bc0 	.word	0x3fc85bc0
   d4868:	00000000 	.word	0x00000000
   d486c:	40e5a540 	.word	0x40e5a540
   d4870:	42c80000 	.word	0x42c80000
   d4874:	3ff00000 	.word	0x3ff00000

000d4878 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4878:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d487a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d487e:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4880:	b085      	sub	sp, #20
   d4882:	4604      	mov	r4, r0
   d4884:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d4886:	d11d      	bne.n	d48c4 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4888:	7901      	ldrb	r1, [r0, #4]
   d488a:	6800      	ldr	r0, [r0, #0]
   d488c:	f002 fcbf 	bl	d720e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4890:	6820      	ldr	r0, [r4, #0]
   d4892:	6803      	ldr	r3, [r0, #0]
   d4894:	4629      	mov	r1, r5
   d4896:	689b      	ldr	r3, [r3, #8]
   d4898:	4798      	blx	r3
        _wire -> endTransmission();
   d489a:	6820      	ldr	r0, [r4, #0]
   d489c:	f002 fcc2 	bl	d7224 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d48a0:	2202      	movs	r2, #2
   d48a2:	7921      	ldrb	r1, [r4, #4]
   d48a4:	6820      	ldr	r0, [r4, #0]
   d48a6:	f002 fcaf 	bl	d7208 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d48aa:	6820      	ldr	r0, [r4, #0]
   d48ac:	6803      	ldr	r3, [r0, #0]
   d48ae:	695b      	ldr	r3, [r3, #20]
   d48b0:	4798      	blx	r3
   d48b2:	4605      	mov	r5, r0
   d48b4:	6820      	ldr	r0, [r4, #0]
   d48b6:	6803      	ldr	r3, [r0, #0]
   d48b8:	695b      	ldr	r3, [r3, #20]
   d48ba:	4798      	blx	r3
   d48bc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d48c0:	b285      	uxth	r5, r0
   d48c2:	e035      	b.n	d4930 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d48c4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d48c8:	3301      	adds	r3, #1
   d48ca:	d10e      	bne.n	d48ea <_ZN15Adafruit_BME2806read16Eh+0x72>
   d48cc:	4b1a      	ldr	r3, [pc, #104]	; (d4938 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d48ce:	4a1b      	ldr	r2, [pc, #108]	; (d493c <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d48d0:	9300      	str	r3, [sp, #0]
   d48d2:	9202      	str	r2, [sp, #8]
   d48d4:	2300      	movs	r3, #0
   d48d6:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d48d8:	4668      	mov	r0, sp
   d48da:	f88d 3004 	strb.w	r3, [sp, #4]
   d48de:	f88d 200c 	strb.w	r2, [sp, #12]
   d48e2:	f88d 300d 	strb.w	r3, [sp, #13]
   d48e6:	f7ff fe0b 	bl	d4500 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d48ea:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d48ee:	2100      	movs	r1, #0
   d48f0:	b280      	uxth	r0, r0
   d48f2:	f003 f94c 	bl	d7b8e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d48f6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d48fa:	4620      	mov	r0, r4
   d48fc:	f7ff fdc2 	bl	d4484 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4900:	2100      	movs	r1, #0
   d4902:	4620      	mov	r0, r4
   d4904:	f7ff fdbe 	bl	d4484 <_ZN15Adafruit_BME2807spixferEh>
   d4908:	2100      	movs	r1, #0
   d490a:	4605      	mov	r5, r0
   d490c:	4620      	mov	r0, r4
   d490e:	f7ff fdb9 	bl	d4484 <_ZN15Adafruit_BME2807spixferEh>
   d4912:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4916:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4918:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d491c:	2101      	movs	r1, #1
   d491e:	b280      	uxth	r0, r0
   d4920:	f003 f935 	bl	d7b8e <digitalWrite>
        if (_sck == -1)
   d4924:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4928:	3301      	adds	r3, #1
   d492a:	d101      	bne.n	d4930 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d492c:	f7ff fde1 	bl	d44f2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4930:	4628      	mov	r0, r5
   d4932:	b005      	add	sp, #20
   d4934:	bd30      	pop	{r4, r5, pc}
   d4936:	bf00      	nop
   d4938:	000da204 	.word	0x000da204
   d493c:	0007a120 	.word	0x0007a120

000d4940 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4940:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4942:	f7ff ff99 	bl	d4878 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4946:	ba40      	rev16	r0, r0
}
   d4948:	b280      	uxth	r0, r0
   d494a:	bd08      	pop	{r3, pc}

000d494c <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d494c:	b510      	push	{r4, lr}
   d494e:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4950:	f7ff fe4c 	bl	d45ec <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d4954:	21fd      	movs	r1, #253	; 0xfd
   d4956:	4620      	mov	r0, r4
   d4958:	f7ff ff8e 	bl	d4878 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d495c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d4960:	d038      	beq.n	d49d4 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4962:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4966:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4968:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d496c:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d496e:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4972:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d4976:	fb02 3311 	mls	r3, r2, r1, r3
   d497a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d497e:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d4980:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d4984:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4988:	4353      	muls	r3, r2
   d498a:	12db      	asrs	r3, r3, #11
   d498c:	4342      	muls	r2, r0
   d498e:	1292      	asrs	r2, r2, #10
   d4990:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d4994:	4353      	muls	r3, r2
   d4996:	129b      	asrs	r3, r3, #10
   d4998:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d499c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d49a0:	4353      	muls	r3, r2
   d49a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d49a6:	139b      	asrs	r3, r3, #14
   d49a8:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d49aa:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d49ac:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d49b0:	4352      	muls	r2, r2
   d49b2:	11d2      	asrs	r2, r2, #7
   d49b4:	434a      	muls	r2, r1
   d49b6:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d49ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d49be:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d49c2:	bfa8      	it	ge
   d49c4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d49c8:	131b      	asrs	r3, r3, #12
   d49ca:	ee00 3a10 	vmov	s0, r3
   d49ce:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d49d2:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d49d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; d49dc <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d49d8:	bd10      	pop	{r4, pc}
   d49da:	bf00      	nop
   d49dc:	7fc00000 	.word	0x7fc00000

000d49e0 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d49e0:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d49e2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d49e6:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d49e8:	b085      	sub	sp, #20
   d49ea:	4604      	mov	r4, r0
   d49ec:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d49ee:	d116      	bne.n	d4a1e <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d49f0:	7901      	ldrb	r1, [r0, #4]
   d49f2:	6800      	ldr	r0, [r0, #0]
   d49f4:	f002 fc0b 	bl	d720e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d49f8:	6820      	ldr	r0, [r4, #0]
   d49fa:	6803      	ldr	r3, [r0, #0]
   d49fc:	4629      	mov	r1, r5
   d49fe:	689b      	ldr	r3, [r3, #8]
   d4a00:	4798      	blx	r3
        _wire -> endTransmission();
   d4a02:	6820      	ldr	r0, [r4, #0]
   d4a04:	f002 fc0e 	bl	d7224 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4a08:	2201      	movs	r2, #1
   d4a0a:	7921      	ldrb	r1, [r4, #4]
   d4a0c:	6820      	ldr	r0, [r4, #0]
   d4a0e:	f002 fbfb 	bl	d7208 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4a12:	6820      	ldr	r0, [r4, #0]
   d4a14:	6803      	ldr	r3, [r0, #0]
   d4a16:	695b      	ldr	r3, [r3, #20]
   d4a18:	4798      	blx	r3
   d4a1a:	b2c5      	uxtb	r5, r0
   d4a1c:	e02e      	b.n	d4a7c <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d4a1e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4a22:	3301      	adds	r3, #1
   d4a24:	d10e      	bne.n	d4a44 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4a26:	4b17      	ldr	r3, [pc, #92]	; (d4a84 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4a28:	4a17      	ldr	r2, [pc, #92]	; (d4a88 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d4a2a:	9300      	str	r3, [sp, #0]
   d4a2c:	9202      	str	r2, [sp, #8]
   d4a2e:	2300      	movs	r3, #0
   d4a30:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4a32:	4668      	mov	r0, sp
   d4a34:	f88d 3004 	strb.w	r3, [sp, #4]
   d4a38:	f88d 200c 	strb.w	r2, [sp, #12]
   d4a3c:	f88d 300d 	strb.w	r3, [sp, #13]
   d4a40:	f7ff fd5e 	bl	d4500 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4a44:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a48:	2100      	movs	r1, #0
   d4a4a:	b280      	uxth	r0, r0
   d4a4c:	f003 f89f 	bl	d7b8e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4a50:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4a54:	4620      	mov	r0, r4
   d4a56:	f7ff fd15 	bl	d4484 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4a5a:	2100      	movs	r1, #0
   d4a5c:	4620      	mov	r0, r4
   d4a5e:	f7ff fd11 	bl	d4484 <_ZN15Adafruit_BME2807spixferEh>
   d4a62:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4a64:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a68:	2101      	movs	r1, #1
   d4a6a:	b280      	uxth	r0, r0
   d4a6c:	f003 f88f 	bl	d7b8e <digitalWrite>
        if (_sck == -1)
   d4a70:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4a74:	3301      	adds	r3, #1
   d4a76:	d101      	bne.n	d4a7c <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d4a78:	f7ff fd3b 	bl	d44f2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4a7c:	4628      	mov	r0, r5
   d4a7e:	b005      	add	sp, #20
   d4a80:	bd30      	pop	{r4, r5, pc}
   d4a82:	bf00      	nop
   d4a84:	000da204 	.word	0x000da204
   d4a88:	0007a120 	.word	0x0007a120

000d4a8c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4a8c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4a8e:	21f3      	movs	r1, #243	; 0xf3
   d4a90:	f7ff ffa6 	bl	d49e0 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4a94:	f000 0001 	and.w	r0, r0, #1
   d4a98:	bd08      	pop	{r3, pc}

000d4a9a <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4a9a:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4a9c:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4a9e:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4aa0:	f7ff ff4e 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4aa4:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4aa6:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4aa8:	4620      	mov	r0, r4
   d4aaa:	f7ff ff49 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
   d4aae:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4ab0:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	f7ff ff44 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4ab8:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4aba:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4abc:	4620      	mov	r0, r4
   d4abe:	f7ff ff3f 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ac2:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4ac4:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ac6:	4620      	mov	r0, r4
   d4ac8:	f7ff ff3a 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
   d4acc:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4ace:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ad0:	4620      	mov	r0, r4
   d4ad2:	f7ff ff35 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
   d4ad6:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4ad8:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ada:	4620      	mov	r0, r4
   d4adc:	f7ff ff30 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
   d4ae0:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4ae2:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ae4:	4620      	mov	r0, r4
   d4ae6:	f7ff ff2b 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
   d4aea:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4aec:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4aee:	4620      	mov	r0, r4
   d4af0:	f7ff ff26 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
   d4af4:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4af6:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4af8:	4620      	mov	r0, r4
   d4afa:	f7ff ff21 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
   d4afe:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4b00:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4b02:	4620      	mov	r0, r4
   d4b04:	f7ff ff1c 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
   d4b08:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4b0a:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4b0c:	4620      	mov	r0, r4
   d4b0e:	f7ff ff17 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4b12:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4b14:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4b16:	4620      	mov	r0, r4
   d4b18:	f7ff ff62 	bl	d49e0 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4b1c:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4b1e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4b22:	4620      	mov	r0, r4
   d4b24:	f7ff ff0c 	bl	d4940 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4b28:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4b2a:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4b2c:	4620      	mov	r0, r4
   d4b2e:	f7ff ff57 	bl	d49e0 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4b32:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4b34:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f7ff ff51 	bl	d49e0 <_ZN15Adafruit_BME2805read8Eh>
   d4b3e:	21e5      	movs	r1, #229	; 0xe5
   d4b40:	4605      	mov	r5, r0
   d4b42:	4620      	mov	r0, r4
   d4b44:	f7ff ff4c 	bl	d49e0 <_ZN15Adafruit_BME2805read8Eh>
   d4b48:	f000 000f 	and.w	r0, r0, #15
   d4b4c:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4b50:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4b52:	21e6      	movs	r1, #230	; 0xe6
   d4b54:	4620      	mov	r0, r4
   d4b56:	f7ff ff43 	bl	d49e0 <_ZN15Adafruit_BME2805read8Eh>
   d4b5a:	21e5      	movs	r1, #229	; 0xe5
   d4b5c:	4605      	mov	r5, r0
   d4b5e:	4620      	mov	r0, r4
   d4b60:	f7ff ff3e 	bl	d49e0 <_ZN15Adafruit_BME2805read8Eh>
   d4b64:	1100      	asrs	r0, r0, #4
   d4b66:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4b6a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4b6c:	21e7      	movs	r1, #231	; 0xe7
   d4b6e:	4620      	mov	r0, r4
   d4b70:	f7ff ff36 	bl	d49e0 <_ZN15Adafruit_BME2805read8Eh>
   d4b74:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4b78:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b7c <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4b7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4b7e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4b82:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4b84:	4604      	mov	r4, r0
   d4b86:	460e      	mov	r6, r1
   d4b88:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4b8a:	d111      	bne.n	d4bb0 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4b8c:	7901      	ldrb	r1, [r0, #4]
   d4b8e:	6800      	ldr	r0, [r0, #0]
   d4b90:	f002 fb3d 	bl	d720e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4b94:	6820      	ldr	r0, [r4, #0]
   d4b96:	6803      	ldr	r3, [r0, #0]
   d4b98:	4631      	mov	r1, r6
   d4b9a:	689b      	ldr	r3, [r3, #8]
   d4b9c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4b9e:	6820      	ldr	r0, [r4, #0]
   d4ba0:	6803      	ldr	r3, [r0, #0]
   d4ba2:	4629      	mov	r1, r5
   d4ba4:	689b      	ldr	r3, [r3, #8]
   d4ba6:	4798      	blx	r3
        _wire -> endTransmission();
   d4ba8:	6820      	ldr	r0, [r4, #0]
   d4baa:	f002 fb3b 	bl	d7224 <_ZN7TwoWire15endTransmissionEv>
   d4bae:	e02d      	b.n	d4c0c <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4bb0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4bb4:	3301      	adds	r3, #1
   d4bb6:	d10e      	bne.n	d4bd6 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4bb8:	4b15      	ldr	r3, [pc, #84]	; (d4c10 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4bba:	4a16      	ldr	r2, [pc, #88]	; (d4c14 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4bbc:	9300      	str	r3, [sp, #0]
   d4bbe:	9202      	str	r2, [sp, #8]
   d4bc0:	2300      	movs	r3, #0
   d4bc2:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4bc4:	4668      	mov	r0, sp
   d4bc6:	f88d 3004 	strb.w	r3, [sp, #4]
   d4bca:	f88d 200c 	strb.w	r2, [sp, #12]
   d4bce:	f88d 300d 	strb.w	r3, [sp, #13]
   d4bd2:	f7ff fc95 	bl	d4500 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4bd6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4bda:	2100      	movs	r1, #0
   d4bdc:	b280      	uxth	r0, r0
   d4bde:	f002 ffd6 	bl	d7b8e <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4be2:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4be6:	4620      	mov	r0, r4
   d4be8:	f7ff fc4c 	bl	d4484 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4bec:	4629      	mov	r1, r5
   d4bee:	4620      	mov	r0, r4
   d4bf0:	f7ff fc48 	bl	d4484 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4bf4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4bf8:	2101      	movs	r1, #1
   d4bfa:	b280      	uxth	r0, r0
   d4bfc:	f002 ffc7 	bl	d7b8e <digitalWrite>
    if (_sck == -1)
   d4c00:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4c04:	3301      	adds	r3, #1
   d4c06:	d101      	bne.n	d4c0c <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4c08:	f7ff fc73 	bl	d44f2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d4c0c:	b004      	add	sp, #16
   d4c0e:	bd70      	pop	{r4, r5, r6, pc}
   d4c10:	000da204 	.word	0x000da204
   d4c14:	0007a120 	.word	0x0007a120

000d4c18 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4c1a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4c1e:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4c22:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4c26:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4c2a:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4c2e:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4c32:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4c36:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4c3a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4c3e:	f366 1347 	bfi	r3, r6, #5, #3
   d4c42:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4c46:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4c4a:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4c4e:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4c50:	f367 0302 	bfi	r3, r7, #0, #3
   d4c54:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4c58:	f006 0207 	and.w	r2, r6, #7
   d4c5c:	21f2      	movs	r1, #242	; 0xf2
   d4c5e:	f7ff ff8d 	bl	d4b7c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4c62:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4c66:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4c6a:	f002 0107 	and.w	r1, r2, #7
   d4c6e:	009b      	lsls	r3, r3, #2
   d4c70:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4c74:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4c78:	4620      	mov	r0, r4
   d4c7a:	21f5      	movs	r1, #245	; 0xf5
   d4c7c:	f7ff ff7e 	bl	d4b7c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4c80:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4c84:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4c88:	f002 0107 	and.w	r1, r2, #7
   d4c8c:	009b      	lsls	r3, r3, #2
   d4c8e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4c92:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4c96:	4620      	mov	r0, r4
   d4c98:	21f4      	movs	r1, #244	; 0xf4
}
   d4c9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4c9e:	f7ff bf6d 	b.w	d4b7c <_ZN15Adafruit_BME2806write8Ehh>

000d4ca2 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4ca2:	b530      	push	{r4, r5, lr}
   d4ca4:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4ca6:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4caa:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4cac:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4cae:	d103      	bne.n	d4cb8 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4cb0:	6820      	ldr	r0, [r4, #0]
   d4cb2:	f002 fa75 	bl	d71a0 <_ZN7TwoWire5beginEv>
   d4cb6:	e022      	b.n	d4cfe <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4cb8:	2101      	movs	r1, #1
   d4cba:	b280      	uxth	r0, r0
   d4cbc:	f002 ff67 	bl	d7b8e <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4cc0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4cc4:	2101      	movs	r1, #1
   d4cc6:	b280      	uxth	r0, r0
   d4cc8:	f002 ff50 	bl	d7b6c <pinMode>
        if (_sck == -1) {
   d4ccc:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4cd0:	1c43      	adds	r3, r0, #1
   d4cd2:	d104      	bne.n	d4cde <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4cd4:	f7ff fbbe 	bl	d4454 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4cd8:	f001 fde0 	bl	d689c <_ZN8SPIClass5beginEv>
   d4cdc:	e00f      	b.n	d4cfe <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4cde:	2101      	movs	r1, #1
   d4ce0:	b280      	uxth	r0, r0
   d4ce2:	f002 ff43 	bl	d7b6c <pinMode>
            pinMode(_mosi, OUTPUT);
   d4ce6:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4cea:	2101      	movs	r1, #1
   d4cec:	b280      	uxth	r0, r0
   d4cee:	f002 ff3d 	bl	d7b6c <pinMode>
            pinMode(_miso, INPUT);
   d4cf2:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4cf6:	2100      	movs	r1, #0
   d4cf8:	b280      	uxth	r0, r0
   d4cfa:	f002 ff37 	bl	d7b6c <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4cfe:	21d0      	movs	r1, #208	; 0xd0
   d4d00:	4620      	mov	r0, r4
   d4d02:	f7ff fe6d 	bl	d49e0 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4d06:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4d08:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4d0a:	d120      	bne.n	d4d4e <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4d0c:	4620      	mov	r0, r4
   d4d0e:	22b6      	movs	r2, #182	; 0xb6
   d4d10:	21e0      	movs	r1, #224	; 0xe0
   d4d12:	f7ff ff33 	bl	d4b7c <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4d16:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4d1a:	f001 ffc9 	bl	d6cb0 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4d1e:	4620      	mov	r0, r4
   d4d20:	f7ff feb4 	bl	d4a8c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4d24:	4605      	mov	r5, r0
   d4d26:	b108      	cbz	r0, d4d2c <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4d28:	2064      	movs	r0, #100	; 0x64
   d4d2a:	e7f6      	b.n	d4d1a <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	f7ff feb4 	bl	d4a9a <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4d32:	2305      	movs	r3, #5
   d4d34:	9300      	str	r3, [sp, #0]
   d4d36:	461a      	mov	r2, r3
   d4d38:	2103      	movs	r1, #3
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	9502      	str	r5, [sp, #8]
   d4d3e:	9501      	str	r5, [sp, #4]
   d4d40:	f7ff ff6a 	bl	d4c18 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4d44:	2064      	movs	r0, #100	; 0x64
   d4d46:	f001 ffb3 	bl	d6cb0 <delay>
   d4d4a:	2001      	movs	r0, #1
   d4d4c:	e000      	b.n	d4d50 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4d4e:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4d50:	b005      	add	sp, #20
   d4d52:	bd30      	pop	{r4, r5, pc}

000d4d54 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4d54:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d4d56:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4d58:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d4d5a:	f002 ff99 	bl	d7c90 <_Z19__fetch_global_Wirev>
   d4d5e:	6020      	str	r0, [r4, #0]
	return init();
   d4d60:	4620      	mov	r0, r4
}
   d4d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d4d66:	f7ff bf9c 	b.w	d4ca2 <_ZN15Adafruit_BME2804initEv>

000d4d6a <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4d6a:	f001 ba8d 	b.w	d6288 <HAL_Pin_Map>
	...

000d4d70 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d4d70:	b508      	push	{r3, lr}
   d4d72:	f001 fa89 	bl	d6288 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4d76:	f001 fa87 	bl	d6288 <HAL_Pin_Map>
   d4d7a:	4b01      	ldr	r3, [pc, #4]	; (d4d80 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4d7c:	6018      	str	r0, [r3, #0]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	2003e3cc 	.word	0x2003e3cc

000d4d84 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4d86:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4d88:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4d8c:	2c02      	cmp	r4, #2
   d4d8e:	d008      	beq.n	d4da2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4d90:	2c03      	cmp	r4, #3
   d4d92:	d00f      	beq.n	d4db4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4d94:	2c01      	cmp	r4, #1
   d4d96:	d170      	bne.n	d4e7a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4d98:	8904      	ldrh	r4, [r0, #8]
   d4d9a:	3c01      	subs	r4, #1
   d4d9c:	1aa2      	subs	r2, r4, r2
   d4d9e:	b212      	sxth	r2, r2
      break;
   d4da0:	e00c      	b.n	d4dbc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4da2:	8944      	ldrh	r4, [r0, #10]
   d4da4:	3c01      	subs	r4, #1
   d4da6:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4da8:	8904      	ldrh	r4, [r0, #8]
   d4daa:	1ae4      	subs	r4, r4, r3
   d4dac:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4dae:	b212      	sxth	r2, r2
      x -= (w-1);
   d4db0:	b209      	sxth	r1, r1
      break;
   d4db2:	e062      	b.n	d4e7a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4db4:	8944      	ldrh	r4, [r0, #10]
   d4db6:	1ae4      	subs	r4, r4, r3
   d4db8:	1a61      	subs	r1, r4, r1
   d4dba:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4dbc:	2a00      	cmp	r2, #0
   d4dbe:	db5b      	blt.n	d4e78 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4dc0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4dc4:	4294      	cmp	r4, r2
   d4dc6:	f340 8090 	ble.w	d4eea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4dca:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4dcc:	bfbe      	ittt	lt
   d4dce:	185b      	addlt	r3, r3, r1
   d4dd0:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4dd2:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4dd4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4dd8:	18cc      	adds	r4, r1, r3
   d4dda:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4ddc:	bfc4      	itt	gt
   d4dde:	1a43      	subgt	r3, r0, r1
   d4de0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4de2:	2b00      	cmp	r3, #0
   d4de4:	f340 8081 	ble.w	d4eea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4de8:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4dea:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4dec:	4f3f      	ldr	r7, [pc, #252]	; (d4eec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4dee:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4df2:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4df6:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4df8:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4dfc:	d017      	beq.n	d4e2e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4dfe:	f1c1 0108 	rsb	r1, r1, #8
   d4e02:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4e04:	493a      	ldr	r1, [pc, #232]	; (d4ef0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4e06:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4e08:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4e0a:	bf3f      	itttt	cc
   d4e0c:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4e10:	21ff      	movcc	r1, #255	; 0xff
   d4e12:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4e16:	400e      	andcc	r6, r1
   d4e18:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4e1a:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4e1c:	bf0c      	ite	eq
   d4e1e:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4e20:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4e22:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4e24:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4e26:	d360      	bcc.n	d4eea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4e28:	1a18      	subs	r0, r3, r0
   d4e2a:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4e2c:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4e2e:	2b07      	cmp	r3, #7
   d4e30:	d917      	bls.n	d4e62 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4e32:	2d01      	cmp	r5, #1
   d4e34:	bf0c      	ite	eq
   d4e36:	20ff      	moveq	r0, #255	; 0xff
   d4e38:	2000      	movne	r0, #0
   d4e3a:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4e3e:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4e40:	3a08      	subs	r2, #8
   d4e42:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4e44:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4e46:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4e4a:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4e4e:	d8f7      	bhi.n	d4e40 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4e50:	f1a3 0208 	sub.w	r2, r3, #8
   d4e54:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4e58:	3201      	adds	r2, #1
   d4e5a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4e5e:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4e62:	2b00      	cmp	r3, #0
   d4e64:	d041      	beq.n	d4eea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4e66:	4a23      	ldr	r2, [pc, #140]	; (d4ef4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4e68:	5cd2      	ldrb	r2, [r2, r3]
   d4e6a:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4e6c:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4e6e:	bf0c      	ite	eq
   d4e70:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4e72:	4393      	bicne	r3, r2
   d4e74:	7023      	strb	r3, [r4, #0]
   d4e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4e7a:	2a00      	cmp	r2, #0
   d4e7c:	db35      	blt.n	d4eea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4e7e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4e82:	4294      	cmp	r4, r2
   d4e84:	dd31      	ble.n	d4eea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4e86:	2900      	cmp	r1, #0
    w += x;
   d4e88:	bfbc      	itt	lt
   d4e8a:	18c9      	addlt	r1, r1, r3
   d4e8c:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4e8e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4e92:	bfb8      	it	lt
   d4e94:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4e96:	18ce      	adds	r6, r1, r3
   d4e98:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4e9a:	bfc4      	itt	gt
   d4e9c:	1a63      	subgt	r3, r4, r1
   d4e9e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4ea0:	2b00      	cmp	r3, #0
   d4ea2:	dd22      	ble.n	d4eea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4ea4:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4ea6:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4eaa:	4810      	ldr	r0, [pc, #64]	; (d4eec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4eac:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4eb0:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d4eb2:	2001      	movs	r0, #1
   d4eb4:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4eb8:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4eba:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4ebc:	d109      	bne.n	d4ed2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4ebe:	3b01      	subs	r3, #1
   d4ec0:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d4ec2:	1c5c      	adds	r4, r3, #1
   d4ec4:	d011      	beq.n	d4eea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4ec6:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4eca:	4310      	orrs	r0, r2
   d4ecc:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4ed0:	e7f5      	b.n	d4ebe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d4ed2:	43d2      	mvns	r2, r2
   d4ed4:	b2d2      	uxtb	r2, r2
   d4ed6:	3b01      	subs	r3, #1
   d4ed8:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4eda:	1c58      	adds	r0, r3, #1
   d4edc:	d005      	beq.n	d4eea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4ede:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4ee2:	4010      	ands	r0, r2
   d4ee4:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4ee8:	e7f5      	b.n	d4ed6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4eec:	2003d8d8 	.word	0x2003d8d8
   d4ef0:	2003d8d0 	.word	0x2003d8d0
   d4ef4:	2003d8c8 	.word	0x2003d8c8

000d4ef8 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d4efa:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4efc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d4f00:	2c02      	cmp	r4, #2
   d4f02:	d008      	beq.n	d4f16 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4f04:	2c03      	cmp	r4, #3
   d4f06:	d00f      	beq.n	d4f28 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4f08:	2c01      	cmp	r4, #1
   d4f0a:	d112      	bne.n	d4f32 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4f0c:	8904      	ldrh	r4, [r0, #8]
   d4f0e:	1ae4      	subs	r4, r4, r3
   d4f10:	1aa2      	subs	r2, r4, r2
   d4f12:	b212      	sxth	r2, r2
      break;
   d4f14:	e06d      	b.n	d4ff2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4f16:	8904      	ldrh	r4, [r0, #8]
   d4f18:	3c01      	subs	r4, #1
   d4f1a:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4f1c:	8944      	ldrh	r4, [r0, #10]
   d4f1e:	1ae4      	subs	r4, r4, r3
   d4f20:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4f22:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4f24:	b212      	sxth	r2, r2
      break;
   d4f26:	e004      	b.n	d4f32 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d4f28:	8944      	ldrh	r4, [r0, #10]
   d4f2a:	3c01      	subs	r4, #1
   d4f2c:	1a61      	subs	r1, r4, r1
   d4f2e:	b209      	sxth	r1, r1
      break;
   d4f30:	e05f      	b.n	d4ff2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4f32:	2900      	cmp	r1, #0
   d4f34:	db5c      	blt.n	d4ff0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4f36:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4f3a:	428c      	cmp	r4, r1
   d4f3c:	f340 8091 	ble.w	d5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4f40:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4f42:	bfbc      	itt	lt
   d4f44:	18d2      	addlt	r2, r2, r3
   d4f46:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4f48:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4f4c:	bfb8      	it	lt
   d4f4e:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4f50:	18d4      	adds	r4, r2, r3
   d4f52:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4f54:	bfc4      	itt	gt
   d4f56:	1a83      	subgt	r3, r0, r2
   d4f58:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4f5a:	2b00      	cmp	r3, #0
   d4f5c:	f340 8081 	ble.w	d5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4f60:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4f62:	4e40      	ldr	r6, [pc, #256]	; (d5064 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4f64:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4f66:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4f68:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4f6c:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4f70:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4f74:	d017      	beq.n	d4fa6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4f76:	f1c4 0408 	rsb	r4, r4, #8
   d4f7a:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4f7c:	4c3a      	ldr	r4, [pc, #232]	; (d5068 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4f7e:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4f80:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4f82:	bf3f      	itttt	cc
   d4f84:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4f88:	24ff      	movcc	r4, #255	; 0xff
   d4f8a:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4f8e:	4027      	andcc	r7, r4
   d4f90:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d4f92:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4f94:	bf0c      	ite	eq
   d4f96:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4f98:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4f9a:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4f9c:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4f9e:	d360      	bcc.n	d5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4fa0:	1a10      	subs	r0, r2, r0
   d4fa2:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4fa4:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4fa6:	2a07      	cmp	r2, #7
   d4fa8:	d917      	bls.n	d4fda <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4faa:	2d01      	cmp	r5, #1
   d4fac:	bf0c      	ite	eq
   d4fae:	24ff      	moveq	r4, #255	; 0xff
   d4fb0:	2400      	movne	r4, #0
   d4fb2:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d4fb6:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4fb8:	3908      	subs	r1, #8
   d4fba:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4fbc:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4fbe:	f800 4c80 	strb.w	r4, [r0, #-128]
   d4fc2:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4fc6:	d8f7      	bhi.n	d4fb8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4fc8:	f1a2 0108 	sub.w	r1, r2, #8
   d4fcc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4fd0:	3101      	adds	r1, #1
   d4fd2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d4fd6:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4fda:	2a00      	cmp	r2, #0
   d4fdc:	d041      	beq.n	d5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4fde:	4923      	ldr	r1, [pc, #140]	; (d506c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4fe0:	5c89      	ldrb	r1, [r1, r2]
   d4fe2:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d4fe4:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4fe6:	bf0c      	ite	eq
   d4fe8:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d4fea:	438a      	bicne	r2, r1
   d4fec:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4ff2:	2900      	cmp	r1, #0
   d4ff4:	db35      	blt.n	d5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4ff6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4ffa:	428c      	cmp	r4, r1
   d4ffc:	dd31      	ble.n	d5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4ffe:	2a00      	cmp	r2, #0
    w += x;
   d5000:	bfbc      	itt	lt
   d5002:	18d2      	addlt	r2, r2, r3
   d5004:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5006:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d500a:	bfb8      	it	lt
   d500c:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d500e:	18d6      	adds	r6, r2, r3
   d5010:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d5012:	bfc4      	itt	gt
   d5014:	1aa3      	subgt	r3, r4, r2
   d5016:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5018:	2b00      	cmp	r3, #0
   d501a:	dd22      	ble.n	d5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d501c:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d501e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d5022:	4810      	ldr	r0, [pc, #64]	; (d5064 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d5024:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d5028:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d502a:	2201      	movs	r2, #1
   d502c:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d5030:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d5032:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d5034:	d109      	bne.n	d504a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d5036:	1e5a      	subs	r2, r3, #1
   d5038:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d503a:	1c5c      	adds	r4, r3, #1
   d503c:	d011      	beq.n	d5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d503e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5042:	430a      	orrs	r2, r1
   d5044:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5048:	e7f5      	b.n	d5036 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d504a:	43c9      	mvns	r1, r1
   d504c:	b2c9      	uxtb	r1, r1
   d504e:	1e5a      	subs	r2, r3, #1
   d5050:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d5052:	1c5a      	adds	r2, r3, #1
   d5054:	d005      	beq.n	d5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d5056:	f810 2b01 	ldrb.w	r2, [r0], #1
   d505a:	400a      	ands	r2, r1
   d505c:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5060:	e7f5      	b.n	d504e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d5062:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5064:	2003d8d8 	.word	0x2003d8d8
   d5068:	2003d8d0 	.word	0x2003d8d0
   d506c:	2003d8c8 	.word	0x2003d8c8

000d5070 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d5072:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5074:	4606      	mov	r6, r0
   d5076:	4614      	mov	r4, r2
   d5078:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d507a:	db3f      	blt.n	d50fc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d507c:	f000 fbb1 	bl	d57e2 <_ZN12Adafruit_GFX5widthEv>
   d5080:	4285      	cmp	r5, r0
   d5082:	da3b      	bge.n	d50fc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5084:	2c00      	cmp	r4, #0
   d5086:	db39      	blt.n	d50fc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5088:	4630      	mov	r0, r6
   d508a:	f000 fbad 	bl	d57e8 <_ZN12Adafruit_GFX6heightEv>
   d508e:	4284      	cmp	r4, r0
   d5090:	da34      	bge.n	d50fc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5092:	4630      	mov	r0, r6
   d5094:	f000 fba3 	bl	d57de <_ZN12Adafruit_GFX11getRotationEv>
   d5098:	2802      	cmp	r0, #2
   d509a:	d127      	bne.n	d50ec <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d509c:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d509e:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d50a0:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d50a2:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d50a4:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d50a6:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d50a8:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d50aa:	b204      	sxth	r4, r0
   d50ac:	e006      	b.n	d50bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d50ae:	2801      	cmp	r0, #1
   d50b0:	d104      	bne.n	d50bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d50b2:	8933      	ldrh	r3, [r6, #8]
   d50b4:	3b01      	subs	r3, #1
   d50b6:	1b1b      	subs	r3, r3, r4
   d50b8:	462c      	mov	r4, r5
   d50ba:	b21d      	sxth	r5, r3
   d50bc:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d50be:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d50c0:	fb94 f0f0 	sdiv	r0, r4, r0
   d50c4:	b200      	sxth	r0, r0
   d50c6:	4b0e      	ldr	r3, [pc, #56]	; (d5100 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d50c8:	f004 0207 	and.w	r2, r4, #7
   d50cc:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d50d0:	d104      	bne.n	d50dc <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d50d2:	4097      	lsls	r7, r2
   d50d4:	5c5a      	ldrb	r2, [r3, r1]
   d50d6:	4317      	orrs	r7, r2
   d50d8:	545f      	strb	r7, [r3, r1]
   d50da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d50dc:	5c58      	ldrb	r0, [r3, r1]
   d50de:	2701      	movs	r7, #1
   d50e0:	fa07 f202 	lsl.w	r2, r7, r2
   d50e4:	ea20 0202 	bic.w	r2, r0, r2
   d50e8:	545a      	strb	r2, [r3, r1]
   d50ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d50ec:	2803      	cmp	r0, #3
   d50ee:	d1de      	bne.n	d50ae <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d50f0:	8973      	ldrh	r3, [r6, #10]
   d50f2:	3b01      	subs	r3, #1
   d50f4:	1b5b      	subs	r3, r3, r5
   d50f6:	4625      	mov	r5, r4
   d50f8:	b21c      	sxth	r4, r3
   d50fa:	e7df      	b.n	d50bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d50fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d50fe:	bf00      	nop
   d5100:	2003d8d8 	.word	0x2003d8d8

000d5104 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5104:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d5106:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5108:	4604      	mov	r4, r0
   d510a:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d510c:	2180      	movs	r1, #128	; 0x80
   d510e:	f000 fa87 	bl	d5620 <_ZN12Adafruit_GFXC1Ess>
   d5112:	4b06      	ldr	r3, [pc, #24]	; (d512c <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d5114:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d5116:	23ff      	movs	r3, #255	; 0xff
   d5118:	7763      	strb	r3, [r4, #29]
   d511a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d511e:	77e3      	strb	r3, [r4, #31]
   d5120:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d5122:	f884 5020 	strb.w	r5, [r4, #32]
}
   d5126:	4620      	mov	r0, r4
   d5128:	bd38      	pop	{r3, r4, r5, pc}
   d512a:	bf00      	nop
   d512c:	000da3bc 	.word	0x000da3bc

000d5130 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d5130:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d5134:	2100      	movs	r1, #0
   d5136:	4801      	ldr	r0, [pc, #4]	; (d513c <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d5138:	f005 b815 	b.w	da166 <memset>
   d513c:	2003d8d8 	.word	0x2003d8d8

000d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5140:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d5142:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d5146:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5148:	4604      	mov	r4, r0
   d514a:	460d      	mov	r5, r1
  if (sid != -1)
   d514c:	d028      	beq.n	d51a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d514e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d5152:	2101      	movs	r1, #1
   d5154:	b280      	uxth	r0, r0
   d5156:	f002 fd1a 	bl	d7b8e <digitalWrite>
    digitalWrite(dc, LOW);
   d515a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d515e:	2100      	movs	r1, #0
   d5160:	b280      	uxth	r0, r0
   d5162:	f002 fd14 	bl	d7b8e <digitalWrite>
    digitalWrite(cs, LOW);
   d5166:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d516a:	2100      	movs	r1, #0
   d516c:	b280      	uxth	r0, r0
   d516e:	f002 fd0e 	bl	d7b8e <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d5172:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5176:	b12b      	cbz	r3, d5184 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5178:	f7ff f96c 	bl	d4454 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d517c:	4629      	mov	r1, r5
   d517e:	f001 fc9f 	bl	d6ac0 <_ZN8SPIClass8transferEh>
   d5182:	e005      	b.n	d5190 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5184:	462b      	mov	r3, r5
   d5186:	2201      	movs	r2, #1
   d5188:	7fa1      	ldrb	r1, [r4, #30]
   d518a:	7f60      	ldrb	r0, [r4, #29]
   d518c:	f002 fd42 	bl	d7c14 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5190:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5194:	2101      	movs	r1, #1
   d5196:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d5198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d519c:	f002 bcf7 	b.w	d7b8e <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d51a0:	f002 fd76 	bl	d7c90 <_Z19__fetch_global_Wirev>
   d51a4:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d51a8:	f002 f835 	bl	d7216 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d51ac:	f002 fd70 	bl	d7c90 <_Z19__fetch_global_Wirev>
   d51b0:	6803      	ldr	r3, [r0, #0]
   d51b2:	2100      	movs	r1, #0
   d51b4:	689b      	ldr	r3, [r3, #8]
   d51b6:	4798      	blx	r3
    Wire.write(c);
   d51b8:	f002 fd6a 	bl	d7c90 <_Z19__fetch_global_Wirev>
   d51bc:	6803      	ldr	r3, [r0, #0]
   d51be:	4629      	mov	r1, r5
   d51c0:	689b      	ldr	r3, [r3, #8]
   d51c2:	4798      	blx	r3
    Wire.endTransmission();
   d51c4:	f002 fd64 	bl	d7c90 <_Z19__fetch_global_Wirev>
  }
}
   d51c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d51cc:	f002 b82a 	b.w	d7224 <_ZN7TwoWire15endTransmissionEv>

000d51d0 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d51d0:	b538      	push	{r3, r4, r5, lr}
   d51d2:	4604      	mov	r4, r0
   d51d4:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d51d6:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d51d8:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d51dc:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d51de:	3301      	adds	r3, #1
   d51e0:	d037      	beq.n	d5252 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d51e2:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d51e6:	2101      	movs	r1, #1
   d51e8:	b280      	uxth	r0, r0
   d51ea:	f002 fcbf 	bl	d7b6c <pinMode>
    pinMode(cs, OUTPUT);
   d51ee:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d51f2:	2101      	movs	r1, #1
   d51f4:	b280      	uxth	r0, r0
   d51f6:	f002 fcb9 	bl	d7b6c <pinMode>
    if (!hwSPI){
   d51fa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d51fe:	b95b      	cbnz	r3, d5218 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d5200:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5204:	2101      	movs	r1, #1
   d5206:	b280      	uxth	r0, r0
   d5208:	f002 fcb0 	bl	d7b6c <pinMode>
    	pinMode(sclk, OUTPUT);
   d520c:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d5210:	2101      	movs	r1, #1
   d5212:	b280      	uxth	r0, r0
   d5214:	f002 fcaa 	bl	d7b6c <pinMode>
    	}
    if (hwSPI){
   d5218:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d521c:	b1eb      	cbz	r3, d525a <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d521e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5222:	2101      	movs	r1, #1
   d5224:	b280      	uxth	r0, r0
   d5226:	f002 fcb2 	bl	d7b8e <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d522a:	f7ff f913 	bl	d4454 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d522e:	2101      	movs	r1, #1
   d5230:	f001 fb45 	bl	d68be <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d5234:	f7ff f90e 	bl	d4454 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5238:	2110      	movs	r1, #16
   d523a:	f001 fc1d 	bl	d6a78 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d523e:	f7ff f909 	bl	d4454 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5242:	2100      	movs	r1, #0
   d5244:	f001 fb4c 	bl	d68e0 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d5248:	f7ff f904 	bl	d4454 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d524c:	f001 fb26 	bl	d689c <_ZN8SPIClass5beginEv>
   d5250:	e003      	b.n	d525a <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d5252:	f002 fd1d 	bl	d7c90 <_Z19__fetch_global_Wirev>
   d5256:	f001 ffa3 	bl	d71a0 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d525a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d525e:	2101      	movs	r1, #1
   d5260:	b280      	uxth	r0, r0
   d5262:	f002 fc83 	bl	d7b6c <pinMode>
  digitalWrite(rst, HIGH);
   d5266:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d526a:	2101      	movs	r1, #1
   d526c:	b280      	uxth	r0, r0
   d526e:	f002 fc8e 	bl	d7b8e <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d5272:	2001      	movs	r0, #1
   d5274:	f001 fd1c 	bl	d6cb0 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d5278:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d527c:	2100      	movs	r1, #0
   d527e:	b280      	uxth	r0, r0
   d5280:	f002 fc85 	bl	d7b8e <digitalWrite>
  // wait 10ms
  delay(10);
   d5284:	200a      	movs	r0, #10
   d5286:	f001 fd13 	bl	d6cb0 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d528a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d528e:	2101      	movs	r1, #1
   d5290:	b280      	uxth	r0, r0
   d5292:	f002 fc7c 	bl	d7b8e <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d5296:	4620      	mov	r0, r4
   d5298:	21ae      	movs	r1, #174	; 0xae
   d529a:	f7ff ff51 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d529e:	4620      	mov	r0, r4
   d52a0:	21d5      	movs	r1, #213	; 0xd5
   d52a2:	f7ff ff4d 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d52a6:	4620      	mov	r0, r4
   d52a8:	2180      	movs	r1, #128	; 0x80
   d52aa:	f7ff ff49 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d52ae:	4620      	mov	r0, r4
   d52b0:	21a8      	movs	r1, #168	; 0xa8
   d52b2:	f7ff ff45 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d52b6:	4620      	mov	r0, r4
   d52b8:	213f      	movs	r1, #63	; 0x3f
   d52ba:	f7ff ff41 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d52be:	4620      	mov	r0, r4
   d52c0:	21d3      	movs	r1, #211	; 0xd3
   d52c2:	f7ff ff3d 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d52c6:	4620      	mov	r0, r4
   d52c8:	2100      	movs	r1, #0
   d52ca:	f7ff ff39 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d52ce:	4620      	mov	r0, r4
   d52d0:	2140      	movs	r1, #64	; 0x40
   d52d2:	f7ff ff35 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d52d6:	218d      	movs	r1, #141	; 0x8d
   d52d8:	4620      	mov	r0, r4
   d52da:	f7ff ff31 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d52de:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d52e0:	bf0c      	ite	eq
   d52e2:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d52e4:	2114      	movne	r1, #20
   d52e6:	4620      	mov	r0, r4
   d52e8:	f7ff ff2a 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d52ec:	4620      	mov	r0, r4
   d52ee:	2120      	movs	r1, #32
   d52f0:	f7ff ff26 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d52f4:	4620      	mov	r0, r4
   d52f6:	2100      	movs	r1, #0
   d52f8:	f7ff ff22 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d52fc:	4620      	mov	r0, r4
   d52fe:	21a1      	movs	r1, #161	; 0xa1
   d5300:	f7ff ff1e 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d5304:	4620      	mov	r0, r4
   d5306:	21c8      	movs	r1, #200	; 0xc8
   d5308:	f7ff ff1a 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d530c:	4620      	mov	r0, r4
   d530e:	21da      	movs	r1, #218	; 0xda
   d5310:	f7ff ff16 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d5314:	4620      	mov	r0, r4
   d5316:	2112      	movs	r1, #18
   d5318:	f7ff ff12 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d531c:	2181      	movs	r1, #129	; 0x81
   d531e:	4620      	mov	r0, r4
   d5320:	f7ff ff0e 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5324:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d5326:	bf0c      	ite	eq
   d5328:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d532a:	21cf      	movne	r1, #207	; 0xcf
   d532c:	4620      	mov	r0, r4
   d532e:	f7ff ff07 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d5332:	21d9      	movs	r1, #217	; 0xd9
   d5334:	4620      	mov	r0, r4
   d5336:	f7ff ff03 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d533a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d533c:	bf0c      	ite	eq
   d533e:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d5340:	21f1      	movne	r1, #241	; 0xf1
   d5342:	4620      	mov	r0, r4
   d5344:	f7ff fefc 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5348:	4620      	mov	r0, r4
   d534a:	21db      	movs	r1, #219	; 0xdb
   d534c:	f7ff fef8 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d5350:	4620      	mov	r0, r4
   d5352:	2140      	movs	r1, #64	; 0x40
   d5354:	f7ff fef4 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5358:	4620      	mov	r0, r4
   d535a:	21a4      	movs	r1, #164	; 0xa4
   d535c:	f7ff fef0 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5360:	4620      	mov	r0, r4
   d5362:	21a6      	movs	r1, #166	; 0xa6
   d5364:	f7ff feec 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5368:	4620      	mov	r0, r4
   d536a:	21af      	movs	r1, #175	; 0xaf
}
   d536c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5370:	f7ff bee6 	b.w	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d5374 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d5378:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d537a:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d537c:	f7ff fee0 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d5380:	2100      	movs	r1, #0
   d5382:	4620      	mov	r0, r4
   d5384:	f7ff fedc 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d5388:	217f      	movs	r1, #127	; 0x7f
   d538a:	4620      	mov	r0, r4
   d538c:	f7ff fed8 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d5390:	2122      	movs	r1, #34	; 0x22
   d5392:	4620      	mov	r0, r4
   d5394:	f7ff fed4 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d5398:	2100      	movs	r1, #0
   d539a:	4620      	mov	r0, r4
   d539c:	f7ff fed0 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d53a0:	2107      	movs	r1, #7
   d53a2:	4620      	mov	r0, r4
   d53a4:	f7ff fecc 	bl	d5140 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d53a8:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d53ac:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d546c <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d53b0:	3301      	adds	r3, #1
   d53b2:	d035      	beq.n	d5420 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d53b4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d53b8:	2101      	movs	r1, #1
   d53ba:	b280      	uxth	r0, r0
   d53bc:	f002 fbe7 	bl	d7b8e <digitalWrite>
    digitalWrite(dc, HIGH);
   d53c0:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d53c4:	2101      	movs	r1, #1
   d53c6:	b280      	uxth	r0, r0
   d53c8:	f002 fbe1 	bl	d7b8e <digitalWrite>
    digitalWrite(cs, LOW);
   d53cc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d53d0:	2100      	movs	r1, #0
   d53d2:	b280      	uxth	r0, r0
   d53d4:	f002 fbdb 	bl	d7b8e <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d53d8:	2001      	movs	r0, #1
   d53da:	f001 f805 	bl	d63e8 <HAL_Delay_Microseconds>
   d53de:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d53e0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d53e4:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d53e8:	b12b      	cbz	r3, d53f6 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d53ea:	f7ff f833 	bl	d4454 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53ee:	4631      	mov	r1, r6
   d53f0:	f001 fb66 	bl	d6ac0 <_ZN8SPIClass8transferEh>
   d53f4:	e005      	b.n	d5402 <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d53f6:	4633      	mov	r3, r6
   d53f8:	2201      	movs	r2, #1
   d53fa:	7fa1      	ldrb	r1, [r4, #30]
   d53fc:	7f60      	ldrb	r0, [r4, #29]
   d53fe:	f002 fc09 	bl	d7c14 <shiftOut>
   d5402:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5404:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5408:	d1ea      	bne.n	d53e0 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d540a:	2001      	movs	r0, #1
   d540c:	f000 ffec 	bl	d63e8 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d5410:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5414:	2101      	movs	r1, #1
   d5416:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d541c:	f002 bbb7 	b.w	d7b8e <digitalWrite>
   d5420:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d5422:	f002 fc35 	bl	d7c90 <_Z19__fetch_global_Wirev>
   d5426:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d542a:	f001 fef4 	bl	d7216 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d542e:	f002 fc2f 	bl	d7c90 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5432:	6803      	ldr	r3, [r0, #0]
   d5434:	2140      	movs	r1, #64	; 0x40
   d5436:	689b      	ldr	r3, [r3, #8]
   d5438:	4798      	blx	r3
   d543a:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d543c:	f002 fc28 	bl	d7c90 <_Z19__fetch_global_Wirev>
   d5440:	19af      	adds	r7, r5, r6
   d5442:	6803      	ldr	r3, [r0, #0]
   d5444:	b2bf      	uxth	r7, r7
   d5446:	689b      	ldr	r3, [r3, #8]
   d5448:	f818 1007 	ldrb.w	r1, [r8, r7]
   d544c:	3601      	adds	r6, #1
   d544e:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d5450:	2e10      	cmp	r6, #16
   d5452:	d1f3      	bne.n	d543c <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d5454:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d5456:	f002 fc1b 	bl	d7c90 <_Z19__fetch_global_Wirev>
   d545a:	b2ad      	uxth	r5, r5
   d545c:	f001 fee2 	bl	d7224 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5460:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5464:	d1dd      	bne.n	d5422 <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d546a:	bf00      	nop
   d546c:	2003d8d8 	.word	0x2003d8d8

000d5470 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d5470:	f000 bf0a 	b.w	d6288 <HAL_Pin_Map>

000d5474 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5478:	b085      	sub	sp, #20
   d547a:	461e      	mov	r6, r3
   d547c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d5480:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d5484:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5486:	1a9a      	subs	r2, r3, r2
   d5488:	2a00      	cmp	r2, #0
   d548a:	bfb8      	it	lt
   d548c:	4252      	neglt	r2, r2
   d548e:	9200      	str	r2, [sp, #0]
   d5490:	1a72      	subs	r2, r6, r1
   d5492:	2a00      	cmp	r2, #0
   d5494:	bfb8      	it	lt
   d5496:	4252      	neglt	r2, r2
   d5498:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d549a:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d549c:	9a00      	ldr	r2, [sp, #0]
   d549e:	9901      	ldr	r1, [sp, #4]
   d54a0:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d54a2:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d54a4:	dd05      	ble.n	d54b2 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d54a6:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d54a8:	461e      	mov	r6, r3
   d54aa:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d54ac:	4622      	mov	r2, r4
    swap(x0, y0);
   d54ae:	462c      	mov	r4, r5
   d54b0:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d54b2:	42b4      	cmp	r4, r6
   d54b4:	dd05      	ble.n	d54c2 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d54b6:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d54b8:	461d      	mov	r5, r3
   d54ba:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d54bc:	4622      	mov	r2, r4
   d54be:	4634      	mov	r4, r6
   d54c0:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d54c2:	1b5a      	subs	r2, r3, r5
   d54c4:	2a00      	cmp	r2, #0
   d54c6:	bfb8      	it	lt
   d54c8:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d54ca:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d54ce:	429d      	cmp	r5, r3
   d54d0:	bfb4      	ite	lt
   d54d2:	2301      	movlt	r3, #1
   d54d4:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d54d8:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d54dc:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d54de:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d54e0:	fa0f f788 	sxth.w	r7, r8
   d54e4:	2202      	movs	r2, #2
   d54e6:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d54ea:	42b4      	cmp	r4, r6
   d54ec:	dc1f      	bgt.n	d552e <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d54ee:	9a01      	ldr	r2, [sp, #4]
   d54f0:	9b00      	ldr	r3, [sp, #0]
   d54f2:	4293      	cmp	r3, r2
   d54f4:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d54f8:	bfc8      	it	gt
   d54fa:	4622      	movgt	r2, r4
   d54fc:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5500:	bfc8      	it	gt
   d5502:	4629      	movgt	r1, r5
   d5504:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d5506:	bfdc      	itt	le
   d5508:	462a      	movle	r2, r5
   d550a:	4621      	movle	r1, r4
   d550c:	4648      	mov	r0, r9
   d550e:	47d8      	blx	fp
    }
    err -= dy;
   d5510:	9b03      	ldr	r3, [sp, #12]
   d5512:	1aff      	subs	r7, r7, r3
   d5514:	b2bb      	uxth	r3, r7
   d5516:	b21f      	sxth	r7, r3
    if (err < 0) {
   d5518:	2f00      	cmp	r7, #0
   d551a:	da05      	bge.n	d5528 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d551c:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d551e:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d5522:	4415      	add	r5, r2
   d5524:	b22d      	sxth	r5, r5
      err += dx;
   d5526:	b23f      	sxth	r7, r7
   d5528:	3401      	adds	r4, #1
   d552a:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d552c:	e7dd      	b.n	d54ea <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d552e:	b005      	add	sp, #20
   d5530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5534 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5534:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5538:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d553c:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d553e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d5542:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5544:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d5546:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5548:	4691      	mov	r9, r2
   d554a:	460d      	mov	r5, r1
   d554c:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d554e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d5550:	6823      	ldr	r3, [r4, #0]
   d5552:	9600      	str	r6, [sp, #0]
   d5554:	f10a 32ff 	add.w	r2, sl, #4294967295
   d5558:	444a      	add	r2, r9
   d555a:	69df      	ldr	r7, [r3, #28]
   d555c:	4629      	mov	r1, r5
   d555e:	4643      	mov	r3, r8
   d5560:	4620      	mov	r0, r4
   d5562:	b212      	sxth	r2, r2
   d5564:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d5566:	6823      	ldr	r3, [r4, #0]
   d5568:	9600      	str	r6, [sp, #0]
   d556a:	699f      	ldr	r7, [r3, #24]
   d556c:	464a      	mov	r2, r9
   d556e:	4653      	mov	r3, sl
   d5570:	4629      	mov	r1, r5
   d5572:	4620      	mov	r0, r4
   d5574:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d5576:	6823      	ldr	r3, [r4, #0]
   d5578:	960a      	str	r6, [sp, #40]	; 0x28
   d557a:	f108 31ff 	add.w	r1, r8, #4294967295
   d557e:	4429      	add	r1, r5
   d5580:	699d      	ldr	r5, [r3, #24]
   d5582:	464a      	mov	r2, r9
   d5584:	4653      	mov	r3, sl
   d5586:	b209      	sxth	r1, r1
   d5588:	4620      	mov	r0, r4
   d558a:	46ac      	mov	ip, r5
}
   d558c:	b002      	add	sp, #8
   d558e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d5592:	4760      	bx	ip

000d5594 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d5594:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d5596:	3b01      	subs	r3, #1
   d5598:	4413      	add	r3, r2
   d559a:	6804      	ldr	r4, [r0, #0]
   d559c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d55a0:	9501      	str	r5, [sp, #4]
   d55a2:	b21b      	sxth	r3, r3
   d55a4:	9300      	str	r3, [sp, #0]
   d55a6:	6964      	ldr	r4, [r4, #20]
   d55a8:	460b      	mov	r3, r1
   d55aa:	47a0      	blx	r4
}
   d55ac:	b003      	add	sp, #12
   d55ae:	bd30      	pop	{r4, r5, pc}

000d55b0 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d55b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d55b2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d55b6:	6804      	ldr	r4, [r0, #0]
   d55b8:	e88d 0024 	stmia.w	sp, {r2, r5}
   d55bc:	3b01      	subs	r3, #1
   d55be:	440b      	add	r3, r1
   d55c0:	6964      	ldr	r4, [r4, #20]
   d55c2:	b21b      	sxth	r3, r3
   d55c4:	47a0      	blx	r4
}
   d55c6:	b003      	add	sp, #12
   d55c8:	bd30      	pop	{r4, r5, pc}

000d55ca <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d55ca:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d55ce:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d55d2:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d55d6:	4605      	mov	r5, r0
   d55d8:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d55da:	460c      	mov	r4, r1
   d55dc:	eb01 0a03 	add.w	sl, r1, r3
   d55e0:	4554      	cmp	r4, sl
   d55e2:	da0b      	bge.n	d55fc <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d55e4:	682b      	ldr	r3, [r5, #0]
   d55e6:	f8cd 9000 	str.w	r9, [sp]
   d55ea:	699e      	ldr	r6, [r3, #24]
   d55ec:	4621      	mov	r1, r4
   d55ee:	4643      	mov	r3, r8
   d55f0:	463a      	mov	r2, r7
   d55f2:	4628      	mov	r0, r5
   d55f4:	3401      	adds	r4, #1
   d55f6:	47b0      	blx	r6
   d55f8:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d55fa:	e7f1      	b.n	d55e0 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d55fc:	b002      	add	sp, #8
   d55fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5602 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d5602:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d5604:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d5608:	6804      	ldr	r4, [r0, #0]
   d560a:	9101      	str	r1, [sp, #4]
   d560c:	9200      	str	r2, [sp, #0]
   d560e:	2200      	movs	r2, #0
   d5610:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5614:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d5616:	4611      	mov	r1, r2
   d5618:	47a0      	blx	r4
}
   d561a:	b002      	add	sp, #8
   d561c:	bd10      	pop	{r4, pc}

000d561e <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d561e:	4770      	bx	lr

000d5620 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5620:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d5622:	8101      	strh	r1, [r0, #8]
   d5624:	2400      	movs	r4, #0
   d5626:	4d08      	ldr	r5, [pc, #32]	; (d5648 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d5628:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d562a:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d562c:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d562e:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d5632:	2201      	movs	r2, #1
   d5634:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d5636:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d5638:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d563a:	8204      	strh	r4, [r0, #16]
   d563c:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d563e:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d5640:	82c1      	strh	r1, [r0, #22]
   d5642:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d5644:	7682      	strb	r2, [r0, #26]
}
   d5646:	bd30      	pop	{r4, r5, pc}
   d5648:	000da3f4 	.word	0x000da3f4

000d564c <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5650:	b08f      	sub	sp, #60	; 0x3c
   d5652:	4605      	mov	r5, r0
   d5654:	9106      	str	r1, [sp, #24]
   d5656:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d565a:	9107      	str	r1, [sp, #28]
   d565c:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d5660:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d5662:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5666:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5668:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d566c:	4281      	cmp	r1, r0
   d566e:	dd7c      	ble.n	d576a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d5670:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d5674:	4291      	cmp	r1, r2
   d5676:	dd78      	ble.n	d576a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d5678:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d567a:	fb11 0008 	smlabb	r0, r1, r8, r0
   d567e:	2800      	cmp	r0, #0
   d5680:	dd73      	ble.n	d576a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d5682:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d5686:	2800      	cmp	r0, #0
   d5688:	dd6f      	ble.n	d576a <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d568a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d568e:	b296      	uxth	r6, r2
   d5690:	930c      	str	r3, [sp, #48]	; 0x30
   d5692:	f106 0308 	add.w	r3, r6, #8
   d5696:	b29b      	uxth	r3, r3
   d5698:	9109      	str	r1, [sp, #36]	; 0x24
   d569a:	2400      	movs	r4, #0
   d569c:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d569e:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d56a0:	bf1c      	itt	ne
   d56a2:	4b33      	ldrne	r3, [pc, #204]	; (d5770 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d56a4:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d56a6:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d56a8:	bf16      	itet	ne
   d56aa:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d56ac:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d56b0:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d56b4:	9604      	str	r6, [sp, #16]
   d56b6:	fa1f f388 	uxth.w	r3, r8
   d56ba:	9303      	str	r3, [sp, #12]
   d56bc:	9a03      	ldr	r2, [sp, #12]
   d56be:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d56c2:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d56c6:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d56ca:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d56cc:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d56ce:	920a      	str	r2, [sp, #40]	; 0x28
   d56d0:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d56d2:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d56d6:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d56d8:	f019 0f01 	tst.w	r9, #1
   d56dc:	d011      	beq.n	d5702 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d56de:	f1b8 0f01 	cmp.w	r8, #1
   d56e2:	682b      	ldr	r3, [r5, #0]
   d56e4:	d103      	bne.n	d56ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d56e6:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d56ea:	9b07      	ldr	r3, [sp, #28]
   d56ec:	e014      	b.n	d5718 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d56ee:	9a07      	ldr	r2, [sp, #28]
   d56f0:	9201      	str	r2, [sp, #4]
   d56f2:	f8cd a000 	str.w	sl, [sp]
   d56f6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d56fa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d56fe:	4653      	mov	r3, sl
   d5700:	e018      	b.n	d5734 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d5702:	9b07      	ldr	r3, [sp, #28]
   d5704:	9a08      	ldr	r2, [sp, #32]
   d5706:	4293      	cmp	r3, r2
   d5708:	d017      	beq.n	d573a <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d570a:	f1b8 0f01 	cmp.w	r8, #1
   d570e:	682b      	ldr	r3, [r5, #0]
   d5710:	d107      	bne.n	d5722 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d5712:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5716:	4613      	mov	r3, r2
   d5718:	b23a      	sxth	r2, r7
   d571a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d571c:	4628      	mov	r0, r5
   d571e:	47d8      	blx	fp
   d5720:	e00b      	b.n	d573a <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d5722:	9a08      	ldr	r2, [sp, #32]
   d5724:	9201      	str	r2, [sp, #4]
   d5726:	f8cd a000 	str.w	sl, [sp]
   d572a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d572e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5732:	4653      	mov	r3, sl
   d5734:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5736:	4628      	mov	r0, r5
   d5738:	47d8      	blx	fp
   d573a:	9b04      	ldr	r3, [sp, #16]
   d573c:	9a03      	ldr	r2, [sp, #12]
   d573e:	4413      	add	r3, r2
   d5740:	b29b      	uxth	r3, r3
   d5742:	9304      	str	r3, [sp, #16]
   d5744:	9b05      	ldr	r3, [sp, #20]
   d5746:	4413      	add	r3, r2
   d5748:	b29b      	uxth	r3, r3
   d574a:	3701      	adds	r7, #1
   d574c:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d574e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d5750:	b2bf      	uxth	r7, r7
   d5752:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d5754:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d5758:	d1be      	bne.n	d56d8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d575a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d575c:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d575e:	3401      	adds	r4, #1
   d5760:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5764:	b264      	sxtb	r4, r4
   d5766:	9309      	str	r3, [sp, #36]	; 0x24
   d5768:	d199      	bne.n	d569e <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d576a:	b00f      	add	sp, #60	; 0x3c
   d576c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5770:	000da424 	.word	0x000da424

000d5774 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5774:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d5776:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5778:	b085      	sub	sp, #20
   d577a:	4604      	mov	r4, r0
   d577c:	460b      	mov	r3, r1

  if (c == '\n') {
   d577e:	d104      	bne.n	d578a <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d5780:	7e02      	ldrb	r2, [r0, #24]
   d5782:	8a43      	ldrh	r3, [r0, #18]
   d5784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5788:	e023      	b.n	d57d2 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d578a:	290d      	cmp	r1, #13
   d578c:	d024      	beq.n	d57d8 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d578e:	7e05      	ldrb	r5, [r0, #24]
   d5790:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d5794:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5798:	9502      	str	r5, [sp, #8]
   d579a:	8ac5      	ldrh	r5, [r0, #22]
   d579c:	9501      	str	r5, [sp, #4]
   d579e:	8a85      	ldrh	r5, [r0, #20]
   d57a0:	9500      	str	r5, [sp, #0]
   d57a2:	f7ff ff53 	bl	d564c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d57a6:	7e22      	ldrb	r2, [r4, #24]
   d57a8:	8a23      	ldrh	r3, [r4, #16]
   d57aa:	b291      	uxth	r1, r2
   d57ac:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d57b0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d57b4:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d57b6:	b21b      	sxth	r3, r3
   d57b8:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d57ba:	b168      	cbz	r0, d57d8 <_ZN12Adafruit_GFX5writeEh+0x64>
   d57bc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d57c0:	f06f 0505 	mvn.w	r5, #5
   d57c4:	fb05 0202 	mla	r2, r5, r2, r0
   d57c8:	4293      	cmp	r3, r2
   d57ca:	dd05      	ble.n	d57d8 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d57cc:	8a63      	ldrh	r3, [r4, #18]
   d57ce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d57d2:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d57d4:	2300      	movs	r3, #0
   d57d6:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d57d8:	2001      	movs	r0, #1
   d57da:	b005      	add	sp, #20
   d57dc:	bd30      	pop	{r4, r5, pc}

000d57de <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d57de:	7e40      	ldrb	r0, [r0, #25]
   d57e0:	4770      	bx	lr

000d57e2 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d57e2:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d57e6:	4770      	bx	lr

000d57e8 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d57e8:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d57ec:	4770      	bx	lr

000d57ee <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d57ee:	f000 bd4b 	b.w	d6288 <HAL_Pin_Map>

000d57f2 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d57f2:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d57f4:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d57f8:	6803      	ldr	r3, [r0, #0]
   d57fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57fc:	4798      	blx	r3
}
   d57fe:	3000      	adds	r0, #0
   d5800:	bf18      	it	ne
   d5802:	2001      	movne	r0, #1
   d5804:	bd08      	pop	{r3, pc}

000d5806 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d5806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5808:	4606      	mov	r6, r0
   d580a:	460f      	mov	r7, r1
   d580c:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d580e:	b1c4      	cbz	r4, d5842 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d5810:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5814:	6803      	ldr	r3, [r0, #0]
   d5816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5818:	4798      	blx	r3
   d581a:	b908      	cbnz	r0, d5820 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d581c:	2000      	movs	r0, #0
   d581e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d5820:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5824:	2cfa      	cmp	r4, #250	; 0xfa
   d5826:	6803      	ldr	r3, [r0, #0]
   d5828:	4625      	mov	r5, r4
   d582a:	bfa8      	it	ge
   d582c:	25fa      	movge	r5, #250	; 0xfa
   d582e:	68db      	ldr	r3, [r3, #12]
   d5830:	462a      	mov	r2, r5
   d5832:	4639      	mov	r1, r7
   d5834:	4798      	blx	r3
   d5836:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5838:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d583a:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d583c:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d583e:	d0e6      	beq.n	d580e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d5840:	e7ec      	b.n	d581c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d5842:	2001      	movs	r0, #1
}
   d5844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5846 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d5846:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d584a:	4606      	mov	r6, r0
   d584c:	4688      	mov	r8, r1
   d584e:	4691      	mov	r9, r2
   d5850:	461f      	mov	r7, r3
   d5852:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d5854:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5856:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d585a:	6803      	ldr	r3, [r0, #0]
   d585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d585e:	4798      	blx	r3
   d5860:	b1d0      	cbz	r0, d5898 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d5862:	2d00      	cmp	r5, #0
   d5864:	db18      	blt.n	d5898 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d5866:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d586a:	6803      	ldr	r3, [r0, #0]
   d586c:	691b      	ldr	r3, [r3, #16]
   d586e:	4798      	blx	r3
   d5870:	b160      	cbz	r0, d588c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d5872:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5876:	6803      	ldr	r3, [r0, #0]
   d5878:	695b      	ldr	r3, [r3, #20]
   d587a:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d587c:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d5880:	3401      	adds	r4, #1
   d5882:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5884:	454c      	cmp	r4, r9
   d5886:	d007      	beq.n	d5898 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d5888:	463d      	mov	r5, r7
   d588a:	e7ec      	b.n	d5866 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d588c:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d588e:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5890:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5892:	f001 fa0d 	bl	d6cb0 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5896:	e7de      	b.n	d5856 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d5898:	4620      	mov	r0, r4
   d589a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d589e <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d589e:	b570      	push	{r4, r5, r6, lr}
   d58a0:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d58a2:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d58a6:	2296      	movs	r2, #150	; 0x96
   d58a8:	2100      	movs	r1, #0
   d58aa:	4628      	mov	r0, r5
   d58ac:	f004 fc5b 	bl	da166 <memset>
  strcpy((char *)buffer, servername);
   d58b0:	6861      	ldr	r1, [r4, #4]
   d58b2:	4628      	mov	r0, r5
   d58b4:	f004 fc88 	bl	da1c8 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d58b8:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d58bc:	8922      	ldrh	r2, [r4, #8]
   d58be:	6803      	ldr	r3, [r0, #0]
   d58c0:	4629      	mov	r1, r5
   d58c2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d58c4:	2300      	movs	r3, #0
   d58c6:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d58c8:	3000      	adds	r0, #0
   d58ca:	bf18      	it	ne
   d58cc:	2001      	movne	r0, #1
   d58ce:	bd70      	pop	{r4, r5, r6, pc}

000d58d0 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d58d0:	b510      	push	{r4, lr}
   d58d2:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d58d4:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d58d8:	6803      	ldr	r3, [r0, #0]
   d58da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58dc:	4798      	blx	r3
   d58de:	b120      	cbz	r0, d58ea <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d58e0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d58e4:	6803      	ldr	r3, [r0, #0]
   d58e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58e8:	4798      	blx	r3
  }
  return true;
}
   d58ea:	2001      	movs	r0, #1
   d58ec:	bd10      	pop	{r4, pc}

000d58ee <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d58ee:	f000 bccb 	b.w	d6288 <HAL_Pin_Map>
	...

000d58f4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d58f4:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d58f6:	6103      	str	r3, [r0, #16]
  password = pass;
   d58f8:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d58fa:	4d0d      	ldr	r5, [pc, #52]	; (d5930 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d58fc:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d58fe:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d5900:	4a0c      	ldr	r2, [pc, #48]	; (d5934 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5902:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5904:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d5906:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5908:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d590a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d590e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d5912:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d5916:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d591a:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d591e:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d5920:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d5922:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d5926:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d592a:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d592e:	bd30      	pop	{r4, r5, pc}
   d5930:	000da94c 	.word	0x000da94c
   d5934:	000da975 	.word	0x000da975

000d5938 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5938:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d593a:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d593e:	7203      	strb	r3, [r0, #8]
}
   d5940:	bd10      	pop	{r4, pc}

000d5942 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5942:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5944:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5946:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5948:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d594a:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d594c:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d594e:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5950:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5952:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5954:	6283      	str	r3, [r0, #40]	; 0x28
   d5956:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5958:	6303      	str	r3, [r0, #48]	; 0x30
}
   d595a:	bd10      	pop	{r4, pc}

000d595c <_GLOBAL__sub_I__Z11printBufferPht>:
   d595c:	f000 bc94 	b.w	d6288 <HAL_Pin_Map>

000d5960 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5960:	f000 bc92 	b.w	d6288 <HAL_Pin_Map>

000d5964 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5964:	f000 bc90 	b.w	d6288 <HAL_Pin_Map>

000d5968 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5968:	b510      	push	{r4, lr}
   d596a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d596c:	3024      	adds	r0, #36	; 0x24
   d596e:	f000 f98b 	bl	d5c88 <_ZN8FatCache4syncEv>
   d5972:	b128      	cbz	r0, d5980 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5974:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d597c:	f000 b984 	b.w	d5c88 <_ZN8FatCache4syncEv>
  }
   d5980:	bd10      	pop	{r4, pc}

000d5982 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5982:	f000 bc81 	b.w	d6288 <HAL_Pin_Map>

000d5986 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5986:	f000 bc7f 	b.w	d6288 <HAL_Pin_Map>

000d598a <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d598a:	f000 bc7d 	b.w	d6288 <HAL_Pin_Map>

000d598e <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d598e:	f000 bc7b 	b.w	d6288 <HAL_Pin_Map>

000d5992 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5992:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5994:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5996:	f043 0304 	orr.w	r3, r3, #4
   d599a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d599c:	f100 0210 	add.w	r2, r0, #16
   d59a0:	6880      	ldr	r0, [r0, #8]
   d59a2:	f000 ba27 	b.w	d5df4 <_ZN9FatVolume15allocateClusterEmPm>

000d59a6 <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d59a6:	b510      	push	{r4, lr}
   d59a8:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d59aa:	6880      	ldr	r0, [r0, #8]
   d59ac:	460a      	mov	r2, r1
   d59ae:	3024      	adds	r0, #36	; 0x24
   d59b0:	69a1      	ldr	r1, [r4, #24]
   d59b2:	f000 f990 	bl	d5cd6 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d59b6:	b120      	cbz	r0, d59c2 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d59b8:	88a3      	ldrh	r3, [r4, #4]
   d59ba:	f003 030f 	and.w	r3, r3, #15
   d59be:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d59c2:	bd10      	pop	{r4, pc}

000d59c4 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d59c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59c8:	460e      	mov	r6, r1
   d59ca:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d59cc:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d59ce:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d59d0:	2900      	cmp	r1, #0
   d59d2:	d039      	beq.n	d5a48 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d59d4:	6945      	ldr	r5, [r0, #20]
   d59d6:	42b5      	cmp	r5, r6
   d59d8:	d03a      	beq.n	d5a50 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d59da:	b90e      	cbnz	r6, d59e0 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d59dc:	6106      	str	r6, [r0, #16]
    goto done;
   d59de:	e031      	b.n	d5a44 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d59e0:	070b      	lsls	r3, r1, #28
   d59e2:	d503      	bpl.n	d59ec <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d59e4:	69c3      	ldr	r3, [r0, #28]
   d59e6:	429e      	cmp	r6, r3
   d59e8:	d82e      	bhi.n	d5a48 <_ZN7FatFile7seekSetEm+0x84>
   d59ea:	e007      	b.n	d59fc <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d59ec:	0688      	lsls	r0, r1, #26
   d59ee:	d505      	bpl.n	d59fc <_ZN7FatFile7seekSetEm+0x38>
   d59f0:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d59f2:	891b      	ldrh	r3, [r3, #8]
   d59f4:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d59f8:	d826      	bhi.n	d5a48 <_ZN7FatFile7seekSetEm+0x84>
   d59fa:	e023      	b.n	d5a44 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d59fc:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5a00:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5a04:	1e6a      	subs	r2, r5, #1
   d5a06:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5a0a:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5a0c:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5a0e:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5a10:	429a      	cmp	r2, r3
   d5a12:	d800      	bhi.n	d5a16 <_ZN7FatFile7seekSetEm+0x52>
   d5a14:	b94d      	cbnz	r5, d5a2a <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5a16:	064a      	lsls	r2, r1, #25
   d5a18:	bf4c      	ite	mi
   d5a1a:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5a1e:	6a22      	ldrpl	r2, [r4, #32]
   d5a20:	6122      	str	r2, [r4, #16]
   d5a22:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5a24:	f104 0810 	add.w	r8, r4, #16
   d5a28:	e00a      	b.n	d5a40 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5a2a:	1a9b      	subs	r3, r3, r2
   d5a2c:	e7f9      	b.n	d5a22 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5a2e:	4642      	mov	r2, r8
   d5a30:	6921      	ldr	r1, [r4, #16]
   d5a32:	68a0      	ldr	r0, [r4, #8]
   d5a34:	f000 f979 	bl	d5d2a <_ZN9FatVolume6fatGetEmPm>
   d5a38:	2800      	cmp	r0, #0
   d5a3a:	f105 35ff 	add.w	r5, r5, #4294967295
   d5a3e:	dd03      	ble.n	d5a48 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5a40:	2d00      	cmp	r5, #0
   d5a42:	d1f4      	bne.n	d5a2e <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5a44:	6166      	str	r6, [r4, #20]
   d5a46:	e003      	b.n	d5a50 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5a48:	6127      	str	r7, [r4, #16]
  return false;
   d5a4a:	2000      	movs	r0, #0
   d5a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5a50:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5a58 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5a58:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5a5a:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5a5c:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5a5e:	b90b      	cbnz	r3, d5a64 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5a60:	2001      	movs	r0, #1
   d5a62:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5a64:	7883      	ldrb	r3, [r0, #2]
   d5a66:	075a      	lsls	r2, r3, #29
   d5a68:	d523      	bpl.n	d5ab2 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5a6a:	2101      	movs	r1, #1
   d5a6c:	f7ff ff9b 	bl	d59a6 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5a70:	4605      	mov	r5, r0
   d5a72:	b928      	cbnz	r0, d5a80 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5a74:	7863      	ldrb	r3, [r4, #1]
   d5a76:	f043 0301 	orr.w	r3, r3, #1
   d5a7a:	7063      	strb	r3, [r4, #1]
  return false;
   d5a7c:	2000      	movs	r0, #0
   d5a7e:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5a80:	7803      	ldrb	r3, [r0, #0]
   d5a82:	2be5      	cmp	r3, #229	; 0xe5
   d5a84:	d0f6      	beq.n	d5a74 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5a86:	7823      	ldrb	r3, [r4, #0]
   d5a88:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5a8a:	bf44      	itt	mi
   d5a8c:	69e3      	ldrmi	r3, [r4, #28]
   d5a8e:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5a90:	8c23      	ldrh	r3, [r4, #32]
   d5a92:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5a94:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5a96:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5a98:	4b09      	ldr	r3, [pc, #36]	; (d5ac0 <_ZN7FatFile4syncEv+0x68>)
   d5a9a:	681b      	ldr	r3, [r3, #0]
   d5a9c:	b12b      	cbz	r3, d5aaa <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5a9e:	f100 0116 	add.w	r1, r0, #22
   d5aa2:	3018      	adds	r0, #24
   d5aa4:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5aa6:	8b2b      	ldrh	r3, [r5, #24]
   d5aa8:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5aaa:	78a3      	ldrb	r3, [r4, #2]
   d5aac:	f023 0304 	bic.w	r3, r3, #4
   d5ab0:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5ab2:	68a0      	ldr	r0, [r4, #8]
   d5ab4:	f7ff ff58 	bl	d5968 <_ZN9FatVolume9cacheSyncEv>
   d5ab8:	2800      	cmp	r0, #0
   d5aba:	d0db      	beq.n	d5a74 <_ZN7FatFile4syncEv+0x1c>
   d5abc:	e7d0      	b.n	d5a60 <_ZN7FatFile4syncEv+0x8>
   d5abe:	bf00      	nop
   d5ac0:	2003e3d0 	.word	0x2003e3d0

000d5ac4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5ac8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5aca:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5acc:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5ace:	4604      	mov	r4, r0
   d5ad0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5ad2:	d508      	bpl.n	d5ae6 <_ZN7FatFile5writeEPKvj+0x22>
   d5ad4:	7883      	ldrb	r3, [r0, #2]
   d5ad6:	079a      	lsls	r2, r3, #30
   d5ad8:	d505      	bpl.n	d5ae6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5ada:	071b      	lsls	r3, r3, #28
   d5adc:	d50b      	bpl.n	d5af6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5ade:	69e1      	ldr	r1, [r4, #28]
   d5ae0:	f7ff ff70 	bl	d59c4 <_ZN7FatFile7seekSetEm>
   d5ae4:	b938      	cbnz	r0, d5af6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5ae6:	7863      	ldrb	r3, [r4, #1]
   d5ae8:	f043 0301 	orr.w	r3, r3, #1
   d5aec:	7063      	strb	r3, [r4, #1]
  return -1;
   d5aee:	f04f 30ff 	mov.w	r0, #4294967295
   d5af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5af6:	6963      	ldr	r3, [r4, #20]
   d5af8:	43db      	mvns	r3, r3
   d5afa:	4598      	cmp	r8, r3
   d5afc:	d8f3      	bhi.n	d5ae6 <_ZN7FatFile5writeEPKvj+0x22>
   d5afe:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5b00:	f04f 0a00 	mov.w	sl, #0
   d5b04:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5b06:	2e00      	cmp	r6, #0
   d5b08:	f000 8081 	beq.w	d5c0e <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5b0c:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5b0e:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5b10:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5b14:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5b18:	d11c      	bne.n	d5b54 <_ZN7FatFile5writeEPKvj+0x90>
   d5b1a:	b9df      	cbnz	r7, d5b54 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5b1c:	6921      	ldr	r1, [r4, #16]
   d5b1e:	b171      	cbz	r1, d5b3e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5b20:	f104 0210 	add.w	r2, r4, #16
   d5b24:	f000 f901 	bl	d5d2a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5b28:	2800      	cmp	r0, #0
   d5b2a:	dbdc      	blt.n	d5ae6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5b2c:	f040 808e 	bne.w	d5c4c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5b30:	4620      	mov	r0, r4
   d5b32:	f7ff ff2e 	bl	d5992 <_ZN7FatFile10addClusterEv>
   d5b36:	2800      	cmp	r0, #0
   d5b38:	f040 8088 	bne.w	d5c4c <_ZN7FatFile5writeEPKvj+0x188>
   d5b3c:	e7d3      	b.n	d5ae6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5b3e:	6a23      	ldr	r3, [r4, #32]
   d5b40:	b93b      	cbnz	r3, d5b52 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5b42:	4620      	mov	r0, r4
   d5b44:	f7ff ff25 	bl	d5992 <_ZN7FatFile10addClusterEv>
   d5b48:	2800      	cmp	r0, #0
   d5b4a:	d0cc      	beq.n	d5ae6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5b4c:	6923      	ldr	r3, [r4, #16]
   d5b4e:	6223      	str	r3, [r4, #32]
   d5b50:	e000      	b.n	d5b54 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5b52:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5b54:	6921      	ldr	r1, [r4, #16]
   d5b56:	68a0      	ldr	r0, [r4, #8]
   d5b58:	f000 f8e1 	bl	d5d1e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5b5c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5b5e:	b917      	cbnz	r7, d5b66 <_ZN7FatFile5writeEPKvj+0xa2>
   d5b60:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5b64:	d221      	bcs.n	d5baa <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5b66:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5b6a:	42b5      	cmp	r5, r6
   d5b6c:	bf28      	it	cs
   d5b6e:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5b70:	b937      	cbnz	r7, d5b80 <_ZN7FatFile5writeEPKvj+0xbc>
   d5b72:	6963      	ldr	r3, [r4, #20]
   d5b74:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5b76:	4293      	cmp	r3, r2
   d5b78:	bf34      	ite	cc
   d5b7a:	2201      	movcc	r2, #1
   d5b7c:	2205      	movcs	r2, #5
   d5b7e:	e000      	b.n	d5b82 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5b80:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5b82:	68a0      	ldr	r0, [r4, #8]
   d5b84:	3024      	adds	r0, #36	; 0x24
   d5b86:	f000 f8a6 	bl	d5cd6 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5b8a:	2800      	cmp	r0, #0
   d5b8c:	d0ab      	beq.n	d5ae6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5b8e:	4438      	add	r0, r7
   d5b90:	462a      	mov	r2, r5
   d5b92:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5b94:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5b96:	f004 fadb 	bl	da150 <memcpy>
      if (512 == (n + blockOffset)) {
   d5b9a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5b9e:	d130      	bne.n	d5c02 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5ba0:	68a0      	ldr	r0, [r4, #8]
   d5ba2:	3024      	adds	r0, #36	; 0x24
   d5ba4:	f000 f870 	bl	d5c88 <_ZN8FatCache4syncEv>
   d5ba8:	e017      	b.n	d5bda <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5baa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5bae:	68a0      	ldr	r0, [r4, #8]
   d5bb0:	d315      	bcc.n	d5bde <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5bb2:	7902      	ldrb	r2, [r0, #4]
   d5bb4:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5bb6:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5bb8:	b2d2      	uxtb	r2, r2
   d5bba:	4293      	cmp	r3, r2
   d5bbc:	bf28      	it	cs
   d5bbe:	4613      	movcs	r3, r2
   d5bc0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5bc2:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5bc4:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5bc8:	d302      	bcc.n	d5bd0 <_ZN7FatFile5writeEPKvj+0x10c>
   d5bca:	441a      	add	r2, r3
   d5bcc:	4291      	cmp	r1, r2
   d5bce:	d337      	bcc.n	d5c40 <_ZN7FatFile5writeEPKvj+0x17c>
   d5bd0:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5bd2:	464a      	mov	r2, r9
   d5bd4:	6838      	ldr	r0, [r7, #0]
   d5bd6:	f000 fac8 	bl	d616a <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5bda:	b990      	cbnz	r0, d5c02 <_ZN7FatFile5writeEPKvj+0x13e>
   d5bdc:	e783      	b.n	d5ae6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5bde:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5be0:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5be2:	bf02      	ittt	eq
   d5be4:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5be8:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5bec:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5bee:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5bf0:	464a      	mov	r2, r9
   d5bf2:	6818      	ldr	r0, [r3, #0]
   d5bf4:	f000 fa47 	bl	d6086 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5bf8:	2800      	cmp	r0, #0
   d5bfa:	f43f af74 	beq.w	d5ae6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5bfe:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5c02:	6963      	ldr	r3, [r4, #20]
   d5c04:	442b      	add	r3, r5
   d5c06:	6163      	str	r3, [r4, #20]
    src += n;
   d5c08:	44a9      	add	r9, r5
    nToWrite -= n;
   d5c0a:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5c0c:	e77a      	b.n	d5b04 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5c0e:	69e2      	ldr	r2, [r4, #28]
   d5c10:	4293      	cmp	r3, r2
   d5c12:	d901      	bls.n	d5c18 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5c14:	61e3      	str	r3, [r4, #28]
   d5c16:	e002      	b.n	d5c1e <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5c18:	4b0f      	ldr	r3, [pc, #60]	; (d5c58 <_ZN7FatFile5writeEPKvj+0x194>)
   d5c1a:	681b      	ldr	r3, [r3, #0]
   d5c1c:	b11b      	cbz	r3, d5c26 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5c1e:	78a3      	ldrb	r3, [r4, #2]
   d5c20:	f043 0304 	orr.w	r3, r3, #4
   d5c24:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5c26:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5c2a:	2b00      	cmp	r3, #0
   d5c2c:	db02      	blt.n	d5c34 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5c2e:	4640      	mov	r0, r8
   d5c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5c34:	4620      	mov	r0, r4
   d5c36:	f7ff ff0f 	bl	d5a58 <_ZN7FatFile4syncEv>
   d5c3a:	2800      	cmp	r0, #0
   d5c3c:	d1f7      	bne.n	d5c2e <_ZN7FatFile5writeEPKvj+0x16a>
   d5c3e:	e752      	b.n	d5ae6 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5c40:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5c44:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5c48:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5c4a:	e7c1      	b.n	d5bd0 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5c4c:	6921      	ldr	r1, [r4, #16]
   d5c4e:	68a0      	ldr	r0, [r4, #8]
   d5c50:	f000 f865 	bl	d5d1e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5c54:	4601      	mov	r1, r0
   d5c56:	e783      	b.n	d5b60 <_ZN7FatFile5writeEPKvj+0x9c>
   d5c58:	2003e3d0 	.word	0x2003e3d0

000d5c5c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5c5c:	f000 bb14 	b.w	d6288 <HAL_Pin_Map>

000d5c60 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c60:	b570      	push	{r4, r5, r6, lr}
   d5c62:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5c64:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5c66:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5c68:	b149      	cbz	r1, d5c7e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5c6a:	f004 fab5 	bl	da1d8 <strlen>
   d5c6e:	682b      	ldr	r3, [r5, #0]
   d5c70:	4602      	mov	r2, r0
   d5c72:	4621      	mov	r1, r4
   d5c74:	4628      	mov	r0, r5
   d5c76:	68db      	ldr	r3, [r3, #12]
    }
   d5c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c7c:	4718      	bx	r3
    }
   d5c7e:	bd70      	pop	{r4, r5, r6, pc}

000d5c80 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5c80:	f000 bb02 	b.w	d6288 <HAL_Pin_Map>

000d5c84 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5c84:	f000 bb00 	b.w	d6288 <HAL_Pin_Map>

000d5c88 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5c88:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5c8a:	7803      	ldrb	r3, [r0, #0]
   d5c8c:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5c8e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5c90:	d51e      	bpl.n	d5cd0 <_ZN8FatCache4syncEv+0x48>
   d5c92:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5c94:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5c96:	f100 060c 	add.w	r6, r0, #12
   d5c9a:	4632      	mov	r2, r6
   d5c9c:	6818      	ldr	r0, [r3, #0]
   d5c9e:	f000 f9f2 	bl	d6086 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5ca2:	4605      	mov	r5, r0
   d5ca4:	b908      	cbnz	r0, d5caa <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5ca6:	2500      	movs	r5, #0
   d5ca8:	e013      	b.n	d5cd2 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5caa:	7823      	ldrb	r3, [r4, #0]
   d5cac:	079b      	lsls	r3, r3, #30
   d5cae:	d404      	bmi.n	d5cba <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5cb0:	7823      	ldrb	r3, [r4, #0]
   d5cb2:	f023 0301 	bic.w	r3, r3, #1
   d5cb6:	7023      	strb	r3, [r4, #0]
   d5cb8:	e00b      	b.n	d5cd2 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5cba:	6863      	ldr	r3, [r4, #4]
   d5cbc:	68a0      	ldr	r0, [r4, #8]
   d5cbe:	6919      	ldr	r1, [r3, #16]
   d5cc0:	4632      	mov	r2, r6
   d5cc2:	4401      	add	r1, r0
   d5cc4:	6818      	ldr	r0, [r3, #0]
   d5cc6:	f000 f9de 	bl	d6086 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5cca:	2800      	cmp	r0, #0
   d5ccc:	d1f0      	bne.n	d5cb0 <_ZN8FatCache4syncEv+0x28>
   d5cce:	e7ea      	b.n	d5ca6 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5cd0:	2501      	movs	r5, #1

fail:
  return false;
}
   d5cd2:	4628      	mov	r0, r5
   d5cd4:	bd70      	pop	{r4, r5, r6, pc}

000d5cd6 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5cd6:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5cd8:	6883      	ldr	r3, [r0, #8]
   d5cda:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5cdc:	4604      	mov	r4, r0
   d5cde:	460e      	mov	r6, r1
   d5ce0:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5ce2:	d014      	beq.n	d5d0e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5ce4:	f7ff ffd0 	bl	d5c88 <_ZN8FatCache4syncEv>
   d5ce8:	b908      	cbnz	r0, d5cee <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5cea:	2000      	movs	r0, #0
   d5cec:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5cee:	076b      	lsls	r3, r5, #29
   d5cf0:	d503      	bpl.n	d5cfa <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5cf2:	2300      	movs	r3, #0
   d5cf4:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5cf6:	60a6      	str	r6, [r4, #8]
   d5cf8:	e009      	b.n	d5d0e <_ZN8FatCache4readEmh+0x38>
   d5cfa:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5cfc:	f104 020c 	add.w	r2, r4, #12
   d5d00:	4631      	mov	r1, r6
   d5d02:	6818      	ldr	r0, [r3, #0]
   d5d04:	f000 f979 	bl	d5ffa <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5d08:	2800      	cmp	r0, #0
   d5d0a:	d1f2      	bne.n	d5cf2 <_ZN8FatCache4readEmh+0x1c>
   d5d0c:	e7ed      	b.n	d5cea <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5d0e:	7823      	ldrb	r3, [r4, #0]
   d5d10:	4620      	mov	r0, r4
   d5d12:	f005 0503 	and.w	r5, r5, #3
   d5d16:	431d      	orrs	r5, r3
   d5d18:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5d1c:	bd70      	pop	{r4, r5, r6, pc}

000d5d1e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5d1e:	7983      	ldrb	r3, [r0, #6]
   d5d20:	6940      	ldr	r0, [r0, #20]
   d5d22:	3902      	subs	r1, #2
   d5d24:	4099      	lsls	r1, r3
}
   d5d26:	4408      	add	r0, r1
   d5d28:	4770      	bx	lr

000d5d2a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5d2a:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5d2c:	b570      	push	{r4, r5, r6, lr}
   d5d2e:	4605      	mov	r5, r0
   d5d30:	460c      	mov	r4, r1
   d5d32:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5d34:	d802      	bhi.n	d5d3c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5d36:	f04f 30ff 	mov.w	r0, #4294967295
   d5d3a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5d3c:	69c3      	ldr	r3, [r0, #28]
   d5d3e:	4299      	cmp	r1, r3
   d5d40:	d8f9      	bhi.n	d5d36 <_ZN9FatVolume6fatGetEmPm+0xc>
   d5d42:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5d44:	2b20      	cmp	r3, #32
   d5d46:	d110      	bne.n	d5d6a <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5d48:	6981      	ldr	r1, [r0, #24]
   d5d4a:	2202      	movs	r2, #2
   d5d4c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5d50:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5d54:	f7ff ffbf 	bl	d5cd6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5d58:	2800      	cmp	r0, #0
   d5d5a:	d0ec      	beq.n	d5d36 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5d5c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5d60:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5d64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5d68:	e00f      	b.n	d5d8a <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5d6a:	2b10      	cmp	r3, #16
   d5d6c:	d1e3      	bne.n	d5d36 <_ZN9FatVolume6fatGetEmPm+0xc>
   d5d6e:	6983      	ldr	r3, [r0, #24]
   d5d70:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5d74:	2202      	movs	r2, #2
   d5d76:	4419      	add	r1, r3
   d5d78:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5d7c:	f7ff ffab 	bl	d5cd6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5d80:	2800      	cmp	r0, #0
   d5d82:	d0d8      	beq.n	d5d36 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5d84:	b2e4      	uxtb	r4, r4
   d5d86:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d5d8a:	69ea      	ldr	r2, [r5, #28]
   d5d8c:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5d8e:	bf9a      	itte	ls
   d5d90:	6033      	strls	r3, [r6, #0]
  return 1;
   d5d92:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5d94:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d5d96:	bd70      	pop	{r4, r5, r6, pc}

000d5d98 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5d98:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d5d9a:	b538      	push	{r3, r4, r5, lr}
   d5d9c:	460c      	mov	r4, r1
   d5d9e:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5da0:	d801      	bhi.n	d5da6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5da2:	2000      	movs	r0, #0
   d5da4:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5da6:	69c3      	ldr	r3, [r0, #28]
   d5da8:	4299      	cmp	r1, r3
   d5daa:	d8fa      	bhi.n	d5da2 <_ZN9FatVolume6fatPutEmm+0xa>
   d5dac:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5dae:	2b20      	cmp	r3, #32
   d5db0:	d10e      	bne.n	d5dd0 <_ZN9FatVolume6fatPutEmm+0x38>
   d5db2:	6981      	ldr	r1, [r0, #24]
   d5db4:	2203      	movs	r2, #3
   d5db6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5dba:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5dbe:	f7ff ff8a 	bl	d5cd6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5dc2:	2800      	cmp	r0, #0
   d5dc4:	d0ed      	beq.n	d5da2 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d5dc6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5dca:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5dce:	e00f      	b.n	d5df0 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5dd0:	2b10      	cmp	r3, #16
   d5dd2:	d1e6      	bne.n	d5da2 <_ZN9FatVolume6fatPutEmm+0xa>
   d5dd4:	6983      	ldr	r3, [r0, #24]
   d5dd6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5dda:	2203      	movs	r2, #3
   d5ddc:	4419      	add	r1, r3
   d5dde:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5de2:	f7ff ff78 	bl	d5cd6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5de6:	2800      	cmp	r0, #0
   d5de8:	d0db      	beq.n	d5da2 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d5dea:	b2e4      	uxtb	r4, r4
   d5dec:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5df0:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d5df2:	bd38      	pop	{r3, r4, r5, pc}

000d5df4 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5df4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5df8:	68c4      	ldr	r4, [r0, #12]
   d5dfa:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5dfc:	4605      	mov	r5, r0
   d5dfe:	460e      	mov	r6, r1
   d5e00:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5e02:	d207      	bcs.n	d5e14 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d5e04:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d5e06:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5e08:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d5e0a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5e0c:	429c      	cmp	r4, r3
   d5e0e:	d903      	bls.n	d5e18 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d5e10:	b9cf      	cbnz	r7, d5e46 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d5e12:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5e14:	2701      	movs	r7, #1
   d5e16:	e7f7      	b.n	d5e08 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5e18:	42a6      	cmp	r6, r4
   d5e1a:	d014      	beq.n	d5e46 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5e1c:	aa01      	add	r2, sp, #4
   d5e1e:	4621      	mov	r1, r4
   d5e20:	4628      	mov	r0, r5
   d5e22:	f7ff ff82 	bl	d5d2a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5e26:	2800      	cmp	r0, #0
   d5e28:	db0d      	blt.n	d5e46 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5e2a:	d0ed      	beq.n	d5e08 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5e2c:	9b01      	ldr	r3, [sp, #4]
   d5e2e:	2b00      	cmp	r3, #0
   d5e30:	d1ea      	bne.n	d5e08 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d5e32:	b107      	cbz	r7, d5e36 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5e34:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5e36:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5e3a:	4621      	mov	r1, r4
   d5e3c:	4628      	mov	r0, r5
   d5e3e:	f7ff ffab 	bl	d5d98 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d5e42:	4607      	mov	r7, r0
   d5e44:	b908      	cbnz	r0, d5e4a <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5e46:	2700      	movs	r7, #0
   d5e48:	e00b      	b.n	d5e62 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5e4a:	b916      	cbnz	r6, d5e52 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5e4c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5e50:	e007      	b.n	d5e62 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5e52:	4622      	mov	r2, r4
   d5e54:	4631      	mov	r1, r6
   d5e56:	4628      	mov	r0, r5
   d5e58:	f7ff ff9e 	bl	d5d98 <_ZN9FatVolume6fatPutEmm>
   d5e5c:	2800      	cmp	r0, #0
   d5e5e:	d1f5      	bne.n	d5e4c <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5e60:	e7f1      	b.n	d5e46 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5e62:	4638      	mov	r0, r7
   d5e64:	b002      	add	sp, #8
   d5e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e6a <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d5e6a:	f000 ba0d 	b.w	d6288 <HAL_Pin_Map>

000d5e6e <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d5e6e:	f000 ba0b 	b.w	d6288 <HAL_Pin_Map>

000d5e72 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d5e72:	f000 ba09 	b.w	d6288 <HAL_Pin_Map>
	...

000d5e78 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5e78:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5e7a:	4c0e      	ldr	r4, [pc, #56]	; (d5eb4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5e7c:	460e      	mov	r6, r1
   d5e7e:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5e80:	f000 faba 	bl	d63f8 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5e84:	6823      	ldr	r3, [r4, #0]
   d5e86:	1ac0      	subs	r0, r0, r3
   d5e88:	4b0b      	ldr	r3, [pc, #44]	; (d5eb8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d5e8a:	4298      	cmp	r0, r3
   d5e8c:	d908      	bls.n	d5ea0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5e8e:	f000 fabb 	bl	d6408 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5e92:	4b0a      	ldr	r3, [pc, #40]	; (d5ebc <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d5e94:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5e96:	f000 fc83 	bl	d67a0 <spark_process>
   d5e9a:	f000 faad 	bl	d63f8 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d5e9e:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5ea0:	f000 fab2 	bl	d6408 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d5ea4:	b280      	uxth	r0, r0
   d5ea6:	1b80      	subs	r0, r0, r6
}
   d5ea8:	42a8      	cmp	r0, r5
   d5eaa:	bfd4      	ite	le
   d5eac:	2000      	movle	r0, #0
   d5eae:	2001      	movgt	r0, #1
   d5eb0:	bd70      	pop	{r4, r5, r6, pc}
   d5eb2:	bf00      	nop
   d5eb4:	2003e3d4 	.word	0x2003e3d4
   d5eb8:	000186a0 	.word	0x000186a0
   d5ebc:	2003e730 	.word	0x2003e730

000d5ec0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5ec0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d5ec2:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5ec4:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d5ec6:	b94d      	cbnz	r5, d5edc <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5ec8:	6840      	ldr	r0, [r0, #4]
   d5eca:	f000 f975 	bl	d61b8 <_ZN14SdSpiAltDriver8activateEv>
   d5ece:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5ed0:	4629      	mov	r1, r5
   d5ed2:	7d18      	ldrb	r0, [r3, #20]
   d5ed4:	f001 fe5b 	bl	d7b8e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5ed8:	2301      	movs	r3, #1
   d5eda:	7223      	strb	r3, [r4, #8]
   d5edc:	bd38      	pop	{r3, r4, r5, pc}

000d5ede <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5ede:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5ee0:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5ee2:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5ee4:	b16b      	cbz	r3, d5f02 <_ZN9SdSpiCard7spiStopEv+0x24>
   d5ee6:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5ee8:	2101      	movs	r1, #1
   d5eea:	7d18      	ldrb	r0, [r3, #20]
   d5eec:	f001 fe4f 	bl	d7b8e <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5ef0:	21ff      	movs	r1, #255	; 0xff
   d5ef2:	6860      	ldr	r0, [r4, #4]
   d5ef4:	f000 f982 	bl	d61fc <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5ef8:	6860      	ldr	r0, [r4, #4]
   d5efa:	f000 f961 	bl	d61c0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d5efe:	2300      	movs	r3, #0
   d5f00:	7223      	strb	r3, [r4, #8]
   d5f02:	bd10      	pop	{r4, pc}

000d5f04 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d5f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f06:	4604      	mov	r4, r0
   d5f08:	460d      	mov	r5, r1
   d5f0a:	4616      	mov	r6, r2
   d5f0c:	f000 fa7c 	bl	d6408 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5f10:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5f12:	6860      	ldr	r0, [r4, #4]
   d5f14:	f000 f957 	bl	d61c6 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5f18:	28ff      	cmp	r0, #255	; 0xff
   d5f1a:	7260      	strb	r0, [r4, #9]
   d5f1c:	d109      	bne.n	d5f32 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d5f1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5f22:	4639      	mov	r1, r7
   d5f24:	4620      	mov	r0, r4
   d5f26:	f7ff ffa7 	bl	d5e78 <_ZN9SdSpiCard10isTimedOutEtt>
   d5f2a:	2800      	cmp	r0, #0
   d5f2c:	d0f1      	beq.n	d5f12 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5f2e:	2355      	movs	r3, #85	; 0x55
   d5f30:	e00b      	b.n	d5f4a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d5f32:	28fe      	cmp	r0, #254	; 0xfe
   d5f34:	d001      	beq.n	d5f3a <_ZN9SdSpiCard8readDataEPhj+0x36>
   d5f36:	2350      	movs	r3, #80	; 0x50
   d5f38:	e007      	b.n	d5f4a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5f3a:	4632      	mov	r2, r6
   d5f3c:	4629      	mov	r1, r5
   d5f3e:	6860      	ldr	r0, [r4, #4]
   d5f40:	f000 f946 	bl	d61d0 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d5f44:	7260      	strb	r0, [r4, #9]
   d5f46:	b130      	cbz	r0, d5f56 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5f48:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d5f4a:	4620      	mov	r0, r4
   d5f4c:	7023      	strb	r3, [r4, #0]
   d5f4e:	f7ff ffc6 	bl	d5ede <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5f52:	2000      	movs	r0, #0
}
   d5f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5f56:	6860      	ldr	r0, [r4, #4]
   d5f58:	f000 f935 	bl	d61c6 <_ZN14SdSpiAltDriver7receiveEv>
   d5f5c:	6860      	ldr	r0, [r4, #4]
   d5f5e:	f000 f932 	bl	d61c6 <_ZN14SdSpiAltDriver7receiveEv>
   d5f62:	2001      	movs	r0, #1
   d5f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f66 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d5f66:	b570      	push	{r4, r5, r6, lr}
   d5f68:	4604      	mov	r4, r0
   d5f6a:	460e      	mov	r6, r1
   d5f6c:	f000 fa4c 	bl	d6408 <HAL_Timer_Get_Milli_Seconds>
   d5f70:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d5f72:	4632      	mov	r2, r6
   d5f74:	4629      	mov	r1, r5
   d5f76:	4620      	mov	r0, r4
   d5f78:	f7ff ff7e 	bl	d5e78 <_ZN9SdSpiCard10isTimedOutEtt>
   d5f7c:	b930      	cbnz	r0, d5f8c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d5f7e:	6860      	ldr	r0, [r4, #4]
   d5f80:	f000 f921 	bl	d61c6 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d5f84:	28ff      	cmp	r0, #255	; 0xff
   d5f86:	d1f4      	bne.n	d5f72 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d5f88:	2001      	movs	r0, #1
   d5f8a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5f8c:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d5f8e:	bd70      	pop	{r4, r5, r6, pc}

000d5f90 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d5f92:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5f94:	9201      	str	r2, [sp, #4]
   d5f96:	4604      	mov	r4, r0
   d5f98:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d5f9a:	b90b      	cbnz	r3, d5fa0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5f9c:	f7ff ff90 	bl	d5ec0 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d5fa0:	b125      	cbz	r5, d5fac <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d5fa2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5fa6:	4620      	mov	r0, r4
   d5fa8:	f7ff ffdd 	bl	d5f66 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5fac:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d5fb0:	6860      	ldr	r0, [r4, #4]
   d5fb2:	f000 f923 	bl	d61fc <_ZN14SdSpiAltDriver4sendEh>
   d5fb6:	f10d 0607 	add.w	r6, sp, #7
   d5fba:	f10d 0703 	add.w	r7, sp, #3
   d5fbe:	f816 1901 	ldrb.w	r1, [r6], #-1
   d5fc2:	6860      	ldr	r0, [r4, #4]
   d5fc4:	f000 f91a 	bl	d61fc <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d5fc8:	42be      	cmp	r6, r7
   d5fca:	d1f8      	bne.n	d5fbe <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d5fcc:	2d00      	cmp	r5, #0
   d5fce:	bf0c      	ite	eq
   d5fd0:	2195      	moveq	r1, #149	; 0x95
   d5fd2:	2187      	movne	r1, #135	; 0x87
   d5fd4:	6860      	ldr	r0, [r4, #4]
   d5fd6:	f000 f911 	bl	d61fc <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5fda:	6860      	ldr	r0, [r4, #4]
   d5fdc:	f000 f8f3 	bl	d61c6 <_ZN14SdSpiAltDriver7receiveEv>
   d5fe0:	250b      	movs	r5, #11
   d5fe2:	6860      	ldr	r0, [r4, #4]
   d5fe4:	f000 f8ef 	bl	d61c6 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5fe8:	0603      	lsls	r3, r0, #24
   d5fea:	7260      	strb	r0, [r4, #9]
   d5fec:	d503      	bpl.n	d5ff6 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d5fee:	3d01      	subs	r5, #1
   d5ff0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5ff4:	d1f5      	bne.n	d5fe2 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d5ff6:	b003      	add	sp, #12
   d5ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ffa <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5ffa:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5ffc:	7a83      	ldrb	r3, [r0, #10]
   d5ffe:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6000:	bf18      	it	ne
   d6002:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6004:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6006:	460a      	mov	r2, r1
   d6008:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d600a:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d600c:	f7ff ffc0 	bl	d5f90 <_ZN9SdSpiCard11cardCommandEhm>
   d6010:	b110      	cbz	r0, d6018 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6012:	2330      	movs	r3, #48	; 0x30
   d6014:	7023      	strb	r3, [r4, #0]
   d6016:	e00b      	b.n	d6030 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d6018:	4629      	mov	r1, r5
   d601a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d601e:	4620      	mov	r0, r4
   d6020:	f7ff ff70 	bl	d5f04 <_ZN9SdSpiCard8readDataEPhj>
   d6024:	4605      	mov	r5, r0
   d6026:	b118      	cbz	r0, d6030 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d6028:	4620      	mov	r0, r4
   d602a:	f7ff ff58 	bl	d5ede <_ZN9SdSpiCard7spiStopEv>
  return true;
   d602e:	e003      	b.n	d6038 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d6030:	4620      	mov	r0, r4
   d6032:	f7ff ff54 	bl	d5ede <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6036:	2500      	movs	r5, #0
}
   d6038:	4628      	mov	r0, r5
   d603a:	bd38      	pop	{r3, r4, r5, pc}

000d603c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d603c:	b538      	push	{r3, r4, r5, lr}
   d603e:	4604      	mov	r4, r0
   d6040:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6042:	6840      	ldr	r0, [r0, #4]
   d6044:	f000 f8da 	bl	d61fc <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d6048:	f44f 7200 	mov.w	r2, #512	; 0x200
   d604c:	4629      	mov	r1, r5
   d604e:	6860      	ldr	r0, [r4, #4]
   d6050:	f000 f8d8 	bl	d6204 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6054:	21ff      	movs	r1, #255	; 0xff
   d6056:	6860      	ldr	r0, [r4, #4]
   d6058:	f000 f8d0 	bl	d61fc <_ZN14SdSpiAltDriver4sendEh>
   d605c:	21ff      	movs	r1, #255	; 0xff
   d605e:	6860      	ldr	r0, [r4, #4]
   d6060:	f000 f8cc 	bl	d61fc <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6064:	6860      	ldr	r0, [r4, #4]
   d6066:	f000 f8ae 	bl	d61c6 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d606a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d606c:	f000 001f 	and.w	r0, r0, #31
   d6070:	2805      	cmp	r0, #5
   d6072:	d006      	beq.n	d6082 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6074:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6076:	4620      	mov	r0, r4
   d6078:	7023      	strb	r3, [r4, #0]
   d607a:	f7ff ff30 	bl	d5ede <_ZN9SdSpiCard7spiStopEv>
  return false;
   d607e:	2000      	movs	r0, #0
   d6080:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6082:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6084:	bd38      	pop	{r3, r4, r5, pc}

000d6086 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6086:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6088:	7a83      	ldrb	r3, [r0, #10]
   d608a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d608c:	bf18      	it	ne
   d608e:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6090:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6092:	460a      	mov	r2, r1
   d6094:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6096:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6098:	f7ff ff7a 	bl	d5f90 <_ZN9SdSpiCard11cardCommandEhm>
   d609c:	4606      	mov	r6, r0
   d609e:	b108      	cbz	r0, d60a4 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d60a0:	2332      	movs	r3, #50	; 0x32
   d60a2:	e01d      	b.n	d60e0 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d60a4:	462a      	mov	r2, r5
   d60a6:	21fe      	movs	r1, #254	; 0xfe
   d60a8:	4620      	mov	r0, r4
   d60aa:	f7ff ffc7 	bl	d603c <_ZN9SdSpiCard9writeDataEhPKh>
   d60ae:	b1c0      	cbz	r0, d60e2 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d60b0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d60b4:	4620      	mov	r0, r4
   d60b6:	f7ff ff56 	bl	d5f66 <_ZN9SdSpiCard11waitNotBusyEt>
   d60ba:	4605      	mov	r5, r0
   d60bc:	b908      	cbnz	r0, d60c2 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d60be:	235a      	movs	r3, #90	; 0x5a
   d60c0:	e00e      	b.n	d60e0 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d60c2:	4632      	mov	r2, r6
   d60c4:	210d      	movs	r1, #13
   d60c6:	4620      	mov	r0, r4
   d60c8:	f7ff ff62 	bl	d5f90 <_ZN9SdSpiCard11cardCommandEhm>
   d60cc:	b938      	cbnz	r0, d60de <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d60ce:	6860      	ldr	r0, [r4, #4]
   d60d0:	f000 f879 	bl	d61c6 <_ZN14SdSpiAltDriver7receiveEv>
   d60d4:	b918      	cbnz	r0, d60de <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d60d6:	4620      	mov	r0, r4
   d60d8:	f7ff ff01 	bl	d5ede <_ZN9SdSpiCard7spiStopEv>
  return true;
   d60dc:	e005      	b.n	d60ea <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d60de:	2329      	movs	r3, #41	; 0x29
   d60e0:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d60e2:	4620      	mov	r0, r4
   d60e4:	f7ff fefb 	bl	d5ede <_ZN9SdSpiCard7spiStopEv>
  return false;
   d60e8:	2500      	movs	r5, #0
}
   d60ea:	4628      	mov	r0, r5
   d60ec:	bd70      	pop	{r4, r5, r6, pc}

000d60ee <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d60ee:	b538      	push	{r3, r4, r5, lr}
   d60f0:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d60f2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d60f6:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d60f8:	f7ff ff35 	bl	d5f66 <_ZN9SdSpiCard11waitNotBusyEt>
   d60fc:	b910      	cbnz	r0, d6104 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d60fe:	235b      	movs	r3, #91	; 0x5b
   d6100:	7023      	strb	r3, [r4, #0]
   d6102:	e005      	b.n	d6110 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6104:	462a      	mov	r2, r5
   d6106:	21fc      	movs	r1, #252	; 0xfc
   d6108:	4620      	mov	r0, r4
   d610a:	f7ff ff97 	bl	d603c <_ZN9SdSpiCard9writeDataEhPKh>
   d610e:	b918      	cbnz	r0, d6118 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6110:	4620      	mov	r0, r4
   d6112:	f7ff fee4 	bl	d5ede <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6116:	2000      	movs	r0, #0
}
   d6118:	bd38      	pop	{r3, r4, r5, pc}

000d611a <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d611a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d611c:	7a83      	ldrb	r3, [r0, #10]
   d611e:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6120:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6122:	bf18      	it	ne
   d6124:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6126:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6128:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d612a:	f7ff ff31 	bl	d5f90 <_ZN9SdSpiCard11cardCommandEhm>
   d612e:	b130      	cbz	r0, d613e <_ZN9SdSpiCard10writeStartEm+0x24>
   d6130:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6132:	4620      	mov	r0, r4
   d6134:	7023      	strb	r3, [r4, #0]
   d6136:	f7ff fed2 	bl	d5ede <_ZN9SdSpiCard7spiStopEv>
  return false;
   d613a:	2000      	movs	r0, #0
   d613c:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d613e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6140:	bd10      	pop	{r4, pc}

000d6142 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6142:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6144:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6148:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d614a:	f7ff ff0c 	bl	d5f66 <_ZN9SdSpiCard11waitNotBusyEt>
   d614e:	4605      	mov	r5, r0
   d6150:	b120      	cbz	r0, d615c <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6152:	21fd      	movs	r1, #253	; 0xfd
   d6154:	6860      	ldr	r0, [r4, #4]
   d6156:	f000 f851 	bl	d61fc <_ZN14SdSpiAltDriver4sendEh>
   d615a:	e001      	b.n	d6160 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d615c:	2356      	movs	r3, #86	; 0x56
   d615e:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d6160:	4620      	mov	r0, r4
   d6162:	f7ff febc 	bl	d5ede <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6166:	4628      	mov	r0, r5
   d6168:	bd38      	pop	{r3, r4, r5, pc}

000d616a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d616c:	4605      	mov	r5, r0
   d616e:	4616      	mov	r6, r2
   d6170:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6172:	f7ff ffd2 	bl	d611a <_ZN9SdSpiCard10writeStartEm>
   d6176:	b170      	cbz	r0, d6196 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d6178:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d617a:	42bc      	cmp	r4, r7
   d617c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6180:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6182:	d004      	beq.n	d618e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6184:	f7ff ffb3 	bl	d60ee <_ZN9SdSpiCard9writeDataEPKh>
   d6188:	b128      	cbz	r0, d6196 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d618a:	3401      	adds	r4, #1
   d618c:	e7f5      	b.n	d617a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d618e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6192:	f7ff bfd6 	b.w	d6142 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6196:	4628      	mov	r0, r5
   d6198:	f7ff fea1 	bl	d5ede <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d619c:	2000      	movs	r0, #0
   d619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61a0 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d61a0:	f000 b872 	b.w	d6288 <HAL_Pin_Map>

000d61a4 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d61a4:	f000 b870 	b.w	d6288 <HAL_Pin_Map>

000d61a8 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d61a8:	f000 b86e 	b.w	d6288 <HAL_Pin_Map>

000d61ac <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d61ac:	4b01      	ldr	r3, [pc, #4]	; (d61b4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d61ae:	2201      	movs	r2, #1
   d61b0:	701a      	strb	r2, [r3, #0]
   d61b2:	4770      	bx	lr
   d61b4:	2003e3d8 	.word	0x2003e3d8

000d61b8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d61b8:	1d01      	adds	r1, r0, #4
   d61ba:	6800      	ldr	r0, [r0, #0]
   d61bc:	f000 bbba 	b.w	d6934 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d61c0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d61c0:	6800      	ldr	r0, [r0, #0]
   d61c2:	f000 bb9e 	b.w	d6902 <_ZN8SPIClass14endTransactionEv>

000d61c6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d61c6:	21ff      	movs	r1, #255	; 0xff
   d61c8:	6800      	ldr	r0, [r0, #0]
   d61ca:	f000 bc79 	b.w	d6ac0 <_ZN8SPIClass8transferEh>
	...

000d61d0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d61d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d61d2:	4b08      	ldr	r3, [pc, #32]	; (d61f4 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d61d4:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d61d6:	2500      	movs	r5, #0
   d61d8:	4c07      	ldr	r4, [pc, #28]	; (d61f8 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d61da:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d61dc:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d61de:	4613      	mov	r3, r2
   d61e0:	460a      	mov	r2, r1
   d61e2:	4629      	mov	r1, r5
   d61e4:	f000 fc72 	bl	d6acc <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d61e8:	7823      	ldrb	r3, [r4, #0]
   d61ea:	2b00      	cmp	r3, #0
   d61ec:	d0fc      	beq.n	d61e8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d61ee:	2000      	movs	r0, #0
   d61f0:	b003      	add	sp, #12
   d61f2:	bd30      	pop	{r4, r5, pc}
   d61f4:	000d61ad 	.word	0x000d61ad
   d61f8:	2003e3d8 	.word	0x2003e3d8

000d61fc <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d61fc:	6800      	ldr	r0, [r0, #0]
   d61fe:	f000 bc5f 	b.w	d6ac0 <_ZN8SPIClass8transferEh>
	...

000d6204 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6204:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6206:	4b07      	ldr	r3, [pc, #28]	; (d6224 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6208:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d620a:	2500      	movs	r5, #0
   d620c:	4c06      	ldr	r4, [pc, #24]	; (d6228 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d620e:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6210:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6212:	4613      	mov	r3, r2
   d6214:	462a      	mov	r2, r5
   d6216:	f000 fc59 	bl	d6acc <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d621a:	7823      	ldrb	r3, [r4, #0]
   d621c:	2b00      	cmp	r3, #0
   d621e:	d0fc      	beq.n	d621a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6220:	b003      	add	sp, #12
   d6222:	bd30      	pop	{r4, r5, pc}
   d6224:	000d61ad 	.word	0x000d61ad
   d6228:	2003e3d8 	.word	0x2003e3d8

000d622c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d622c:	f000 b82c 	b.w	d6288 <HAL_Pin_Map>

000d6230 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d6230:	2200      	movs	r2, #0
   d6232:	6001      	str	r1, [r0, #0]
   d6234:	6102      	str	r2, [r0, #16]
   d6236:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d6238:	4770      	bx	lr

000d623a <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d623a:	b510      	push	{r4, lr}
   d623c:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d623e:	8800      	ldrh	r0, [r0, #0]
   d6240:	f001 fcd1 	bl	d7be6 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d6244:	f240 3312 	movw	r3, #786	; 0x312
   d6248:	f1a0 020b 	sub.w	r2, r0, #11
   d624c:	429a      	cmp	r2, r3
   d624e:	d807      	bhi.n	d6260 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d6250:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d6252:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d6254:	60e0      	str	r0, [r4, #12]
   d6256:	f000 f8d7 	bl	d6408 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d625a:	61a0      	str	r0, [r4, #24]

        return true;
   d625c:	2001      	movs	r0, #1
   d625e:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d6260:	2000      	movs	r0, #0
    }
}
   d6262:	bd10      	pop	{r4, pc}

000d6264 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d6264:	f000 b810 	b.w	d6288 <HAL_Pin_Map>

000d6268 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6268:	b508      	push	{r3, lr}
   d626a:	4b02      	ldr	r3, [pc, #8]	; (d6274 <netdb_freeaddrinfo+0xc>)
   d626c:	681b      	ldr	r3, [r3, #0]
   d626e:	689b      	ldr	r3, [r3, #8]
   d6270:	9301      	str	r3, [sp, #4]
   d6272:	bd08      	pop	{r3, pc}
   d6274:	00030268 	.word	0x00030268

000d6278 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6278:	b508      	push	{r3, lr}
   d627a:	4b02      	ldr	r3, [pc, #8]	; (d6284 <netdb_getaddrinfo+0xc>)
   d627c:	681b      	ldr	r3, [r3, #0]
   d627e:	68db      	ldr	r3, [r3, #12]
   d6280:	9301      	str	r3, [sp, #4]
   d6282:	bd08      	pop	{r3, pc}
   d6284:	00030268 	.word	0x00030268

000d6288 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6288:	b508      	push	{r3, lr}
   d628a:	4b02      	ldr	r3, [pc, #8]	; (d6294 <HAL_Pin_Map+0xc>)
   d628c:	681b      	ldr	r3, [r3, #0]
   d628e:	681b      	ldr	r3, [r3, #0]
   d6290:	9301      	str	r3, [sp, #4]
   d6292:	bd08      	pop	{r3, pc}
   d6294:	0003022c 	.word	0x0003022c

000d6298 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6298:	b508      	push	{r3, lr}
   d629a:	4b02      	ldr	r3, [pc, #8]	; (d62a4 <HAL_Validate_Pin_Function+0xc>)
   d629c:	681b      	ldr	r3, [r3, #0]
   d629e:	685b      	ldr	r3, [r3, #4]
   d62a0:	9301      	str	r3, [sp, #4]
   d62a2:	bd08      	pop	{r3, pc}
   d62a4:	0003022c 	.word	0x0003022c

000d62a8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d62a8:	b508      	push	{r3, lr}
   d62aa:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <HAL_Pin_Mode+0xc>)
   d62ac:	681b      	ldr	r3, [r3, #0]
   d62ae:	689b      	ldr	r3, [r3, #8]
   d62b0:	9301      	str	r3, [sp, #4]
   d62b2:	bd08      	pop	{r3, pc}
   d62b4:	0003022c 	.word	0x0003022c

000d62b8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d62b8:	b508      	push	{r3, lr}
   d62ba:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <HAL_Get_Pin_Mode+0xc>)
   d62bc:	681b      	ldr	r3, [r3, #0]
   d62be:	68db      	ldr	r3, [r3, #12]
   d62c0:	9301      	str	r3, [sp, #4]
   d62c2:	bd08      	pop	{r3, pc}
   d62c4:	0003022c 	.word	0x0003022c

000d62c8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <HAL_GPIO_Write+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	691b      	ldr	r3, [r3, #16]
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	0003022c 	.word	0x0003022c

000d62d8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d62d8:	b508      	push	{r3, lr}
   d62da:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <HAL_GPIO_Read+0xc>)
   d62dc:	681b      	ldr	r3, [r3, #0]
   d62de:	695b      	ldr	r3, [r3, #20]
   d62e0:	9301      	str	r3, [sp, #4]
   d62e2:	bd08      	pop	{r3, pc}
   d62e4:	0003022c 	.word	0x0003022c

000d62e8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d62e8:	b508      	push	{r3, lr}
   d62ea:	4b02      	ldr	r3, [pc, #8]	; (d62f4 <HAL_ADC_Read+0xc>)
   d62ec:	681b      	ldr	r3, [r3, #0]
   d62ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62f0:	9301      	str	r3, [sp, #4]
   d62f2:	bd08      	pop	{r3, pc}
   d62f4:	0003022c 	.word	0x0003022c

000d62f8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d62f8:	b508      	push	{r3, lr}
   d62fa:	4b02      	ldr	r3, [pc, #8]	; (d6304 <HAL_SPI_Begin+0xc>)
   d62fc:	681b      	ldr	r3, [r3, #0]
   d62fe:	681b      	ldr	r3, [r3, #0]
   d6300:	9301      	str	r3, [sp, #4]
   d6302:	bd08      	pop	{r3, pc}
   d6304:	00030230 	.word	0x00030230

000d6308 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d6308:	b508      	push	{r3, lr}
   d630a:	4b02      	ldr	r3, [pc, #8]	; (d6314 <HAL_SPI_Set_Bit_Order+0xc>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	689b      	ldr	r3, [r3, #8]
   d6310:	9301      	str	r3, [sp, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	00030230 	.word	0x00030230

000d6318 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d6318:	b508      	push	{r3, lr}
   d631a:	4b02      	ldr	r3, [pc, #8]	; (d6324 <HAL_SPI_Set_Data_Mode+0xc>)
   d631c:	681b      	ldr	r3, [r3, #0]
   d631e:	68db      	ldr	r3, [r3, #12]
   d6320:	9301      	str	r3, [sp, #4]
   d6322:	bd08      	pop	{r3, pc}
   d6324:	00030230 	.word	0x00030230

000d6328 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d6328:	b508      	push	{r3, lr}
   d632a:	4b02      	ldr	r3, [pc, #8]	; (d6334 <HAL_SPI_Set_Clock_Divider+0xc>)
   d632c:	681b      	ldr	r3, [r3, #0]
   d632e:	691b      	ldr	r3, [r3, #16]
   d6330:	9301      	str	r3, [sp, #4]
   d6332:	bd08      	pop	{r3, pc}
   d6334:	00030230 	.word	0x00030230

000d6338 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6338:	b508      	push	{r3, lr}
   d633a:	4b02      	ldr	r3, [pc, #8]	; (d6344 <HAL_SPI_Send_Receive_Data+0xc>)
   d633c:	681b      	ldr	r3, [r3, #0]
   d633e:	695b      	ldr	r3, [r3, #20]
   d6340:	9301      	str	r3, [sp, #4]
   d6342:	bd08      	pop	{r3, pc}
   d6344:	00030230 	.word	0x00030230

000d6348 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6348:	b508      	push	{r3, lr}
   d634a:	4b02      	ldr	r3, [pc, #8]	; (d6354 <HAL_SPI_Init+0xc>)
   d634c:	681b      	ldr	r3, [r3, #0]
   d634e:	69db      	ldr	r3, [r3, #28]
   d6350:	9301      	str	r3, [sp, #4]
   d6352:	bd08      	pop	{r3, pc}
   d6354:	00030230 	.word	0x00030230

000d6358 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6358:	b508      	push	{r3, lr}
   d635a:	4b02      	ldr	r3, [pc, #8]	; (d6364 <HAL_SPI_Is_Enabled+0xc>)
   d635c:	681b      	ldr	r3, [r3, #0]
   d635e:	6a1b      	ldr	r3, [r3, #32]
   d6360:	9301      	str	r3, [sp, #4]
   d6362:	bd08      	pop	{r3, pc}
   d6364:	00030230 	.word	0x00030230

000d6368 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6368:	b508      	push	{r3, lr}
   d636a:	4b02      	ldr	r3, [pc, #8]	; (d6374 <HAL_SPI_Info+0xc>)
   d636c:	681b      	ldr	r3, [r3, #0]
   d636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6370:	9301      	str	r3, [sp, #4]
   d6372:	bd08      	pop	{r3, pc}
   d6374:	00030230 	.word	0x00030230

000d6378 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d6378:	b508      	push	{r3, lr}
   d637a:	4b02      	ldr	r3, [pc, #8]	; (d6384 <HAL_SPI_DMA_Transfer+0xc>)
   d637c:	681b      	ldr	r3, [r3, #0]
   d637e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6380:	9301      	str	r3, [sp, #4]
   d6382:	bd08      	pop	{r3, pc}
   d6384:	00030230 	.word	0x00030230

000d6388 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d6388:	b508      	push	{r3, lr}
   d638a:	4b02      	ldr	r3, [pc, #8]	; (d6394 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d638c:	681b      	ldr	r3, [r3, #0]
   d638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6390:	9301      	str	r3, [sp, #4]
   d6392:	bd08      	pop	{r3, pc}
   d6394:	00030230 	.word	0x00030230

000d6398 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6398:	b508      	push	{r3, lr}
   d639a:	4b02      	ldr	r3, [pc, #8]	; (d63a4 <HAL_SPI_Set_Settings+0xc>)
   d639c:	681b      	ldr	r3, [r3, #0]
   d639e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d63a0:	9301      	str	r3, [sp, #4]
   d63a2:	bd08      	pop	{r3, pc}
   d63a4:	00030230 	.word	0x00030230

000d63a8 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d63a8:	b508      	push	{r3, lr}
   d63aa:	4b02      	ldr	r3, [pc, #8]	; (d63b4 <HAL_SPI_Acquire+0xc>)
   d63ac:	681b      	ldr	r3, [r3, #0]
   d63ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d63b0:	9301      	str	r3, [sp, #4]
   d63b2:	bd08      	pop	{r3, pc}
   d63b4:	00030230 	.word	0x00030230

000d63b8 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d63b8:	b508      	push	{r3, lr}
   d63ba:	4b02      	ldr	r3, [pc, #8]	; (d63c4 <HAL_SPI_Release+0xc>)
   d63bc:	681b      	ldr	r3, [r3, #0]
   d63be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d63c0:	9301      	str	r3, [sp, #4]
   d63c2:	bd08      	pop	{r3, pc}
   d63c4:	00030230 	.word	0x00030230

000d63c8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d63c8:	b508      	push	{r3, lr}
   d63ca:	4b02      	ldr	r3, [pc, #8]	; (d63d4 <if_index_to_name+0xc>)
   d63cc:	681b      	ldr	r3, [r3, #0]
   d63ce:	695b      	ldr	r3, [r3, #20]
   d63d0:	9301      	str	r3, [sp, #4]
   d63d2:	bd08      	pop	{r3, pc}
   d63d4:	0003026c 	.word	0x0003026c

000d63d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d63d8:	b508      	push	{r3, lr}
   d63da:	4b02      	ldr	r3, [pc, #8]	; (d63e4 <HAL_RNG_GetRandomNumber+0xc>)
   d63dc:	681b      	ldr	r3, [r3, #0]
   d63de:	685b      	ldr	r3, [r3, #4]
   d63e0:	9301      	str	r3, [sp, #4]
   d63e2:	bd08      	pop	{r3, pc}
   d63e4:	00030218 	.word	0x00030218

000d63e8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d63e8:	b508      	push	{r3, lr}
   d63ea:	4b02      	ldr	r3, [pc, #8]	; (d63f4 <HAL_Delay_Microseconds+0xc>)
   d63ec:	681b      	ldr	r3, [r3, #0]
   d63ee:	68db      	ldr	r3, [r3, #12]
   d63f0:	9301      	str	r3, [sp, #4]
   d63f2:	bd08      	pop	{r3, pc}
   d63f4:	00030218 	.word	0x00030218

000d63f8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d63f8:	b508      	push	{r3, lr}
   d63fa:	4b02      	ldr	r3, [pc, #8]	; (d6404 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d63fc:	681b      	ldr	r3, [r3, #0]
   d63fe:	691b      	ldr	r3, [r3, #16]
   d6400:	9301      	str	r3, [sp, #4]
   d6402:	bd08      	pop	{r3, pc}
   d6404:	00030218 	.word	0x00030218

000d6408 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6408:	b508      	push	{r3, lr}
   d640a:	4b02      	ldr	r3, [pc, #8]	; (d6414 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d640c:	681b      	ldr	r3, [r3, #0]
   d640e:	695b      	ldr	r3, [r3, #20]
   d6410:	9301      	str	r3, [sp, #4]
   d6412:	bd08      	pop	{r3, pc}
   d6414:	00030218 	.word	0x00030218

000d6418 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6418:	b508      	push	{r3, lr}
   d641a:	4b02      	ldr	r3, [pc, #8]	; (d6424 <os_thread_is_current+0xc>)
   d641c:	681b      	ldr	r3, [r3, #0]
   d641e:	689b      	ldr	r3, [r3, #8]
   d6420:	9301      	str	r3, [sp, #4]
   d6422:	bd08      	pop	{r3, pc}
   d6424:	00030248 	.word	0x00030248

000d6428 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6428:	b508      	push	{r3, lr}
   d642a:	4b02      	ldr	r3, [pc, #8]	; (d6434 <os_thread_join+0xc>)
   d642c:	681b      	ldr	r3, [r3, #0]
   d642e:	691b      	ldr	r3, [r3, #16]
   d6430:	9301      	str	r3, [sp, #4]
   d6432:	bd08      	pop	{r3, pc}
   d6434:	00030248 	.word	0x00030248

000d6438 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6438:	b508      	push	{r3, lr}
   d643a:	4b02      	ldr	r3, [pc, #8]	; (d6444 <os_thread_cleanup+0xc>)
   d643c:	681b      	ldr	r3, [r3, #0]
   d643e:	695b      	ldr	r3, [r3, #20]
   d6440:	9301      	str	r3, [sp, #4]
   d6442:	bd08      	pop	{r3, pc}
   d6444:	00030248 	.word	0x00030248

000d6448 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6448:	b508      	push	{r3, lr}
   d644a:	4b02      	ldr	r3, [pc, #8]	; (d6454 <os_mutex_recursive_create+0xc>)
   d644c:	681b      	ldr	r3, [r3, #0]
   d644e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6450:	9301      	str	r3, [sp, #4]
   d6452:	bd08      	pop	{r3, pc}
   d6454:	00030248 	.word	0x00030248

000d6458 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6458:	b508      	push	{r3, lr}
   d645a:	4b02      	ldr	r3, [pc, #8]	; (d6464 <os_mutex_recursive_destroy+0xc>)
   d645c:	681b      	ldr	r3, [r3, #0]
   d645e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6460:	9301      	str	r3, [sp, #4]
   d6462:	bd08      	pop	{r3, pc}
   d6464:	00030248 	.word	0x00030248

000d6468 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6468:	b508      	push	{r3, lr}
   d646a:	4b02      	ldr	r3, [pc, #8]	; (d6474 <inet_inet_ntop+0xc>)
   d646c:	681b      	ldr	r3, [r3, #0]
   d646e:	695b      	ldr	r3, [r3, #20]
   d6470:	9301      	str	r3, [sp, #4]
   d6472:	bd08      	pop	{r3, pc}
   d6474:	00030264 	.word	0x00030264

000d6478 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6478:	b508      	push	{r3, lr}
   d647a:	4b02      	ldr	r3, [pc, #8]	; (d6484 <inet_htonl+0xc>)
   d647c:	681b      	ldr	r3, [r3, #0]
   d647e:	6a1b      	ldr	r3, [r3, #32]
   d6480:	9301      	str	r3, [sp, #4]
   d6482:	bd08      	pop	{r3, pc}
   d6484:	00030264 	.word	0x00030264

000d6488 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6488:	b508      	push	{r3, lr}
   d648a:	4b02      	ldr	r3, [pc, #8]	; (d6494 <inet_htons+0xc>)
   d648c:	681b      	ldr	r3, [r3, #0]
   d648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6490:	9301      	str	r3, [sp, #4]
   d6492:	bd08      	pop	{r3, pc}
   d6494:	00030264 	.word	0x00030264

000d6498 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6498:	b508      	push	{r3, lr}
   d649a:	4b02      	ldr	r3, [pc, #8]	; (d64a4 <HAL_USART_Init+0xc>)
   d649c:	681b      	ldr	r3, [r3, #0]
   d649e:	681b      	ldr	r3, [r3, #0]
   d64a0:	9301      	str	r3, [sp, #4]
   d64a2:	bd08      	pop	{r3, pc}
   d64a4:	0003023c 	.word	0x0003023c

000d64a8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d64a8:	b508      	push	{r3, lr}
   d64aa:	4b02      	ldr	r3, [pc, #8]	; (d64b4 <HAL_USART_Write_Data+0xc>)
   d64ac:	681b      	ldr	r3, [r3, #0]
   d64ae:	68db      	ldr	r3, [r3, #12]
   d64b0:	9301      	str	r3, [sp, #4]
   d64b2:	bd08      	pop	{r3, pc}
   d64b4:	0003023c 	.word	0x0003023c

000d64b8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d64b8:	b508      	push	{r3, lr}
   d64ba:	4b02      	ldr	r3, [pc, #8]	; (d64c4 <HAL_USART_Available_Data+0xc>)
   d64bc:	681b      	ldr	r3, [r3, #0]
   d64be:	691b      	ldr	r3, [r3, #16]
   d64c0:	9301      	str	r3, [sp, #4]
   d64c2:	bd08      	pop	{r3, pc}
   d64c4:	0003023c 	.word	0x0003023c

000d64c8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d64c8:	b508      	push	{r3, lr}
   d64ca:	4b02      	ldr	r3, [pc, #8]	; (d64d4 <HAL_USART_Read_Data+0xc>)
   d64cc:	681b      	ldr	r3, [r3, #0]
   d64ce:	695b      	ldr	r3, [r3, #20]
   d64d0:	9301      	str	r3, [sp, #4]
   d64d2:	bd08      	pop	{r3, pc}
   d64d4:	0003023c 	.word	0x0003023c

000d64d8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d64d8:	b508      	push	{r3, lr}
   d64da:	4b02      	ldr	r3, [pc, #8]	; (d64e4 <HAL_USART_Peek_Data+0xc>)
   d64dc:	681b      	ldr	r3, [r3, #0]
   d64de:	699b      	ldr	r3, [r3, #24]
   d64e0:	9301      	str	r3, [sp, #4]
   d64e2:	bd08      	pop	{r3, pc}
   d64e4:	0003023c 	.word	0x0003023c

000d64e8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d64e8:	b508      	push	{r3, lr}
   d64ea:	4b02      	ldr	r3, [pc, #8]	; (d64f4 <HAL_USART_Flush_Data+0xc>)
   d64ec:	681b      	ldr	r3, [r3, #0]
   d64ee:	69db      	ldr	r3, [r3, #28]
   d64f0:	9301      	str	r3, [sp, #4]
   d64f2:	bd08      	pop	{r3, pc}
   d64f4:	0003023c 	.word	0x0003023c

000d64f8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d64f8:	b508      	push	{r3, lr}
   d64fa:	4b02      	ldr	r3, [pc, #8]	; (d6504 <HAL_USART_Is_Enabled+0xc>)
   d64fc:	681b      	ldr	r3, [r3, #0]
   d64fe:	6a1b      	ldr	r3, [r3, #32]
   d6500:	9301      	str	r3, [sp, #4]
   d6502:	bd08      	pop	{r3, pc}
   d6504:	0003023c 	.word	0x0003023c

000d6508 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6508:	b508      	push	{r3, lr}
   d650a:	4b02      	ldr	r3, [pc, #8]	; (d6514 <HAL_USART_Available_Data_For_Write+0xc>)
   d650c:	681b      	ldr	r3, [r3, #0]
   d650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6510:	9301      	str	r3, [sp, #4]
   d6512:	bd08      	pop	{r3, pc}
   d6514:	0003023c 	.word	0x0003023c

000d6518 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6518:	b508      	push	{r3, lr}
   d651a:	4b02      	ldr	r3, [pc, #8]	; (d6524 <HAL_I2C_Begin+0xc>)
   d651c:	681b      	ldr	r3, [r3, #0]
   d651e:	68db      	ldr	r3, [r3, #12]
   d6520:	9301      	str	r3, [sp, #4]
   d6522:	bd08      	pop	{r3, pc}
   d6524:	00030228 	.word	0x00030228

000d6528 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6528:	b508      	push	{r3, lr}
   d652a:	4b02      	ldr	r3, [pc, #8]	; (d6534 <HAL_I2C_Begin_Transmission+0xc>)
   d652c:	681b      	ldr	r3, [r3, #0]
   d652e:	699b      	ldr	r3, [r3, #24]
   d6530:	9301      	str	r3, [sp, #4]
   d6532:	bd08      	pop	{r3, pc}
   d6534:	00030228 	.word	0x00030228

000d6538 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6538:	b508      	push	{r3, lr}
   d653a:	4b02      	ldr	r3, [pc, #8]	; (d6544 <HAL_I2C_End_Transmission+0xc>)
   d653c:	681b      	ldr	r3, [r3, #0]
   d653e:	69db      	ldr	r3, [r3, #28]
   d6540:	9301      	str	r3, [sp, #4]
   d6542:	bd08      	pop	{r3, pc}
   d6544:	00030228 	.word	0x00030228

000d6548 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6548:	b508      	push	{r3, lr}
   d654a:	4b02      	ldr	r3, [pc, #8]	; (d6554 <HAL_I2C_Write_Data+0xc>)
   d654c:	681b      	ldr	r3, [r3, #0]
   d654e:	6a1b      	ldr	r3, [r3, #32]
   d6550:	9301      	str	r3, [sp, #4]
   d6552:	bd08      	pop	{r3, pc}
   d6554:	00030228 	.word	0x00030228

000d6558 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6558:	b508      	push	{r3, lr}
   d655a:	4b02      	ldr	r3, [pc, #8]	; (d6564 <HAL_I2C_Available_Data+0xc>)
   d655c:	681b      	ldr	r3, [r3, #0]
   d655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6560:	9301      	str	r3, [sp, #4]
   d6562:	bd08      	pop	{r3, pc}
   d6564:	00030228 	.word	0x00030228

000d6568 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6568:	b508      	push	{r3, lr}
   d656a:	4b02      	ldr	r3, [pc, #8]	; (d6574 <HAL_I2C_Read_Data+0xc>)
   d656c:	681b      	ldr	r3, [r3, #0]
   d656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6570:	9301      	str	r3, [sp, #4]
   d6572:	bd08      	pop	{r3, pc}
   d6574:	00030228 	.word	0x00030228

000d6578 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6578:	b508      	push	{r3, lr}
   d657a:	4b02      	ldr	r3, [pc, #8]	; (d6584 <HAL_I2C_Peek_Data+0xc>)
   d657c:	681b      	ldr	r3, [r3, #0]
   d657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6580:	9301      	str	r3, [sp, #4]
   d6582:	bd08      	pop	{r3, pc}
   d6584:	00030228 	.word	0x00030228

000d6588 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6588:	b508      	push	{r3, lr}
   d658a:	4b02      	ldr	r3, [pc, #8]	; (d6594 <HAL_I2C_Flush_Data+0xc>)
   d658c:	681b      	ldr	r3, [r3, #0]
   d658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6590:	9301      	str	r3, [sp, #4]
   d6592:	bd08      	pop	{r3, pc}
   d6594:	00030228 	.word	0x00030228

000d6598 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6598:	b508      	push	{r3, lr}
   d659a:	4b02      	ldr	r3, [pc, #8]	; (d65a4 <HAL_I2C_Is_Enabled+0xc>)
   d659c:	681b      	ldr	r3, [r3, #0]
   d659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d65a0:	9301      	str	r3, [sp, #4]
   d65a2:	bd08      	pop	{r3, pc}
   d65a4:	00030228 	.word	0x00030228

000d65a8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d65a8:	b508      	push	{r3, lr}
   d65aa:	4b02      	ldr	r3, [pc, #8]	; (d65b4 <HAL_I2C_Init+0xc>)
   d65ac:	681b      	ldr	r3, [r3, #0]
   d65ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d65b0:	9301      	str	r3, [sp, #4]
   d65b2:	bd08      	pop	{r3, pc}
   d65b4:	00030228 	.word	0x00030228

000d65b8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d65b8:	b508      	push	{r3, lr}
   d65ba:	4b02      	ldr	r3, [pc, #8]	; (d65c4 <HAL_I2C_Request_Data_Ex+0xc>)
   d65bc:	681b      	ldr	r3, [r3, #0]
   d65be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d65c0:	9301      	str	r3, [sp, #4]
   d65c2:	bd08      	pop	{r3, pc}
   d65c4:	00030228 	.word	0x00030228

000d65c8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d65c8:	b508      	push	{r3, lr}
   d65ca:	4b02      	ldr	r3, [pc, #8]	; (d65d4 <sock_setsockopt+0xc>)
   d65cc:	681b      	ldr	r3, [r3, #0]
   d65ce:	699b      	ldr	r3, [r3, #24]
   d65d0:	9301      	str	r3, [sp, #4]
   d65d2:	bd08      	pop	{r3, pc}
   d65d4:	00030238 	.word	0x00030238

000d65d8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d65d8:	b508      	push	{r3, lr}
   d65da:	4b02      	ldr	r3, [pc, #8]	; (d65e4 <sock_close+0xc>)
   d65dc:	681b      	ldr	r3, [r3, #0]
   d65de:	69db      	ldr	r3, [r3, #28]
   d65e0:	9301      	str	r3, [sp, #4]
   d65e2:	bd08      	pop	{r3, pc}
   d65e4:	00030238 	.word	0x00030238

000d65e8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d65e8:	b508      	push	{r3, lr}
   d65ea:	4b02      	ldr	r3, [pc, #8]	; (d65f4 <sock_connect+0xc>)
   d65ec:	681b      	ldr	r3, [r3, #0]
   d65ee:	6a1b      	ldr	r3, [r3, #32]
   d65f0:	9301      	str	r3, [sp, #4]
   d65f2:	bd08      	pop	{r3, pc}
   d65f4:	00030238 	.word	0x00030238

000d65f8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d65f8:	b508      	push	{r3, lr}
   d65fa:	4b02      	ldr	r3, [pc, #8]	; (d6604 <sock_recv+0xc>)
   d65fc:	681b      	ldr	r3, [r3, #0]
   d65fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6600:	9301      	str	r3, [sp, #4]
   d6602:	bd08      	pop	{r3, pc}
   d6604:	00030238 	.word	0x00030238

000d6608 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6608:	b508      	push	{r3, lr}
   d660a:	4b02      	ldr	r3, [pc, #8]	; (d6614 <sock_send+0xc>)
   d660c:	681b      	ldr	r3, [r3, #0]
   d660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6610:	9301      	str	r3, [sp, #4]
   d6612:	bd08      	pop	{r3, pc}
   d6614:	00030238 	.word	0x00030238

000d6618 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6618:	b508      	push	{r3, lr}
   d661a:	4b02      	ldr	r3, [pc, #8]	; (d6624 <sock_socket+0xc>)
   d661c:	681b      	ldr	r3, [r3, #0]
   d661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6620:	9301      	str	r3, [sp, #4]
   d6622:	bd08      	pop	{r3, pc}
   d6624:	00030238 	.word	0x00030238

000d6628 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6628:	b508      	push	{r3, lr}
   d662a:	4b02      	ldr	r3, [pc, #8]	; (d6634 <HAL_USB_USART_Init+0xc>)
   d662c:	681b      	ldr	r3, [r3, #0]
   d662e:	681b      	ldr	r3, [r3, #0]
   d6630:	9301      	str	r3, [sp, #4]
   d6632:	bd08      	pop	{r3, pc}
   d6634:	0003024c 	.word	0x0003024c

000d6638 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6638:	b508      	push	{r3, lr}
   d663a:	4b02      	ldr	r3, [pc, #8]	; (d6644 <HAL_USB_USART_Begin+0xc>)
   d663c:	681b      	ldr	r3, [r3, #0]
   d663e:	685b      	ldr	r3, [r3, #4]
   d6640:	9301      	str	r3, [sp, #4]
   d6642:	bd08      	pop	{r3, pc}
   d6644:	0003024c 	.word	0x0003024c

000d6648 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6648:	b508      	push	{r3, lr}
   d664a:	4b02      	ldr	r3, [pc, #8]	; (d6654 <HAL_USB_USART_Available_Data+0xc>)
   d664c:	681b      	ldr	r3, [r3, #0]
   d664e:	691b      	ldr	r3, [r3, #16]
   d6650:	9301      	str	r3, [sp, #4]
   d6652:	bd08      	pop	{r3, pc}
   d6654:	0003024c 	.word	0x0003024c

000d6658 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6658:	b508      	push	{r3, lr}
   d665a:	4b02      	ldr	r3, [pc, #8]	; (d6664 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d665c:	681b      	ldr	r3, [r3, #0]
   d665e:	695b      	ldr	r3, [r3, #20]
   d6660:	9301      	str	r3, [sp, #4]
   d6662:	bd08      	pop	{r3, pc}
   d6664:	0003024c 	.word	0x0003024c

000d6668 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6668:	b508      	push	{r3, lr}
   d666a:	4b02      	ldr	r3, [pc, #8]	; (d6674 <HAL_USB_USART_Receive_Data+0xc>)
   d666c:	681b      	ldr	r3, [r3, #0]
   d666e:	699b      	ldr	r3, [r3, #24]
   d6670:	9301      	str	r3, [sp, #4]
   d6672:	bd08      	pop	{r3, pc}
   d6674:	0003024c 	.word	0x0003024c

000d6678 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6678:	b508      	push	{r3, lr}
   d667a:	4b02      	ldr	r3, [pc, #8]	; (d6684 <HAL_USB_USART_Send_Data+0xc>)
   d667c:	681b      	ldr	r3, [r3, #0]
   d667e:	69db      	ldr	r3, [r3, #28]
   d6680:	9301      	str	r3, [sp, #4]
   d6682:	bd08      	pop	{r3, pc}
   d6684:	0003024c 	.word	0x0003024c

000d6688 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6688:	b508      	push	{r3, lr}
   d668a:	4b02      	ldr	r3, [pc, #8]	; (d6694 <HAL_USB_USART_Flush_Data+0xc>)
   d668c:	681b      	ldr	r3, [r3, #0]
   d668e:	6a1b      	ldr	r3, [r3, #32]
   d6690:	9301      	str	r3, [sp, #4]
   d6692:	bd08      	pop	{r3, pc}
   d6694:	0003024c 	.word	0x0003024c

000d6698 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6698:	b508      	push	{r3, lr}
   d669a:	4b02      	ldr	r3, [pc, #8]	; (d66a4 <panic_+0xc>)
   d669c:	681b      	ldr	r3, [r3, #0]
   d669e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d66a0:	9301      	str	r3, [sp, #4]
   d66a2:	bd08      	pop	{r3, pc}
   d66a4:	00030260 	.word	0x00030260

000d66a8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d66a8:	b508      	push	{r3, lr}
   d66aa:	4b02      	ldr	r3, [pc, #8]	; (d66b4 <log_message+0xc>)
   d66ac:	681b      	ldr	r3, [r3, #0]
   d66ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d66b0:	9301      	str	r3, [sp, #4]
   d66b2:	bd08      	pop	{r3, pc}
   d66b4:	00030260 	.word	0x00030260

000d66b8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d66b8:	b508      	push	{r3, lr}
   d66ba:	4b02      	ldr	r3, [pc, #8]	; (d66c4 <set_system_mode+0xc>)
   d66bc:	681b      	ldr	r3, [r3, #0]
   d66be:	685b      	ldr	r3, [r3, #4]
   d66c0:	9301      	str	r3, [sp, #4]
   d66c2:	bd08      	pop	{r3, pc}
   d66c4:	00030220 	.word	0x00030220

000d66c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d66c8:	b508      	push	{r3, lr}
   d66ca:	4b02      	ldr	r3, [pc, #8]	; (d66d4 <system_delay_ms+0xc>)
   d66cc:	681b      	ldr	r3, [r3, #0]
   d66ce:	695b      	ldr	r3, [r3, #20]
   d66d0:	9301      	str	r3, [sp, #4]
   d66d2:	bd08      	pop	{r3, pc}
   d66d4:	00030220 	.word	0x00030220

000d66d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d66d8:	b508      	push	{r3, lr}
   d66da:	4b03      	ldr	r3, [pc, #12]	; (d66e8 <system_ctrl_set_app_request_handler+0x10>)
   d66dc:	681b      	ldr	r3, [r3, #0]
   d66de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d66e2:	9301      	str	r3, [sp, #4]
   d66e4:	bd08      	pop	{r3, pc}
   d66e6:	0000      	.short	0x0000
   d66e8:	00030220 	.word	0x00030220

000d66ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d66ec:	b508      	push	{r3, lr}
   d66ee:	4b03      	ldr	r3, [pc, #12]	; (d66fc <system_ctrl_set_result+0x10>)
   d66f0:	681b      	ldr	r3, [r3, #0]
   d66f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d66f6:	9301      	str	r3, [sp, #4]
   d66f8:	bd08      	pop	{r3, pc}
   d66fa:	0000      	.short	0x0000
   d66fc:	00030220 	.word	0x00030220

000d6700 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6700:	b508      	push	{r3, lr}
   d6702:	4b02      	ldr	r3, [pc, #8]	; (d670c <network_connect+0xc>)
   d6704:	681b      	ldr	r3, [r3, #0]
   d6706:	685b      	ldr	r3, [r3, #4]
   d6708:	9301      	str	r3, [sp, #4]
   d670a:	bd08      	pop	{r3, pc}
   d670c:	00030240 	.word	0x00030240

000d6710 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6710:	b508      	push	{r3, lr}
   d6712:	4b02      	ldr	r3, [pc, #8]	; (d671c <network_connecting+0xc>)
   d6714:	681b      	ldr	r3, [r3, #0]
   d6716:	689b      	ldr	r3, [r3, #8]
   d6718:	9301      	str	r3, [sp, #4]
   d671a:	bd08      	pop	{r3, pc}
   d671c:	00030240 	.word	0x00030240

000d6720 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6720:	b508      	push	{r3, lr}
   d6722:	4b02      	ldr	r3, [pc, #8]	; (d672c <network_disconnect+0xc>)
   d6724:	681b      	ldr	r3, [r3, #0]
   d6726:	68db      	ldr	r3, [r3, #12]
   d6728:	9301      	str	r3, [sp, #4]
   d672a:	bd08      	pop	{r3, pc}
   d672c:	00030240 	.word	0x00030240

000d6730 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6730:	b508      	push	{r3, lr}
   d6732:	4b02      	ldr	r3, [pc, #8]	; (d673c <network_ready+0xc>)
   d6734:	681b      	ldr	r3, [r3, #0]
   d6736:	691b      	ldr	r3, [r3, #16]
   d6738:	9301      	str	r3, [sp, #4]
   d673a:	bd08      	pop	{r3, pc}
   d673c:	00030240 	.word	0x00030240

000d6740 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6740:	b508      	push	{r3, lr}
   d6742:	4b02      	ldr	r3, [pc, #8]	; (d674c <network_on+0xc>)
   d6744:	681b      	ldr	r3, [r3, #0]
   d6746:	695b      	ldr	r3, [r3, #20]
   d6748:	9301      	str	r3, [sp, #4]
   d674a:	bd08      	pop	{r3, pc}
   d674c:	00030240 	.word	0x00030240

000d6750 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6750:	b508      	push	{r3, lr}
   d6752:	4b02      	ldr	r3, [pc, #8]	; (d675c <network_off+0xc>)
   d6754:	681b      	ldr	r3, [r3, #0]
   d6756:	699b      	ldr	r3, [r3, #24]
   d6758:	9301      	str	r3, [sp, #4]
   d675a:	bd08      	pop	{r3, pc}
   d675c:	00030240 	.word	0x00030240

000d6760 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6760:	b508      	push	{r3, lr}
   d6762:	4b02      	ldr	r3, [pc, #8]	; (d676c <network_listen+0xc>)
   d6764:	681b      	ldr	r3, [r3, #0]
   d6766:	69db      	ldr	r3, [r3, #28]
   d6768:	9301      	str	r3, [sp, #4]
   d676a:	bd08      	pop	{r3, pc}
   d676c:	00030240 	.word	0x00030240

000d6770 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6770:	b508      	push	{r3, lr}
   d6772:	4b02      	ldr	r3, [pc, #8]	; (d677c <network_listening+0xc>)
   d6774:	681b      	ldr	r3, [r3, #0]
   d6776:	6a1b      	ldr	r3, [r3, #32]
   d6778:	9301      	str	r3, [sp, #4]
   d677a:	bd08      	pop	{r3, pc}
   d677c:	00030240 	.word	0x00030240

000d6780 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6780:	b508      	push	{r3, lr}
   d6782:	4b02      	ldr	r3, [pc, #8]	; (d678c <network_set_listen_timeout+0xc>)
   d6784:	681b      	ldr	r3, [r3, #0]
   d6786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6788:	9301      	str	r3, [sp, #4]
   d678a:	bd08      	pop	{r3, pc}
   d678c:	00030240 	.word	0x00030240

000d6790 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6790:	b508      	push	{r3, lr}
   d6792:	4b02      	ldr	r3, [pc, #8]	; (d679c <network_get_listen_timeout+0xc>)
   d6794:	681b      	ldr	r3, [r3, #0]
   d6796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6798:	9301      	str	r3, [sp, #4]
   d679a:	bd08      	pop	{r3, pc}
   d679c:	00030240 	.word	0x00030240

000d67a0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d67a0:	b508      	push	{r3, lr}
   d67a2:	4b02      	ldr	r3, [pc, #8]	; (d67ac <spark_process+0xc>)
   d67a4:	681b      	ldr	r3, [r3, #0]
   d67a6:	689b      	ldr	r3, [r3, #8]
   d67a8:	9301      	str	r3, [sp, #4]
   d67aa:	bd08      	pop	{r3, pc}
   d67ac:	00030244 	.word	0x00030244

000d67b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d67b0:	b508      	push	{r3, lr}
   d67b2:	4b02      	ldr	r3, [pc, #8]	; (d67bc <spark_set_random_seed_from_cloud_handler+0xc>)
   d67b4:	681b      	ldr	r3, [r3, #0]
   d67b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d67b8:	9301      	str	r3, [sp, #4]
   d67ba:	bd08      	pop	{r3, pc}
   d67bc:	00030244 	.word	0x00030244

000d67c0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d67c0:	b508      	push	{r3, lr}
   d67c2:	4b02      	ldr	r3, [pc, #8]	; (d67cc <malloc+0xc>)
   d67c4:	681b      	ldr	r3, [r3, #0]
   d67c6:	681b      	ldr	r3, [r3, #0]
   d67c8:	9301      	str	r3, [sp, #4]
   d67ca:	bd08      	pop	{r3, pc}
   d67cc:	0003021c 	.word	0x0003021c

000d67d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d67d0:	b508      	push	{r3, lr}
   d67d2:	4b02      	ldr	r3, [pc, #8]	; (d67dc <free+0xc>)
   d67d4:	681b      	ldr	r3, [r3, #0]
   d67d6:	685b      	ldr	r3, [r3, #4]
   d67d8:	9301      	str	r3, [sp, #4]
   d67da:	bd08      	pop	{r3, pc}
   d67dc:	0003021c 	.word	0x0003021c

000d67e0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d67e0:	b508      	push	{r3, lr}
   d67e2:	4b02      	ldr	r3, [pc, #8]	; (d67ec <vsnprintf+0xc>)
   d67e4:	681b      	ldr	r3, [r3, #0]
   d67e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d67e8:	9301      	str	r3, [sp, #4]
   d67ea:	bd08      	pop	{r3, pc}
   d67ec:	0003021c 	.word	0x0003021c

000d67f0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d67f0:	b508      	push	{r3, lr}
   d67f2:	4b02      	ldr	r3, [pc, #8]	; (d67fc <__errno+0xc>)
   d67f4:	681b      	ldr	r3, [r3, #0]
   d67f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d67f8:	9301      	str	r3, [sp, #4]
   d67fa:	bd08      	pop	{r3, pc}
   d67fc:	0003021c 	.word	0x0003021c

000d6800 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6800:	2200      	movs	r2, #0
   d6802:	4611      	mov	r1, r2
   d6804:	6840      	ldr	r0, [r0, #4]
   d6806:	f7ff bfb3 	b.w	d6770 <network_listening>

000d680a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d680a:	2200      	movs	r2, #0
   d680c:	4611      	mov	r1, r2
   d680e:	6840      	ldr	r0, [r0, #4]
   d6810:	f7ff bfbe 	b.w	d6790 <network_get_listen_timeout>

000d6814 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6814:	2200      	movs	r2, #0
   d6816:	6840      	ldr	r0, [r0, #4]
   d6818:	f7ff bfb2 	b.w	d6780 <network_set_listen_timeout>

000d681c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d681c:	2200      	movs	r2, #0
   d681e:	f081 0101 	eor.w	r1, r1, #1
   d6822:	6840      	ldr	r0, [r0, #4]
   d6824:	f7ff bf9c 	b.w	d6760 <network_listen>

000d6828 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6828:	2300      	movs	r3, #0
   d682a:	461a      	mov	r2, r3
   d682c:	4619      	mov	r1, r3
   d682e:	6840      	ldr	r0, [r0, #4]
   d6830:	f7ff bf8e 	b.w	d6750 <network_off>

000d6834 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6834:	2300      	movs	r3, #0
   d6836:	461a      	mov	r2, r3
   d6838:	4619      	mov	r1, r3
   d683a:	6840      	ldr	r0, [r0, #4]
   d683c:	f7ff bf80 	b.w	d6740 <network_on>

000d6840 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6840:	2200      	movs	r2, #0
   d6842:	4611      	mov	r1, r2
   d6844:	6840      	ldr	r0, [r0, #4]
   d6846:	f7ff bf73 	b.w	d6730 <network_ready>

000d684a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d684a:	2200      	movs	r2, #0
   d684c:	4611      	mov	r1, r2
   d684e:	6840      	ldr	r0, [r0, #4]
   d6850:	f7ff bf5e 	b.w	d6710 <network_connecting>

000d6854 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6854:	2200      	movs	r2, #0
   d6856:	2102      	movs	r1, #2
   d6858:	6840      	ldr	r0, [r0, #4]
   d685a:	f7ff bf61 	b.w	d6720 <network_disconnect>

000d685e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d685e:	2300      	movs	r3, #0
   d6860:	461a      	mov	r2, r3
   d6862:	6840      	ldr	r0, [r0, #4]
   d6864:	f7ff bf4c 	b.w	d6700 <network_connect>

000d6868 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6868:	4b02      	ldr	r3, [pc, #8]	; (d6874 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d686a:	2203      	movs	r2, #3
   d686c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d686e:	4a02      	ldr	r2, [pc, #8]	; (d6878 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6870:	601a      	str	r2, [r3, #0]
   d6872:	4770      	bx	lr
   d6874:	2003e3dc 	.word	0x2003e3dc
   d6878:	000dab64 	.word	0x000dab64

000d687c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d687c:	2100      	movs	r1, #0
   d687e:	f7ff bd93 	b.w	d63a8 <HAL_SPI_Acquire>

000d6882 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6882:	2100      	movs	r1, #0
   d6884:	f7ff bd98 	b.w	d63b8 <HAL_SPI_Release>

000d6888 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6888:	b510      	push	{r4, lr}
   d688a:	4604      	mov	r4, r0
{
    _spi = spi;
   d688c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d688e:	4608      	mov	r0, r1
   d6890:	f7ff fd5a 	bl	d6348 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6894:	2300      	movs	r3, #0
   d6896:	6063      	str	r3, [r4, #4]
}
   d6898:	4620      	mov	r0, r4
   d689a:	bd10      	pop	{r4, pc}

000d689c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d689c:	b510      	push	{r4, lr}
   d689e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d68a0:	7800      	ldrb	r0, [r0, #0]
   d68a2:	f7ff ffeb 	bl	d687c <_ZN8SPIClass4lockEv.isra.0>
   d68a6:	b948      	cbnz	r0, d68bc <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d68a8:	7820      	ldrb	r0, [r4, #0]
   d68aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d68ae:	f7ff fd23 	bl	d62f8 <HAL_SPI_Begin>
        unlock();
   d68b2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d68b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d68b8:	f7ff bfe3 	b.w	d6882 <_ZN8SPIClass6unlockEv.isra.1>
   d68bc:	bd10      	pop	{r4, pc}

000d68be <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d68be:	b538      	push	{r3, r4, r5, lr}
   d68c0:	4604      	mov	r4, r0
    if (!lock())
   d68c2:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d68c4:	460d      	mov	r5, r1
    if (!lock())
   d68c6:	f7ff ffd9 	bl	d687c <_ZN8SPIClass4lockEv.isra.0>
   d68ca:	b940      	cbnz	r0, d68de <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d68cc:	7820      	ldrb	r0, [r4, #0]
   d68ce:	4629      	mov	r1, r5
   d68d0:	f7ff fd1a 	bl	d6308 <HAL_SPI_Set_Bit_Order>
        unlock();
   d68d4:	7820      	ldrb	r0, [r4, #0]
    }
}
   d68d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d68da:	f7ff bfd2 	b.w	d6882 <_ZN8SPIClass6unlockEv.isra.1>
   d68de:	bd38      	pop	{r3, r4, r5, pc}

000d68e0 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d68e0:	b538      	push	{r3, r4, r5, lr}
   d68e2:	4604      	mov	r4, r0
    if (!lock())
   d68e4:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d68e6:	460d      	mov	r5, r1
    if (!lock())
   d68e8:	f7ff ffc8 	bl	d687c <_ZN8SPIClass4lockEv.isra.0>
   d68ec:	b940      	cbnz	r0, d6900 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d68ee:	7820      	ldrb	r0, [r4, #0]
   d68f0:	4629      	mov	r1, r5
   d68f2:	f7ff fd11 	bl	d6318 <HAL_SPI_Set_Data_Mode>
        unlock();
   d68f6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d68f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d68fc:	f7ff bfc1 	b.w	d6882 <_ZN8SPIClass6unlockEv.isra.1>
   d6900:	bd38      	pop	{r3, r4, r5, pc}

000d6902 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6902:	7800      	ldrb	r0, [r0, #0]
   d6904:	f7ff bfbd 	b.w	d6882 <_ZN8SPIClass6unlockEv.isra.1>

000d6908 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6908:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d690a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d690c:	6018      	str	r0, [r3, #0]
   d690e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6910:	6818      	ldr	r0, [r3, #0]
   d6912:	4288      	cmp	r0, r1
   d6914:	b2e5      	uxtb	r5, r4
   d6916:	d906      	bls.n	d6926 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6918:	3401      	adds	r4, #1
   d691a:	2c08      	cmp	r4, #8
   d691c:	d002      	beq.n	d6924 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d691e:	0840      	lsrs	r0, r0, #1
   d6920:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6922:	e7f5      	b.n	d6910 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6924:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6926:	4b02      	ldr	r3, [pc, #8]	; (d6930 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6928:	5d5b      	ldrb	r3, [r3, r5]
   d692a:	7013      	strb	r3, [r2, #0]
   d692c:	bd30      	pop	{r4, r5, pc}
   d692e:	bf00      	nop
   d6930:	000dab90 	.word	0x000dab90

000d6934 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6938:	4607      	mov	r7, r0
   d693a:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d693c:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d693e:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6940:	f7ff ff9c 	bl	d687c <_ZN8SPIClass4lockEv.isra.0>
   d6944:	2800      	cmp	r0, #0
   d6946:	db62      	blt.n	d6a0e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6948:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d694a:	2214      	movs	r2, #20
   d694c:	2100      	movs	r1, #0
   d694e:	a809      	add	r0, sp, #36	; 0x24
   d6950:	f003 fc09 	bl	da166 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6954:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6956:	4620      	mov	r0, r4
   d6958:	2200      	movs	r2, #0
   d695a:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d695c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6960:	f7ff fd02 	bl	d6368 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6964:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6968:	b154      	cbz	r4, d6980 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d696a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d696e:	b935      	cbnz	r5, d697e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6970:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6974:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6978:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d697c:	e003      	b.n	d6986 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d697e:	2400      	movs	r4, #0
   d6980:	46a1      	mov	r9, r4
   d6982:	46a0      	mov	r8, r4
   d6984:	2501      	movs	r5, #1
   d6986:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6988:	b105      	cbz	r5, d698c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d698a:	b9bb      	cbnz	r3, d69bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d698c:	429d      	cmp	r5, r3
   d698e:	d10b      	bne.n	d69a8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6990:	68b2      	ldr	r2, [r6, #8]
   d6992:	4542      	cmp	r2, r8
   d6994:	d108      	bne.n	d69a8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6996:	f88d 9020 	strb.w	r9, [sp, #32]
   d699a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d699e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d69a2:	89b2      	ldrh	r2, [r6, #12]
   d69a4:	4291      	cmp	r1, r2
   d69a6:	d009      	beq.n	d69bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d69a8:	b153      	cbz	r3, d69c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d69aa:	2400      	movs	r4, #0
   d69ac:	7838      	ldrb	r0, [r7, #0]
   d69ae:	9401      	str	r4, [sp, #4]
   d69b0:	9400      	str	r4, [sp, #0]
   d69b2:	4623      	mov	r3, r4
   d69b4:	4622      	mov	r2, r4
   d69b6:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d69b8:	f7ff fcee 	bl	d6398 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d69bc:	2000      	movs	r0, #0
   d69be:	e026      	b.n	d6a0e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d69c0:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d69c4:	68b1      	ldr	r1, [r6, #8]
   d69c6:	980a      	ldr	r0, [sp, #40]	; 0x28
   d69c8:	ab04      	add	r3, sp, #16
   d69ca:	f10d 020f 	add.w	r2, sp, #15
   d69ce:	f7ff ff9b 	bl	d6908 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d69d2:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d69d4:	b105      	cbz	r5, d69d8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d69d6:	b9b1      	cbnz	r1, d6a06 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d69d8:	42a9      	cmp	r1, r5
   d69da:	d008      	beq.n	d69ee <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d69dc:	2400      	movs	r4, #0
   d69de:	7838      	ldrb	r0, [r7, #0]
   d69e0:	9401      	str	r4, [sp, #4]
   d69e2:	7b74      	ldrb	r4, [r6, #13]
   d69e4:	7b33      	ldrb	r3, [r6, #12]
   d69e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d69ea:	9400      	str	r4, [sp, #0]
   d69ec:	e7e4      	b.n	d69b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d69ee:	68b3      	ldr	r3, [r6, #8]
   d69f0:	4543      	cmp	r3, r8
   d69f2:	d3f3      	bcc.n	d69dc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d69f4:	f88d 9020 	strb.w	r9, [sp, #32]
   d69f8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d69fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6a00:	89b3      	ldrh	r3, [r6, #12]
   d6a02:	429a      	cmp	r2, r3
   d6a04:	d1ea      	bne.n	d69dc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6a06:	9b04      	ldr	r3, [sp, #16]
   d6a08:	4543      	cmp	r3, r8
   d6a0a:	d1e7      	bne.n	d69dc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6a0c:	e7d6      	b.n	d69bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d6a0e:	b00f      	add	sp, #60	; 0x3c
   d6a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6a14 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a18:	b088      	sub	sp, #32
    unsigned clock = 0;
   d6a1a:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6a1c:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6a1e:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d6a20:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6a22:	460e      	mov	r6, r1
   d6a24:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6a26:	f7ff ff29 	bl	d687c <_ZN8SPIClass4lockEv.isra.0>
   d6a2a:	4605      	mov	r5, r0
   d6a2c:	bb00      	cbnz	r0, d6a70 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d6a2e:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6a32:	4601      	mov	r1, r0
   d6a34:	2214      	movs	r2, #20
   d6a36:	a803      	add	r0, sp, #12
   d6a38:	f003 fb95 	bl	da166 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6a3c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6a3e:	462a      	mov	r2, r5
   d6a40:	a903      	add	r1, sp, #12
   d6a42:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6a44:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d6a48:	f7ff fc8e 	bl	d6368 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6a4c:	ab02      	add	r3, sp, #8
   d6a4e:	f10d 0207 	add.w	r2, sp, #7
   d6a52:	fb07 f106 	mul.w	r1, r7, r6
   d6a56:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d6a58:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6a5c:	f7ff ff54 	bl	d6908 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d6a60:	7820      	ldrb	r0, [r4, #0]
   d6a62:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6a66:	f7ff fc5f 	bl	d6328 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d6a6a:	7820      	ldrb	r0, [r4, #0]
   d6a6c:	f7ff ff09 	bl	d6882 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d6a70:	9802      	ldr	r0, [sp, #8]
   d6a72:	b008      	add	sp, #32
   d6a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6a78 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6a78:	b538      	push	{r3, r4, r5, lr}
   d6a7a:	4604      	mov	r4, r0
    if (!lock())
   d6a7c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6a7e:	460d      	mov	r5, r1
    if (!lock())
   d6a80:	f7ff fefc 	bl	d687c <_ZN8SPIClass4lockEv.isra.0>
   d6a84:	b9c8      	cbnz	r0, d6aba <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d6a86:	6861      	ldr	r1, [r4, #4]
   d6a88:	b171      	cbz	r1, d6aa8 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d6a8a:	4b0c      	ldr	r3, [pc, #48]	; (d6abc <_ZN8SPIClass15setClockDividerEh+0x44>)
   d6a8c:	5cc2      	ldrb	r2, [r0, r3]
   d6a8e:	42aa      	cmp	r2, r5
   d6a90:	d002      	beq.n	d6a98 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d6a92:	3001      	adds	r0, #1
   d6a94:	2808      	cmp	r0, #8
   d6a96:	d1f9      	bne.n	d6a8c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d6a98:	3001      	adds	r0, #1
   d6a9a:	b2c0      	uxtb	r0, r0
   d6a9c:	40c1      	lsrs	r1, r0
   d6a9e:	2201      	movs	r2, #1
   d6aa0:	4620      	mov	r0, r4
   d6aa2:	f7ff ffb7 	bl	d6a14 <_ZN8SPIClass13setClockSpeedEjj>
   d6aa6:	e003      	b.n	d6ab0 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6aa8:	4629      	mov	r1, r5
   d6aaa:	7820      	ldrb	r0, [r4, #0]
   d6aac:	f7ff fc3c 	bl	d6328 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d6ab0:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d6ab6:	f7ff bee4 	b.w	d6882 <_ZN8SPIClass6unlockEv.isra.1>
   d6aba:	bd38      	pop	{r3, r4, r5, pc}
   d6abc:	000dab90 	.word	0x000dab90

000d6ac0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6ac0:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6ac2:	7800      	ldrb	r0, [r0, #0]
   d6ac4:	f7ff fc38 	bl	d6338 <HAL_SPI_Send_Receive_Data>
}
   d6ac8:	b2c0      	uxtb	r0, r0
   d6aca:	bd08      	pop	{r3, pc}

000d6acc <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6acc:	b530      	push	{r4, r5, lr}
   d6ace:	b087      	sub	sp, #28
   d6ad0:	4604      	mov	r4, r0
   d6ad2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d6ad4:	7800      	ldrb	r0, [r0, #0]
   d6ad6:	9500      	str	r5, [sp, #0]
   d6ad8:	f7ff fc4e 	bl	d6378 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d6adc:	b93d      	cbnz	r5, d6aee <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d6ade:	a902      	add	r1, sp, #8
   d6ae0:	7820      	ldrb	r0, [r4, #0]
   d6ae2:	f7ff fc51 	bl	d6388 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d6ae6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6aea:	07db      	lsls	r3, r3, #31
   d6aec:	d4f7      	bmi.n	d6ade <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d6aee:	b007      	add	sp, #28
   d6af0:	bd30      	pop	{r4, r5, pc}

000d6af2 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6af2:	7800      	ldrb	r0, [r0, #0]
   d6af4:	f7ff bc30 	b.w	d6358 <HAL_SPI_Is_Enabled>

000d6af8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6af8:	b510      	push	{r4, lr}
   d6afa:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6afc:	6800      	ldr	r0, [r0, #0]
   d6afe:	b118      	cbz	r0, d6b08 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6b00:	f7ff fe66 	bl	d67d0 <free>
            wakeupSource_ = nullptr;
   d6b04:	2300      	movs	r3, #0
   d6b06:	6023      	str	r3, [r4, #0]
   d6b08:	bd10      	pop	{r4, pc}

000d6b0a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6b0a:	b510      	push	{r4, lr}
   d6b0c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6b0e:	f7ff fff3 	bl	d6af8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6b12:	4620      	mov	r0, r4
   d6b14:	bd10      	pop	{r4, pc}
	...

000d6b18 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6b18:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6b1a:	4c09      	ldr	r4, [pc, #36]	; (d6b40 <_GLOBAL__sub_I_System+0x28>)
   d6b1c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6b22:	6020      	str	r0, [r4, #0]
   d6b24:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6b26:	71a0      	strb	r0, [r4, #6]
   d6b28:	8120      	strh	r0, [r4, #8]
   d6b2a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6b2c:	f7ff fdc4 	bl	d66b8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6b30:	4620      	mov	r0, r4
   d6b32:	4a04      	ldr	r2, [pc, #16]	; (d6b44 <_GLOBAL__sub_I_System+0x2c>)
   d6b34:	4904      	ldr	r1, [pc, #16]	; (d6b48 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6b3a:	f001 b8cf 	b.w	d7cdc <__aeabi_atexit>
   d6b3e:	bf00      	nop
   d6b40:	2003e3e4 	.word	0x2003e3e4
   d6b44:	2003dd44 	.word	0x2003dd44
   d6b48:	000d6b0b 	.word	0x000d6b0b

000d6b4c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6b4c:	b510      	push	{r4, lr}
   d6b4e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6b50:	6800      	ldr	r0, [r0, #0]
   d6b52:	b108      	cbz	r0, d6b58 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6b54:	f7ff fc80 	bl	d6458 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6b58:	4620      	mov	r0, r4
   d6b5a:	bd10      	pop	{r4, pc}

000d6b5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6b5c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6b5e:	4c06      	ldr	r4, [pc, #24]	; (d6b78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6b60:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6b62:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6b64:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6b66:	f7ff fc6f 	bl	d6448 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6b6a:	4620      	mov	r0, r4
   d6b6c:	4a03      	ldr	r2, [pc, #12]	; (d6b7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6b6e:	4904      	ldr	r1, [pc, #16]	; (d6b80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6b74:	f001 b8b2 	b.w	d7cdc <__aeabi_atexit>
   d6b78:	2003e3f0 	.word	0x2003e3f0
   d6b7c:	2003dd44 	.word	0x2003dd44
   d6b80:	000d6b4d 	.word	0x000d6b4d

000d6b84 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b86:	4606      	mov	r6, r0
   d6b88:	460d      	mov	r5, r1
   d6b8a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6b8c:	2400      	movs	r4, #0
  while (size--) {
   d6b8e:	42bd      	cmp	r5, r7
   d6b90:	d00c      	beq.n	d6bac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6b92:	6833      	ldr	r3, [r6, #0]
   d6b94:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6b98:	689b      	ldr	r3, [r3, #8]
   d6b9a:	4630      	mov	r0, r6
   d6b9c:	4798      	blx	r3
     if (chunk>=0)
   d6b9e:	2800      	cmp	r0, #0
   d6ba0:	db01      	blt.n	d6ba6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6ba2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6ba4:	e7f3      	b.n	d6b8e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6ba6:	2c00      	cmp	r4, #0
   d6ba8:	bf08      	it	eq
   d6baa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6bac:	4620      	mov	r0, r4
   d6bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6bb0 <_ZN5Print5printEPKc>:
   d6bb0:	b508      	push	{r3, lr}
   d6bb2:	f7ff f855 	bl	d5c60 <_ZN5Print5writeEPKc>
   d6bb6:	bd08      	pop	{r3, pc}

000d6bb8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6bb8:	6803      	ldr	r3, [r0, #0]
   d6bba:	689b      	ldr	r3, [r3, #8]
   d6bbc:	4718      	bx	r3

000d6bbe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6bbe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6bc0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6bc2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6bc4:	f7ff fff8 	bl	d6bb8 <_ZN5Print5printEc>
  n += print('\n');
   d6bc8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6bca:	4604      	mov	r4, r0
  n += print('\n');
   d6bcc:	4628      	mov	r0, r5
   d6bce:	f7ff fff3 	bl	d6bb8 <_ZN5Print5printEc>
  return n;
}
   d6bd2:	4420      	add	r0, r4
   d6bd4:	bd38      	pop	{r3, r4, r5, pc}

000d6bd6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6bd6:	b530      	push	{r4, r5, lr}
   d6bd8:	b08b      	sub	sp, #44	; 0x2c
   d6bda:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6bdc:	2100      	movs	r1, #0
   d6bde:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6be2:	2a01      	cmp	r2, #1
   d6be4:	bf98      	it	ls
   d6be6:	220a      	movls	r2, #10
   d6be8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6bec:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6bf0:	fb05 3312 	mls	r3, r5, r2, r3
   d6bf4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6bf8:	2b09      	cmp	r3, #9
   d6bfa:	bf94      	ite	ls
   d6bfc:	3330      	addls	r3, #48	; 0x30
   d6bfe:	3337      	addhi	r3, #55	; 0x37
   d6c00:	b2db      	uxtb	r3, r3
   d6c02:	4621      	mov	r1, r4
   d6c04:	f804 3901 	strb.w	r3, [r4], #-1
   d6c08:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6c0a:	2d00      	cmp	r5, #0
   d6c0c:	d1ee      	bne.n	d6bec <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6c0e:	f7ff f827 	bl	d5c60 <_ZN5Print5writeEPKc>
}
   d6c12:	b00b      	add	sp, #44	; 0x2c
   d6c14:	bd30      	pop	{r4, r5, pc}

000d6c16 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6c16:	b40c      	push	{r2, r3}
   d6c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c1c:	b087      	sub	sp, #28
   d6c1e:	af00      	add	r7, sp, #0
   d6c20:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6c24:	4605      	mov	r5, r0
   d6c26:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6c2a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6c2c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6c2e:	4623      	mov	r3, r4
   d6c30:	464a      	mov	r2, r9
   d6c32:	2114      	movs	r1, #20
   d6c34:	1d38      	adds	r0, r7, #4
   d6c36:	f7ff fdd3 	bl	d67e0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6c3a:	2813      	cmp	r0, #19
   d6c3c:	d805      	bhi.n	d6c4a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6c3e:	1d39      	adds	r1, r7, #4
   d6c40:	4628      	mov	r0, r5
   d6c42:	f7ff f80d 	bl	d5c60 <_ZN5Print5writeEPKc>
   d6c46:	4604      	mov	r4, r0
   d6c48:	e013      	b.n	d6c72 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6c4a:	f100 0308 	add.w	r3, r0, #8
   d6c4e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6c52:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6c54:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6c58:	1c41      	adds	r1, r0, #1
   d6c5a:	4623      	mov	r3, r4
   d6c5c:	464a      	mov	r2, r9
   d6c5e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6c60:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6c62:	f7ff fdbd 	bl	d67e0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6c66:	4669      	mov	r1, sp
   d6c68:	4628      	mov	r0, r5
   d6c6a:	f7fe fff9 	bl	d5c60 <_ZN5Print5writeEPKc>
   d6c6e:	4604      	mov	r4, r0
   d6c70:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6c72:	b11e      	cbz	r6, d6c7c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6c74:	4628      	mov	r0, r5
   d6c76:	f7ff ffa2 	bl	d6bbe <_ZN5Print7printlnEv>
   d6c7a:	4404      	add	r4, r0
    return n;
}
   d6c7c:	4620      	mov	r0, r4
   d6c7e:	371c      	adds	r7, #28
   d6c80:	46bd      	mov	sp, r7
   d6c82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c86:	b002      	add	sp, #8
   d6c88:	4770      	bx	lr
	...

000d6c8c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6c8c:	4b01      	ldr	r3, [pc, #4]	; (d6c94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6c8e:	4a02      	ldr	r2, [pc, #8]	; (d6c98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6c90:	601a      	str	r2, [r3, #0]
   d6c92:	4770      	bx	lr
   d6c94:	2003e3f4 	.word	0x2003e3f4
   d6c98:	000dac0b 	.word	0x000dac0b

000d6c9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6c9c:	4b02      	ldr	r3, [pc, #8]	; (d6ca8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6c9e:	681a      	ldr	r2, [r3, #0]
   d6ca0:	4b02      	ldr	r3, [pc, #8]	; (d6cac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6ca2:	601a      	str	r2, [r3, #0]
   d6ca4:	4770      	bx	lr
   d6ca6:	bf00      	nop
   d6ca8:	2003dcd8 	.word	0x2003dcd8
   d6cac:	2003e3f8 	.word	0x2003e3f8

000d6cb0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6cb0:	2100      	movs	r1, #0
   d6cb2:	f7ff bd09 	b.w	d66c8 <system_delay_ms>

000d6cb6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6cb6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6cb8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6cba:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6cbc:	b113      	cbz	r3, d6cc4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6cbe:	2203      	movs	r2, #3
   d6cc0:	4601      	mov	r1, r0
   d6cc2:	4798      	blx	r3
    }
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	bd10      	pop	{r4, pc}

000d6cc8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6cc8:	b510      	push	{r4, lr}
   d6cca:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6ccc:	f7ff fff3 	bl	d6cb6 <_ZNSt14_Function_baseD1Ev>
   d6cd0:	4620      	mov	r0, r4
   d6cd2:	bd10      	pop	{r4, pc}

000d6cd4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6cd4:	4803      	ldr	r0, [pc, #12]	; (d6ce4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6cd6:	4a04      	ldr	r2, [pc, #16]	; (d6ce8 <_GLOBAL__sub_I_RGB+0x14>)
   d6cd8:	4904      	ldr	r1, [pc, #16]	; (d6cec <_GLOBAL__sub_I_RGB+0x18>)
   d6cda:	2300      	movs	r3, #0
   d6cdc:	6083      	str	r3, [r0, #8]
   d6cde:	f000 bffd 	b.w	d7cdc <__aeabi_atexit>
   d6ce2:	bf00      	nop
   d6ce4:	2003e3fc 	.word	0x2003e3fc
   d6ce8:	2003dd44 	.word	0x2003dd44
   d6cec:	000d6cc9 	.word	0x000d6cc9

000d6cf0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6cf0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6cf2:	4b0c      	ldr	r3, [pc, #48]	; (d6d24 <serialEventRun+0x34>)
   d6cf4:	b133      	cbz	r3, d6d04 <serialEventRun+0x14>
   d6cf6:	f000 f96d 	bl	d6fd4 <_Z16_fetch_usbserialv>
   d6cfa:	6803      	ldr	r3, [r0, #0]
   d6cfc:	691b      	ldr	r3, [r3, #16]
   d6cfe:	4798      	blx	r3
   d6d00:	2800      	cmp	r0, #0
   d6d02:	dc09      	bgt.n	d6d18 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6d04:	4b08      	ldr	r3, [pc, #32]	; (d6d28 <serialEventRun+0x38>)
   d6d06:	b163      	cbz	r3, d6d22 <serialEventRun+0x32>
   d6d08:	f000 f9e6 	bl	d70d8 <_Z22__fetch_global_Serial1v>
   d6d0c:	6803      	ldr	r3, [r0, #0]
   d6d0e:	691b      	ldr	r3, [r3, #16]
   d6d10:	4798      	blx	r3
   d6d12:	2800      	cmp	r0, #0
   d6d14:	dc03      	bgt.n	d6d1e <serialEventRun+0x2e>
   d6d16:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6d18:	f3af 8000 	nop.w
   d6d1c:	e7f2      	b.n	d6d04 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6d1e:	f3af 8000 	nop.w
   d6d22:	bd08      	pop	{r3, pc}
	...

000d6d2c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6d2c:	b508      	push	{r3, lr}
	serialEventRun();
   d6d2e:	f7ff ffdf 	bl	d6cf0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6d32:	f7ff fb69 	bl	d6408 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6d36:	4b01      	ldr	r3, [pc, #4]	; (d6d3c <_post_loop+0x10>)
   d6d38:	6018      	str	r0, [r3, #0]
   d6d3a:	bd08      	pop	{r3, pc}
   d6d3c:	2003e730 	.word	0x2003e730

000d6d40 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6d40:	4802      	ldr	r0, [pc, #8]	; (d6d4c <_Z33system_initialize_user_backup_ramv+0xc>)
   d6d42:	4a03      	ldr	r2, [pc, #12]	; (d6d50 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6d44:	4903      	ldr	r1, [pc, #12]	; (d6d54 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6d46:	1a12      	subs	r2, r2, r0
   d6d48:	f003 ba02 	b.w	da150 <memcpy>
   d6d4c:	2003f400 	.word	0x2003f400
   d6d50:	2003f404 	.word	0x2003f404
   d6d54:	000daf68 	.word	0x000daf68

000d6d58 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6d58:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6d5a:	2300      	movs	r3, #0
   d6d5c:	9300      	str	r3, [sp, #0]
   d6d5e:	461a      	mov	r2, r3
   d6d60:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6d64:	f7ff fcc2 	bl	d66ec <system_ctrl_set_result>
}
   d6d68:	b003      	add	sp, #12
   d6d6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6d70 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6d70:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6d72:	8843      	ldrh	r3, [r0, #2]
   d6d74:	2b0a      	cmp	r3, #10
   d6d76:	d008      	beq.n	d6d8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6d78:	2b50      	cmp	r3, #80	; 0x50
   d6d7a:	d109      	bne.n	d6d90 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6d7c:	4b09      	ldr	r3, [pc, #36]	; (d6da4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6d7e:	681b      	ldr	r3, [r3, #0]
   d6d80:	b13b      	cbz	r3, d6d92 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6d82:	b003      	add	sp, #12
   d6d84:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6d88:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6d8a:	f7ff ffe5 	bl	d6d58 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6d8e:	e006      	b.n	d6d9e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6d90:	2300      	movs	r3, #0
   d6d92:	9300      	str	r3, [sp, #0]
   d6d94:	461a      	mov	r2, r3
   d6d96:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6d9a:	f7ff fca7 	bl	d66ec <system_ctrl_set_result>
        break;
    }
}
   d6d9e:	b003      	add	sp, #12
   d6da0:	f85d fb04 	ldr.w	pc, [sp], #4
   d6da4:	2003e40c 	.word	0x2003e40c

000d6da8 <module_user_init_hook>:

void module_user_init_hook()
{
   d6da8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6daa:	4c10      	ldr	r4, [pc, #64]	; (d6dec <module_user_init_hook+0x44>)
   d6dac:	4d10      	ldr	r5, [pc, #64]	; (d6df0 <module_user_init_hook+0x48>)
   d6dae:	6823      	ldr	r3, [r4, #0]
   d6db0:	42ab      	cmp	r3, r5
   d6db2:	4b10      	ldr	r3, [pc, #64]	; (d6df4 <module_user_init_hook+0x4c>)
   d6db4:	bf0c      	ite	eq
   d6db6:	2201      	moveq	r2, #1
   d6db8:	2200      	movne	r2, #0
   d6dba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6dbc:	d002      	beq.n	d6dc4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6dbe:	f7ff ffbf 	bl	d6d40 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6dc2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6dc4:	f7ff fb08 	bl	d63d8 <HAL_RNG_GetRandomNumber>
   d6dc8:	4604      	mov	r4, r0
    srand(seed);
   d6dca:	f003 f9d5 	bl	da178 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6dce:	4b0a      	ldr	r3, [pc, #40]	; (d6df8 <module_user_init_hook+0x50>)
   d6dd0:	b113      	cbz	r3, d6dd8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6dd2:	4620      	mov	r0, r4
   d6dd4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6dd8:	2100      	movs	r1, #0
   d6dda:	4807      	ldr	r0, [pc, #28]	; (d6df8 <module_user_init_hook+0x50>)
   d6ddc:	f7ff fce8 	bl	d67b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6de0:	2100      	movs	r1, #0
   d6de2:	4806      	ldr	r0, [pc, #24]	; (d6dfc <module_user_init_hook+0x54>)
}
   d6de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6de8:	f7ff bc76 	b.w	d66d8 <system_ctrl_set_app_request_handler>
   d6dec:	2003f400 	.word	0x2003f400
   d6df0:	9a271c1e 	.word	0x9a271c1e
   d6df4:	2003e410 	.word	0x2003e410
   d6df8:	00000000 	.word	0x00000000
   d6dfc:	000d6d71 	.word	0x000d6d71

000d6e00 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6e00:	4770      	bx	lr

000d6e02 <_ZN9IPAddressD0Ev>:
   d6e02:	b510      	push	{r4, lr}
   d6e04:	2118      	movs	r1, #24
   d6e06:	4604      	mov	r4, r0
   d6e08:	f000 ff76 	bl	d7cf8 <_ZdlPvj>
   d6e0c:	4620      	mov	r0, r4
   d6e0e:	bd10      	pop	{r4, pc}

000d6e10 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e10:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e12:	7d03      	ldrb	r3, [r0, #20]
   d6e14:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e16:	b08d      	sub	sp, #52	; 0x34
   d6e18:	460e      	mov	r6, r1
   d6e1a:	f100 0704 	add.w	r7, r0, #4
   d6e1e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e22:	d002      	beq.n	d6e2a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6e24:	f100 0508 	add.w	r5, r0, #8
   d6e28:	e018      	b.n	d6e5c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e2a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e2c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e2e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e32:	232f      	movs	r3, #47	; 0x2f
   d6e34:	462a      	mov	r2, r5
   d6e36:	200a      	movs	r0, #10
   d6e38:	f7ff fb16 	bl	d6468 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e3c:	4628      	mov	r0, r5
   d6e3e:	f003 f9cb 	bl	da1d8 <strlen>
   d6e42:	6833      	ldr	r3, [r6, #0]
   d6e44:	4602      	mov	r2, r0
   d6e46:	68db      	ldr	r3, [r3, #12]
   d6e48:	4629      	mov	r1, r5
   d6e4a:	4630      	mov	r0, r6
   d6e4c:	4798      	blx	r3
   d6e4e:	e00f      	b.n	d6e70 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6e50:	b124      	cbz	r4, d6e5c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6e52:	212e      	movs	r1, #46	; 0x2e
   d6e54:	4630      	mov	r0, r6
   d6e56:	f7ff feaf 	bl	d6bb8 <_ZN5Print5printEc>
   d6e5a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6e5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6e60:	220a      	movs	r2, #10
   d6e62:	4630      	mov	r0, r6
   d6e64:	f7ff feb7 	bl	d6bd6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e68:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e6a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e6c:	d1f0      	bne.n	d6e50 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e6e:	4620      	mov	r0, r4
    }
    return n;
}
   d6e70:	b00d      	add	sp, #52	; 0x34
   d6e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6e74 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6e74:	b510      	push	{r4, lr}
   d6e76:	4b05      	ldr	r3, [pc, #20]	; (d6e8c <_ZN9IPAddressC1Ev+0x18>)
   d6e78:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6e7a:	2211      	movs	r2, #17
   d6e7c:	f840 3b04 	str.w	r3, [r0], #4
   d6e80:	2100      	movs	r1, #0
   d6e82:	f003 f970 	bl	da166 <memset>
{
    clear();
}
   d6e86:	4620      	mov	r0, r4
   d6e88:	bd10      	pop	{r4, pc}
   d6e8a:	bf00      	nop
   d6e8c:	000dac9c 	.word	0x000dac9c

000d6e90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6e90:	4603      	mov	r3, r0
   d6e92:	4a07      	ldr	r2, [pc, #28]	; (d6eb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6e94:	b510      	push	{r4, lr}
   d6e96:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6e9a:	f101 0210 	add.w	r2, r1, #16
   d6e9e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6ea2:	f843 4b04 	str.w	r4, [r3], #4
   d6ea6:	4291      	cmp	r1, r2
   d6ea8:	d1f9      	bne.n	d6e9e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6eaa:	780a      	ldrb	r2, [r1, #0]
   d6eac:	701a      	strb	r2, [r3, #0]
}
   d6eae:	bd10      	pop	{r4, pc}
   d6eb0:	000dac9c 	.word	0x000dac9c

000d6eb4 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6eb4:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6eb6:	2b04      	cmp	r3, #4
   d6eb8:	d101      	bne.n	d6ebe <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6eba:	6840      	ldr	r0, [r0, #4]
   d6ebc:	e008      	b.n	d6ed0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6ebe:	2b06      	cmp	r3, #6
   d6ec0:	d10a      	bne.n	d6ed8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6ec2:	6843      	ldr	r3, [r0, #4]
   d6ec4:	b953      	cbnz	r3, d6edc <_ZNK9IPAddresscvbEv+0x28>
   d6ec6:	6883      	ldr	r3, [r0, #8]
   d6ec8:	b943      	cbnz	r3, d6edc <_ZNK9IPAddresscvbEv+0x28>
   d6eca:	68c3      	ldr	r3, [r0, #12]
   d6ecc:	b933      	cbnz	r3, d6edc <_ZNK9IPAddresscvbEv+0x28>
   d6ece:	6900      	ldr	r0, [r0, #16]
   d6ed0:	3000      	adds	r0, #0
   d6ed2:	bf18      	it	ne
   d6ed4:	2001      	movne	r0, #1
   d6ed6:	4770      	bx	lr
    } else {
        return false;
   d6ed8:	2000      	movs	r0, #0
   d6eda:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6edc:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d6ede:	4770      	bx	lr

000d6ee0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6ee0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6ee2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6ee6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6eea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6eee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6ef2:	2304      	movs	r3, #4
   d6ef4:	6041      	str	r1, [r0, #4]
   d6ef6:	7503      	strb	r3, [r0, #20]
   d6ef8:	bd10      	pop	{r4, pc}

000d6efa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6efa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6efc:	780d      	ldrb	r5, [r1, #0]
   d6efe:	788b      	ldrb	r3, [r1, #2]
   d6f00:	784a      	ldrb	r2, [r1, #1]
   d6f02:	78c9      	ldrb	r1, [r1, #3]
   d6f04:	9100      	str	r1, [sp, #0]
   d6f06:	4629      	mov	r1, r5
   d6f08:	f7ff ffea 	bl	d6ee0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6f0c:	b003      	add	sp, #12
   d6f0e:	bd30      	pop	{r4, r5, pc}

000d6f10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6f10:	7441      	strb	r1, [r0, #17]
   d6f12:	4770      	bx	lr

000d6f14 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6f14:	4770      	bx	lr

000d6f16 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6f16:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6f18:	2100      	movs	r1, #0
   d6f1a:	7c00      	ldrb	r0, [r0, #16]
   d6f1c:	f7ff fba4 	bl	d6668 <HAL_USB_USART_Receive_Data>
}
   d6f20:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f24:	bf28      	it	cs
   d6f26:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f2a:	bd08      	pop	{r3, pc}

000d6f2c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6f2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6f2e:	2101      	movs	r1, #1
   d6f30:	7c00      	ldrb	r0, [r0, #16]
   d6f32:	f7ff fb99 	bl	d6668 <HAL_USB_USART_Receive_Data>
}
   d6f36:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f3a:	bf28      	it	cs
   d6f3c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f40:	bd08      	pop	{r3, pc}

000d6f42 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6f42:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6f44:	7c00      	ldrb	r0, [r0, #16]
   d6f46:	f7ff fb87 	bl	d6658 <HAL_USB_USART_Available_Data_For_Write>
}
   d6f4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f4e:	bd08      	pop	{r3, pc}

000d6f50 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6f50:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6f52:	7c00      	ldrb	r0, [r0, #16]
   d6f54:	f7ff fb78 	bl	d6648 <HAL_USB_USART_Available_Data>
}
   d6f58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f5c:	bd08      	pop	{r3, pc}

000d6f5e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6f5e:	7c00      	ldrb	r0, [r0, #16]
   d6f60:	f7ff bb92 	b.w	d6688 <HAL_USB_USART_Flush_Data>

000d6f64 <_ZN9USBSerialD0Ev>:
   d6f64:	b510      	push	{r4, lr}
   d6f66:	2114      	movs	r1, #20
   d6f68:	4604      	mov	r4, r0
   d6f6a:	f000 fec5 	bl	d7cf8 <_ZdlPvj>
   d6f6e:	4620      	mov	r0, r4
   d6f70:	bd10      	pop	{r4, pc}

000d6f72 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f72:	b538      	push	{r3, r4, r5, lr}
   d6f74:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f76:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f78:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f7a:	f7ff fb6d 	bl	d6658 <HAL_USB_USART_Available_Data_For_Write>
   d6f7e:	2800      	cmp	r0, #0
   d6f80:	dc01      	bgt.n	d6f86 <_ZN9USBSerial5writeEh+0x14>
   d6f82:	7c60      	ldrb	r0, [r4, #17]
   d6f84:	b128      	cbz	r0, d6f92 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6f86:	4629      	mov	r1, r5
   d6f88:	7c20      	ldrb	r0, [r4, #16]
   d6f8a:	f7ff fb75 	bl	d6678 <HAL_USB_USART_Send_Data>
   d6f8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6f92:	bd38      	pop	{r3, r4, r5, pc}

000d6f94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6f94:	b510      	push	{r4, lr}
   d6f96:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6f98:	2300      	movs	r3, #0
   d6f9a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6fa0:	60a3      	str	r3, [r4, #8]
   d6fa2:	4b05      	ldr	r3, [pc, #20]	; (d6fb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6fa4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6fa6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6fa8:	4608      	mov	r0, r1
{
  _serial = serial;
   d6faa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6fac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6fae:	4611      	mov	r1, r2
   d6fb0:	f7ff fb3a 	bl	d6628 <HAL_USB_USART_Init>
}
   d6fb4:	4620      	mov	r0, r4
   d6fb6:	bd10      	pop	{r4, pc}
   d6fb8:	000dacb0 	.word	0x000dacb0

000d6fbc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6fbc:	2200      	movs	r2, #0
   d6fbe:	7c00      	ldrb	r0, [r0, #16]
   d6fc0:	f7ff bb3a 	b.w	d6638 <HAL_USB_USART_Begin>

000d6fc4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6fc4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6fc6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6fc8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6fca:	2100      	movs	r1, #0
   d6fcc:	f003 f8cb 	bl	da166 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6fd0:	4620      	mov	r0, r4
   d6fd2:	bd10      	pop	{r4, pc}

000d6fd4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6fd4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6fd6:	4d0e      	ldr	r5, [pc, #56]	; (d7010 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6fd8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6fda:	a801      	add	r0, sp, #4
   d6fdc:	f7ff fff2 	bl	d6fc4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6fe0:	6829      	ldr	r1, [r5, #0]
   d6fe2:	f011 0401 	ands.w	r4, r1, #1
   d6fe6:	d110      	bne.n	d700a <_Z16_fetch_usbserialv+0x36>
   d6fe8:	4628      	mov	r0, r5
   d6fea:	f7fd f867 	bl	d40bc <__cxa_guard_acquire>
   d6fee:	b160      	cbz	r0, d700a <_Z16_fetch_usbserialv+0x36>
   d6ff0:	aa01      	add	r2, sp, #4
   d6ff2:	4621      	mov	r1, r4
   d6ff4:	4807      	ldr	r0, [pc, #28]	; (d7014 <_Z16_fetch_usbserialv+0x40>)
   d6ff6:	f7ff ffcd 	bl	d6f94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6ffa:	4628      	mov	r0, r5
   d6ffc:	f7fd f863 	bl	d40c6 <__cxa_guard_release>
   d7000:	4a05      	ldr	r2, [pc, #20]	; (d7018 <_Z16_fetch_usbserialv+0x44>)
   d7002:	4906      	ldr	r1, [pc, #24]	; (d701c <_Z16_fetch_usbserialv+0x48>)
   d7004:	4803      	ldr	r0, [pc, #12]	; (d7014 <_Z16_fetch_usbserialv+0x40>)
   d7006:	f000 fe69 	bl	d7cdc <__aeabi_atexit>
	return _usbserial;
}
   d700a:	4802      	ldr	r0, [pc, #8]	; (d7014 <_Z16_fetch_usbserialv+0x40>)
   d700c:	b007      	add	sp, #28
   d700e:	bd30      	pop	{r4, r5, pc}
   d7010:	2003e414 	.word	0x2003e414
   d7014:	2003e418 	.word	0x2003e418
   d7018:	2003dd44 	.word	0x2003dd44
   d701c:	000d6f15 	.word	0x000d6f15

000d7020 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7020:	4770      	bx	lr

000d7022 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7022:	7441      	strb	r1, [r0, #17]
   d7024:	4770      	bx	lr

000d7026 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7026:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7028:	7c00      	ldrb	r0, [r0, #16]
   d702a:	f7ff fa6d 	bl	d6508 <HAL_USART_Available_Data_For_Write>
}
   d702e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7032:	bd08      	pop	{r3, pc}

000d7034 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7034:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7036:	7c00      	ldrb	r0, [r0, #16]
   d7038:	f7ff fa3e 	bl	d64b8 <HAL_USART_Available_Data>
}
   d703c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7040:	bd08      	pop	{r3, pc}

000d7042 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7042:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7044:	7c00      	ldrb	r0, [r0, #16]
   d7046:	f7ff fa47 	bl	d64d8 <HAL_USART_Peek_Data>
}
   d704a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d704e:	bf28      	it	cs
   d7050:	f04f 30ff 	movcs.w	r0, #4294967295
   d7054:	bd08      	pop	{r3, pc}

000d7056 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7056:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7058:	7c00      	ldrb	r0, [r0, #16]
   d705a:	f7ff fa35 	bl	d64c8 <HAL_USART_Read_Data>
}
   d705e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7062:	bf28      	it	cs
   d7064:	f04f 30ff 	movcs.w	r0, #4294967295
   d7068:	bd08      	pop	{r3, pc}

000d706a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d706a:	7c00      	ldrb	r0, [r0, #16]
   d706c:	f7ff ba3c 	b.w	d64e8 <HAL_USART_Flush_Data>

000d7070 <_ZN11USARTSerialD0Ev>:
   d7070:	b510      	push	{r4, lr}
   d7072:	2114      	movs	r1, #20
   d7074:	4604      	mov	r4, r0
   d7076:	f000 fe3f 	bl	d7cf8 <_ZdlPvj>
   d707a:	4620      	mov	r0, r4
   d707c:	bd10      	pop	{r4, pc}

000d707e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d707e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7080:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7082:	4604      	mov	r4, r0
   d7084:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7086:	b925      	cbnz	r5, d7092 <_ZN11USARTSerial5writeEh+0x14>
   d7088:	7c00      	ldrb	r0, [r0, #16]
   d708a:	f7ff fa3d 	bl	d6508 <HAL_USART_Available_Data_For_Write>
   d708e:	2800      	cmp	r0, #0
   d7090:	dd05      	ble.n	d709e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7092:	4631      	mov	r1, r6
   d7094:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d709a:	f7ff ba05 	b.w	d64a8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d709e:	4628      	mov	r0, r5
   d70a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d70a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d70a4:	b510      	push	{r4, lr}
   d70a6:	4604      	mov	r4, r0
   d70a8:	4608      	mov	r0, r1
   d70aa:	4611      	mov	r1, r2
   d70ac:	2200      	movs	r2, #0
   d70ae:	6062      	str	r2, [r4, #4]
   d70b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d70b4:	60a2      	str	r2, [r4, #8]
   d70b6:	4a05      	ldr	r2, [pc, #20]	; (d70cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d70b8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d70ba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d70bc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d70be:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d70c0:	461a      	mov	r2, r3
   d70c2:	f7ff f9e9 	bl	d6498 <HAL_USART_Init>
}
   d70c6:	4620      	mov	r0, r4
   d70c8:	bd10      	pop	{r4, pc}
   d70ca:	bf00      	nop
   d70cc:	000dace0 	.word	0x000dace0

000d70d0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d70d0:	7c00      	ldrb	r0, [r0, #16]
   d70d2:	f7ff ba11 	b.w	d64f8 <HAL_USART_Is_Enabled>
	...

000d70d8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d70d8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d70da:	4d0c      	ldr	r5, [pc, #48]	; (d710c <_Z22__fetch_global_Serial1v+0x34>)
   d70dc:	6829      	ldr	r1, [r5, #0]
   d70de:	f011 0401 	ands.w	r4, r1, #1
   d70e2:	d111      	bne.n	d7108 <_Z22__fetch_global_Serial1v+0x30>
   d70e4:	4628      	mov	r0, r5
   d70e6:	f7fc ffe9 	bl	d40bc <__cxa_guard_acquire>
   d70ea:	b168      	cbz	r0, d7108 <_Z22__fetch_global_Serial1v+0x30>
   d70ec:	4a08      	ldr	r2, [pc, #32]	; (d7110 <_Z22__fetch_global_Serial1v+0x38>)
   d70ee:	4b09      	ldr	r3, [pc, #36]	; (d7114 <_Z22__fetch_global_Serial1v+0x3c>)
   d70f0:	4809      	ldr	r0, [pc, #36]	; (d7118 <_Z22__fetch_global_Serial1v+0x40>)
   d70f2:	4621      	mov	r1, r4
   d70f4:	f7ff ffd6 	bl	d70a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d70f8:	4628      	mov	r0, r5
   d70fa:	f7fc ffe4 	bl	d40c6 <__cxa_guard_release>
   d70fe:	4a07      	ldr	r2, [pc, #28]	; (d711c <_Z22__fetch_global_Serial1v+0x44>)
   d7100:	4907      	ldr	r1, [pc, #28]	; (d7120 <_Z22__fetch_global_Serial1v+0x48>)
   d7102:	4805      	ldr	r0, [pc, #20]	; (d7118 <_Z22__fetch_global_Serial1v+0x40>)
   d7104:	f000 fdea 	bl	d7cdc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7108:	4803      	ldr	r0, [pc, #12]	; (d7118 <_Z22__fetch_global_Serial1v+0x40>)
   d710a:	bd38      	pop	{r3, r4, r5, pc}
   d710c:	2003e4c4 	.word	0x2003e4c4
   d7110:	2003e4c8 	.word	0x2003e4c8
   d7114:	2003e440 	.word	0x2003e440
   d7118:	2003e42c 	.word	0x2003e42c
   d711c:	2003dd44 	.word	0x2003dd44
   d7120:	000d7021 	.word	0x000d7021

000d7124 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7124:	4770      	bx	lr

000d7126 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7128:	4606      	mov	r6, r0
   d712a:	4615      	mov	r5, r2
   d712c:	460c      	mov	r4, r1
   d712e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7130:	42bc      	cmp	r4, r7
   d7132:	d006      	beq.n	d7142 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7134:	6833      	ldr	r3, [r6, #0]
   d7136:	f814 1b01 	ldrb.w	r1, [r4], #1
   d713a:	689b      	ldr	r3, [r3, #8]
   d713c:	4630      	mov	r0, r6
   d713e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7140:	e7f6      	b.n	d7130 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7142:	4628      	mov	r0, r5
   d7144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7146 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7146:	2200      	movs	r2, #0
   d7148:	7c00      	ldrb	r0, [r0, #16]
   d714a:	f7ff b9fd 	b.w	d6548 <HAL_I2C_Write_Data>

000d714e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d714e:	2100      	movs	r1, #0
   d7150:	7c00      	ldrb	r0, [r0, #16]
   d7152:	f7ff ba01 	b.w	d6558 <HAL_I2C_Available_Data>

000d7156 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7156:	2100      	movs	r1, #0
   d7158:	7c00      	ldrb	r0, [r0, #16]
   d715a:	f7ff ba05 	b.w	d6568 <HAL_I2C_Read_Data>

000d715e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d715e:	2100      	movs	r1, #0
   d7160:	7c00      	ldrb	r0, [r0, #16]
   d7162:	f7ff ba09 	b.w	d6578 <HAL_I2C_Peek_Data>

000d7166 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7166:	2100      	movs	r1, #0
   d7168:	7c00      	ldrb	r0, [r0, #16]
   d716a:	f7ff ba0d 	b.w	d6588 <HAL_I2C_Flush_Data>

000d716e <_ZN7TwoWireD0Ev>:
   d716e:	b510      	push	{r4, lr}
   d7170:	2114      	movs	r1, #20
   d7172:	4604      	mov	r4, r0
   d7174:	f000 fdc0 	bl	d7cf8 <_ZdlPvj>
   d7178:	4620      	mov	r0, r4
   d717a:	bd10      	pop	{r4, pc}

000d717c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d717c:	b510      	push	{r4, lr}
   d717e:	4604      	mov	r4, r0
   d7180:	2300      	movs	r3, #0
   d7182:	6063      	str	r3, [r4, #4]
   d7184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7188:	60a3      	str	r3, [r4, #8]
   d718a:	4b04      	ldr	r3, [pc, #16]	; (d719c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d718c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d718e:	4608      	mov	r0, r1
   d7190:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7192:	4611      	mov	r1, r2
   d7194:	f7ff fa08 	bl	d65a8 <HAL_I2C_Init>
}
   d7198:	4620      	mov	r0, r4
   d719a:	bd10      	pop	{r4, pc}
   d719c:	000dad10 	.word	0x000dad10

000d71a0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d71a0:	2300      	movs	r3, #0
   d71a2:	461a      	mov	r2, r3
   d71a4:	4619      	mov	r1, r3
   d71a6:	7c00      	ldrb	r0, [r0, #16]
   d71a8:	f7ff b9b6 	b.w	d6518 <HAL_I2C_Begin>

000d71ac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d71ac:	b570      	push	{r4, r5, r6, lr}
   d71ae:	460c      	mov	r4, r1
   d71b0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d71b2:	2514      	movs	r5, #20
   d71b4:	4606      	mov	r6, r0
   d71b6:	462a      	mov	r2, r5
   d71b8:	2100      	movs	r1, #0
   d71ba:	a801      	add	r0, sp, #4
   d71bc:	f002 ffd3 	bl	da166 <memset>
   d71c0:	7823      	ldrb	r3, [r4, #0]
   d71c2:	f88d 3008 	strb.w	r3, [sp, #8]
   d71c6:	6863      	ldr	r3, [r4, #4]
   d71c8:	9303      	str	r3, [sp, #12]
   d71ca:	68e3      	ldr	r3, [r4, #12]
   d71cc:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d71ce:	2200      	movs	r2, #0
   d71d0:	7a23      	ldrb	r3, [r4, #8]
   d71d2:	7c30      	ldrb	r0, [r6, #16]
   d71d4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d71d8:	a901      	add	r1, sp, #4
   d71da:	9305      	str	r3, [sp, #20]
   d71dc:	f7ff f9ec 	bl	d65b8 <HAL_I2C_Request_Data_Ex>
}
   d71e0:	b006      	add	sp, #24
   d71e2:	bd70      	pop	{r4, r5, r6, pc}

000d71e4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d71e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d71e6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d71e8:	f88d 1000 	strb.w	r1, [sp]
   d71ec:	f04f 0164 	mov.w	r1, #100	; 0x64
   d71f0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d71f2:	bf18      	it	ne
   d71f4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d71f6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d71f8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d71fa:	f88d 3008 	strb.w	r3, [sp, #8]
   d71fe:	f7ff ffd5 	bl	d71ac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7202:	b005      	add	sp, #20
   d7204:	f85d fb04 	ldr.w	pc, [sp], #4

000d7208 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d7208:	2301      	movs	r3, #1
   d720a:	f7ff bfeb 	b.w	d71e4 <_ZN7TwoWire11requestFromEhjh>

000d720e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d720e:	2200      	movs	r2, #0
   d7210:	7c00      	ldrb	r0, [r0, #16]
   d7212:	f7ff b989 	b.w	d6528 <HAL_I2C_Begin_Transmission>

000d7216 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7216:	b2c9      	uxtb	r1, r1
   d7218:	f7ff bff9 	b.w	d720e <_ZN7TwoWire17beginTransmissionEh>

000d721c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d721c:	2200      	movs	r2, #0
   d721e:	7c00      	ldrb	r0, [r0, #16]
   d7220:	f7ff b98a 	b.w	d6538 <HAL_I2C_End_Transmission>

000d7224 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7224:	2101      	movs	r1, #1
   d7226:	f7ff bff9 	b.w	d721c <_ZN7TwoWire15endTransmissionEh>

000d722a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d722a:	2100      	movs	r1, #0
   d722c:	7c00      	ldrb	r0, [r0, #16]
   d722e:	f7ff b9b3 	b.w	d6598 <HAL_I2C_Is_Enabled>

000d7232 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7232:	2200      	movs	r2, #0
   d7234:	4611      	mov	r1, r2
   d7236:	6840      	ldr	r0, [r0, #4]
   d7238:	f7ff ba9a 	b.w	d6770 <network_listening>

000d723c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d723c:	2200      	movs	r2, #0
   d723e:	4611      	mov	r1, r2
   d7240:	6840      	ldr	r0, [r0, #4]
   d7242:	f7ff baa5 	b.w	d6790 <network_get_listen_timeout>

000d7246 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7246:	2200      	movs	r2, #0
   d7248:	6840      	ldr	r0, [r0, #4]
   d724a:	f7ff ba99 	b.w	d6780 <network_set_listen_timeout>

000d724e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d724e:	2200      	movs	r2, #0
   d7250:	f081 0101 	eor.w	r1, r1, #1
   d7254:	6840      	ldr	r0, [r0, #4]
   d7256:	f7ff ba83 	b.w	d6760 <network_listen>

000d725a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d725a:	2300      	movs	r3, #0
   d725c:	461a      	mov	r2, r3
   d725e:	2101      	movs	r1, #1
   d7260:	6840      	ldr	r0, [r0, #4]
   d7262:	f7ff ba75 	b.w	d6750 <network_off>

000d7266 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7266:	2300      	movs	r3, #0
   d7268:	461a      	mov	r2, r3
   d726a:	4619      	mov	r1, r3
   d726c:	6840      	ldr	r0, [r0, #4]
   d726e:	f7ff ba67 	b.w	d6740 <network_on>

000d7272 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7272:	2200      	movs	r2, #0
   d7274:	4611      	mov	r1, r2
   d7276:	6840      	ldr	r0, [r0, #4]
   d7278:	f7ff ba5a 	b.w	d6730 <network_ready>

000d727c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d727c:	2200      	movs	r2, #0
   d727e:	4611      	mov	r1, r2
   d7280:	6840      	ldr	r0, [r0, #4]
   d7282:	f7ff ba45 	b.w	d6710 <network_connecting>

000d7286 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7286:	2200      	movs	r2, #0
   d7288:	2102      	movs	r1, #2
   d728a:	6840      	ldr	r0, [r0, #4]
   d728c:	f7ff ba48 	b.w	d6720 <network_disconnect>

000d7290 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7290:	2300      	movs	r3, #0
   d7292:	461a      	mov	r2, r3
   d7294:	6840      	ldr	r0, [r0, #4]
   d7296:	f7ff ba33 	b.w	d6700 <network_connect>

000d729a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d729a:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d729c:	4605      	mov	r5, r0
   d729e:	b188      	cbz	r0, d72c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d72a0:	6804      	ldr	r4, [r0, #0]
   d72a2:	b14c      	cbz	r4, d72b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d72a4:	68a3      	ldr	r3, [r4, #8]
   d72a6:	b11b      	cbz	r3, d72b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d72a8:	2203      	movs	r2, #3
   d72aa:	4621      	mov	r1, r4
   d72ac:	4620      	mov	r0, r4
   d72ae:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72b0:	2110      	movs	r1, #16
   d72b2:	4620      	mov	r0, r4
   d72b4:	f000 fd20 	bl	d7cf8 <_ZdlPvj>
   d72b8:	4628      	mov	r0, r5
   d72ba:	2114      	movs	r1, #20
      }
   d72bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72c0:	f000 bd1a 	b.w	d7cf8 <_ZdlPvj>
   d72c4:	bd38      	pop	{r3, r4, r5, pc}

000d72c6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d72c6:	b110      	cbz	r0, d72ce <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d72c8:	6803      	ldr	r3, [r0, #0]
   d72ca:	685b      	ldr	r3, [r3, #4]
   d72cc:	4718      	bx	r3
   d72ce:	4770      	bx	lr

000d72d0 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d72d0:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d72d2:	6803      	ldr	r3, [r0, #0]
   d72d4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d72d6:	b1bb      	cbz	r3, d7308 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d72d8:	6858      	ldr	r0, [r3, #4]
   d72da:	f7ff f89d 	bl	d6418 <os_thread_is_current>
   d72de:	b978      	cbnz	r0, d7300 <_ZN6ThreadD1Ev+0x30>
   d72e0:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d72e2:	7c5a      	ldrb	r2, [r3, #17]
   d72e4:	b912      	cbnz	r2, d72ec <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d72e6:	6858      	ldr	r0, [r3, #4]
   d72e8:	f7ff f89e 	bl	d6428 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d72ec:	6823      	ldr	r3, [r4, #0]
   d72ee:	6858      	ldr	r0, [r3, #4]
   d72f0:	f7ff f8a2 	bl	d6438 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d72f4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d72f6:	2300      	movs	r3, #0
   d72f8:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d72fa:	b128      	cbz	r0, d7308 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d72fc:	f7ff ffcd 	bl	d729a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7300:	6820      	ldr	r0, [r4, #0]
   d7302:	b108      	cbz	r0, d7308 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7304:	f7ff ffc9 	bl	d729a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7308:	4620      	mov	r0, r4
   d730a:	bd10      	pop	{r4, pc}

000d730c <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d730c:	b538      	push	{r3, r4, r5, lr}
   d730e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7310:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7314:	b108      	cbz	r0, d731a <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7316:	f7fc fec4 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d731a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d731e:	b108      	cbz	r0, d7324 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7320:	f7ff f89a 	bl	d6458 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7324:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7328:	b135      	cbz	r5, d7338 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d732a:	4628      	mov	r0, r5
   d732c:	f7ff ffd0 	bl	d72d0 <_ZN6ThreadD1Ev>
   d7330:	2104      	movs	r1, #4
   d7332:	4628      	mov	r0, r5
   d7334:	f000 fce0 	bl	d7cf8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7338:	6820      	ldr	r0, [r4, #0]
   d733a:	b108      	cbz	r0, d7340 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d733c:	f7ff ffc3 	bl	d72c6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7340:	4620      	mov	r0, r4
   d7342:	bd38      	pop	{r3, r4, r5, pc}

000d7344 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7344:	b510      	push	{r4, lr}
   d7346:	4b04      	ldr	r3, [pc, #16]	; (d7358 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7348:	4604      	mov	r4, r0
   d734a:	f840 3b08 	str.w	r3, [r0], #8
   d734e:	f7ff ffdd 	bl	d730c <_ZN5spark11MeshPublishD1Ev>
   d7352:	4620      	mov	r0, r4
   d7354:	bd10      	pop	{r4, pc}
   d7356:	bf00      	nop
   d7358:	000dad38 	.word	0x000dad38

000d735c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d735c:	b538      	push	{r3, r4, r5, lr}
   d735e:	4c0e      	ldr	r4, [pc, #56]	; (d7398 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7360:	4b0e      	ldr	r3, [pc, #56]	; (d739c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7362:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7364:	2500      	movs	r5, #0
   d7366:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7368:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d736c:	6063      	str	r3, [r4, #4]
   d736e:	60a5      	str	r5, [r4, #8]
   d7370:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7374:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7378:	f7ff f866 	bl	d6448 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d737c:	4b08      	ldr	r3, [pc, #32]	; (d73a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d737e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7382:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7386:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7388:	4620      	mov	r0, r4
   d738a:	4a06      	ldr	r2, [pc, #24]	; (d73a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d738c:	4906      	ldr	r1, [pc, #24]	; (d73a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d738e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7392:	f000 bca3 	b.w	d7cdc <__aeabi_atexit>
   d7396:	bf00      	nop
   d7398:	2003e54c 	.word	0x2003e54c
   d739c:	000dae20 	.word	0x000dae20
   d73a0:	000dad38 	.word	0x000dad38
   d73a4:	2003dd44 	.word	0x2003dd44
   d73a8:	000d7345 	.word	0x000d7345

000d73ac <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d73ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73ae:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73b0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d73b2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73b6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d73b8:	2201      	movs	r2, #1
   d73ba:	f04f 33ff 	mov.w	r3, #4294967295
   d73be:	4621      	mov	r1, r4
   d73c0:	47a8      	blx	r5
}
   d73c2:	b003      	add	sp, #12
   d73c4:	bd30      	pop	{r4, r5, pc}

000d73c6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d73c6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d73c8:	6803      	ldr	r3, [r0, #0]
   d73ca:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d73cc:	f04f 33ff 	mov.w	r3, #4294967295
   d73d0:	46a4      	mov	ip, r4
}
   d73d2:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d73d6:	4760      	bx	ip

000d73d8 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d73d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73da:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d73dc:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d73de:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d73e2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d73e4:	4621      	mov	r1, r4
   d73e6:	4613      	mov	r3, r2
   d73e8:	2201      	movs	r2, #1
   d73ea:	47a8      	blx	r5
}
   d73ec:	b003      	add	sp, #12
   d73ee:	bd30      	pop	{r4, r5, pc}

000d73f0 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d73f0:	4770      	bx	lr

000d73f2 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d73f2:	b538      	push	{r3, r4, r5, lr}
   d73f4:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d73f6:	681a      	ldr	r2, [r3, #0]
   d73f8:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d73fa:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d73fc:	da05      	bge.n	d740a <_ZN9TCPClient9connectedEv+0x18>
   d73fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7402:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7406:	429a      	cmp	r2, r3
   d7408:	d001      	beq.n	d740e <_ZN9TCPClient9connectedEv+0x1c>
   d740a:	2501      	movs	r5, #1
   d740c:	e00b      	b.n	d7426 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d740e:	6803      	ldr	r3, [r0, #0]
   d7410:	691b      	ldr	r3, [r3, #16]
   d7412:	4798      	blx	r3
   d7414:	2800      	cmp	r0, #0
   d7416:	bf14      	ite	ne
   d7418:	2501      	movne	r5, #1
   d741a:	2500      	moveq	r5, #0
        if (!rv) {
   d741c:	d103      	bne.n	d7426 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d741e:	6823      	ldr	r3, [r4, #0]
   d7420:	4620      	mov	r0, r4
   d7422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7424:	4798      	blx	r3
        }
    }
    return rv;
}
   d7426:	4628      	mov	r0, r5
   d7428:	bd38      	pop	{r3, r4, r5, pc}

000d742a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d742a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d742c:	6818      	ldr	r0, [r3, #0]
}
   d742e:	43c0      	mvns	r0, r0
   d7430:	0fc0      	lsrs	r0, r0, #31
   d7432:	4770      	bx	lr

000d7434 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7434:	4770      	bx	lr

000d7436 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7436:	2000      	movs	r0, #0
   d7438:	4770      	bx	lr

000d743a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d743a:	b510      	push	{r4, lr}
   d743c:	2114      	movs	r1, #20
   d743e:	4604      	mov	r4, r0
   d7440:	f000 fc5a 	bl	d7cf8 <_ZdlPvj>
   d7444:	4620      	mov	r0, r4
   d7446:	bd10      	pop	{r4, pc}

000d7448 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7448:	f7fc be29 	b.w	d409e <_ZdlPv>

000d744c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d744c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d744e:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7450:	2200      	movs	r2, #0
   d7452:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7454:	9202      	str	r2, [sp, #8]
   d7456:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7458:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d745a:	4604      	mov	r4, r0
   d745c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d745e:	d008      	beq.n	d7472 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7460:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7464:	fbb3 f1f2 	udiv	r1, r3, r2
   d7468:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d746a:	fb02 3111 	mls	r1, r2, r1, r3
   d746e:	434a      	muls	r2, r1
   d7470:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7472:	6960      	ldr	r0, [r4, #20]
   d7474:	2308      	movs	r3, #8
   d7476:	9300      	str	r3, [sp, #0]
   d7478:	f241 0205 	movw	r2, #4101	; 0x1005
   d747c:	446b      	add	r3, sp
   d747e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7482:	6800      	ldr	r0, [r0, #0]
   d7484:	f7ff f8a0 	bl	d65c8 <sock_setsockopt>
    if (ret < 0) {
   d7488:	2800      	cmp	r0, #0
   d748a:	db08      	blt.n	d749e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d748c:	6960      	ldr	r0, [r4, #20]
   d748e:	2300      	movs	r3, #0
   d7490:	4632      	mov	r2, r6
   d7492:	4629      	mov	r1, r5
   d7494:	6800      	ldr	r0, [r0, #0]
   d7496:	f7ff f8b7 	bl	d6608 <sock_send>
    if (ret < 0) {
   d749a:	2800      	cmp	r0, #0
   d749c:	da04      	bge.n	d74a8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d749e:	f7ff f9a7 	bl	d67f0 <__errno>
   d74a2:	6803      	ldr	r3, [r0, #0]
   d74a4:	6063      	str	r3, [r4, #4]
   d74a6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d74a8:	b004      	add	sp, #16
   d74aa:	bd70      	pop	{r4, r5, r6, pc}

000d74ac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74ac:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74ae:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74b0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74b2:	689b      	ldr	r3, [r3, #8]
   d74b4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d74b6:	68a3      	ldr	r3, [r4, #8]
   d74b8:	3b01      	subs	r3, #1
   d74ba:	60a3      	str	r3, [r4, #8]
   d74bc:	b92b      	cbnz	r3, d74ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d74be:	6823      	ldr	r3, [r4, #0]
   d74c0:	4620      	mov	r0, r4
   d74c2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d74c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d74c8:	4718      	bx	r3
   d74ca:	bd10      	pop	{r4, pc}

000d74cc <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d74cc:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d74ce:	4604      	mov	r4, r0
   d74d0:	694d      	ldr	r5, [r1, #20]
   d74d2:	4b05      	ldr	r3, [pc, #20]	; (d74e8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d74d4:	f844 3b04 	str.w	r3, [r4], #4
   d74d8:	358c      	adds	r5, #140	; 0x8c
   d74da:	4606      	mov	r6, r0
   d74dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d74de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d74e0:	682b      	ldr	r3, [r5, #0]
   d74e2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d74e4:	4630      	mov	r0, r6
   d74e6:	bd70      	pop	{r4, r5, r6, pc}
   d74e8:	000dac9c 	.word	0x000dac9c

000d74ec <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d74ec:	b510      	push	{r4, lr}
   d74ee:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d74f0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d74f4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d74f8:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d74fa:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d74fc:	d005      	beq.n	d750a <_ZN9TCPClient4peekEv+0x1e>
   d74fe:	6962      	ldr	r2, [r4, #20]
   d7500:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7504:	4413      	add	r3, r2
   d7506:	7918      	ldrb	r0, [r3, #4]
   d7508:	bd10      	pop	{r4, pc}
   d750a:	6803      	ldr	r3, [r0, #0]
   d750c:	691b      	ldr	r3, [r3, #16]
   d750e:	4798      	blx	r3
   d7510:	2800      	cmp	r0, #0
   d7512:	d1f4      	bne.n	d74fe <_ZN9TCPClient4peekEv+0x12>
   d7514:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7518:	bd10      	pop	{r4, pc}

000d751a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d751a:	b510      	push	{r4, lr}
   d751c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d751e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7522:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7526:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7528:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d752a:	d008      	beq.n	d753e <_ZN9TCPClient4readEv+0x24>
   d752c:	6962      	ldr	r2, [r4, #20]
   d752e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7532:	1c59      	adds	r1, r3, #1
   d7534:	4413      	add	r3, r2
   d7536:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d753a:	7918      	ldrb	r0, [r3, #4]
   d753c:	bd10      	pop	{r4, pc}
   d753e:	6803      	ldr	r3, [r0, #0]
   d7540:	691b      	ldr	r3, [r3, #16]
   d7542:	4798      	blx	r3
   d7544:	2800      	cmp	r0, #0
   d7546:	d1f1      	bne.n	d752c <_ZN9TCPClient4readEv+0x12>
   d7548:	f04f 30ff 	mov.w	r0, #4294967295
}
   d754c:	bd10      	pop	{r4, pc}

000d754e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d754e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7550:	6943      	ldr	r3, [r0, #20]
   d7552:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7554:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7558:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d755c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d755e:	4605      	mov	r5, r0
   d7560:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7562:	d106      	bne.n	d7572 <_ZN9TCPClient4readEPhj+0x24>
   d7564:	6803      	ldr	r3, [r0, #0]
   d7566:	691b      	ldr	r3, [r3, #16]
   d7568:	4798      	blx	r3
   d756a:	b910      	cbnz	r0, d7572 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d756c:	f04f 34ff 	mov.w	r4, #4294967295
   d7570:	e014      	b.n	d759c <_ZN9TCPClient4readEPhj+0x4e>
   d7572:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7574:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7578:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d757c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d757e:	42bc      	cmp	r4, r7
   d7580:	bf28      	it	cs
   d7582:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7584:	4419      	add	r1, r3
   d7586:	4622      	mov	r2, r4
   d7588:	3104      	adds	r1, #4
   d758a:	4630      	mov	r0, r6
   d758c:	f002 fde0 	bl	da150 <memcpy>
   d7590:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7592:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7596:	4423      	add	r3, r4
   d7598:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d759c:	4620      	mov	r0, r4
   d759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75a0 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d75a4:	4698      	mov	r8, r3
    stop();
   d75a6:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75a8:	b093      	sub	sp, #76	; 0x4c
    stop();
   d75aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75ac:	460d      	mov	r5, r1
   d75ae:	4606      	mov	r6, r0
   d75b0:	4617      	mov	r7, r2
    stop();
   d75b2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d75b4:	ab12      	add	r3, sp, #72	; 0x48
   d75b6:	2400      	movs	r4, #0
   d75b8:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d75bc:	4622      	mov	r2, r4
   d75be:	4621      	mov	r1, r4
   d75c0:	4628      	mov	r0, r5
   d75c2:	f7fe fe59 	bl	d6278 <netdb_getaddrinfo>
   d75c6:	4681      	mov	r9, r0
   d75c8:	2800      	cmp	r0, #0
   d75ca:	d13d      	bne.n	d7648 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d75cc:	9b00      	ldr	r3, [sp, #0]
   d75ce:	2b00      	cmp	r3, #0
   d75d0:	d056      	beq.n	d7680 <_ZN9TCPClient7connectEPKctm+0xe0>
   d75d2:	695b      	ldr	r3, [r3, #20]
   d75d4:	2b00      	cmp	r3, #0
   d75d6:	d053      	beq.n	d7680 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d75d8:	a806      	add	r0, sp, #24
   d75da:	f7ff fc4b 	bl	d6e74 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d75de:	9b00      	ldr	r3, [sp, #0]
   d75e0:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d75e2:	7863      	ldrb	r3, [r4, #1]
   d75e4:	2b02      	cmp	r3, #2
   d75e6:	d101      	bne.n	d75ec <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d75e8:	1d21      	adds	r1, r4, #4
   d75ea:	e013      	b.n	d7614 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d75ec:	2b0a      	cmp	r3, #10
   d75ee:	d114      	bne.n	d761a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d75f0:	2211      	movs	r2, #17
   d75f2:	4649      	mov	r1, r9
   d75f4:	a801      	add	r0, sp, #4
   d75f6:	f002 fdb6 	bl	da166 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d75fa:	68a3      	ldr	r3, [r4, #8]
   d75fc:	bb33      	cbnz	r3, d764c <_ZN9TCPClient7connectEPKctm+0xac>
   d75fe:	68e3      	ldr	r3, [r4, #12]
   d7600:	bb23      	cbnz	r3, d764c <_ZN9TCPClient7connectEPKctm+0xac>
   d7602:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7606:	6925      	ldr	r5, [r4, #16]
   d7608:	f7fe ff36 	bl	d6478 <inet_htonl>
   d760c:	4285      	cmp	r5, r0
   d760e:	d11d      	bne.n	d764c <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7610:	f104 0114 	add.w	r1, r4, #20
   d7614:	a806      	add	r0, sp, #24
   d7616:	f7ff fc70 	bl	d6efa <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d761a:	a806      	add	r0, sp, #24
   d761c:	f7ff fc4a 	bl	d6eb4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7620:	2800      	cmp	r0, #0
   d7622:	d02d      	beq.n	d7680 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7624:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7626:	ad07      	add	r5, sp, #28
   d7628:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d762c:	4b18      	ldr	r3, [pc, #96]	; (d7690 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d762e:	930c      	str	r3, [sp, #48]	; 0x30
   d7630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7632:	ac0d      	add	r4, sp, #52	; 0x34
   d7634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7636:	682b      	ldr	r3, [r5, #0]
   d7638:	7023      	strb	r3, [r4, #0]
   d763a:	463a      	mov	r2, r7
   d763c:	4643      	mov	r3, r8
   d763e:	a90c      	add	r1, sp, #48	; 0x30
   d7640:	4630      	mov	r0, r6
   d7642:	47c8      	blx	r9
   d7644:	4681      	mov	r9, r0
   d7646:	e01b      	b.n	d7680 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7648:	46a1      	mov	r9, r4
   d764a:	e019      	b.n	d7680 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d764c:	f104 0308 	add.w	r3, r4, #8
   d7650:	ad01      	add	r5, sp, #4
   d7652:	3418      	adds	r4, #24
   d7654:	6818      	ldr	r0, [r3, #0]
   d7656:	6859      	ldr	r1, [r3, #4]
   d7658:	462a      	mov	r2, r5
   d765a:	c203      	stmia	r2!, {r0, r1}
   d765c:	3308      	adds	r3, #8
   d765e:	42a3      	cmp	r3, r4
   d7660:	4615      	mov	r5, r2
   d7662:	d1f7      	bne.n	d7654 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7664:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7666:	a901      	add	r1, sp, #4
   d7668:	a80c      	add	r0, sp, #48	; 0x30
   d766a:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d766c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7670:	f7ff fc0e 	bl	d6e90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7676:	ac07      	add	r4, sp, #28
   d7678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d767a:	682b      	ldr	r3, [r5, #0]
   d767c:	7023      	strb	r3, [r4, #0]
   d767e:	e7cc      	b.n	d761a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7680:	9800      	ldr	r0, [sp, #0]
   d7682:	f7fe fdf1 	bl	d6268 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d7686:	4648      	mov	r0, r9
   d7688:	b013      	add	sp, #76	; 0x4c
   d768a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d768e:	bf00      	nop
   d7690:	000dac9c 	.word	0x000dac9c

000d7694 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7694:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7696:	2300      	movs	r3, #0
   d7698:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d769c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d769e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d76a2:	4770      	bx	lr

000d76a4 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d76a8:	461e      	mov	r6, r3
    stop();
   d76aa:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76ac:	460c      	mov	r4, r1
   d76ae:	b08a      	sub	sp, #40	; 0x28
    stop();
   d76b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76b2:	4605      	mov	r5, r0
   d76b4:	4617      	mov	r7, r2
    stop();
   d76b6:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d76b8:	7d23      	ldrb	r3, [r4, #20]
   d76ba:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d76be:	2b04      	cmp	r3, #4
   d76c0:	bf0c      	ite	eq
   d76c2:	2002      	moveq	r0, #2
   d76c4:	200a      	movne	r0, #10
   d76c6:	2206      	movs	r2, #6
   d76c8:	2101      	movs	r1, #1
   d76ca:	f7fe ffa5 	bl	d6618 <sock_socket>
   d76ce:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d76d2:	696b      	ldr	r3, [r5, #20]
   d76d4:	681b      	ldr	r3, [r3, #0]
   d76d6:	2b00      	cmp	r3, #0
   d76d8:	db18      	blt.n	d770c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d76da:	4628      	mov	r0, r5
   d76dc:	f7ff ffda 	bl	d7694 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d76e0:	b1d6      	cbz	r6, d7718 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d76e2:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d76e4:	a903      	add	r1, sp, #12
   d76e6:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d76e8:	9303      	str	r3, [sp, #12]
   d76ea:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d76ee:	f7fe fe6b 	bl	d63c8 <if_index_to_name>
   d76f2:	b958      	cbnz	r0, d770c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d76f4:	6968      	ldr	r0, [r5, #20]
   d76f6:	2306      	movs	r3, #6
   d76f8:	9300      	str	r3, [sp, #0]
   d76fa:	f241 020b 	movw	r2, #4107	; 0x100b
   d76fe:	ab03      	add	r3, sp, #12
   d7700:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7704:	6800      	ldr	r0, [r0, #0]
   d7706:	f7fe ff5f 	bl	d65c8 <sock_setsockopt>
   d770a:	b128      	cbz	r0, d7718 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d770c:	682b      	ldr	r3, [r5, #0]
   d770e:	4628      	mov	r0, r5
   d7710:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7712:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7714:	4798      	blx	r3
   d7716:	e03b      	b.n	d7790 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7718:	261c      	movs	r6, #28
   d771a:	4632      	mov	r2, r6
   d771c:	2100      	movs	r1, #0
   d771e:	a803      	add	r0, sp, #12
   d7720:	f002 fd21 	bl	da166 <memset>
    if (ip.version() == 4) {
   d7724:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7726:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d772a:	2b04      	cmp	r3, #4
   d772c:	d10c      	bne.n	d7748 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d772e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7730:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7732:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7736:	f7fe fea7 	bl	d6488 <inet_htons>
   d773a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d773e:	6860      	ldr	r0, [r4, #4]
   d7740:	f7fe fe9a 	bl	d6478 <inet_htonl>
   d7744:	9004      	str	r0, [sp, #16]
   d7746:	e013      	b.n	d7770 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7748:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d774a:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d774c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7750:	f7fe fe9a 	bl	d6488 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7754:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7756:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d775a:	1d23      	adds	r3, r4, #4
   d775c:	f104 0714 	add.w	r7, r4, #20
   d7760:	6818      	ldr	r0, [r3, #0]
   d7762:	6859      	ldr	r1, [r3, #4]
   d7764:	4632      	mov	r2, r6
   d7766:	c203      	stmia	r2!, {r0, r1}
   d7768:	3308      	adds	r3, #8
   d776a:	42bb      	cmp	r3, r7
   d776c:	4616      	mov	r6, r2
   d776e:	d1f7      	bne.n	d7760 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7770:	696b      	ldr	r3, [r5, #20]
   d7772:	221c      	movs	r2, #28
   d7774:	a903      	add	r1, sp, #12
   d7776:	6818      	ldr	r0, [r3, #0]
   d7778:	f7fe ff36 	bl	d65e8 <sock_connect>
   d777c:	2800      	cmp	r0, #0
   d777e:	d1c5      	bne.n	d770c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7780:	3404      	adds	r4, #4
   d7782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7784:	696d      	ldr	r5, [r5, #20]
   d7786:	358c      	adds	r5, #140	; 0x8c
   d7788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d778a:	6823      	ldr	r3, [r4, #0]
   d778c:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d778e:	2401      	movs	r4, #1
}
   d7790:	4620      	mov	r0, r4
   d7792:	b00a      	add	sp, #40	; 0x28
   d7794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7798 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7798:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d779a:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d779c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d779e:	6818      	ldr	r0, [r3, #0]
   d77a0:	2800      	cmp	r0, #0
   d77a2:	db01      	blt.n	d77a8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d77a4:	f7fe ff18 	bl	d65d8 <sock_close>
   d77a8:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d77aa:	f04f 32ff 	mov.w	r2, #4294967295
   d77ae:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d77b0:	6960      	ldr	r0, [r4, #20]
   d77b2:	2211      	movs	r2, #17
   d77b4:	2100      	movs	r1, #0
   d77b6:	308c      	adds	r0, #140	; 0x8c
   d77b8:	f002 fcd5 	bl	da166 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d77bc:	4620      	mov	r0, r4
}
   d77be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d77c2:	f7ff bf67 	b.w	d7694 <_ZN9TCPClient12flush_bufferEv>
	...

000d77c8 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d77c8:	b530      	push	{r4, r5, lr}
   d77ca:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d77cc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d77d0:	b08b      	sub	sp, #44	; 0x2c
   d77d2:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d77d4:	b11b      	cbz	r3, d77de <_ZN9TCPClient9availableEv+0x16>
   d77d6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d77da:	429a      	cmp	r2, r3
   d77dc:	d040      	beq.n	d7860 <_ZN9TCPClient9availableEv+0x98>
   d77de:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d77e0:	6818      	ldr	r0, [r3, #0]
   d77e2:	2800      	cmp	r0, #0
   d77e4:	db3f      	blt.n	d7866 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d77e6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d77ea:	2d7f      	cmp	r5, #127	; 0x7f
   d77ec:	d83b      	bhi.n	d7866 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d77ee:	1d19      	adds	r1, r3, #4
   d77f0:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d77f4:	2308      	movs	r3, #8
   d77f6:	4429      	add	r1, r5
   d77f8:	f7fe fefe 	bl	d65f8 <sock_recv>
            if (ret > 0) {
   d77fc:	2800      	cmp	r0, #0
   d77fe:	dd0c      	ble.n	d781a <_ZN9TCPClient9availableEv+0x52>
   d7800:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7802:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7806:	b90a      	cbnz	r2, d780c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7808:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d780c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d780e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7812:	4418      	add	r0, r3
   d7814:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7818:	e025      	b.n	d7866 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d781a:	f7fe ffe9 	bl	d67f0 <__errno>
   d781e:	6803      	ldr	r3, [r0, #0]
   d7820:	2b0b      	cmp	r3, #11
   d7822:	d020      	beq.n	d7866 <_ZN9TCPClient9availableEv+0x9e>
   d7824:	f7fe ffe4 	bl	d67f0 <__errno>
   d7828:	6803      	ldr	r3, [r0, #0]
   d782a:	2b0b      	cmp	r3, #11
   d782c:	d01b      	beq.n	d7866 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d782e:	2320      	movs	r3, #32
   d7830:	2500      	movs	r5, #0
   d7832:	9302      	str	r3, [sp, #8]
   d7834:	9503      	str	r5, [sp, #12]
   d7836:	f7fe ffdb 	bl	d67f0 <__errno>
   d783a:	6803      	ldr	r3, [r0, #0]
   d783c:	9301      	str	r3, [sp, #4]
   d783e:	4b0e      	ldr	r3, [pc, #56]	; (d7878 <_ZN9TCPClient9availableEv+0xb0>)
   d7840:	9300      	str	r3, [sp, #0]
   d7842:	aa02      	add	r2, sp, #8
   d7844:	462b      	mov	r3, r5
   d7846:	490d      	ldr	r1, [pc, #52]	; (d787c <_ZN9TCPClient9availableEv+0xb4>)
   d7848:	2032      	movs	r0, #50	; 0x32
   d784a:	f7fe ff2d 	bl	d66a8 <log_message>
                    sock_close(d_->sock);
   d784e:	6963      	ldr	r3, [r4, #20]
   d7850:	6818      	ldr	r0, [r3, #0]
   d7852:	f7fe fec1 	bl	d65d8 <sock_close>
   d7856:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7858:	f04f 32ff 	mov.w	r2, #4294967295
   d785c:	601a      	str	r2, [r3, #0]
   d785e:	e002      	b.n	d7866 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7860:	f7ff ff18 	bl	d7694 <_ZN9TCPClient12flush_bufferEv>
   d7864:	e7bb      	b.n	d77de <_ZN9TCPClient9availableEv+0x16>
   d7866:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7868:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d786c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7870:	1a18      	subs	r0, r3, r0
}
   d7872:	b00b      	add	sp, #44	; 0x2c
   d7874:	bd30      	pop	{r4, r5, pc}
   d7876:	bf00      	nop
   d7878:	000dadd3 	.word	0x000dadd3
   d787c:	000dadcc 	.word	0x000dadcc

000d7880 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7880:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7882:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7884:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d7886:	6001      	str	r1, [r0, #0]
   d7888:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d788c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7890:	3088      	adds	r0, #136	; 0x88
   d7892:	f7ff faef 	bl	d6e74 <_ZN9IPAddressC1Ev>
}
   d7896:	4620      	mov	r0, r4
   d7898:	bd10      	pop	{r4, pc}
	...

000d789c <_ZN9TCPClientC1Ei>:
   d789c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d78a0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d78a2:	2300      	movs	r3, #0
   d78a4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d78a6:	4a14      	ldr	r2, [pc, #80]	; (d78f8 <_ZN9TCPClientC1Ei+0x5c>)
   d78a8:	6043      	str	r3, [r0, #4]
   d78aa:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d78ac:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d78ae:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d78b0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78b2:	20a0      	movs	r0, #160	; 0xa0
   d78b4:	460e      	mov	r6, r1
   d78b6:	f7fc fbf0 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d78ba:	4605      	mov	r5, r0
   d78bc:	b110      	cbz	r0, d78c4 <_ZN9TCPClientC1Ei+0x28>
   d78be:	4631      	mov	r1, r6
   d78c0:	f7ff ffde 	bl	d7880 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78c4:	2014      	movs	r0, #20
   d78c6:	f7fc fbe8 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d78ca:	4603      	mov	r3, r0
   d78cc:	b128      	cbz	r0, d78da <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d78ce:	2201      	movs	r2, #1
   d78d0:	6042      	str	r2, [r0, #4]
   d78d2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d78d4:	4a09      	ldr	r2, [pc, #36]	; (d78fc <_ZN9TCPClientC1Ei+0x60>)
   d78d6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d78d8:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d78da:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d78dc:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d78de:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d78e0:	b128      	cbz	r0, d78ee <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d78e2:	6843      	ldr	r3, [r0, #4]
   d78e4:	3b01      	subs	r3, #1
   d78e6:	6043      	str	r3, [r0, #4]
   d78e8:	b90b      	cbnz	r3, d78ee <_ZN9TCPClientC1Ei+0x52>
   d78ea:	f7ff fddf 	bl	d74ac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d78ee:	4620      	mov	r0, r4
   d78f0:	f7ff fed0 	bl	d7694 <_ZN9TCPClient12flush_bufferEv>
}
   d78f4:	4620      	mov	r0, r4
   d78f6:	bd70      	pop	{r4, r5, r6, pc}
   d78f8:	000dad88 	.word	0x000dad88
   d78fc:	000dad6c 	.word	0x000dad6c

000d7900 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7900:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7902:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7906:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7908:	f7ff ffc8 	bl	d789c <_ZN9TCPClientC1Ei>
}
   d790c:	4620      	mov	r0, r4
   d790e:	bd10      	pop	{r4, pc}

000d7910 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7910:	b510      	push	{r4, lr}
   d7912:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7914:	6800      	ldr	r0, [r0, #0]
   d7916:	2800      	cmp	r0, #0
   d7918:	db01      	blt.n	d791e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d791a:	f7fe fe5d 	bl	d65d8 <sock_close>
    }
}
   d791e:	4620      	mov	r0, r4
   d7920:	bd10      	pop	{r4, pc}

000d7922 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7922:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7924:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d7926:	4620      	mov	r0, r4
   d7928:	f7ff fff2 	bl	d7910 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d792c:	b124      	cbz	r4, d7938 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d792e:	4620      	mov	r0, r4
   d7930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7934:	f7fc bbb3 	b.w	d409e <_ZdlPv>
   d7938:	bd10      	pop	{r4, pc}

000d793a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d793a:	2200      	movs	r2, #0
   d793c:	4611      	mov	r1, r2
   d793e:	6840      	ldr	r0, [r0, #4]
   d7940:	f7fe bef6 	b.w	d6730 <network_ready>

000d7944 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7944:	2200      	movs	r2, #0
   d7946:	4611      	mov	r1, r2
   d7948:	6840      	ldr	r0, [r0, #4]
   d794a:	f7fe bf11 	b.w	d6770 <network_listening>

000d794e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d794e:	2200      	movs	r2, #0
   d7950:	4611      	mov	r1, r2
   d7952:	6840      	ldr	r0, [r0, #4]
   d7954:	f7fe bf1c 	b.w	d6790 <network_get_listen_timeout>

000d7958 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7958:	2200      	movs	r2, #0
   d795a:	6840      	ldr	r0, [r0, #4]
   d795c:	f7fe bf10 	b.w	d6780 <network_set_listen_timeout>

000d7960 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7960:	2200      	movs	r2, #0
   d7962:	f081 0101 	eor.w	r1, r1, #1
   d7966:	6840      	ldr	r0, [r0, #4]
   d7968:	f7fe befa 	b.w	d6760 <network_listen>

000d796c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d796c:	2300      	movs	r3, #0
   d796e:	461a      	mov	r2, r3
   d7970:	4619      	mov	r1, r3
   d7972:	6840      	ldr	r0, [r0, #4]
   d7974:	f7fe beec 	b.w	d6750 <network_off>

000d7978 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7978:	2300      	movs	r3, #0
   d797a:	461a      	mov	r2, r3
   d797c:	4619      	mov	r1, r3
   d797e:	6840      	ldr	r0, [r0, #4]
   d7980:	f7fe bede 	b.w	d6740 <network_on>

000d7984 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7984:	2200      	movs	r2, #0
   d7986:	4611      	mov	r1, r2
   d7988:	6840      	ldr	r0, [r0, #4]
   d798a:	f7fe bec1 	b.w	d6710 <network_connecting>

000d798e <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d798e:	2200      	movs	r2, #0
   d7990:	2102      	movs	r1, #2
   d7992:	6840      	ldr	r0, [r0, #4]
   d7994:	f7fe bec4 	b.w	d6720 <network_disconnect>

000d7998 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7998:	2300      	movs	r3, #0
   d799a:	461a      	mov	r2, r3
   d799c:	6840      	ldr	r0, [r0, #4]
   d799e:	f7fe beaf 	b.w	d6700 <network_connect>
	...

000d79a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d79a4:	4b02      	ldr	r3, [pc, #8]	; (d79b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d79a6:	2204      	movs	r2, #4
   d79a8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d79aa:	4a02      	ldr	r2, [pc, #8]	; (d79b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d79ac:	601a      	str	r2, [r3, #0]
   d79ae:	4770      	bx	lr
   d79b0:	2003e720 	.word	0x2003e720
   d79b4:	000dadec 	.word	0x000dadec

000d79b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d79b8:	2300      	movs	r3, #0
   d79ba:	461a      	mov	r2, r3
   d79bc:	6840      	ldr	r0, [r0, #4]
   d79be:	f7fe be9f 	b.w	d6700 <network_connect>

000d79c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d79c2:	2200      	movs	r2, #0
   d79c4:	2102      	movs	r1, #2
   d79c6:	6840      	ldr	r0, [r0, #4]
   d79c8:	f7fe beaa 	b.w	d6720 <network_disconnect>

000d79cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d79cc:	2200      	movs	r2, #0
   d79ce:	4611      	mov	r1, r2
   d79d0:	6840      	ldr	r0, [r0, #4]
   d79d2:	f7fe be9d 	b.w	d6710 <network_connecting>

000d79d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d79d6:	2200      	movs	r2, #0
   d79d8:	4611      	mov	r1, r2
   d79da:	6840      	ldr	r0, [r0, #4]
   d79dc:	f7fe bea8 	b.w	d6730 <network_ready>

000d79e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d79e0:	2300      	movs	r3, #0
   d79e2:	461a      	mov	r2, r3
   d79e4:	4619      	mov	r1, r3
   d79e6:	6840      	ldr	r0, [r0, #4]
   d79e8:	f7fe beaa 	b.w	d6740 <network_on>

000d79ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d79ec:	2300      	movs	r3, #0
   d79ee:	461a      	mov	r2, r3
   d79f0:	4619      	mov	r1, r3
   d79f2:	6840      	ldr	r0, [r0, #4]
   d79f4:	f7fe beac 	b.w	d6750 <network_off>

000d79f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d79f8:	2200      	movs	r2, #0
   d79fa:	f081 0101 	eor.w	r1, r1, #1
   d79fe:	6840      	ldr	r0, [r0, #4]
   d7a00:	f7fe beae 	b.w	d6760 <network_listen>

000d7a04 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7a04:	2200      	movs	r2, #0
   d7a06:	6840      	ldr	r0, [r0, #4]
   d7a08:	f7fe beba 	b.w	d6780 <network_set_listen_timeout>

000d7a0c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7a0c:	2200      	movs	r2, #0
   d7a0e:	4611      	mov	r1, r2
   d7a10:	6840      	ldr	r0, [r0, #4]
   d7a12:	f7fe bebd 	b.w	d6790 <network_get_listen_timeout>

000d7a16 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7a16:	2200      	movs	r2, #0
   d7a18:	4611      	mov	r1, r2
   d7a1a:	6840      	ldr	r0, [r0, #4]
   d7a1c:	f7fe bea8 	b.w	d6770 <network_listening>

000d7a20 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7a24:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7a26:	b095      	sub	sp, #84	; 0x54
   d7a28:	4616      	mov	r6, r2
   d7a2a:	460d      	mov	r5, r1
   d7a2c:	4607      	mov	r7, r0
    IPAddress addr;
   d7a2e:	f7ff fa21 	bl	d6e74 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7a32:	4621      	mov	r1, r4
   d7a34:	2220      	movs	r2, #32
   d7a36:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7a38:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7a3a:	f002 fb94 	bl	da166 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7a3e:	2340      	movs	r3, #64	; 0x40
   d7a40:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7a42:	4621      	mov	r1, r4
   d7a44:	466b      	mov	r3, sp
   d7a46:	aa0c      	add	r2, sp, #48	; 0x30
   d7a48:	4630      	mov	r0, r6
   d7a4a:	f7fe fc15 	bl	d6278 <netdb_getaddrinfo>
    if (!r) {
   d7a4e:	4604      	mov	r4, r0
   d7a50:	2800      	cmp	r0, #0
   d7a52:	d144      	bne.n	d7ade <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a54:	4602      	mov	r2, r0
   d7a56:	2101      	movs	r1, #1
   d7a58:	6868      	ldr	r0, [r5, #4]
   d7a5a:	f7fe fe69 	bl	d6730 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a5e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a60:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a62:	4622      	mov	r2, r4
   d7a64:	6868      	ldr	r0, [r5, #4]
   d7a66:	f7fe fe63 	bl	d6730 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a6a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a6c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7a6e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a70:	2e00      	cmp	r6, #0
   d7a72:	d034      	beq.n	d7ade <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7a74:	2900      	cmp	r1, #0
   d7a76:	d132      	bne.n	d7ade <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7a78:	6873      	ldr	r3, [r6, #4]
   d7a7a:	2b02      	cmp	r3, #2
   d7a7c:	d002      	beq.n	d7a84 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7a7e:	2b0a      	cmp	r3, #10
   d7a80:	d009      	beq.n	d7a96 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7a82:	e02a      	b.n	d7ada <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7a84:	f1b8 0f00 	cmp.w	r8, #0
   d7a88:	d027      	beq.n	d7ada <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7a8a:	6971      	ldr	r1, [r6, #20]
   d7a8c:	4638      	mov	r0, r7
   d7a8e:	3104      	adds	r1, #4
   d7a90:	f7ff fa33 	bl	d6efa <_ZN9IPAddressaSEPKh>
   d7a94:	e020      	b.n	d7ad8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7a96:	f1b9 0f00 	cmp.w	r9, #0
   d7a9a:	d01e      	beq.n	d7ada <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7a9c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7a9e:	2211      	movs	r2, #17
   d7aa0:	a801      	add	r0, sp, #4
   d7aa2:	f002 fb60 	bl	da166 <memset>
                    a.v = 6;
   d7aa6:	2306      	movs	r3, #6
   d7aa8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7aac:	ad01      	add	r5, sp, #4
   d7aae:	f104 0308 	add.w	r3, r4, #8
   d7ab2:	3418      	adds	r4, #24
   d7ab4:	6818      	ldr	r0, [r3, #0]
   d7ab6:	6859      	ldr	r1, [r3, #4]
   d7ab8:	462a      	mov	r2, r5
   d7aba:	c203      	stmia	r2!, {r0, r1}
   d7abc:	3308      	adds	r3, #8
   d7abe:	42a3      	cmp	r3, r4
   d7ac0:	4615      	mov	r5, r2
   d7ac2:	d1f7      	bne.n	d7ab4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7ac4:	a901      	add	r1, sp, #4
   d7ac6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7ac8:	ad07      	add	r5, sp, #28
   d7aca:	f7ff f9e1 	bl	d6e90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ad0:	1d3c      	adds	r4, r7, #4
   d7ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ad4:	682b      	ldr	r3, [r5, #0]
   d7ad6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7ad8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7ada:	69f6      	ldr	r6, [r6, #28]
   d7adc:	e7c8      	b.n	d7a70 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7ade:	9800      	ldr	r0, [sp, #0]
   d7ae0:	f7fe fbc2 	bl	d6268 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7ae4:	4638      	mov	r0, r7
   d7ae6:	b015      	add	sp, #84	; 0x54
   d7ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7aec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7aec:	4b02      	ldr	r3, [pc, #8]	; (d7af8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7aee:	4a03      	ldr	r2, [pc, #12]	; (d7afc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7af0:	601a      	str	r2, [r3, #0]
   d7af2:	2200      	movs	r2, #0
   d7af4:	605a      	str	r2, [r3, #4]
   d7af6:	4770      	bx	lr
   d7af8:	2003e728 	.word	0x2003e728
   d7afc:	000dae20 	.word	0x000dae20

000d7b00 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7b00:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7b02:	4e18      	ldr	r6, [pc, #96]	; (d7b64 <pinAvailable+0x64>)
   d7b04:	6831      	ldr	r1, [r6, #0]
   d7b06:	f011 0501 	ands.w	r5, r1, #1
   d7b0a:	4604      	mov	r4, r0
   d7b0c:	d10a      	bne.n	d7b24 <pinAvailable+0x24>
   d7b0e:	4630      	mov	r0, r6
   d7b10:	f7fc fad4 	bl	d40bc <__cxa_guard_acquire>
   d7b14:	b130      	cbz	r0, d7b24 <pinAvailable+0x24>
   d7b16:	4629      	mov	r1, r5
   d7b18:	4813      	ldr	r0, [pc, #76]	; (d7b68 <pinAvailable+0x68>)
   d7b1a:	f7fe feb5 	bl	d6888 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7b1e:	4630      	mov	r0, r6
   d7b20:	f7fc fad1 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d7b24:	4810      	ldr	r0, [pc, #64]	; (d7b68 <pinAvailable+0x68>)
   d7b26:	f7fe ffe4 	bl	d6af2 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7b2a:	b128      	cbz	r0, d7b38 <pinAvailable+0x38>
   d7b2c:	f1a4 030b 	sub.w	r3, r4, #11
   d7b30:	2b02      	cmp	r3, #2
   d7b32:	d801      	bhi.n	d7b38 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d7b34:	2000      	movs	r0, #0
   d7b36:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7b38:	f000 f8aa 	bl	d7c90 <_Z19__fetch_global_Wirev>
   d7b3c:	f7ff fb75 	bl	d722a <_ZN7TwoWire9isEnabledEv>
   d7b40:	b108      	cbz	r0, d7b46 <pinAvailable+0x46>
   d7b42:	2c01      	cmp	r4, #1
   d7b44:	d9f6      	bls.n	d7b34 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7b46:	f7ff fac7 	bl	d70d8 <_Z22__fetch_global_Serial1v>
   d7b4a:	f7ff fac1 	bl	d70d0 <_ZN11USARTSerial9isEnabledEv>
   d7b4e:	b118      	cbz	r0, d7b58 <pinAvailable+0x58>
   d7b50:	f1a4 0309 	sub.w	r3, r4, #9
   d7b54:	2b01      	cmp	r3, #1
   d7b56:	d9ed      	bls.n	d7b34 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7b58:	2c23      	cmp	r4, #35	; 0x23
   d7b5a:	bf8c      	ite	hi
   d7b5c:	2000      	movhi	r0, #0
   d7b5e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7b60:	bd70      	pop	{r4, r5, r6, pc}
   d7b62:	bf00      	nop
   d7b64:	2003dd48 	.word	0x2003dd48
   d7b68:	2003dd4c 	.word	0x2003dd4c

000d7b6c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b6c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7b6e:	b538      	push	{r3, r4, r5, lr}
   d7b70:	4604      	mov	r4, r0
   d7b72:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b74:	d80a      	bhi.n	d7b8c <pinMode+0x20>
   d7b76:	29ff      	cmp	r1, #255	; 0xff
   d7b78:	d008      	beq.n	d7b8c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7b7a:	f7ff ffc1 	bl	d7b00 <pinAvailable>
   d7b7e:	b128      	cbz	r0, d7b8c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7b80:	4629      	mov	r1, r5
   d7b82:	4620      	mov	r0, r4
}
   d7b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7b88:	f7fe bb8e 	b.w	d62a8 <HAL_Pin_Mode>
   d7b8c:	bd38      	pop	{r3, r4, r5, pc}

000d7b8e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7b8e:	b538      	push	{r3, r4, r5, lr}
   d7b90:	4604      	mov	r4, r0
   d7b92:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7b94:	f7fe fb90 	bl	d62b8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7b98:	28ff      	cmp	r0, #255	; 0xff
   d7b9a:	d010      	beq.n	d7bbe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7b9c:	2806      	cmp	r0, #6
   d7b9e:	d804      	bhi.n	d7baa <digitalWrite+0x1c>
   d7ba0:	234d      	movs	r3, #77	; 0x4d
   d7ba2:	fa23 f000 	lsr.w	r0, r3, r0
   d7ba6:	07c3      	lsls	r3, r0, #31
   d7ba8:	d409      	bmi.n	d7bbe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7baa:	4620      	mov	r0, r4
   d7bac:	f7ff ffa8 	bl	d7b00 <pinAvailable>
   d7bb0:	b128      	cbz	r0, d7bbe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7bb2:	4629      	mov	r1, r5
   d7bb4:	4620      	mov	r0, r4
}
   d7bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7bba:	f7fe bb85 	b.w	d62c8 <HAL_GPIO_Write>
   d7bbe:	bd38      	pop	{r3, r4, r5, pc}

000d7bc0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7bc0:	b510      	push	{r4, lr}
   d7bc2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7bc4:	f7fe fb78 	bl	d62b8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7bc8:	3804      	subs	r0, #4
   d7bca:	b2c0      	uxtb	r0, r0
   d7bcc:	2801      	cmp	r0, #1
   d7bce:	d908      	bls.n	d7be2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7bd0:	4620      	mov	r0, r4
   d7bd2:	f7ff ff95 	bl	d7b00 <pinAvailable>
   d7bd6:	b120      	cbz	r0, d7be2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7bd8:	4620      	mov	r0, r4
}
   d7bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7bde:	f7fe bb7b 	b.w	d62d8 <HAL_GPIO_Read>
}
   d7be2:	2000      	movs	r0, #0
   d7be4:	bd10      	pop	{r4, pc}

000d7be6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7be6:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7be8:	b510      	push	{r4, lr}
   d7bea:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7bec:	bf9c      	itt	ls
   d7bee:	340e      	addls	r4, #14
   d7bf0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7bf2:	4620      	mov	r0, r4
   d7bf4:	f7ff ff84 	bl	d7b00 <pinAvailable>
   d7bf8:	b150      	cbz	r0, d7c10 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7bfa:	2103      	movs	r1, #3
   d7bfc:	4620      	mov	r0, r4
   d7bfe:	f7fe fb4b 	bl	d6298 <HAL_Validate_Pin_Function>
   d7c02:	2803      	cmp	r0, #3
   d7c04:	d104      	bne.n	d7c10 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7c06:	4620      	mov	r0, r4
}
   d7c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7c0c:	f7fe bb6c 	b.w	d62e8 <HAL_ADC_Read>
}
   d7c10:	2000      	movs	r0, #0
   d7c12:	bd10      	pop	{r4, pc}

000d7c14 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d7c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7c18:	4690      	mov	r8, r2
   d7c1a:	461e      	mov	r6, r3
   d7c1c:	2407      	movs	r4, #7
   d7c1e:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d7c20:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d7c22:	f1b8 0f00 	cmp.w	r8, #0
   d7c26:	d104      	bne.n	d7c32 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d7c28:	f1c4 0107 	rsb	r1, r4, #7
   d7c2c:	fa46 f101 	asr.w	r1, r6, r1
   d7c30:	e001      	b.n	d7c36 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d7c32:	fa46 f104 	asr.w	r1, r6, r4
   d7c36:	f001 0101 	and.w	r1, r1, #1
   d7c3a:	4638      	mov	r0, r7
   d7c3c:	f7ff ffa7 	bl	d7b8e <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d7c40:	2101      	movs	r1, #1
   d7c42:	4628      	mov	r0, r5
   d7c44:	f7ff ffa3 	bl	d7b8e <digitalWrite>
    digitalWrite(clockPin, LOW);
   d7c48:	2100      	movs	r1, #0
   d7c4a:	4628      	mov	r0, r5
   d7c4c:	f7ff ff9f 	bl	d7b8e <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d7c50:	f114 34ff 	adds.w	r4, r4, #4294967295
   d7c54:	d2e5      	bcs.n	d7c22 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d7c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d7c5c <_Z17acquireWireBufferv>:
   d7c5c:	b570      	push	{r4, r5, r6, lr}
   d7c5e:	4604      	mov	r4, r0
   d7c60:	2514      	movs	r5, #20
   d7c62:	462a      	mov	r2, r5
   d7c64:	4e09      	ldr	r6, [pc, #36]	; (d7c8c <_Z17acquireWireBufferv+0x30>)
   d7c66:	2100      	movs	r1, #0
   d7c68:	f002 fa7d 	bl	da166 <memset>
   d7c6c:	8025      	strh	r5, [r4, #0]
   d7c6e:	2520      	movs	r5, #32
   d7c70:	4631      	mov	r1, r6
   d7c72:	60a5      	str	r5, [r4, #8]
   d7c74:	6125      	str	r5, [r4, #16]
   d7c76:	4628      	mov	r0, r5
   d7c78:	f000 f840 	bl	d7cfc <_ZnajRKSt9nothrow_t>
   d7c7c:	4631      	mov	r1, r6
   d7c7e:	6060      	str	r0, [r4, #4]
   d7c80:	4628      	mov	r0, r5
   d7c82:	f000 f83b 	bl	d7cfc <_ZnajRKSt9nothrow_t>
   d7c86:	60e0      	str	r0, [r4, #12]
   d7c88:	4620      	mov	r0, r4
   d7c8a:	bd70      	pop	{r4, r5, r6, pc}
   d7c8c:	000dae4c 	.word	0x000dae4c

000d7c90 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7c90:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c92:	4d0e      	ldr	r5, [pc, #56]	; (d7ccc <_Z19__fetch_global_Wirev+0x3c>)
   d7c94:	6829      	ldr	r1, [r5, #0]
   d7c96:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7c9a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c9c:	d113      	bne.n	d7cc6 <_Z19__fetch_global_Wirev+0x36>
   d7c9e:	4628      	mov	r0, r5
   d7ca0:	f7fc fa0c 	bl	d40bc <__cxa_guard_acquire>
   d7ca4:	b178      	cbz	r0, d7cc6 <_Z19__fetch_global_Wirev+0x36>
   d7ca6:	a801      	add	r0, sp, #4
   d7ca8:	f7ff ffd8 	bl	d7c5c <_Z17acquireWireBufferv>
   d7cac:	aa01      	add	r2, sp, #4
   d7cae:	4621      	mov	r1, r4
   d7cb0:	4807      	ldr	r0, [pc, #28]	; (d7cd0 <_Z19__fetch_global_Wirev+0x40>)
   d7cb2:	f7ff fa63 	bl	d717c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7cb6:	4628      	mov	r0, r5
   d7cb8:	f7fc fa05 	bl	d40c6 <__cxa_guard_release>
   d7cbc:	4a05      	ldr	r2, [pc, #20]	; (d7cd4 <_Z19__fetch_global_Wirev+0x44>)
   d7cbe:	4906      	ldr	r1, [pc, #24]	; (d7cd8 <_Z19__fetch_global_Wirev+0x48>)
   d7cc0:	4803      	ldr	r0, [pc, #12]	; (d7cd0 <_Z19__fetch_global_Wirev+0x40>)
   d7cc2:	f000 f80b 	bl	d7cdc <__aeabi_atexit>
	return wire;
}
   d7cc6:	4802      	ldr	r0, [pc, #8]	; (d7cd0 <_Z19__fetch_global_Wirev+0x40>)
   d7cc8:	b007      	add	sp, #28
   d7cca:	bd30      	pop	{r4, r5, pc}
   d7ccc:	2003e734 	.word	0x2003e734
   d7cd0:	2003e738 	.word	0x2003e738
   d7cd4:	2003dd44 	.word	0x2003dd44
   d7cd8:	000d7125 	.word	0x000d7125

000d7cdc <__aeabi_atexit>:
   d7cdc:	460b      	mov	r3, r1
   d7cde:	4601      	mov	r1, r0
   d7ce0:	4618      	mov	r0, r3
   d7ce2:	f002 ba27 	b.w	da134 <__cxa_atexit>
	...

000d7ce8 <_ZSt15get_new_handlerv>:
   d7ce8:	4b02      	ldr	r3, [pc, #8]	; (d7cf4 <_ZSt15get_new_handlerv+0xc>)
   d7cea:	6818      	ldr	r0, [r3, #0]
   d7cec:	f3bf 8f5f 	dmb	sy
   d7cf0:	4770      	bx	lr
   d7cf2:	bf00      	nop
   d7cf4:	2003e74c 	.word	0x2003e74c

000d7cf8 <_ZdlPvj>:
   d7cf8:	f7fc b9d1 	b.w	d409e <_ZdlPv>

000d7cfc <_ZnajRKSt9nothrow_t>:
   d7cfc:	f000 b800 	b.w	d7d00 <_ZnwjRKSt9nothrow_t>

000d7d00 <_ZnwjRKSt9nothrow_t>:
   d7d00:	b510      	push	{r4, lr}
   d7d02:	2800      	cmp	r0, #0
   d7d04:	bf14      	ite	ne
   d7d06:	4604      	movne	r4, r0
   d7d08:	2401      	moveq	r4, #1
   d7d0a:	4620      	mov	r0, r4
   d7d0c:	f7fe fd58 	bl	d67c0 <malloc>
   d7d10:	b920      	cbnz	r0, d7d1c <_ZnwjRKSt9nothrow_t+0x1c>
   d7d12:	f7ff ffe9 	bl	d7ce8 <_ZSt15get_new_handlerv>
   d7d16:	b108      	cbz	r0, d7d1c <_ZnwjRKSt9nothrow_t+0x1c>
   d7d18:	4780      	blx	r0
   d7d1a:	e7f6      	b.n	d7d0a <_ZnwjRKSt9nothrow_t+0xa>
   d7d1c:	bd10      	pop	{r4, pc}
	...

000d7d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7d20:	4b18      	ldr	r3, [pc, #96]	; (d7d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7d22:	681a      	ldr	r2, [r3, #0]
   d7d24:	07d1      	lsls	r1, r2, #31
   d7d26:	bf5c      	itt	pl
   d7d28:	2201      	movpl	r2, #1
   d7d2a:	601a      	strpl	r2, [r3, #0]
   d7d2c:	4b16      	ldr	r3, [pc, #88]	; (d7d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7d2e:	681a      	ldr	r2, [r3, #0]
   d7d30:	07d2      	lsls	r2, r2, #31
   d7d32:	bf5c      	itt	pl
   d7d34:	2201      	movpl	r2, #1
   d7d36:	601a      	strpl	r2, [r3, #0]
   d7d38:	4b14      	ldr	r3, [pc, #80]	; (d7d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7d3a:	681a      	ldr	r2, [r3, #0]
   d7d3c:	07d0      	lsls	r0, r2, #31
   d7d3e:	bf5c      	itt	pl
   d7d40:	2201      	movpl	r2, #1
   d7d42:	601a      	strpl	r2, [r3, #0]
   d7d44:	4b12      	ldr	r3, [pc, #72]	; (d7d90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7d46:	681a      	ldr	r2, [r3, #0]
   d7d48:	07d1      	lsls	r1, r2, #31
   d7d4a:	bf5c      	itt	pl
   d7d4c:	2201      	movpl	r2, #1
   d7d4e:	601a      	strpl	r2, [r3, #0]
   d7d50:	4b10      	ldr	r3, [pc, #64]	; (d7d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7d52:	681a      	ldr	r2, [r3, #0]
   d7d54:	07d2      	lsls	r2, r2, #31
   d7d56:	bf5c      	itt	pl
   d7d58:	2201      	movpl	r2, #1
   d7d5a:	601a      	strpl	r2, [r3, #0]
   d7d5c:	4b0e      	ldr	r3, [pc, #56]	; (d7d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7d5e:	681a      	ldr	r2, [r3, #0]
   d7d60:	07d0      	lsls	r0, r2, #31
   d7d62:	bf5c      	itt	pl
   d7d64:	2201      	movpl	r2, #1
   d7d66:	601a      	strpl	r2, [r3, #0]
   d7d68:	4b0c      	ldr	r3, [pc, #48]	; (d7d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7d6a:	681a      	ldr	r2, [r3, #0]
   d7d6c:	07d1      	lsls	r1, r2, #31
   d7d6e:	bf5c      	itt	pl
   d7d70:	2201      	movpl	r2, #1
   d7d72:	601a      	strpl	r2, [r3, #0]
   d7d74:	4b0a      	ldr	r3, [pc, #40]	; (d7da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7d76:	681a      	ldr	r2, [r3, #0]
   d7d78:	07d2      	lsls	r2, r2, #31
   d7d7a:	bf5c      	itt	pl
   d7d7c:	2201      	movpl	r2, #1
   d7d7e:	601a      	strpl	r2, [r3, #0]
   d7d80:	4770      	bx	lr
   d7d82:	bf00      	nop
   d7d84:	2003e76c 	.word	0x2003e76c
   d7d88:	2003e768 	.word	0x2003e768
   d7d8c:	2003e764 	.word	0x2003e764
   d7d90:	2003e760 	.word	0x2003e760
   d7d94:	2003e75c 	.word	0x2003e75c
   d7d98:	2003e758 	.word	0x2003e758
   d7d9c:	2003e754 	.word	0x2003e754
   d7da0:	2003e750 	.word	0x2003e750

000d7da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7da4:	4b24      	ldr	r3, [pc, #144]	; (d7e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7da6:	681a      	ldr	r2, [r3, #0]
   d7da8:	07d0      	lsls	r0, r2, #31
   d7daa:	bf5c      	itt	pl
   d7dac:	2201      	movpl	r2, #1
   d7dae:	601a      	strpl	r2, [r3, #0]
   d7db0:	4b22      	ldr	r3, [pc, #136]	; (d7e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7db2:	681a      	ldr	r2, [r3, #0]
   d7db4:	07d1      	lsls	r1, r2, #31
   d7db6:	bf5c      	itt	pl
   d7db8:	2201      	movpl	r2, #1
   d7dba:	601a      	strpl	r2, [r3, #0]
   d7dbc:	4b20      	ldr	r3, [pc, #128]	; (d7e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7dbe:	681a      	ldr	r2, [r3, #0]
   d7dc0:	07d2      	lsls	r2, r2, #31
   d7dc2:	bf5c      	itt	pl
   d7dc4:	2201      	movpl	r2, #1
   d7dc6:	601a      	strpl	r2, [r3, #0]
   d7dc8:	4b1e      	ldr	r3, [pc, #120]	; (d7e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7dca:	681a      	ldr	r2, [r3, #0]
   d7dcc:	07d0      	lsls	r0, r2, #31
   d7dce:	bf5c      	itt	pl
   d7dd0:	2201      	movpl	r2, #1
   d7dd2:	601a      	strpl	r2, [r3, #0]
   d7dd4:	4b1c      	ldr	r3, [pc, #112]	; (d7e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7dd6:	681a      	ldr	r2, [r3, #0]
   d7dd8:	07d1      	lsls	r1, r2, #31
   d7dda:	bf5c      	itt	pl
   d7ddc:	2201      	movpl	r2, #1
   d7dde:	601a      	strpl	r2, [r3, #0]
   d7de0:	4b1a      	ldr	r3, [pc, #104]	; (d7e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7de2:	681a      	ldr	r2, [r3, #0]
   d7de4:	07d2      	lsls	r2, r2, #31
   d7de6:	bf5c      	itt	pl
   d7de8:	2201      	movpl	r2, #1
   d7dea:	601a      	strpl	r2, [r3, #0]
   d7dec:	4b18      	ldr	r3, [pc, #96]	; (d7e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7dee:	681a      	ldr	r2, [r3, #0]
   d7df0:	07d0      	lsls	r0, r2, #31
   d7df2:	bf5c      	itt	pl
   d7df4:	2201      	movpl	r2, #1
   d7df6:	601a      	strpl	r2, [r3, #0]
   d7df8:	4b16      	ldr	r3, [pc, #88]	; (d7e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7dfa:	681a      	ldr	r2, [r3, #0]
   d7dfc:	07d1      	lsls	r1, r2, #31
   d7dfe:	bf5c      	itt	pl
   d7e00:	2201      	movpl	r2, #1
   d7e02:	601a      	strpl	r2, [r3, #0]
   d7e04:	4b14      	ldr	r3, [pc, #80]	; (d7e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7e06:	681a      	ldr	r2, [r3, #0]
   d7e08:	07d2      	lsls	r2, r2, #31
   d7e0a:	bf5c      	itt	pl
   d7e0c:	2201      	movpl	r2, #1
   d7e0e:	601a      	strpl	r2, [r3, #0]
   d7e10:	4b12      	ldr	r3, [pc, #72]	; (d7e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7e12:	681a      	ldr	r2, [r3, #0]
   d7e14:	07d0      	lsls	r0, r2, #31
   d7e16:	bf5c      	itt	pl
   d7e18:	2201      	movpl	r2, #1
   d7e1a:	601a      	strpl	r2, [r3, #0]
   d7e1c:	4b10      	ldr	r3, [pc, #64]	; (d7e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7e1e:	681a      	ldr	r2, [r3, #0]
   d7e20:	07d1      	lsls	r1, r2, #31
   d7e22:	bf5c      	itt	pl
   d7e24:	2201      	movpl	r2, #1
   d7e26:	601a      	strpl	r2, [r3, #0]
   d7e28:	4b0e      	ldr	r3, [pc, #56]	; (d7e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7e2a:	681a      	ldr	r2, [r3, #0]
   d7e2c:	07d2      	lsls	r2, r2, #31
   d7e2e:	bf5c      	itt	pl
   d7e30:	2201      	movpl	r2, #1
   d7e32:	601a      	strpl	r2, [r3, #0]
   d7e34:	4770      	bx	lr
   d7e36:	bf00      	nop
   d7e38:	2003e79c 	.word	0x2003e79c
   d7e3c:	2003e798 	.word	0x2003e798
   d7e40:	2003e794 	.word	0x2003e794
   d7e44:	2003e790 	.word	0x2003e790
   d7e48:	2003e78c 	.word	0x2003e78c
   d7e4c:	2003e788 	.word	0x2003e788
   d7e50:	2003e784 	.word	0x2003e784
   d7e54:	2003e780 	.word	0x2003e780
   d7e58:	2003e77c 	.word	0x2003e77c
   d7e5c:	2003e778 	.word	0x2003e778
   d7e60:	2003e774 	.word	0x2003e774
   d7e64:	2003e770 	.word	0x2003e770

000d7e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7e68:	4b24      	ldr	r3, [pc, #144]	; (d7efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7e6a:	681a      	ldr	r2, [r3, #0]
   d7e6c:	07d0      	lsls	r0, r2, #31
   d7e6e:	bf5c      	itt	pl
   d7e70:	2201      	movpl	r2, #1
   d7e72:	601a      	strpl	r2, [r3, #0]
   d7e74:	4b22      	ldr	r3, [pc, #136]	; (d7f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7e76:	681a      	ldr	r2, [r3, #0]
   d7e78:	07d1      	lsls	r1, r2, #31
   d7e7a:	bf5c      	itt	pl
   d7e7c:	2201      	movpl	r2, #1
   d7e7e:	601a      	strpl	r2, [r3, #0]
   d7e80:	4b20      	ldr	r3, [pc, #128]	; (d7f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7e82:	681a      	ldr	r2, [r3, #0]
   d7e84:	07d2      	lsls	r2, r2, #31
   d7e86:	bf5c      	itt	pl
   d7e88:	2201      	movpl	r2, #1
   d7e8a:	601a      	strpl	r2, [r3, #0]
   d7e8c:	4b1e      	ldr	r3, [pc, #120]	; (d7f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7e8e:	681a      	ldr	r2, [r3, #0]
   d7e90:	07d0      	lsls	r0, r2, #31
   d7e92:	bf5c      	itt	pl
   d7e94:	2201      	movpl	r2, #1
   d7e96:	601a      	strpl	r2, [r3, #0]
   d7e98:	4b1c      	ldr	r3, [pc, #112]	; (d7f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7e9a:	681a      	ldr	r2, [r3, #0]
   d7e9c:	07d1      	lsls	r1, r2, #31
   d7e9e:	bf5c      	itt	pl
   d7ea0:	2201      	movpl	r2, #1
   d7ea2:	601a      	strpl	r2, [r3, #0]
   d7ea4:	4b1a      	ldr	r3, [pc, #104]	; (d7f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7ea6:	681a      	ldr	r2, [r3, #0]
   d7ea8:	07d2      	lsls	r2, r2, #31
   d7eaa:	bf5c      	itt	pl
   d7eac:	2201      	movpl	r2, #1
   d7eae:	601a      	strpl	r2, [r3, #0]
   d7eb0:	4b18      	ldr	r3, [pc, #96]	; (d7f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7eb2:	681a      	ldr	r2, [r3, #0]
   d7eb4:	07d0      	lsls	r0, r2, #31
   d7eb6:	bf5c      	itt	pl
   d7eb8:	2201      	movpl	r2, #1
   d7eba:	601a      	strpl	r2, [r3, #0]
   d7ebc:	4b16      	ldr	r3, [pc, #88]	; (d7f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7ebe:	681a      	ldr	r2, [r3, #0]
   d7ec0:	07d1      	lsls	r1, r2, #31
   d7ec2:	bf5c      	itt	pl
   d7ec4:	2201      	movpl	r2, #1
   d7ec6:	601a      	strpl	r2, [r3, #0]
   d7ec8:	4b14      	ldr	r3, [pc, #80]	; (d7f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7eca:	681a      	ldr	r2, [r3, #0]
   d7ecc:	07d2      	lsls	r2, r2, #31
   d7ece:	bf5c      	itt	pl
   d7ed0:	2201      	movpl	r2, #1
   d7ed2:	601a      	strpl	r2, [r3, #0]
   d7ed4:	4b12      	ldr	r3, [pc, #72]	; (d7f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7ed6:	681a      	ldr	r2, [r3, #0]
   d7ed8:	07d0      	lsls	r0, r2, #31
   d7eda:	bf5c      	itt	pl
   d7edc:	2201      	movpl	r2, #1
   d7ede:	601a      	strpl	r2, [r3, #0]
   d7ee0:	4b10      	ldr	r3, [pc, #64]	; (d7f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7ee2:	681a      	ldr	r2, [r3, #0]
   d7ee4:	07d1      	lsls	r1, r2, #31
   d7ee6:	bf5c      	itt	pl
   d7ee8:	2201      	movpl	r2, #1
   d7eea:	601a      	strpl	r2, [r3, #0]
   d7eec:	4b0e      	ldr	r3, [pc, #56]	; (d7f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7eee:	681a      	ldr	r2, [r3, #0]
   d7ef0:	07d2      	lsls	r2, r2, #31
   d7ef2:	bf5c      	itt	pl
   d7ef4:	2201      	movpl	r2, #1
   d7ef6:	601a      	strpl	r2, [r3, #0]
   d7ef8:	4770      	bx	lr
   d7efa:	bf00      	nop
   d7efc:	2003e7cc 	.word	0x2003e7cc
   d7f00:	2003e7c8 	.word	0x2003e7c8
   d7f04:	2003e7c4 	.word	0x2003e7c4
   d7f08:	2003e7c0 	.word	0x2003e7c0
   d7f0c:	2003e7bc 	.word	0x2003e7bc
   d7f10:	2003e7b8 	.word	0x2003e7b8
   d7f14:	2003e7b4 	.word	0x2003e7b4
   d7f18:	2003e7b0 	.word	0x2003e7b0
   d7f1c:	2003e7ac 	.word	0x2003e7ac
   d7f20:	2003e7a8 	.word	0x2003e7a8
   d7f24:	2003e7a4 	.word	0x2003e7a4
   d7f28:	2003e7a0 	.word	0x2003e7a0

000d7f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7f2c:	4b18      	ldr	r3, [pc, #96]	; (d7f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7f2e:	681a      	ldr	r2, [r3, #0]
   d7f30:	07d1      	lsls	r1, r2, #31
   d7f32:	bf5c      	itt	pl
   d7f34:	2201      	movpl	r2, #1
   d7f36:	601a      	strpl	r2, [r3, #0]
   d7f38:	4b16      	ldr	r3, [pc, #88]	; (d7f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7f3a:	681a      	ldr	r2, [r3, #0]
   d7f3c:	07d2      	lsls	r2, r2, #31
   d7f3e:	bf5c      	itt	pl
   d7f40:	2201      	movpl	r2, #1
   d7f42:	601a      	strpl	r2, [r3, #0]
   d7f44:	4b14      	ldr	r3, [pc, #80]	; (d7f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7f46:	681a      	ldr	r2, [r3, #0]
   d7f48:	07d0      	lsls	r0, r2, #31
   d7f4a:	bf5c      	itt	pl
   d7f4c:	2201      	movpl	r2, #1
   d7f4e:	601a      	strpl	r2, [r3, #0]
   d7f50:	4b12      	ldr	r3, [pc, #72]	; (d7f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7f52:	681a      	ldr	r2, [r3, #0]
   d7f54:	07d1      	lsls	r1, r2, #31
   d7f56:	bf5c      	itt	pl
   d7f58:	2201      	movpl	r2, #1
   d7f5a:	601a      	strpl	r2, [r3, #0]
   d7f5c:	4b10      	ldr	r3, [pc, #64]	; (d7fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7f5e:	681a      	ldr	r2, [r3, #0]
   d7f60:	07d2      	lsls	r2, r2, #31
   d7f62:	bf5c      	itt	pl
   d7f64:	2201      	movpl	r2, #1
   d7f66:	601a      	strpl	r2, [r3, #0]
   d7f68:	4b0e      	ldr	r3, [pc, #56]	; (d7fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7f6a:	681a      	ldr	r2, [r3, #0]
   d7f6c:	07d0      	lsls	r0, r2, #31
   d7f6e:	bf5c      	itt	pl
   d7f70:	2201      	movpl	r2, #1
   d7f72:	601a      	strpl	r2, [r3, #0]
   d7f74:	4b0c      	ldr	r3, [pc, #48]	; (d7fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7f76:	681a      	ldr	r2, [r3, #0]
   d7f78:	07d1      	lsls	r1, r2, #31
   d7f7a:	bf5c      	itt	pl
   d7f7c:	2201      	movpl	r2, #1
   d7f7e:	601a      	strpl	r2, [r3, #0]
   d7f80:	4b0a      	ldr	r3, [pc, #40]	; (d7fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7f82:	681a      	ldr	r2, [r3, #0]
   d7f84:	07d2      	lsls	r2, r2, #31
   d7f86:	bf5c      	itt	pl
   d7f88:	2201      	movpl	r2, #1
   d7f8a:	601a      	strpl	r2, [r3, #0]
   d7f8c:	4770      	bx	lr
   d7f8e:	bf00      	nop
   d7f90:	2003e7ec 	.word	0x2003e7ec
   d7f94:	2003e7e8 	.word	0x2003e7e8
   d7f98:	2003e7e4 	.word	0x2003e7e4
   d7f9c:	2003e7e0 	.word	0x2003e7e0
   d7fa0:	2003e7dc 	.word	0x2003e7dc
   d7fa4:	2003e7d8 	.word	0x2003e7d8
   d7fa8:	2003e7d4 	.word	0x2003e7d4
   d7fac:	2003e7d0 	.word	0x2003e7d0

000d7fb0 <pow>:
   d7fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fb4:	ed2d 8b02 	vpush	{d8}
   d7fb8:	f8df a324 	ldr.w	sl, [pc, #804]	; d82e0 <pow+0x330>
   d7fbc:	b08b      	sub	sp, #44	; 0x2c
   d7fbe:	ec57 6b10 	vmov	r6, r7, d0
   d7fc2:	ec55 4b11 	vmov	r4, r5, d1
   d7fc6:	f000 f98f 	bl	d82e8 <__ieee754_pow>
   d7fca:	f99a 8000 	ldrsb.w	r8, [sl]
   d7fce:	eeb0 8a40 	vmov.f32	s16, s0
   d7fd2:	eef0 8a60 	vmov.f32	s17, s1
   d7fd6:	f1b8 3fff 	cmp.w	r8, #4294967295
   d7fda:	d048      	beq.n	d806e <pow+0xbe>
   d7fdc:	4622      	mov	r2, r4
   d7fde:	462b      	mov	r3, r5
   d7fe0:	4620      	mov	r0, r4
   d7fe2:	4629      	mov	r1, r5
   d7fe4:	f001 fd6e 	bl	d9ac4 <__aeabi_dcmpun>
   d7fe8:	4683      	mov	fp, r0
   d7fea:	2800      	cmp	r0, #0
   d7fec:	d13f      	bne.n	d806e <pow+0xbe>
   d7fee:	4632      	mov	r2, r6
   d7ff0:	463b      	mov	r3, r7
   d7ff2:	4630      	mov	r0, r6
   d7ff4:	4639      	mov	r1, r7
   d7ff6:	f001 fd65 	bl	d9ac4 <__aeabi_dcmpun>
   d7ffa:	4681      	mov	r9, r0
   d7ffc:	2800      	cmp	r0, #0
   d7ffe:	f040 8090 	bne.w	d8122 <pow+0x172>
   d8002:	4630      	mov	r0, r6
   d8004:	4639      	mov	r1, r7
   d8006:	2200      	movs	r2, #0
   d8008:	2300      	movs	r3, #0
   d800a:	f001 fd29 	bl	d9a60 <__aeabi_dcmpeq>
   d800e:	2800      	cmp	r0, #0
   d8010:	d036      	beq.n	d8080 <pow+0xd0>
   d8012:	2200      	movs	r2, #0
   d8014:	2300      	movs	r3, #0
   d8016:	4620      	mov	r0, r4
   d8018:	4629      	mov	r1, r5
   d801a:	f001 fd21 	bl	d9a60 <__aeabi_dcmpeq>
   d801e:	4683      	mov	fp, r0
   d8020:	b1b8      	cbz	r0, d8052 <pow+0xa2>
   d8022:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d82b8 <pow+0x308>
   d8026:	2201      	movs	r2, #1
   d8028:	4ba9      	ldr	r3, [pc, #676]	; (d82d0 <pow+0x320>)
   d802a:	f8cd 9020 	str.w	r9, [sp, #32]
   d802e:	9200      	str	r2, [sp, #0]
   d8030:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8034:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8038:	ed8d 7b06 	vstr	d7, [sp, #24]
   d803c:	9301      	str	r3, [sp, #4]
   d803e:	f1b8 0f00 	cmp.w	r8, #0
   d8042:	d05b      	beq.n	d80fc <pow+0x14c>
   d8044:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d82c0 <pow+0x310>
   d8048:	b00b      	add	sp, #44	; 0x2c
   d804a:	ecbd 8b02 	vpop	{d8}
   d804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8052:	ec45 4b10 	vmov	d0, r4, r5
   d8056:	f000 ffa7 	bl	d8fa8 <finite>
   d805a:	b140      	cbz	r0, d806e <pow+0xbe>
   d805c:	2200      	movs	r2, #0
   d805e:	2300      	movs	r3, #0
   d8060:	4620      	mov	r0, r4
   d8062:	4629      	mov	r1, r5
   d8064:	f001 fd06 	bl	d9a74 <__aeabi_dcmplt>
   d8068:	2800      	cmp	r0, #0
   d806a:	f040 80c5 	bne.w	d81f8 <pow+0x248>
   d806e:	eeb0 0a48 	vmov.f32	s0, s16
   d8072:	eef0 0a68 	vmov.f32	s1, s17
   d8076:	b00b      	add	sp, #44	; 0x2c
   d8078:	ecbd 8b02 	vpop	{d8}
   d807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8080:	eeb0 0a48 	vmov.f32	s0, s16
   d8084:	eef0 0a68 	vmov.f32	s1, s17
   d8088:	f000 ff8e 	bl	d8fa8 <finite>
   d808c:	4680      	mov	r8, r0
   d808e:	2800      	cmp	r0, #0
   d8090:	d061      	beq.n	d8156 <pow+0x1a6>
   d8092:	f04f 0800 	mov.w	r8, #0
   d8096:	f04f 0900 	mov.w	r9, #0
   d809a:	ec51 0b18 	vmov	r0, r1, d8
   d809e:	4642      	mov	r2, r8
   d80a0:	464b      	mov	r3, r9
   d80a2:	f001 fcdd 	bl	d9a60 <__aeabi_dcmpeq>
   d80a6:	2800      	cmp	r0, #0
   d80a8:	d0e1      	beq.n	d806e <pow+0xbe>
   d80aa:	ec47 6b10 	vmov	d0, r6, r7
   d80ae:	f000 ff7b 	bl	d8fa8 <finite>
   d80b2:	2800      	cmp	r0, #0
   d80b4:	d0db      	beq.n	d806e <pow+0xbe>
   d80b6:	ec45 4b10 	vmov	d0, r4, r5
   d80ba:	f000 ff75 	bl	d8fa8 <finite>
   d80be:	2800      	cmp	r0, #0
   d80c0:	d0d5      	beq.n	d806e <pow+0xbe>
   d80c2:	f99a 3000 	ldrsb.w	r3, [sl]
   d80c6:	4a82      	ldr	r2, [pc, #520]	; (d82d0 <pow+0x320>)
   d80c8:	9201      	str	r2, [sp, #4]
   d80ca:	2104      	movs	r1, #4
   d80cc:	2200      	movs	r2, #0
   d80ce:	2b02      	cmp	r3, #2
   d80d0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d80d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d80d8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d80dc:	9100      	str	r1, [sp, #0]
   d80de:	9208      	str	r2, [sp, #32]
   d80e0:	d003      	beq.n	d80ea <pow+0x13a>
   d80e2:	4668      	mov	r0, sp
   d80e4:	f000 ff68 	bl	d8fb8 <matherr>
   d80e8:	b970      	cbnz	r0, d8108 <pow+0x158>
   d80ea:	f7fe fb81 	bl	d67f0 <__errno>
   d80ee:	2322      	movs	r3, #34	; 0x22
   d80f0:	6003      	str	r3, [r0, #0]
   d80f2:	e009      	b.n	d8108 <pow+0x158>
   d80f4:	ed9f 7b70 	vldr	d7, [pc, #448]	; d82b8 <pow+0x308>
   d80f8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d80fc:	4668      	mov	r0, sp
   d80fe:	f000 ff5b 	bl	d8fb8 <matherr>
   d8102:	2800      	cmp	r0, #0
   d8104:	f000 808e 	beq.w	d8224 <pow+0x274>
   d8108:	9b08      	ldr	r3, [sp, #32]
   d810a:	b11b      	cbz	r3, d8114 <pow+0x164>
   d810c:	f7fe fb70 	bl	d67f0 <__errno>
   d8110:	9b08      	ldr	r3, [sp, #32]
   d8112:	6003      	str	r3, [r0, #0]
   d8114:	ed9d 0b06 	vldr	d0, [sp, #24]
   d8118:	b00b      	add	sp, #44	; 0x2c
   d811a:	ecbd 8b02 	vpop	{d8}
   d811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8122:	2200      	movs	r2, #0
   d8124:	2300      	movs	r3, #0
   d8126:	4620      	mov	r0, r4
   d8128:	4629      	mov	r1, r5
   d812a:	f001 fc99 	bl	d9a60 <__aeabi_dcmpeq>
   d812e:	2800      	cmp	r0, #0
   d8130:	d09d      	beq.n	d806e <pow+0xbe>
   d8132:	ed9f 0b63 	vldr	d0, [pc, #396]	; d82c0 <pow+0x310>
   d8136:	4b66      	ldr	r3, [pc, #408]	; (d82d0 <pow+0x320>)
   d8138:	f8cd b020 	str.w	fp, [sp, #32]
   d813c:	2201      	movs	r2, #1
   d813e:	f1b8 0f02 	cmp.w	r8, #2
   d8142:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8146:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d814a:	ed8d 0b06 	vstr	d0, [sp, #24]
   d814e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d8152:	d1d3      	bne.n	d80fc <pow+0x14c>
   d8154:	e78f      	b.n	d8076 <pow+0xc6>
   d8156:	ec47 6b10 	vmov	d0, r6, r7
   d815a:	f000 ff25 	bl	d8fa8 <finite>
   d815e:	2800      	cmp	r0, #0
   d8160:	d097      	beq.n	d8092 <pow+0xe2>
   d8162:	ec45 4b10 	vmov	d0, r4, r5
   d8166:	f000 ff1f 	bl	d8fa8 <finite>
   d816a:	2800      	cmp	r0, #0
   d816c:	d091      	beq.n	d8092 <pow+0xe2>
   d816e:	ec53 2b18 	vmov	r2, r3, d8
   d8172:	ee18 0a10 	vmov	r0, s16
   d8176:	4619      	mov	r1, r3
   d8178:	f001 fca4 	bl	d9ac4 <__aeabi_dcmpun>
   d817c:	2800      	cmp	r0, #0
   d817e:	d17c      	bne.n	d827a <pow+0x2ca>
   d8180:	2303      	movs	r3, #3
   d8182:	f99a 8000 	ldrsb.w	r8, [sl]
   d8186:	9300      	str	r3, [sp, #0]
   d8188:	4b51      	ldr	r3, [pc, #324]	; (d82d0 <pow+0x320>)
   d818a:	9008      	str	r0, [sp, #32]
   d818c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8190:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8194:	9301      	str	r3, [sp, #4]
   d8196:	f1b8 0f00 	cmp.w	r8, #0
   d819a:	d148      	bne.n	d822e <pow+0x27e>
   d819c:	f8df 9144 	ldr.w	r9, [pc, #324]	; d82e4 <pow+0x334>
   d81a0:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d81a4:	2200      	movs	r2, #0
   d81a6:	2300      	movs	r3, #0
   d81a8:	4630      	mov	r0, r6
   d81aa:	4639      	mov	r1, r7
   d81ac:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d81b0:	f001 fc60 	bl	d9a74 <__aeabi_dcmplt>
   d81b4:	2800      	cmp	r0, #0
   d81b6:	d094      	beq.n	d80e2 <pow+0x132>
   d81b8:	2200      	movs	r2, #0
   d81ba:	4b46      	ldr	r3, [pc, #280]	; (d82d4 <pow+0x324>)
   d81bc:	4620      	mov	r0, r4
   d81be:	4629      	mov	r1, r5
   d81c0:	f001 f9e6 	bl	d9590 <__aeabi_dmul>
   d81c4:	4604      	mov	r4, r0
   d81c6:	460d      	mov	r5, r1
   d81c8:	ec45 4b10 	vmov	d0, r4, r5
   d81cc:	f000 ff00 	bl	d8fd0 <rint>
   d81d0:	4620      	mov	r0, r4
   d81d2:	ec53 2b10 	vmov	r2, r3, d0
   d81d6:	4629      	mov	r1, r5
   d81d8:	f001 fc42 	bl	d9a60 <__aeabi_dcmpeq>
   d81dc:	2800      	cmp	r0, #0
   d81de:	d149      	bne.n	d8274 <pow+0x2c4>
   d81e0:	4b3d      	ldr	r3, [pc, #244]	; (d82d8 <pow+0x328>)
   d81e2:	f99a 8000 	ldrsb.w	r8, [sl]
   d81e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d81ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d81ee:	f1b8 0f02 	cmp.w	r8, #2
   d81f2:	f47f af76 	bne.w	d80e2 <pow+0x132>
   d81f6:	e778      	b.n	d80ea <pow+0x13a>
   d81f8:	4a35      	ldr	r2, [pc, #212]	; (d82d0 <pow+0x320>)
   d81fa:	f99a 3000 	ldrsb.w	r3, [sl]
   d81fe:	f8cd b020 	str.w	fp, [sp, #32]
   d8202:	2101      	movs	r1, #1
   d8204:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d8208:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d820c:	e88d 0006 	stmia.w	sp, {r1, r2}
   d8210:	2b00      	cmp	r3, #0
   d8212:	f43f af6f 	beq.w	d80f4 <pow+0x144>
   d8216:	4931      	ldr	r1, [pc, #196]	; (d82dc <pow+0x32c>)
   d8218:	2000      	movs	r0, #0
   d821a:	2b02      	cmp	r3, #2
   d821c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d8220:	f47f af6c 	bne.w	d80fc <pow+0x14c>
   d8224:	f7fe fae4 	bl	d67f0 <__errno>
   d8228:	2321      	movs	r3, #33	; 0x21
   d822a:	6003      	str	r3, [r0, #0]
   d822c:	e76c      	b.n	d8108 <pow+0x158>
   d822e:	ed9f 7b26 	vldr	d7, [pc, #152]	; d82c8 <pow+0x318>
   d8232:	2200      	movs	r2, #0
   d8234:	2300      	movs	r3, #0
   d8236:	4630      	mov	r0, r6
   d8238:	4639      	mov	r1, r7
   d823a:	ed8d 7b06 	vstr	d7, [sp, #24]
   d823e:	f001 fc19 	bl	d9a74 <__aeabi_dcmplt>
   d8242:	2800      	cmp	r0, #0
   d8244:	d0d3      	beq.n	d81ee <pow+0x23e>
   d8246:	2200      	movs	r2, #0
   d8248:	4b22      	ldr	r3, [pc, #136]	; (d82d4 <pow+0x324>)
   d824a:	4620      	mov	r0, r4
   d824c:	4629      	mov	r1, r5
   d824e:	f001 f99f 	bl	d9590 <__aeabi_dmul>
   d8252:	4604      	mov	r4, r0
   d8254:	460d      	mov	r5, r1
   d8256:	ec45 4b10 	vmov	d0, r4, r5
   d825a:	f000 feb9 	bl	d8fd0 <rint>
   d825e:	4620      	mov	r0, r4
   d8260:	ec53 2b10 	vmov	r2, r3, d0
   d8264:	4629      	mov	r1, r5
   d8266:	f001 fbfb 	bl	d9a60 <__aeabi_dcmpeq>
   d826a:	b918      	cbnz	r0, d8274 <pow+0x2c4>
   d826c:	4b1b      	ldr	r3, [pc, #108]	; (d82dc <pow+0x32c>)
   d826e:	2200      	movs	r2, #0
   d8270:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d8274:	f99a 8000 	ldrsb.w	r8, [sl]
   d8278:	e7b9      	b.n	d81ee <pow+0x23e>
   d827a:	4b15      	ldr	r3, [pc, #84]	; (d82d0 <pow+0x320>)
   d827c:	f99a 9000 	ldrsb.w	r9, [sl]
   d8280:	f8cd 8020 	str.w	r8, [sp, #32]
   d8284:	2201      	movs	r2, #1
   d8286:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d828a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d828e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d8292:	f1b9 0f00 	cmp.w	r9, #0
   d8296:	f43f af2d 	beq.w	d80f4 <pow+0x144>
   d829a:	2200      	movs	r2, #0
   d829c:	2300      	movs	r3, #0
   d829e:	4610      	mov	r0, r2
   d82a0:	4619      	mov	r1, r3
   d82a2:	f001 fa9f 	bl	d97e4 <__aeabi_ddiv>
   d82a6:	f1b9 0f02 	cmp.w	r9, #2
   d82aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d82ae:	d0b9      	beq.n	d8224 <pow+0x274>
   d82b0:	e724      	b.n	d80fc <pow+0x14c>
   d82b2:	bf00      	nop
   d82b4:	f3af 8000 	nop.w
	...
   d82c4:	3ff00000 	.word	0x3ff00000
   d82c8:	00000000 	.word	0x00000000
   d82cc:	7ff00000 	.word	0x7ff00000
   d82d0:	000dae50 	.word	0x000dae50
   d82d4:	3fe00000 	.word	0x3fe00000
   d82d8:	c7efffff 	.word	0xc7efffff
   d82dc:	fff00000 	.word	0xfff00000
   d82e0:	2003dcdc 	.word	0x2003dcdc
   d82e4:	47efffff 	.word	0x47efffff

000d82e8 <__ieee754_pow>:
   d82e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d82ec:	ec51 0b11 	vmov	r0, r1, d1
   d82f0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d82f4:	ea58 0400 	orrs.w	r4, r8, r0
   d82f8:	b093      	sub	sp, #76	; 0x4c
   d82fa:	d03c      	beq.n	d8376 <__ieee754_pow+0x8e>
   d82fc:	ec53 2b10 	vmov	r2, r3, d0
   d8300:	4e6d      	ldr	r6, [pc, #436]	; (d84b8 <__ieee754_pow+0x1d0>)
   d8302:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d8306:	42b4      	cmp	r4, r6
   d8308:	ee10 aa10 	vmov	sl, s0
   d830c:	461d      	mov	r5, r3
   d830e:	dc2b      	bgt.n	d8368 <__ieee754_pow+0x80>
   d8310:	4689      	mov	r9, r1
   d8312:	ee11 ea10 	vmov	lr, s2
   d8316:	d026      	beq.n	d8366 <__ieee754_pow+0x7e>
   d8318:	45b0      	cmp	r8, r6
   d831a:	dc25      	bgt.n	d8368 <__ieee754_pow+0x80>
   d831c:	4e66      	ldr	r6, [pc, #408]	; (d84b8 <__ieee754_pow+0x1d0>)
   d831e:	45b0      	cmp	r8, r6
   d8320:	d077      	beq.n	d8412 <__ieee754_pow+0x12a>
   d8322:	2d00      	cmp	r5, #0
   d8324:	4616      	mov	r6, r2
   d8326:	461f      	mov	r7, r3
   d8328:	e9cd 0100 	strd	r0, r1, [sp]
   d832c:	db75      	blt.n	d841a <__ieee754_pow+0x132>
   d832e:	f04f 0b00 	mov.w	fp, #0
   d8332:	f1be 0f00 	cmp.w	lr, #0
   d8336:	d12d      	bne.n	d8394 <__ieee754_pow+0xac>
   d8338:	4b5f      	ldr	r3, [pc, #380]	; (d84b8 <__ieee754_pow+0x1d0>)
   d833a:	4598      	cmp	r8, r3
   d833c:	f000 8089 	beq.w	d8452 <__ieee754_pow+0x16a>
   d8340:	4b5e      	ldr	r3, [pc, #376]	; (d84bc <__ieee754_pow+0x1d4>)
   d8342:	4598      	cmp	r8, r3
   d8344:	d05e      	beq.n	d8404 <__ieee754_pow+0x11c>
   d8346:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d834a:	f000 83de 	beq.w	d8b0a <__ieee754_pow+0x822>
   d834e:	4b5c      	ldr	r3, [pc, #368]	; (d84c0 <__ieee754_pow+0x1d8>)
   d8350:	4599      	cmp	r9, r3
   d8352:	d11f      	bne.n	d8394 <__ieee754_pow+0xac>
   d8354:	2d00      	cmp	r5, #0
   d8356:	db1d      	blt.n	d8394 <__ieee754_pow+0xac>
   d8358:	ec47 6b10 	vmov	d0, r6, r7
   d835c:	b013      	add	sp, #76	; 0x4c
   d835e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8362:	f000 bd49 	b.w	d8df8 <__ieee754_sqrt>
   d8366:	b15a      	cbz	r2, d8380 <__ieee754_pow+0x98>
   d8368:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d836c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d8370:	ea54 030a 	orrs.w	r3, r4, sl
   d8374:	d106      	bne.n	d8384 <__ieee754_pow+0x9c>
   d8376:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d84a0 <__ieee754_pow+0x1b8>
   d837a:	b013      	add	sp, #76	; 0x4c
   d837c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8380:	45a0      	cmp	r8, r4
   d8382:	ddcb      	ble.n	d831c <__ieee754_pow+0x34>
   d8384:	484f      	ldr	r0, [pc, #316]	; (d84c4 <__ieee754_pow+0x1dc>)
   d8386:	b013      	add	sp, #76	; 0x4c
   d8388:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d838c:	f000 be18 	b.w	d8fc0 <nan>
   d8390:	f04f 0b00 	mov.w	fp, #0
   d8394:	ec47 6b10 	vmov	d0, r6, r7
   d8398:	f000 fdfe 	bl	d8f98 <fabs>
   d839c:	ec51 0b10 	vmov	r0, r1, d0
   d83a0:	f1ba 0f00 	cmp.w	sl, #0
   d83a4:	d01e      	beq.n	d83e4 <__ieee754_pow+0xfc>
   d83a6:	0fed      	lsrs	r5, r5, #31
   d83a8:	f105 3aff 	add.w	sl, r5, #4294967295
   d83ac:	ea5b 030a 	orrs.w	r3, fp, sl
   d83b0:	d063      	beq.n	d847a <__ieee754_pow+0x192>
   d83b2:	4b45      	ldr	r3, [pc, #276]	; (d84c8 <__ieee754_pow+0x1e0>)
   d83b4:	4598      	cmp	r8, r3
   d83b6:	f340 808d 	ble.w	d84d4 <__ieee754_pow+0x1ec>
   d83ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d83be:	4598      	cmp	r8, r3
   d83c0:	f340 8438 	ble.w	d8c34 <__ieee754_pow+0x94c>
   d83c4:	4b41      	ldr	r3, [pc, #260]	; (d84cc <__ieee754_pow+0x1e4>)
   d83c6:	429c      	cmp	r4, r3
   d83c8:	dd62      	ble.n	d8490 <__ieee754_pow+0x1a8>
   d83ca:	f1b9 0f00 	cmp.w	r9, #0
   d83ce:	dd62      	ble.n	d8496 <__ieee754_pow+0x1ae>
   d83d0:	a335      	add	r3, pc, #212	; (adr r3, d84a8 <__ieee754_pow+0x1c0>)
   d83d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83d6:	4610      	mov	r0, r2
   d83d8:	4619      	mov	r1, r3
   d83da:	f001 f8d9 	bl	d9590 <__aeabi_dmul>
   d83de:	ec41 0b10 	vmov	d0, r0, r1
   d83e2:	e7ca      	b.n	d837a <__ieee754_pow+0x92>
   d83e4:	b124      	cbz	r4, d83f0 <__ieee754_pow+0x108>
   d83e6:	4b35      	ldr	r3, [pc, #212]	; (d84bc <__ieee754_pow+0x1d4>)
   d83e8:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d83ec:	429a      	cmp	r2, r3
   d83ee:	d1da      	bne.n	d83a6 <__ieee754_pow+0xbe>
   d83f0:	f1b9 0f00 	cmp.w	r9, #0
   d83f4:	f2c0 83cb 	blt.w	d8b8e <__ieee754_pow+0x8a6>
   d83f8:	2d00      	cmp	r5, #0
   d83fa:	f2c0 8374 	blt.w	d8ae6 <__ieee754_pow+0x7fe>
   d83fe:	ec41 0b10 	vmov	d0, r0, r1
   d8402:	e7ba      	b.n	d837a <__ieee754_pow+0x92>
   d8404:	f1b9 0f00 	cmp.w	r9, #0
   d8408:	f2c0 847a 	blt.w	d8d00 <__ieee754_pow+0xa18>
   d840c:	ec47 6b10 	vmov	d0, r6, r7
   d8410:	e7b3      	b.n	d837a <__ieee754_pow+0x92>
   d8412:	f1be 0f00 	cmp.w	lr, #0
   d8416:	d084      	beq.n	d8322 <__ieee754_pow+0x3a>
   d8418:	e7a6      	b.n	d8368 <__ieee754_pow+0x80>
   d841a:	4b2d      	ldr	r3, [pc, #180]	; (d84d0 <__ieee754_pow+0x1e8>)
   d841c:	4598      	cmp	r8, r3
   d841e:	dc29      	bgt.n	d8474 <__ieee754_pow+0x18c>
   d8420:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d8424:	4598      	cmp	r8, r3
   d8426:	dd82      	ble.n	d832e <__ieee754_pow+0x46>
   d8428:	ea4f 5328 	mov.w	r3, r8, asr #20
   d842c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d8430:	2b14      	cmp	r3, #20
   d8432:	f340 847f 	ble.w	d8d34 <__ieee754_pow+0xa4c>
   d8436:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d843a:	fa2e f203 	lsr.w	r2, lr, r3
   d843e:	fa02 f303 	lsl.w	r3, r2, r3
   d8442:	459e      	cmp	lr, r3
   d8444:	f47f af73 	bne.w	d832e <__ieee754_pow+0x46>
   d8448:	f002 0201 	and.w	r2, r2, #1
   d844c:	f1c2 0b02 	rsb	fp, r2, #2
   d8450:	e76f      	b.n	d8332 <__ieee754_pow+0x4a>
   d8452:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d8456:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d845a:	ea53 030a 	orrs.w	r3, r3, sl
   d845e:	d08a      	beq.n	d8376 <__ieee754_pow+0x8e>
   d8460:	4b1a      	ldr	r3, [pc, #104]	; (d84cc <__ieee754_pow+0x1e4>)
   d8462:	429c      	cmp	r4, r3
   d8464:	f340 8385 	ble.w	d8b72 <__ieee754_pow+0x88a>
   d8468:	f1b9 0f00 	cmp.w	r9, #0
   d846c:	db13      	blt.n	d8496 <__ieee754_pow+0x1ae>
   d846e:	ed9d 0b00 	vldr	d0, [sp]
   d8472:	e782      	b.n	d837a <__ieee754_pow+0x92>
   d8474:	f04f 0b02 	mov.w	fp, #2
   d8478:	e75b      	b.n	d8332 <__ieee754_pow+0x4a>
   d847a:	4632      	mov	r2, r6
   d847c:	463b      	mov	r3, r7
   d847e:	4610      	mov	r0, r2
   d8480:	4619      	mov	r1, r3
   d8482:	f000 fed1 	bl	d9228 <__aeabi_dsub>
   d8486:	4602      	mov	r2, r0
   d8488:	460b      	mov	r3, r1
   d848a:	f001 f9ab 	bl	d97e4 <__aeabi_ddiv>
   d848e:	e7b6      	b.n	d83fe <__ieee754_pow+0x116>
   d8490:	f1b9 0f00 	cmp.w	r9, #0
   d8494:	db9c      	blt.n	d83d0 <__ieee754_pow+0xe8>
   d8496:	ed9f 0b06 	vldr	d0, [pc, #24]	; d84b0 <__ieee754_pow+0x1c8>
   d849a:	e76e      	b.n	d837a <__ieee754_pow+0x92>
   d849c:	f3af 8000 	nop.w
   d84a0:	00000000 	.word	0x00000000
   d84a4:	3ff00000 	.word	0x3ff00000
   d84a8:	8800759c 	.word	0x8800759c
   d84ac:	7e37e43c 	.word	0x7e37e43c
	...
   d84b8:	7ff00000 	.word	0x7ff00000
   d84bc:	3ff00000 	.word	0x3ff00000
   d84c0:	3fe00000 	.word	0x3fe00000
   d84c4:	000dae54 	.word	0x000dae54
   d84c8:	41e00000 	.word	0x41e00000
   d84cc:	3fefffff 	.word	0x3fefffff
   d84d0:	433fffff 	.word	0x433fffff
   d84d4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d84d8:	f04f 0200 	mov.w	r2, #0
   d84dc:	da05      	bge.n	d84ea <__ieee754_pow+0x202>
   d84de:	4bd6      	ldr	r3, [pc, #856]	; (d8838 <__ieee754_pow+0x550>)
   d84e0:	f001 f856 	bl	d9590 <__aeabi_dmul>
   d84e4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d84e8:	460c      	mov	r4, r1
   d84ea:	1523      	asrs	r3, r4, #20
   d84ec:	4ed3      	ldr	r6, [pc, #844]	; (d883c <__ieee754_pow+0x554>)
   d84ee:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d84f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d84f6:	4413      	add	r3, r2
   d84f8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d84fc:	42b4      	cmp	r4, r6
   d84fe:	461a      	mov	r2, r3
   d8500:	930d      	str	r3, [sp, #52]	; 0x34
   d8502:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d8506:	f340 8349 	ble.w	d8b9c <__ieee754_pow+0x8b4>
   d850a:	4bcd      	ldr	r3, [pc, #820]	; (d8840 <__ieee754_pow+0x558>)
   d850c:	429c      	cmp	r4, r3
   d850e:	f340 842d 	ble.w	d8d6c <__ieee754_pow+0xa84>
   d8512:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d87e0 <__ieee754_pow+0x4f8>
   d8516:	ed8d 7b08 	vstr	d7, [sp, #32]
   d851a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d851e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d87e8 <__ieee754_pow+0x500>
   d8522:	4613      	mov	r3, r2
   d8524:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8528:	3301      	adds	r3, #1
   d852a:	930d      	str	r3, [sp, #52]	; 0x34
   d852c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d8530:	f04f 0800 	mov.w	r8, #0
   d8534:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8538:	4629      	mov	r1, r5
   d853a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d853e:	f000 fe73 	bl	d9228 <__aeabi_dsub>
   d8542:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8546:	4606      	mov	r6, r0
   d8548:	460f      	mov	r7, r1
   d854a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d854e:	f000 fe6d 	bl	d922c <__adddf3>
   d8552:	4602      	mov	r2, r0
   d8554:	460b      	mov	r3, r1
   d8556:	2000      	movs	r0, #0
   d8558:	49ba      	ldr	r1, [pc, #744]	; (d8844 <__ieee754_pow+0x55c>)
   d855a:	f001 f943 	bl	d97e4 <__aeabi_ddiv>
   d855e:	4603      	mov	r3, r0
   d8560:	460c      	mov	r4, r1
   d8562:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d8566:	4602      	mov	r2, r0
   d8568:	460b      	mov	r3, r1
   d856a:	4630      	mov	r0, r6
   d856c:	4639      	mov	r1, r7
   d856e:	f001 f80f 	bl	d9590 <__aeabi_dmul>
   d8572:	106b      	asrs	r3, r5, #1
   d8574:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d8578:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d857c:	eb03 0508 	add.w	r5, r3, r8
   d8580:	460a      	mov	r2, r1
   d8582:	2300      	movs	r3, #0
   d8584:	4601      	mov	r1, r0
   d8586:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d858a:	9302      	str	r3, [sp, #8]
   d858c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d8590:	2400      	movs	r4, #0
   d8592:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d8596:	462b      	mov	r3, r5
   d8598:	4622      	mov	r2, r4
   d859a:	4640      	mov	r0, r8
   d859c:	4649      	mov	r1, r9
   d859e:	f000 fff7 	bl	d9590 <__aeabi_dmul>
   d85a2:	4602      	mov	r2, r0
   d85a4:	460b      	mov	r3, r1
   d85a6:	4630      	mov	r0, r6
   d85a8:	4639      	mov	r1, r7
   d85aa:	f000 fe3d 	bl	d9228 <__aeabi_dsub>
   d85ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d85b2:	4606      	mov	r6, r0
   d85b4:	460f      	mov	r7, r1
   d85b6:	4620      	mov	r0, r4
   d85b8:	4629      	mov	r1, r5
   d85ba:	f000 fe35 	bl	d9228 <__aeabi_dsub>
   d85be:	4602      	mov	r2, r0
   d85c0:	460b      	mov	r3, r1
   d85c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d85c6:	f000 fe2f 	bl	d9228 <__aeabi_dsub>
   d85ca:	4642      	mov	r2, r8
   d85cc:	464b      	mov	r3, r9
   d85ce:	f000 ffdf 	bl	d9590 <__aeabi_dmul>
   d85d2:	4602      	mov	r2, r0
   d85d4:	460b      	mov	r3, r1
   d85d6:	4630      	mov	r0, r6
   d85d8:	4639      	mov	r1, r7
   d85da:	f000 fe25 	bl	d9228 <__aeabi_dsub>
   d85de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d85e2:	f000 ffd5 	bl	d9590 <__aeabi_dmul>
   d85e6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d85ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d85ee:	4622      	mov	r2, r4
   d85f0:	462b      	mov	r3, r5
   d85f2:	4620      	mov	r0, r4
   d85f4:	4629      	mov	r1, r5
   d85f6:	f000 ffcb 	bl	d9590 <__aeabi_dmul>
   d85fa:	a37d      	add	r3, pc, #500	; (adr r3, d87f0 <__ieee754_pow+0x508>)
   d85fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8600:	4604      	mov	r4, r0
   d8602:	460d      	mov	r5, r1
   d8604:	f000 ffc4 	bl	d9590 <__aeabi_dmul>
   d8608:	a37b      	add	r3, pc, #492	; (adr r3, d87f8 <__ieee754_pow+0x510>)
   d860a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d860e:	f000 fe0d 	bl	d922c <__adddf3>
   d8612:	4622      	mov	r2, r4
   d8614:	462b      	mov	r3, r5
   d8616:	f000 ffbb 	bl	d9590 <__aeabi_dmul>
   d861a:	a379      	add	r3, pc, #484	; (adr r3, d8800 <__ieee754_pow+0x518>)
   d861c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8620:	f000 fe04 	bl	d922c <__adddf3>
   d8624:	4622      	mov	r2, r4
   d8626:	462b      	mov	r3, r5
   d8628:	f000 ffb2 	bl	d9590 <__aeabi_dmul>
   d862c:	a376      	add	r3, pc, #472	; (adr r3, d8808 <__ieee754_pow+0x520>)
   d862e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8632:	f000 fdfb 	bl	d922c <__adddf3>
   d8636:	4622      	mov	r2, r4
   d8638:	462b      	mov	r3, r5
   d863a:	f000 ffa9 	bl	d9590 <__aeabi_dmul>
   d863e:	a374      	add	r3, pc, #464	; (adr r3, d8810 <__ieee754_pow+0x528>)
   d8640:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8644:	f000 fdf2 	bl	d922c <__adddf3>
   d8648:	4622      	mov	r2, r4
   d864a:	462b      	mov	r3, r5
   d864c:	f000 ffa0 	bl	d9590 <__aeabi_dmul>
   d8650:	a371      	add	r3, pc, #452	; (adr r3, d8818 <__ieee754_pow+0x530>)
   d8652:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8656:	f000 fde9 	bl	d922c <__adddf3>
   d865a:	4622      	mov	r2, r4
   d865c:	4606      	mov	r6, r0
   d865e:	460f      	mov	r7, r1
   d8660:	462b      	mov	r3, r5
   d8662:	4620      	mov	r0, r4
   d8664:	4629      	mov	r1, r5
   d8666:	f000 ff93 	bl	d9590 <__aeabi_dmul>
   d866a:	4602      	mov	r2, r0
   d866c:	460b      	mov	r3, r1
   d866e:	4630      	mov	r0, r6
   d8670:	4639      	mov	r1, r7
   d8672:	f000 ff8d 	bl	d9590 <__aeabi_dmul>
   d8676:	4642      	mov	r2, r8
   d8678:	4604      	mov	r4, r0
   d867a:	460d      	mov	r5, r1
   d867c:	464b      	mov	r3, r9
   d867e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8682:	f000 fdd3 	bl	d922c <__adddf3>
   d8686:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d868a:	f000 ff81 	bl	d9590 <__aeabi_dmul>
   d868e:	4622      	mov	r2, r4
   d8690:	462b      	mov	r3, r5
   d8692:	f000 fdcb 	bl	d922c <__adddf3>
   d8696:	4642      	mov	r2, r8
   d8698:	4606      	mov	r6, r0
   d869a:	460f      	mov	r7, r1
   d869c:	464b      	mov	r3, r9
   d869e:	4640      	mov	r0, r8
   d86a0:	4649      	mov	r1, r9
   d86a2:	f000 ff75 	bl	d9590 <__aeabi_dmul>
   d86a6:	2200      	movs	r2, #0
   d86a8:	4b67      	ldr	r3, [pc, #412]	; (d8848 <__ieee754_pow+0x560>)
   d86aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d86ae:	f000 fdbd 	bl	d922c <__adddf3>
   d86b2:	4632      	mov	r2, r6
   d86b4:	463b      	mov	r3, r7
   d86b6:	f000 fdb9 	bl	d922c <__adddf3>
   d86ba:	9802      	ldr	r0, [sp, #8]
   d86bc:	460d      	mov	r5, r1
   d86be:	4604      	mov	r4, r0
   d86c0:	4622      	mov	r2, r4
   d86c2:	462b      	mov	r3, r5
   d86c4:	4640      	mov	r0, r8
   d86c6:	4649      	mov	r1, r9
   d86c8:	f000 ff62 	bl	d9590 <__aeabi_dmul>
   d86cc:	2200      	movs	r2, #0
   d86ce:	4680      	mov	r8, r0
   d86d0:	4689      	mov	r9, r1
   d86d2:	4b5d      	ldr	r3, [pc, #372]	; (d8848 <__ieee754_pow+0x560>)
   d86d4:	4620      	mov	r0, r4
   d86d6:	4629      	mov	r1, r5
   d86d8:	f000 fda6 	bl	d9228 <__aeabi_dsub>
   d86dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d86e0:	f000 fda2 	bl	d9228 <__aeabi_dsub>
   d86e4:	4602      	mov	r2, r0
   d86e6:	460b      	mov	r3, r1
   d86e8:	4630      	mov	r0, r6
   d86ea:	4639      	mov	r1, r7
   d86ec:	f000 fd9c 	bl	d9228 <__aeabi_dsub>
   d86f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d86f4:	f000 ff4c 	bl	d9590 <__aeabi_dmul>
   d86f8:	4622      	mov	r2, r4
   d86fa:	4606      	mov	r6, r0
   d86fc:	460f      	mov	r7, r1
   d86fe:	462b      	mov	r3, r5
   d8700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8704:	f000 ff44 	bl	d9590 <__aeabi_dmul>
   d8708:	4602      	mov	r2, r0
   d870a:	460b      	mov	r3, r1
   d870c:	4630      	mov	r0, r6
   d870e:	4639      	mov	r1, r7
   d8710:	f000 fd8c 	bl	d922c <__adddf3>
   d8714:	4606      	mov	r6, r0
   d8716:	460f      	mov	r7, r1
   d8718:	4602      	mov	r2, r0
   d871a:	460b      	mov	r3, r1
   d871c:	4640      	mov	r0, r8
   d871e:	4649      	mov	r1, r9
   d8720:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d8724:	f000 fd82 	bl	d922c <__adddf3>
   d8728:	9802      	ldr	r0, [sp, #8]
   d872a:	a33d      	add	r3, pc, #244	; (adr r3, d8820 <__ieee754_pow+0x538>)
   d872c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8730:	4604      	mov	r4, r0
   d8732:	460d      	mov	r5, r1
   d8734:	f000 ff2c 	bl	d9590 <__aeabi_dmul>
   d8738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d873c:	4680      	mov	r8, r0
   d873e:	4689      	mov	r9, r1
   d8740:	4620      	mov	r0, r4
   d8742:	4629      	mov	r1, r5
   d8744:	f000 fd70 	bl	d9228 <__aeabi_dsub>
   d8748:	4602      	mov	r2, r0
   d874a:	460b      	mov	r3, r1
   d874c:	4630      	mov	r0, r6
   d874e:	4639      	mov	r1, r7
   d8750:	f000 fd6a 	bl	d9228 <__aeabi_dsub>
   d8754:	a334      	add	r3, pc, #208	; (adr r3, d8828 <__ieee754_pow+0x540>)
   d8756:	e9d3 2300 	ldrd	r2, r3, [r3]
   d875a:	f000 ff19 	bl	d9590 <__aeabi_dmul>
   d875e:	a334      	add	r3, pc, #208	; (adr r3, d8830 <__ieee754_pow+0x548>)
   d8760:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8764:	4606      	mov	r6, r0
   d8766:	460f      	mov	r7, r1
   d8768:	4620      	mov	r0, r4
   d876a:	4629      	mov	r1, r5
   d876c:	f000 ff10 	bl	d9590 <__aeabi_dmul>
   d8770:	4602      	mov	r2, r0
   d8772:	460b      	mov	r3, r1
   d8774:	4630      	mov	r0, r6
   d8776:	4639      	mov	r1, r7
   d8778:	f000 fd58 	bl	d922c <__adddf3>
   d877c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d8780:	f000 fd54 	bl	d922c <__adddf3>
   d8784:	4606      	mov	r6, r0
   d8786:	980d      	ldr	r0, [sp, #52]	; 0x34
   d8788:	460f      	mov	r7, r1
   d878a:	f000 fe9b 	bl	d94c4 <__aeabi_i2d>
   d878e:	4632      	mov	r2, r6
   d8790:	4604      	mov	r4, r0
   d8792:	460d      	mov	r5, r1
   d8794:	463b      	mov	r3, r7
   d8796:	4640      	mov	r0, r8
   d8798:	4649      	mov	r1, r9
   d879a:	f000 fd47 	bl	d922c <__adddf3>
   d879e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d87a2:	f000 fd43 	bl	d922c <__adddf3>
   d87a6:	4622      	mov	r2, r4
   d87a8:	462b      	mov	r3, r5
   d87aa:	f000 fd3f 	bl	d922c <__adddf3>
   d87ae:	9802      	ldr	r0, [sp, #8]
   d87b0:	4622      	mov	r2, r4
   d87b2:	462b      	mov	r3, r5
   d87b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d87b8:	f000 fd36 	bl	d9228 <__aeabi_dsub>
   d87bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d87c0:	f000 fd32 	bl	d9228 <__aeabi_dsub>
   d87c4:	4642      	mov	r2, r8
   d87c6:	464b      	mov	r3, r9
   d87c8:	f000 fd2e 	bl	d9228 <__aeabi_dsub>
   d87cc:	4602      	mov	r2, r0
   d87ce:	460b      	mov	r3, r1
   d87d0:	4630      	mov	r0, r6
   d87d2:	4639      	mov	r1, r7
   d87d4:	f000 fd28 	bl	d9228 <__aeabi_dsub>
   d87d8:	4680      	mov	r8, r0
   d87da:	4689      	mov	r9, r1
   d87dc:	e036      	b.n	d884c <__ieee754_pow+0x564>
   d87de:	bf00      	nop
	...
   d87ec:	3ff00000 	.word	0x3ff00000
   d87f0:	4a454eef 	.word	0x4a454eef
   d87f4:	3fca7e28 	.word	0x3fca7e28
   d87f8:	93c9db65 	.word	0x93c9db65
   d87fc:	3fcd864a 	.word	0x3fcd864a
   d8800:	a91d4101 	.word	0xa91d4101
   d8804:	3fd17460 	.word	0x3fd17460
   d8808:	518f264d 	.word	0x518f264d
   d880c:	3fd55555 	.word	0x3fd55555
   d8810:	db6fabff 	.word	0xdb6fabff
   d8814:	3fdb6db6 	.word	0x3fdb6db6
   d8818:	33333303 	.word	0x33333303
   d881c:	3fe33333 	.word	0x3fe33333
   d8820:	e0000000 	.word	0xe0000000
   d8824:	3feec709 	.word	0x3feec709
   d8828:	dc3a03fd 	.word	0xdc3a03fd
   d882c:	3feec709 	.word	0x3feec709
   d8830:	145b01f5 	.word	0x145b01f5
   d8834:	be3e2fe0 	.word	0xbe3e2fe0
   d8838:	43400000 	.word	0x43400000
   d883c:	0003988e 	.word	0x0003988e
   d8840:	000bb679 	.word	0x000bb679
   d8844:	3ff00000 	.word	0x3ff00000
   d8848:	40080000 	.word	0x40080000
   d884c:	f10b 33ff 	add.w	r3, fp, #4294967295
   d8850:	ea53 030a 	orrs.w	r3, r3, sl
   d8854:	f000 8188 	beq.w	d8b68 <__ieee754_pow+0x880>
   d8858:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d8bb8 <__ieee754_pow+0x8d0>
   d885c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8860:	e9dd ab00 	ldrd	sl, fp, [sp]
   d8864:	4653      	mov	r3, sl
   d8866:	465c      	mov	r4, fp
   d8868:	e9cd 3400 	strd	r3, r4, [sp]
   d886c:	2300      	movs	r3, #0
   d886e:	9300      	str	r3, [sp, #0]
   d8870:	e9dd 4500 	ldrd	r4, r5, [sp]
   d8874:	4650      	mov	r0, sl
   d8876:	4622      	mov	r2, r4
   d8878:	462b      	mov	r3, r5
   d887a:	4659      	mov	r1, fp
   d887c:	f000 fcd4 	bl	d9228 <__aeabi_dsub>
   d8880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8884:	f000 fe84 	bl	d9590 <__aeabi_dmul>
   d8888:	4652      	mov	r2, sl
   d888a:	4606      	mov	r6, r0
   d888c:	460f      	mov	r7, r1
   d888e:	465b      	mov	r3, fp
   d8890:	4640      	mov	r0, r8
   d8892:	4649      	mov	r1, r9
   d8894:	f000 fe7c 	bl	d9590 <__aeabi_dmul>
   d8898:	4602      	mov	r2, r0
   d889a:	460b      	mov	r3, r1
   d889c:	4630      	mov	r0, r6
   d889e:	4639      	mov	r1, r7
   d88a0:	f000 fcc4 	bl	d922c <__adddf3>
   d88a4:	4622      	mov	r2, r4
   d88a6:	4680      	mov	r8, r0
   d88a8:	4689      	mov	r9, r1
   d88aa:	462b      	mov	r3, r5
   d88ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d88b0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d88b4:	f000 fe6c 	bl	d9590 <__aeabi_dmul>
   d88b8:	460b      	mov	r3, r1
   d88ba:	4602      	mov	r2, r0
   d88bc:	4606      	mov	r6, r0
   d88be:	460f      	mov	r7, r1
   d88c0:	4640      	mov	r0, r8
   d88c2:	4649      	mov	r1, r9
   d88c4:	f000 fcb2 	bl	d922c <__adddf3>
   d88c8:	4bd5      	ldr	r3, [pc, #852]	; (d8c20 <__ieee754_pow+0x938>)
   d88ca:	4299      	cmp	r1, r3
   d88cc:	4604      	mov	r4, r0
   d88ce:	460d      	mov	r5, r1
   d88d0:	468a      	mov	sl, r1
   d88d2:	f340 8123 	ble.w	d8b1c <__ieee754_pow+0x834>
   d88d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d88da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d88de:	4303      	orrs	r3, r0
   d88e0:	f040 8218 	bne.w	d8d14 <__ieee754_pow+0xa2c>
   d88e4:	a3b6      	add	r3, pc, #728	; (adr r3, d8bc0 <__ieee754_pow+0x8d8>)
   d88e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d88ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d88ee:	f000 fc9d 	bl	d922c <__adddf3>
   d88f2:	4632      	mov	r2, r6
   d88f4:	4680      	mov	r8, r0
   d88f6:	4689      	mov	r9, r1
   d88f8:	463b      	mov	r3, r7
   d88fa:	4620      	mov	r0, r4
   d88fc:	4629      	mov	r1, r5
   d88fe:	f000 fc93 	bl	d9228 <__aeabi_dsub>
   d8902:	4602      	mov	r2, r0
   d8904:	460b      	mov	r3, r1
   d8906:	4640      	mov	r0, r8
   d8908:	4649      	mov	r1, r9
   d890a:	f001 f8d1 	bl	d9ab0 <__aeabi_dcmpgt>
   d890e:	2800      	cmp	r0, #0
   d8910:	f040 8200 	bne.w	d8d14 <__ieee754_pow+0xa2c>
   d8914:	46a8      	mov	r8, r5
   d8916:	ea4f 5328 	mov.w	r3, r8, asr #20
   d891a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d891e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d8922:	fa42 f303 	asr.w	r3, r2, r3
   d8926:	4453      	add	r3, sl
   d8928:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d892c:	4dbd      	ldr	r5, [pc, #756]	; (d8c24 <__ieee754_pow+0x93c>)
   d892e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d8932:	4115      	asrs	r5, r2
   d8934:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d8938:	2000      	movs	r0, #0
   d893a:	f1c2 0414 	rsb	r4, r2, #20
   d893e:	ea23 0105 	bic.w	r1, r3, r5
   d8942:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d8946:	f1ba 0f00 	cmp.w	sl, #0
   d894a:	4602      	mov	r2, r0
   d894c:	460b      	mov	r3, r1
   d894e:	fa4b fb04 	asr.w	fp, fp, r4
   d8952:	4630      	mov	r0, r6
   d8954:	4639      	mov	r1, r7
   d8956:	bfb8      	it	lt
   d8958:	f1cb 0b00 	rsblt	fp, fp, #0
   d895c:	f000 fc64 	bl	d9228 <__aeabi_dsub>
   d8960:	4602      	mov	r2, r0
   d8962:	460b      	mov	r3, r1
   d8964:	4606      	mov	r6, r0
   d8966:	460f      	mov	r7, r1
   d8968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d896c:	f000 fc5e 	bl	d922c <__adddf3>
   d8970:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d8974:	2400      	movs	r4, #0
   d8976:	a394      	add	r3, pc, #592	; (adr r3, d8bc8 <__ieee754_pow+0x8e0>)
   d8978:	e9d3 2300 	ldrd	r2, r3, [r3]
   d897c:	4620      	mov	r0, r4
   d897e:	460d      	mov	r5, r1
   d8980:	f000 fe06 	bl	d9590 <__aeabi_dmul>
   d8984:	4632      	mov	r2, r6
   d8986:	4680      	mov	r8, r0
   d8988:	4689      	mov	r9, r1
   d898a:	463b      	mov	r3, r7
   d898c:	4620      	mov	r0, r4
   d898e:	4629      	mov	r1, r5
   d8990:	f000 fc4a 	bl	d9228 <__aeabi_dsub>
   d8994:	4602      	mov	r2, r0
   d8996:	460b      	mov	r3, r1
   d8998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d899c:	f000 fc44 	bl	d9228 <__aeabi_dsub>
   d89a0:	a38b      	add	r3, pc, #556	; (adr r3, d8bd0 <__ieee754_pow+0x8e8>)
   d89a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89a6:	f000 fdf3 	bl	d9590 <__aeabi_dmul>
   d89aa:	a38b      	add	r3, pc, #556	; (adr r3, d8bd8 <__ieee754_pow+0x8f0>)
   d89ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89b0:	4606      	mov	r6, r0
   d89b2:	460f      	mov	r7, r1
   d89b4:	4620      	mov	r0, r4
   d89b6:	4629      	mov	r1, r5
   d89b8:	f000 fdea 	bl	d9590 <__aeabi_dmul>
   d89bc:	4602      	mov	r2, r0
   d89be:	460b      	mov	r3, r1
   d89c0:	4630      	mov	r0, r6
   d89c2:	4639      	mov	r1, r7
   d89c4:	f000 fc32 	bl	d922c <__adddf3>
   d89c8:	4606      	mov	r6, r0
   d89ca:	460f      	mov	r7, r1
   d89cc:	4602      	mov	r2, r0
   d89ce:	460b      	mov	r3, r1
   d89d0:	4640      	mov	r0, r8
   d89d2:	4649      	mov	r1, r9
   d89d4:	f000 fc2a 	bl	d922c <__adddf3>
   d89d8:	4642      	mov	r2, r8
   d89da:	464b      	mov	r3, r9
   d89dc:	4604      	mov	r4, r0
   d89de:	460d      	mov	r5, r1
   d89e0:	f000 fc22 	bl	d9228 <__aeabi_dsub>
   d89e4:	4602      	mov	r2, r0
   d89e6:	460b      	mov	r3, r1
   d89e8:	4630      	mov	r0, r6
   d89ea:	4639      	mov	r1, r7
   d89ec:	f000 fc1c 	bl	d9228 <__aeabi_dsub>
   d89f0:	4622      	mov	r2, r4
   d89f2:	4680      	mov	r8, r0
   d89f4:	4689      	mov	r9, r1
   d89f6:	462b      	mov	r3, r5
   d89f8:	4620      	mov	r0, r4
   d89fa:	4629      	mov	r1, r5
   d89fc:	f000 fdc8 	bl	d9590 <__aeabi_dmul>
   d8a00:	a377      	add	r3, pc, #476	; (adr r3, d8be0 <__ieee754_pow+0x8f8>)
   d8a02:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a06:	4606      	mov	r6, r0
   d8a08:	460f      	mov	r7, r1
   d8a0a:	f000 fdc1 	bl	d9590 <__aeabi_dmul>
   d8a0e:	a376      	add	r3, pc, #472	; (adr r3, d8be8 <__ieee754_pow+0x900>)
   d8a10:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a14:	f000 fc08 	bl	d9228 <__aeabi_dsub>
   d8a18:	4632      	mov	r2, r6
   d8a1a:	463b      	mov	r3, r7
   d8a1c:	f000 fdb8 	bl	d9590 <__aeabi_dmul>
   d8a20:	a373      	add	r3, pc, #460	; (adr r3, d8bf0 <__ieee754_pow+0x908>)
   d8a22:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a26:	f000 fc01 	bl	d922c <__adddf3>
   d8a2a:	4632      	mov	r2, r6
   d8a2c:	463b      	mov	r3, r7
   d8a2e:	f000 fdaf 	bl	d9590 <__aeabi_dmul>
   d8a32:	a371      	add	r3, pc, #452	; (adr r3, d8bf8 <__ieee754_pow+0x910>)
   d8a34:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a38:	f000 fbf6 	bl	d9228 <__aeabi_dsub>
   d8a3c:	4632      	mov	r2, r6
   d8a3e:	463b      	mov	r3, r7
   d8a40:	f000 fda6 	bl	d9590 <__aeabi_dmul>
   d8a44:	a36e      	add	r3, pc, #440	; (adr r3, d8c00 <__ieee754_pow+0x918>)
   d8a46:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a4a:	f000 fbef 	bl	d922c <__adddf3>
   d8a4e:	4632      	mov	r2, r6
   d8a50:	463b      	mov	r3, r7
   d8a52:	f000 fd9d 	bl	d9590 <__aeabi_dmul>
   d8a56:	4602      	mov	r2, r0
   d8a58:	460b      	mov	r3, r1
   d8a5a:	4620      	mov	r0, r4
   d8a5c:	4629      	mov	r1, r5
   d8a5e:	f000 fbe3 	bl	d9228 <__aeabi_dsub>
   d8a62:	4606      	mov	r6, r0
   d8a64:	460f      	mov	r7, r1
   d8a66:	4602      	mov	r2, r0
   d8a68:	460b      	mov	r3, r1
   d8a6a:	4620      	mov	r0, r4
   d8a6c:	4629      	mov	r1, r5
   d8a6e:	f000 fd8f 	bl	d9590 <__aeabi_dmul>
   d8a72:	2200      	movs	r2, #0
   d8a74:	e9cd 0100 	strd	r0, r1, [sp]
   d8a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8a7c:	4630      	mov	r0, r6
   d8a7e:	4639      	mov	r1, r7
   d8a80:	f000 fbd2 	bl	d9228 <__aeabi_dsub>
   d8a84:	4602      	mov	r2, r0
   d8a86:	460b      	mov	r3, r1
   d8a88:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8a8c:	f000 feaa 	bl	d97e4 <__aeabi_ddiv>
   d8a90:	4642      	mov	r2, r8
   d8a92:	4606      	mov	r6, r0
   d8a94:	460f      	mov	r7, r1
   d8a96:	464b      	mov	r3, r9
   d8a98:	4620      	mov	r0, r4
   d8a9a:	4629      	mov	r1, r5
   d8a9c:	f000 fd78 	bl	d9590 <__aeabi_dmul>
   d8aa0:	4642      	mov	r2, r8
   d8aa2:	464b      	mov	r3, r9
   d8aa4:	f000 fbc2 	bl	d922c <__adddf3>
   d8aa8:	4602      	mov	r2, r0
   d8aaa:	460b      	mov	r3, r1
   d8aac:	4630      	mov	r0, r6
   d8aae:	4639      	mov	r1, r7
   d8ab0:	f000 fbba 	bl	d9228 <__aeabi_dsub>
   d8ab4:	4622      	mov	r2, r4
   d8ab6:	462b      	mov	r3, r5
   d8ab8:	f000 fbb6 	bl	d9228 <__aeabi_dsub>
   d8abc:	4602      	mov	r2, r0
   d8abe:	460b      	mov	r3, r1
   d8ac0:	2000      	movs	r0, #0
   d8ac2:	4959      	ldr	r1, [pc, #356]	; (d8c28 <__ieee754_pow+0x940>)
   d8ac4:	f000 fbb0 	bl	d9228 <__aeabi_dsub>
   d8ac8:	448a      	add	sl, r1
   d8aca:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d8ace:	4602      	mov	r2, r0
   d8ad0:	460b      	mov	r3, r1
   d8ad2:	f2c0 815b 	blt.w	d8d8c <__ieee754_pow+0xaa4>
   d8ad6:	4651      	mov	r1, sl
   d8ad8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8adc:	f000 fd58 	bl	d9590 <__aeabi_dmul>
   d8ae0:	ec41 0b10 	vmov	d0, r0, r1
   d8ae4:	e449      	b.n	d837a <__ieee754_pow+0x92>
   d8ae6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d8aea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d8aee:	ea54 030b 	orrs.w	r3, r4, fp
   d8af2:	f000 8137 	beq.w	d8d64 <__ieee754_pow+0xa7c>
   d8af6:	f1bb 0f01 	cmp.w	fp, #1
   d8afa:	f47f ac80 	bne.w	d83fe <__ieee754_pow+0x116>
   d8afe:	4602      	mov	r2, r0
   d8b00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8b04:	ec43 2b10 	vmov	d0, r2, r3
   d8b08:	e437      	b.n	d837a <__ieee754_pow+0x92>
   d8b0a:	4632      	mov	r2, r6
   d8b0c:	463b      	mov	r3, r7
   d8b0e:	4630      	mov	r0, r6
   d8b10:	4639      	mov	r1, r7
   d8b12:	f000 fd3d 	bl	d9590 <__aeabi_dmul>
   d8b16:	ec41 0b10 	vmov	d0, r0, r1
   d8b1a:	e42e      	b.n	d837a <__ieee754_pow+0x92>
   d8b1c:	4b43      	ldr	r3, [pc, #268]	; (d8c2c <__ieee754_pow+0x944>)
   d8b1e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d8b22:	4598      	cmp	r8, r3
   d8b24:	f340 8115 	ble.w	d8d52 <__ieee754_pow+0xa6a>
   d8b28:	4b41      	ldr	r3, [pc, #260]	; (d8c30 <__ieee754_pow+0x948>)
   d8b2a:	440b      	add	r3, r1
   d8b2c:	4303      	orrs	r3, r0
   d8b2e:	d10c      	bne.n	d8b4a <__ieee754_pow+0x862>
   d8b30:	4632      	mov	r2, r6
   d8b32:	463b      	mov	r3, r7
   d8b34:	f000 fb78 	bl	d9228 <__aeabi_dsub>
   d8b38:	4602      	mov	r2, r0
   d8b3a:	460b      	mov	r3, r1
   d8b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8b40:	f000 ffa2 	bl	d9a88 <__aeabi_dcmple>
   d8b44:	2800      	cmp	r0, #0
   d8b46:	f43f aee6 	beq.w	d8916 <__ieee754_pow+0x62e>
   d8b4a:	a32f      	add	r3, pc, #188	; (adr r3, d8c08 <__ieee754_pow+0x920>)
   d8b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8b54:	f000 fd1c 	bl	d9590 <__aeabi_dmul>
   d8b58:	a32b      	add	r3, pc, #172	; (adr r3, d8c08 <__ieee754_pow+0x920>)
   d8b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b5e:	f000 fd17 	bl	d9590 <__aeabi_dmul>
   d8b62:	ec41 0b10 	vmov	d0, r0, r1
   d8b66:	e408      	b.n	d837a <__ieee754_pow+0x92>
   d8b68:	ed9f 7b29 	vldr	d7, [pc, #164]	; d8c10 <__ieee754_pow+0x928>
   d8b6c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8b70:	e676      	b.n	d8860 <__ieee754_pow+0x578>
   d8b72:	f1b9 0f00 	cmp.w	r9, #0
   d8b76:	f6bf ac8e 	bge.w	d8496 <__ieee754_pow+0x1ae>
   d8b7a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8b7e:	ee00 3a10 	vmov	s0, r3
   d8b82:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d8b86:	ee00 3a90 	vmov	s1, r3
   d8b8a:	f7ff bbf6 	b.w	d837a <__ieee754_pow+0x92>
   d8b8e:	4602      	mov	r2, r0
   d8b90:	460b      	mov	r3, r1
   d8b92:	2000      	movs	r0, #0
   d8b94:	4924      	ldr	r1, [pc, #144]	; (d8c28 <__ieee754_pow+0x940>)
   d8b96:	f000 fe25 	bl	d97e4 <__aeabi_ddiv>
   d8b9a:	e42d      	b.n	d83f8 <__ieee754_pow+0x110>
   d8b9c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d8c18 <__ieee754_pow+0x930>
   d8ba0:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8ba4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8ba8:	ed9f 7b03 	vldr	d7, [pc, #12]	; d8bb8 <__ieee754_pow+0x8d0>
   d8bac:	f04f 0800 	mov.w	r8, #0
   d8bb0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8bb4:	e4be      	b.n	d8534 <__ieee754_pow+0x24c>
   d8bb6:	bf00      	nop
   d8bb8:	00000000 	.word	0x00000000
   d8bbc:	3ff00000 	.word	0x3ff00000
   d8bc0:	652b82fe 	.word	0x652b82fe
   d8bc4:	3c971547 	.word	0x3c971547
   d8bc8:	00000000 	.word	0x00000000
   d8bcc:	3fe62e43 	.word	0x3fe62e43
   d8bd0:	fefa39ef 	.word	0xfefa39ef
   d8bd4:	3fe62e42 	.word	0x3fe62e42
   d8bd8:	0ca86c39 	.word	0x0ca86c39
   d8bdc:	be205c61 	.word	0xbe205c61
   d8be0:	72bea4d0 	.word	0x72bea4d0
   d8be4:	3e663769 	.word	0x3e663769
   d8be8:	c5d26bf1 	.word	0xc5d26bf1
   d8bec:	3ebbbd41 	.word	0x3ebbbd41
   d8bf0:	af25de2c 	.word	0xaf25de2c
   d8bf4:	3f11566a 	.word	0x3f11566a
   d8bf8:	16bebd93 	.word	0x16bebd93
   d8bfc:	3f66c16c 	.word	0x3f66c16c
   d8c00:	5555553e 	.word	0x5555553e
   d8c04:	3fc55555 	.word	0x3fc55555
   d8c08:	c2f8f359 	.word	0xc2f8f359
   d8c0c:	01a56e1f 	.word	0x01a56e1f
   d8c10:	00000000 	.word	0x00000000
   d8c14:	bff00000 	.word	0xbff00000
	...
   d8c20:	408fffff 	.word	0x408fffff
   d8c24:	000fffff 	.word	0x000fffff
   d8c28:	3ff00000 	.word	0x3ff00000
   d8c2c:	4090cbff 	.word	0x4090cbff
   d8c30:	3f6f3400 	.word	0x3f6f3400
   d8c34:	4b6c      	ldr	r3, [pc, #432]	; (d8de8 <__ieee754_pow+0xb00>)
   d8c36:	429c      	cmp	r4, r3
   d8c38:	f77f ac2a 	ble.w	d8490 <__ieee754_pow+0x1a8>
   d8c3c:	4b6b      	ldr	r3, [pc, #428]	; (d8dec <__ieee754_pow+0xb04>)
   d8c3e:	429c      	cmp	r4, r3
   d8c40:	f73f abc3 	bgt.w	d83ca <__ieee754_pow+0xe2>
   d8c44:	2200      	movs	r2, #0
   d8c46:	4b69      	ldr	r3, [pc, #420]	; (d8dec <__ieee754_pow+0xb04>)
   d8c48:	f000 faee 	bl	d9228 <__aeabi_dsub>
   d8c4c:	a356      	add	r3, pc, #344	; (adr r3, d8da8 <__ieee754_pow+0xac0>)
   d8c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c52:	4604      	mov	r4, r0
   d8c54:	460d      	mov	r5, r1
   d8c56:	f000 fc9b 	bl	d9590 <__aeabi_dmul>
   d8c5a:	a355      	add	r3, pc, #340	; (adr r3, d8db0 <__ieee754_pow+0xac8>)
   d8c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c60:	4680      	mov	r8, r0
   d8c62:	4689      	mov	r9, r1
   d8c64:	4620      	mov	r0, r4
   d8c66:	4629      	mov	r1, r5
   d8c68:	f000 fc92 	bl	d9590 <__aeabi_dmul>
   d8c6c:	2200      	movs	r2, #0
   d8c6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8c72:	4b5f      	ldr	r3, [pc, #380]	; (d8df0 <__ieee754_pow+0xb08>)
   d8c74:	4620      	mov	r0, r4
   d8c76:	4629      	mov	r1, r5
   d8c78:	f000 fc8a 	bl	d9590 <__aeabi_dmul>
   d8c7c:	4602      	mov	r2, r0
   d8c7e:	460b      	mov	r3, r1
   d8c80:	a14d      	add	r1, pc, #308	; (adr r1, d8db8 <__ieee754_pow+0xad0>)
   d8c82:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8c86:	f000 facf 	bl	d9228 <__aeabi_dsub>
   d8c8a:	4622      	mov	r2, r4
   d8c8c:	462b      	mov	r3, r5
   d8c8e:	f000 fc7f 	bl	d9590 <__aeabi_dmul>
   d8c92:	4602      	mov	r2, r0
   d8c94:	460b      	mov	r3, r1
   d8c96:	2000      	movs	r0, #0
   d8c98:	4956      	ldr	r1, [pc, #344]	; (d8df4 <__ieee754_pow+0xb0c>)
   d8c9a:	f000 fac5 	bl	d9228 <__aeabi_dsub>
   d8c9e:	4622      	mov	r2, r4
   d8ca0:	462b      	mov	r3, r5
   d8ca2:	4606      	mov	r6, r0
   d8ca4:	460f      	mov	r7, r1
   d8ca6:	4620      	mov	r0, r4
   d8ca8:	4629      	mov	r1, r5
   d8caa:	f000 fc71 	bl	d9590 <__aeabi_dmul>
   d8cae:	4602      	mov	r2, r0
   d8cb0:	460b      	mov	r3, r1
   d8cb2:	4630      	mov	r0, r6
   d8cb4:	4639      	mov	r1, r7
   d8cb6:	f000 fc6b 	bl	d9590 <__aeabi_dmul>
   d8cba:	a341      	add	r3, pc, #260	; (adr r3, d8dc0 <__ieee754_pow+0xad8>)
   d8cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8cc0:	f000 fc66 	bl	d9590 <__aeabi_dmul>
   d8cc4:	4602      	mov	r2, r0
   d8cc6:	460b      	mov	r3, r1
   d8cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d8ccc:	f000 faac 	bl	d9228 <__aeabi_dsub>
   d8cd0:	4602      	mov	r2, r0
   d8cd2:	460b      	mov	r3, r1
   d8cd4:	4604      	mov	r4, r0
   d8cd6:	460d      	mov	r5, r1
   d8cd8:	4640      	mov	r0, r8
   d8cda:	4649      	mov	r1, r9
   d8cdc:	f000 faa6 	bl	d922c <__adddf3>
   d8ce0:	4642      	mov	r2, r8
   d8ce2:	464b      	mov	r3, r9
   d8ce4:	2000      	movs	r0, #0
   d8ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8cea:	f000 fa9d 	bl	d9228 <__aeabi_dsub>
   d8cee:	4602      	mov	r2, r0
   d8cf0:	460b      	mov	r3, r1
   d8cf2:	4620      	mov	r0, r4
   d8cf4:	4629      	mov	r1, r5
   d8cf6:	f000 fa97 	bl	d9228 <__aeabi_dsub>
   d8cfa:	4680      	mov	r8, r0
   d8cfc:	4689      	mov	r9, r1
   d8cfe:	e5a5      	b.n	d884c <__ieee754_pow+0x564>
   d8d00:	4632      	mov	r2, r6
   d8d02:	463b      	mov	r3, r7
   d8d04:	2000      	movs	r0, #0
   d8d06:	4939      	ldr	r1, [pc, #228]	; (d8dec <__ieee754_pow+0xb04>)
   d8d08:	f000 fd6c 	bl	d97e4 <__aeabi_ddiv>
   d8d0c:	ec41 0b10 	vmov	d0, r0, r1
   d8d10:	f7ff bb33 	b.w	d837a <__ieee754_pow+0x92>
   d8d14:	a32c      	add	r3, pc, #176	; (adr r3, d8dc8 <__ieee754_pow+0xae0>)
   d8d16:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8d1e:	f000 fc37 	bl	d9590 <__aeabi_dmul>
   d8d22:	a329      	add	r3, pc, #164	; (adr r3, d8dc8 <__ieee754_pow+0xae0>)
   d8d24:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d28:	f000 fc32 	bl	d9590 <__aeabi_dmul>
   d8d2c:	ec41 0b10 	vmov	d0, r0, r1
   d8d30:	f7ff bb23 	b.w	d837a <__ieee754_pow+0x92>
   d8d34:	f1be 0f00 	cmp.w	lr, #0
   d8d38:	f47f ab2a 	bne.w	d8390 <__ieee754_pow+0xa8>
   d8d3c:	f1c3 0314 	rsb	r3, r3, #20
   d8d40:	fa48 f203 	asr.w	r2, r8, r3
   d8d44:	fa02 f303 	lsl.w	r3, r2, r3
   d8d48:	4598      	cmp	r8, r3
   d8d4a:	d027      	beq.n	d8d9c <__ieee754_pow+0xab4>
   d8d4c:	46f3      	mov	fp, lr
   d8d4e:	f7ff baf7 	b.w	d8340 <__ieee754_pow+0x58>
   d8d52:	4b28      	ldr	r3, [pc, #160]	; (d8df4 <__ieee754_pow+0xb0c>)
   d8d54:	4598      	cmp	r8, r3
   d8d56:	f73f adde 	bgt.w	d8916 <__ieee754_pow+0x62e>
   d8d5a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8d5e:	469a      	mov	sl, r3
   d8d60:	469b      	mov	fp, r3
   d8d62:	e607      	b.n	d8974 <__ieee754_pow+0x68c>
   d8d64:	4602      	mov	r2, r0
   d8d66:	460b      	mov	r3, r1
   d8d68:	f7ff bb89 	b.w	d847e <__ieee754_pow+0x196>
   d8d6c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8dd0 <__ieee754_pow+0xae8>
   d8d70:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8d74:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8dd8 <__ieee754_pow+0xaf0>
   d8d78:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8d7c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8de0 <__ieee754_pow+0xaf8>
   d8d80:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d8d84:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8d88:	f7ff bbd4 	b.w	d8534 <__ieee754_pow+0x24c>
   d8d8c:	4658      	mov	r0, fp
   d8d8e:	ec43 2b10 	vmov	d0, r2, r3
   d8d92:	f000 f9b1 	bl	d90f8 <scalbn>
   d8d96:	ec51 0b10 	vmov	r0, r1, d0
   d8d9a:	e69d      	b.n	d8ad8 <__ieee754_pow+0x7f0>
   d8d9c:	f002 0201 	and.w	r2, r2, #1
   d8da0:	f1c2 0b02 	rsb	fp, r2, #2
   d8da4:	f7ff bacc 	b.w	d8340 <__ieee754_pow+0x58>
   d8da8:	60000000 	.word	0x60000000
   d8dac:	3ff71547 	.word	0x3ff71547
   d8db0:	f85ddf44 	.word	0xf85ddf44
   d8db4:	3e54ae0b 	.word	0x3e54ae0b
   d8db8:	55555555 	.word	0x55555555
   d8dbc:	3fd55555 	.word	0x3fd55555
   d8dc0:	652b82fe 	.word	0x652b82fe
   d8dc4:	3ff71547 	.word	0x3ff71547
   d8dc8:	8800759c 	.word	0x8800759c
   d8dcc:	7e37e43c 	.word	0x7e37e43c
   d8dd0:	40000000 	.word	0x40000000
   d8dd4:	3fe2b803 	.word	0x3fe2b803
   d8dd8:	43cfd006 	.word	0x43cfd006
   d8ddc:	3e4cfdeb 	.word	0x3e4cfdeb
   d8de0:	00000000 	.word	0x00000000
   d8de4:	3ff80000 	.word	0x3ff80000
   d8de8:	3feffffe 	.word	0x3feffffe
   d8dec:	3ff00000 	.word	0x3ff00000
   d8df0:	3fd00000 	.word	0x3fd00000
   d8df4:	3fe00000 	.word	0x3fe00000

000d8df8 <__ieee754_sqrt>:
   d8df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8dfc:	4965      	ldr	r1, [pc, #404]	; (d8f94 <__ieee754_sqrt+0x19c>)
   d8dfe:	ec55 4b10 	vmov	r4, r5, d0
   d8e02:	460e      	mov	r6, r1
   d8e04:	4029      	ands	r1, r5
   d8e06:	42b1      	cmp	r1, r6
   d8e08:	f000 8097 	beq.w	d8f3a <__ieee754_sqrt+0x142>
   d8e0c:	2d00      	cmp	r5, #0
   d8e0e:	462b      	mov	r3, r5
   d8e10:	ee10 2a10 	vmov	r2, s0
   d8e14:	dd74      	ble.n	d8f00 <__ieee754_sqrt+0x108>
   d8e16:	152f      	asrs	r7, r5, #20
   d8e18:	d07f      	beq.n	d8f1a <__ieee754_sqrt+0x122>
   d8e1a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d8e1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8e22:	07f9      	lsls	r1, r7, #31
   d8e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8e28:	d465      	bmi.n	d8ef6 <__ieee754_sqrt+0xfe>
   d8e2a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d8e2e:	2600      	movs	r6, #0
   d8e30:	440b      	add	r3, r1
   d8e32:	107f      	asrs	r7, r7, #1
   d8e34:	0052      	lsls	r2, r2, #1
   d8e36:	46b6      	mov	lr, r6
   d8e38:	2016      	movs	r0, #22
   d8e3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d8e3e:	eb0e 0401 	add.w	r4, lr, r1
   d8e42:	429c      	cmp	r4, r3
   d8e44:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d8e48:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8e4c:	dc03      	bgt.n	d8e56 <__ieee754_sqrt+0x5e>
   d8e4e:	1b1b      	subs	r3, r3, r4
   d8e50:	eb04 0e01 	add.w	lr, r4, r1
   d8e54:	440e      	add	r6, r1
   d8e56:	3801      	subs	r0, #1
   d8e58:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d8e5c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8e60:	d1ed      	bne.n	d8e3e <__ieee754_sqrt+0x46>
   d8e62:	4684      	mov	ip, r0
   d8e64:	2420      	movs	r4, #32
   d8e66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d8e6a:	e009      	b.n	d8e80 <__ieee754_sqrt+0x88>
   d8e6c:	d020      	beq.n	d8eb0 <__ieee754_sqrt+0xb8>
   d8e6e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d8e72:	3c01      	subs	r4, #1
   d8e74:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8e78:	442b      	add	r3, r5
   d8e7a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8e7e:	d020      	beq.n	d8ec2 <__ieee754_sqrt+0xca>
   d8e80:	459e      	cmp	lr, r3
   d8e82:	eb01 050c 	add.w	r5, r1, ip
   d8e86:	daf1      	bge.n	d8e6c <__ieee754_sqrt+0x74>
   d8e88:	2d00      	cmp	r5, #0
   d8e8a:	eb05 0c01 	add.w	ip, r5, r1
   d8e8e:	db09      	blt.n	d8ea4 <__ieee754_sqrt+0xac>
   d8e90:	46f0      	mov	r8, lr
   d8e92:	4295      	cmp	r5, r2
   d8e94:	ebce 0303 	rsb	r3, lr, r3
   d8e98:	d900      	bls.n	d8e9c <__ieee754_sqrt+0xa4>
   d8e9a:	3b01      	subs	r3, #1
   d8e9c:	1b52      	subs	r2, r2, r5
   d8e9e:	4408      	add	r0, r1
   d8ea0:	46c6      	mov	lr, r8
   d8ea2:	e7e4      	b.n	d8e6e <__ieee754_sqrt+0x76>
   d8ea4:	f1bc 0f00 	cmp.w	ip, #0
   d8ea8:	dbf2      	blt.n	d8e90 <__ieee754_sqrt+0x98>
   d8eaa:	f10e 0801 	add.w	r8, lr, #1
   d8eae:	e7f0      	b.n	d8e92 <__ieee754_sqrt+0x9a>
   d8eb0:	4295      	cmp	r5, r2
   d8eb2:	d81e      	bhi.n	d8ef2 <__ieee754_sqrt+0xfa>
   d8eb4:	2d00      	cmp	r5, #0
   d8eb6:	eb05 0c01 	add.w	ip, r5, r1
   d8eba:	db50      	blt.n	d8f5e <__ieee754_sqrt+0x166>
   d8ebc:	4698      	mov	r8, r3
   d8ebe:	2300      	movs	r3, #0
   d8ec0:	e7ec      	b.n	d8e9c <__ieee754_sqrt+0xa4>
   d8ec2:	4313      	orrs	r3, r2
   d8ec4:	d004      	beq.n	d8ed0 <__ieee754_sqrt+0xd8>
   d8ec6:	1c42      	adds	r2, r0, #1
   d8ec8:	d04d      	beq.n	d8f66 <__ieee754_sqrt+0x16e>
   d8eca:	f000 0301 	and.w	r3, r0, #1
   d8ece:	4418      	add	r0, r3
   d8ed0:	0840      	lsrs	r0, r0, #1
   d8ed2:	1071      	asrs	r1, r6, #1
   d8ed4:	07f3      	lsls	r3, r6, #31
   d8ed6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8eda:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8ede:	bf48      	it	mi
   d8ee0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d8ee4:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d8ee8:	4602      	mov	r2, r0
   d8eea:	ec43 2b10 	vmov	d0, r2, r3
   d8eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8ef2:	4673      	mov	r3, lr
   d8ef4:	e7bb      	b.n	d8e6e <__ieee754_sqrt+0x76>
   d8ef6:	005b      	lsls	r3, r3, #1
   d8ef8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d8efc:	0052      	lsls	r2, r2, #1
   d8efe:	e794      	b.n	d8e2a <__ieee754_sqrt+0x32>
   d8f00:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d8f04:	4321      	orrs	r1, r4
   d8f06:	d028      	beq.n	d8f5a <__ieee754_sqrt+0x162>
   d8f08:	bbad      	cbnz	r5, d8f76 <__ieee754_sqrt+0x17e>
   d8f0a:	462f      	mov	r7, r5
   d8f0c:	0ad3      	lsrs	r3, r2, #11
   d8f0e:	3f15      	subs	r7, #21
   d8f10:	0552      	lsls	r2, r2, #21
   d8f12:	2b00      	cmp	r3, #0
   d8f14:	d0fa      	beq.n	d8f0c <__ieee754_sqrt+0x114>
   d8f16:	02dd      	lsls	r5, r3, #11
   d8f18:	d428      	bmi.n	d8f6c <__ieee754_sqrt+0x174>
   d8f1a:	2100      	movs	r1, #0
   d8f1c:	e000      	b.n	d8f20 <__ieee754_sqrt+0x128>
   d8f1e:	4601      	mov	r1, r0
   d8f20:	005b      	lsls	r3, r3, #1
   d8f22:	02dc      	lsls	r4, r3, #11
   d8f24:	f101 0001 	add.w	r0, r1, #1
   d8f28:	d5f9      	bpl.n	d8f1e <__ieee754_sqrt+0x126>
   d8f2a:	f1c0 0420 	rsb	r4, r0, #32
   d8f2e:	fa22 f404 	lsr.w	r4, r2, r4
   d8f32:	4323      	orrs	r3, r4
   d8f34:	1a7f      	subs	r7, r7, r1
   d8f36:	4082      	lsls	r2, r0
   d8f38:	e76f      	b.n	d8e1a <__ieee754_sqrt+0x22>
   d8f3a:	ee10 2a10 	vmov	r2, s0
   d8f3e:	462b      	mov	r3, r5
   d8f40:	ee10 0a10 	vmov	r0, s0
   d8f44:	4629      	mov	r1, r5
   d8f46:	f000 fb23 	bl	d9590 <__aeabi_dmul>
   d8f4a:	4622      	mov	r2, r4
   d8f4c:	462b      	mov	r3, r5
   d8f4e:	f000 f96d 	bl	d922c <__adddf3>
   d8f52:	ec41 0b10 	vmov	d0, r0, r1
   d8f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f5e:	f1bc 0f00 	cmp.w	ip, #0
   d8f62:	daa2      	bge.n	d8eaa <__ieee754_sqrt+0xb2>
   d8f64:	e7aa      	b.n	d8ebc <__ieee754_sqrt+0xc4>
   d8f66:	3601      	adds	r6, #1
   d8f68:	4620      	mov	r0, r4
   d8f6a:	e7b2      	b.n	d8ed2 <__ieee754_sqrt+0xda>
   d8f6c:	2420      	movs	r4, #32
   d8f6e:	f04f 31ff 	mov.w	r1, #4294967295
   d8f72:	2000      	movs	r0, #0
   d8f74:	e7db      	b.n	d8f2e <__ieee754_sqrt+0x136>
   d8f76:	ee10 2a10 	vmov	r2, s0
   d8f7a:	462b      	mov	r3, r5
   d8f7c:	4620      	mov	r0, r4
   d8f7e:	4629      	mov	r1, r5
   d8f80:	f000 f952 	bl	d9228 <__aeabi_dsub>
   d8f84:	4602      	mov	r2, r0
   d8f86:	460b      	mov	r3, r1
   d8f88:	f000 fc2c 	bl	d97e4 <__aeabi_ddiv>
   d8f8c:	ec41 0b10 	vmov	d0, r0, r1
   d8f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f94:	7ff00000 	.word	0x7ff00000

000d8f98 <fabs>:
   d8f98:	ec53 2b10 	vmov	r2, r3, d0
   d8f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d8fa0:	ec43 2b10 	vmov	d0, r2, r3
   d8fa4:	4770      	bx	lr
   d8fa6:	bf00      	nop

000d8fa8 <finite>:
   d8fa8:	ee10 3a90 	vmov	r3, s1
   d8fac:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d8fb0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8fb4:	0fc0      	lsrs	r0, r0, #31
   d8fb6:	4770      	bx	lr

000d8fb8 <matherr>:
   d8fb8:	2000      	movs	r0, #0
   d8fba:	4770      	bx	lr
   d8fbc:	0000      	movs	r0, r0
	...

000d8fc0 <nan>:
   d8fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8fc8 <nan+0x8>
   d8fc4:	4770      	bx	lr
   d8fc6:	bf00      	nop
   d8fc8:	00000000 	.word	0x00000000
   d8fcc:	7ff80000 	.word	0x7ff80000

000d8fd0 <rint>:
   d8fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8fd2:	ec53 2b10 	vmov	r2, r3, d0
   d8fd6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d8fda:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d8fde:	2813      	cmp	r0, #19
   d8fe0:	b083      	sub	sp, #12
   d8fe2:	4619      	mov	r1, r3
   d8fe4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d8fe8:	ee10 5a10 	vmov	r5, s0
   d8fec:	dc2f      	bgt.n	d904e <rint+0x7e>
   d8fee:	2800      	cmp	r0, #0
   d8ff0:	db49      	blt.n	d9086 <rint+0xb6>
   d8ff2:	4e3f      	ldr	r6, [pc, #252]	; (d90f0 <rint+0x120>)
   d8ff4:	4106      	asrs	r6, r0
   d8ff6:	ea03 0706 	and.w	r7, r3, r6
   d8ffa:	4317      	orrs	r7, r2
   d8ffc:	d02c      	beq.n	d9058 <rint+0x88>
   d8ffe:	0876      	lsrs	r6, r6, #1
   d9000:	4033      	ands	r3, r6
   d9002:	431d      	orrs	r5, r3
   d9004:	d00c      	beq.n	d9020 <rint+0x50>
   d9006:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d900a:	2813      	cmp	r0, #19
   d900c:	ea21 0606 	bic.w	r6, r1, r6
   d9010:	fa43 f100 	asr.w	r1, r3, r0
   d9014:	ea41 0106 	orr.w	r1, r1, r6
   d9018:	bf0c      	ite	eq
   d901a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d901e:	2500      	movne	r5, #0
   d9020:	4834      	ldr	r0, [pc, #208]	; (d90f4 <rint+0x124>)
   d9022:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d9026:	462a      	mov	r2, r5
   d9028:	e9d4 4500 	ldrd	r4, r5, [r4]
   d902c:	4610      	mov	r0, r2
   d902e:	462b      	mov	r3, r5
   d9030:	4622      	mov	r2, r4
   d9032:	f000 f8fb 	bl	d922c <__adddf3>
   d9036:	e9cd 0100 	strd	r0, r1, [sp]
   d903a:	4622      	mov	r2, r4
   d903c:	462b      	mov	r3, r5
   d903e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9042:	f000 f8f1 	bl	d9228 <__aeabi_dsub>
   d9046:	ec41 0b10 	vmov	d0, r0, r1
   d904a:	b003      	add	sp, #12
   d904c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d904e:	2833      	cmp	r0, #51	; 0x33
   d9050:	dd06      	ble.n	d9060 <rint+0x90>
   d9052:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d9056:	d042      	beq.n	d90de <rint+0x10e>
   d9058:	ec43 2b10 	vmov	d0, r2, r3
   d905c:	b003      	add	sp, #12
   d905e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9060:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d9064:	f04f 30ff 	mov.w	r0, #4294967295
   d9068:	40f0      	lsrs	r0, r6
   d906a:	4202      	tst	r2, r0
   d906c:	d0f4      	beq.n	d9058 <rint+0x88>
   d906e:	0840      	lsrs	r0, r0, #1
   d9070:	4202      	tst	r2, r0
   d9072:	d0d5      	beq.n	d9020 <rint+0x50>
   d9074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9078:	ea25 0000 	bic.w	r0, r5, r0
   d907c:	fa43 f606 	asr.w	r6, r3, r6
   d9080:	ea46 0500 	orr.w	r5, r6, r0
   d9084:	e7cc      	b.n	d9020 <rint+0x50>
   d9086:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d908a:	4310      	orrs	r0, r2
   d908c:	ee10 7a10 	vmov	r7, s0
   d9090:	d0e2      	beq.n	d9058 <rint+0x88>
   d9092:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d9096:	4307      	orrs	r7, r0
   d9098:	4278      	negs	r0, r7
   d909a:	4307      	orrs	r7, r0
   d909c:	4815      	ldr	r0, [pc, #84]	; (d90f4 <rint+0x124>)
   d909e:	0c59      	lsrs	r1, r3, #17
   d90a0:	0b3f      	lsrs	r7, r7, #12
   d90a2:	0449      	lsls	r1, r1, #17
   d90a4:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d90a8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d90ac:	ea47 0301 	orr.w	r3, r7, r1
   d90b0:	e9d0 6700 	ldrd	r6, r7, [r0]
   d90b4:	4619      	mov	r1, r3
   d90b6:	4610      	mov	r0, r2
   d90b8:	463b      	mov	r3, r7
   d90ba:	4632      	mov	r2, r6
   d90bc:	f000 f8b6 	bl	d922c <__adddf3>
   d90c0:	e9cd 0100 	strd	r0, r1, [sp]
   d90c4:	463b      	mov	r3, r7
   d90c6:	4632      	mov	r2, r6
   d90c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d90cc:	f000 f8ac 	bl	d9228 <__aeabi_dsub>
   d90d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d90d4:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d90d8:	ec41 0b10 	vmov	d0, r0, r1
   d90dc:	e7be      	b.n	d905c <rint+0x8c>
   d90de:	ee10 0a10 	vmov	r0, s0
   d90e2:	4619      	mov	r1, r3
   d90e4:	f000 f8a2 	bl	d922c <__adddf3>
   d90e8:	ec41 0b10 	vmov	d0, r0, r1
   d90ec:	e7b6      	b.n	d905c <rint+0x8c>
   d90ee:	bf00      	nop
   d90f0:	000fffff 	.word	0x000fffff
   d90f4:	000dae58 	.word	0x000dae58

000d90f8 <scalbn>:
   d90f8:	ec53 2b10 	vmov	r2, r3, d0
   d90fc:	b570      	push	{r4, r5, r6, lr}
   d90fe:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d9102:	4619      	mov	r1, r3
   d9104:	4605      	mov	r5, r0
   d9106:	bb14      	cbnz	r4, d914e <scalbn+0x56>
   d9108:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d910c:	4311      	orrs	r1, r2
   d910e:	d02a      	beq.n	d9166 <scalbn+0x6e>
   d9110:	4619      	mov	r1, r3
   d9112:	2200      	movs	r2, #0
   d9114:	4b38      	ldr	r3, [pc, #224]	; (d91f8 <scalbn+0x100>)
   d9116:	4e39      	ldr	r6, [pc, #228]	; (d91fc <scalbn+0x104>)
   d9118:	ee10 0a10 	vmov	r0, s0
   d911c:	f000 fa38 	bl	d9590 <__aeabi_dmul>
   d9120:	42b5      	cmp	r5, r6
   d9122:	4602      	mov	r2, r0
   d9124:	460b      	mov	r3, r1
   d9126:	db1f      	blt.n	d9168 <scalbn+0x70>
   d9128:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d912c:	3c36      	subs	r4, #54	; 0x36
   d912e:	442c      	add	r4, r5
   d9130:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d9134:	4284      	cmp	r4, r0
   d9136:	dc1f      	bgt.n	d9178 <scalbn+0x80>
   d9138:	2c00      	cmp	r4, #0
   d913a:	dd2d      	ble.n	d9198 <scalbn+0xa0>
   d913c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d9140:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d9144:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d9148:	ec43 2b10 	vmov	d0, r2, r3
   d914c:	bd70      	pop	{r4, r5, r6, pc}
   d914e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d9152:	4284      	cmp	r4, r0
   d9154:	d1eb      	bne.n	d912e <scalbn+0x36>
   d9156:	ee10 0a10 	vmov	r0, s0
   d915a:	4619      	mov	r1, r3
   d915c:	f000 f866 	bl	d922c <__adddf3>
   d9160:	ec41 0b10 	vmov	d0, r0, r1
   d9164:	bd70      	pop	{r4, r5, r6, pc}
   d9166:	bd70      	pop	{r4, r5, r6, pc}
   d9168:	a31f      	add	r3, pc, #124	; (adr r3, d91e8 <scalbn+0xf0>)
   d916a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d916e:	f000 fa0f 	bl	d9590 <__aeabi_dmul>
   d9172:	ec41 0b10 	vmov	d0, r0, r1
   d9176:	bd70      	pop	{r4, r5, r6, pc}
   d9178:	ec43 2b11 	vmov	d1, r2, r3
   d917c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d91f0 <scalbn+0xf8>
   d9180:	f000 f840 	bl	d9204 <copysign>
   d9184:	a31a      	add	r3, pc, #104	; (adr r3, d91f0 <scalbn+0xf8>)
   d9186:	e9d3 2300 	ldrd	r2, r3, [r3]
   d918a:	ec51 0b10 	vmov	r0, r1, d0
   d918e:	f000 f9ff 	bl	d9590 <__aeabi_dmul>
   d9192:	ec41 0b10 	vmov	d0, r0, r1
   d9196:	bd70      	pop	{r4, r5, r6, pc}
   d9198:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d919c:	da13      	bge.n	d91c6 <scalbn+0xce>
   d919e:	f24c 3150 	movw	r1, #50000	; 0xc350
   d91a2:	428d      	cmp	r5, r1
   d91a4:	ec43 2b11 	vmov	d1, r2, r3
   d91a8:	dce8      	bgt.n	d917c <scalbn+0x84>
   d91aa:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d91e8 <scalbn+0xf0>
   d91ae:	f000 f829 	bl	d9204 <copysign>
   d91b2:	a30d      	add	r3, pc, #52	; (adr r3, d91e8 <scalbn+0xf0>)
   d91b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91b8:	ec51 0b10 	vmov	r0, r1, d0
   d91bc:	f000 f9e8 	bl	d9590 <__aeabi_dmul>
   d91c0:	ec41 0b10 	vmov	d0, r0, r1
   d91c4:	bd70      	pop	{r4, r5, r6, pc}
   d91c6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d91ca:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d91ce:	3436      	adds	r4, #54	; 0x36
   d91d0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d91d4:	4610      	mov	r0, r2
   d91d6:	4619      	mov	r1, r3
   d91d8:	2200      	movs	r2, #0
   d91da:	4b09      	ldr	r3, [pc, #36]	; (d9200 <scalbn+0x108>)
   d91dc:	f000 f9d8 	bl	d9590 <__aeabi_dmul>
   d91e0:	ec41 0b10 	vmov	d0, r0, r1
   d91e4:	bd70      	pop	{r4, r5, r6, pc}
   d91e6:	bf00      	nop
   d91e8:	c2f8f359 	.word	0xc2f8f359
   d91ec:	01a56e1f 	.word	0x01a56e1f
   d91f0:	8800759c 	.word	0x8800759c
   d91f4:	7e37e43c 	.word	0x7e37e43c
   d91f8:	43500000 	.word	0x43500000
   d91fc:	ffff3cb0 	.word	0xffff3cb0
   d9200:	3c900000 	.word	0x3c900000

000d9204 <copysign>:
   d9204:	ec53 2b10 	vmov	r2, r3, d0
   d9208:	ee11 0a90 	vmov	r0, s3
   d920c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d9210:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d9214:	ea41 0300 	orr.w	r3, r1, r0
   d9218:	ec43 2b10 	vmov	d0, r2, r3
   d921c:	4770      	bx	lr
   d921e:	bf00      	nop

000d9220 <__aeabi_drsub>:
   d9220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9224:	e002      	b.n	d922c <__adddf3>
   d9226:	bf00      	nop

000d9228 <__aeabi_dsub>:
   d9228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d922c <__adddf3>:
   d922c:	b530      	push	{r4, r5, lr}
   d922e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9232:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9236:	ea94 0f05 	teq	r4, r5
   d923a:	bf08      	it	eq
   d923c:	ea90 0f02 	teqeq	r0, r2
   d9240:	bf1f      	itttt	ne
   d9242:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9246:	ea55 0c02 	orrsne.w	ip, r5, r2
   d924a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d924e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9252:	f000 80e2 	beq.w	d941a <__adddf3+0x1ee>
   d9256:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d925a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d925e:	bfb8      	it	lt
   d9260:	426d      	neglt	r5, r5
   d9262:	dd0c      	ble.n	d927e <__adddf3+0x52>
   d9264:	442c      	add	r4, r5
   d9266:	ea80 0202 	eor.w	r2, r0, r2
   d926a:	ea81 0303 	eor.w	r3, r1, r3
   d926e:	ea82 0000 	eor.w	r0, r2, r0
   d9272:	ea83 0101 	eor.w	r1, r3, r1
   d9276:	ea80 0202 	eor.w	r2, r0, r2
   d927a:	ea81 0303 	eor.w	r3, r1, r3
   d927e:	2d36      	cmp	r5, #54	; 0x36
   d9280:	bf88      	it	hi
   d9282:	bd30      	pophi	{r4, r5, pc}
   d9284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9288:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d928c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9294:	d002      	beq.n	d929c <__adddf3+0x70>
   d9296:	4240      	negs	r0, r0
   d9298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d929c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d92a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d92a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d92a8:	d002      	beq.n	d92b0 <__adddf3+0x84>
   d92aa:	4252      	negs	r2, r2
   d92ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d92b0:	ea94 0f05 	teq	r4, r5
   d92b4:	f000 80a7 	beq.w	d9406 <__adddf3+0x1da>
   d92b8:	f1a4 0401 	sub.w	r4, r4, #1
   d92bc:	f1d5 0e20 	rsbs	lr, r5, #32
   d92c0:	db0d      	blt.n	d92de <__adddf3+0xb2>
   d92c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d92c6:	fa22 f205 	lsr.w	r2, r2, r5
   d92ca:	1880      	adds	r0, r0, r2
   d92cc:	f141 0100 	adc.w	r1, r1, #0
   d92d0:	fa03 f20e 	lsl.w	r2, r3, lr
   d92d4:	1880      	adds	r0, r0, r2
   d92d6:	fa43 f305 	asr.w	r3, r3, r5
   d92da:	4159      	adcs	r1, r3
   d92dc:	e00e      	b.n	d92fc <__adddf3+0xd0>
   d92de:	f1a5 0520 	sub.w	r5, r5, #32
   d92e2:	f10e 0e20 	add.w	lr, lr, #32
   d92e6:	2a01      	cmp	r2, #1
   d92e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d92ec:	bf28      	it	cs
   d92ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   d92f2:	fa43 f305 	asr.w	r3, r3, r5
   d92f6:	18c0      	adds	r0, r0, r3
   d92f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d92fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9300:	d507      	bpl.n	d9312 <__adddf3+0xe6>
   d9302:	f04f 0e00 	mov.w	lr, #0
   d9306:	f1dc 0c00 	rsbs	ip, ip, #0
   d930a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d930e:	eb6e 0101 	sbc.w	r1, lr, r1
   d9312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9316:	d31b      	bcc.n	d9350 <__adddf3+0x124>
   d9318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d931c:	d30c      	bcc.n	d9338 <__adddf3+0x10c>
   d931e:	0849      	lsrs	r1, r1, #1
   d9320:	ea5f 0030 	movs.w	r0, r0, rrx
   d9324:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9328:	f104 0401 	add.w	r4, r4, #1
   d932c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9334:	f080 809a 	bcs.w	d946c <__adddf3+0x240>
   d9338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d933c:	bf08      	it	eq
   d933e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9342:	f150 0000 	adcs.w	r0, r0, #0
   d9346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d934a:	ea41 0105 	orr.w	r1, r1, r5
   d934e:	bd30      	pop	{r4, r5, pc}
   d9350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9354:	4140      	adcs	r0, r0
   d9356:	eb41 0101 	adc.w	r1, r1, r1
   d935a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d935e:	f1a4 0401 	sub.w	r4, r4, #1
   d9362:	d1e9      	bne.n	d9338 <__adddf3+0x10c>
   d9364:	f091 0f00 	teq	r1, #0
   d9368:	bf04      	itt	eq
   d936a:	4601      	moveq	r1, r0
   d936c:	2000      	moveq	r0, #0
   d936e:	fab1 f381 	clz	r3, r1
   d9372:	bf08      	it	eq
   d9374:	3320      	addeq	r3, #32
   d9376:	f1a3 030b 	sub.w	r3, r3, #11
   d937a:	f1b3 0220 	subs.w	r2, r3, #32
   d937e:	da0c      	bge.n	d939a <__adddf3+0x16e>
   d9380:	320c      	adds	r2, #12
   d9382:	dd08      	ble.n	d9396 <__adddf3+0x16a>
   d9384:	f102 0c14 	add.w	ip, r2, #20
   d9388:	f1c2 020c 	rsb	r2, r2, #12
   d938c:	fa01 f00c 	lsl.w	r0, r1, ip
   d9390:	fa21 f102 	lsr.w	r1, r1, r2
   d9394:	e00c      	b.n	d93b0 <__adddf3+0x184>
   d9396:	f102 0214 	add.w	r2, r2, #20
   d939a:	bfd8      	it	le
   d939c:	f1c2 0c20 	rsble	ip, r2, #32
   d93a0:	fa01 f102 	lsl.w	r1, r1, r2
   d93a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d93a8:	bfdc      	itt	le
   d93aa:	ea41 010c 	orrle.w	r1, r1, ip
   d93ae:	4090      	lslle	r0, r2
   d93b0:	1ae4      	subs	r4, r4, r3
   d93b2:	bfa2      	ittt	ge
   d93b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d93b8:	4329      	orrge	r1, r5
   d93ba:	bd30      	popge	{r4, r5, pc}
   d93bc:	ea6f 0404 	mvn.w	r4, r4
   d93c0:	3c1f      	subs	r4, #31
   d93c2:	da1c      	bge.n	d93fe <__adddf3+0x1d2>
   d93c4:	340c      	adds	r4, #12
   d93c6:	dc0e      	bgt.n	d93e6 <__adddf3+0x1ba>
   d93c8:	f104 0414 	add.w	r4, r4, #20
   d93cc:	f1c4 0220 	rsb	r2, r4, #32
   d93d0:	fa20 f004 	lsr.w	r0, r0, r4
   d93d4:	fa01 f302 	lsl.w	r3, r1, r2
   d93d8:	ea40 0003 	orr.w	r0, r0, r3
   d93dc:	fa21 f304 	lsr.w	r3, r1, r4
   d93e0:	ea45 0103 	orr.w	r1, r5, r3
   d93e4:	bd30      	pop	{r4, r5, pc}
   d93e6:	f1c4 040c 	rsb	r4, r4, #12
   d93ea:	f1c4 0220 	rsb	r2, r4, #32
   d93ee:	fa20 f002 	lsr.w	r0, r0, r2
   d93f2:	fa01 f304 	lsl.w	r3, r1, r4
   d93f6:	ea40 0003 	orr.w	r0, r0, r3
   d93fa:	4629      	mov	r1, r5
   d93fc:	bd30      	pop	{r4, r5, pc}
   d93fe:	fa21 f004 	lsr.w	r0, r1, r4
   d9402:	4629      	mov	r1, r5
   d9404:	bd30      	pop	{r4, r5, pc}
   d9406:	f094 0f00 	teq	r4, #0
   d940a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d940e:	bf06      	itte	eq
   d9410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9414:	3401      	addeq	r4, #1
   d9416:	3d01      	subne	r5, #1
   d9418:	e74e      	b.n	d92b8 <__adddf3+0x8c>
   d941a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d941e:	bf18      	it	ne
   d9420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9424:	d029      	beq.n	d947a <__adddf3+0x24e>
   d9426:	ea94 0f05 	teq	r4, r5
   d942a:	bf08      	it	eq
   d942c:	ea90 0f02 	teqeq	r0, r2
   d9430:	d005      	beq.n	d943e <__adddf3+0x212>
   d9432:	ea54 0c00 	orrs.w	ip, r4, r0
   d9436:	bf04      	itt	eq
   d9438:	4619      	moveq	r1, r3
   d943a:	4610      	moveq	r0, r2
   d943c:	bd30      	pop	{r4, r5, pc}
   d943e:	ea91 0f03 	teq	r1, r3
   d9442:	bf1e      	ittt	ne
   d9444:	2100      	movne	r1, #0
   d9446:	2000      	movne	r0, #0
   d9448:	bd30      	popne	{r4, r5, pc}
   d944a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d944e:	d105      	bne.n	d945c <__adddf3+0x230>
   d9450:	0040      	lsls	r0, r0, #1
   d9452:	4149      	adcs	r1, r1
   d9454:	bf28      	it	cs
   d9456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d945a:	bd30      	pop	{r4, r5, pc}
   d945c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9460:	bf3c      	itt	cc
   d9462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9466:	bd30      	popcc	{r4, r5, pc}
   d9468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d946c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9474:	f04f 0000 	mov.w	r0, #0
   d9478:	bd30      	pop	{r4, r5, pc}
   d947a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d947e:	bf1a      	itte	ne
   d9480:	4619      	movne	r1, r3
   d9482:	4610      	movne	r0, r2
   d9484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9488:	bf1c      	itt	ne
   d948a:	460b      	movne	r3, r1
   d948c:	4602      	movne	r2, r0
   d948e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9492:	bf06      	itte	eq
   d9494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9498:	ea91 0f03 	teqeq	r1, r3
   d949c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d94a0:	bd30      	pop	{r4, r5, pc}
   d94a2:	bf00      	nop

000d94a4 <__aeabi_ui2d>:
   d94a4:	f090 0f00 	teq	r0, #0
   d94a8:	bf04      	itt	eq
   d94aa:	2100      	moveq	r1, #0
   d94ac:	4770      	bxeq	lr
   d94ae:	b530      	push	{r4, r5, lr}
   d94b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d94b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d94b8:	f04f 0500 	mov.w	r5, #0
   d94bc:	f04f 0100 	mov.w	r1, #0
   d94c0:	e750      	b.n	d9364 <__adddf3+0x138>
   d94c2:	bf00      	nop

000d94c4 <__aeabi_i2d>:
   d94c4:	f090 0f00 	teq	r0, #0
   d94c8:	bf04      	itt	eq
   d94ca:	2100      	moveq	r1, #0
   d94cc:	4770      	bxeq	lr
   d94ce:	b530      	push	{r4, r5, lr}
   d94d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d94d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d94d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d94dc:	bf48      	it	mi
   d94de:	4240      	negmi	r0, r0
   d94e0:	f04f 0100 	mov.w	r1, #0
   d94e4:	e73e      	b.n	d9364 <__adddf3+0x138>
   d94e6:	bf00      	nop

000d94e8 <__aeabi_f2d>:
   d94e8:	0042      	lsls	r2, r0, #1
   d94ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d94ee:	ea4f 0131 	mov.w	r1, r1, rrx
   d94f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d94f6:	bf1f      	itttt	ne
   d94f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d94fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9504:	4770      	bxne	lr
   d9506:	f092 0f00 	teq	r2, #0
   d950a:	bf14      	ite	ne
   d950c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9510:	4770      	bxeq	lr
   d9512:	b530      	push	{r4, r5, lr}
   d9514:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d951c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9520:	e720      	b.n	d9364 <__adddf3+0x138>
   d9522:	bf00      	nop

000d9524 <__aeabi_ul2d>:
   d9524:	ea50 0201 	orrs.w	r2, r0, r1
   d9528:	bf08      	it	eq
   d952a:	4770      	bxeq	lr
   d952c:	b530      	push	{r4, r5, lr}
   d952e:	f04f 0500 	mov.w	r5, #0
   d9532:	e00a      	b.n	d954a <__aeabi_l2d+0x16>

000d9534 <__aeabi_l2d>:
   d9534:	ea50 0201 	orrs.w	r2, r0, r1
   d9538:	bf08      	it	eq
   d953a:	4770      	bxeq	lr
   d953c:	b530      	push	{r4, r5, lr}
   d953e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9542:	d502      	bpl.n	d954a <__aeabi_l2d+0x16>
   d9544:	4240      	negs	r0, r0
   d9546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d954a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d954e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9556:	f43f aedc 	beq.w	d9312 <__adddf3+0xe6>
   d955a:	f04f 0203 	mov.w	r2, #3
   d955e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9562:	bf18      	it	ne
   d9564:	3203      	addne	r2, #3
   d9566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d956a:	bf18      	it	ne
   d956c:	3203      	addne	r2, #3
   d956e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9572:	f1c2 0320 	rsb	r3, r2, #32
   d9576:	fa00 fc03 	lsl.w	ip, r0, r3
   d957a:	fa20 f002 	lsr.w	r0, r0, r2
   d957e:	fa01 fe03 	lsl.w	lr, r1, r3
   d9582:	ea40 000e 	orr.w	r0, r0, lr
   d9586:	fa21 f102 	lsr.w	r1, r1, r2
   d958a:	4414      	add	r4, r2
   d958c:	e6c1      	b.n	d9312 <__adddf3+0xe6>
   d958e:	bf00      	nop

000d9590 <__aeabi_dmul>:
   d9590:	b570      	push	{r4, r5, r6, lr}
   d9592:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d959a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d959e:	bf1d      	ittte	ne
   d95a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d95a4:	ea94 0f0c 	teqne	r4, ip
   d95a8:	ea95 0f0c 	teqne	r5, ip
   d95ac:	f000 f8de 	bleq	d976c <__aeabi_dmul+0x1dc>
   d95b0:	442c      	add	r4, r5
   d95b2:	ea81 0603 	eor.w	r6, r1, r3
   d95b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d95ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d95be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d95c2:	bf18      	it	ne
   d95c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d95c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d95cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d95d0:	d038      	beq.n	d9644 <__aeabi_dmul+0xb4>
   d95d2:	fba0 ce02 	umull	ip, lr, r0, r2
   d95d6:	f04f 0500 	mov.w	r5, #0
   d95da:	fbe1 e502 	umlal	lr, r5, r1, r2
   d95de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d95e2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d95e6:	f04f 0600 	mov.w	r6, #0
   d95ea:	fbe1 5603 	umlal	r5, r6, r1, r3
   d95ee:	f09c 0f00 	teq	ip, #0
   d95f2:	bf18      	it	ne
   d95f4:	f04e 0e01 	orrne.w	lr, lr, #1
   d95f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d95fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9604:	d204      	bcs.n	d9610 <__aeabi_dmul+0x80>
   d9606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d960a:	416d      	adcs	r5, r5
   d960c:	eb46 0606 	adc.w	r6, r6, r6
   d9610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d961c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9628:	bf88      	it	hi
   d962a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d962e:	d81e      	bhi.n	d966e <__aeabi_dmul+0xde>
   d9630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9634:	bf08      	it	eq
   d9636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d963a:	f150 0000 	adcs.w	r0, r0, #0
   d963e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9642:	bd70      	pop	{r4, r5, r6, pc}
   d9644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9648:	ea46 0101 	orr.w	r1, r6, r1
   d964c:	ea40 0002 	orr.w	r0, r0, r2
   d9650:	ea81 0103 	eor.w	r1, r1, r3
   d9654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9658:	bfc2      	ittt	gt
   d965a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d965e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9662:	bd70      	popgt	{r4, r5, r6, pc}
   d9664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9668:	f04f 0e00 	mov.w	lr, #0
   d966c:	3c01      	subs	r4, #1
   d966e:	f300 80ab 	bgt.w	d97c8 <__aeabi_dmul+0x238>
   d9672:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9676:	bfde      	ittt	le
   d9678:	2000      	movle	r0, #0
   d967a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d967e:	bd70      	pople	{r4, r5, r6, pc}
   d9680:	f1c4 0400 	rsb	r4, r4, #0
   d9684:	3c20      	subs	r4, #32
   d9686:	da35      	bge.n	d96f4 <__aeabi_dmul+0x164>
   d9688:	340c      	adds	r4, #12
   d968a:	dc1b      	bgt.n	d96c4 <__aeabi_dmul+0x134>
   d968c:	f104 0414 	add.w	r4, r4, #20
   d9690:	f1c4 0520 	rsb	r5, r4, #32
   d9694:	fa00 f305 	lsl.w	r3, r0, r5
   d9698:	fa20 f004 	lsr.w	r0, r0, r4
   d969c:	fa01 f205 	lsl.w	r2, r1, r5
   d96a0:	ea40 0002 	orr.w	r0, r0, r2
   d96a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d96a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d96ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d96b0:	fa21 f604 	lsr.w	r6, r1, r4
   d96b4:	eb42 0106 	adc.w	r1, r2, r6
   d96b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d96bc:	bf08      	it	eq
   d96be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d96c2:	bd70      	pop	{r4, r5, r6, pc}
   d96c4:	f1c4 040c 	rsb	r4, r4, #12
   d96c8:	f1c4 0520 	rsb	r5, r4, #32
   d96cc:	fa00 f304 	lsl.w	r3, r0, r4
   d96d0:	fa20 f005 	lsr.w	r0, r0, r5
   d96d4:	fa01 f204 	lsl.w	r2, r1, r4
   d96d8:	ea40 0002 	orr.w	r0, r0, r2
   d96dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d96e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d96e4:	f141 0100 	adc.w	r1, r1, #0
   d96e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d96ec:	bf08      	it	eq
   d96ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d96f2:	bd70      	pop	{r4, r5, r6, pc}
   d96f4:	f1c4 0520 	rsb	r5, r4, #32
   d96f8:	fa00 f205 	lsl.w	r2, r0, r5
   d96fc:	ea4e 0e02 	orr.w	lr, lr, r2
   d9700:	fa20 f304 	lsr.w	r3, r0, r4
   d9704:	fa01 f205 	lsl.w	r2, r1, r5
   d9708:	ea43 0302 	orr.w	r3, r3, r2
   d970c:	fa21 f004 	lsr.w	r0, r1, r4
   d9710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9714:	fa21 f204 	lsr.w	r2, r1, r4
   d9718:	ea20 0002 	bic.w	r0, r0, r2
   d971c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9724:	bf08      	it	eq
   d9726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d972a:	bd70      	pop	{r4, r5, r6, pc}
   d972c:	f094 0f00 	teq	r4, #0
   d9730:	d10f      	bne.n	d9752 <__aeabi_dmul+0x1c2>
   d9732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9736:	0040      	lsls	r0, r0, #1
   d9738:	eb41 0101 	adc.w	r1, r1, r1
   d973c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9740:	bf08      	it	eq
   d9742:	3c01      	subeq	r4, #1
   d9744:	d0f7      	beq.n	d9736 <__aeabi_dmul+0x1a6>
   d9746:	ea41 0106 	orr.w	r1, r1, r6
   d974a:	f095 0f00 	teq	r5, #0
   d974e:	bf18      	it	ne
   d9750:	4770      	bxne	lr
   d9752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9756:	0052      	lsls	r2, r2, #1
   d9758:	eb43 0303 	adc.w	r3, r3, r3
   d975c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9760:	bf08      	it	eq
   d9762:	3d01      	subeq	r5, #1
   d9764:	d0f7      	beq.n	d9756 <__aeabi_dmul+0x1c6>
   d9766:	ea43 0306 	orr.w	r3, r3, r6
   d976a:	4770      	bx	lr
   d976c:	ea94 0f0c 	teq	r4, ip
   d9770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9774:	bf18      	it	ne
   d9776:	ea95 0f0c 	teqne	r5, ip
   d977a:	d00c      	beq.n	d9796 <__aeabi_dmul+0x206>
   d977c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9780:	bf18      	it	ne
   d9782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9786:	d1d1      	bne.n	d972c <__aeabi_dmul+0x19c>
   d9788:	ea81 0103 	eor.w	r1, r1, r3
   d978c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9790:	f04f 0000 	mov.w	r0, #0
   d9794:	bd70      	pop	{r4, r5, r6, pc}
   d9796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d979a:	bf06      	itte	eq
   d979c:	4610      	moveq	r0, r2
   d979e:	4619      	moveq	r1, r3
   d97a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d97a4:	d019      	beq.n	d97da <__aeabi_dmul+0x24a>
   d97a6:	ea94 0f0c 	teq	r4, ip
   d97aa:	d102      	bne.n	d97b2 <__aeabi_dmul+0x222>
   d97ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d97b0:	d113      	bne.n	d97da <__aeabi_dmul+0x24a>
   d97b2:	ea95 0f0c 	teq	r5, ip
   d97b6:	d105      	bne.n	d97c4 <__aeabi_dmul+0x234>
   d97b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d97bc:	bf1c      	itt	ne
   d97be:	4610      	movne	r0, r2
   d97c0:	4619      	movne	r1, r3
   d97c2:	d10a      	bne.n	d97da <__aeabi_dmul+0x24a>
   d97c4:	ea81 0103 	eor.w	r1, r1, r3
   d97c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d97cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d97d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d97d4:	f04f 0000 	mov.w	r0, #0
   d97d8:	bd70      	pop	{r4, r5, r6, pc}
   d97da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d97de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d97e2:	bd70      	pop	{r4, r5, r6, pc}

000d97e4 <__aeabi_ddiv>:
   d97e4:	b570      	push	{r4, r5, r6, lr}
   d97e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d97ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d97ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d97f2:	bf1d      	ittte	ne
   d97f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d97f8:	ea94 0f0c 	teqne	r4, ip
   d97fc:	ea95 0f0c 	teqne	r5, ip
   d9800:	f000 f8a7 	bleq	d9952 <__aeabi_ddiv+0x16e>
   d9804:	eba4 0405 	sub.w	r4, r4, r5
   d9808:	ea81 0e03 	eor.w	lr, r1, r3
   d980c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9810:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9814:	f000 8088 	beq.w	d9928 <__aeabi_ddiv+0x144>
   d9818:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d981c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9828:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d982c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9834:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d983c:	429d      	cmp	r5, r3
   d983e:	bf08      	it	eq
   d9840:	4296      	cmpeq	r6, r2
   d9842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9846:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d984a:	d202      	bcs.n	d9852 <__aeabi_ddiv+0x6e>
   d984c:	085b      	lsrs	r3, r3, #1
   d984e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9852:	1ab6      	subs	r6, r6, r2
   d9854:	eb65 0503 	sbc.w	r5, r5, r3
   d9858:	085b      	lsrs	r3, r3, #1
   d985a:	ea4f 0232 	mov.w	r2, r2, rrx
   d985e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9866:	ebb6 0e02 	subs.w	lr, r6, r2
   d986a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d986e:	bf22      	ittt	cs
   d9870:	1ab6      	subcs	r6, r6, r2
   d9872:	4675      	movcs	r5, lr
   d9874:	ea40 000c 	orrcs.w	r0, r0, ip
   d9878:	085b      	lsrs	r3, r3, #1
   d987a:	ea4f 0232 	mov.w	r2, r2, rrx
   d987e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9882:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9886:	bf22      	ittt	cs
   d9888:	1ab6      	subcs	r6, r6, r2
   d988a:	4675      	movcs	r5, lr
   d988c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9890:	085b      	lsrs	r3, r3, #1
   d9892:	ea4f 0232 	mov.w	r2, r2, rrx
   d9896:	ebb6 0e02 	subs.w	lr, r6, r2
   d989a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d989e:	bf22      	ittt	cs
   d98a0:	1ab6      	subcs	r6, r6, r2
   d98a2:	4675      	movcs	r5, lr
   d98a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d98a8:	085b      	lsrs	r3, r3, #1
   d98aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d98ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d98b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d98b6:	bf22      	ittt	cs
   d98b8:	1ab6      	subcs	r6, r6, r2
   d98ba:	4675      	movcs	r5, lr
   d98bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d98c0:	ea55 0e06 	orrs.w	lr, r5, r6
   d98c4:	d018      	beq.n	d98f8 <__aeabi_ddiv+0x114>
   d98c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d98ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d98ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d98d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d98d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d98da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d98de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d98e2:	d1c0      	bne.n	d9866 <__aeabi_ddiv+0x82>
   d98e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d98e8:	d10b      	bne.n	d9902 <__aeabi_ddiv+0x11e>
   d98ea:	ea41 0100 	orr.w	r1, r1, r0
   d98ee:	f04f 0000 	mov.w	r0, #0
   d98f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d98f6:	e7b6      	b.n	d9866 <__aeabi_ddiv+0x82>
   d98f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d98fc:	bf04      	itt	eq
   d98fe:	4301      	orreq	r1, r0
   d9900:	2000      	moveq	r0, #0
   d9902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9906:	bf88      	it	hi
   d9908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d990c:	f63f aeaf 	bhi.w	d966e <__aeabi_dmul+0xde>
   d9910:	ebb5 0c03 	subs.w	ip, r5, r3
   d9914:	bf04      	itt	eq
   d9916:	ebb6 0c02 	subseq.w	ip, r6, r2
   d991a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d991e:	f150 0000 	adcs.w	r0, r0, #0
   d9922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9926:	bd70      	pop	{r4, r5, r6, pc}
   d9928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d992c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9934:	bfc2      	ittt	gt
   d9936:	ebd4 050c 	rsbsgt	r5, r4, ip
   d993a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d993e:	bd70      	popgt	{r4, r5, r6, pc}
   d9940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9944:	f04f 0e00 	mov.w	lr, #0
   d9948:	3c01      	subs	r4, #1
   d994a:	e690      	b.n	d966e <__aeabi_dmul+0xde>
   d994c:	ea45 0e06 	orr.w	lr, r5, r6
   d9950:	e68d      	b.n	d966e <__aeabi_dmul+0xde>
   d9952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9956:	ea94 0f0c 	teq	r4, ip
   d995a:	bf08      	it	eq
   d995c:	ea95 0f0c 	teqeq	r5, ip
   d9960:	f43f af3b 	beq.w	d97da <__aeabi_dmul+0x24a>
   d9964:	ea94 0f0c 	teq	r4, ip
   d9968:	d10a      	bne.n	d9980 <__aeabi_ddiv+0x19c>
   d996a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d996e:	f47f af34 	bne.w	d97da <__aeabi_dmul+0x24a>
   d9972:	ea95 0f0c 	teq	r5, ip
   d9976:	f47f af25 	bne.w	d97c4 <__aeabi_dmul+0x234>
   d997a:	4610      	mov	r0, r2
   d997c:	4619      	mov	r1, r3
   d997e:	e72c      	b.n	d97da <__aeabi_dmul+0x24a>
   d9980:	ea95 0f0c 	teq	r5, ip
   d9984:	d106      	bne.n	d9994 <__aeabi_ddiv+0x1b0>
   d9986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d998a:	f43f aefd 	beq.w	d9788 <__aeabi_dmul+0x1f8>
   d998e:	4610      	mov	r0, r2
   d9990:	4619      	mov	r1, r3
   d9992:	e722      	b.n	d97da <__aeabi_dmul+0x24a>
   d9994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9998:	bf18      	it	ne
   d999a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d999e:	f47f aec5 	bne.w	d972c <__aeabi_dmul+0x19c>
   d99a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d99a6:	f47f af0d 	bne.w	d97c4 <__aeabi_dmul+0x234>
   d99aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d99ae:	f47f aeeb 	bne.w	d9788 <__aeabi_dmul+0x1f8>
   d99b2:	e712      	b.n	d97da <__aeabi_dmul+0x24a>

000d99b4 <__gedf2>:
   d99b4:	f04f 3cff 	mov.w	ip, #4294967295
   d99b8:	e006      	b.n	d99c8 <__cmpdf2+0x4>
   d99ba:	bf00      	nop

000d99bc <__ledf2>:
   d99bc:	f04f 0c01 	mov.w	ip, #1
   d99c0:	e002      	b.n	d99c8 <__cmpdf2+0x4>
   d99c2:	bf00      	nop

000d99c4 <__cmpdf2>:
   d99c4:	f04f 0c01 	mov.w	ip, #1
   d99c8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d99cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d99d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d99d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d99d8:	bf18      	it	ne
   d99da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d99de:	d01b      	beq.n	d9a18 <__cmpdf2+0x54>
   d99e0:	b001      	add	sp, #4
   d99e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d99e6:	bf0c      	ite	eq
   d99e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d99ec:	ea91 0f03 	teqne	r1, r3
   d99f0:	bf02      	ittt	eq
   d99f2:	ea90 0f02 	teqeq	r0, r2
   d99f6:	2000      	moveq	r0, #0
   d99f8:	4770      	bxeq	lr
   d99fa:	f110 0f00 	cmn.w	r0, #0
   d99fe:	ea91 0f03 	teq	r1, r3
   d9a02:	bf58      	it	pl
   d9a04:	4299      	cmppl	r1, r3
   d9a06:	bf08      	it	eq
   d9a08:	4290      	cmpeq	r0, r2
   d9a0a:	bf2c      	ite	cs
   d9a0c:	17d8      	asrcs	r0, r3, #31
   d9a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9a12:	f040 0001 	orr.w	r0, r0, #1
   d9a16:	4770      	bx	lr
   d9a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a20:	d102      	bne.n	d9a28 <__cmpdf2+0x64>
   d9a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9a26:	d107      	bne.n	d9a38 <__cmpdf2+0x74>
   d9a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a30:	d1d6      	bne.n	d99e0 <__cmpdf2+0x1c>
   d9a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9a36:	d0d3      	beq.n	d99e0 <__cmpdf2+0x1c>
   d9a38:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9a3c:	4770      	bx	lr
   d9a3e:	bf00      	nop

000d9a40 <__aeabi_cdrcmple>:
   d9a40:	4684      	mov	ip, r0
   d9a42:	4610      	mov	r0, r2
   d9a44:	4662      	mov	r2, ip
   d9a46:	468c      	mov	ip, r1
   d9a48:	4619      	mov	r1, r3
   d9a4a:	4663      	mov	r3, ip
   d9a4c:	e000      	b.n	d9a50 <__aeabi_cdcmpeq>
   d9a4e:	bf00      	nop

000d9a50 <__aeabi_cdcmpeq>:
   d9a50:	b501      	push	{r0, lr}
   d9a52:	f7ff ffb7 	bl	d99c4 <__cmpdf2>
   d9a56:	2800      	cmp	r0, #0
   d9a58:	bf48      	it	mi
   d9a5a:	f110 0f00 	cmnmi.w	r0, #0
   d9a5e:	bd01      	pop	{r0, pc}

000d9a60 <__aeabi_dcmpeq>:
   d9a60:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a64:	f7ff fff4 	bl	d9a50 <__aeabi_cdcmpeq>
   d9a68:	bf0c      	ite	eq
   d9a6a:	2001      	moveq	r0, #1
   d9a6c:	2000      	movne	r0, #0
   d9a6e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a72:	bf00      	nop

000d9a74 <__aeabi_dcmplt>:
   d9a74:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a78:	f7ff ffea 	bl	d9a50 <__aeabi_cdcmpeq>
   d9a7c:	bf34      	ite	cc
   d9a7e:	2001      	movcc	r0, #1
   d9a80:	2000      	movcs	r0, #0
   d9a82:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a86:	bf00      	nop

000d9a88 <__aeabi_dcmple>:
   d9a88:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a8c:	f7ff ffe0 	bl	d9a50 <__aeabi_cdcmpeq>
   d9a90:	bf94      	ite	ls
   d9a92:	2001      	movls	r0, #1
   d9a94:	2000      	movhi	r0, #0
   d9a96:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a9a:	bf00      	nop

000d9a9c <__aeabi_dcmpge>:
   d9a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9aa0:	f7ff ffce 	bl	d9a40 <__aeabi_cdrcmple>
   d9aa4:	bf94      	ite	ls
   d9aa6:	2001      	movls	r0, #1
   d9aa8:	2000      	movhi	r0, #0
   d9aaa:	f85d fb08 	ldr.w	pc, [sp], #8
   d9aae:	bf00      	nop

000d9ab0 <__aeabi_dcmpgt>:
   d9ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9ab4:	f7ff ffc4 	bl	d9a40 <__aeabi_cdrcmple>
   d9ab8:	bf34      	ite	cc
   d9aba:	2001      	movcc	r0, #1
   d9abc:	2000      	movcs	r0, #0
   d9abe:	f85d fb08 	ldr.w	pc, [sp], #8
   d9ac2:	bf00      	nop

000d9ac4 <__aeabi_dcmpun>:
   d9ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9acc:	d102      	bne.n	d9ad4 <__aeabi_dcmpun+0x10>
   d9ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9ad2:	d10a      	bne.n	d9aea <__aeabi_dcmpun+0x26>
   d9ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9adc:	d102      	bne.n	d9ae4 <__aeabi_dcmpun+0x20>
   d9ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9ae2:	d102      	bne.n	d9aea <__aeabi_dcmpun+0x26>
   d9ae4:	f04f 0000 	mov.w	r0, #0
   d9ae8:	4770      	bx	lr
   d9aea:	f04f 0001 	mov.w	r0, #1
   d9aee:	4770      	bx	lr

000d9af0 <__aeabi_d2f>:
   d9af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9af8:	bf24      	itt	cs
   d9afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9b02:	d90d      	bls.n	d9b20 <__aeabi_d2f+0x30>
   d9b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9b18:	bf08      	it	eq
   d9b1a:	f020 0001 	biceq.w	r0, r0, #1
   d9b1e:	4770      	bx	lr
   d9b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9b24:	d121      	bne.n	d9b6a <__aeabi_d2f+0x7a>
   d9b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9b2a:	bfbc      	itt	lt
   d9b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9b30:	4770      	bxlt	lr
   d9b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9b3a:	f1c2 0218 	rsb	r2, r2, #24
   d9b3e:	f1c2 0c20 	rsb	ip, r2, #32
   d9b42:	fa10 f30c 	lsls.w	r3, r0, ip
   d9b46:	fa20 f002 	lsr.w	r0, r0, r2
   d9b4a:	bf18      	it	ne
   d9b4c:	f040 0001 	orrne.w	r0, r0, #1
   d9b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9b58:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9b5c:	ea40 000c 	orr.w	r0, r0, ip
   d9b60:	fa23 f302 	lsr.w	r3, r3, r2
   d9b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9b68:	e7cc      	b.n	d9b04 <__aeabi_d2f+0x14>
   d9b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9b6e:	d107      	bne.n	d9b80 <__aeabi_d2f+0x90>
   d9b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9b74:	bf1e      	ittt	ne
   d9b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9b7e:	4770      	bxne	lr
   d9b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9b8c:	4770      	bx	lr
   d9b8e:	bf00      	nop

000d9b90 <__aeabi_frsub>:
   d9b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d9b94:	e002      	b.n	d9b9c <__addsf3>
   d9b96:	bf00      	nop

000d9b98 <__aeabi_fsub>:
   d9b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d9b9c <__addsf3>:
   d9b9c:	0042      	lsls	r2, r0, #1
   d9b9e:	bf1f      	itttt	ne
   d9ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d9ba4:	ea92 0f03 	teqne	r2, r3
   d9ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d9bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9bb0:	d06a      	beq.n	d9c88 <__addsf3+0xec>
   d9bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d9bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d9bba:	bfc1      	itttt	gt
   d9bbc:	18d2      	addgt	r2, r2, r3
   d9bbe:	4041      	eorgt	r1, r0
   d9bc0:	4048      	eorgt	r0, r1
   d9bc2:	4041      	eorgt	r1, r0
   d9bc4:	bfb8      	it	lt
   d9bc6:	425b      	neglt	r3, r3
   d9bc8:	2b19      	cmp	r3, #25
   d9bca:	bf88      	it	hi
   d9bcc:	4770      	bxhi	lr
   d9bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d9bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d9bda:	bf18      	it	ne
   d9bdc:	4240      	negne	r0, r0
   d9bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d9be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d9bea:	bf18      	it	ne
   d9bec:	4249      	negne	r1, r1
   d9bee:	ea92 0f03 	teq	r2, r3
   d9bf2:	d03f      	beq.n	d9c74 <__addsf3+0xd8>
   d9bf4:	f1a2 0201 	sub.w	r2, r2, #1
   d9bf8:	fa41 fc03 	asr.w	ip, r1, r3
   d9bfc:	eb10 000c 	adds.w	r0, r0, ip
   d9c00:	f1c3 0320 	rsb	r3, r3, #32
   d9c04:	fa01 f103 	lsl.w	r1, r1, r3
   d9c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d9c0c:	d502      	bpl.n	d9c14 <__addsf3+0x78>
   d9c0e:	4249      	negs	r1, r1
   d9c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d9c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d9c18:	d313      	bcc.n	d9c42 <__addsf3+0xa6>
   d9c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d9c1e:	d306      	bcc.n	d9c2e <__addsf3+0x92>
   d9c20:	0840      	lsrs	r0, r0, #1
   d9c22:	ea4f 0131 	mov.w	r1, r1, rrx
   d9c26:	f102 0201 	add.w	r2, r2, #1
   d9c2a:	2afe      	cmp	r2, #254	; 0xfe
   d9c2c:	d251      	bcs.n	d9cd2 <__addsf3+0x136>
   d9c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d9c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d9c36:	bf08      	it	eq
   d9c38:	f020 0001 	biceq.w	r0, r0, #1
   d9c3c:	ea40 0003 	orr.w	r0, r0, r3
   d9c40:	4770      	bx	lr
   d9c42:	0049      	lsls	r1, r1, #1
   d9c44:	eb40 0000 	adc.w	r0, r0, r0
   d9c48:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   d9c4c:	f1a2 0201 	sub.w	r2, r2, #1
   d9c50:	d1ed      	bne.n	d9c2e <__addsf3+0x92>
   d9c52:	fab0 fc80 	clz	ip, r0
   d9c56:	f1ac 0c08 	sub.w	ip, ip, #8
   d9c5a:	ebb2 020c 	subs.w	r2, r2, ip
   d9c5e:	fa00 f00c 	lsl.w	r0, r0, ip
   d9c62:	bfaa      	itet	ge
   d9c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d9c68:	4252      	neglt	r2, r2
   d9c6a:	4318      	orrge	r0, r3
   d9c6c:	bfbc      	itt	lt
   d9c6e:	40d0      	lsrlt	r0, r2
   d9c70:	4318      	orrlt	r0, r3
   d9c72:	4770      	bx	lr
   d9c74:	f092 0f00 	teq	r2, #0
   d9c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d9c7c:	bf06      	itte	eq
   d9c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d9c82:	3201      	addeq	r2, #1
   d9c84:	3b01      	subne	r3, #1
   d9c86:	e7b5      	b.n	d9bf4 <__addsf3+0x58>
   d9c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d9c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d9c90:	bf18      	it	ne
   d9c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9c96:	d021      	beq.n	d9cdc <__addsf3+0x140>
   d9c98:	ea92 0f03 	teq	r2, r3
   d9c9c:	d004      	beq.n	d9ca8 <__addsf3+0x10c>
   d9c9e:	f092 0f00 	teq	r2, #0
   d9ca2:	bf08      	it	eq
   d9ca4:	4608      	moveq	r0, r1
   d9ca6:	4770      	bx	lr
   d9ca8:	ea90 0f01 	teq	r0, r1
   d9cac:	bf1c      	itt	ne
   d9cae:	2000      	movne	r0, #0
   d9cb0:	4770      	bxne	lr
   d9cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d9cb6:	d104      	bne.n	d9cc2 <__addsf3+0x126>
   d9cb8:	0040      	lsls	r0, r0, #1
   d9cba:	bf28      	it	cs
   d9cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d9cc0:	4770      	bx	lr
   d9cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d9cc6:	bf3c      	itt	cc
   d9cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d9ccc:	4770      	bxcc	lr
   d9cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d9cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d9cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9cda:	4770      	bx	lr
   d9cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d9ce0:	bf16      	itet	ne
   d9ce2:	4608      	movne	r0, r1
   d9ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d9ce8:	4601      	movne	r1, r0
   d9cea:	0242      	lsls	r2, r0, #9
   d9cec:	bf06      	itte	eq
   d9cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d9cf2:	ea90 0f01 	teqeq	r0, r1
   d9cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d9cfa:	4770      	bx	lr

000d9cfc <__aeabi_ui2f>:
   d9cfc:	f04f 0300 	mov.w	r3, #0
   d9d00:	e004      	b.n	d9d0c <__aeabi_i2f+0x8>
   d9d02:	bf00      	nop

000d9d04 <__aeabi_i2f>:
   d9d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d9d08:	bf48      	it	mi
   d9d0a:	4240      	negmi	r0, r0
   d9d0c:	ea5f 0c00 	movs.w	ip, r0
   d9d10:	bf08      	it	eq
   d9d12:	4770      	bxeq	lr
   d9d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d9d18:	4601      	mov	r1, r0
   d9d1a:	f04f 0000 	mov.w	r0, #0
   d9d1e:	e01c      	b.n	d9d5a <__aeabi_l2f+0x2a>

000d9d20 <__aeabi_ul2f>:
   d9d20:	ea50 0201 	orrs.w	r2, r0, r1
   d9d24:	bf08      	it	eq
   d9d26:	4770      	bxeq	lr
   d9d28:	f04f 0300 	mov.w	r3, #0
   d9d2c:	e00a      	b.n	d9d44 <__aeabi_l2f+0x14>
   d9d2e:	bf00      	nop

000d9d30 <__aeabi_l2f>:
   d9d30:	ea50 0201 	orrs.w	r2, r0, r1
   d9d34:	bf08      	it	eq
   d9d36:	4770      	bxeq	lr
   d9d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d9d3c:	d502      	bpl.n	d9d44 <__aeabi_l2f+0x14>
   d9d3e:	4240      	negs	r0, r0
   d9d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9d44:	ea5f 0c01 	movs.w	ip, r1
   d9d48:	bf02      	ittt	eq
   d9d4a:	4684      	moveq	ip, r0
   d9d4c:	4601      	moveq	r1, r0
   d9d4e:	2000      	moveq	r0, #0
   d9d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d9d54:	bf08      	it	eq
   d9d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d9d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d9d5e:	fabc f28c 	clz	r2, ip
   d9d62:	3a08      	subs	r2, #8
   d9d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d9d68:	db10      	blt.n	d9d8c <__aeabi_l2f+0x5c>
   d9d6a:	fa01 fc02 	lsl.w	ip, r1, r2
   d9d6e:	4463      	add	r3, ip
   d9d70:	fa00 fc02 	lsl.w	ip, r0, r2
   d9d74:	f1c2 0220 	rsb	r2, r2, #32
   d9d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9d7c:	fa20 f202 	lsr.w	r2, r0, r2
   d9d80:	eb43 0002 	adc.w	r0, r3, r2
   d9d84:	bf08      	it	eq
   d9d86:	f020 0001 	biceq.w	r0, r0, #1
   d9d8a:	4770      	bx	lr
   d9d8c:	f102 0220 	add.w	r2, r2, #32
   d9d90:	fa01 fc02 	lsl.w	ip, r1, r2
   d9d94:	f1c2 0220 	rsb	r2, r2, #32
   d9d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d9d9c:	fa21 f202 	lsr.w	r2, r1, r2
   d9da0:	eb43 0002 	adc.w	r0, r3, r2
   d9da4:	bf08      	it	eq
   d9da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d9daa:	4770      	bx	lr

000d9dac <__aeabi_ldivmod>:
   d9dac:	b97b      	cbnz	r3, d9dce <__aeabi_ldivmod+0x22>
   d9dae:	b972      	cbnz	r2, d9dce <__aeabi_ldivmod+0x22>
   d9db0:	2900      	cmp	r1, #0
   d9db2:	bfbe      	ittt	lt
   d9db4:	2000      	movlt	r0, #0
   d9db6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d9dba:	e006      	blt.n	d9dca <__aeabi_ldivmod+0x1e>
   d9dbc:	bf08      	it	eq
   d9dbe:	2800      	cmpeq	r0, #0
   d9dc0:	bf1c      	itt	ne
   d9dc2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d9dc6:	f04f 30ff 	movne.w	r0, #4294967295
   d9dca:	f000 b9b1 	b.w	da130 <__aeabi_idiv0>
   d9dce:	f1ad 0c08 	sub.w	ip, sp, #8
   d9dd2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9dd6:	2900      	cmp	r1, #0
   d9dd8:	db09      	blt.n	d9dee <__aeabi_ldivmod+0x42>
   d9dda:	2b00      	cmp	r3, #0
   d9ddc:	db1a      	blt.n	d9e14 <__aeabi_ldivmod+0x68>
   d9dde:	f000 f835 	bl	d9e4c <__udivmoddi4>
   d9de2:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9dea:	b004      	add	sp, #16
   d9dec:	4770      	bx	lr
   d9dee:	4240      	negs	r0, r0
   d9df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9df4:	2b00      	cmp	r3, #0
   d9df6:	db1b      	blt.n	d9e30 <__aeabi_ldivmod+0x84>
   d9df8:	f000 f828 	bl	d9e4c <__udivmoddi4>
   d9dfc:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9e00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9e04:	b004      	add	sp, #16
   d9e06:	4240      	negs	r0, r0
   d9e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9e0c:	4252      	negs	r2, r2
   d9e0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9e12:	4770      	bx	lr
   d9e14:	4252      	negs	r2, r2
   d9e16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9e1a:	f000 f817 	bl	d9e4c <__udivmoddi4>
   d9e1e:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9e22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9e26:	b004      	add	sp, #16
   d9e28:	4240      	negs	r0, r0
   d9e2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9e2e:	4770      	bx	lr
   d9e30:	4252      	negs	r2, r2
   d9e32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9e36:	f000 f809 	bl	d9e4c <__udivmoddi4>
   d9e3a:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9e42:	b004      	add	sp, #16
   d9e44:	4252      	negs	r2, r2
   d9e46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9e4a:	4770      	bx	lr

000d9e4c <__udivmoddi4>:
   d9e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9e50:	468c      	mov	ip, r1
   d9e52:	460e      	mov	r6, r1
   d9e54:	4604      	mov	r4, r0
   d9e56:	9d08      	ldr	r5, [sp, #32]
   d9e58:	2b00      	cmp	r3, #0
   d9e5a:	d150      	bne.n	d9efe <__udivmoddi4+0xb2>
   d9e5c:	428a      	cmp	r2, r1
   d9e5e:	4617      	mov	r7, r2
   d9e60:	d96c      	bls.n	d9f3c <__udivmoddi4+0xf0>
   d9e62:	fab2 fe82 	clz	lr, r2
   d9e66:	f1be 0f00 	cmp.w	lr, #0
   d9e6a:	d00b      	beq.n	d9e84 <__udivmoddi4+0x38>
   d9e6c:	f1ce 0420 	rsb	r4, lr, #32
   d9e70:	fa20 f404 	lsr.w	r4, r0, r4
   d9e74:	fa01 f60e 	lsl.w	r6, r1, lr
   d9e78:	ea44 0c06 	orr.w	ip, r4, r6
   d9e7c:	fa02 f70e 	lsl.w	r7, r2, lr
   d9e80:	fa00 f40e 	lsl.w	r4, r0, lr
   d9e84:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d9e88:	0c22      	lsrs	r2, r4, #16
   d9e8a:	fbbc f0f9 	udiv	r0, ip, r9
   d9e8e:	fa1f f887 	uxth.w	r8, r7
   d9e92:	fb09 c610 	mls	r6, r9, r0, ip
   d9e96:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d9e9a:	fb00 f308 	mul.w	r3, r0, r8
   d9e9e:	42b3      	cmp	r3, r6
   d9ea0:	d909      	bls.n	d9eb6 <__udivmoddi4+0x6a>
   d9ea2:	19f6      	adds	r6, r6, r7
   d9ea4:	f100 32ff 	add.w	r2, r0, #4294967295
   d9ea8:	f080 8122 	bcs.w	da0f0 <__udivmoddi4+0x2a4>
   d9eac:	42b3      	cmp	r3, r6
   d9eae:	f240 811f 	bls.w	da0f0 <__udivmoddi4+0x2a4>
   d9eb2:	3802      	subs	r0, #2
   d9eb4:	443e      	add	r6, r7
   d9eb6:	1af6      	subs	r6, r6, r3
   d9eb8:	b2a2      	uxth	r2, r4
   d9eba:	fbb6 f3f9 	udiv	r3, r6, r9
   d9ebe:	fb09 6613 	mls	r6, r9, r3, r6
   d9ec2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d9ec6:	fb03 f808 	mul.w	r8, r3, r8
   d9eca:	45a0      	cmp	r8, r4
   d9ecc:	d909      	bls.n	d9ee2 <__udivmoddi4+0x96>
   d9ece:	19e4      	adds	r4, r4, r7
   d9ed0:	f103 32ff 	add.w	r2, r3, #4294967295
   d9ed4:	f080 810a 	bcs.w	da0ec <__udivmoddi4+0x2a0>
   d9ed8:	45a0      	cmp	r8, r4
   d9eda:	f240 8107 	bls.w	da0ec <__udivmoddi4+0x2a0>
   d9ede:	3b02      	subs	r3, #2
   d9ee0:	443c      	add	r4, r7
   d9ee2:	ebc8 0404 	rsb	r4, r8, r4
   d9ee6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d9eea:	2100      	movs	r1, #0
   d9eec:	2d00      	cmp	r5, #0
   d9eee:	d062      	beq.n	d9fb6 <__udivmoddi4+0x16a>
   d9ef0:	fa24 f40e 	lsr.w	r4, r4, lr
   d9ef4:	2300      	movs	r3, #0
   d9ef6:	602c      	str	r4, [r5, #0]
   d9ef8:	606b      	str	r3, [r5, #4]
   d9efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9efe:	428b      	cmp	r3, r1
   d9f00:	d907      	bls.n	d9f12 <__udivmoddi4+0xc6>
   d9f02:	2d00      	cmp	r5, #0
   d9f04:	d055      	beq.n	d9fb2 <__udivmoddi4+0x166>
   d9f06:	2100      	movs	r1, #0
   d9f08:	e885 0041 	stmia.w	r5, {r0, r6}
   d9f0c:	4608      	mov	r0, r1
   d9f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f12:	fab3 f183 	clz	r1, r3
   d9f16:	2900      	cmp	r1, #0
   d9f18:	f040 8090 	bne.w	da03c <__udivmoddi4+0x1f0>
   d9f1c:	42b3      	cmp	r3, r6
   d9f1e:	d302      	bcc.n	d9f26 <__udivmoddi4+0xda>
   d9f20:	4282      	cmp	r2, r0
   d9f22:	f200 80f8 	bhi.w	da116 <__udivmoddi4+0x2ca>
   d9f26:	1a84      	subs	r4, r0, r2
   d9f28:	eb66 0603 	sbc.w	r6, r6, r3
   d9f2c:	2001      	movs	r0, #1
   d9f2e:	46b4      	mov	ip, r6
   d9f30:	2d00      	cmp	r5, #0
   d9f32:	d040      	beq.n	d9fb6 <__udivmoddi4+0x16a>
   d9f34:	e885 1010 	stmia.w	r5, {r4, ip}
   d9f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f3c:	b912      	cbnz	r2, d9f44 <__udivmoddi4+0xf8>
   d9f3e:	2701      	movs	r7, #1
   d9f40:	fbb7 f7f2 	udiv	r7, r7, r2
   d9f44:	fab7 fe87 	clz	lr, r7
   d9f48:	f1be 0f00 	cmp.w	lr, #0
   d9f4c:	d135      	bne.n	d9fba <__udivmoddi4+0x16e>
   d9f4e:	1bf3      	subs	r3, r6, r7
   d9f50:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9f54:	fa1f fc87 	uxth.w	ip, r7
   d9f58:	2101      	movs	r1, #1
   d9f5a:	fbb3 f0f8 	udiv	r0, r3, r8
   d9f5e:	0c22      	lsrs	r2, r4, #16
   d9f60:	fb08 3610 	mls	r6, r8, r0, r3
   d9f64:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d9f68:	fb0c f300 	mul.w	r3, ip, r0
   d9f6c:	42b3      	cmp	r3, r6
   d9f6e:	d907      	bls.n	d9f80 <__udivmoddi4+0x134>
   d9f70:	19f6      	adds	r6, r6, r7
   d9f72:	f100 32ff 	add.w	r2, r0, #4294967295
   d9f76:	d202      	bcs.n	d9f7e <__udivmoddi4+0x132>
   d9f78:	42b3      	cmp	r3, r6
   d9f7a:	f200 80ce 	bhi.w	da11a <__udivmoddi4+0x2ce>
   d9f7e:	4610      	mov	r0, r2
   d9f80:	1af6      	subs	r6, r6, r3
   d9f82:	b2a2      	uxth	r2, r4
   d9f84:	fbb6 f3f8 	udiv	r3, r6, r8
   d9f88:	fb08 6613 	mls	r6, r8, r3, r6
   d9f8c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d9f90:	fb0c fc03 	mul.w	ip, ip, r3
   d9f94:	45a4      	cmp	ip, r4
   d9f96:	d907      	bls.n	d9fa8 <__udivmoddi4+0x15c>
   d9f98:	19e4      	adds	r4, r4, r7
   d9f9a:	f103 32ff 	add.w	r2, r3, #4294967295
   d9f9e:	d202      	bcs.n	d9fa6 <__udivmoddi4+0x15a>
   d9fa0:	45a4      	cmp	ip, r4
   d9fa2:	f200 80b5 	bhi.w	da110 <__udivmoddi4+0x2c4>
   d9fa6:	4613      	mov	r3, r2
   d9fa8:	ebcc 0404 	rsb	r4, ip, r4
   d9fac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d9fb0:	e79c      	b.n	d9eec <__udivmoddi4+0xa0>
   d9fb2:	4629      	mov	r1, r5
   d9fb4:	4628      	mov	r0, r5
   d9fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9fba:	f1ce 0120 	rsb	r1, lr, #32
   d9fbe:	fa06 f30e 	lsl.w	r3, r6, lr
   d9fc2:	fa07 f70e 	lsl.w	r7, r7, lr
   d9fc6:	fa20 f901 	lsr.w	r9, r0, r1
   d9fca:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9fce:	40ce      	lsrs	r6, r1
   d9fd0:	ea49 0903 	orr.w	r9, r9, r3
   d9fd4:	fbb6 faf8 	udiv	sl, r6, r8
   d9fd8:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d9fdc:	fb08 661a 	mls	r6, r8, sl, r6
   d9fe0:	fa1f fc87 	uxth.w	ip, r7
   d9fe4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d9fe8:	fb0a f20c 	mul.w	r2, sl, ip
   d9fec:	429a      	cmp	r2, r3
   d9fee:	fa00 f40e 	lsl.w	r4, r0, lr
   d9ff2:	d90a      	bls.n	da00a <__udivmoddi4+0x1be>
   d9ff4:	19db      	adds	r3, r3, r7
   d9ff6:	f10a 31ff 	add.w	r1, sl, #4294967295
   d9ffa:	f080 8087 	bcs.w	da10c <__udivmoddi4+0x2c0>
   d9ffe:	429a      	cmp	r2, r3
   da000:	f240 8084 	bls.w	da10c <__udivmoddi4+0x2c0>
   da004:	f1aa 0a02 	sub.w	sl, sl, #2
   da008:	443b      	add	r3, r7
   da00a:	1a9b      	subs	r3, r3, r2
   da00c:	fa1f f989 	uxth.w	r9, r9
   da010:	fbb3 f1f8 	udiv	r1, r3, r8
   da014:	fb08 3311 	mls	r3, r8, r1, r3
   da018:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   da01c:	fb01 f60c 	mul.w	r6, r1, ip
   da020:	429e      	cmp	r6, r3
   da022:	d907      	bls.n	da034 <__udivmoddi4+0x1e8>
   da024:	19db      	adds	r3, r3, r7
   da026:	f101 32ff 	add.w	r2, r1, #4294967295
   da02a:	d26b      	bcs.n	da104 <__udivmoddi4+0x2b8>
   da02c:	429e      	cmp	r6, r3
   da02e:	d969      	bls.n	da104 <__udivmoddi4+0x2b8>
   da030:	3902      	subs	r1, #2
   da032:	443b      	add	r3, r7
   da034:	1b9b      	subs	r3, r3, r6
   da036:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   da03a:	e78e      	b.n	d9f5a <__udivmoddi4+0x10e>
   da03c:	f1c1 0e20 	rsb	lr, r1, #32
   da040:	fa22 f40e 	lsr.w	r4, r2, lr
   da044:	408b      	lsls	r3, r1
   da046:	4323      	orrs	r3, r4
   da048:	fa20 f70e 	lsr.w	r7, r0, lr
   da04c:	fa06 f401 	lsl.w	r4, r6, r1
   da050:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   da054:	fa26 f60e 	lsr.w	r6, r6, lr
   da058:	433c      	orrs	r4, r7
   da05a:	fbb6 f9fc 	udiv	r9, r6, ip
   da05e:	0c27      	lsrs	r7, r4, #16
   da060:	fb0c 6619 	mls	r6, ip, r9, r6
   da064:	fa1f f883 	uxth.w	r8, r3
   da068:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   da06c:	fb09 f708 	mul.w	r7, r9, r8
   da070:	42b7      	cmp	r7, r6
   da072:	fa02 f201 	lsl.w	r2, r2, r1
   da076:	fa00 fa01 	lsl.w	sl, r0, r1
   da07a:	d908      	bls.n	da08e <__udivmoddi4+0x242>
   da07c:	18f6      	adds	r6, r6, r3
   da07e:	f109 30ff 	add.w	r0, r9, #4294967295
   da082:	d241      	bcs.n	da108 <__udivmoddi4+0x2bc>
   da084:	42b7      	cmp	r7, r6
   da086:	d93f      	bls.n	da108 <__udivmoddi4+0x2bc>
   da088:	f1a9 0902 	sub.w	r9, r9, #2
   da08c:	441e      	add	r6, r3
   da08e:	1bf6      	subs	r6, r6, r7
   da090:	b2a0      	uxth	r0, r4
   da092:	fbb6 f4fc 	udiv	r4, r6, ip
   da096:	fb0c 6614 	mls	r6, ip, r4, r6
   da09a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   da09e:	fb04 f808 	mul.w	r8, r4, r8
   da0a2:	45b8      	cmp	r8, r7
   da0a4:	d907      	bls.n	da0b6 <__udivmoddi4+0x26a>
   da0a6:	18ff      	adds	r7, r7, r3
   da0a8:	f104 30ff 	add.w	r0, r4, #4294967295
   da0ac:	d228      	bcs.n	da100 <__udivmoddi4+0x2b4>
   da0ae:	45b8      	cmp	r8, r7
   da0b0:	d926      	bls.n	da100 <__udivmoddi4+0x2b4>
   da0b2:	3c02      	subs	r4, #2
   da0b4:	441f      	add	r7, r3
   da0b6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   da0ba:	ebc8 0707 	rsb	r7, r8, r7
   da0be:	fba0 8902 	umull	r8, r9, r0, r2
   da0c2:	454f      	cmp	r7, r9
   da0c4:	4644      	mov	r4, r8
   da0c6:	464e      	mov	r6, r9
   da0c8:	d314      	bcc.n	da0f4 <__udivmoddi4+0x2a8>
   da0ca:	d029      	beq.n	da120 <__udivmoddi4+0x2d4>
   da0cc:	b365      	cbz	r5, da128 <__udivmoddi4+0x2dc>
   da0ce:	ebba 0304 	subs.w	r3, sl, r4
   da0d2:	eb67 0706 	sbc.w	r7, r7, r6
   da0d6:	fa07 fe0e 	lsl.w	lr, r7, lr
   da0da:	40cb      	lsrs	r3, r1
   da0dc:	40cf      	lsrs	r7, r1
   da0de:	ea4e 0303 	orr.w	r3, lr, r3
   da0e2:	e885 0088 	stmia.w	r5, {r3, r7}
   da0e6:	2100      	movs	r1, #0
   da0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da0ec:	4613      	mov	r3, r2
   da0ee:	e6f8      	b.n	d9ee2 <__udivmoddi4+0x96>
   da0f0:	4610      	mov	r0, r2
   da0f2:	e6e0      	b.n	d9eb6 <__udivmoddi4+0x6a>
   da0f4:	ebb8 0402 	subs.w	r4, r8, r2
   da0f8:	eb69 0603 	sbc.w	r6, r9, r3
   da0fc:	3801      	subs	r0, #1
   da0fe:	e7e5      	b.n	da0cc <__udivmoddi4+0x280>
   da100:	4604      	mov	r4, r0
   da102:	e7d8      	b.n	da0b6 <__udivmoddi4+0x26a>
   da104:	4611      	mov	r1, r2
   da106:	e795      	b.n	da034 <__udivmoddi4+0x1e8>
   da108:	4681      	mov	r9, r0
   da10a:	e7c0      	b.n	da08e <__udivmoddi4+0x242>
   da10c:	468a      	mov	sl, r1
   da10e:	e77c      	b.n	da00a <__udivmoddi4+0x1be>
   da110:	3b02      	subs	r3, #2
   da112:	443c      	add	r4, r7
   da114:	e748      	b.n	d9fa8 <__udivmoddi4+0x15c>
   da116:	4608      	mov	r0, r1
   da118:	e70a      	b.n	d9f30 <__udivmoddi4+0xe4>
   da11a:	3802      	subs	r0, #2
   da11c:	443e      	add	r6, r7
   da11e:	e72f      	b.n	d9f80 <__udivmoddi4+0x134>
   da120:	45c2      	cmp	sl, r8
   da122:	d3e7      	bcc.n	da0f4 <__udivmoddi4+0x2a8>
   da124:	463e      	mov	r6, r7
   da126:	e7d1      	b.n	da0cc <__udivmoddi4+0x280>
   da128:	4629      	mov	r1, r5
   da12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da12e:	bf00      	nop

000da130 <__aeabi_idiv0>:
   da130:	4770      	bx	lr
   da132:	bf00      	nop

000da134 <__cxa_atexit>:
   da134:	b510      	push	{r4, lr}
   da136:	4c05      	ldr	r4, [pc, #20]	; (da14c <__cxa_atexit+0x18>)
   da138:	4613      	mov	r3, r2
   da13a:	b12c      	cbz	r4, da148 <__cxa_atexit+0x14>
   da13c:	460a      	mov	r2, r1
   da13e:	4601      	mov	r1, r0
   da140:	2002      	movs	r0, #2
   da142:	f3af 8000 	nop.w
   da146:	bd10      	pop	{r4, pc}
   da148:	4620      	mov	r0, r4
   da14a:	bd10      	pop	{r4, pc}
   da14c:	00000000 	.word	0x00000000

000da150 <memcpy>:
   da150:	b510      	push	{r4, lr}
   da152:	1e43      	subs	r3, r0, #1
   da154:	440a      	add	r2, r1
   da156:	4291      	cmp	r1, r2
   da158:	d004      	beq.n	da164 <memcpy+0x14>
   da15a:	f811 4b01 	ldrb.w	r4, [r1], #1
   da15e:	f803 4f01 	strb.w	r4, [r3, #1]!
   da162:	e7f8      	b.n	da156 <memcpy+0x6>
   da164:	bd10      	pop	{r4, pc}

000da166 <memset>:
   da166:	4402      	add	r2, r0
   da168:	4603      	mov	r3, r0
   da16a:	4293      	cmp	r3, r2
   da16c:	d002      	beq.n	da174 <memset+0xe>
   da16e:	f803 1b01 	strb.w	r1, [r3], #1
   da172:	e7fa      	b.n	da16a <memset+0x4>
   da174:	4770      	bx	lr
	...

000da178 <srand>:
   da178:	b538      	push	{r3, r4, r5, lr}
   da17a:	4b12      	ldr	r3, [pc, #72]	; (da1c4 <srand+0x4c>)
   da17c:	681c      	ldr	r4, [r3, #0]
   da17e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da180:	4605      	mov	r5, r0
   da182:	b9d3      	cbnz	r3, da1ba <srand+0x42>
   da184:	2018      	movs	r0, #24
   da186:	f7fc fb1b 	bl	d67c0 <malloc>
   da18a:	f243 330e 	movw	r3, #13070	; 0x330e
   da18e:	63a0      	str	r0, [r4, #56]	; 0x38
   da190:	8003      	strh	r3, [r0, #0]
   da192:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   da196:	8043      	strh	r3, [r0, #2]
   da198:	f241 2334 	movw	r3, #4660	; 0x1234
   da19c:	8083      	strh	r3, [r0, #4]
   da19e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   da1a2:	80c3      	strh	r3, [r0, #6]
   da1a4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   da1a8:	8103      	strh	r3, [r0, #8]
   da1aa:	2305      	movs	r3, #5
   da1ac:	8143      	strh	r3, [r0, #10]
   da1ae:	230b      	movs	r3, #11
   da1b0:	8183      	strh	r3, [r0, #12]
   da1b2:	2201      	movs	r2, #1
   da1b4:	2300      	movs	r3, #0
   da1b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da1ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da1bc:	2200      	movs	r2, #0
   da1be:	611d      	str	r5, [r3, #16]
   da1c0:	615a      	str	r2, [r3, #20]
   da1c2:	bd38      	pop	{r3, r4, r5, pc}
   da1c4:	2003dd40 	.word	0x2003dd40

000da1c8 <strcpy>:
   da1c8:	4603      	mov	r3, r0
   da1ca:	f811 2b01 	ldrb.w	r2, [r1], #1
   da1ce:	f803 2b01 	strb.w	r2, [r3], #1
   da1d2:	2a00      	cmp	r2, #0
   da1d4:	d1f9      	bne.n	da1ca <strcpy+0x2>
   da1d6:	4770      	bx	lr

000da1d8 <strlen>:
   da1d8:	4603      	mov	r3, r0
   da1da:	f813 2b01 	ldrb.w	r2, [r3], #1
   da1de:	2a00      	cmp	r2, #0
   da1e0:	d1fb      	bne.n	da1da <strlen+0x2>
   da1e2:	1a18      	subs	r0, r3, r0
   da1e4:	3801      	subs	r0, #1
   da1e6:	4770      	bx	lr

000da1e8 <dynalib_user>:
   da1e8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   da1f8:	0000 0000                                   ....

000da1fc <_ZTVN8particle13__SPISettingsE>:
	...
   da204:	40d5 000d                                   .@..

000da208 <_ZTV6SdFile>:
	...
   da210:	40cd 000d 412d 000d 4141 000d 413b 000d     .@..-A..AA..;A..
   da220:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   da230:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   da240:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   da250:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   da260:	2545 3e64 6300 6e6f 656e 7463 6e69 2067     E%d>.connecting 
   da270:	6f74 4d20 5451 2054 2e2e 002e 6572 7274     to MQTT ....retr
   da280:	6979 676e 4d20 5451 2054 6f63 6e6e 6365     ying MQTT connec
   da290:	6974 6e6f 6920 206e 2035 6573 6f63 646e     tion in 5 second
   da2a0:	2e73 2e2e 4d00 5451 2054 6f63 6e6e 6365     s....MQTT connec
   da2b0:	6574 3f64 7400 6d65 3a70 2520 2e30 6632     ted?.temp: %0.2f
   da2c0:	6120 746c 203a 3025 322e 2066 204d 7270      alt: %0.2f M pr
   da2d0:	7365 3a73 2520 2e30 6632 6820 6d75 203a     ess: %0.2f hum: 
   da2e0:	3025 322e 2066 000a 7473 7261 6974 676e     %0.2f ..starting
   da2f0:	6420 7461 2061 6f6c 6767 6e69 0a67 6300      data logging..c
   da300:	6e61 2074 7263 6165 6574 6620 6c69 2065     ant create file 
   da310:	616e 656d 6c00 676f 6967 676e 7420 206f     name.logging to 
   da320:	203a 7325 0a20 6400 6e6f 0a65 5200 6165     : %s ..done..Rea
   da330:	7964 6620 726f 6e20 7865 2074 6164 6174     dy for next data
   da340:	6c20 676f 0a20 7700 6972 6574 6520 7272      log ..write err
   da350:	726f 6d00 7561 6972 6963 766f 3939 6900     or.mauriciov99.i
   da360:	2e6f 6461 6661 7572 7469 632e 6d6f 7400     o.adafruit.com.t
   da370:	6968 6973 6173 6172 646e 6d6f 7473 6972     hisisarandomstri
   da380:	676e 6f66 6172 656b 0079 616d 7275 6369     ngforakey.mauric
   da390:	6f69 3976 2f39 6566 6465 2f73 0020 616d     iov99/feeds/ .ma
   da3a0:	7275 6369 6f69 3976 2f39 6566 6465 2073     uriciov99/feeds 
   da3b0:	0000 0000                                   ....

000da3b4 <_ZTV16Adafruit_SSD1306>:
	...
   da3bc:	40d1 000d 42ef 000d 5775 000d 6b85 000d     .@...B..uW...k..
   da3cc:	5071 000d 5475 000d 4ef9 000d 4d85 000d     qP..uT...N...M..
   da3dc:	5535 000d 55cb 000d 5603 000d 561f 000d     5U...U...V...V..

000da3ec <_ZTV12Adafruit_GFX>:
	...
   da3fc:	5775 000d 6b85 000d 40a9 000d 5475 000d     uW...k...@..uT..
   da40c:	5595 000d 55b1 000d 5535 000d 55cb 000d     .U...U..5U...U..
   da41c:	5603 000d 561f 000d                         .V...V..

000da424 <_ZL4font>:
   da424:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   da434:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   da444:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   da454:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   da464:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   da474:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   da484:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   da494:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   da4a4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   da4b4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   da4c4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   da4d4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   da4e4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   da4f4:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   da504:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   da514:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   da524:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   da534:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   da544:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   da554:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   da564:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   da574:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   da584:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   da594:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   da5a4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   da5b4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   da5c4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   da5d4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   da5e4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   da5f4:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   da604:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   da614:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   da624:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   da634:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   da644:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   da654:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   da664:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   da674:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   da684:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   da694:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   da6a4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   da6b4:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   da6c4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   da6d4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   da6e4:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   da6f4:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   da704:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   da714:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   da724:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   da734:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   da744:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   da754:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   da764:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   da774:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   da784:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   da794:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   da7a4:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   da7b4:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   da7c4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   da7d4:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   da7e4:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   da7f4:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   da804:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   da814:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   da824:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   da834:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   da844:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   da854:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   da864:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   da874:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   da884:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   da894:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   da8a4:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   da8b4:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   da8c4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   da8d4:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   da8e4:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   da8f4:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   da904:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   da914:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000da920 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   da928:	40cf 000d 42e1 000d 57f3 000d 589f 000d     .@...B...W...X..
   da938:	58d1 000d 5807 000d 5847 000d               .X...X..GX..

000da944 <_ZTV13Adafruit_MQTT>:
	...
   da954:	40a9 000d 40a9 000d 40a9 000d 40a9 000d     .@...@...@...@..
   da964:	40a9 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   da974:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   da984:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   da994:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   da9a4:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   da9b4:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   da9c4:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   da9d4:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   da9e4:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   da9f4:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   daa04:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   daa14:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   daa24:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   daa34:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   daa44:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   daa54:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   daa64:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   daa74:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   daa84:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   daa94:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   daaa4:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   daab4:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   daac4:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   daad4:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   daae4:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   daaf4:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   dab04:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   dab14:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   dab24:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   dab34:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   dab44:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   dab54:	7465 6961 736c 002e                         etails..

000dab5c <_ZTVN5spark13EthernetClassE>:
	...
   dab64:	685f 000d 6855 000d 684b 000d 6841 000d     _h..Uh..Kh..Ah..
   dab74:	6835 000d 6829 000d 681d 000d 6815 000d     5h..)h...h...h..
   dab84:	680b 000d 6801 000d 7a21 000d               .h...h..!z..

000dab90 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dab90:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   daba0:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   dabb0:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   dabc0:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   dabd0:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   dabe0:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   dabf0:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   dac00:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   dac10:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   dac20:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   dac30:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   dac40:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   dac50:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   dac60:	7000 6e61 6369 6100 6c6c 5a00 2500 302b     .panic.all.Z.%+0
   dac70:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   dac80:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   dac90:	6d69 0065                                   ime.

000dac94 <_ZTV9IPAddress>:
	...
   dac9c:	6e11 000d 6e01 000d 6e03 000d               .n...n...n..

000daca8 <_ZTV9USBSerial>:
	...
   dacb0:	6f15 000d 6f65 000d 6f73 000d 6b85 000d     .o..eo..so...k..
   dacc0:	6f51 000d 6f17 000d 6f2d 000d 6f5f 000d     Qo...o..-o.._o..
   dacd0:	6f43 000d 6f11 000d                         Co...o..

000dacd8 <_ZTV11USARTSerial>:
	...
   dace0:	7021 000d 7071 000d 707f 000d 6b85 000d     !p..qp...p...k..
   dacf0:	7035 000d 7057 000d 7043 000d 706b 000d     5p..Wp..Cp..kp..
   dad00:	7023 000d 7027 000d                         #p..'p..

000dad08 <_ZTV7TwoWire>:
	...
   dad10:	7125 000d 716f 000d 7147 000d 7127 000d     %q..oq..Gq..'q..
   dad20:	714f 000d 7157 000d 715f 000d 7167 000d     Oq..Wq.._q..gq..

000dad30 <_ZTVN5spark9MeshClassE>:
	...
   dad38:	7291 000d 7287 000d 727d 000d 7273 000d     .r...r..}r..sr..
   dad48:	7267 000d 725b 000d 724f 000d 7247 000d     gr..[r..Or..Gr..
   dad58:	723d 000d 7233 000d 7a21 000d               =r..3r..!z..

000dad64 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dad6c:	7435 000d 743b 000d 7923 000d 7449 000d     5t..;t..#y..It..
   dad7c:	7437 000d                                   7t..

000dad80 <_ZTV9TCPClient>:
	...
   dad88:	4159 000d 418d 000d 73ad 000d 73c7 000d     YA...A...s...s..
   dad98:	77c9 000d 751b 000d 74ed 000d 73f1 000d     .w...u...t...s..
   dada8:	76a5 000d 75a1 000d 754f 000d 7799 000d     .v...u..Ou...w..
   dadb8:	73f3 000d 742b 000d 73d9 000d 744d 000d     .s..+t...s..Mt..
   dadc8:	74cd 000d 6977 6972 676e 7200 6365 2076     .t..wiring.recv 
   dadd8:	7265 6f72 2072 203d 6425 0000               error = %d..

000dade4 <_ZTVN5spark9WiFiClassE>:
	...
   dadec:	7999 000d 798f 000d 7985 000d 793b 000d     .y...y...y..;y..
   dadfc:	7979 000d 796d 000d 7961 000d 7959 000d     yy..my..ay..Yy..
   dae0c:	794f 000d 7945 000d 7a21 000d               Oy..Ey..!z..

000dae18 <_ZTVN5spark12NetworkClassE>:
	...
   dae20:	79b9 000d 79c3 000d 79cd 000d 79d7 000d     .y...y...y...y..
   dae30:	79e1 000d 79ed 000d 79f9 000d 7a05 000d     .y...y...y...z..
   dae40:	7a0d 000d 7a17 000d 7a21 000d               .z...z..!z..

000dae4c <_ZSt7nothrow>:
   dae4c:	0000 0000 6f70 0077 0000 0000               ....pow.....

000dae58 <TWO52>:
   dae58:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000dae68 <__sf_fake_stdin>:
	...

000dae88 <__sf_fake_stdout>:
	...

000daea8 <__sf_fake_stderr>:
	...
   daec8:	0043                                        C.

000daeca <link_const_variable_data_end>:
	...

000daecc <link_constructors_location>:
   daecc:	000d42fd 	.word	0x000d42fd
   daed0:	000d4d6b 	.word	0x000d4d6b
   daed4:	000d4d71 	.word	0x000d4d71
   daed8:	000d5471 	.word	0x000d5471
   daedc:	000d57ef 	.word	0x000d57ef
   daee0:	000d58ef 	.word	0x000d58ef
   daee4:	000d595d 	.word	0x000d595d
   daee8:	000d5961 	.word	0x000d5961
   daeec:	000d5965 	.word	0x000d5965
   daef0:	000d5983 	.word	0x000d5983
   daef4:	000d5987 	.word	0x000d5987
   daef8:	000d598b 	.word	0x000d598b
   daefc:	000d598f 	.word	0x000d598f
   daf00:	000d5c5d 	.word	0x000d5c5d
   daf04:	000d5c81 	.word	0x000d5c81
   daf08:	000d5c85 	.word	0x000d5c85
   daf0c:	000d5e6b 	.word	0x000d5e6b
   daf10:	000d5e6f 	.word	0x000d5e6f
   daf14:	000d5e73 	.word	0x000d5e73
   daf18:	000d61a1 	.word	0x000d61a1
   daf1c:	000d61a5 	.word	0x000d61a5
   daf20:	000d61a9 	.word	0x000d61a9
   daf24:	000d622d 	.word	0x000d622d
   daf28:	000d6265 	.word	0x000d6265
   daf2c:	000d6869 	.word	0x000d6869
   daf30:	000d6b19 	.word	0x000d6b19
   daf34:	000d6b5d 	.word	0x000d6b5d
   daf38:	000d6c8d 	.word	0x000d6c8d
   daf3c:	000d6c9d 	.word	0x000d6c9d
   daf40:	000d6cd5 	.word	0x000d6cd5
   daf44:	000d735d 	.word	0x000d735d
   daf48:	000d79a5 	.word	0x000d79a5
   daf4c:	000d7aed 	.word	0x000d7aed
   daf50:	000d7d21 	.word	0x000d7d21
   daf54:	000d7da5 	.word	0x000d7da5
   daf58:	000d7e69 	.word	0x000d7e69
   daf5c:	000d7f2d 	.word	0x000d7f2d
