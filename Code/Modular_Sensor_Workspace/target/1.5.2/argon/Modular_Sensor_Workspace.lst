
c:/Users/mauri/Documents/IoTc2/Capstone-Deep-Dive-Coding/Code/Modular_Sensor_Workspace/target/1.5.2/argon/Modular_Sensor_Workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005474  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9490  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000478  2003d880  000d9494  0001d880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000af8  2003dcf8  2003dcf8  0002dcf8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d990c  000d990c  0002990c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9934  000d9934  00029934  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001bd6cd  00000000  00000000  00029938  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000237f4  00000000  00000000  001e7005  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002f4f4  00000000  00000000  0020a7f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003568  00000000  00000000  00239ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006280  00000000  00000000  0023d255  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000559c4  00000000  00000000  002434d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00062617  00000000  00000000  00298e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011375f  00000000  00000000  002fb4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000fa90  00000000  00000000  0040ec10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fa87 	bl	d8540 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fa8c 	bl	d8556 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d880 	.word	0x2003d880
   d4048:	000d9494 	.word	0x000d9494
   d404c:	2003dcf8 	.word	0x2003dcf8
   d4050:	2003dcf8 	.word	0x2003dcf8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 f959 	bl	d7310 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9484 	.word	0x000d9484
   d4080:	000d93ec 	.word	0x000d93ec

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8ae 	b.w	d41e4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f907 	bl	d429c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 b8ff 	b.w	d7294 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 be3d 	b.w	d6d14 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 be43 	b.w	d6d24 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 be41 	b.w	d6d24 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fd9e 	bl	d6bec <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d692d 	.word	0x000d692d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40c8:	7c03      	ldrb	r3, [r0, #16]
   d40ca:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40ce:	4602      	mov	r2, r0
   d40d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40d4:	b12b      	cbz	r3, d40e2 <_ZN4File9availableEv+0x1a>
   d40d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40d8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40da:	1a18      	subs	r0, r3, r0
   d40dc:	bf48      	it	mi
   d40de:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40e2:	4770      	bx	lr

000d40e4 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40e4:	4770      	bx	lr

000d40e6 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40e6:	4770      	bx	lr

000d40e8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40e8:	4770      	bx	lr

000d40ea <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d40ea:	3010      	adds	r0, #16
   d40ec:	f001 bdb8 	b.w	d5c60 <_ZN7FatFile4syncEv>

000d40f0 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d40f0:	3010      	adds	r0, #16
   d40f2:	f001 bd58 	b.w	d5ba6 <_ZN7FatFile4peekEv>

000d40f6 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d40f6:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d40f8:	2201      	movs	r2, #1
   d40fa:	f10d 0107 	add.w	r1, sp, #7
   d40fe:	3010      	adds	r0, #16
   d4100:	f001 fc9e 	bl	d5a40 <_ZN7FatFile4readEPvj>
   d4104:	2801      	cmp	r0, #1
   d4106:	bf0c      	ite	eq
   d4108:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d410c:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d4110:	b003      	add	sp, #12
   d4112:	f85d fb04 	ldr.w	pc, [sp], #4

000d4116 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4116:	3010      	adds	r0, #16
   d4118:	f001 bdd8 	b.w	d5ccc <_ZN7FatFile5writeEPKvj>

000d411c <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d411c:	b507      	push	{r0, r1, r2, lr}
   d411e:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4120:	2201      	movs	r2, #1
   d4122:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4126:	3010      	adds	r0, #16
   d4128:	4619      	mov	r1, r3
   d412a:	f001 fdcf 	bl	d5ccc <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d412e:	b003      	add	sp, #12
   d4130:	f85d fb04 	ldr.w	pc, [sp], #4

000d4134 <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d4134:	b510      	push	{r4, lr}
   d4136:	2134      	movs	r1, #52	; 0x34
   d4138:	4604      	mov	r4, r0
   d413a:	f004 f897 	bl	d826c <_ZdlPvj>
   d413e:	4620      	mov	r0, r4
   d4140:	bd10      	pop	{r4, pc}
	...

000d4144 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4146:	4602      	mov	r2, r0
   d4148:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d414a:	7913      	ldrb	r3, [r2, #4]
   d414c:	6895      	ldr	r5, [r2, #8]
   d414e:	b133      	cbz	r3, d415e <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4150:	b93d      	cbnz	r5, d4162 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4152:	490c      	ldr	r1, [pc, #48]	; (d4184 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4154:	b004      	add	sp, #16
   d4156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d415a:	f002 bfd3 	b.w	d7104 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d415e:	4b0a      	ldr	r3, [pc, #40]	; (d4188 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4160:	e000      	b.n	d4164 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4162:	4b0a      	ldr	r3, [pc, #40]	; (d418c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4164:	7b16      	ldrb	r6, [r2, #12]
   d4166:	4c0a      	ldr	r4, [pc, #40]	; (d4190 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4168:	490a      	ldr	r1, [pc, #40]	; (d4194 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d416a:	7b52      	ldrb	r2, [r2, #13]
   d416c:	9202      	str	r2, [sp, #8]
   d416e:	2e01      	cmp	r6, #1
   d4170:	bf08      	it	eq
   d4172:	4621      	moveq	r1, r4
   d4174:	9101      	str	r1, [sp, #4]
   d4176:	9500      	str	r5, [sp, #0]
   d4178:	4a07      	ldr	r2, [pc, #28]	; (d4198 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d417a:	2100      	movs	r1, #0
   d417c:	f002 ffff 	bl	d717e <_ZN5Print11printf_implEbPKcz>
  }
   d4180:	b004      	add	sp, #16
   d4182:	bd70      	pop	{r4, r5, r6, pc}
   d4184:	000d863b 	.word	0x000d863b
   d4188:	000d8ead 	.word	0x000d8ead
   d418c:	000d862a 	.word	0x000d862a
   d4190:	000d8633 	.word	0x000d8633
   d4194:	000d8637 	.word	0x000d8637
   d4198:	000d8651 	.word	0x000d8651

000d419c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d419c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d419e:	6984      	ldr	r4, [r0, #24]
   d41a0:	4b0a      	ldr	r3, [pc, #40]	; (d41cc <_ZN9TCPClientD1Ev+0x30>)
   d41a2:	6003      	str	r3, [r0, #0]
   d41a4:	4605      	mov	r5, r0
   d41a6:	b17c      	cbz	r4, d41c8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41a8:	6863      	ldr	r3, [r4, #4]
   d41aa:	3b01      	subs	r3, #1
   d41ac:	6063      	str	r3, [r4, #4]
   d41ae:	b95b      	cbnz	r3, d41c8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d41b0:	6823      	ldr	r3, [r4, #0]
   d41b2:	4620      	mov	r0, r4
   d41b4:	689b      	ldr	r3, [r3, #8]
   d41b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41b8:	68a3      	ldr	r3, [r4, #8]
   d41ba:	3b01      	subs	r3, #1
   d41bc:	60a3      	str	r3, [r4, #8]
   d41be:	b91b      	cbnz	r3, d41c8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d41c0:	6823      	ldr	r3, [r4, #0]
   d41c2:	4620      	mov	r0, r4
   d41c4:	68db      	ldr	r3, [r3, #12]
   d41c6:	4798      	blx	r3
   d41c8:	4628      	mov	r0, r5
   d41ca:	bd38      	pop	{r3, r4, r5, pc}
   d41cc:	000d92c0 	.word	0x000d92c0

000d41d0 <_ZN9TCPClientD0Ev>:
   d41d0:	b510      	push	{r4, lr}
   d41d2:	4604      	mov	r4, r0
   d41d4:	f7ff ffe2 	bl	d419c <_ZN9TCPClientD1Ev>
   d41d8:	4620      	mov	r0, r4
   d41da:	211c      	movs	r1, #28
   d41dc:	f004 f846 	bl	d826c <_ZdlPvj>
   d41e0:	4620      	mov	r0, r4
   d41e2:	bd10      	pop	{r4, pc}

000d41e4 <setup>:
float temp;
float press;
float hum;
float alt;

void setup() {
   d41e4:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d41e6:	f003 f9a9 	bl	d753c <_Z16_fetch_usbserialv>
   d41ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41ee:	f003 f999 	bl	d7524 <_ZN9USBSerial5beginEl>
  delay(100);
   d41f2:	2064      	movs	r0, #100	; 0x64
   d41f4:	f003 f810 	bl	d7218 <delay>
  Serial1.begin(9600); // for using with the DFRobot player
   d41f8:	f003 fa28 	bl	d764c <_Z22__fetch_global_Serial1v>
   d41fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4200:	f003 fa1e 	bl	d7640 <_ZN11USARTSerial5beginEm>
  delay(100); // waiting for serial monitor to initialize 
   d4204:	2064      	movs	r0, #100	; 0x64
   d4206:	f003 f807 	bl	d7218 <delay>
  Wire.begin();
   d420a:	f003 fffb 	bl	d8204 <_Z19__fetch_global_Wirev>
   d420e:	f003 fa81 	bl	d7714 <_ZN7TwoWire5beginEv>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4212:	223c      	movs	r2, #60	; 0x3c
   d4214:	2102      	movs	r1, #2
   d4216:	4819      	ldr	r0, [pc, #100]	; (d427c <setup+0x98>)
   d4218:	f001 f818 	bl	d524c <_ZN16Adafruit_SSD13065beginEhh>
  display.display();
   d421c:	4817      	ldr	r0, [pc, #92]	; (d427c <setup+0x98>)
   d421e:	f001 f8e7 	bl	d53f0 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();
   d4222:	4816      	ldr	r0, [pc, #88]	; (d427c <setup+0x98>)
   d4224:	f000 ffc2 	bl	d51ac <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4228:	4814      	ldr	r0, [pc, #80]	; (d427c <setup+0x98>)
   d422a:	f001 f8e1 	bl	d53f0 <_ZN16Adafruit_SSD13067displayEv>

  pixel.begin();
   d422e:	4814      	ldr	r0, [pc, #80]	; (d4280 <setup+0x9c>)
   d4230:	f000 fc04 	bl	d4a3c <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.show();
   d4234:	4812      	ldr	r0, [pc, #72]	; (d4280 <setup+0x9c>)
   d4236:	f000 fc37 	bl	d4aa8 <_ZN17Adafruit_NeoPixel4showEv>

  bme.begin(0x76);
   d423a:	2176      	movs	r1, #118	; 0x76
   d423c:	4811      	ldr	r0, [pc, #68]	; (d4284 <setup+0xa0>)
   d423e:	f000 fbc1 	bl	d49c4 <_ZN15Adafruit_BME2805beginEh>
  senseAQ.init();
   d4242:	4811      	ldr	r0, [pc, #68]	; (d4288 <setup+0xa4>)
   d4244:	f002 f941 	bl	d64ca <_ZN16AirQualitySensor4initEv>
  if(!SD.begin(SD_CS_PIN)){
    Serial.println("initialization failed!");
    return;
  }
  */
  Serial.println("SD init");
   d4248:	f003 f978 	bl	d753c <_Z16_fetch_usbserialv>
   d424c:	490f      	ldr	r1, [pc, #60]	; (d428c <setup+0xa8>)
   d424e:	f002 ff6c 	bl	d712a <_ZN5Print7printlnEPKc>
  if(!myDFP.begin(Serial1)){
   d4252:	f003 f9fb 	bl	d764c <_Z22__fetch_global_Serial1v>
   d4256:	2201      	movs	r2, #1
   d4258:	4601      	mov	r1, r0
   d425a:	480d      	ldr	r0, [pc, #52]	; (d4290 <setup+0xac>)
   d425c:	f002 fa7a 	bl	d6754 <_ZN19DFRobotDFPlayerMini5beginER6Streamb>
   d4260:	b928      	cbnz	r0, d426e <setup+0x8a>
    Serial.println("DFPlayer init failed");
   d4262:	f003 f96b 	bl	d753c <_Z16_fetch_usbserialv>
   d4266:	490b      	ldr	r1, [pc, #44]	; (d4294 <setup+0xb0>)
   d4268:	f002 ff5f 	bl	d712a <_ZN5Print7printlnEPKc>
   d426c:	e7fe      	b.n	d426c <setup+0x88>
    while(true);
  }
  Serial.println("DFPlayer init");
   d426e:	f003 f965 	bl	d753c <_Z16_fetch_usbserialv>
   d4272:	4909      	ldr	r1, [pc, #36]	; (d4298 <setup+0xb4>)
    Serial.println("FILE_BASE_NAME too long");
    while(1);
  }
  file.printf("timestamp, whatever data"); // printing data header. "timestamp" and "data" are remanents
  */
}
   d4274:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("SD init");
  if(!myDFP.begin(Serial1)){
    Serial.println("DFPlayer init failed");
    while(true);
  }
  Serial.println("DFPlayer init");
   d4278:	f002 bf57 	b.w	d712a <_ZN5Print7printlnEPKc>
   d427c:	2003e320 	.word	0x2003e320
   d4280:	2003e394 	.word	0x2003e394
   d4284:	2003dd40 	.word	0x2003dd40
   d4288:	2003e2dc 	.word	0x2003e2dc
   d428c:	000d866f 	.word	0x000d866f
   d4290:	2003e2f8 	.word	0x2003e2f8
   d4294:	000d8677 	.word	0x000d8677
   d4298:	000d868c 	.word	0x000d868c

000d429c <loop>:
  file.printf("timestamp, whatever data"); // printing data header. "timestamp" and "data" are remanents
  */
}


void loop() {
   d429c:	b508      	push	{r3, lr}
//MQTT_connect(); // still need to impliment the subscribe/publish code. also now the name for the function has changed.
  myDFP.playFolder(11, 1);
   d429e:	2201      	movs	r2, #1
   d42a0:	210b      	movs	r1, #11
   d42a2:	4807      	ldr	r0, [pc, #28]	; (d42c0 <loop+0x24>)
   d42a4:	f002 fa7b 	bl	d679e <_ZN19DFRobotDFPlayerMini10playFolderEhh>
  Serial.println("playing...");
   d42a8:	f003 f948 	bl	d753c <_Z16_fetch_usbserialv>
   d42ac:	4905      	ldr	r1, [pc, #20]	; (d42c4 <loop+0x28>)
   d42ae:	f002 ff3c 	bl	d712a <_ZN5Print7printlnEPKc>
  delay(5000);  
   d42b2:	f241 3088 	movw	r0, #5000	; 0x1388
}
   d42b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void loop() {
//MQTT_connect(); // still need to impliment the subscribe/publish code. also now the name for the function has changed.
  myDFP.playFolder(11, 1);
  Serial.println("playing...");
  delay(5000);  
   d42ba:	f002 bfad 	b.w	d7218 <delay>
   d42be:	bf00      	nop
   d42c0:	2003e2f8 	.word	0x2003e2f8
   d42c4:	000d869a 	.word	0x000d869a

000d42c8 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d42c8:	b510      	push	{r4, lr}
   d42ca:	21d4      	movs	r1, #212	; 0xd4
   d42cc:	4604      	mov	r4, r0
   d42ce:	f003 ffcd 	bl	d826c <_ZdlPvj>
   d42d2:	4620      	mov	r0, r4
   d42d4:	bd10      	pop	{r4, pc}

000d42d6 <_ZN16Adafruit_SSD1306D0Ev>:
   d42d6:	b510      	push	{r4, lr}
   d42d8:	2124      	movs	r1, #36	; 0x24
   d42da:	4604      	mov	r4, r0
   d42dc:	f003 ffc6 	bl	d826c <_ZdlPvj>
   d42e0:	4620      	mov	r0, r4
   d42e2:	bd10      	pop	{r4, pc}

000d42e4 <_GLOBAL__sub_I_myDFP>:
void DangerLED(){
  pixel.clear();
  pixel.setPixelColor(pixNum, red); // forgot to put in the actual pixel number for all the above functions 
  pixel.setBrightness(luminoscity);
  pixel.show();
}
   d42e4:	b573      	push	{r0, r1, r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d42e6:	f002 fa71 	bl	d67cc <HAL_Pin_Map>
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
   d42ea:	4b51      	ldr	r3, [pc, #324]	; (d4430 <_GLOBAL__sub_I_myDFP+0x14c>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d42ec:	4e51      	ldr	r6, [pc, #324]	; (d4434 <_GLOBAL__sub_I_myDFP+0x150>)
   d42ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d42f2:	609a      	str	r2, [r3, #8]
   d42f4:	4a50      	ldr	r2, [pc, #320]	; (d4438 <_GLOBAL__sub_I_myDFP+0x154>)
   d42f6:	6811      	ldr	r1, [r2, #0]
   d42f8:	f8c3 1016 	str.w	r1, [r3, #22]
   d42fc:	6851      	ldr	r1, [r2, #4]
   d42fe:	8912      	ldrh	r2, [r2, #8]
   d4300:	f8c3 101a 	str.w	r1, [r3, #26]
   d4304:	83da      	strh	r2, [r3, #30]
   d4306:	2102      	movs	r1, #2
   d4308:	2200      	movs	r2, #0
   d430a:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
   d430e:	f883 2020 	strb.w	r2, [r3, #32]
   d4312:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   d4316:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d431a:	4b48      	ldr	r3, [pc, #288]	; (d443c <_GLOBAL__sub_I_myDFP+0x158>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d431c:	2164      	movs	r1, #100	; 0x64
   d431e:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4322:	4947      	ldr	r1, [pc, #284]	; (d4440 <_GLOBAL__sub_I_myDFP+0x15c>)
   d4324:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d4328:	2101      	movs	r1, #1
   d432a:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d432e:	6831      	ldr	r1, [r6, #0]
   d4330:	71da      	strb	r2, [r3, #7]
   d4332:	f011 0501 	ands.w	r5, r1, #1
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4336:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d433a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d433e:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4342:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4346:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d434a:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d434e:	461c      	mov	r4, r3
   d4350:	d10a      	bne.n	d4368 <_GLOBAL__sub_I_myDFP+0x84>
   d4352:	4630      	mov	r0, r6
   d4354:	f7ff feb0 	bl	d40b8 <__cxa_guard_acquire>
   d4358:	b130      	cbz	r0, d4368 <_GLOBAL__sub_I_myDFP+0x84>
   d435a:	4629      	mov	r1, r5
   d435c:	4839      	ldr	r0, [pc, #228]	; (d4444 <_GLOBAL__sub_I_myDFP+0x160>)
   d435e:	f002 fd3d 	bl	d6ddc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4362:	4630      	mov	r0, r6
   d4364:	f7ff fead 	bl	d40c2 <__cxa_guard_release>
   d4368:	4837      	ldr	r0, [pc, #220]	; (d4448 <_GLOBAL__sub_I_myDFP+0x164>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d436a:	4b36      	ldr	r3, [pc, #216]	; (d4444 <_GLOBAL__sub_I_myDFP+0x160>)
  #define SD_CS_PIN SS
  #define error(msg) sd.errorHalt(msg)


/*      for subscribing | publishing        */
  TCPClient TheClient;
   d436c:	4e37      	ldr	r6, [pc, #220]	; (d444c <_GLOBAL__sub_I_myDFP+0x168>)
   d436e:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d4372:	2500      	movs	r5, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8


/*      for SD logging        */
int i;
SdFat SD;
File file;
   d4378:	4a35      	ldr	r2, [pc, #212]	; (d4450 <_GLOBAL__sub_I_myDFP+0x16c>)
   d437a:	4936      	ldr	r1, [pc, #216]	; (d4454 <_GLOBAL__sub_I_myDFP+0x170>)
   d437c:	7405      	strb	r5, [r0, #16]
   d437e:	7445      	strb	r5, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4380:	6045      	str	r5, [r0, #4]
   d4382:	6083      	str	r3, [r0, #8]
 public:
  File() {}
   d4384:	4b34      	ldr	r3, [pc, #208]	; (d4458 <_GLOBAL__sub_I_myDFP+0x174>)
   d4386:	6003      	str	r3, [r0, #0]
   d4388:	f003 ff62 	bl	d8250 <__aeabi_atexit>
  #define SD_CS_PIN SS
  #define error(msg) sd.errorHalt(msg)


/*      for subscribing | publishing        */
  TCPClient TheClient;
   d438c:	4630      	mov	r0, r6
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d438e:	4c33      	ldr	r4, [pc, #204]	; (d445c <_GLOBAL__sub_I_myDFP+0x178>)
   d4390:	f003 fd70 	bl	d7e74 <_ZN9TCPClientC1Ev>
   d4394:	4a2e      	ldr	r2, [pc, #184]	; (d4450 <_GLOBAL__sub_I_myDFP+0x16c>)
   d4396:	4932      	ldr	r1, [pc, #200]	; (d4460 <_GLOBAL__sub_I_myDFP+0x17c>)
   d4398:	4630      	mov	r0, r6
   d439a:	f003 ff59 	bl	d8250 <__aeabi_atexit>
   d439e:	4b31      	ldr	r3, [pc, #196]	; (d4464 <_GLOBAL__sub_I_myDFP+0x180>)
   d43a0:	9300      	str	r3, [sp, #0]
   d43a2:	f240 7229 	movw	r2, #1833	; 0x729
   d43a6:	4b30      	ldr	r3, [pc, #192]	; (d4468 <_GLOBAL__sub_I_myDFP+0x184>)
   d43a8:	4930      	ldr	r1, [pc, #192]	; (d446c <_GLOBAL__sub_I_myDFP+0x188>)
   d43aa:	4620      	mov	r0, r4
   d43ac:	f001 fae0 	bl	d5970 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d43b0:	4b2f      	ldr	r3, [pc, #188]	; (d4470 <_GLOBAL__sub_I_myDFP+0x18c>)
  Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d43b2:	4a27      	ldr	r2, [pc, #156]	; (d4450 <_GLOBAL__sub_I_myDFP+0x16c>)
   d43b4:	492f      	ldr	r1, [pc, #188]	; (d4474 <_GLOBAL__sub_I_myDFP+0x190>)
   d43b6:	6023      	str	r3, [r4, #0]
   d43b8:	4620      	mov	r0, r4
   d43ba:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d43be:	f003 ff47 	bl	d8250 <__aeabi_atexit>
  Adafruit_MQTT_Subscribe subData = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/ "); // put feed if any subscription needed
   d43c2:	462b      	mov	r3, r5
   d43c4:	4621      	mov	r1, r4
   d43c6:	4a2c      	ldr	r2, [pc, #176]	; (d4478 <_GLOBAL__sub_I_myDFP+0x194>)
   d43c8:	482c      	ldr	r0, [pc, #176]	; (d447c <_GLOBAL__sub_I_myDFP+0x198>)
   d43ca:	f001 faf8 	bl	d59be <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Publish pubData1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_BME");
   d43ce:	462b      	mov	r3, r5
   d43d0:	4621      	mov	r1, r4
   d43d2:	4a2b      	ldr	r2, [pc, #172]	; (d4480 <_GLOBAL__sub_I_myDFP+0x19c>)
   d43d4:	482b      	ldr	r0, [pc, #172]	; (d4484 <_GLOBAL__sub_I_myDFP+0x1a0>)
   d43d6:	f001 faed 	bl	d59b4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Publish pubData2 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_MQ-9");
   d43da:	462b      	mov	r3, r5
   d43dc:	4621      	mov	r1, r4
   d43de:	4a2a      	ldr	r2, [pc, #168]	; (d4488 <_GLOBAL__sub_I_myDFP+0x1a4>)
   d43e0:	482a      	ldr	r0, [pc, #168]	; (d448c <_GLOBAL__sub_I_myDFP+0x1a8>)
   d43e2:	f001 fae7 	bl	d59b4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
  Adafruit_MQTT_Publish pubData3 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_AirQuality");
   d43e6:	462b      	mov	r3, r5
   d43e8:	4a29      	ldr	r2, [pc, #164]	; (d4490 <_GLOBAL__sub_I_myDFP+0x1ac>)
   d43ea:	482a      	ldr	r0, [pc, #168]	; (d4494 <_GLOBAL__sub_I_myDFP+0x1b0>)
   d43ec:	4621      	mov	r1, r4
   d43ee:	f001 fae1 	bl	d59b4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

  
Adafruit_BME280 bme; // for bme 
   d43f2:	4829      	ldr	r0, [pc, #164]	; (d4498 <_GLOBAL__sub_I_myDFP+0x1b4>)
   d43f4:	f000 f85c 	bl	d44b0 <_ZN15Adafruit_BME280C1Ev>
  #define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_SSD1306 display(OLED_RESET); // for oled
   d43f8:	2113      	movs	r1, #19
   d43fa:	4828      	ldr	r0, [pc, #160]	; (d449c <_GLOBAL__sub_I_myDFP+0x1b8>)
   d43fc:	f000 fec0 	bl	d5180 <_ZN16Adafruit_SSD1306C1Ea>
   d4400:	4a13      	ldr	r2, [pc, #76]	; (d4450 <_GLOBAL__sub_I_myDFP+0x16c>)
   d4402:	4927      	ldr	r1, [pc, #156]	; (d44a0 <_GLOBAL__sub_I_myDFP+0x1bc>)
   d4404:	4825      	ldr	r0, [pc, #148]	; (d449c <_GLOBAL__sub_I_myDFP+0x1b8>)
   d4406:	f003 ff23 	bl	d8250 <__aeabi_atexit>
AirQualitySensor senseAQ(A2); // put sensor pin in here
   d440a:	2111      	movs	r1, #17
   d440c:	4825      	ldr	r0, [pc, #148]	; (d44a4 <_GLOBAL__sub_I_myDFP+0x1c0>)
   d440e:	f002 f857 	bl	d64c0 <_ZN16AirQualitySensorC1Ei>

/*    for NeoPixels       */
  #define PIXEL_PIN A0// add pin for pixels
  #define PIXEL_COUNT 2// put number of pixels
  #define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixel(PIXEL_COUNT,PIXEL_PIN,PIXEL_TYPE);
   d4412:	2302      	movs	r3, #2
   d4414:	4619      	mov	r1, r3
   d4416:	2213      	movs	r2, #19
   d4418:	4823      	ldr	r0, [pc, #140]	; (d44a8 <_GLOBAL__sub_I_myDFP+0x1c4>)
   d441a:	f000 fb34 	bl	d4a86 <_ZN17Adafruit_NeoPixelC1Ethh>
   d441e:	4a0c      	ldr	r2, [pc, #48]	; (d4450 <_GLOBAL__sub_I_myDFP+0x16c>)
   d4420:	4922      	ldr	r1, [pc, #136]	; (d44ac <_GLOBAL__sub_I_myDFP+0x1c8>)
   d4422:	4821      	ldr	r0, [pc, #132]	; (d44a8 <_GLOBAL__sub_I_myDFP+0x1c4>)
void DangerLED(){
  pixel.clear();
  pixel.setPixelColor(pixNum, red); // forgot to put in the actual pixel number for all the above functions 
  pixel.setBrightness(luminoscity);
  pixel.show();
}
   d4424:	b002      	add	sp, #8
   d4426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

/*    for NeoPixels       */
  #define PIXEL_PIN A0// add pin for pixels
  #define PIXEL_COUNT 2// put number of pixels
  #define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixel(PIXEL_COUNT,PIXEL_PIN,PIXEL_TYPE);
   d442a:	f003 bf11 	b.w	d8250 <__aeabi_atexit>
   d442e:	bf00      	nop
   d4430:	2003e2f8 	.word	0x2003e2f8
   d4434:	2003dcfc 	.word	0x2003dcfc
   d4438:	000d8620 	.word	0x000d8620
   d443c:	2003de58 	.word	0x2003de58
   d4440:	000d85f4 	.word	0x000d85f4
   d4444:	2003dd00 	.word	0x2003dd00
   d4448:	2003e360 	.word	0x2003e360
   d444c:	2003e344 	.word	0x2003e344
   d4450:	2003dcf8 	.word	0x2003dcf8
   d4454:	000d40e5 	.word	0x000d40e5
   d4458:	000d8600 	.word	0x000d8600
   d445c:	2003dd84 	.word	0x2003dd84
   d4460:	000d419d 	.word	0x000d419d
   d4464:	000d8829 	.word	0x000d8829
   d4468:	000d880d 	.word	0x000d880d
   d446c:	000d8819 	.word	0x000d8819
   d4470:	000d8e60 	.word	0x000d8e60
   d4474:	000d40e7 	.word	0x000d40e7
   d4478:	000d8844 	.word	0x000d8844
   d447c:	2003dd08 	.word	0x2003dd08
   d4480:	000d8858 	.word	0x000d8858
   d4484:	2003e3a8 	.word	0x2003e3a8
   d4488:	000d887b 	.word	0x000d887b
   d448c:	2003e3b4 	.word	0x2003e3b4
   d4490:	000d889f 	.word	0x000d889f
   d4494:	2003e3c0 	.word	0x2003e3c0
   d4498:	2003dd40 	.word	0x2003dd40
   d449c:	2003e320 	.word	0x2003e320
   d44a0:	000d40e9 	.word	0x000d40e9
   d44a4:	2003e2dc 	.word	0x2003e2dc
   d44a8:	2003e394 	.word	0x2003e394
   d44ac:	000d49e7 	.word	0x000d49e7

000d44b0 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d44b0:	22ff      	movs	r2, #255	; 0xff
   d44b2:	7402      	strb	r2, [r0, #16]
   d44b4:	7442      	strb	r2, [r0, #17]
   d44b6:	7482      	strb	r2, [r0, #18]
   d44b8:	74c2      	strb	r2, [r0, #19]
{ }
   d44ba:	4770      	bx	lr

000d44bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d44bc:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d44be:	4d09      	ldr	r5, [pc, #36]	; (d44e4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d44c0:	6829      	ldr	r1, [r5, #0]
   d44c2:	f011 0401 	ands.w	r4, r1, #1
   d44c6:	d10a      	bne.n	d44de <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d44c8:	4628      	mov	r0, r5
   d44ca:	f7ff fdf5 	bl	d40b8 <__cxa_guard_acquire>
   d44ce:	b130      	cbz	r0, d44de <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d44d0:	4621      	mov	r1, r4
   d44d2:	4805      	ldr	r0, [pc, #20]	; (d44e8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d44d4:	f002 fc82 	bl	d6ddc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d44d8:	4628      	mov	r0, r5
   d44da:	f7ff fdf2 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d44de:	4802      	ldr	r0, [pc, #8]	; (d44e8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d44e0:	bd38      	pop	{r3, r4, r5, pc}
   d44e2:	bf00      	nop
   d44e4:	2003dcfc 	.word	0x2003dcfc
   d44e8:	2003dd00 	.word	0x2003dd00

000d44ec <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d44ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d44f0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d44f4:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d44f6:	4605      	mov	r5, r0
   d44f8:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d44fa:	d106      	bne.n	d450a <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d44fc:	f7ff ffde 	bl	d44bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4500:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4506:	f002 bd85 	b.w	d7014 <_ZN8SPIClass8transferEh>
   d450a:	2607      	movs	r6, #7
   d450c:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d450e:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4512:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4516:	2100      	movs	r1, #0
   d4518:	b280      	uxth	r0, r0
   d451a:	f003 fdf2 	bl	d8102 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d451e:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4522:	fa08 f106 	lsl.w	r1, r8, r6
   d4526:	4039      	ands	r1, r7
   d4528:	b280      	uxth	r0, r0
   d452a:	f003 fdea 	bl	d8102 <digitalWrite>
        digitalWrite(_sck, HIGH);
   d452e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4532:	2101      	movs	r1, #1
   d4534:	b280      	uxth	r0, r0
   d4536:	f003 fde4 	bl	d8102 <digitalWrite>
        if (digitalRead(_miso))
   d453a:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d453e:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4540:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4542:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4544:	f003 fdf6 	bl	d8134 <digitalRead>
   d4548:	b108      	cbz	r0, d454e <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d454a:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d454e:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4552:	d2de      	bcs.n	d4512 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4554:	4620      	mov	r0, r4
   d4556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d455a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d455a:	b508      	push	{r3, lr}
        instance().endTransaction();
   d455c:	f7ff ffae 	bl	d44bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4564:	f002 bc77 	b.w	d6e56 <_ZN8SPIClass14endTransactionEv>

000d4568 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4568:	b510      	push	{r4, lr}
   d456a:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d456c:	f7ff ffa6 	bl	d44bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4570:	4621      	mov	r1, r4
    }
   d4572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4576:	f002 bc87 	b.w	d6e88 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d457c <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d457c:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d457e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4582:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4584:	b085      	sub	sp, #20
   d4586:	4604      	mov	r4, r0
   d4588:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d458a:	d11d      	bne.n	d45c8 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d458c:	7901      	ldrb	r1, [r0, #4]
   d458e:	6800      	ldr	r0, [r0, #0]
   d4590:	f003 f8f7 	bl	d7782 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4594:	6820      	ldr	r0, [r4, #0]
   d4596:	6803      	ldr	r3, [r0, #0]
   d4598:	4629      	mov	r1, r5
   d459a:	689b      	ldr	r3, [r3, #8]
   d459c:	4798      	blx	r3
        _wire -> endTransmission();
   d459e:	6820      	ldr	r0, [r4, #0]
   d45a0:	f003 f8fa 	bl	d7798 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d45a4:	2202      	movs	r2, #2
   d45a6:	7921      	ldrb	r1, [r4, #4]
   d45a8:	6820      	ldr	r0, [r4, #0]
   d45aa:	f003 f8e7 	bl	d777c <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d45ae:	6820      	ldr	r0, [r4, #0]
   d45b0:	6803      	ldr	r3, [r0, #0]
   d45b2:	695b      	ldr	r3, [r3, #20]
   d45b4:	4798      	blx	r3
   d45b6:	4605      	mov	r5, r0
   d45b8:	6820      	ldr	r0, [r4, #0]
   d45ba:	6803      	ldr	r3, [r0, #0]
   d45bc:	695b      	ldr	r3, [r3, #20]
   d45be:	4798      	blx	r3
   d45c0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d45c4:	b285      	uxth	r5, r0
   d45c6:	e035      	b.n	d4634 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d45c8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d45cc:	3301      	adds	r3, #1
   d45ce:	d10e      	bne.n	d45ee <_ZN15Adafruit_BME2806read16Eh+0x72>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d45d0:	4b1a      	ldr	r3, [pc, #104]	; (d463c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d45d2:	4a1b      	ldr	r2, [pc, #108]	; (d4640 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d45d4:	9300      	str	r3, [sp, #0]
   d45d6:	9202      	str	r2, [sp, #8]
   d45d8:	2300      	movs	r3, #0
   d45da:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d45dc:	4668      	mov	r0, sp
   d45de:	f88d 3004 	strb.w	r3, [sp, #4]
   d45e2:	f88d 200c 	strb.w	r2, [sp, #12]
   d45e6:	f88d 300d 	strb.w	r3, [sp, #13]
   d45ea:	f7ff ffbd 	bl	d4568 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d45ee:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d45f2:	2100      	movs	r1, #0
   d45f4:	b280      	uxth	r0, r0
   d45f6:	f003 fd84 	bl	d8102 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d45fa:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d45fe:	4620      	mov	r0, r4
   d4600:	f7ff ff74 	bl	d44ec <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4604:	2100      	movs	r1, #0
   d4606:	4620      	mov	r0, r4
   d4608:	f7ff ff70 	bl	d44ec <_ZN15Adafruit_BME2807spixferEh>
   d460c:	2100      	movs	r1, #0
   d460e:	4605      	mov	r5, r0
   d4610:	4620      	mov	r0, r4
   d4612:	f7ff ff6b 	bl	d44ec <_ZN15Adafruit_BME2807spixferEh>
   d4616:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d461a:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d461c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4620:	2101      	movs	r1, #1
   d4622:	b280      	uxth	r0, r0
   d4624:	f003 fd6d 	bl	d8102 <digitalWrite>
        if (_sck == -1)
   d4628:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d462c:	3301      	adds	r3, #1
   d462e:	d101      	bne.n	d4634 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4630:	f7ff ff93 	bl	d455a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4634:	4628      	mov	r0, r5
   d4636:	b005      	add	sp, #20
   d4638:	bd30      	pop	{r4, r5, pc}
   d463a:	bf00      	nop
   d463c:	000d85f4 	.word	0x000d85f4
   d4640:	0007a120 	.word	0x0007a120

000d4644 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4644:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4646:	f7ff ff99 	bl	d457c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d464a:	ba40      	rev16	r0, r0
}
   d464c:	b280      	uxth	r0, r0
   d464e:	bd08      	pop	{r3, pc}

000d4650 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4650:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4652:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4656:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4658:	b085      	sub	sp, #20
   d465a:	4604      	mov	r4, r0
   d465c:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d465e:	d116      	bne.n	d468e <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4660:	7901      	ldrb	r1, [r0, #4]
   d4662:	6800      	ldr	r0, [r0, #0]
   d4664:	f003 f88d 	bl	d7782 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4668:	6820      	ldr	r0, [r4, #0]
   d466a:	6803      	ldr	r3, [r0, #0]
   d466c:	4629      	mov	r1, r5
   d466e:	689b      	ldr	r3, [r3, #8]
   d4670:	4798      	blx	r3
        _wire -> endTransmission();
   d4672:	6820      	ldr	r0, [r4, #0]
   d4674:	f003 f890 	bl	d7798 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4678:	2201      	movs	r2, #1
   d467a:	7921      	ldrb	r1, [r4, #4]
   d467c:	6820      	ldr	r0, [r4, #0]
   d467e:	f003 f87d 	bl	d777c <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4682:	6820      	ldr	r0, [r4, #0]
   d4684:	6803      	ldr	r3, [r0, #0]
   d4686:	695b      	ldr	r3, [r3, #20]
   d4688:	4798      	blx	r3
   d468a:	b2c5      	uxtb	r5, r0
   d468c:	e02e      	b.n	d46ec <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d468e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4692:	3301      	adds	r3, #1
   d4694:	d10e      	bne.n	d46b4 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4696:	4b17      	ldr	r3, [pc, #92]	; (d46f4 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4698:	4a17      	ldr	r2, [pc, #92]	; (d46f8 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d469a:	9300      	str	r3, [sp, #0]
   d469c:	9202      	str	r2, [sp, #8]
   d469e:	2300      	movs	r3, #0
   d46a0:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d46a2:	4668      	mov	r0, sp
   d46a4:	f88d 3004 	strb.w	r3, [sp, #4]
   d46a8:	f88d 200c 	strb.w	r2, [sp, #12]
   d46ac:	f88d 300d 	strb.w	r3, [sp, #13]
   d46b0:	f7ff ff5a 	bl	d4568 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d46b4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46b8:	2100      	movs	r1, #0
   d46ba:	b280      	uxth	r0, r0
   d46bc:	f003 fd21 	bl	d8102 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d46c0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d46c4:	4620      	mov	r0, r4
   d46c6:	f7ff ff11 	bl	d44ec <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d46ca:	2100      	movs	r1, #0
   d46cc:	4620      	mov	r0, r4
   d46ce:	f7ff ff0d 	bl	d44ec <_ZN15Adafruit_BME2807spixferEh>
   d46d2:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d46d4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46d8:	2101      	movs	r1, #1
   d46da:	b280      	uxth	r0, r0
   d46dc:	f003 fd11 	bl	d8102 <digitalWrite>
        if (_sck == -1)
   d46e0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d46e4:	3301      	adds	r3, #1
   d46e6:	d101      	bne.n	d46ec <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d46e8:	f7ff ff37 	bl	d455a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d46ec:	4628      	mov	r0, r5
   d46ee:	b005      	add	sp, #20
   d46f0:	bd30      	pop	{r4, r5, pc}
   d46f2:	bf00      	nop
   d46f4:	000d85f4 	.word	0x000d85f4
   d46f8:	0007a120 	.word	0x0007a120

000d46fc <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d46fc:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d46fe:	21f3      	movs	r1, #243	; 0xf3
   d4700:	f7ff ffa6 	bl	d4650 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4704:	f000 0001 	and.w	r0, r0, #1
   d4708:	bd08      	pop	{r3, pc}

000d470a <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d470a:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d470c:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d470e:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4710:	f7ff ff98 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4714:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4716:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4718:	4620      	mov	r0, r4
   d471a:	f7ff ff93 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
   d471e:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4720:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4722:	4620      	mov	r0, r4
   d4724:	f7ff ff8e 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4728:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d472a:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d472c:	4620      	mov	r0, r4
   d472e:	f7ff ff89 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4732:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4734:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4736:	4620      	mov	r0, r4
   d4738:	f7ff ff84 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
   d473c:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d473e:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4740:	4620      	mov	r0, r4
   d4742:	f7ff ff7f 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
   d4746:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4748:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d474a:	4620      	mov	r0, r4
   d474c:	f7ff ff7a 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
   d4750:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4752:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4754:	4620      	mov	r0, r4
   d4756:	f7ff ff75 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
   d475a:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d475c:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d475e:	4620      	mov	r0, r4
   d4760:	f7ff ff70 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
   d4764:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4766:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4768:	4620      	mov	r0, r4
   d476a:	f7ff ff6b 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
   d476e:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4770:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4772:	4620      	mov	r0, r4
   d4774:	f7ff ff66 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
   d4778:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d477a:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d477c:	4620      	mov	r0, r4
   d477e:	f7ff ff61 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4782:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4784:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4786:	4620      	mov	r0, r4
   d4788:	f7ff ff62 	bl	d4650 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d478c:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d478e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4792:	4620      	mov	r0, r4
   d4794:	f7ff ff56 	bl	d4644 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4798:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d479a:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d479c:	4620      	mov	r0, r4
   d479e:	f7ff ff57 	bl	d4650 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d47a2:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d47a4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d47a8:	4620      	mov	r0, r4
   d47aa:	f7ff ff51 	bl	d4650 <_ZN15Adafruit_BME2805read8Eh>
   d47ae:	21e5      	movs	r1, #229	; 0xe5
   d47b0:	4605      	mov	r5, r0
   d47b2:	4620      	mov	r0, r4
   d47b4:	f7ff ff4c 	bl	d4650 <_ZN15Adafruit_BME2805read8Eh>
   d47b8:	f000 000f 	and.w	r0, r0, #15
   d47bc:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d47c0:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d47c2:	21e6      	movs	r1, #230	; 0xe6
   d47c4:	4620      	mov	r0, r4
   d47c6:	f7ff ff43 	bl	d4650 <_ZN15Adafruit_BME2805read8Eh>
   d47ca:	21e5      	movs	r1, #229	; 0xe5
   d47cc:	4605      	mov	r5, r0
   d47ce:	4620      	mov	r0, r4
   d47d0:	f7ff ff3e 	bl	d4650 <_ZN15Adafruit_BME2805read8Eh>
   d47d4:	1100      	asrs	r0, r0, #4
   d47d6:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d47da:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d47dc:	21e7      	movs	r1, #231	; 0xe7
   d47de:	4620      	mov	r0, r4
   d47e0:	f7ff ff36 	bl	d4650 <_ZN15Adafruit_BME2805read8Eh>
   d47e4:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d47e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d47ec <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d47ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d47ee:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d47f2:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d47f4:	4604      	mov	r4, r0
   d47f6:	460e      	mov	r6, r1
   d47f8:	4615      	mov	r5, r2
    if (_cs == -1) {
   d47fa:	d111      	bne.n	d4820 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d47fc:	7901      	ldrb	r1, [r0, #4]
   d47fe:	6800      	ldr	r0, [r0, #0]
   d4800:	f002 ffbf 	bl	d7782 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4804:	6820      	ldr	r0, [r4, #0]
   d4806:	6803      	ldr	r3, [r0, #0]
   d4808:	4631      	mov	r1, r6
   d480a:	689b      	ldr	r3, [r3, #8]
   d480c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d480e:	6820      	ldr	r0, [r4, #0]
   d4810:	6803      	ldr	r3, [r0, #0]
   d4812:	4629      	mov	r1, r5
   d4814:	689b      	ldr	r3, [r3, #8]
   d4816:	4798      	blx	r3
        _wire -> endTransmission();
   d4818:	6820      	ldr	r0, [r4, #0]
   d481a:	f002 ffbd 	bl	d7798 <_ZN7TwoWire15endTransmissionEv>
   d481e:	e02d      	b.n	d487c <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4820:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4824:	3301      	adds	r3, #1
   d4826:	d10e      	bne.n	d4846 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4828:	4b15      	ldr	r3, [pc, #84]	; (d4880 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d482a:	4a16      	ldr	r2, [pc, #88]	; (d4884 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d482c:	9300      	str	r3, [sp, #0]
   d482e:	9202      	str	r2, [sp, #8]
   d4830:	2300      	movs	r3, #0
   d4832:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4834:	4668      	mov	r0, sp
   d4836:	f88d 3004 	strb.w	r3, [sp, #4]
   d483a:	f88d 200c 	strb.w	r2, [sp, #12]
   d483e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4842:	f7ff fe91 	bl	d4568 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4846:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d484a:	2100      	movs	r1, #0
   d484c:	b280      	uxth	r0, r0
   d484e:	f003 fc58 	bl	d8102 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4852:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4856:	4620      	mov	r0, r4
   d4858:	f7ff fe48 	bl	d44ec <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d485c:	4629      	mov	r1, r5
   d485e:	4620      	mov	r0, r4
   d4860:	f7ff fe44 	bl	d44ec <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4864:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4868:	2101      	movs	r1, #1
   d486a:	b280      	uxth	r0, r0
   d486c:	f003 fc49 	bl	d8102 <digitalWrite>
    if (_sck == -1)
   d4870:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4874:	3301      	adds	r3, #1
   d4876:	d101      	bne.n	d487c <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4878:	f7ff fe6f 	bl	d455a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d487c:	b004      	add	sp, #16
   d487e:	bd70      	pop	{r4, r5, r6, pc}
   d4880:	000d85f4 	.word	0x000d85f4
   d4884:	0007a120 	.word	0x0007a120

000d4888 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d488a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d488e:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4892:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4896:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d489a:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d489e:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d48a2:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d48a6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d48aa:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d48ae:	f366 1347 	bfi	r3, r6, #5, #3
   d48b2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d48b6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d48ba:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d48be:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d48c0:	f367 0302 	bfi	r3, r7, #0, #3
   d48c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d48c8:	f006 0207 	and.w	r2, r6, #7
   d48cc:	21f2      	movs	r1, #242	; 0xf2
   d48ce:	f7ff ff8d 	bl	d47ec <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d48d2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d48d6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d48da:	f002 0107 	and.w	r1, r2, #7
   d48de:	009b      	lsls	r3, r3, #2
   d48e0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d48e4:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d48e8:	4620      	mov	r0, r4
   d48ea:	21f5      	movs	r1, #245	; 0xf5
   d48ec:	f7ff ff7e 	bl	d47ec <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d48f0:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d48f4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d48f8:	f002 0107 	and.w	r1, r2, #7
   d48fc:	009b      	lsls	r3, r3, #2
   d48fe:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4902:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4906:	4620      	mov	r0, r4
   d4908:	21f4      	movs	r1, #244	; 0xf4
}
   d490a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d490e:	f7ff bf6d 	b.w	d47ec <_ZN15Adafruit_BME2806write8Ehh>

000d4912 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4912:	b530      	push	{r4, r5, lr}
   d4914:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4916:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d491a:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d491c:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d491e:	d103      	bne.n	d4928 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4920:	6820      	ldr	r0, [r4, #0]
   d4922:	f002 fef7 	bl	d7714 <_ZN7TwoWire5beginEv>
   d4926:	e022      	b.n	d496e <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4928:	2101      	movs	r1, #1
   d492a:	b280      	uxth	r0, r0
   d492c:	f003 fbe9 	bl	d8102 <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4930:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4934:	2101      	movs	r1, #1
   d4936:	b280      	uxth	r0, r0
   d4938:	f003 fbd2 	bl	d80e0 <pinMode>
        if (_sck == -1) {
   d493c:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4940:	1c43      	adds	r3, r0, #1
   d4942:	d104      	bne.n	d494e <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4944:	f7ff fdba 	bl	d44bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4948:	f002 fa52 	bl	d6df0 <_ZN8SPIClass5beginEv>
   d494c:	e00f      	b.n	d496e <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d494e:	2101      	movs	r1, #1
   d4950:	b280      	uxth	r0, r0
   d4952:	f003 fbc5 	bl	d80e0 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4956:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d495a:	2101      	movs	r1, #1
   d495c:	b280      	uxth	r0, r0
   d495e:	f003 fbbf 	bl	d80e0 <pinMode>
            pinMode(_miso, INPUT);
   d4962:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4966:	2100      	movs	r1, #0
   d4968:	b280      	uxth	r0, r0
   d496a:	f003 fbb9 	bl	d80e0 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d496e:	21d0      	movs	r1, #208	; 0xd0
   d4970:	4620      	mov	r0, r4
   d4972:	f7ff fe6d 	bl	d4650 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4976:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4978:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d497a:	d120      	bne.n	d49be <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d497c:	4620      	mov	r0, r4
   d497e:	22b6      	movs	r2, #182	; 0xb6
   d4980:	21e0      	movs	r1, #224	; 0xe0
   d4982:	f7ff ff33 	bl	d47ec <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4986:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d498a:	f002 fc45 	bl	d7218 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d498e:	4620      	mov	r0, r4
   d4990:	f7ff feb4 	bl	d46fc <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4994:	4605      	mov	r5, r0
   d4996:	b108      	cbz	r0, d499c <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4998:	2064      	movs	r0, #100	; 0x64
   d499a:	e7f6      	b.n	d498a <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d499c:	4620      	mov	r0, r4
   d499e:	f7ff feb4 	bl	d470a <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d49a2:	2305      	movs	r3, #5
   d49a4:	9300      	str	r3, [sp, #0]
   d49a6:	461a      	mov	r2, r3
   d49a8:	2103      	movs	r1, #3
   d49aa:	4620      	mov	r0, r4
   d49ac:	9502      	str	r5, [sp, #8]
   d49ae:	9501      	str	r5, [sp, #4]
   d49b0:	f7ff ff6a 	bl	d4888 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d49b4:	2064      	movs	r0, #100	; 0x64
   d49b6:	f002 fc2f 	bl	d7218 <delay>
   d49ba:	2001      	movs	r0, #1
   d49bc:	e000      	b.n	d49c0 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d49be:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d49c0:	b005      	add	sp, #20
   d49c2:	bd30      	pop	{r4, r5, pc}

000d49c4 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d49c4:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d49c6:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d49c8:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d49ca:	f003 fc1b 	bl	d8204 <_Z19__fetch_global_Wirev>
   d49ce:	6020      	str	r0, [r4, #0]
	return init();
   d49d0:	4620      	mov	r0, r4
}
   d49d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d49d6:	f7ff bf9c 	b.w	d4912 <_ZN15Adafruit_BME2804initEv>

000d49da <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d49da:	f001 bef7 	b.w	d67cc <HAL_Pin_Map>

000d49de <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d49de:	f001 bfad 	b.w	d693c <HAL_Timer_Get_Micro_Seconds>

000d49e2 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d49e2:	f001 bfa3 	b.w	d692c <HAL_Delay_Microseconds>

000d49e6 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d49e6:	b510      	push	{r4, lr}
   d49e8:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d49ea:	68c0      	ldr	r0, [r0, #12]
   d49ec:	b108      	cbz	r0, d49f2 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d49ee:	f002 f999 	bl	d6d24 <free>
  if (begun) pinMode(pin, INPUT);
   d49f2:	7823      	ldrb	r3, [r4, #0]
   d49f4:	b11b      	cbz	r3, d49fe <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d49f6:	2100      	movs	r1, #0
   d49f8:	79e0      	ldrb	r0, [r4, #7]
   d49fa:	f003 fb71 	bl	d80e0 <pinMode>
}
   d49fe:	4620      	mov	r0, r4
   d4a00:	bd10      	pop	{r4, pc}

000d4a02 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4a02:	b538      	push	{r3, r4, r5, lr}
   d4a04:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4a06:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4a08:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4a0a:	b108      	cbz	r0, d4a10 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4a0c:	f002 f98a 	bl	d6d24 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4a10:	79a3      	ldrb	r3, [r4, #6]
   d4a12:	2b06      	cmp	r3, #6
   d4a14:	bf0c      	ite	eq
   d4a16:	2004      	moveq	r0, #4
   d4a18:	2003      	movne	r0, #3
   d4a1a:	fb10 f005 	smulbb	r0, r0, r5
   d4a1e:	b280      	uxth	r0, r0
   d4a20:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4a22:	f002 f977 	bl	d6d14 <malloc>
   d4a26:	60e0      	str	r0, [r4, #12]
   d4a28:	b128      	cbz	r0, d4a36 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4a2a:	88a2      	ldrh	r2, [r4, #4]
   d4a2c:	2100      	movs	r1, #0
   d4a2e:	f003 fd92 	bl	d8556 <memset>
    numLEDs = n;
   d4a32:	8065      	strh	r5, [r4, #2]
   d4a34:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4a36:	80a0      	strh	r0, [r4, #4]
   d4a38:	8060      	strh	r0, [r4, #2]
   d4a3a:	bd38      	pop	{r3, r4, r5, pc}

000d4a3c <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d4a3c:	b510      	push	{r4, lr}
   d4a3e:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4a40:	2101      	movs	r1, #1
   d4a42:	79c0      	ldrb	r0, [r0, #7]
   d4a44:	f003 fb4c 	bl	d80e0 <pinMode>
  digitalWrite(pin, LOW);
   d4a48:	2100      	movs	r1, #0
   d4a4a:	79e0      	ldrb	r0, [r4, #7]
   d4a4c:	f003 fb59 	bl	d8102 <digitalWrite>
  begun = true;
   d4a50:	2301      	movs	r3, #1
   d4a52:	7023      	strb	r3, [r4, #0]
   d4a54:	bd10      	pop	{r4, pc}

000d4a56 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4a56:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d4a58:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4a5a:	4605      	mov	r5, r0
   d4a5c:	460c      	mov	r4, r1
    if (begun) {
   d4a5e:	b11b      	cbz	r3, d4a68 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4a60:	2100      	movs	r1, #0
   d4a62:	79c0      	ldrb	r0, [r0, #7]
   d4a64:	f003 fb3c 	bl	d80e0 <pinMode>
    }
    pin = p;
    if (begun) {
   d4a68:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d4a6a:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4a6c:	b153      	cbz	r3, d4a84 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d4a6e:	b2a4      	uxth	r4, r4
   d4a70:	4620      	mov	r0, r4
   d4a72:	2101      	movs	r1, #1
   d4a74:	f003 fb34 	bl	d80e0 <pinMode>
        digitalWrite(p, LOW);
   d4a78:	4620      	mov	r0, r4
   d4a7a:	2100      	movs	r1, #0
    }
}
   d4a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d4a80:	f003 bb3f 	b.w	d8102 <digitalWrite>
   d4a84:	bd38      	pop	{r3, r4, r5, pc}

000d4a86 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4a86:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4a88:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4a8a:	4604      	mov	r4, r0
   d4a8c:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4a8e:	7183      	strb	r3, [r0, #6]
   d4a90:	7005      	strb	r5, [r0, #0]
   d4a92:	7205      	strb	r5, [r0, #8]
   d4a94:	60c5      	str	r5, [r0, #12]
   d4a96:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d4a98:	f7ff ffb3 	bl	d4a02 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	4631      	mov	r1, r6
   d4aa0:	f7ff ffd9 	bl	d4a56 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4aa4:	4620      	mov	r0, r4
   d4aa6:	bd70      	pop	{r4, r5, r6, pc}

000d4aa8 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4aa8:	68c3      	ldr	r3, [r0, #12]
   d4aaa:	2b00      	cmp	r3, #0
   d4aac:	f000 818b 	beq.w	d4dc6 <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d4ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ab4:	7983      	ldrb	r3, [r0, #6]
   d4ab6:	3b02      	subs	r3, #2
   d4ab8:	b2db      	uxtb	r3, r3
   d4aba:	2b04      	cmp	r3, #4
   d4abc:	bf9c      	itt	ls
   d4abe:	4ac4      	ldrls	r2, [pc, #784]	; (d4dd0 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d4ac0:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4ac4:	b087      	sub	sp, #28
   d4ac6:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4ac8:	bf88      	it	hi
   d4aca:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4acc:	f7ff ff87 	bl	d49de <micros>
   d4ad0:	692b      	ldr	r3, [r5, #16]
   d4ad2:	1ac0      	subs	r0, r0, r3
   d4ad4:	42a0      	cmp	r0, r4
   d4ad6:	d3f9      	bcc.n	d4acc <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4ad8:	4abe      	ldr	r2, [pc, #760]	; (d4dd4 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4ada:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4adc:	ca07      	ldmia	r2, {r0, r1, r2}
   d4ade:	ac06      	add	r4, sp, #24
   d4ae0:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4ae4:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4ae6:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4ae8:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4aec:	3304      	adds	r3, #4
   d4aee:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4af0:	b922      	cbnz	r2, d4afc <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4af2:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4af6:	2b00      	cmp	r3, #0
   d4af8:	f2c0 8155 	blt.w	d4da6 <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d4afc:	9c04      	ldr	r4, [sp, #16]
   d4afe:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4b02:	b923      	cbnz	r3, d4b0e <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4b04:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4b08:	2b00      	cmp	r3, #0
   d4b0a:	f2c0 813c 	blt.w	d4d86 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d4b0e:	9c05      	ldr	r4, [sp, #20]
   d4b10:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4b14:	b91b      	cbnz	r3, d4b1e <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4b16:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4b1a:	2b00      	cmp	r3, #0
   d4b1c:	db6e      	blt.n	d4bfc <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b1e:	4bae      	ldr	r3, [pc, #696]	; (d4dd8 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d4b20:	79ea      	ldrb	r2, [r5, #7]
   d4b22:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4b24:	4cad      	ldr	r4, [pc, #692]	; (d4ddc <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4b26:	49ae      	ldr	r1, [pc, #696]	; (d4de0 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4b28:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b2a:	0112      	lsls	r2, r2, #4
   d4b2c:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4b2e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b32:	785b      	ldrb	r3, [r3, #1]
   d4b34:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4b36:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4b38:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b3a:	f003 031f 	and.w	r3, r3, #31
   d4b3e:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4b42:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4b44:	433a      	orrs	r2, r7
   d4b46:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d4b48:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4b4a:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4b4c:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4b50:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4b54:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4b56:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4b58:	2800      	cmp	r0, #0
   d4b5a:	d044      	beq.n	d4be6 <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d4b5c:	46cc      	mov	ip, r9
   d4b5e:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4b60:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d4b64:	f81c eb01 	ldrb.w	lr, [ip], #1
   d4b68:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4b6a:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4b6c:	6863      	ldr	r3, [r4, #4]
   d4b6e:	1a9b      	subs	r3, r3, r2
   d4b70:	2b46      	cmp	r3, #70	; 0x46
   d4b72:	d9fb      	bls.n	d4b6c <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d4b74:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d4b78:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4b7c:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4b80:	ea43 0307 	orr.w	r3, r3, r7
   d4b84:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4b88:	d02f      	beq.n	d4bea <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4b8a:	6863      	ldr	r3, [r4, #4]
   d4b8c:	1a9b      	subs	r3, r3, r2
   d4b8e:	2b28      	cmp	r3, #40	; 0x28
   d4b90:	d9fb      	bls.n	d4b8a <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4b92:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4b96:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4b98:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4b9c:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4ba0:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4ba4:	d1e2      	bne.n	d4b6c <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4ba6:	ebc9 030c 	rsb	r3, r9, ip
   d4baa:	88a8      	ldrh	r0, [r5, #4]
   d4bac:	b29b      	uxth	r3, r3
   d4bae:	4298      	cmp	r0, r3
   d4bb0:	d8d8      	bhi.n	d4b64 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d4bb2:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d4bb6:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4bba:	6863      	ldr	r3, [r4, #4]
   d4bbc:	1a9b      	subs	r3, r3, r2
   d4bbe:	2b46      	cmp	r3, #70	; 0x46
   d4bc0:	d9fb      	bls.n	d4bba <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4bc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4bc6:	ebca 0a03 	rsb	sl, sl, r3
   d4bca:	4582      	cmp	sl, r0
   d4bcc:	f0c0 80d5 	bcc.w	d4d7a <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4bd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4bd4:	f7ff ff05 	bl	d49e2 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4bd8:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4bda:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4bde:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4be2:	2800      	cmp	r0, #0
   d4be4:	d1ba      	bne.n	d4b5c <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d4be6:	4602      	mov	r2, r0
   d4be8:	e7e7      	b.n	d4bba <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4bea:	6863      	ldr	r3, [r4, #4]
   d4bec:	1a9b      	subs	r3, r3, r2
   d4bee:	2b11      	cmp	r3, #17
   d4bf0:	d8cf      	bhi.n	d4b92 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d4bf2:	6863      	ldr	r3, [r4, #4]
   d4bf4:	1a9b      	subs	r3, r3, r2
   d4bf6:	2b11      	cmp	r3, #17
   d4bf8:	d9f7      	bls.n	d4bea <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d4bfa:	e7ca      	b.n	d4b92 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bfc:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c00:	2b00      	cmp	r3, #0
   d4c02:	da8c      	bge.n	d4b1e <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c04:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c08:	2b00      	cmp	r3, #0
   d4c0a:	da88      	bge.n	d4b1e <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4c0c:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4c10:	2b00      	cmp	r3, #0
   d4c12:	da84      	bge.n	d4b1e <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4c14:	9801      	ldr	r0, [sp, #4]
   d4c16:	f002 f87d 	bl	d6d14 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4c1a:	2800      	cmp	r0, #0
   d4c1c:	f43f af7f 	beq.w	d4b1e <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4c20:	88ab      	ldrh	r3, [r5, #4]
   d4c22:	2b00      	cmp	r3, #0
   d4c24:	f000 80d0 	beq.w	d4dc8 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d4c28:	2700      	movs	r7, #0
   d4c2a:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4c2c:	4e6d      	ldr	r6, [pc, #436]	; (d4de4 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d4c2e:	496e      	ldr	r1, [pc, #440]	; (d4de8 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d4c30:	e000      	b.n	d4c34 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d4c32:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4c34:	68ea      	ldr	r2, [r5, #12]
   d4c36:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4c38:	f103 0e01 	add.w	lr, r3, #1
   d4c3c:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4c40:	bf14      	ite	ne
   d4c42:	46b0      	movne	r8, r6
   d4c44:	4688      	moveq	r8, r1
   d4c46:	fa1f fe8e 	uxth.w	lr, lr
   d4c4a:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4c4e:	bf14      	ite	ne
   d4c50:	46b1      	movne	r9, r6
   d4c52:	4689      	moveq	r9, r1
   d4c54:	f012 0f20 	tst.w	r2, #32
   d4c58:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4c5c:	bf18      	it	ne
   d4c5e:	46b2      	movne	sl, r6
   d4c60:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d4c64:	bf08      	it	eq
   d4c66:	468a      	moveq	sl, r1
   d4c68:	f103 0802 	add.w	r8, r3, #2
   d4c6c:	f012 0f10 	tst.w	r2, #16
   d4c70:	f103 0e03 	add.w	lr, r3, #3
   d4c74:	bf14      	ite	ne
   d4c76:	46b4      	movne	ip, r6
   d4c78:	468c      	moveq	ip, r1
   d4c7a:	fa1f f888 	uxth.w	r8, r8
   d4c7e:	f012 0f08 	tst.w	r2, #8
   d4c82:	fa1f fe8e 	uxth.w	lr, lr
   d4c86:	f103 0904 	add.w	r9, r3, #4
   d4c8a:	fa1f f989 	uxth.w	r9, r9
   d4c8e:	bf14      	ite	ne
   d4c90:	46b3      	movne	fp, r6
   d4c92:	468b      	moveq	fp, r1
   d4c94:	f012 0f04 	tst.w	r2, #4
   d4c98:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4c9c:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d4ca0:	bf14      	ite	ne
   d4ca2:	46b2      	movne	sl, r6
   d4ca4:	468a      	moveq	sl, r1
   d4ca6:	f103 0805 	add.w	r8, r3, #5
   d4caa:	f012 0f02 	tst.w	r2, #2
   d4cae:	f103 0c06 	add.w	ip, r3, #6
   d4cb2:	f103 0e07 	add.w	lr, r3, #7
   d4cb6:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d4cba:	fa1f fe8e 	uxth.w	lr, lr
   d4cbe:	bf14      	ite	ne
   d4cc0:	46b1      	movne	r9, r6
   d4cc2:	4689      	moveq	r9, r1
   d4cc4:	fa1f f888 	uxth.w	r8, r8
   d4cc8:	f012 0f01 	tst.w	r2, #1
   d4ccc:	fa1f fc8c 	uxth.w	ip, ip
   d4cd0:	bf14      	ite	ne
   d4cd2:	4632      	movne	r2, r6
   d4cd4:	460a      	moveq	r2, r1
   d4cd6:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4cda:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d4cde:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4ce2:	3701      	adds	r7, #1
   d4ce4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4ce8:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4cea:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4cee:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4cf0:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4cf2:	d89e      	bhi.n	d4c32 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4cf4:	f103 0209 	add.w	r2, r3, #9
   d4cf8:	330a      	adds	r3, #10
   d4cfa:	b292      	uxth	r2, r2
   d4cfc:	b29b      	uxth	r3, r3
   d4cfe:	0052      	lsls	r2, r2, #1
   d4d00:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4d02:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4d04:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4d08:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4d0a:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4d0c:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4d0e:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4d10:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4d12:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d16:	4e30      	ldr	r6, [pc, #192]	; (d4dd8 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4d18:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4d1c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4d20:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4d24:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4d28:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4d2c:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d4d30:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4d34:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d38:	79eb      	ldrb	r3, [r5, #7]
   d4d3a:	6831      	ldr	r1, [r6, #0]
   d4d3c:	011b      	lsls	r3, r3, #4
   d4d3e:	18ce      	adds	r6, r1, r3
   d4d40:	5cc9      	ldrb	r1, [r1, r3]
   d4d42:	7873      	ldrb	r3, [r6, #1]
   d4d44:	f003 031f 	and.w	r3, r3, #31
   d4d48:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4d4c:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d4e:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d4d52:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d4d56:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4d5a:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4d5c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4d60:	2b00      	cmp	r3, #0
   d4d62:	d0fb      	beq.n	d4d5c <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4d64:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4d66:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4d6a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d4d6e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4d72:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d4d76:	f001 ffd5 	bl	d6d24 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4d7a:	f7ff fe30 	bl	d49de <micros>
   d4d7e:	6128      	str	r0, [r5, #16]
}
   d4d80:	b007      	add	sp, #28
   d4d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d86:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d8a:	2b00      	cmp	r3, #0
   d4d8c:	f6bf aebf 	bge.w	d4b0e <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d90:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d94:	2b00      	cmp	r3, #0
   d4d96:	f6bf aeba 	bge.w	d4b0e <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4d9a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d9e:	2b00      	cmp	r3, #0
   d4da0:	f6bf aeb5 	bge.w	d4b0e <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d4da4:	e736      	b.n	d4c14 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4da6:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4daa:	2b00      	cmp	r3, #0
   d4dac:	f6bf aea6 	bge.w	d4afc <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4db0:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4db4:	2b00      	cmp	r3, #0
   d4db6:	f6bf aea1 	bge.w	d4afc <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4dba:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4dbe:	2b00      	cmp	r3, #0
   d4dc0:	f6bf ae9c 	bge.w	d4afc <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d4dc4:	e726      	b.n	d4c14 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d4dc6:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4dc8:	2304      	movs	r3, #4
   d4dca:	2202      	movs	r2, #2
   d4dcc:	e799      	b.n	d4d02 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d4dce:	bf00      	nop
   d4dd0:	000d88d8 	.word	0x000d88d8
   d4dd4:	000d88cc 	.word	0x000d88cc
   d4dd8:	2003e3cc 	.word	0x2003e3cc
   d4ddc:	e000edf0 	.word	0xe000edf0
   d4de0:	e0001000 	.word	0xe0001000
   d4de4:	ffff800d 	.word	0xffff800d
   d4de8:	ffff8006 	.word	0xffff8006

000d4dec <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   d4dec:	b508      	push	{r3, lr}
   d4dee:	f001 fced 	bl	d67cc <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4df2:	f001 fceb 	bl	d67cc <HAL_Pin_Map>
   d4df6:	4b01      	ldr	r3, [pc, #4]	; (d4dfc <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4df8:	6018      	str	r0, [r3, #0]
   d4dfa:	bd08      	pop	{r3, pc}
   d4dfc:	2003e3cc 	.word	0x2003e3cc

000d4e00 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4e00:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4e02:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4e04:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4e08:	2c02      	cmp	r4, #2
   d4e0a:	d008      	beq.n	d4e1e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4e0c:	2c03      	cmp	r4, #3
   d4e0e:	d00f      	beq.n	d4e30 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4e10:	2c01      	cmp	r4, #1
   d4e12:	d170      	bne.n	d4ef6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4e14:	8904      	ldrh	r4, [r0, #8]
   d4e16:	3c01      	subs	r4, #1
   d4e18:	1aa2      	subs	r2, r4, r2
   d4e1a:	b212      	sxth	r2, r2
      break;
   d4e1c:	e00c      	b.n	d4e38 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4e1e:	8944      	ldrh	r4, [r0, #10]
   d4e20:	3c01      	subs	r4, #1
   d4e22:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4e24:	8904      	ldrh	r4, [r0, #8]
   d4e26:	1ae4      	subs	r4, r4, r3
   d4e28:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4e2a:	b212      	sxth	r2, r2
      x -= (w-1);
   d4e2c:	b209      	sxth	r1, r1
      break;
   d4e2e:	e062      	b.n	d4ef6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4e30:	8944      	ldrh	r4, [r0, #10]
   d4e32:	1ae4      	subs	r4, r4, r3
   d4e34:	1a61      	subs	r1, r4, r1
   d4e36:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4e38:	2a00      	cmp	r2, #0
   d4e3a:	db5b      	blt.n	d4ef4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4e3c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4e40:	4294      	cmp	r4, r2
   d4e42:	f340 8090 	ble.w	d4f66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4e46:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4e48:	bfbe      	ittt	lt
   d4e4a:	185b      	addlt	r3, r3, r1
   d4e4c:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4e4e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4e50:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4e54:	18cc      	adds	r4, r1, r3
   d4e56:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4e58:	bfc4      	itt	gt
   d4e5a:	1a43      	subgt	r3, r0, r1
   d4e5c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4e5e:	2b00      	cmp	r3, #0
   d4e60:	f340 8081 	ble.w	d4f66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4e64:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4e66:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4e68:	4f3f      	ldr	r7, [pc, #252]	; (d4f68 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4e6a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4e6e:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4e72:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4e74:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4e78:	d017      	beq.n	d4eaa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4e7a:	f1c1 0108 	rsb	r1, r1, #8
   d4e7e:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4e80:	493a      	ldr	r1, [pc, #232]	; (d4f6c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4e82:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4e84:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4e86:	bf3f      	itttt	cc
   d4e88:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4e8c:	21ff      	movcc	r1, #255	; 0xff
   d4e8e:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4e92:	400e      	andcc	r6, r1
   d4e94:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4e96:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4e98:	bf0c      	ite	eq
   d4e9a:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4e9c:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4e9e:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4ea0:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4ea2:	d360      	bcc.n	d4f66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4ea4:	1a18      	subs	r0, r3, r0
   d4ea6:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4ea8:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4eaa:	2b07      	cmp	r3, #7
   d4eac:	d917      	bls.n	d4ede <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4eae:	2d01      	cmp	r5, #1
   d4eb0:	bf0c      	ite	eq
   d4eb2:	20ff      	moveq	r0, #255	; 0xff
   d4eb4:	2000      	movne	r0, #0
   d4eb6:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4eba:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4ebc:	3a08      	subs	r2, #8
   d4ebe:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4ec0:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4ec2:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4ec6:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4eca:	d8f7      	bhi.n	d4ebc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4ecc:	f1a3 0208 	sub.w	r2, r3, #8
   d4ed0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4ed4:	3201      	adds	r2, #1
   d4ed6:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4eda:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4ede:	2b00      	cmp	r3, #0
   d4ee0:	d041      	beq.n	d4f66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4ee2:	4a23      	ldr	r2, [pc, #140]	; (d4f70 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4ee4:	5cd2      	ldrb	r2, [r2, r3]
   d4ee6:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4ee8:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4eea:	bf0c      	ite	eq
   d4eec:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4eee:	4393      	bicne	r3, r2
   d4ef0:	7023      	strb	r3, [r4, #0]
   d4ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4ef6:	2a00      	cmp	r2, #0
   d4ef8:	db35      	blt.n	d4f66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4efa:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4efe:	4294      	cmp	r4, r2
   d4f00:	dd31      	ble.n	d4f66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4f02:	2900      	cmp	r1, #0
    w += x;
   d4f04:	bfbc      	itt	lt
   d4f06:	18c9      	addlt	r1, r1, r3
   d4f08:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4f0a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4f0e:	bfb8      	it	lt
   d4f10:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4f12:	18ce      	adds	r6, r1, r3
   d4f14:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4f16:	bfc4      	itt	gt
   d4f18:	1a63      	subgt	r3, r4, r1
   d4f1a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4f1c:	2b00      	cmp	r3, #0
   d4f1e:	dd22      	ble.n	d4f66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4f20:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4f22:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4f26:	4810      	ldr	r0, [pc, #64]	; (d4f68 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4f28:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4f2c:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d4f2e:	2001      	movs	r0, #1
   d4f30:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4f34:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4f36:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4f38:	d109      	bne.n	d4f4e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4f3a:	3b01      	subs	r3, #1
   d4f3c:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d4f3e:	1c5c      	adds	r4, r3, #1
   d4f40:	d011      	beq.n	d4f66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4f42:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4f46:	4310      	orrs	r0, r2
   d4f48:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4f4c:	e7f5      	b.n	d4f3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d4f4e:	43d2      	mvns	r2, r2
   d4f50:	b2d2      	uxtb	r2, r2
   d4f52:	3b01      	subs	r3, #1
   d4f54:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4f56:	1c58      	adds	r0, r3, #1
   d4f58:	d005      	beq.n	d4f66 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4f5a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4f5e:	4010      	ands	r0, r2
   d4f60:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4f64:	e7f5      	b.n	d4f52 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f68:	2003d890 	.word	0x2003d890
   d4f6c:	2003d888 	.word	0x2003d888
   d4f70:	2003d880 	.word	0x2003d880

000d4f74 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4f74:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d4f76:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4f78:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d4f7c:	2c02      	cmp	r4, #2
   d4f7e:	d008      	beq.n	d4f92 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4f80:	2c03      	cmp	r4, #3
   d4f82:	d00f      	beq.n	d4fa4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4f84:	2c01      	cmp	r4, #1
   d4f86:	d112      	bne.n	d4fae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4f88:	8904      	ldrh	r4, [r0, #8]
   d4f8a:	1ae4      	subs	r4, r4, r3
   d4f8c:	1aa2      	subs	r2, r4, r2
   d4f8e:	b212      	sxth	r2, r2
      break;
   d4f90:	e06d      	b.n	d506e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4f92:	8904      	ldrh	r4, [r0, #8]
   d4f94:	3c01      	subs	r4, #1
   d4f96:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4f98:	8944      	ldrh	r4, [r0, #10]
   d4f9a:	1ae4      	subs	r4, r4, r3
   d4f9c:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4f9e:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4fa0:	b212      	sxth	r2, r2
      break;
   d4fa2:	e004      	b.n	d4fae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d4fa4:	8944      	ldrh	r4, [r0, #10]
   d4fa6:	3c01      	subs	r4, #1
   d4fa8:	1a61      	subs	r1, r4, r1
   d4faa:	b209      	sxth	r1, r1
      break;
   d4fac:	e05f      	b.n	d506e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4fae:	2900      	cmp	r1, #0
   d4fb0:	db5c      	blt.n	d506c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4fb2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4fb6:	428c      	cmp	r4, r1
   d4fb8:	f340 8091 	ble.w	d50de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4fbc:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4fbe:	bfbc      	itt	lt
   d4fc0:	18d2      	addlt	r2, r2, r3
   d4fc2:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4fc4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4fc8:	bfb8      	it	lt
   d4fca:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4fcc:	18d4      	adds	r4, r2, r3
   d4fce:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4fd0:	bfc4      	itt	gt
   d4fd2:	1a83      	subgt	r3, r0, r2
   d4fd4:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4fd6:	2b00      	cmp	r3, #0
   d4fd8:	f340 8081 	ble.w	d50de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4fdc:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4fde:	4e40      	ldr	r6, [pc, #256]	; (d50e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4fe0:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4fe2:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4fe4:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4fe8:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4fec:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4ff0:	d017      	beq.n	d5022 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4ff2:	f1c4 0408 	rsb	r4, r4, #8
   d4ff6:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4ff8:	4c3a      	ldr	r4, [pc, #232]	; (d50e4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4ffa:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4ffc:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4ffe:	bf3f      	itttt	cc
   d5000:	ebc2 0e00 	rsbcc	lr, r2, r0
   d5004:	24ff      	movcc	r4, #255	; 0xff
   d5006:	fa44 f40e 	asrcc.w	r4, r4, lr
   d500a:	4027      	andcc	r7, r4
   d500c:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d500e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5010:	bf0c      	ite	eq
   d5012:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d5014:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5016:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d5018:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d501a:	d360      	bcc.n	d50de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d501c:	1a10      	subs	r0, r2, r0
   d501e:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d5020:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d5022:	2a07      	cmp	r2, #7
   d5024:	d917      	bls.n	d5056 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d5026:	2d01      	cmp	r5, #1
   d5028:	bf0c      	ite	eq
   d502a:	24ff      	moveq	r4, #255	; 0xff
   d502c:	2400      	movne	r4, #0
   d502e:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d5032:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d5034:	3908      	subs	r1, #8
   d5036:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d5038:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d503a:	f800 4c80 	strb.w	r4, [r0, #-128]
   d503e:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d5042:	d8f7      	bhi.n	d5034 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d5044:	f1a2 0108 	sub.w	r1, r2, #8
   d5048:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d504c:	3101      	adds	r1, #1
   d504e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d5052:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d5056:	2a00      	cmp	r2, #0
   d5058:	d041      	beq.n	d50de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d505a:	4923      	ldr	r1, [pc, #140]	; (d50e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d505c:	5c89      	ldrb	r1, [r1, r2]
   d505e:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d5060:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d5062:	bf0c      	ite	eq
   d5064:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d5066:	438a      	bicne	r2, r1
   d5068:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d506a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d506c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d506e:	2900      	cmp	r1, #0
   d5070:	db35      	blt.n	d50de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d5072:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5076:	428c      	cmp	r4, r1
   d5078:	dd31      	ble.n	d50de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d507a:	2a00      	cmp	r2, #0
    w += x;
   d507c:	bfbc      	itt	lt
   d507e:	18d2      	addlt	r2, r2, r3
   d5080:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d5082:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d5086:	bfb8      	it	lt
   d5088:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d508a:	18d6      	adds	r6, r2, r3
   d508c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d508e:	bfc4      	itt	gt
   d5090:	1aa3      	subgt	r3, r4, r2
   d5092:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d5094:	2b00      	cmp	r3, #0
   d5096:	dd22      	ble.n	d50de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d5098:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d509a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d509e:	4810      	ldr	r0, [pc, #64]	; (d50e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d50a0:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d50a4:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d50a6:	2201      	movs	r2, #1
   d50a8:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d50ac:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d50ae:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d50b0:	d109      	bne.n	d50c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d50b2:	1e5a      	subs	r2, r3, #1
   d50b4:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d50b6:	1c5c      	adds	r4, r3, #1
   d50b8:	d011      	beq.n	d50de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d50ba:	f810 2b01 	ldrb.w	r2, [r0], #1
   d50be:	430a      	orrs	r2, r1
   d50c0:	f800 2c01 	strb.w	r2, [r0, #-1]
   d50c4:	e7f5      	b.n	d50b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d50c6:	43c9      	mvns	r1, r1
   d50c8:	b2c9      	uxtb	r1, r1
   d50ca:	1e5a      	subs	r2, r3, #1
   d50cc:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d50ce:	1c5a      	adds	r2, r3, #1
   d50d0:	d005      	beq.n	d50de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d50d2:	f810 2b01 	ldrb.w	r2, [r0], #1
   d50d6:	400a      	ands	r2, r1
   d50d8:	f800 2c01 	strb.w	r2, [r0, #-1]
   d50dc:	e7f5      	b.n	d50ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d50de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50e0:	2003d890 	.word	0x2003d890
   d50e4:	2003d888 	.word	0x2003d888
   d50e8:	2003d880 	.word	0x2003d880

000d50ec <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d50ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d50ee:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d50f0:	4606      	mov	r6, r0
   d50f2:	4614      	mov	r4, r2
   d50f4:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d50f6:	db3f      	blt.n	d5178 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d50f8:	f000 fbb1 	bl	d585e <_ZN12Adafruit_GFX5widthEv>
   d50fc:	4285      	cmp	r5, r0
   d50fe:	da3b      	bge.n	d5178 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5100:	2c00      	cmp	r4, #0
   d5102:	db39      	blt.n	d5178 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5104:	4630      	mov	r0, r6
   d5106:	f000 fbad 	bl	d5864 <_ZN12Adafruit_GFX6heightEv>
   d510a:	4284      	cmp	r4, r0
   d510c:	da34      	bge.n	d5178 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d510e:	4630      	mov	r0, r6
   d5110:	f000 fba3 	bl	d585a <_ZN12Adafruit_GFX11getRotationEv>
   d5114:	2802      	cmp	r0, #2
   d5116:	d127      	bne.n	d5168 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5118:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d511a:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d511c:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d511e:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5120:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d5122:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5124:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d5126:	b204      	sxth	r4, r0
   d5128:	e006      	b.n	d5138 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d512a:	2801      	cmp	r0, #1
   d512c:	d104      	bne.n	d5138 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d512e:	8933      	ldrh	r3, [r6, #8]
   d5130:	3b01      	subs	r3, #1
   d5132:	1b1b      	subs	r3, r3, r4
   d5134:	462c      	mov	r4, r5
   d5136:	b21d      	sxth	r5, r3
   d5138:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d513a:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d513c:	fb94 f0f0 	sdiv	r0, r4, r0
   d5140:	b200      	sxth	r0, r0
   d5142:	4b0e      	ldr	r3, [pc, #56]	; (d517c <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d5144:	f004 0207 	and.w	r2, r4, #7
   d5148:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d514c:	d104      	bne.n	d5158 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d514e:	4097      	lsls	r7, r2
   d5150:	5c5a      	ldrb	r2, [r3, r1]
   d5152:	4317      	orrs	r7, r2
   d5154:	545f      	strb	r7, [r3, r1]
   d5156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d5158:	5c58      	ldrb	r0, [r3, r1]
   d515a:	2701      	movs	r7, #1
   d515c:	fa07 f202 	lsl.w	r2, r7, r2
   d5160:	ea20 0202 	bic.w	r2, r0, r2
   d5164:	545a      	strb	r2, [r3, r1]
   d5166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5168:	2803      	cmp	r0, #3
   d516a:	d1de      	bne.n	d512a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d516c:	8973      	ldrh	r3, [r6, #10]
   d516e:	3b01      	subs	r3, #1
   d5170:	1b5b      	subs	r3, r3, r5
   d5172:	4625      	mov	r5, r4
   d5174:	b21c      	sxth	r4, r3
   d5176:	e7df      	b.n	d5138 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d5178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d517a:	bf00      	nop
   d517c:	2003d890 	.word	0x2003d890

000d5180 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5180:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d5182:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d5184:	4604      	mov	r4, r0
   d5186:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d5188:	2180      	movs	r1, #128	; 0x80
   d518a:	f000 fa87 	bl	d569c <_ZN12Adafruit_GFXC1Ess>
   d518e:	4b06      	ldr	r3, [pc, #24]	; (d51a8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d5190:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d5192:	23ff      	movs	r3, #255	; 0xff
   d5194:	7763      	strb	r3, [r4, #29]
   d5196:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d519a:	77e3      	strb	r3, [r4, #31]
   d519c:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d519e:	f884 5020 	strb.w	r5, [r4, #32]
}
   d51a2:	4620      	mov	r0, r4
   d51a4:	bd38      	pop	{r3, r4, r5, pc}
   d51a6:	bf00      	nop
   d51a8:	000d88f4 	.word	0x000d88f4

000d51ac <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d51ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d51b0:	2100      	movs	r1, #0
   d51b2:	4801      	ldr	r0, [pc, #4]	; (d51b8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d51b4:	f003 b9cf 	b.w	d8556 <memset>
   d51b8:	2003d890 	.word	0x2003d890

000d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d51bc:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d51be:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d51c2:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d51c4:	4604      	mov	r4, r0
   d51c6:	460d      	mov	r5, r1
  if (sid != -1)
   d51c8:	d028      	beq.n	d521c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d51ca:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d51ce:	2101      	movs	r1, #1
   d51d0:	b280      	uxth	r0, r0
   d51d2:	f002 ff96 	bl	d8102 <digitalWrite>
    digitalWrite(dc, LOW);
   d51d6:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d51da:	2100      	movs	r1, #0
   d51dc:	b280      	uxth	r0, r0
   d51de:	f002 ff90 	bl	d8102 <digitalWrite>
    digitalWrite(cs, LOW);
   d51e2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d51e6:	2100      	movs	r1, #0
   d51e8:	b280      	uxth	r0, r0
   d51ea:	f002 ff8a 	bl	d8102 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d51ee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d51f2:	b12b      	cbz	r3, d5200 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d51f4:	f7ff f962 	bl	d44bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d51f8:	4629      	mov	r1, r5
   d51fa:	f001 ff0b 	bl	d7014 <_ZN8SPIClass8transferEh>
   d51fe:	e005      	b.n	d520c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5200:	462b      	mov	r3, r5
   d5202:	2201      	movs	r2, #1
   d5204:	7fa1      	ldrb	r1, [r4, #30]
   d5206:	7f60      	ldrb	r0, [r4, #29]
   d5208:	f002 ffbe 	bl	d8188 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d520c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5210:	2101      	movs	r1, #1
   d5212:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d5214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5218:	f002 bf73 	b.w	d8102 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d521c:	f002 fff2 	bl	d8204 <_Z19__fetch_global_Wirev>
   d5220:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5224:	f002 fab1 	bl	d778a <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d5228:	f002 ffec 	bl	d8204 <_Z19__fetch_global_Wirev>
   d522c:	6803      	ldr	r3, [r0, #0]
   d522e:	2100      	movs	r1, #0
   d5230:	689b      	ldr	r3, [r3, #8]
   d5232:	4798      	blx	r3
    Wire.write(c);
   d5234:	f002 ffe6 	bl	d8204 <_Z19__fetch_global_Wirev>
   d5238:	6803      	ldr	r3, [r0, #0]
   d523a:	4629      	mov	r1, r5
   d523c:	689b      	ldr	r3, [r3, #8]
   d523e:	4798      	blx	r3
    Wire.endTransmission();
   d5240:	f002 ffe0 	bl	d8204 <_Z19__fetch_global_Wirev>
  }
}
   d5244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d5248:	f002 baa6 	b.w	d7798 <_ZN7TwoWire15endTransmissionEv>

000d524c <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d524c:	b538      	push	{r3, r4, r5, lr}
   d524e:	4604      	mov	r4, r0
   d5250:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d5252:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d5254:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d5258:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d525a:	3301      	adds	r3, #1
   d525c:	d037      	beq.n	d52ce <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d525e:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d5262:	2101      	movs	r1, #1
   d5264:	b280      	uxth	r0, r0
   d5266:	f002 ff3b 	bl	d80e0 <pinMode>
    pinMode(cs, OUTPUT);
   d526a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d526e:	2101      	movs	r1, #1
   d5270:	b280      	uxth	r0, r0
   d5272:	f002 ff35 	bl	d80e0 <pinMode>
    if (!hwSPI){
   d5276:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d527a:	b95b      	cbnz	r3, d5294 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d527c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5280:	2101      	movs	r1, #1
   d5282:	b280      	uxth	r0, r0
   d5284:	f002 ff2c 	bl	d80e0 <pinMode>
    	pinMode(sclk, OUTPUT);
   d5288:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d528c:	2101      	movs	r1, #1
   d528e:	b280      	uxth	r0, r0
   d5290:	f002 ff26 	bl	d80e0 <pinMode>
    	}
    if (hwSPI){
   d5294:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5298:	b1eb      	cbz	r3, d52d6 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d529a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d529e:	2101      	movs	r1, #1
   d52a0:	b280      	uxth	r0, r0
   d52a2:	f002 ff2e 	bl	d8102 <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d52a6:	f7ff f909 	bl	d44bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d52aa:	2101      	movs	r1, #1
   d52ac:	f001 fdb1 	bl	d6e12 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d52b0:	f7ff f904 	bl	d44bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d52b4:	2110      	movs	r1, #16
   d52b6:	f001 fe89 	bl	d6fcc <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d52ba:	f7ff f8ff 	bl	d44bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d52be:	2100      	movs	r1, #0
   d52c0:	f001 fdb8 	bl	d6e34 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d52c4:	f7ff f8fa 	bl	d44bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d52c8:	f001 fd92 	bl	d6df0 <_ZN8SPIClass5beginEv>
   d52cc:	e003      	b.n	d52d6 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d52ce:	f002 ff99 	bl	d8204 <_Z19__fetch_global_Wirev>
   d52d2:	f002 fa1f 	bl	d7714 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d52d6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d52da:	2101      	movs	r1, #1
   d52dc:	b280      	uxth	r0, r0
   d52de:	f002 feff 	bl	d80e0 <pinMode>
  digitalWrite(rst, HIGH);
   d52e2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d52e6:	2101      	movs	r1, #1
   d52e8:	b280      	uxth	r0, r0
   d52ea:	f002 ff0a 	bl	d8102 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d52ee:	2001      	movs	r0, #1
   d52f0:	f001 ff92 	bl	d7218 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d52f4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d52f8:	2100      	movs	r1, #0
   d52fa:	b280      	uxth	r0, r0
   d52fc:	f002 ff01 	bl	d8102 <digitalWrite>
  // wait 10ms
  delay(10);
   d5300:	200a      	movs	r0, #10
   d5302:	f001 ff89 	bl	d7218 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d5306:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d530a:	2101      	movs	r1, #1
   d530c:	b280      	uxth	r0, r0
   d530e:	f002 fef8 	bl	d8102 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d5312:	4620      	mov	r0, r4
   d5314:	21ae      	movs	r1, #174	; 0xae
   d5316:	f7ff ff51 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d531a:	4620      	mov	r0, r4
   d531c:	21d5      	movs	r1, #213	; 0xd5
   d531e:	f7ff ff4d 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d5322:	4620      	mov	r0, r4
   d5324:	2180      	movs	r1, #128	; 0x80
   d5326:	f7ff ff49 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d532a:	4620      	mov	r0, r4
   d532c:	21a8      	movs	r1, #168	; 0xa8
   d532e:	f7ff ff45 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d5332:	4620      	mov	r0, r4
   d5334:	213f      	movs	r1, #63	; 0x3f
   d5336:	f7ff ff41 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d533a:	4620      	mov	r0, r4
   d533c:	21d3      	movs	r1, #211	; 0xd3
   d533e:	f7ff ff3d 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d5342:	4620      	mov	r0, r4
   d5344:	2100      	movs	r1, #0
   d5346:	f7ff ff39 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d534a:	4620      	mov	r0, r4
   d534c:	2140      	movs	r1, #64	; 0x40
   d534e:	f7ff ff35 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d5352:	218d      	movs	r1, #141	; 0x8d
   d5354:	4620      	mov	r0, r4
   d5356:	f7ff ff31 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d535a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d535c:	bf0c      	ite	eq
   d535e:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d5360:	2114      	movne	r1, #20
   d5362:	4620      	mov	r0, r4
   d5364:	f7ff ff2a 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d5368:	4620      	mov	r0, r4
   d536a:	2120      	movs	r1, #32
   d536c:	f7ff ff26 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d5370:	4620      	mov	r0, r4
   d5372:	2100      	movs	r1, #0
   d5374:	f7ff ff22 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d5378:	4620      	mov	r0, r4
   d537a:	21a1      	movs	r1, #161	; 0xa1
   d537c:	f7ff ff1e 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d5380:	4620      	mov	r0, r4
   d5382:	21c8      	movs	r1, #200	; 0xc8
   d5384:	f7ff ff1a 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5388:	4620      	mov	r0, r4
   d538a:	21da      	movs	r1, #218	; 0xda
   d538c:	f7ff ff16 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d5390:	4620      	mov	r0, r4
   d5392:	2112      	movs	r1, #18
   d5394:	f7ff ff12 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5398:	2181      	movs	r1, #129	; 0x81
   d539a:	4620      	mov	r0, r4
   d539c:	f7ff ff0e 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d53a0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d53a2:	bf0c      	ite	eq
   d53a4:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d53a6:	21cf      	movne	r1, #207	; 0xcf
   d53a8:	4620      	mov	r0, r4
   d53aa:	f7ff ff07 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d53ae:	21d9      	movs	r1, #217	; 0xd9
   d53b0:	4620      	mov	r0, r4
   d53b2:	f7ff ff03 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d53b6:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d53b8:	bf0c      	ite	eq
   d53ba:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d53bc:	21f1      	movne	r1, #241	; 0xf1
   d53be:	4620      	mov	r0, r4
   d53c0:	f7ff fefc 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d53c4:	4620      	mov	r0, r4
   d53c6:	21db      	movs	r1, #219	; 0xdb
   d53c8:	f7ff fef8 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d53cc:	4620      	mov	r0, r4
   d53ce:	2140      	movs	r1, #64	; 0x40
   d53d0:	f7ff fef4 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d53d4:	4620      	mov	r0, r4
   d53d6:	21a4      	movs	r1, #164	; 0xa4
   d53d8:	f7ff fef0 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d53dc:	4620      	mov	r0, r4
   d53de:	21a6      	movs	r1, #166	; 0xa6
   d53e0:	f7ff feec 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d53e4:	4620      	mov	r0, r4
   d53e6:	21af      	movs	r1, #175	; 0xaf
}
   d53e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d53ec:	f7ff bee6 	b.w	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d53f0 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d53f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d53f4:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d53f6:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d53f8:	f7ff fee0 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d53fc:	2100      	movs	r1, #0
   d53fe:	4620      	mov	r0, r4
   d5400:	f7ff fedc 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d5404:	217f      	movs	r1, #127	; 0x7f
   d5406:	4620      	mov	r0, r4
   d5408:	f7ff fed8 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d540c:	2122      	movs	r1, #34	; 0x22
   d540e:	4620      	mov	r0, r4
   d5410:	f7ff fed4 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d5414:	2100      	movs	r1, #0
   d5416:	4620      	mov	r0, r4
   d5418:	f7ff fed0 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d541c:	2107      	movs	r1, #7
   d541e:	4620      	mov	r0, r4
   d5420:	f7ff fecc 	bl	d51bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d5424:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d5428:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d54e8 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d542c:	3301      	adds	r3, #1
   d542e:	d035      	beq.n	d549c <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d5430:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5434:	2101      	movs	r1, #1
   d5436:	b280      	uxth	r0, r0
   d5438:	f002 fe63 	bl	d8102 <digitalWrite>
    digitalWrite(dc, HIGH);
   d543c:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d5440:	2101      	movs	r1, #1
   d5442:	b280      	uxth	r0, r0
   d5444:	f002 fe5d 	bl	d8102 <digitalWrite>
    digitalWrite(cs, LOW);
   d5448:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d544c:	2100      	movs	r1, #0
   d544e:	b280      	uxth	r0, r0
   d5450:	f002 fe57 	bl	d8102 <digitalWrite>
   d5454:	2001      	movs	r0, #1
   d5456:	f001 fa69 	bl	d692c <HAL_Delay_Microseconds>
   d545a:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d545c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d5460:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d5464:	b12b      	cbz	r3, d5472 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5466:	f7ff f829 	bl	d44bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d546a:	4631      	mov	r1, r6
   d546c:	f001 fdd2 	bl	d7014 <_ZN8SPIClass8transferEh>
   d5470:	e005      	b.n	d547e <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5472:	4633      	mov	r3, r6
   d5474:	2201      	movs	r2, #1
   d5476:	7fa1      	ldrb	r1, [r4, #30]
   d5478:	7f60      	ldrb	r0, [r4, #29]
   d547a:	f002 fe85 	bl	d8188 <shiftOut>
   d547e:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5480:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5484:	d1ea      	bne.n	d545c <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d5486:	2001      	movs	r0, #1
   d5488:	f001 fa50 	bl	d692c <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d548c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5490:	2101      	movs	r1, #1
   d5492:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d5498:	f002 be33 	b.w	d8102 <digitalWrite>
   d549c:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d549e:	f002 feb1 	bl	d8204 <_Z19__fetch_global_Wirev>
   d54a2:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d54a6:	f002 f970 	bl	d778a <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d54aa:	f002 feab 	bl	d8204 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d54ae:	6803      	ldr	r3, [r0, #0]
   d54b0:	2140      	movs	r1, #64	; 0x40
   d54b2:	689b      	ldr	r3, [r3, #8]
   d54b4:	4798      	blx	r3
   d54b6:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d54b8:	f002 fea4 	bl	d8204 <_Z19__fetch_global_Wirev>
   d54bc:	19af      	adds	r7, r5, r6
   d54be:	6803      	ldr	r3, [r0, #0]
   d54c0:	b2bf      	uxth	r7, r7
   d54c2:	689b      	ldr	r3, [r3, #8]
   d54c4:	f818 1007 	ldrb.w	r1, [r8, r7]
   d54c8:	3601      	adds	r6, #1
   d54ca:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d54cc:	2e10      	cmp	r6, #16
   d54ce:	d1f3      	bne.n	d54b8 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d54d0:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d54d2:	f002 fe97 	bl	d8204 <_Z19__fetch_global_Wirev>
   d54d6:	b2ad      	uxth	r5, r5
   d54d8:	f002 f95e 	bl	d7798 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d54dc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d54e0:	d1dd      	bne.n	d549e <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d54e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d54e6:	bf00      	nop
   d54e8:	2003d890 	.word	0x2003d890

000d54ec <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d54ec:	f001 b96e 	b.w	d67cc <HAL_Pin_Map>

000d54f0 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d54f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54f4:	b085      	sub	sp, #20
   d54f6:	461e      	mov	r6, r3
   d54f8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d54fc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d5500:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5502:	1a9a      	subs	r2, r3, r2
   d5504:	2a00      	cmp	r2, #0
   d5506:	bfb8      	it	lt
   d5508:	4252      	neglt	r2, r2
   d550a:	9200      	str	r2, [sp, #0]
   d550c:	1a72      	subs	r2, r6, r1
   d550e:	2a00      	cmp	r2, #0
   d5510:	bfb8      	it	lt
   d5512:	4252      	neglt	r2, r2
   d5514:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5516:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5518:	9a00      	ldr	r2, [sp, #0]
   d551a:	9901      	ldr	r1, [sp, #4]
   d551c:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d551e:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5520:	dd05      	ble.n	d552e <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d5522:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d5524:	461e      	mov	r6, r3
   d5526:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5528:	4622      	mov	r2, r4
    swap(x0, y0);
   d552a:	462c      	mov	r4, r5
   d552c:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d552e:	42b4      	cmp	r4, r6
   d5530:	dd05      	ble.n	d553e <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d5532:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d5534:	461d      	mov	r5, r3
   d5536:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d5538:	4622      	mov	r2, r4
   d553a:	4634      	mov	r4, r6
   d553c:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d553e:	1b5a      	subs	r2, r3, r5
   d5540:	2a00      	cmp	r2, #0
   d5542:	bfb8      	it	lt
   d5544:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d5546:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d554a:	429d      	cmp	r5, r3
   d554c:	bfb4      	ite	lt
   d554e:	2301      	movlt	r3, #1
   d5550:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d5554:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d5558:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d555a:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d555c:	fa0f f788 	sxth.w	r7, r8
   d5560:	2202      	movs	r2, #2
   d5562:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d5566:	42b4      	cmp	r4, r6
   d5568:	dc1f      	bgt.n	d55aa <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d556a:	9a01      	ldr	r2, [sp, #4]
   d556c:	9b00      	ldr	r3, [sp, #0]
   d556e:	4293      	cmp	r3, r2
   d5570:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d5574:	bfc8      	it	gt
   d5576:	4622      	movgt	r2, r4
   d5578:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d557c:	bfc8      	it	gt
   d557e:	4629      	movgt	r1, r5
   d5580:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d5582:	bfdc      	itt	le
   d5584:	462a      	movle	r2, r5
   d5586:	4621      	movle	r1, r4
   d5588:	4648      	mov	r0, r9
   d558a:	47d8      	blx	fp
    }
    err -= dy;
   d558c:	9b03      	ldr	r3, [sp, #12]
   d558e:	1aff      	subs	r7, r7, r3
   d5590:	b2bb      	uxth	r3, r7
   d5592:	b21f      	sxth	r7, r3
    if (err < 0) {
   d5594:	2f00      	cmp	r7, #0
   d5596:	da05      	bge.n	d55a4 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d5598:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d559a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d559e:	4415      	add	r5, r2
   d55a0:	b22d      	sxth	r5, r5
      err += dx;
   d55a2:	b23f      	sxth	r7, r7
   d55a4:	3401      	adds	r4, #1
   d55a6:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d55a8:	e7dd      	b.n	d5566 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d55aa:	b005      	add	sp, #20
   d55ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d55b0 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d55b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d55b4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d55b8:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d55ba:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d55be:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d55c0:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d55c2:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d55c4:	4691      	mov	r9, r2
   d55c6:	460d      	mov	r5, r1
   d55c8:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d55ca:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d55cc:	6823      	ldr	r3, [r4, #0]
   d55ce:	9600      	str	r6, [sp, #0]
   d55d0:	f10a 32ff 	add.w	r2, sl, #4294967295
   d55d4:	444a      	add	r2, r9
   d55d6:	69df      	ldr	r7, [r3, #28]
   d55d8:	4629      	mov	r1, r5
   d55da:	4643      	mov	r3, r8
   d55dc:	4620      	mov	r0, r4
   d55de:	b212      	sxth	r2, r2
   d55e0:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d55e2:	6823      	ldr	r3, [r4, #0]
   d55e4:	9600      	str	r6, [sp, #0]
   d55e6:	699f      	ldr	r7, [r3, #24]
   d55e8:	464a      	mov	r2, r9
   d55ea:	4653      	mov	r3, sl
   d55ec:	4629      	mov	r1, r5
   d55ee:	4620      	mov	r0, r4
   d55f0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d55f2:	6823      	ldr	r3, [r4, #0]
   d55f4:	960a      	str	r6, [sp, #40]	; 0x28
   d55f6:	f108 31ff 	add.w	r1, r8, #4294967295
   d55fa:	4429      	add	r1, r5
   d55fc:	699d      	ldr	r5, [r3, #24]
   d55fe:	464a      	mov	r2, r9
   d5600:	4653      	mov	r3, sl
   d5602:	b209      	sxth	r1, r1
   d5604:	4620      	mov	r0, r4
   d5606:	46ac      	mov	ip, r5
}
   d5608:	b002      	add	sp, #8
   d560a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d560e:	4760      	bx	ip

000d5610 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d5610:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d5612:	3b01      	subs	r3, #1
   d5614:	4413      	add	r3, r2
   d5616:	6804      	ldr	r4, [r0, #0]
   d5618:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d561c:	9501      	str	r5, [sp, #4]
   d561e:	b21b      	sxth	r3, r3
   d5620:	9300      	str	r3, [sp, #0]
   d5622:	6964      	ldr	r4, [r4, #20]
   d5624:	460b      	mov	r3, r1
   d5626:	47a0      	blx	r4
}
   d5628:	b003      	add	sp, #12
   d562a:	bd30      	pop	{r4, r5, pc}

000d562c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d562c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d562e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d5632:	6804      	ldr	r4, [r0, #0]
   d5634:	e88d 0024 	stmia.w	sp, {r2, r5}
   d5638:	3b01      	subs	r3, #1
   d563a:	440b      	add	r3, r1
   d563c:	6964      	ldr	r4, [r4, #20]
   d563e:	b21b      	sxth	r3, r3
   d5640:	47a0      	blx	r4
}
   d5642:	b003      	add	sp, #12
   d5644:	bd30      	pop	{r4, r5, pc}

000d5646 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d5646:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d564a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d564e:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d5652:	4605      	mov	r5, r0
   d5654:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d5656:	460c      	mov	r4, r1
   d5658:	eb01 0a03 	add.w	sl, r1, r3
   d565c:	4554      	cmp	r4, sl
   d565e:	da0b      	bge.n	d5678 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d5660:	682b      	ldr	r3, [r5, #0]
   d5662:	f8cd 9000 	str.w	r9, [sp]
   d5666:	699e      	ldr	r6, [r3, #24]
   d5668:	4621      	mov	r1, r4
   d566a:	4643      	mov	r3, r8
   d566c:	463a      	mov	r2, r7
   d566e:	4628      	mov	r0, r5
   d5670:	3401      	adds	r4, #1
   d5672:	47b0      	blx	r6
   d5674:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d5676:	e7f1      	b.n	d565c <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d5678:	b002      	add	sp, #8
   d567a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d567e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d567e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d5680:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d5684:	6804      	ldr	r4, [r0, #0]
   d5686:	9101      	str	r1, [sp, #4]
   d5688:	9200      	str	r2, [sp, #0]
   d568a:	2200      	movs	r2, #0
   d568c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5690:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d5692:	4611      	mov	r1, r2
   d5694:	47a0      	blx	r4
}
   d5696:	b002      	add	sp, #8
   d5698:	bd10      	pop	{r4, pc}

000d569a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d569a:	4770      	bx	lr

000d569c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d569c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d569e:	8101      	strh	r1, [r0, #8]
   d56a0:	2400      	movs	r4, #0
   d56a2:	4d08      	ldr	r5, [pc, #32]	; (d56c4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d56a4:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d56a6:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d56a8:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d56aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d56ae:	2201      	movs	r2, #1
   d56b0:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d56b2:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d56b4:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d56b6:	8204      	strh	r4, [r0, #16]
   d56b8:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d56ba:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d56bc:	82c1      	strh	r1, [r0, #22]
   d56be:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d56c0:	7682      	strb	r2, [r0, #26]
}
   d56c2:	bd30      	pop	{r4, r5, pc}
   d56c4:	000d892c 	.word	0x000d892c

000d56c8 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d56c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56cc:	b08f      	sub	sp, #60	; 0x3c
   d56ce:	4605      	mov	r5, r0
   d56d0:	9106      	str	r1, [sp, #24]
   d56d2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d56d6:	9107      	str	r1, [sp, #28]
   d56d8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d56dc:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d56de:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d56e2:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d56e4:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d56e8:	4281      	cmp	r1, r0
   d56ea:	dd7c      	ble.n	d57e6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d56ec:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d56f0:	4291      	cmp	r1, r2
   d56f2:	dd78      	ble.n	d57e6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d56f4:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d56f6:	fb11 0008 	smlabb	r0, r1, r8, r0
   d56fa:	2800      	cmp	r0, #0
   d56fc:	dd73      	ble.n	d57e6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d56fe:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d5702:	2800      	cmp	r0, #0
   d5704:	dd6f      	ble.n	d57e6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5706:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d570a:	b296      	uxth	r6, r2
   d570c:	930c      	str	r3, [sp, #48]	; 0x30
   d570e:	f106 0308 	add.w	r3, r6, #8
   d5712:	b29b      	uxth	r3, r3
   d5714:	9109      	str	r1, [sp, #36]	; 0x24
   d5716:	2400      	movs	r4, #0
   d5718:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d571a:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d571c:	bf1c      	itt	ne
   d571e:	4b33      	ldrne	r3, [pc, #204]	; (d57ec <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d5720:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5722:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5724:	bf16      	itet	ne
   d5726:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d5728:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d572c:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5730:	9604      	str	r6, [sp, #16]
   d5732:	fa1f f388 	uxth.w	r3, r8
   d5736:	9303      	str	r3, [sp, #12]
   d5738:	9a03      	ldr	r2, [sp, #12]
   d573a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d573e:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d5742:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d5746:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d5748:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d574a:	920a      	str	r2, [sp, #40]	; 0x28
   d574c:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d574e:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d5752:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d5754:	f019 0f01 	tst.w	r9, #1
   d5758:	d011      	beq.n	d577e <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d575a:	f1b8 0f01 	cmp.w	r8, #1
   d575e:	682b      	ldr	r3, [r5, #0]
   d5760:	d103      	bne.n	d576a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d5762:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5766:	9b07      	ldr	r3, [sp, #28]
   d5768:	e014      	b.n	d5794 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d576a:	9a07      	ldr	r2, [sp, #28]
   d576c:	9201      	str	r2, [sp, #4]
   d576e:	f8cd a000 	str.w	sl, [sp]
   d5772:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d5776:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d577a:	4653      	mov	r3, sl
   d577c:	e018      	b.n	d57b0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d577e:	9b07      	ldr	r3, [sp, #28]
   d5780:	9a08      	ldr	r2, [sp, #32]
   d5782:	4293      	cmp	r3, r2
   d5784:	d017      	beq.n	d57b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d5786:	f1b8 0f01 	cmp.w	r8, #1
   d578a:	682b      	ldr	r3, [r5, #0]
   d578c:	d107      	bne.n	d579e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d578e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5792:	4613      	mov	r3, r2
   d5794:	b23a      	sxth	r2, r7
   d5796:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d5798:	4628      	mov	r0, r5
   d579a:	47d8      	blx	fp
   d579c:	e00b      	b.n	d57b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d579e:	9a08      	ldr	r2, [sp, #32]
   d57a0:	9201      	str	r2, [sp, #4]
   d57a2:	f8cd a000 	str.w	sl, [sp]
   d57a6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d57aa:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d57ae:	4653      	mov	r3, sl
   d57b0:	990a      	ldr	r1, [sp, #40]	; 0x28
   d57b2:	4628      	mov	r0, r5
   d57b4:	47d8      	blx	fp
   d57b6:	9b04      	ldr	r3, [sp, #16]
   d57b8:	9a03      	ldr	r2, [sp, #12]
   d57ba:	4413      	add	r3, r2
   d57bc:	b29b      	uxth	r3, r3
   d57be:	9304      	str	r3, [sp, #16]
   d57c0:	9b05      	ldr	r3, [sp, #20]
   d57c2:	4413      	add	r3, r2
   d57c4:	b29b      	uxth	r3, r3
   d57c6:	3701      	adds	r7, #1
   d57c8:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d57ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d57cc:	b2bf      	uxth	r7, r7
   d57ce:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d57d0:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d57d4:	d1be      	bne.n	d5754 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d57d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d57d8:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d57da:	3401      	adds	r4, #1
   d57dc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d57e0:	b264      	sxtb	r4, r4
   d57e2:	9309      	str	r3, [sp, #36]	; 0x24
   d57e4:	d199      	bne.n	d571a <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d57e6:	b00f      	add	sp, #60	; 0x3c
   d57e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57ec:	000d895c 	.word	0x000d895c

000d57f0 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d57f0:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d57f2:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d57f4:	b085      	sub	sp, #20
   d57f6:	4604      	mov	r4, r0
   d57f8:	460b      	mov	r3, r1

  if (c == '\n') {
   d57fa:	d104      	bne.n	d5806 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d57fc:	7e02      	ldrb	r2, [r0, #24]
   d57fe:	8a43      	ldrh	r3, [r0, #18]
   d5800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5804:	e023      	b.n	d584e <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d5806:	290d      	cmp	r1, #13
   d5808:	d024      	beq.n	d5854 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d580a:	7e05      	ldrb	r5, [r0, #24]
   d580c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d5810:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5814:	9502      	str	r5, [sp, #8]
   d5816:	8ac5      	ldrh	r5, [r0, #22]
   d5818:	9501      	str	r5, [sp, #4]
   d581a:	8a85      	ldrh	r5, [r0, #20]
   d581c:	9500      	str	r5, [sp, #0]
   d581e:	f7ff ff53 	bl	d56c8 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d5822:	7e22      	ldrb	r2, [r4, #24]
   d5824:	8a23      	ldrh	r3, [r4, #16]
   d5826:	b291      	uxth	r1, r2
   d5828:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d582c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5830:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d5832:	b21b      	sxth	r3, r3
   d5834:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5836:	b168      	cbz	r0, d5854 <_ZN12Adafruit_GFX5writeEh+0x64>
   d5838:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d583c:	f06f 0505 	mvn.w	r5, #5
   d5840:	fb05 0202 	mla	r2, r5, r2, r0
   d5844:	4293      	cmp	r3, r2
   d5846:	dd05      	ble.n	d5854 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d5848:	8a63      	ldrh	r3, [r4, #18]
   d584a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d584e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d5850:	2300      	movs	r3, #0
   d5852:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d5854:	2001      	movs	r0, #1
   d5856:	b005      	add	sp, #20
   d5858:	bd30      	pop	{r4, r5, pc}

000d585a <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d585a:	7e40      	ldrb	r0, [r0, #25]
   d585c:	4770      	bx	lr

000d585e <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d585e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d5862:	4770      	bx	lr

000d5864 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d5864:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d5868:	4770      	bx	lr

000d586a <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d586a:	f000 bfaf 	b.w	d67cc <HAL_Pin_Map>

000d586e <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d586e:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d5870:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5874:	6803      	ldr	r3, [r0, #0]
   d5876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5878:	4798      	blx	r3
}
   d587a:	3000      	adds	r0, #0
   d587c:	bf18      	it	ne
   d587e:	2001      	movne	r0, #1
   d5880:	bd08      	pop	{r3, pc}

000d5882 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d5882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5884:	4606      	mov	r6, r0
   d5886:	460f      	mov	r7, r1
   d5888:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d588a:	b1c4      	cbz	r4, d58be <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d588c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5890:	6803      	ldr	r3, [r0, #0]
   d5892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5894:	4798      	blx	r3
   d5896:	b908      	cbnz	r0, d589c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d5898:	2000      	movs	r0, #0
   d589a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d589c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d58a0:	2cfa      	cmp	r4, #250	; 0xfa
   d58a2:	6803      	ldr	r3, [r0, #0]
   d58a4:	4625      	mov	r5, r4
   d58a6:	bfa8      	it	ge
   d58a8:	25fa      	movge	r5, #250	; 0xfa
   d58aa:	68db      	ldr	r3, [r3, #12]
   d58ac:	462a      	mov	r2, r5
   d58ae:	4639      	mov	r1, r7
   d58b0:	4798      	blx	r3
   d58b2:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d58b4:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d58b6:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d58b8:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d58ba:	d0e6      	beq.n	d588a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d58bc:	e7ec      	b.n	d5898 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d58be:	2001      	movs	r0, #1
}
   d58c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58c2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d58c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d58c6:	4606      	mov	r6, r0
   d58c8:	4688      	mov	r8, r1
   d58ca:	4691      	mov	r9, r2
   d58cc:	461f      	mov	r7, r3
   d58ce:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d58d0:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d58d2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d58d6:	6803      	ldr	r3, [r0, #0]
   d58d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58da:	4798      	blx	r3
   d58dc:	b1d0      	cbz	r0, d5914 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d58de:	2d00      	cmp	r5, #0
   d58e0:	db18      	blt.n	d5914 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d58e2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d58e6:	6803      	ldr	r3, [r0, #0]
   d58e8:	691b      	ldr	r3, [r3, #16]
   d58ea:	4798      	blx	r3
   d58ec:	b160      	cbz	r0, d5908 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d58ee:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d58f2:	6803      	ldr	r3, [r0, #0]
   d58f4:	695b      	ldr	r3, [r3, #20]
   d58f6:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d58f8:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d58fc:	3401      	adds	r4, #1
   d58fe:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5900:	454c      	cmp	r4, r9
   d5902:	d007      	beq.n	d5914 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d5904:	463d      	mov	r5, r7
   d5906:	e7ec      	b.n	d58e2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5908:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d590a:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d590c:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d590e:	f001 fc83 	bl	d7218 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5912:	e7de      	b.n	d58d2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d5914:	4620      	mov	r0, r4
   d5916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d591a <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d591a:	b570      	push	{r4, r5, r6, lr}
   d591c:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d591e:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d5922:	2296      	movs	r2, #150	; 0x96
   d5924:	2100      	movs	r1, #0
   d5926:	4628      	mov	r0, r5
   d5928:	f002 fe15 	bl	d8556 <memset>
  strcpy((char *)buffer, servername);
   d592c:	6861      	ldr	r1, [r4, #4]
   d592e:	4628      	mov	r0, r5
   d5930:	f002 fe42 	bl	d85b8 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d5934:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5938:	8922      	ldrh	r2, [r4, #8]
   d593a:	6803      	ldr	r3, [r0, #0]
   d593c:	4629      	mov	r1, r5
   d593e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d5940:	2300      	movs	r3, #0
   d5942:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d5944:	3000      	adds	r0, #0
   d5946:	bf18      	it	ne
   d5948:	2001      	movne	r0, #1
   d594a:	bd70      	pop	{r4, r5, r6, pc}

000d594c <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d594c:	b510      	push	{r4, lr}
   d594e:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d5950:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d5954:	6803      	ldr	r3, [r0, #0]
   d5956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5958:	4798      	blx	r3
   d595a:	b120      	cbz	r0, d5966 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d595c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5960:	6803      	ldr	r3, [r0, #0]
   d5962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5964:	4798      	blx	r3
  }
  return true;
}
   d5966:	2001      	movs	r0, #1
   d5968:	bd10      	pop	{r4, pc}

000d596a <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d596a:	f000 bf2f 	b.w	d67cc <HAL_Pin_Map>
	...

000d5970 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5970:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d5972:	6103      	str	r3, [r0, #16]
  password = pass;
   d5974:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5976:	4d0d      	ldr	r5, [pc, #52]	; (d59ac <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5978:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d597a:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d597c:	4a0c      	ldr	r2, [pc, #48]	; (d59b0 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d597e:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5980:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d5982:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5984:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5986:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d598a:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d598e:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d5992:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d5996:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d599a:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d599c:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d599e:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d59a2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d59a6:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d59aa:	bd30      	pop	{r4, r5, pc}
   d59ac:	000d8e84 	.word	0x000d8e84
   d59b0:	000d8ead 	.word	0x000d8ead

000d59b4 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d59b4:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d59b6:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d59ba:	7203      	strb	r3, [r0, #8]
}
   d59bc:	bd10      	pop	{r4, pc}

000d59be <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d59be:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d59c0:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d59c2:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d59c4:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d59c6:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d59c8:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d59ca:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d59cc:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d59ce:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d59d0:	6283      	str	r3, [r0, #40]	; 0x28
   d59d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d59d4:	6303      	str	r3, [r0, #48]	; 0x30
}
   d59d6:	bd10      	pop	{r4, pc}

000d59d8 <_GLOBAL__sub_I__Z11printBufferPht>:
   d59d8:	f000 bef8 	b.w	d67cc <HAL_Pin_Map>

000d59dc <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d59dc:	f000 bef6 	b.w	d67cc <HAL_Pin_Map>

000d59e0 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d59e0:	f000 bef4 	b.w	d67cc <HAL_Pin_Map>

000d59e4 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d59e4:	b510      	push	{r4, lr}
   d59e6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d59e8:	3024      	adds	r0, #36	; 0x24
   d59ea:	f000 fa51 	bl	d5e90 <_ZN8FatCache4syncEv>
   d59ee:	b128      	cbz	r0, d59fc <_ZN9FatVolume9cacheSyncEv+0x18>
   d59f0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d59f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d59f8:	f000 ba4a 	b.w	d5e90 <_ZN8FatCache4syncEv>
  }
   d59fc:	bd10      	pop	{r4, pc}

000d59fe <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d59fe:	f000 bee5 	b.w	d67cc <HAL_Pin_Map>

000d5a02 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5a02:	f000 bee3 	b.w	d67cc <HAL_Pin_Map>

000d5a06 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5a06:	f000 bee1 	b.w	d67cc <HAL_Pin_Map>

000d5a0a <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5a0a:	f000 bedf 	b.w	d67cc <HAL_Pin_Map>

000d5a0e <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5a0e:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5a10:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5a12:	f043 0304 	orr.w	r3, r3, #4
   d5a16:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5a18:	f100 0210 	add.w	r2, r0, #16
   d5a1c:	6880      	ldr	r0, [r0, #8]
   d5a1e:	f000 baed 	b.w	d5ffc <_ZN9FatVolume15allocateClusterEmPm>

000d5a22 <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5a22:	b510      	push	{r4, lr}
   d5a24:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5a26:	6880      	ldr	r0, [r0, #8]
   d5a28:	460a      	mov	r2, r1
   d5a2a:	3024      	adds	r0, #36	; 0x24
   d5a2c:	69a1      	ldr	r1, [r4, #24]
   d5a2e:	f000 fa56 	bl	d5ede <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5a32:	b120      	cbz	r0, d5a3e <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5a34:	88a3      	ldrh	r3, [r4, #4]
   d5a36:	f003 030f 	and.w	r3, r3, #15
   d5a3a:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5a3e:	bd10      	pop	{r4, pc}

000d5a40 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a44:	7803      	ldrb	r3, [r0, #0]
   d5a46:	4604      	mov	r4, r0
   d5a48:	4689      	mov	r9, r1
   d5a4a:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5a4c:	b14b      	cbz	r3, d5a62 <_ZN7FatFile4readEPvj+0x22>
   d5a4e:	7882      	ldrb	r2, [r0, #2]
   d5a50:	07d1      	lsls	r1, r2, #31
   d5a52:	d506      	bpl.n	d5a62 <_ZN7FatFile4readEPvj+0x22>
   d5a54:	e00c      	b.n	d5a70 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5a56:	465a      	mov	r2, fp
   d5a58:	6921      	ldr	r1, [r4, #16]
   d5a5a:	f000 fa6a 	bl	d5f32 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5a5e:	2800      	cmp	r0, #0
   d5a60:	da3d      	bge.n	d5ade <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5a62:	7863      	ldrb	r3, [r4, #1]
   d5a64:	f043 0302 	orr.w	r3, r3, #2
   d5a68:	7063      	strb	r3, [r4, #1]
  return -1;
   d5a6a:	f04f 30ff 	mov.w	r0, #4294967295
   d5a6e:	e097      	b.n	d5ba0 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5a70:	071a      	lsls	r2, r3, #28
   d5a72:	d503      	bpl.n	d5a7c <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5a74:	69e3      	ldr	r3, [r4, #28]
   d5a76:	6962      	ldr	r2, [r4, #20]
   d5a78:	1a9b      	subs	r3, r3, r2
   d5a7a:	e007      	b.n	d5a8c <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5a7c:	069a      	lsls	r2, r3, #26
   d5a7e:	d508      	bpl.n	d5a92 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5a80:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5a82:	891a      	ldrh	r2, [r3, #8]
   d5a84:	6963      	ldr	r3, [r4, #20]
   d5a86:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5a8a:	b29b      	uxth	r3, r3
   d5a8c:	429d      	cmp	r5, r3
   d5a8e:	bf28      	it	cs
   d5a90:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5a92:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5a94:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5a98:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5a9c:	2e00      	cmp	r6, #0
   d5a9e:	d035      	beq.n	d5b0c <_ZN7FatFile4readEPvj+0xcc>
   d5aa0:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5aa2:	6963      	ldr	r3, [r4, #20]
   d5aa4:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5aa6:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5aaa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5aae:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5ab2:	d002      	beq.n	d5aba <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5ab4:	6a03      	ldr	r3, [r0, #32]
   d5ab6:	4419      	add	r1, r3
   d5ab8:	e01d      	b.n	d5af6 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5aba:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5abe:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5ac2:	f1ba 0f00 	cmp.w	sl, #0
   d5ac6:	d110      	bne.n	d5aea <_ZN7FatFile4readEPvj+0xaa>
   d5ac8:	f1b8 0f00 	cmp.w	r8, #0
   d5acc:	d10d      	bne.n	d5aea <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5ace:	2b00      	cmp	r3, #0
   d5ad0:	d1c1      	bne.n	d5a56 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5ad2:	0653      	lsls	r3, r2, #25
   d5ad4:	bf4c      	ite	mi
   d5ad6:	6a03      	ldrmi	r3, [r0, #32]
   d5ad8:	6a23      	ldrpl	r3, [r4, #32]
   d5ada:	6123      	str	r3, [r4, #16]
   d5adc:	e005      	b.n	d5aea <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5ade:	d104      	bne.n	d5aea <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5ae0:	7823      	ldrb	r3, [r4, #0]
   d5ae2:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5ae6:	d111      	bne.n	d5b0c <_ZN7FatFile4readEPvj+0xcc>
   d5ae8:	e7bb      	b.n	d5a62 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5aea:	6921      	ldr	r1, [r4, #16]
   d5aec:	68a0      	ldr	r0, [r4, #8]
   d5aee:	f000 fa1a 	bl	d5f26 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5af2:	eb08 0100 	add.w	r1, r8, r0
   d5af6:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5af8:	f1ba 0f00 	cmp.w	sl, #0
   d5afc:	d135      	bne.n	d5b6a <_ZN7FatFile4readEPvj+0x12a>
   d5afe:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5b02:	d332      	bcc.n	d5b6a <_ZN7FatFile4readEPvj+0x12a>
   d5b04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5b06:	4299      	cmp	r1, r3
   d5b08:	d102      	bne.n	d5b10 <_ZN7FatFile4readEPvj+0xd0>
   d5b0a:	e02e      	b.n	d5b6a <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5b0c:	1ba8      	subs	r0, r5, r6
   d5b0e:	e047      	b.n	d5ba0 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5b10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5b14:	d31b      	bcc.n	d5b4e <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5b16:	7822      	ldrb	r2, [r4, #0]
   d5b18:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5b1a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5b1e:	d406      	bmi.n	d5b2e <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5b20:	7902      	ldrb	r2, [r0, #4]
   d5b22:	ebc8 0202 	rsb	r2, r8, r2
   d5b26:	b2d2      	uxtb	r2, r2
   d5b28:	4592      	cmp	sl, r2
   d5b2a:	bf28      	it	cs
   d5b2c:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5b2e:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5b30:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5b34:	d207      	bcs.n	d5b46 <_ZN7FatFile4readEPvj+0x106>
   d5b36:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5b38:	4653      	mov	r3, sl
   d5b3a:	464a      	mov	r2, r9
   d5b3c:	6800      	ldr	r0, [r0, #0]
   d5b3e:	f000 fba8 	bl	d6292 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5b42:	b960      	cbnz	r0, d5b5e <_ZN7FatFile4readEPvj+0x11e>
   d5b44:	e78d      	b.n	d5a62 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5b46:	4453      	add	r3, sl
   d5b48:	4299      	cmp	r1, r3
   d5b4a:	d321      	bcc.n	d5b90 <_ZN7FatFile4readEPvj+0x150>
   d5b4c:	e7f3      	b.n	d5b36 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5b4e:	464a      	mov	r2, r9
   d5b50:	6800      	ldr	r0, [r0, #0]
   d5b52:	f000 fb56 	bl	d6202 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5b56:	2800      	cmp	r0, #0
   d5b58:	d083      	beq.n	d5a62 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5b5a:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5b5e:	6963      	ldr	r3, [r4, #20]
   d5b60:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5b62:	44b9      	add	r9, r7
    m_curPosition += n;
   d5b64:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5b66:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5b68:	e798      	b.n	d5a9c <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5b6a:	2200      	movs	r2, #0
   d5b6c:	3024      	adds	r0, #36	; 0x24
   d5b6e:	f000 f9b6 	bl	d5ede <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5b72:	2800      	cmp	r0, #0
   d5b74:	f43f af75 	beq.w	d5a62 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5b78:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5b7c:	42b7      	cmp	r7, r6
   d5b7e:	bf28      	it	cs
   d5b80:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5b82:	eb00 010a 	add.w	r1, r0, sl
   d5b86:	463a      	mov	r2, r7
   d5b88:	4648      	mov	r0, r9
   d5b8a:	f002 fcd9 	bl	d8540 <memcpy>
   d5b8e:	e7e6      	b.n	d5b5e <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5b90:	3024      	adds	r0, #36	; 0x24
   d5b92:	9101      	str	r1, [sp, #4]
   d5b94:	f000 f97c 	bl	d5e90 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5b98:	9901      	ldr	r1, [sp, #4]
   d5b9a:	2800      	cmp	r0, #0
   d5b9c:	d1cb      	bne.n	d5b36 <_ZN7FatFile4readEPvj+0xf6>
   d5b9e:	e760      	b.n	d5a62 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5ba0:	b003      	add	sp, #12
   d5ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5ba6 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5ba8:	2201      	movs	r2, #1
   d5baa:	f10d 0107 	add.w	r1, sp, #7
   d5bae:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5bb0:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d5bb2:	6905      	ldr	r5, [r0, #16]
   d5bb4:	f7ff ff44 	bl	d5a40 <_ZN7FatFile4readEPvj>
   d5bb8:	2801      	cmp	r0, #1
   d5bba:	bf05      	ittet	eq
   d5bbc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5bc0:	6166      	streq	r6, [r4, #20]
   d5bc2:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d5bc6:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5bc8:	b002      	add	sp, #8
   d5bca:	bd70      	pop	{r4, r5, r6, pc}

000d5bcc <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5bd0:	460e      	mov	r6, r1
   d5bd2:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5bd4:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5bd6:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5bd8:	2900      	cmp	r1, #0
   d5bda:	d039      	beq.n	d5c50 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5bdc:	6945      	ldr	r5, [r0, #20]
   d5bde:	42b5      	cmp	r5, r6
   d5be0:	d03a      	beq.n	d5c58 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5be2:	b90e      	cbnz	r6, d5be8 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5be4:	6106      	str	r6, [r0, #16]
    goto done;
   d5be6:	e031      	b.n	d5c4c <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5be8:	070b      	lsls	r3, r1, #28
   d5bea:	d503      	bpl.n	d5bf4 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5bec:	69c3      	ldr	r3, [r0, #28]
   d5bee:	429e      	cmp	r6, r3
   d5bf0:	d82e      	bhi.n	d5c50 <_ZN7FatFile7seekSetEm+0x84>
   d5bf2:	e007      	b.n	d5c04 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5bf4:	0688      	lsls	r0, r1, #26
   d5bf6:	d505      	bpl.n	d5c04 <_ZN7FatFile7seekSetEm+0x38>
   d5bf8:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5bfa:	891b      	ldrh	r3, [r3, #8]
   d5bfc:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5c00:	d826      	bhi.n	d5c50 <_ZN7FatFile7seekSetEm+0x84>
   d5c02:	e023      	b.n	d5c4c <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5c04:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5c08:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5c0c:	1e6a      	subs	r2, r5, #1
   d5c0e:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5c12:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5c14:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5c16:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5c18:	429a      	cmp	r2, r3
   d5c1a:	d800      	bhi.n	d5c1e <_ZN7FatFile7seekSetEm+0x52>
   d5c1c:	b94d      	cbnz	r5, d5c32 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5c1e:	064a      	lsls	r2, r1, #25
   d5c20:	bf4c      	ite	mi
   d5c22:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5c26:	6a22      	ldrpl	r2, [r4, #32]
   d5c28:	6122      	str	r2, [r4, #16]
   d5c2a:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5c2c:	f104 0810 	add.w	r8, r4, #16
   d5c30:	e00a      	b.n	d5c48 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5c32:	1a9b      	subs	r3, r3, r2
   d5c34:	e7f9      	b.n	d5c2a <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5c36:	4642      	mov	r2, r8
   d5c38:	6921      	ldr	r1, [r4, #16]
   d5c3a:	68a0      	ldr	r0, [r4, #8]
   d5c3c:	f000 f979 	bl	d5f32 <_ZN9FatVolume6fatGetEmPm>
   d5c40:	2800      	cmp	r0, #0
   d5c42:	f105 35ff 	add.w	r5, r5, #4294967295
   d5c46:	dd03      	ble.n	d5c50 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5c48:	2d00      	cmp	r5, #0
   d5c4a:	d1f4      	bne.n	d5c36 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5c4c:	6166      	str	r6, [r4, #20]
   d5c4e:	e003      	b.n	d5c58 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5c50:	6127      	str	r7, [r4, #16]
  return false;
   d5c52:	2000      	movs	r0, #0
   d5c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5c58:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5c60 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5c60:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5c62:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5c64:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5c66:	b90b      	cbnz	r3, d5c6c <_ZN7FatFile4syncEv+0xc>
    return true;
   d5c68:	2001      	movs	r0, #1
   d5c6a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5c6c:	7883      	ldrb	r3, [r0, #2]
   d5c6e:	075a      	lsls	r2, r3, #29
   d5c70:	d523      	bpl.n	d5cba <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5c72:	2101      	movs	r1, #1
   d5c74:	f7ff fed5 	bl	d5a22 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5c78:	4605      	mov	r5, r0
   d5c7a:	b928      	cbnz	r0, d5c88 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5c7c:	7863      	ldrb	r3, [r4, #1]
   d5c7e:	f043 0301 	orr.w	r3, r3, #1
   d5c82:	7063      	strb	r3, [r4, #1]
  return false;
   d5c84:	2000      	movs	r0, #0
   d5c86:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5c88:	7803      	ldrb	r3, [r0, #0]
   d5c8a:	2be5      	cmp	r3, #229	; 0xe5
   d5c8c:	d0f6      	beq.n	d5c7c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5c8e:	7823      	ldrb	r3, [r4, #0]
   d5c90:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5c92:	bf44      	itt	mi
   d5c94:	69e3      	ldrmi	r3, [r4, #28]
   d5c96:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5c98:	8c23      	ldrh	r3, [r4, #32]
   d5c9a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5c9c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5c9e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5ca0:	4b09      	ldr	r3, [pc, #36]	; (d5cc8 <_ZN7FatFile4syncEv+0x68>)
   d5ca2:	681b      	ldr	r3, [r3, #0]
   d5ca4:	b12b      	cbz	r3, d5cb2 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5ca6:	f100 0116 	add.w	r1, r0, #22
   d5caa:	3018      	adds	r0, #24
   d5cac:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5cae:	8b2b      	ldrh	r3, [r5, #24]
   d5cb0:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5cb2:	78a3      	ldrb	r3, [r4, #2]
   d5cb4:	f023 0304 	bic.w	r3, r3, #4
   d5cb8:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5cba:	68a0      	ldr	r0, [r4, #8]
   d5cbc:	f7ff fe92 	bl	d59e4 <_ZN9FatVolume9cacheSyncEv>
   d5cc0:	2800      	cmp	r0, #0
   d5cc2:	d0db      	beq.n	d5c7c <_ZN7FatFile4syncEv+0x1c>
   d5cc4:	e7d0      	b.n	d5c68 <_ZN7FatFile4syncEv+0x8>
   d5cc6:	bf00      	nop
   d5cc8:	2003e3d0 	.word	0x2003e3d0

000d5ccc <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5cd0:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5cd2:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5cd4:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5cd6:	4604      	mov	r4, r0
   d5cd8:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5cda:	d508      	bpl.n	d5cee <_ZN7FatFile5writeEPKvj+0x22>
   d5cdc:	7883      	ldrb	r3, [r0, #2]
   d5cde:	079a      	lsls	r2, r3, #30
   d5ce0:	d505      	bpl.n	d5cee <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5ce2:	071b      	lsls	r3, r3, #28
   d5ce4:	d50b      	bpl.n	d5cfe <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5ce6:	69e1      	ldr	r1, [r4, #28]
   d5ce8:	f7ff ff70 	bl	d5bcc <_ZN7FatFile7seekSetEm>
   d5cec:	b938      	cbnz	r0, d5cfe <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5cee:	7863      	ldrb	r3, [r4, #1]
   d5cf0:	f043 0301 	orr.w	r3, r3, #1
   d5cf4:	7063      	strb	r3, [r4, #1]
  return -1;
   d5cf6:	f04f 30ff 	mov.w	r0, #4294967295
   d5cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5cfe:	6963      	ldr	r3, [r4, #20]
   d5d00:	43db      	mvns	r3, r3
   d5d02:	4598      	cmp	r8, r3
   d5d04:	d8f3      	bhi.n	d5cee <_ZN7FatFile5writeEPKvj+0x22>
   d5d06:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5d08:	f04f 0a00 	mov.w	sl, #0
   d5d0c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5d0e:	2e00      	cmp	r6, #0
   d5d10:	f000 8081 	beq.w	d5e16 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5d14:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5d16:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5d18:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5d1c:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5d20:	d11c      	bne.n	d5d5c <_ZN7FatFile5writeEPKvj+0x90>
   d5d22:	b9df      	cbnz	r7, d5d5c <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5d24:	6921      	ldr	r1, [r4, #16]
   d5d26:	b171      	cbz	r1, d5d46 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5d28:	f104 0210 	add.w	r2, r4, #16
   d5d2c:	f000 f901 	bl	d5f32 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5d30:	2800      	cmp	r0, #0
   d5d32:	dbdc      	blt.n	d5cee <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5d34:	f040 808e 	bne.w	d5e54 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5d38:	4620      	mov	r0, r4
   d5d3a:	f7ff fe68 	bl	d5a0e <_ZN7FatFile10addClusterEv>
   d5d3e:	2800      	cmp	r0, #0
   d5d40:	f040 8088 	bne.w	d5e54 <_ZN7FatFile5writeEPKvj+0x188>
   d5d44:	e7d3      	b.n	d5cee <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5d46:	6a23      	ldr	r3, [r4, #32]
   d5d48:	b93b      	cbnz	r3, d5d5a <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	f7ff fe5f 	bl	d5a0e <_ZN7FatFile10addClusterEv>
   d5d50:	2800      	cmp	r0, #0
   d5d52:	d0cc      	beq.n	d5cee <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5d54:	6923      	ldr	r3, [r4, #16]
   d5d56:	6223      	str	r3, [r4, #32]
   d5d58:	e000      	b.n	d5d5c <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5d5a:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5d5c:	6921      	ldr	r1, [r4, #16]
   d5d5e:	68a0      	ldr	r0, [r4, #8]
   d5d60:	f000 f8e1 	bl	d5f26 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5d64:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5d66:	b917      	cbnz	r7, d5d6e <_ZN7FatFile5writeEPKvj+0xa2>
   d5d68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5d6c:	d221      	bcs.n	d5db2 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5d6e:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5d72:	42b5      	cmp	r5, r6
   d5d74:	bf28      	it	cs
   d5d76:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5d78:	b937      	cbnz	r7, d5d88 <_ZN7FatFile5writeEPKvj+0xbc>
   d5d7a:	6963      	ldr	r3, [r4, #20]
   d5d7c:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5d7e:	4293      	cmp	r3, r2
   d5d80:	bf34      	ite	cc
   d5d82:	2201      	movcc	r2, #1
   d5d84:	2205      	movcs	r2, #5
   d5d86:	e000      	b.n	d5d8a <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5d88:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5d8a:	68a0      	ldr	r0, [r4, #8]
   d5d8c:	3024      	adds	r0, #36	; 0x24
   d5d8e:	f000 f8a6 	bl	d5ede <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5d92:	2800      	cmp	r0, #0
   d5d94:	d0ab      	beq.n	d5cee <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5d96:	4438      	add	r0, r7
   d5d98:	462a      	mov	r2, r5
   d5d9a:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5d9c:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5d9e:	f002 fbcf 	bl	d8540 <memcpy>
      if (512 == (n + blockOffset)) {
   d5da2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5da6:	d130      	bne.n	d5e0a <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5da8:	68a0      	ldr	r0, [r4, #8]
   d5daa:	3024      	adds	r0, #36	; 0x24
   d5dac:	f000 f870 	bl	d5e90 <_ZN8FatCache4syncEv>
   d5db0:	e017      	b.n	d5de2 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5db2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5db6:	68a0      	ldr	r0, [r4, #8]
   d5db8:	d315      	bcc.n	d5de6 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5dba:	7902      	ldrb	r2, [r0, #4]
   d5dbc:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5dbe:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5dc0:	b2d2      	uxtb	r2, r2
   d5dc2:	4293      	cmp	r3, r2
   d5dc4:	bf28      	it	cs
   d5dc6:	4613      	movcs	r3, r2
   d5dc8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5dca:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5dcc:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5dd0:	d302      	bcc.n	d5dd8 <_ZN7FatFile5writeEPKvj+0x10c>
   d5dd2:	441a      	add	r2, r3
   d5dd4:	4291      	cmp	r1, r2
   d5dd6:	d337      	bcc.n	d5e48 <_ZN7FatFile5writeEPKvj+0x17c>
   d5dd8:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5dda:	464a      	mov	r2, r9
   d5ddc:	6838      	ldr	r0, [r7, #0]
   d5dde:	f000 fb0c 	bl	d63fa <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5de2:	b990      	cbnz	r0, d5e0a <_ZN7FatFile5writeEPKvj+0x13e>
   d5de4:	e783      	b.n	d5cee <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5de6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5de8:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5dea:	bf02      	ittt	eq
   d5dec:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5df0:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5df4:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5df6:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5df8:	464a      	mov	r2, r9
   d5dfa:	6818      	ldr	r0, [r3, #0]
   d5dfc:	f000 fa8b 	bl	d6316 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5e00:	2800      	cmp	r0, #0
   d5e02:	f43f af74 	beq.w	d5cee <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5e06:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5e0a:	6963      	ldr	r3, [r4, #20]
   d5e0c:	442b      	add	r3, r5
   d5e0e:	6163      	str	r3, [r4, #20]
    src += n;
   d5e10:	44a9      	add	r9, r5
    nToWrite -= n;
   d5e12:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5e14:	e77a      	b.n	d5d0c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5e16:	69e2      	ldr	r2, [r4, #28]
   d5e18:	4293      	cmp	r3, r2
   d5e1a:	d901      	bls.n	d5e20 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5e1c:	61e3      	str	r3, [r4, #28]
   d5e1e:	e002      	b.n	d5e26 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5e20:	4b0f      	ldr	r3, [pc, #60]	; (d5e60 <_ZN7FatFile5writeEPKvj+0x194>)
   d5e22:	681b      	ldr	r3, [r3, #0]
   d5e24:	b11b      	cbz	r3, d5e2e <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5e26:	78a3      	ldrb	r3, [r4, #2]
   d5e28:	f043 0304 	orr.w	r3, r3, #4
   d5e2c:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5e2e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5e32:	2b00      	cmp	r3, #0
   d5e34:	db02      	blt.n	d5e3c <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5e36:	4640      	mov	r0, r8
   d5e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	f7ff ff0f 	bl	d5c60 <_ZN7FatFile4syncEv>
   d5e42:	2800      	cmp	r0, #0
   d5e44:	d1f7      	bne.n	d5e36 <_ZN7FatFile5writeEPKvj+0x16a>
   d5e46:	e752      	b.n	d5cee <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5e48:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5e4c:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5e50:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5e52:	e7c1      	b.n	d5dd8 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5e54:	6921      	ldr	r1, [r4, #16]
   d5e56:	68a0      	ldr	r0, [r4, #8]
   d5e58:	f000 f865 	bl	d5f26 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5e5c:	4601      	mov	r1, r0
   d5e5e:	e783      	b.n	d5d68 <_ZN7FatFile5writeEPKvj+0x9c>
   d5e60:	2003e3d0 	.word	0x2003e3d0

000d5e64 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5e64:	f000 bcb2 	b.w	d67cc <HAL_Pin_Map>

000d5e68 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5e68:	b570      	push	{r4, r5, r6, lr}
   d5e6a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5e6c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5e6e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5e70:	b149      	cbz	r1, d5e86 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5e72:	f002 fba9 	bl	d85c8 <strlen>
   d5e76:	682b      	ldr	r3, [r5, #0]
   d5e78:	4602      	mov	r2, r0
   d5e7a:	4621      	mov	r1, r4
   d5e7c:	4628      	mov	r0, r5
   d5e7e:	68db      	ldr	r3, [r3, #12]
    }
   d5e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5e84:	4718      	bx	r3
    }
   d5e86:	bd70      	pop	{r4, r5, r6, pc}

000d5e88 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5e88:	f000 bca0 	b.w	d67cc <HAL_Pin_Map>

000d5e8c <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5e8c:	f000 bc9e 	b.w	d67cc <HAL_Pin_Map>

000d5e90 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5e90:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5e92:	7803      	ldrb	r3, [r0, #0]
   d5e94:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5e96:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5e98:	d51e      	bpl.n	d5ed8 <_ZN8FatCache4syncEv+0x48>
   d5e9a:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5e9c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5e9e:	f100 060c 	add.w	r6, r0, #12
   d5ea2:	4632      	mov	r2, r6
   d5ea4:	6818      	ldr	r0, [r3, #0]
   d5ea6:	f000 fa36 	bl	d6316 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5eaa:	4605      	mov	r5, r0
   d5eac:	b908      	cbnz	r0, d5eb2 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5eae:	2500      	movs	r5, #0
   d5eb0:	e013      	b.n	d5eda <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5eb2:	7823      	ldrb	r3, [r4, #0]
   d5eb4:	079b      	lsls	r3, r3, #30
   d5eb6:	d404      	bmi.n	d5ec2 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5eb8:	7823      	ldrb	r3, [r4, #0]
   d5eba:	f023 0301 	bic.w	r3, r3, #1
   d5ebe:	7023      	strb	r3, [r4, #0]
   d5ec0:	e00b      	b.n	d5eda <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5ec2:	6863      	ldr	r3, [r4, #4]
   d5ec4:	68a0      	ldr	r0, [r4, #8]
   d5ec6:	6919      	ldr	r1, [r3, #16]
   d5ec8:	4632      	mov	r2, r6
   d5eca:	4401      	add	r1, r0
   d5ecc:	6818      	ldr	r0, [r3, #0]
   d5ece:	f000 fa22 	bl	d6316 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5ed2:	2800      	cmp	r0, #0
   d5ed4:	d1f0      	bne.n	d5eb8 <_ZN8FatCache4syncEv+0x28>
   d5ed6:	e7ea      	b.n	d5eae <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5ed8:	2501      	movs	r5, #1

fail:
  return false;
}
   d5eda:	4628      	mov	r0, r5
   d5edc:	bd70      	pop	{r4, r5, r6, pc}

000d5ede <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5ede:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5ee0:	6883      	ldr	r3, [r0, #8]
   d5ee2:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5ee4:	4604      	mov	r4, r0
   d5ee6:	460e      	mov	r6, r1
   d5ee8:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5eea:	d014      	beq.n	d5f16 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5eec:	f7ff ffd0 	bl	d5e90 <_ZN8FatCache4syncEv>
   d5ef0:	b908      	cbnz	r0, d5ef6 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5ef2:	2000      	movs	r0, #0
   d5ef4:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5ef6:	076b      	lsls	r3, r5, #29
   d5ef8:	d503      	bpl.n	d5f02 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5efa:	2300      	movs	r3, #0
   d5efc:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5efe:	60a6      	str	r6, [r4, #8]
   d5f00:	e009      	b.n	d5f16 <_ZN8FatCache4readEmh+0x38>
   d5f02:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5f04:	f104 020c 	add.w	r2, r4, #12
   d5f08:	4631      	mov	r1, r6
   d5f0a:	6818      	ldr	r0, [r3, #0]
   d5f0c:	f000 f979 	bl	d6202 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5f10:	2800      	cmp	r0, #0
   d5f12:	d1f2      	bne.n	d5efa <_ZN8FatCache4readEmh+0x1c>
   d5f14:	e7ed      	b.n	d5ef2 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5f16:	7823      	ldrb	r3, [r4, #0]
   d5f18:	4620      	mov	r0, r4
   d5f1a:	f005 0503 	and.w	r5, r5, #3
   d5f1e:	431d      	orrs	r5, r3
   d5f20:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5f24:	bd70      	pop	{r4, r5, r6, pc}

000d5f26 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5f26:	7983      	ldrb	r3, [r0, #6]
   d5f28:	6940      	ldr	r0, [r0, #20]
   d5f2a:	3902      	subs	r1, #2
   d5f2c:	4099      	lsls	r1, r3
}
   d5f2e:	4408      	add	r0, r1
   d5f30:	4770      	bx	lr

000d5f32 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5f32:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5f34:	b570      	push	{r4, r5, r6, lr}
   d5f36:	4605      	mov	r5, r0
   d5f38:	460c      	mov	r4, r1
   d5f3a:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5f3c:	d802      	bhi.n	d5f44 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5f3e:	f04f 30ff 	mov.w	r0, #4294967295
   d5f42:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5f44:	69c3      	ldr	r3, [r0, #28]
   d5f46:	4299      	cmp	r1, r3
   d5f48:	d8f9      	bhi.n	d5f3e <_ZN9FatVolume6fatGetEmPm+0xc>
   d5f4a:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5f4c:	2b20      	cmp	r3, #32
   d5f4e:	d110      	bne.n	d5f72 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5f50:	6981      	ldr	r1, [r0, #24]
   d5f52:	2202      	movs	r2, #2
   d5f54:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5f58:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5f5c:	f7ff ffbf 	bl	d5ede <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5f60:	2800      	cmp	r0, #0
   d5f62:	d0ec      	beq.n	d5f3e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5f64:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5f68:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5f6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5f70:	e00f      	b.n	d5f92 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5f72:	2b10      	cmp	r3, #16
   d5f74:	d1e3      	bne.n	d5f3e <_ZN9FatVolume6fatGetEmPm+0xc>
   d5f76:	6983      	ldr	r3, [r0, #24]
   d5f78:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5f7c:	2202      	movs	r2, #2
   d5f7e:	4419      	add	r1, r3
   d5f80:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5f84:	f7ff ffab 	bl	d5ede <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5f88:	2800      	cmp	r0, #0
   d5f8a:	d0d8      	beq.n	d5f3e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5f8c:	b2e4      	uxtb	r4, r4
   d5f8e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d5f92:	69ea      	ldr	r2, [r5, #28]
   d5f94:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5f96:	bf9a      	itte	ls
   d5f98:	6033      	strls	r3, [r6, #0]
  return 1;
   d5f9a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5f9c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d5f9e:	bd70      	pop	{r4, r5, r6, pc}

000d5fa0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5fa0:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d5fa2:	b538      	push	{r3, r4, r5, lr}
   d5fa4:	460c      	mov	r4, r1
   d5fa6:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5fa8:	d801      	bhi.n	d5fae <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5faa:	2000      	movs	r0, #0
   d5fac:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5fae:	69c3      	ldr	r3, [r0, #28]
   d5fb0:	4299      	cmp	r1, r3
   d5fb2:	d8fa      	bhi.n	d5faa <_ZN9FatVolume6fatPutEmm+0xa>
   d5fb4:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5fb6:	2b20      	cmp	r3, #32
   d5fb8:	d10e      	bne.n	d5fd8 <_ZN9FatVolume6fatPutEmm+0x38>
   d5fba:	6981      	ldr	r1, [r0, #24]
   d5fbc:	2203      	movs	r2, #3
   d5fbe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5fc2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5fc6:	f7ff ff8a 	bl	d5ede <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5fca:	2800      	cmp	r0, #0
   d5fcc:	d0ed      	beq.n	d5faa <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d5fce:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5fd2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5fd6:	e00f      	b.n	d5ff8 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5fd8:	2b10      	cmp	r3, #16
   d5fda:	d1e6      	bne.n	d5faa <_ZN9FatVolume6fatPutEmm+0xa>
   d5fdc:	6983      	ldr	r3, [r0, #24]
   d5fde:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5fe2:	2203      	movs	r2, #3
   d5fe4:	4419      	add	r1, r3
   d5fe6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5fea:	f7ff ff78 	bl	d5ede <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5fee:	2800      	cmp	r0, #0
   d5ff0:	d0db      	beq.n	d5faa <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d5ff2:	b2e4      	uxtb	r4, r4
   d5ff4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5ff8:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d5ffa:	bd38      	pop	{r3, r4, r5, pc}

000d5ffc <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5ffc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6000:	68c4      	ldr	r4, [r0, #12]
   d6002:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6004:	4605      	mov	r5, r0
   d6006:	460e      	mov	r6, r1
   d6008:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d600a:	d207      	bcs.n	d601c <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d600c:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d600e:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d6010:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d6012:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d6014:	429c      	cmp	r4, r3
   d6016:	d903      	bls.n	d6020 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d6018:	b9cf      	cbnz	r7, d604e <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d601a:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d601c:	2701      	movs	r7, #1
   d601e:	e7f7      	b.n	d6010 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d6020:	42a6      	cmp	r6, r4
   d6022:	d014      	beq.n	d604e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d6024:	aa01      	add	r2, sp, #4
   d6026:	4621      	mov	r1, r4
   d6028:	4628      	mov	r0, r5
   d602a:	f7ff ff82 	bl	d5f32 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d602e:	2800      	cmp	r0, #0
   d6030:	db0d      	blt.n	d604e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d6032:	d0ed      	beq.n	d6010 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d6034:	9b01      	ldr	r3, [sp, #4]
   d6036:	2b00      	cmp	r3, #0
   d6038:	d1ea      	bne.n	d6010 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d603a:	b107      	cbz	r7, d603e <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d603c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d603e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d6042:	4621      	mov	r1, r4
   d6044:	4628      	mov	r0, r5
   d6046:	f7ff ffab 	bl	d5fa0 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d604a:	4607      	mov	r7, r0
   d604c:	b908      	cbnz	r0, d6052 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d604e:	2700      	movs	r7, #0
   d6050:	e00b      	b.n	d606a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d6052:	b916      	cbnz	r6, d605a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d6054:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d6058:	e007      	b.n	d606a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d605a:	4622      	mov	r2, r4
   d605c:	4631      	mov	r1, r6
   d605e:	4628      	mov	r0, r5
   d6060:	f7ff ff9e 	bl	d5fa0 <_ZN9FatVolume6fatPutEmm>
   d6064:	2800      	cmp	r0, #0
   d6066:	d1f5      	bne.n	d6054 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d6068:	e7f1      	b.n	d604e <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d606a:	4638      	mov	r0, r7
   d606c:	b002      	add	sp, #8
   d606e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6072 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d6072:	f000 bbab 	b.w	d67cc <HAL_Pin_Map>

000d6076 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d6076:	f000 bba9 	b.w	d67cc <HAL_Pin_Map>

000d607a <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d607a:	f000 bba7 	b.w	d67cc <HAL_Pin_Map>
	...

000d6080 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6080:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6082:	4c0e      	ldr	r4, [pc, #56]	; (d60bc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6084:	460e      	mov	r6, r1
   d6086:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6088:	f000 fc58 	bl	d693c <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d608c:	6823      	ldr	r3, [r4, #0]
   d608e:	1ac0      	subs	r0, r0, r3
   d6090:	4b0b      	ldr	r3, [pc, #44]	; (d60c0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d6092:	4298      	cmp	r0, r3
   d6094:	d908      	bls.n	d60a8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6096:	f000 fc59 	bl	d694c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d609a:	4b0a      	ldr	r3, [pc, #40]	; (d60c4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d609c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d609e:	f000 fe29 	bl	d6cf4 <spark_process>
   d60a2:	f000 fc4b 	bl	d693c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d60a6:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d60a8:	f000 fc50 	bl	d694c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d60ac:	b280      	uxth	r0, r0
   d60ae:	1b80      	subs	r0, r0, r6
}
   d60b0:	42a8      	cmp	r0, r5
   d60b2:	bfd4      	ite	le
   d60b4:	2000      	movle	r0, #0
   d60b6:	2001      	movgt	r0, #1
   d60b8:	bd70      	pop	{r4, r5, r6, pc}
   d60ba:	bf00      	nop
   d60bc:	2003e3d4 	.word	0x2003e3d4
   d60c0:	000186a0 	.word	0x000186a0
   d60c4:	2003e730 	.word	0x2003e730

000d60c8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d60c8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d60ca:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d60cc:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d60ce:	b94d      	cbnz	r5, d60e4 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d60d0:	6840      	ldr	r0, [r0, #4]
   d60d2:	f000 f9b9 	bl	d6448 <_ZN14SdSpiAltDriver8activateEv>
   d60d6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d60d8:	4629      	mov	r1, r5
   d60da:	7d18      	ldrb	r0, [r3, #20]
   d60dc:	f002 f811 	bl	d8102 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d60e0:	2301      	movs	r3, #1
   d60e2:	7223      	strb	r3, [r4, #8]
   d60e4:	bd38      	pop	{r3, r4, r5, pc}

000d60e6 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d60e6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d60e8:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d60ea:	4604      	mov	r4, r0
  if (m_spiActive) {
   d60ec:	b16b      	cbz	r3, d610a <_ZN9SdSpiCard7spiStopEv+0x24>
   d60ee:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d60f0:	2101      	movs	r1, #1
   d60f2:	7d18      	ldrb	r0, [r3, #20]
   d60f4:	f002 f805 	bl	d8102 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d60f8:	21ff      	movs	r1, #255	; 0xff
   d60fa:	6860      	ldr	r0, [r4, #4]
   d60fc:	f000 f9c6 	bl	d648c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d6100:	6860      	ldr	r0, [r4, #4]
   d6102:	f000 f9a5 	bl	d6450 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d6106:	2300      	movs	r3, #0
   d6108:	7223      	strb	r3, [r4, #8]
   d610a:	bd10      	pop	{r4, pc}

000d610c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d610e:	4604      	mov	r4, r0
   d6110:	460d      	mov	r5, r1
   d6112:	4616      	mov	r6, r2
   d6114:	f000 fc1a 	bl	d694c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d6118:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d611a:	6860      	ldr	r0, [r4, #4]
   d611c:	f000 f99b 	bl	d6456 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d6120:	28ff      	cmp	r0, #255	; 0xff
   d6122:	7260      	strb	r0, [r4, #9]
   d6124:	d109      	bne.n	d613a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d6126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d612a:	4639      	mov	r1, r7
   d612c:	4620      	mov	r0, r4
   d612e:	f7ff ffa7 	bl	d6080 <_ZN9SdSpiCard10isTimedOutEtt>
   d6132:	2800      	cmp	r0, #0
   d6134:	d0f1      	beq.n	d611a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6136:	2355      	movs	r3, #85	; 0x55
   d6138:	e00b      	b.n	d6152 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d613a:	28fe      	cmp	r0, #254	; 0xfe
   d613c:	d001      	beq.n	d6142 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d613e:	2350      	movs	r3, #80	; 0x50
   d6140:	e007      	b.n	d6152 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d6142:	4632      	mov	r2, r6
   d6144:	4629      	mov	r1, r5
   d6146:	6860      	ldr	r0, [r4, #4]
   d6148:	f000 f98a 	bl	d6460 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d614c:	7260      	strb	r0, [r4, #9]
   d614e:	b130      	cbz	r0, d615e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6150:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d6152:	4620      	mov	r0, r4
   d6154:	7023      	strb	r3, [r4, #0]
   d6156:	f7ff ffc6 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d615a:	2000      	movs	r0, #0
}
   d615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d615e:	6860      	ldr	r0, [r4, #4]
   d6160:	f000 f979 	bl	d6456 <_ZN14SdSpiAltDriver7receiveEv>
   d6164:	6860      	ldr	r0, [r4, #4]
   d6166:	f000 f976 	bl	d6456 <_ZN14SdSpiAltDriver7receiveEv>
   d616a:	2001      	movs	r0, #1
   d616c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d616e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d616e:	b570      	push	{r4, r5, r6, lr}
   d6170:	4604      	mov	r4, r0
   d6172:	460e      	mov	r6, r1
   d6174:	f000 fbea 	bl	d694c <HAL_Timer_Get_Milli_Seconds>
   d6178:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d617a:	4632      	mov	r2, r6
   d617c:	4629      	mov	r1, r5
   d617e:	4620      	mov	r0, r4
   d6180:	f7ff ff7e 	bl	d6080 <_ZN9SdSpiCard10isTimedOutEtt>
   d6184:	b930      	cbnz	r0, d6194 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d6186:	6860      	ldr	r0, [r4, #4]
   d6188:	f000 f965 	bl	d6456 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d618c:	28ff      	cmp	r0, #255	; 0xff
   d618e:	d1f4      	bne.n	d617a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6190:	2001      	movs	r0, #1
   d6192:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d6194:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d6196:	bd70      	pop	{r4, r5, r6, pc}

000d6198 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d619a:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d619c:	9201      	str	r2, [sp, #4]
   d619e:	4604      	mov	r4, r0
   d61a0:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d61a2:	b90b      	cbnz	r3, d61a8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d61a4:	f7ff ff90 	bl	d60c8 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d61a8:	b125      	cbz	r5, d61b4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d61aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d61ae:	4620      	mov	r0, r4
   d61b0:	f7ff ffdd 	bl	d616e <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d61b4:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d61b8:	6860      	ldr	r0, [r4, #4]
   d61ba:	f000 f967 	bl	d648c <_ZN14SdSpiAltDriver4sendEh>
   d61be:	f10d 0607 	add.w	r6, sp, #7
   d61c2:	f10d 0703 	add.w	r7, sp, #3
   d61c6:	f816 1901 	ldrb.w	r1, [r6], #-1
   d61ca:	6860      	ldr	r0, [r4, #4]
   d61cc:	f000 f95e 	bl	d648c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d61d0:	42be      	cmp	r6, r7
   d61d2:	d1f8      	bne.n	d61c6 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d61d4:	2d00      	cmp	r5, #0
   d61d6:	bf0c      	ite	eq
   d61d8:	2195      	moveq	r1, #149	; 0x95
   d61da:	2187      	movne	r1, #135	; 0x87
   d61dc:	6860      	ldr	r0, [r4, #4]
   d61de:	f000 f955 	bl	d648c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d61e2:	6860      	ldr	r0, [r4, #4]
   d61e4:	f000 f937 	bl	d6456 <_ZN14SdSpiAltDriver7receiveEv>
   d61e8:	250b      	movs	r5, #11
   d61ea:	6860      	ldr	r0, [r4, #4]
   d61ec:	f000 f933 	bl	d6456 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d61f0:	0603      	lsls	r3, r0, #24
   d61f2:	7260      	strb	r0, [r4, #9]
   d61f4:	d503      	bpl.n	d61fe <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d61f6:	3d01      	subs	r5, #1
   d61f8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d61fc:	d1f5      	bne.n	d61ea <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d61fe:	b003      	add	sp, #12
   d6200:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6202 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6202:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6204:	7a83      	ldrb	r3, [r0, #10]
   d6206:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6208:	bf18      	it	ne
   d620a:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d620c:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d620e:	460a      	mov	r2, r1
   d6210:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6212:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6214:	f7ff ffc0 	bl	d6198 <_ZN9SdSpiCard11cardCommandEhm>
   d6218:	b110      	cbz	r0, d6220 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d621a:	2330      	movs	r3, #48	; 0x30
   d621c:	7023      	strb	r3, [r4, #0]
   d621e:	e00b      	b.n	d6238 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d6220:	4629      	mov	r1, r5
   d6222:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6226:	4620      	mov	r0, r4
   d6228:	f7ff ff70 	bl	d610c <_ZN9SdSpiCard8readDataEPhj>
   d622c:	4605      	mov	r5, r0
   d622e:	b118      	cbz	r0, d6238 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d6230:	4620      	mov	r0, r4
   d6232:	f7ff ff58 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6236:	e003      	b.n	d6240 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d6238:	4620      	mov	r0, r4
   d623a:	f7ff ff54 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d623e:	2500      	movs	r5, #0
}
   d6240:	4628      	mov	r0, r5
   d6242:	bd38      	pop	{r3, r4, r5, pc}

000d6244 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6244:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d6246:	7a83      	ldrb	r3, [r0, #10]
   d6248:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d624a:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d624c:	bf18      	it	ne
   d624e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6250:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6252:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6254:	f7ff ffa0 	bl	d6198 <_ZN9SdSpiCard11cardCommandEhm>
   d6258:	b130      	cbz	r0, d6268 <_ZN9SdSpiCard9readStartEm+0x24>
   d625a:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d625c:	4620      	mov	r0, r4
   d625e:	7023      	strb	r3, [r4, #0]
   d6260:	f7ff ff41 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6264:	2000      	movs	r0, #0
   d6266:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d6268:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d626a:	bd10      	pop	{r4, pc}

000d626c <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d626c:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d626e:	2200      	movs	r2, #0
   d6270:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6272:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d6274:	f7ff ff90 	bl	d6198 <_ZN9SdSpiCard11cardCommandEhm>
   d6278:	b130      	cbz	r0, d6288 <_ZN9SdSpiCard8readStopEv+0x1c>
   d627a:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d627c:	4620      	mov	r0, r4
   d627e:	7023      	strb	r3, [r4, #0]
   d6280:	f7ff ff31 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6284:	2000      	movs	r0, #0
   d6286:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d6288:	4620      	mov	r0, r4
   d628a:	f7ff ff2c 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d628e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6290:	bd10      	pop	{r4, pc}

000d6292 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6294:	4605      	mov	r5, r0
   d6296:	4616      	mov	r6, r2
   d6298:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d629a:	f7ff ffd3 	bl	d6244 <_ZN9SdSpiCard9readStartEm>
   d629e:	b198      	cbz	r0, d62c8 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d62a0:	2400      	movs	r4, #0
   d62a2:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d62a4:	429f      	cmp	r7, r3
   d62a6:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d62aa:	d908      	bls.n	d62be <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d62ac:	f44f 7200 	mov.w	r2, #512	; 0x200
   d62b0:	4628      	mov	r0, r5
   d62b2:	f7ff ff2b 	bl	d610c <_ZN9SdSpiCard8readDataEPhj>
   d62b6:	3401      	adds	r4, #1
   d62b8:	2800      	cmp	r0, #0
   d62ba:	d1f2      	bne.n	d62a2 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d62bc:	e004      	b.n	d62c8 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d62be:	4628      	mov	r0, r5
}
   d62c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d62c4:	f7ff bfd2 	b.w	d626c <_ZN9SdSpiCard8readStopEv>
}
   d62c8:	2000      	movs	r0, #0
   d62ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62cc <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d62cc:	b538      	push	{r3, r4, r5, lr}
   d62ce:	4604      	mov	r4, r0
   d62d0:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d62d2:	6840      	ldr	r0, [r0, #4]
   d62d4:	f000 f8da 	bl	d648c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d62d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   d62dc:	4629      	mov	r1, r5
   d62de:	6860      	ldr	r0, [r4, #4]
   d62e0:	f000 f8d8 	bl	d6494 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d62e4:	21ff      	movs	r1, #255	; 0xff
   d62e6:	6860      	ldr	r0, [r4, #4]
   d62e8:	f000 f8d0 	bl	d648c <_ZN14SdSpiAltDriver4sendEh>
   d62ec:	21ff      	movs	r1, #255	; 0xff
   d62ee:	6860      	ldr	r0, [r4, #4]
   d62f0:	f000 f8cc 	bl	d648c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d62f4:	6860      	ldr	r0, [r4, #4]
   d62f6:	f000 f8ae 	bl	d6456 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d62fa:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d62fc:	f000 001f 	and.w	r0, r0, #31
   d6300:	2805      	cmp	r0, #5
   d6302:	d006      	beq.n	d6312 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6304:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6306:	4620      	mov	r0, r4
   d6308:	7023      	strb	r3, [r4, #0]
   d630a:	f7ff feec 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d630e:	2000      	movs	r0, #0
   d6310:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6312:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6314:	bd38      	pop	{r3, r4, r5, pc}

000d6316 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6316:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6318:	7a83      	ldrb	r3, [r0, #10]
   d631a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d631c:	bf18      	it	ne
   d631e:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6320:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6322:	460a      	mov	r2, r1
   d6324:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6326:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6328:	f7ff ff36 	bl	d6198 <_ZN9SdSpiCard11cardCommandEhm>
   d632c:	4606      	mov	r6, r0
   d632e:	b108      	cbz	r0, d6334 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d6330:	2332      	movs	r3, #50	; 0x32
   d6332:	e01d      	b.n	d6370 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d6334:	462a      	mov	r2, r5
   d6336:	21fe      	movs	r1, #254	; 0xfe
   d6338:	4620      	mov	r0, r4
   d633a:	f7ff ffc7 	bl	d62cc <_ZN9SdSpiCard9writeDataEhPKh>
   d633e:	b1c0      	cbz	r0, d6372 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6340:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6344:	4620      	mov	r0, r4
   d6346:	f7ff ff12 	bl	d616e <_ZN9SdSpiCard11waitNotBusyEt>
   d634a:	4605      	mov	r5, r0
   d634c:	b908      	cbnz	r0, d6352 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d634e:	235a      	movs	r3, #90	; 0x5a
   d6350:	e00e      	b.n	d6370 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6352:	4632      	mov	r2, r6
   d6354:	210d      	movs	r1, #13
   d6356:	4620      	mov	r0, r4
   d6358:	f7ff ff1e 	bl	d6198 <_ZN9SdSpiCard11cardCommandEhm>
   d635c:	b938      	cbnz	r0, d636e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d635e:	6860      	ldr	r0, [r4, #4]
   d6360:	f000 f879 	bl	d6456 <_ZN14SdSpiAltDriver7receiveEv>
   d6364:	b918      	cbnz	r0, d636e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d6366:	4620      	mov	r0, r4
   d6368:	f7ff febd 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d636c:	e005      	b.n	d637a <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d636e:	2329      	movs	r3, #41	; 0x29
   d6370:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d6372:	4620      	mov	r0, r4
   d6374:	f7ff feb7 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6378:	2500      	movs	r5, #0
}
   d637a:	4628      	mov	r0, r5
   d637c:	bd70      	pop	{r4, r5, r6, pc}

000d637e <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d637e:	b538      	push	{r3, r4, r5, lr}
   d6380:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6382:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6386:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6388:	f7ff fef1 	bl	d616e <_ZN9SdSpiCard11waitNotBusyEt>
   d638c:	b910      	cbnz	r0, d6394 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d638e:	235b      	movs	r3, #91	; 0x5b
   d6390:	7023      	strb	r3, [r4, #0]
   d6392:	e005      	b.n	d63a0 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6394:	462a      	mov	r2, r5
   d6396:	21fc      	movs	r1, #252	; 0xfc
   d6398:	4620      	mov	r0, r4
   d639a:	f7ff ff97 	bl	d62cc <_ZN9SdSpiCard9writeDataEhPKh>
   d639e:	b918      	cbnz	r0, d63a8 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d63a0:	4620      	mov	r0, r4
   d63a2:	f7ff fea0 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d63a6:	2000      	movs	r0, #0
}
   d63a8:	bd38      	pop	{r3, r4, r5, pc}

000d63aa <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d63aa:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d63ac:	7a83      	ldrb	r3, [r0, #10]
   d63ae:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d63b0:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d63b2:	bf18      	it	ne
   d63b4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d63b6:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d63b8:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d63ba:	f7ff feed 	bl	d6198 <_ZN9SdSpiCard11cardCommandEhm>
   d63be:	b130      	cbz	r0, d63ce <_ZN9SdSpiCard10writeStartEm+0x24>
   d63c0:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d63c2:	4620      	mov	r0, r4
   d63c4:	7023      	strb	r3, [r4, #0]
   d63c6:	f7ff fe8e 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d63ca:	2000      	movs	r0, #0
   d63cc:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d63ce:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d63d0:	bd10      	pop	{r4, pc}

000d63d2 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d63d2:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d63d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d63d8:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d63da:	f7ff fec8 	bl	d616e <_ZN9SdSpiCard11waitNotBusyEt>
   d63de:	4605      	mov	r5, r0
   d63e0:	b120      	cbz	r0, d63ec <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d63e2:	21fd      	movs	r1, #253	; 0xfd
   d63e4:	6860      	ldr	r0, [r4, #4]
   d63e6:	f000 f851 	bl	d648c <_ZN14SdSpiAltDriver4sendEh>
   d63ea:	e001      	b.n	d63f0 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63ec:	2356      	movs	r3, #86	; 0x56
   d63ee:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d63f0:	4620      	mov	r0, r4
   d63f2:	f7ff fe78 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d63f6:	4628      	mov	r0, r5
   d63f8:	bd38      	pop	{r3, r4, r5, pc}

000d63fa <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d63fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63fc:	4605      	mov	r5, r0
   d63fe:	4616      	mov	r6, r2
   d6400:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6402:	f7ff ffd2 	bl	d63aa <_ZN9SdSpiCard10writeStartEm>
   d6406:	b170      	cbz	r0, d6426 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d6408:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d640a:	42bc      	cmp	r4, r7
   d640c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6410:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6412:	d004      	beq.n	d641e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6414:	f7ff ffb3 	bl	d637e <_ZN9SdSpiCard9writeDataEPKh>
   d6418:	b128      	cbz	r0, d6426 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d641a:	3401      	adds	r4, #1
   d641c:	e7f5      	b.n	d640a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d641e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6422:	f7ff bfd6 	b.w	d63d2 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6426:	4628      	mov	r0, r5
   d6428:	f7ff fe5d 	bl	d60e6 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d642c:	2000      	movs	r0, #0
   d642e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6430 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6430:	f000 b9cc 	b.w	d67cc <HAL_Pin_Map>

000d6434 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6434:	f000 b9ca 	b.w	d67cc <HAL_Pin_Map>

000d6438 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6438:	f000 b9c8 	b.w	d67cc <HAL_Pin_Map>

000d643c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d643c:	4b01      	ldr	r3, [pc, #4]	; (d6444 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d643e:	2201      	movs	r2, #1
   d6440:	701a      	strb	r2, [r3, #0]
   d6442:	4770      	bx	lr
   d6444:	2003e3d8 	.word	0x2003e3d8

000d6448 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6448:	1d01      	adds	r1, r0, #4
   d644a:	6800      	ldr	r0, [r0, #0]
   d644c:	f000 bd1c 	b.w	d6e88 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6450 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6450:	6800      	ldr	r0, [r0, #0]
   d6452:	f000 bd00 	b.w	d6e56 <_ZN8SPIClass14endTransactionEv>

000d6456 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d6456:	21ff      	movs	r1, #255	; 0xff
   d6458:	6800      	ldr	r0, [r0, #0]
   d645a:	f000 bddb 	b.w	d7014 <_ZN8SPIClass8transferEh>
	...

000d6460 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d6460:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6462:	4b08      	ldr	r3, [pc, #32]	; (d6484 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6464:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6466:	2500      	movs	r5, #0
   d6468:	4c07      	ldr	r4, [pc, #28]	; (d6488 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d646a:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d646c:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d646e:	4613      	mov	r3, r2
   d6470:	460a      	mov	r2, r1
   d6472:	4629      	mov	r1, r5
   d6474:	f000 fdd4 	bl	d7020 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6478:	7823      	ldrb	r3, [r4, #0]
   d647a:	2b00      	cmp	r3, #0
   d647c:	d0fc      	beq.n	d6478 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d647e:	2000      	movs	r0, #0
   d6480:	b003      	add	sp, #12
   d6482:	bd30      	pop	{r4, r5, pc}
   d6484:	000d643d 	.word	0x000d643d
   d6488:	2003e3d8 	.word	0x2003e3d8

000d648c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d648c:	6800      	ldr	r0, [r0, #0]
   d648e:	f000 bdc1 	b.w	d7014 <_ZN8SPIClass8transferEh>
	...

000d6494 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6494:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6496:	4b07      	ldr	r3, [pc, #28]	; (d64b4 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6498:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d649a:	2500      	movs	r5, #0
   d649c:	4c06      	ldr	r4, [pc, #24]	; (d64b8 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d649e:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d64a0:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d64a2:	4613      	mov	r3, r2
   d64a4:	462a      	mov	r2, r5
   d64a6:	f000 fdbb 	bl	d7020 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d64aa:	7823      	ldrb	r3, [r4, #0]
   d64ac:	2b00      	cmp	r3, #0
   d64ae:	d0fc      	beq.n	d64aa <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d64b0:	b003      	add	sp, #12
   d64b2:	bd30      	pop	{r4, r5, pc}
   d64b4:	000d643d 	.word	0x000d643d
   d64b8:	2003e3d8 	.word	0x2003e3d8

000d64bc <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d64bc:	f000 b986 	b.w	d67cc <HAL_Pin_Map>

000d64c0 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d64c0:	2200      	movs	r2, #0
   d64c2:	6001      	str	r1, [r0, #0]
   d64c4:	6102      	str	r2, [r0, #16]
   d64c6:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d64c8:	4770      	bx	lr

000d64ca <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d64ca:	b510      	push	{r4, lr}
   d64cc:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d64ce:	8800      	ldrh	r0, [r0, #0]
   d64d0:	f001 fe43 	bl	d815a <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d64d4:	f240 3312 	movw	r3, #786	; 0x312
   d64d8:	f1a0 020b 	sub.w	r2, r0, #11
   d64dc:	429a      	cmp	r2, r3
   d64de:	d807      	bhi.n	d64f0 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d64e0:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d64e2:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d64e4:	60e0      	str	r0, [r4, #12]
   d64e6:	f000 fa31 	bl	d694c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d64ea:	61a0      	str	r0, [r4, #24]

        return true;
   d64ec:	2001      	movs	r0, #1
   d64ee:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d64f0:	2000      	movs	r0, #0
    }
}
   d64f2:	bd10      	pop	{r4, pc}

000d64f4 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d64f4:	f000 b96a 	b.w	d67cc <HAL_Pin_Map>

000d64f8 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>:
void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
   d64f8:	1d8b      	adds	r3, r1, #6
  uint16_t sum = 0;
   d64fa:	2000      	movs	r0, #0
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
   d64fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6500:	4410      	add	r0, r2
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
   d6502:	428b      	cmp	r3, r1
    sum += buffer[i];
   d6504:	b280      	uxth	r0, r0
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
   d6506:	d1f9      	bne.n	d64fc <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh+0x4>
    sum += buffer[i];
  }
  return -sum;
   d6508:	4240      	negs	r0, r0
}
   d650a:	b280      	uxth	r0, r0
   d650c:	4770      	bx	lr

000d650e <_ZN19DFRobotDFPlayerMini10parseStackEv>:
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
   d650e:	7c41      	ldrb	r1, [r0, #17]
  value <<=8;
  value += *(array+1);
   d6510:	7c83      	ldrb	r3, [r0, #18]
  _isAvailable = false;
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
   d6512:	7bc2      	ldrb	r2, [r0, #15]
   d6514:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
  value += *(array+1);
   d6518:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   d651c:	b29b      	uxth	r3, r3

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);

  switch (_handleCommand) {
   d651e:	3a3a      	subs	r2, #58	; 0x3a
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
   d6520:	8483      	strh	r3, [r0, #36]	; 0x24

  switch (_handleCommand) {
   d6522:	2a15      	cmp	r2, #21
   d6524:	d833      	bhi.n	d658e <_ZN19DFRobotDFPlayerMini10parseStackEv+0x80>
   d6526:	e8df f002 	tbb	[pc, r2]
   d652a:	1e17      	.short	0x1e17
   d652c:	102e0b2e 	.word	0x102e0b2e
   d6530:	2e2e2c25 	.word	0x2e2e2c25
   d6534:	2e2e2e2e 	.word	0x2e2e2e2e
   d6538:	2e322e2e 	.word	0x2e322e2e
   d653c:	2e2e2e2e 	.word	0x2e2e2e2e
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6540:	2300      	movs	r3, #0
   d6542:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6546:	2305      	movs	r3, #5
   d6548:	e018      	b.n	d657c <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x02) {
   d654a:	0799      	lsls	r1, r3, #30
   d654c:	d52a      	bpl.n	d65a4 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d654e:	2300      	movs	r3, #0
   d6550:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6554:	2304      	movs	r3, #4
   d6556:	e011      	b.n	d657c <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
      if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x02) {
   d6558:	079a      	lsls	r2, r3, #30
   d655a:	d523      	bpl.n	d65a4 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d655c:	2300      	movs	r3, #0
   d655e:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6562:	2302      	movs	r3, #2
   d6564:	e00a      	b.n	d657c <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
      if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x02) {
   d6566:	079b      	lsls	r3, r3, #30
   d6568:	d51c      	bpl.n	d65a4 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d656a:	2300      	movs	r3, #0
   d656c:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6570:	2303      	movs	r3, #3
   d6572:	e003      	b.n	d657c <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6574:	2300      	movs	r3, #0
   d6576:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d657a:	2306      	movs	r3, #6
   d657c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   d6580:	e001      	b.n	d6586 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x78>
      break;
    case 0x40:
      handleMessage(DFPlayerError, _handleParameter);
      break;
    case 0x41:
      _isSending = false;
   d6582:	2300      	movs	r3, #0
   d6584:	e00c      	b.n	d65a0 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x92>
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
      _isAvailable = true;
   d6586:	2301      	movs	r3, #1
   d6588:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
      break;
   d658c:	4770      	bx	lr
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d658e:	2300      	movs	r3, #0
  _handleType = type;
   d6590:	2201      	movs	r2, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6592:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6596:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
  _handleParameter = parameter;
   d659a:	8483      	strh	r3, [r0, #36]	; 0x24
  _isAvailable = true;
   d659c:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d65a0:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
   d65a4:	4770      	bx	lr

000d65a6 <_ZN19DFRobotDFPlayerMini13validateStackEv>:
  value <<=8;
  value += *(array+1);
  return value;
}

bool DFRobotDFPlayerMini::validateStack(){
   d65a6:	b510      	push	{r4, lr}
   d65a8:	4604      	mov	r4, r0
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
   d65aa:	f100 010c 	add.w	r1, r0, #12
   d65ae:	f7ff ffa3 	bl	d64f8 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
   d65b2:	7ce2      	ldrb	r2, [r4, #19]
  value += *(array+1);
  return value;
}

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
   d65b4:	7d23      	ldrb	r3, [r4, #20]
   d65b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d65ba:	b29b      	uxth	r3, r3
}
   d65bc:	1a1b      	subs	r3, r3, r0
   d65be:	4258      	negs	r0, r3
   d65c0:	4158      	adcs	r0, r3
   d65c2:	bd10      	pop	{r4, pc}

000d65c4 <_ZN19DFRobotDFPlayerMini9availableEv>:

bool DFRobotDFPlayerMini::available(){
   d65c4:	b570      	push	{r4, r5, r6, lr}
   d65c6:	4604      	mov	r4, r0
  while (_serial->available()) {
   d65c8:	6820      	ldr	r0, [r4, #0]
   d65ca:	6803      	ldr	r3, [r0, #0]
   d65cc:	691b      	ldr	r3, [r3, #16]
   d65ce:	4798      	blx	r3
   d65d0:	4605      	mov	r5, r0
   d65d2:	2800      	cmp	r0, #0
   d65d4:	d05a      	beq.n	d668c <_ZN19DFRobotDFPlayerMini9availableEv+0xc8>
   d65d6:	6820      	ldr	r0, [r4, #0]
    if (_receivedIndex == 0) {
   d65d8:	f894 5020 	ldrb.w	r5, [r4, #32]
      _received[Stack_Header] = _serial->read();
   d65dc:	6803      	ldr	r3, [r0, #0]
   d65de:	695b      	ldr	r3, [r3, #20]
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    if (_receivedIndex == 0) {
   d65e0:	b94d      	cbnz	r5, d65f6 <_ZN19DFRobotDFPlayerMini9availableEv+0x32>
      _received[Stack_Header] = _serial->read();
   d65e2:	4798      	blx	r3
   d65e4:	b2c0      	uxtb	r0, r0
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
   d65e6:	287e      	cmp	r0, #126	; 0x7e
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    if (_receivedIndex == 0) {
      _received[Stack_Header] = _serial->read();
   d65e8:	7320      	strb	r0, [r4, #12]
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
   d65ea:	d1ed      	bne.n	d65c8 <_ZN19DFRobotDFPlayerMini9availableEv+0x4>
        _isAvailable = false;
   d65ec:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        _receivedIndex ++;
   d65f0:	f894 3020 	ldrb.w	r3, [r4, #32]
   d65f4:	e046      	b.n	d6684 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
   d65f6:	4798      	blx	r3
   d65f8:	4425      	add	r5, r4
   d65fa:	7328      	strb	r0, [r5, #12]
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
   d65fc:	f894 3020 	ldrb.w	r3, [r4, #32]
   d6600:	2b02      	cmp	r3, #2
   d6602:	d011      	beq.n	d6628 <_ZN19DFRobotDFPlayerMini9availableEv+0x64>
   d6604:	2b09      	cmp	r3, #9
   d6606:	d013      	beq.n	d6630 <_ZN19DFRobotDFPlayerMini9availableEv+0x6c>
   d6608:	2b01      	cmp	r3, #1
   d660a:	d13b      	bne.n	d6684 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
   d660c:	7b62      	ldrb	r2, [r4, #13]
   d660e:	2aff      	cmp	r2, #255	; 0xff
   d6610:	d038      	beq.n	d6684 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6612:	2200      	movs	r2, #0
   d6614:	f884 2020 	strb.w	r2, [r4, #32]
  _handleType = type;
   d6618:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d661c:	84a2      	strh	r2, [r4, #36]	; 0x24
  _isAvailable = true;
   d661e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d6622:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
   d6626:	e048      	b.n	d66ba <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
   d6628:	7ba2      	ldrb	r2, [r4, #14]
   d662a:	2a06      	cmp	r2, #6
   d662c:	d02a      	beq.n	d6684 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
   d662e:	e002      	b.n	d6636 <_ZN19DFRobotDFPlayerMini9availableEv+0x72>
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
   d6630:	7d63      	ldrb	r3, [r4, #21]
   d6632:	2bef      	cmp	r3, #239	; 0xef
   d6634:	d009      	beq.n	d664a <_ZN19DFRobotDFPlayerMini9availableEv+0x86>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6636:	2300      	movs	r3, #0
  _handleType = type;
   d6638:	2201      	movs	r2, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d663a:	f884 3020 	strb.w	r3, [r4, #32]
  _handleType = type;
   d663e:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d6642:	84a3      	strh	r3, [r4, #36]	; 0x24
  _isAvailable = true;
   d6644:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   d6648:	e00e      	b.n	d6668 <_ZN19DFRobotDFPlayerMini9availableEv+0xa4>
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
   d664a:	4620      	mov	r0, r4
   d664c:	f7ff ffab 	bl	d65a6 <_ZN19DFRobotDFPlayerMini13validateStackEv>
   d6650:	b168      	cbz	r0, d666e <_ZN19DFRobotDFPlayerMini9availableEv+0xaa>
              _receivedIndex = 0;
   d6652:	2300      	movs	r3, #0
   d6654:	f884 3020 	strb.w	r3, [r4, #32]
              parseStack();
   d6658:	4620      	mov	r0, r4
   d665a:	f7ff ff58 	bl	d650e <_ZN19DFRobotDFPlayerMini10parseStackEv>
              if (_isAvailable && !_sending[Stack_ACK]) {
   d665e:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
   d6662:	b356      	cbz	r6, d66ba <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
   d6664:	7ea3      	ldrb	r3, [r4, #26]
   d6666:	bb43      	cbnz	r3, d66ba <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
                _isSending = false;
   d6668:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   d666c:	e025      	b.n	d66ba <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
   d666e:	2301      	movs	r3, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6670:	f884 0020 	strb.w	r0, [r4, #32]
  _handleType = type;
   d6674:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d6678:	84a0      	strh	r0, [r4, #36]	; 0x24
  _isAvailable = true;
   d667a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d667e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
                _isSending = false;
              }
              return _isAvailable;
            }
            else{
              return handleError(WrongStack);
   d6682:	e01a      	b.n	d66ba <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
   d6684:	3301      	adds	r3, #1
   d6686:	f884 3020 	strb.w	r3, [r4, #32]
   d668a:	e79d      	b.n	d65c8 <_ZN19DFRobotDFPlayerMini9availableEv+0x4>
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
   d668c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d6690:	b18b      	cbz	r3, d66b6 <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
   d6692:	f000 f95b 	bl	d694c <HAL_Timer_Get_Milli_Seconds>
   d6696:	6863      	ldr	r3, [r4, #4]
   d6698:	1ac0      	subs	r0, r0, r3
   d669a:	68a3      	ldr	r3, [r4, #8]
   d669c:	4298      	cmp	r0, r3
   d669e:	d30a      	bcc.n	d66b6 <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
  _handleParameter = parameter;
  _isAvailable = true;
   d66a0:	2301      	movs	r3, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d66a2:	f884 5020 	strb.w	r5, [r4, #32]
  _handleType = type;
   d66a6:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d66aa:	84a5      	strh	r5, [r4, #36]	; 0x24
  _isAvailable = true;
   d66ac:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d66b0:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
   d66b4:	e001      	b.n	d66ba <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
  }
  
  return _isAvailable;
   d66b6:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
}
   d66ba:	4630      	mov	r0, r6
   d66bc:	bd70      	pop	{r4, r5, r6, pc}

000d66be <_ZN19DFRobotDFPlayerMini9sendStackEv>:
    sum += buffer[i];
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
   d66be:	b510      	push	{r4, lr}
  if (_sending[Stack_ACK]) {
   d66c0:	7e83      	ldrb	r3, [r0, #26]
    sum += buffer[i];
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
   d66c2:	4604      	mov	r4, r0
  if (_sending[Stack_ACK]) {
   d66c4:	b133      	cbz	r3, d66d4 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x16>
    while (_isSending) {
   d66c6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d66ca:	b133      	cbz	r3, d66da <_ZN19DFRobotDFPlayerMini9sendStackEv+0x1c>
      available();
   d66cc:	4620      	mov	r0, r4
   d66ce:	f7ff ff79 	bl	d65c4 <_ZN19DFRobotDFPlayerMini9availableEv>
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {
    while (_isSending) {
   d66d2:	e7f8      	b.n	d66c6 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x8>
      available();
    }
  }
  else{
    delay(10);
   d66d4:	200a      	movs	r0, #10
   d66d6:	f000 fd9f 	bl	d7218 <delay>
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
   d66da:	4621      	mov	r1, r4
   d66dc:	220a      	movs	r2, #10
   d66de:	f851 0b16 	ldr.w	r0, [r1], #22
   d66e2:	6803      	ldr	r3, [r0, #0]
   d66e4:	68db      	ldr	r3, [r3, #12]
   d66e6:	4798      	blx	r3
   d66e8:	f000 f930 	bl	d694c <HAL_Timer_Get_Milli_Seconds>
  _timeOutTimer = millis();
  _isSending = _sending[Stack_ACK];
   d66ec:	7ea3      	ldrb	r3, [r4, #26]
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
  _timeOutTimer = millis();
   d66ee:	6060      	str	r0, [r4, #4]
  _isSending = _sending[Stack_ACK];
   d66f0:	3300      	adds	r3, #0
   d66f2:	bf18      	it	ne
   d66f4:	2301      	movne	r3, #1
   d66f6:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   d66fa:	bd10      	pop	{r4, pc}

000d66fc <_ZN19DFRobotDFPlayerMini9sendStackEht>:
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d66fc:	1213      	asrs	r3, r2, #8

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
   d66fe:	b510      	push	{r4, lr}
  _sending[Stack_Command] = command;
   d6700:	7641      	strb	r1, [r0, #25]
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d6702:	76c3      	strb	r3, [r0, #27]
  *(array+1) = (uint8_t)(value);
   d6704:	7702      	strb	r2, [r0, #28]
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
   d6706:	f100 0116 	add.w	r1, r0, #22

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
   d670a:	4604      	mov	r4, r0
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
   d670c:	f7ff fef4 	bl	d64f8 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d6710:	1203      	asrs	r3, r0, #8
  *(array+1) = (uint8_t)(value);
   d6712:	77a0      	strb	r0, [r4, #30]
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d6714:	7763      	strb	r3, [r4, #29]

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
   d6716:	4620      	mov	r0, r4
}
   d6718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
   d671c:	f7ff bfcf 	b.w	d66be <_ZN19DFRobotDFPlayerMini9sendStackEv>

000d6720 <_ZN19DFRobotDFPlayerMini9sendStackEh>:
  _timeOutTimer = millis();
  _isSending = _sending[Stack_ACK];
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
   d6720:	2200      	movs	r2, #0
   d6722:	f7ff bfeb 	b.w	d66fc <_ZN19DFRobotDFPlayerMini9sendStackEht>

000d6726 <_ZN19DFRobotDFPlayerMini9sendStackEhhh>:
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint8_t argumentHigh, uint8_t argumentLow){
  uint16_t buffer = argumentHigh;
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
   d6726:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   d672a:	f7ff bfe7 	b.w	d66fc <_ZN19DFRobotDFPlayerMini9sendStackEht>

000d672e <_ZN19DFRobotDFPlayerMini13waitAvailableEv>:
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(){
  _isSending = true;
   d672e:	2301      	movs	r3, #1

void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(){
   d6730:	b510      	push	{r4, lr}
   d6732:	4604      	mov	r4, r0
  _isSending = true;
   d6734:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
  while (!available());
   d6738:	4620      	mov	r0, r4
   d673a:	f7ff ff43 	bl	d65c4 <_ZN19DFRobotDFPlayerMini9availableEv>
   d673e:	2800      	cmp	r0, #0
   d6740:	d0fa      	beq.n	d6738 <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0xa>
  return _handleType != TimeOut;
   d6742:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
}
   d6746:	3000      	adds	r0, #0
   d6748:	bf18      	it	ne
   d674a:	2001      	movne	r0, #1
   d674c:	bd10      	pop	{r4, pc}

000d674e <_ZN19DFRobotDFPlayerMini5resetEv>:
void DFRobotDFPlayerMini::sleep(){
  sendStack(0x0A);
}

void DFRobotDFPlayerMini::reset(){
  sendStack(0x0C);
   d674e:	210c      	movs	r1, #12
   d6750:	f7ff bfe6 	b.w	d6720 <_ZN19DFRobotDFPlayerMini9sendStackEh>

000d6754 <_ZN19DFRobotDFPlayerMini5beginER6Streamb>:
  _isSending = true;
  while (!available());
  return _handleType != TimeOut;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK){
   d6754:	b538      	push	{r3, r4, r5, lr}
   d6756:	4604      	mov	r4, r0
  if (isACK) {
   d6758:	4615      	mov	r5, r2
   d675a:	b112      	cbz	r2, d6762 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0xe>
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
   d675c:	2301      	movs	r3, #1
   d675e:	7683      	strb	r3, [r0, #26]
   d6760:	e000      	b.n	d6764 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x10>
}

void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
   d6762:	76a2      	strb	r2, [r4, #26]
  else{
    disableACK();
  }
  
  _serial = &stream;
  _timeOutDuration += 3000;
   d6764:	68a3      	ldr	r3, [r4, #8]
  }
  else{
    disableACK();
  }
  
  _serial = &stream;
   d6766:	6021      	str	r1, [r4, #0]
  _timeOutDuration += 3000;
   d6768:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
   d676c:	60a3      	str	r3, [r4, #8]
  reset();
   d676e:	4620      	mov	r0, r4
   d6770:	f7ff ffed 	bl	d674e <_ZN19DFRobotDFPlayerMini5resetEv>
  waitAvailable();
   d6774:	4620      	mov	r0, r4
   d6776:	f7ff ffda 	bl	d672e <_ZN19DFRobotDFPlayerMini13waitAvailableEv>
  _timeOutDuration -= 3000;
   d677a:	68a3      	ldr	r3, [r4, #8]
   d677c:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
  delay(200);
   d6780:	20c8      	movs	r0, #200	; 0xc8
  
  _serial = &stream;
  _timeOutDuration += 3000;
  reset();
  waitAvailable();
  _timeOutDuration -= 3000;
   d6782:	60a3      	str	r3, [r4, #8]
  delay(200);
   d6784:	f000 fd48 	bl	d7218 <delay>
  return (readType() == DFPlayerCardOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
   d6788:	2300      	movs	r3, #0
   d678a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  _timeOutDuration += 3000;
  reset();
  waitAvailable();
  _timeOutDuration -= 3000;
  delay(200);
  return (readType() == DFPlayerCardOnline) || !isACK;
   d678e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d6792:	2b04      	cmp	r3, #4
   d6794:	bf14      	ite	ne
   d6796:	f085 0001 	eorne.w	r0, r5, #1
   d679a:	2001      	moveq	r0, #1
}
   d679c:	bd38      	pop	{r3, r4, r5, pc}

000d679e <_ZN19DFRobotDFPlayerMini10playFolderEhh>:
void DFRobotDFPlayerMini::pause(){
  sendStack(0x0E);
}

void DFRobotDFPlayerMini::playFolder(uint8_t folderNumber, uint8_t fileNumber){
  sendStack(0x0F, folderNumber, fileNumber);
   d679e:	4613      	mov	r3, r2
   d67a0:	460a      	mov	r2, r1
   d67a2:	210f      	movs	r1, #15
   d67a4:	f7ff bfbf 	b.w	d6726 <_ZN19DFRobotDFPlayerMini9sendStackEhhh>

000d67a8 <_GLOBAL__sub_I__ZN19DFRobotDFPlayerMini10setTimeOutEm>:
   d67a8:	f000 b810 	b.w	d67cc <HAL_Pin_Map>

000d67ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d67ac:	b508      	push	{r3, lr}
   d67ae:	4b02      	ldr	r3, [pc, #8]	; (d67b8 <netdb_freeaddrinfo+0xc>)
   d67b0:	681b      	ldr	r3, [r3, #0]
   d67b2:	689b      	ldr	r3, [r3, #8]
   d67b4:	9301      	str	r3, [sp, #4]
   d67b6:	bd08      	pop	{r3, pc}
   d67b8:	00030268 	.word	0x00030268

000d67bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d67bc:	b508      	push	{r3, lr}
   d67be:	4b02      	ldr	r3, [pc, #8]	; (d67c8 <netdb_getaddrinfo+0xc>)
   d67c0:	681b      	ldr	r3, [r3, #0]
   d67c2:	68db      	ldr	r3, [r3, #12]
   d67c4:	9301      	str	r3, [sp, #4]
   d67c6:	bd08      	pop	{r3, pc}
   d67c8:	00030268 	.word	0x00030268

000d67cc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d67cc:	b508      	push	{r3, lr}
   d67ce:	4b02      	ldr	r3, [pc, #8]	; (d67d8 <HAL_Pin_Map+0xc>)
   d67d0:	681b      	ldr	r3, [r3, #0]
   d67d2:	681b      	ldr	r3, [r3, #0]
   d67d4:	9301      	str	r3, [sp, #4]
   d67d6:	bd08      	pop	{r3, pc}
   d67d8:	0003022c 	.word	0x0003022c

000d67dc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d67dc:	b508      	push	{r3, lr}
   d67de:	4b02      	ldr	r3, [pc, #8]	; (d67e8 <HAL_Validate_Pin_Function+0xc>)
   d67e0:	681b      	ldr	r3, [r3, #0]
   d67e2:	685b      	ldr	r3, [r3, #4]
   d67e4:	9301      	str	r3, [sp, #4]
   d67e6:	bd08      	pop	{r3, pc}
   d67e8:	0003022c 	.word	0x0003022c

000d67ec <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d67ec:	b508      	push	{r3, lr}
   d67ee:	4b02      	ldr	r3, [pc, #8]	; (d67f8 <HAL_Pin_Mode+0xc>)
   d67f0:	681b      	ldr	r3, [r3, #0]
   d67f2:	689b      	ldr	r3, [r3, #8]
   d67f4:	9301      	str	r3, [sp, #4]
   d67f6:	bd08      	pop	{r3, pc}
   d67f8:	0003022c 	.word	0x0003022c

000d67fc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d67fc:	b508      	push	{r3, lr}
   d67fe:	4b02      	ldr	r3, [pc, #8]	; (d6808 <HAL_Get_Pin_Mode+0xc>)
   d6800:	681b      	ldr	r3, [r3, #0]
   d6802:	68db      	ldr	r3, [r3, #12]
   d6804:	9301      	str	r3, [sp, #4]
   d6806:	bd08      	pop	{r3, pc}
   d6808:	0003022c 	.word	0x0003022c

000d680c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d680c:	b508      	push	{r3, lr}
   d680e:	4b02      	ldr	r3, [pc, #8]	; (d6818 <HAL_GPIO_Write+0xc>)
   d6810:	681b      	ldr	r3, [r3, #0]
   d6812:	691b      	ldr	r3, [r3, #16]
   d6814:	9301      	str	r3, [sp, #4]
   d6816:	bd08      	pop	{r3, pc}
   d6818:	0003022c 	.word	0x0003022c

000d681c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d681c:	b508      	push	{r3, lr}
   d681e:	4b02      	ldr	r3, [pc, #8]	; (d6828 <HAL_GPIO_Read+0xc>)
   d6820:	681b      	ldr	r3, [r3, #0]
   d6822:	695b      	ldr	r3, [r3, #20]
   d6824:	9301      	str	r3, [sp, #4]
   d6826:	bd08      	pop	{r3, pc}
   d6828:	0003022c 	.word	0x0003022c

000d682c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d682c:	b508      	push	{r3, lr}
   d682e:	4b02      	ldr	r3, [pc, #8]	; (d6838 <HAL_ADC_Read+0xc>)
   d6830:	681b      	ldr	r3, [r3, #0]
   d6832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6834:	9301      	str	r3, [sp, #4]
   d6836:	bd08      	pop	{r3, pc}
   d6838:	0003022c 	.word	0x0003022c

000d683c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d683c:	b508      	push	{r3, lr}
   d683e:	4b02      	ldr	r3, [pc, #8]	; (d6848 <HAL_SPI_Begin+0xc>)
   d6840:	681b      	ldr	r3, [r3, #0]
   d6842:	681b      	ldr	r3, [r3, #0]
   d6844:	9301      	str	r3, [sp, #4]
   d6846:	bd08      	pop	{r3, pc}
   d6848:	00030230 	.word	0x00030230

000d684c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d684c:	b508      	push	{r3, lr}
   d684e:	4b02      	ldr	r3, [pc, #8]	; (d6858 <HAL_SPI_Set_Bit_Order+0xc>)
   d6850:	681b      	ldr	r3, [r3, #0]
   d6852:	689b      	ldr	r3, [r3, #8]
   d6854:	9301      	str	r3, [sp, #4]
   d6856:	bd08      	pop	{r3, pc}
   d6858:	00030230 	.word	0x00030230

000d685c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d685c:	b508      	push	{r3, lr}
   d685e:	4b02      	ldr	r3, [pc, #8]	; (d6868 <HAL_SPI_Set_Data_Mode+0xc>)
   d6860:	681b      	ldr	r3, [r3, #0]
   d6862:	68db      	ldr	r3, [r3, #12]
   d6864:	9301      	str	r3, [sp, #4]
   d6866:	bd08      	pop	{r3, pc}
   d6868:	00030230 	.word	0x00030230

000d686c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d686c:	b508      	push	{r3, lr}
   d686e:	4b02      	ldr	r3, [pc, #8]	; (d6878 <HAL_SPI_Set_Clock_Divider+0xc>)
   d6870:	681b      	ldr	r3, [r3, #0]
   d6872:	691b      	ldr	r3, [r3, #16]
   d6874:	9301      	str	r3, [sp, #4]
   d6876:	bd08      	pop	{r3, pc}
   d6878:	00030230 	.word	0x00030230

000d687c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d687c:	b508      	push	{r3, lr}
   d687e:	4b02      	ldr	r3, [pc, #8]	; (d6888 <HAL_SPI_Send_Receive_Data+0xc>)
   d6880:	681b      	ldr	r3, [r3, #0]
   d6882:	695b      	ldr	r3, [r3, #20]
   d6884:	9301      	str	r3, [sp, #4]
   d6886:	bd08      	pop	{r3, pc}
   d6888:	00030230 	.word	0x00030230

000d688c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d688c:	b508      	push	{r3, lr}
   d688e:	4b02      	ldr	r3, [pc, #8]	; (d6898 <HAL_SPI_Init+0xc>)
   d6890:	681b      	ldr	r3, [r3, #0]
   d6892:	69db      	ldr	r3, [r3, #28]
   d6894:	9301      	str	r3, [sp, #4]
   d6896:	bd08      	pop	{r3, pc}
   d6898:	00030230 	.word	0x00030230

000d689c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d689c:	b508      	push	{r3, lr}
   d689e:	4b02      	ldr	r3, [pc, #8]	; (d68a8 <HAL_SPI_Is_Enabled+0xc>)
   d68a0:	681b      	ldr	r3, [r3, #0]
   d68a2:	6a1b      	ldr	r3, [r3, #32]
   d68a4:	9301      	str	r3, [sp, #4]
   d68a6:	bd08      	pop	{r3, pc}
   d68a8:	00030230 	.word	0x00030230

000d68ac <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d68ac:	b508      	push	{r3, lr}
   d68ae:	4b02      	ldr	r3, [pc, #8]	; (d68b8 <HAL_SPI_Info+0xc>)
   d68b0:	681b      	ldr	r3, [r3, #0]
   d68b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d68b4:	9301      	str	r3, [sp, #4]
   d68b6:	bd08      	pop	{r3, pc}
   d68b8:	00030230 	.word	0x00030230

000d68bc <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d68bc:	b508      	push	{r3, lr}
   d68be:	4b02      	ldr	r3, [pc, #8]	; (d68c8 <HAL_SPI_DMA_Transfer+0xc>)
   d68c0:	681b      	ldr	r3, [r3, #0]
   d68c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d68c4:	9301      	str	r3, [sp, #4]
   d68c6:	bd08      	pop	{r3, pc}
   d68c8:	00030230 	.word	0x00030230

000d68cc <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d68cc:	b508      	push	{r3, lr}
   d68ce:	4b02      	ldr	r3, [pc, #8]	; (d68d8 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d68d0:	681b      	ldr	r3, [r3, #0]
   d68d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d68d4:	9301      	str	r3, [sp, #4]
   d68d6:	bd08      	pop	{r3, pc}
   d68d8:	00030230 	.word	0x00030230

000d68dc <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d68dc:	b508      	push	{r3, lr}
   d68de:	4b02      	ldr	r3, [pc, #8]	; (d68e8 <HAL_SPI_Set_Settings+0xc>)
   d68e0:	681b      	ldr	r3, [r3, #0]
   d68e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d68e4:	9301      	str	r3, [sp, #4]
   d68e6:	bd08      	pop	{r3, pc}
   d68e8:	00030230 	.word	0x00030230

000d68ec <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d68ec:	b508      	push	{r3, lr}
   d68ee:	4b02      	ldr	r3, [pc, #8]	; (d68f8 <HAL_SPI_Acquire+0xc>)
   d68f0:	681b      	ldr	r3, [r3, #0]
   d68f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d68f4:	9301      	str	r3, [sp, #4]
   d68f6:	bd08      	pop	{r3, pc}
   d68f8:	00030230 	.word	0x00030230

000d68fc <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d68fc:	b508      	push	{r3, lr}
   d68fe:	4b02      	ldr	r3, [pc, #8]	; (d6908 <HAL_SPI_Release+0xc>)
   d6900:	681b      	ldr	r3, [r3, #0]
   d6902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6904:	9301      	str	r3, [sp, #4]
   d6906:	bd08      	pop	{r3, pc}
   d6908:	00030230 	.word	0x00030230

000d690c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d690c:	b508      	push	{r3, lr}
   d690e:	4b02      	ldr	r3, [pc, #8]	; (d6918 <if_index_to_name+0xc>)
   d6910:	681b      	ldr	r3, [r3, #0]
   d6912:	695b      	ldr	r3, [r3, #20]
   d6914:	9301      	str	r3, [sp, #4]
   d6916:	bd08      	pop	{r3, pc}
   d6918:	0003026c 	.word	0x0003026c

000d691c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d691c:	b508      	push	{r3, lr}
   d691e:	4b02      	ldr	r3, [pc, #8]	; (d6928 <HAL_RNG_GetRandomNumber+0xc>)
   d6920:	681b      	ldr	r3, [r3, #0]
   d6922:	685b      	ldr	r3, [r3, #4]
   d6924:	9301      	str	r3, [sp, #4]
   d6926:	bd08      	pop	{r3, pc}
   d6928:	00030218 	.word	0x00030218

000d692c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d692c:	b508      	push	{r3, lr}
   d692e:	4b02      	ldr	r3, [pc, #8]	; (d6938 <HAL_Delay_Microseconds+0xc>)
   d6930:	681b      	ldr	r3, [r3, #0]
   d6932:	68db      	ldr	r3, [r3, #12]
   d6934:	9301      	str	r3, [sp, #4]
   d6936:	bd08      	pop	{r3, pc}
   d6938:	00030218 	.word	0x00030218

000d693c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d693c:	b508      	push	{r3, lr}
   d693e:	4b02      	ldr	r3, [pc, #8]	; (d6948 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6940:	681b      	ldr	r3, [r3, #0]
   d6942:	691b      	ldr	r3, [r3, #16]
   d6944:	9301      	str	r3, [sp, #4]
   d6946:	bd08      	pop	{r3, pc}
   d6948:	00030218 	.word	0x00030218

000d694c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d694c:	b508      	push	{r3, lr}
   d694e:	4b02      	ldr	r3, [pc, #8]	; (d6958 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6950:	681b      	ldr	r3, [r3, #0]
   d6952:	695b      	ldr	r3, [r3, #20]
   d6954:	9301      	str	r3, [sp, #4]
   d6956:	bd08      	pop	{r3, pc}
   d6958:	00030218 	.word	0x00030218

000d695c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d695c:	b508      	push	{r3, lr}
   d695e:	4b02      	ldr	r3, [pc, #8]	; (d6968 <os_thread_is_current+0xc>)
   d6960:	681b      	ldr	r3, [r3, #0]
   d6962:	689b      	ldr	r3, [r3, #8]
   d6964:	9301      	str	r3, [sp, #4]
   d6966:	bd08      	pop	{r3, pc}
   d6968:	00030248 	.word	0x00030248

000d696c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d696c:	b508      	push	{r3, lr}
   d696e:	4b02      	ldr	r3, [pc, #8]	; (d6978 <os_thread_join+0xc>)
   d6970:	681b      	ldr	r3, [r3, #0]
   d6972:	691b      	ldr	r3, [r3, #16]
   d6974:	9301      	str	r3, [sp, #4]
   d6976:	bd08      	pop	{r3, pc}
   d6978:	00030248 	.word	0x00030248

000d697c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d697c:	b508      	push	{r3, lr}
   d697e:	4b02      	ldr	r3, [pc, #8]	; (d6988 <os_thread_cleanup+0xc>)
   d6980:	681b      	ldr	r3, [r3, #0]
   d6982:	695b      	ldr	r3, [r3, #20]
   d6984:	9301      	str	r3, [sp, #4]
   d6986:	bd08      	pop	{r3, pc}
   d6988:	00030248 	.word	0x00030248

000d698c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d698c:	b508      	push	{r3, lr}
   d698e:	4b02      	ldr	r3, [pc, #8]	; (d6998 <os_mutex_recursive_create+0xc>)
   d6990:	681b      	ldr	r3, [r3, #0]
   d6992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6994:	9301      	str	r3, [sp, #4]
   d6996:	bd08      	pop	{r3, pc}
   d6998:	00030248 	.word	0x00030248

000d699c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d699c:	b508      	push	{r3, lr}
   d699e:	4b02      	ldr	r3, [pc, #8]	; (d69a8 <os_mutex_recursive_destroy+0xc>)
   d69a0:	681b      	ldr	r3, [r3, #0]
   d69a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d69a4:	9301      	str	r3, [sp, #4]
   d69a6:	bd08      	pop	{r3, pc}
   d69a8:	00030248 	.word	0x00030248

000d69ac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d69ac:	b508      	push	{r3, lr}
   d69ae:	4b02      	ldr	r3, [pc, #8]	; (d69b8 <inet_inet_ntop+0xc>)
   d69b0:	681b      	ldr	r3, [r3, #0]
   d69b2:	695b      	ldr	r3, [r3, #20]
   d69b4:	9301      	str	r3, [sp, #4]
   d69b6:	bd08      	pop	{r3, pc}
   d69b8:	00030264 	.word	0x00030264

000d69bc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d69bc:	b508      	push	{r3, lr}
   d69be:	4b02      	ldr	r3, [pc, #8]	; (d69c8 <inet_htonl+0xc>)
   d69c0:	681b      	ldr	r3, [r3, #0]
   d69c2:	6a1b      	ldr	r3, [r3, #32]
   d69c4:	9301      	str	r3, [sp, #4]
   d69c6:	bd08      	pop	{r3, pc}
   d69c8:	00030264 	.word	0x00030264

000d69cc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d69cc:	b508      	push	{r3, lr}
   d69ce:	4b02      	ldr	r3, [pc, #8]	; (d69d8 <inet_htons+0xc>)
   d69d0:	681b      	ldr	r3, [r3, #0]
   d69d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d69d4:	9301      	str	r3, [sp, #4]
   d69d6:	bd08      	pop	{r3, pc}
   d69d8:	00030264 	.word	0x00030264

000d69dc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d69dc:	b508      	push	{r3, lr}
   d69de:	4b02      	ldr	r3, [pc, #8]	; (d69e8 <HAL_USART_Init+0xc>)
   d69e0:	681b      	ldr	r3, [r3, #0]
   d69e2:	681b      	ldr	r3, [r3, #0]
   d69e4:	9301      	str	r3, [sp, #4]
   d69e6:	bd08      	pop	{r3, pc}
   d69e8:	0003023c 	.word	0x0003023c

000d69ec <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d69ec:	b508      	push	{r3, lr}
   d69ee:	4b02      	ldr	r3, [pc, #8]	; (d69f8 <HAL_USART_Write_Data+0xc>)
   d69f0:	681b      	ldr	r3, [r3, #0]
   d69f2:	68db      	ldr	r3, [r3, #12]
   d69f4:	9301      	str	r3, [sp, #4]
   d69f6:	bd08      	pop	{r3, pc}
   d69f8:	0003023c 	.word	0x0003023c

000d69fc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d69fc:	b508      	push	{r3, lr}
   d69fe:	4b02      	ldr	r3, [pc, #8]	; (d6a08 <HAL_USART_Available_Data+0xc>)
   d6a00:	681b      	ldr	r3, [r3, #0]
   d6a02:	691b      	ldr	r3, [r3, #16]
   d6a04:	9301      	str	r3, [sp, #4]
   d6a06:	bd08      	pop	{r3, pc}
   d6a08:	0003023c 	.word	0x0003023c

000d6a0c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6a0c:	b508      	push	{r3, lr}
   d6a0e:	4b02      	ldr	r3, [pc, #8]	; (d6a18 <HAL_USART_Read_Data+0xc>)
   d6a10:	681b      	ldr	r3, [r3, #0]
   d6a12:	695b      	ldr	r3, [r3, #20]
   d6a14:	9301      	str	r3, [sp, #4]
   d6a16:	bd08      	pop	{r3, pc}
   d6a18:	0003023c 	.word	0x0003023c

000d6a1c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6a1c:	b508      	push	{r3, lr}
   d6a1e:	4b02      	ldr	r3, [pc, #8]	; (d6a28 <HAL_USART_Peek_Data+0xc>)
   d6a20:	681b      	ldr	r3, [r3, #0]
   d6a22:	699b      	ldr	r3, [r3, #24]
   d6a24:	9301      	str	r3, [sp, #4]
   d6a26:	bd08      	pop	{r3, pc}
   d6a28:	0003023c 	.word	0x0003023c

000d6a2c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6a2c:	b508      	push	{r3, lr}
   d6a2e:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <HAL_USART_Flush_Data+0xc>)
   d6a30:	681b      	ldr	r3, [r3, #0]
   d6a32:	69db      	ldr	r3, [r3, #28]
   d6a34:	9301      	str	r3, [sp, #4]
   d6a36:	bd08      	pop	{r3, pc}
   d6a38:	0003023c 	.word	0x0003023c

000d6a3c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6a3c:	b508      	push	{r3, lr}
   d6a3e:	4b02      	ldr	r3, [pc, #8]	; (d6a48 <HAL_USART_Is_Enabled+0xc>)
   d6a40:	681b      	ldr	r3, [r3, #0]
   d6a42:	6a1b      	ldr	r3, [r3, #32]
   d6a44:	9301      	str	r3, [sp, #4]
   d6a46:	bd08      	pop	{r3, pc}
   d6a48:	0003023c 	.word	0x0003023c

000d6a4c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6a4c:	b508      	push	{r3, lr}
   d6a4e:	4b02      	ldr	r3, [pc, #8]	; (d6a58 <HAL_USART_Available_Data_For_Write+0xc>)
   d6a50:	681b      	ldr	r3, [r3, #0]
   d6a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6a54:	9301      	str	r3, [sp, #4]
   d6a56:	bd08      	pop	{r3, pc}
   d6a58:	0003023c 	.word	0x0003023c

000d6a5c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d6a5c:	b508      	push	{r3, lr}
   d6a5e:	4b02      	ldr	r3, [pc, #8]	; (d6a68 <HAL_USART_BeginConfig+0xc>)
   d6a60:	681b      	ldr	r3, [r3, #0]
   d6a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6a64:	9301      	str	r3, [sp, #4]
   d6a66:	bd08      	pop	{r3, pc}
   d6a68:	0003023c 	.word	0x0003023c

000d6a6c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6a6c:	b508      	push	{r3, lr}
   d6a6e:	4b02      	ldr	r3, [pc, #8]	; (d6a78 <HAL_I2C_Begin+0xc>)
   d6a70:	681b      	ldr	r3, [r3, #0]
   d6a72:	68db      	ldr	r3, [r3, #12]
   d6a74:	9301      	str	r3, [sp, #4]
   d6a76:	bd08      	pop	{r3, pc}
   d6a78:	00030228 	.word	0x00030228

000d6a7c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6a7c:	b508      	push	{r3, lr}
   d6a7e:	4b02      	ldr	r3, [pc, #8]	; (d6a88 <HAL_I2C_Begin_Transmission+0xc>)
   d6a80:	681b      	ldr	r3, [r3, #0]
   d6a82:	699b      	ldr	r3, [r3, #24]
   d6a84:	9301      	str	r3, [sp, #4]
   d6a86:	bd08      	pop	{r3, pc}
   d6a88:	00030228 	.word	0x00030228

000d6a8c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6a8c:	b508      	push	{r3, lr}
   d6a8e:	4b02      	ldr	r3, [pc, #8]	; (d6a98 <HAL_I2C_End_Transmission+0xc>)
   d6a90:	681b      	ldr	r3, [r3, #0]
   d6a92:	69db      	ldr	r3, [r3, #28]
   d6a94:	9301      	str	r3, [sp, #4]
   d6a96:	bd08      	pop	{r3, pc}
   d6a98:	00030228 	.word	0x00030228

000d6a9c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6a9c:	b508      	push	{r3, lr}
   d6a9e:	4b02      	ldr	r3, [pc, #8]	; (d6aa8 <HAL_I2C_Write_Data+0xc>)
   d6aa0:	681b      	ldr	r3, [r3, #0]
   d6aa2:	6a1b      	ldr	r3, [r3, #32]
   d6aa4:	9301      	str	r3, [sp, #4]
   d6aa6:	bd08      	pop	{r3, pc}
   d6aa8:	00030228 	.word	0x00030228

000d6aac <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6aac:	b508      	push	{r3, lr}
   d6aae:	4b02      	ldr	r3, [pc, #8]	; (d6ab8 <HAL_I2C_Available_Data+0xc>)
   d6ab0:	681b      	ldr	r3, [r3, #0]
   d6ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ab4:	9301      	str	r3, [sp, #4]
   d6ab6:	bd08      	pop	{r3, pc}
   d6ab8:	00030228 	.word	0x00030228

000d6abc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6abc:	b508      	push	{r3, lr}
   d6abe:	4b02      	ldr	r3, [pc, #8]	; (d6ac8 <HAL_I2C_Read_Data+0xc>)
   d6ac0:	681b      	ldr	r3, [r3, #0]
   d6ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ac4:	9301      	str	r3, [sp, #4]
   d6ac6:	bd08      	pop	{r3, pc}
   d6ac8:	00030228 	.word	0x00030228

000d6acc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6acc:	b508      	push	{r3, lr}
   d6ace:	4b02      	ldr	r3, [pc, #8]	; (d6ad8 <HAL_I2C_Peek_Data+0xc>)
   d6ad0:	681b      	ldr	r3, [r3, #0]
   d6ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ad4:	9301      	str	r3, [sp, #4]
   d6ad6:	bd08      	pop	{r3, pc}
   d6ad8:	00030228 	.word	0x00030228

000d6adc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6adc:	b508      	push	{r3, lr}
   d6ade:	4b02      	ldr	r3, [pc, #8]	; (d6ae8 <HAL_I2C_Flush_Data+0xc>)
   d6ae0:	681b      	ldr	r3, [r3, #0]
   d6ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ae4:	9301      	str	r3, [sp, #4]
   d6ae6:	bd08      	pop	{r3, pc}
   d6ae8:	00030228 	.word	0x00030228

000d6aec <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6aec:	b508      	push	{r3, lr}
   d6aee:	4b02      	ldr	r3, [pc, #8]	; (d6af8 <HAL_I2C_Is_Enabled+0xc>)
   d6af0:	681b      	ldr	r3, [r3, #0]
   d6af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6af4:	9301      	str	r3, [sp, #4]
   d6af6:	bd08      	pop	{r3, pc}
   d6af8:	00030228 	.word	0x00030228

000d6afc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6afc:	b508      	push	{r3, lr}
   d6afe:	4b02      	ldr	r3, [pc, #8]	; (d6b08 <HAL_I2C_Init+0xc>)
   d6b00:	681b      	ldr	r3, [r3, #0]
   d6b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6b04:	9301      	str	r3, [sp, #4]
   d6b06:	bd08      	pop	{r3, pc}
   d6b08:	00030228 	.word	0x00030228

000d6b0c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6b0c:	b508      	push	{r3, lr}
   d6b0e:	4b02      	ldr	r3, [pc, #8]	; (d6b18 <HAL_I2C_Request_Data_Ex+0xc>)
   d6b10:	681b      	ldr	r3, [r3, #0]
   d6b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6b14:	9301      	str	r3, [sp, #4]
   d6b16:	bd08      	pop	{r3, pc}
   d6b18:	00030228 	.word	0x00030228

000d6b1c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6b1c:	b508      	push	{r3, lr}
   d6b1e:	4b02      	ldr	r3, [pc, #8]	; (d6b28 <sock_setsockopt+0xc>)
   d6b20:	681b      	ldr	r3, [r3, #0]
   d6b22:	699b      	ldr	r3, [r3, #24]
   d6b24:	9301      	str	r3, [sp, #4]
   d6b26:	bd08      	pop	{r3, pc}
   d6b28:	00030238 	.word	0x00030238

000d6b2c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6b2c:	b508      	push	{r3, lr}
   d6b2e:	4b02      	ldr	r3, [pc, #8]	; (d6b38 <sock_close+0xc>)
   d6b30:	681b      	ldr	r3, [r3, #0]
   d6b32:	69db      	ldr	r3, [r3, #28]
   d6b34:	9301      	str	r3, [sp, #4]
   d6b36:	bd08      	pop	{r3, pc}
   d6b38:	00030238 	.word	0x00030238

000d6b3c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6b3c:	b508      	push	{r3, lr}
   d6b3e:	4b02      	ldr	r3, [pc, #8]	; (d6b48 <sock_connect+0xc>)
   d6b40:	681b      	ldr	r3, [r3, #0]
   d6b42:	6a1b      	ldr	r3, [r3, #32]
   d6b44:	9301      	str	r3, [sp, #4]
   d6b46:	bd08      	pop	{r3, pc}
   d6b48:	00030238 	.word	0x00030238

000d6b4c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6b4c:	b508      	push	{r3, lr}
   d6b4e:	4b02      	ldr	r3, [pc, #8]	; (d6b58 <sock_recv+0xc>)
   d6b50:	681b      	ldr	r3, [r3, #0]
   d6b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b54:	9301      	str	r3, [sp, #4]
   d6b56:	bd08      	pop	{r3, pc}
   d6b58:	00030238 	.word	0x00030238

000d6b5c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6b5c:	b508      	push	{r3, lr}
   d6b5e:	4b02      	ldr	r3, [pc, #8]	; (d6b68 <sock_send+0xc>)
   d6b60:	681b      	ldr	r3, [r3, #0]
   d6b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6b64:	9301      	str	r3, [sp, #4]
   d6b66:	bd08      	pop	{r3, pc}
   d6b68:	00030238 	.word	0x00030238

000d6b6c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6b6c:	b508      	push	{r3, lr}
   d6b6e:	4b02      	ldr	r3, [pc, #8]	; (d6b78 <sock_socket+0xc>)
   d6b70:	681b      	ldr	r3, [r3, #0]
   d6b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6b74:	9301      	str	r3, [sp, #4]
   d6b76:	bd08      	pop	{r3, pc}
   d6b78:	00030238 	.word	0x00030238

000d6b7c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6b7c:	b508      	push	{r3, lr}
   d6b7e:	4b02      	ldr	r3, [pc, #8]	; (d6b88 <HAL_USB_USART_Init+0xc>)
   d6b80:	681b      	ldr	r3, [r3, #0]
   d6b82:	681b      	ldr	r3, [r3, #0]
   d6b84:	9301      	str	r3, [sp, #4]
   d6b86:	bd08      	pop	{r3, pc}
   d6b88:	0003024c 	.word	0x0003024c

000d6b8c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6b8c:	b508      	push	{r3, lr}
   d6b8e:	4b02      	ldr	r3, [pc, #8]	; (d6b98 <HAL_USB_USART_Begin+0xc>)
   d6b90:	681b      	ldr	r3, [r3, #0]
   d6b92:	685b      	ldr	r3, [r3, #4]
   d6b94:	9301      	str	r3, [sp, #4]
   d6b96:	bd08      	pop	{r3, pc}
   d6b98:	0003024c 	.word	0x0003024c

000d6b9c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6b9c:	b508      	push	{r3, lr}
   d6b9e:	4b02      	ldr	r3, [pc, #8]	; (d6ba8 <HAL_USB_USART_Available_Data+0xc>)
   d6ba0:	681b      	ldr	r3, [r3, #0]
   d6ba2:	691b      	ldr	r3, [r3, #16]
   d6ba4:	9301      	str	r3, [sp, #4]
   d6ba6:	bd08      	pop	{r3, pc}
   d6ba8:	0003024c 	.word	0x0003024c

000d6bac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6bac:	b508      	push	{r3, lr}
   d6bae:	4b02      	ldr	r3, [pc, #8]	; (d6bb8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6bb0:	681b      	ldr	r3, [r3, #0]
   d6bb2:	695b      	ldr	r3, [r3, #20]
   d6bb4:	9301      	str	r3, [sp, #4]
   d6bb6:	bd08      	pop	{r3, pc}
   d6bb8:	0003024c 	.word	0x0003024c

000d6bbc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6bbc:	b508      	push	{r3, lr}
   d6bbe:	4b02      	ldr	r3, [pc, #8]	; (d6bc8 <HAL_USB_USART_Receive_Data+0xc>)
   d6bc0:	681b      	ldr	r3, [r3, #0]
   d6bc2:	699b      	ldr	r3, [r3, #24]
   d6bc4:	9301      	str	r3, [sp, #4]
   d6bc6:	bd08      	pop	{r3, pc}
   d6bc8:	0003024c 	.word	0x0003024c

000d6bcc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6bcc:	b508      	push	{r3, lr}
   d6bce:	4b02      	ldr	r3, [pc, #8]	; (d6bd8 <HAL_USB_USART_Send_Data+0xc>)
   d6bd0:	681b      	ldr	r3, [r3, #0]
   d6bd2:	69db      	ldr	r3, [r3, #28]
   d6bd4:	9301      	str	r3, [sp, #4]
   d6bd6:	bd08      	pop	{r3, pc}
   d6bd8:	0003024c 	.word	0x0003024c

000d6bdc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6bdc:	b508      	push	{r3, lr}
   d6bde:	4b02      	ldr	r3, [pc, #8]	; (d6be8 <HAL_USB_USART_Flush_Data+0xc>)
   d6be0:	681b      	ldr	r3, [r3, #0]
   d6be2:	6a1b      	ldr	r3, [r3, #32]
   d6be4:	9301      	str	r3, [sp, #4]
   d6be6:	bd08      	pop	{r3, pc}
   d6be8:	0003024c 	.word	0x0003024c

000d6bec <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6bec:	b508      	push	{r3, lr}
   d6bee:	4b02      	ldr	r3, [pc, #8]	; (d6bf8 <panic_+0xc>)
   d6bf0:	681b      	ldr	r3, [r3, #0]
   d6bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6bf4:	9301      	str	r3, [sp, #4]
   d6bf6:	bd08      	pop	{r3, pc}
   d6bf8:	00030260 	.word	0x00030260

000d6bfc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6bfc:	b508      	push	{r3, lr}
   d6bfe:	4b02      	ldr	r3, [pc, #8]	; (d6c08 <log_message+0xc>)
   d6c00:	681b      	ldr	r3, [r3, #0]
   d6c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6c04:	9301      	str	r3, [sp, #4]
   d6c06:	bd08      	pop	{r3, pc}
   d6c08:	00030260 	.word	0x00030260

000d6c0c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6c0c:	b508      	push	{r3, lr}
   d6c0e:	4b02      	ldr	r3, [pc, #8]	; (d6c18 <set_system_mode+0xc>)
   d6c10:	681b      	ldr	r3, [r3, #0]
   d6c12:	685b      	ldr	r3, [r3, #4]
   d6c14:	9301      	str	r3, [sp, #4]
   d6c16:	bd08      	pop	{r3, pc}
   d6c18:	00030220 	.word	0x00030220

000d6c1c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6c1c:	b508      	push	{r3, lr}
   d6c1e:	4b02      	ldr	r3, [pc, #8]	; (d6c28 <system_delay_ms+0xc>)
   d6c20:	681b      	ldr	r3, [r3, #0]
   d6c22:	695b      	ldr	r3, [r3, #20]
   d6c24:	9301      	str	r3, [sp, #4]
   d6c26:	bd08      	pop	{r3, pc}
   d6c28:	00030220 	.word	0x00030220

000d6c2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6c2c:	b508      	push	{r3, lr}
   d6c2e:	4b03      	ldr	r3, [pc, #12]	; (d6c3c <system_ctrl_set_app_request_handler+0x10>)
   d6c30:	681b      	ldr	r3, [r3, #0]
   d6c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6c36:	9301      	str	r3, [sp, #4]
   d6c38:	bd08      	pop	{r3, pc}
   d6c3a:	0000      	.short	0x0000
   d6c3c:	00030220 	.word	0x00030220

000d6c40 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b03      	ldr	r3, [pc, #12]	; (d6c50 <system_ctrl_set_result+0x10>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6c4a:	9301      	str	r3, [sp, #4]
   d6c4c:	bd08      	pop	{r3, pc}
   d6c4e:	0000      	.short	0x0000
   d6c50:	00030220 	.word	0x00030220

000d6c54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6c54:	b508      	push	{r3, lr}
   d6c56:	4b02      	ldr	r3, [pc, #8]	; (d6c60 <network_connect+0xc>)
   d6c58:	681b      	ldr	r3, [r3, #0]
   d6c5a:	685b      	ldr	r3, [r3, #4]
   d6c5c:	9301      	str	r3, [sp, #4]
   d6c5e:	bd08      	pop	{r3, pc}
   d6c60:	00030240 	.word	0x00030240

000d6c64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6c64:	b508      	push	{r3, lr}
   d6c66:	4b02      	ldr	r3, [pc, #8]	; (d6c70 <network_connecting+0xc>)
   d6c68:	681b      	ldr	r3, [r3, #0]
   d6c6a:	689b      	ldr	r3, [r3, #8]
   d6c6c:	9301      	str	r3, [sp, #4]
   d6c6e:	bd08      	pop	{r3, pc}
   d6c70:	00030240 	.word	0x00030240

000d6c74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6c74:	b508      	push	{r3, lr}
   d6c76:	4b02      	ldr	r3, [pc, #8]	; (d6c80 <network_disconnect+0xc>)
   d6c78:	681b      	ldr	r3, [r3, #0]
   d6c7a:	68db      	ldr	r3, [r3, #12]
   d6c7c:	9301      	str	r3, [sp, #4]
   d6c7e:	bd08      	pop	{r3, pc}
   d6c80:	00030240 	.word	0x00030240

000d6c84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6c84:	b508      	push	{r3, lr}
   d6c86:	4b02      	ldr	r3, [pc, #8]	; (d6c90 <network_ready+0xc>)
   d6c88:	681b      	ldr	r3, [r3, #0]
   d6c8a:	691b      	ldr	r3, [r3, #16]
   d6c8c:	9301      	str	r3, [sp, #4]
   d6c8e:	bd08      	pop	{r3, pc}
   d6c90:	00030240 	.word	0x00030240

000d6c94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6c94:	b508      	push	{r3, lr}
   d6c96:	4b02      	ldr	r3, [pc, #8]	; (d6ca0 <network_on+0xc>)
   d6c98:	681b      	ldr	r3, [r3, #0]
   d6c9a:	695b      	ldr	r3, [r3, #20]
   d6c9c:	9301      	str	r3, [sp, #4]
   d6c9e:	bd08      	pop	{r3, pc}
   d6ca0:	00030240 	.word	0x00030240

000d6ca4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6ca4:	b508      	push	{r3, lr}
   d6ca6:	4b02      	ldr	r3, [pc, #8]	; (d6cb0 <network_off+0xc>)
   d6ca8:	681b      	ldr	r3, [r3, #0]
   d6caa:	699b      	ldr	r3, [r3, #24]
   d6cac:	9301      	str	r3, [sp, #4]
   d6cae:	bd08      	pop	{r3, pc}
   d6cb0:	00030240 	.word	0x00030240

000d6cb4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6cb4:	b508      	push	{r3, lr}
   d6cb6:	4b02      	ldr	r3, [pc, #8]	; (d6cc0 <network_listen+0xc>)
   d6cb8:	681b      	ldr	r3, [r3, #0]
   d6cba:	69db      	ldr	r3, [r3, #28]
   d6cbc:	9301      	str	r3, [sp, #4]
   d6cbe:	bd08      	pop	{r3, pc}
   d6cc0:	00030240 	.word	0x00030240

000d6cc4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6cc4:	b508      	push	{r3, lr}
   d6cc6:	4b02      	ldr	r3, [pc, #8]	; (d6cd0 <network_listening+0xc>)
   d6cc8:	681b      	ldr	r3, [r3, #0]
   d6cca:	6a1b      	ldr	r3, [r3, #32]
   d6ccc:	9301      	str	r3, [sp, #4]
   d6cce:	bd08      	pop	{r3, pc}
   d6cd0:	00030240 	.word	0x00030240

000d6cd4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6cd4:	b508      	push	{r3, lr}
   d6cd6:	4b02      	ldr	r3, [pc, #8]	; (d6ce0 <network_set_listen_timeout+0xc>)
   d6cd8:	681b      	ldr	r3, [r3, #0]
   d6cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6cdc:	9301      	str	r3, [sp, #4]
   d6cde:	bd08      	pop	{r3, pc}
   d6ce0:	00030240 	.word	0x00030240

000d6ce4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6ce4:	b508      	push	{r3, lr}
   d6ce6:	4b02      	ldr	r3, [pc, #8]	; (d6cf0 <network_get_listen_timeout+0xc>)
   d6ce8:	681b      	ldr	r3, [r3, #0]
   d6cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6cec:	9301      	str	r3, [sp, #4]
   d6cee:	bd08      	pop	{r3, pc}
   d6cf0:	00030240 	.word	0x00030240

000d6cf4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6cf4:	b508      	push	{r3, lr}
   d6cf6:	4b02      	ldr	r3, [pc, #8]	; (d6d00 <spark_process+0xc>)
   d6cf8:	681b      	ldr	r3, [r3, #0]
   d6cfa:	689b      	ldr	r3, [r3, #8]
   d6cfc:	9301      	str	r3, [sp, #4]
   d6cfe:	bd08      	pop	{r3, pc}
   d6d00:	00030244 	.word	0x00030244

000d6d04 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6d04:	b508      	push	{r3, lr}
   d6d06:	4b02      	ldr	r3, [pc, #8]	; (d6d10 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6d08:	681b      	ldr	r3, [r3, #0]
   d6d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6d0c:	9301      	str	r3, [sp, #4]
   d6d0e:	bd08      	pop	{r3, pc}
   d6d10:	00030244 	.word	0x00030244

000d6d14 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6d14:	b508      	push	{r3, lr}
   d6d16:	4b02      	ldr	r3, [pc, #8]	; (d6d20 <malloc+0xc>)
   d6d18:	681b      	ldr	r3, [r3, #0]
   d6d1a:	681b      	ldr	r3, [r3, #0]
   d6d1c:	9301      	str	r3, [sp, #4]
   d6d1e:	bd08      	pop	{r3, pc}
   d6d20:	0003021c 	.word	0x0003021c

000d6d24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6d24:	b508      	push	{r3, lr}
   d6d26:	4b02      	ldr	r3, [pc, #8]	; (d6d30 <free+0xc>)
   d6d28:	681b      	ldr	r3, [r3, #0]
   d6d2a:	685b      	ldr	r3, [r3, #4]
   d6d2c:	9301      	str	r3, [sp, #4]
   d6d2e:	bd08      	pop	{r3, pc}
   d6d30:	0003021c 	.word	0x0003021c

000d6d34 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6d34:	b508      	push	{r3, lr}
   d6d36:	4b02      	ldr	r3, [pc, #8]	; (d6d40 <vsnprintf+0xc>)
   d6d38:	681b      	ldr	r3, [r3, #0]
   d6d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d3c:	9301      	str	r3, [sp, #4]
   d6d3e:	bd08      	pop	{r3, pc}
   d6d40:	0003021c 	.word	0x0003021c

000d6d44 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6d44:	b508      	push	{r3, lr}
   d6d46:	4b02      	ldr	r3, [pc, #8]	; (d6d50 <__errno+0xc>)
   d6d48:	681b      	ldr	r3, [r3, #0]
   d6d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6d4c:	9301      	str	r3, [sp, #4]
   d6d4e:	bd08      	pop	{r3, pc}
   d6d50:	0003021c 	.word	0x0003021c

000d6d54 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6d54:	2200      	movs	r2, #0
   d6d56:	4611      	mov	r1, r2
   d6d58:	6840      	ldr	r0, [r0, #4]
   d6d5a:	f7ff bfb3 	b.w	d6cc4 <network_listening>

000d6d5e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6d5e:	2200      	movs	r2, #0
   d6d60:	4611      	mov	r1, r2
   d6d62:	6840      	ldr	r0, [r0, #4]
   d6d64:	f7ff bfbe 	b.w	d6ce4 <network_get_listen_timeout>

000d6d68 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6d68:	2200      	movs	r2, #0
   d6d6a:	6840      	ldr	r0, [r0, #4]
   d6d6c:	f7ff bfb2 	b.w	d6cd4 <network_set_listen_timeout>

000d6d70 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6d70:	2200      	movs	r2, #0
   d6d72:	f081 0101 	eor.w	r1, r1, #1
   d6d76:	6840      	ldr	r0, [r0, #4]
   d6d78:	f7ff bf9c 	b.w	d6cb4 <network_listen>

000d6d7c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6d7c:	2300      	movs	r3, #0
   d6d7e:	461a      	mov	r2, r3
   d6d80:	4619      	mov	r1, r3
   d6d82:	6840      	ldr	r0, [r0, #4]
   d6d84:	f7ff bf8e 	b.w	d6ca4 <network_off>

000d6d88 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6d88:	2300      	movs	r3, #0
   d6d8a:	461a      	mov	r2, r3
   d6d8c:	4619      	mov	r1, r3
   d6d8e:	6840      	ldr	r0, [r0, #4]
   d6d90:	f7ff bf80 	b.w	d6c94 <network_on>

000d6d94 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6d94:	2200      	movs	r2, #0
   d6d96:	4611      	mov	r1, r2
   d6d98:	6840      	ldr	r0, [r0, #4]
   d6d9a:	f7ff bf73 	b.w	d6c84 <network_ready>

000d6d9e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6d9e:	2200      	movs	r2, #0
   d6da0:	4611      	mov	r1, r2
   d6da2:	6840      	ldr	r0, [r0, #4]
   d6da4:	f7ff bf5e 	b.w	d6c64 <network_connecting>

000d6da8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6da8:	2200      	movs	r2, #0
   d6daa:	2102      	movs	r1, #2
   d6dac:	6840      	ldr	r0, [r0, #4]
   d6dae:	f7ff bf61 	b.w	d6c74 <network_disconnect>

000d6db2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6db2:	2300      	movs	r3, #0
   d6db4:	461a      	mov	r2, r3
   d6db6:	6840      	ldr	r0, [r0, #4]
   d6db8:	f7ff bf4c 	b.w	d6c54 <network_connect>

000d6dbc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6dbc:	4b02      	ldr	r3, [pc, #8]	; (d6dc8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6dbe:	2203      	movs	r2, #3
   d6dc0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6dc2:	4a02      	ldr	r2, [pc, #8]	; (d6dcc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6dc4:	601a      	str	r2, [r3, #0]
   d6dc6:	4770      	bx	lr
   d6dc8:	2003e3dc 	.word	0x2003e3dc
   d6dcc:	000d909c 	.word	0x000d909c

000d6dd0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6dd0:	2100      	movs	r1, #0
   d6dd2:	f7ff bd8b 	b.w	d68ec <HAL_SPI_Acquire>

000d6dd6 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6dd6:	2100      	movs	r1, #0
   d6dd8:	f7ff bd90 	b.w	d68fc <HAL_SPI_Release>

000d6ddc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6ddc:	b510      	push	{r4, lr}
   d6dde:	4604      	mov	r4, r0
{
    _spi = spi;
   d6de0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6de2:	4608      	mov	r0, r1
   d6de4:	f7ff fd52 	bl	d688c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6de8:	2300      	movs	r3, #0
   d6dea:	6063      	str	r3, [r4, #4]
}
   d6dec:	4620      	mov	r0, r4
   d6dee:	bd10      	pop	{r4, pc}

000d6df0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6df0:	b510      	push	{r4, lr}
   d6df2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6df4:	7800      	ldrb	r0, [r0, #0]
   d6df6:	f7ff ffeb 	bl	d6dd0 <_ZN8SPIClass4lockEv.isra.0>
   d6dfa:	b948      	cbnz	r0, d6e10 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6dfc:	7820      	ldrb	r0, [r4, #0]
   d6dfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6e02:	f7ff fd1b 	bl	d683c <HAL_SPI_Begin>
        unlock();
   d6e06:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6e0c:	f7ff bfe3 	b.w	d6dd6 <_ZN8SPIClass6unlockEv.isra.1>
   d6e10:	bd10      	pop	{r4, pc}

000d6e12 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6e12:	b538      	push	{r3, r4, r5, lr}
   d6e14:	4604      	mov	r4, r0
    if (!lock())
   d6e16:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6e18:	460d      	mov	r5, r1
    if (!lock())
   d6e1a:	f7ff ffd9 	bl	d6dd0 <_ZN8SPIClass4lockEv.isra.0>
   d6e1e:	b940      	cbnz	r0, d6e32 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d6e20:	7820      	ldrb	r0, [r4, #0]
   d6e22:	4629      	mov	r1, r5
   d6e24:	f7ff fd12 	bl	d684c <HAL_SPI_Set_Bit_Order>
        unlock();
   d6e28:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d6e2e:	f7ff bfd2 	b.w	d6dd6 <_ZN8SPIClass6unlockEv.isra.1>
   d6e32:	bd38      	pop	{r3, r4, r5, pc}

000d6e34 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6e34:	b538      	push	{r3, r4, r5, lr}
   d6e36:	4604      	mov	r4, r0
    if (!lock())
   d6e38:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6e3a:	460d      	mov	r5, r1
    if (!lock())
   d6e3c:	f7ff ffc8 	bl	d6dd0 <_ZN8SPIClass4lockEv.isra.0>
   d6e40:	b940      	cbnz	r0, d6e54 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d6e42:	7820      	ldrb	r0, [r4, #0]
   d6e44:	4629      	mov	r1, r5
   d6e46:	f7ff fd09 	bl	d685c <HAL_SPI_Set_Data_Mode>
        unlock();
   d6e4a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d6e50:	f7ff bfc1 	b.w	d6dd6 <_ZN8SPIClass6unlockEv.isra.1>
   d6e54:	bd38      	pop	{r3, r4, r5, pc}

000d6e56 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6e56:	7800      	ldrb	r0, [r0, #0]
   d6e58:	f7ff bfbd 	b.w	d6dd6 <_ZN8SPIClass6unlockEv.isra.1>

000d6e5c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6e5c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6e5e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6e60:	6018      	str	r0, [r3, #0]
   d6e62:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6e64:	6818      	ldr	r0, [r3, #0]
   d6e66:	4288      	cmp	r0, r1
   d6e68:	b2e5      	uxtb	r5, r4
   d6e6a:	d906      	bls.n	d6e7a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6e6c:	3401      	adds	r4, #1
   d6e6e:	2c08      	cmp	r4, #8
   d6e70:	d002      	beq.n	d6e78 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6e72:	0840      	lsrs	r0, r0, #1
   d6e74:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6e76:	e7f5      	b.n	d6e64 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6e78:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6e7c:	5d5b      	ldrb	r3, [r3, r5]
   d6e7e:	7013      	strb	r3, [r2, #0]
   d6e80:	bd30      	pop	{r4, r5, pc}
   d6e82:	bf00      	nop
   d6e84:	000d90c8 	.word	0x000d90c8

000d6e88 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6e8c:	4607      	mov	r7, r0
   d6e8e:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6e90:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6e92:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d6e94:	f7ff ff9c 	bl	d6dd0 <_ZN8SPIClass4lockEv.isra.0>
   d6e98:	2800      	cmp	r0, #0
   d6e9a:	db62      	blt.n	d6f62 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6e9c:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6e9e:	2214      	movs	r2, #20
   d6ea0:	2100      	movs	r1, #0
   d6ea2:	a809      	add	r0, sp, #36	; 0x24
   d6ea4:	f001 fb57 	bl	d8556 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6ea8:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6eaa:	4620      	mov	r0, r4
   d6eac:	2200      	movs	r2, #0
   d6eae:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6eb0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d6eb4:	f7ff fcfa 	bl	d68ac <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6eb8:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6ebc:	b154      	cbz	r4, d6ed4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d6ebe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6ec2:	b935      	cbnz	r5, d6ed2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6ec4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6ec8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6ecc:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6ed0:	e003      	b.n	d6eda <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d6ed2:	2400      	movs	r4, #0
   d6ed4:	46a1      	mov	r9, r4
   d6ed6:	46a0      	mov	r8, r4
   d6ed8:	2501      	movs	r5, #1
   d6eda:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6edc:	b105      	cbz	r5, d6ee0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d6ede:	b9bb      	cbnz	r3, d6f10 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6ee0:	429d      	cmp	r5, r3
   d6ee2:	d10b      	bne.n	d6efc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6ee4:	68b2      	ldr	r2, [r6, #8]
   d6ee6:	4542      	cmp	r2, r8
   d6ee8:	d108      	bne.n	d6efc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6eea:	f88d 9020 	strb.w	r9, [sp, #32]
   d6eee:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6ef2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6ef6:	89b2      	ldrh	r2, [r6, #12]
   d6ef8:	4291      	cmp	r1, r2
   d6efa:	d009      	beq.n	d6f10 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6efc:	b153      	cbz	r3, d6f14 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6efe:	2400      	movs	r4, #0
   d6f00:	7838      	ldrb	r0, [r7, #0]
   d6f02:	9401      	str	r4, [sp, #4]
   d6f04:	9400      	str	r4, [sp, #0]
   d6f06:	4623      	mov	r3, r4
   d6f08:	4622      	mov	r2, r4
   d6f0a:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6f0c:	f7ff fce6 	bl	d68dc <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d6f10:	2000      	movs	r0, #0
   d6f12:	e026      	b.n	d6f62 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6f14:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6f18:	68b1      	ldr	r1, [r6, #8]
   d6f1a:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6f1c:	ab04      	add	r3, sp, #16
   d6f1e:	f10d 020f 	add.w	r2, sp, #15
   d6f22:	f7ff ff9b 	bl	d6e5c <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6f26:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6f28:	b105      	cbz	r5, d6f2c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6f2a:	b9b1      	cbnz	r1, d6f5a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6f2c:	42a9      	cmp	r1, r5
   d6f2e:	d008      	beq.n	d6f42 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6f30:	2400      	movs	r4, #0
   d6f32:	7838      	ldrb	r0, [r7, #0]
   d6f34:	9401      	str	r4, [sp, #4]
   d6f36:	7b74      	ldrb	r4, [r6, #13]
   d6f38:	7b33      	ldrb	r3, [r6, #12]
   d6f3a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6f3e:	9400      	str	r4, [sp, #0]
   d6f40:	e7e4      	b.n	d6f0c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d6f42:	68b3      	ldr	r3, [r6, #8]
   d6f44:	4543      	cmp	r3, r8
   d6f46:	d3f3      	bcc.n	d6f30 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6f48:	f88d 9020 	strb.w	r9, [sp, #32]
   d6f4c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6f50:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6f54:	89b3      	ldrh	r3, [r6, #12]
   d6f56:	429a      	cmp	r2, r3
   d6f58:	d1ea      	bne.n	d6f30 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6f5a:	9b04      	ldr	r3, [sp, #16]
   d6f5c:	4543      	cmp	r3, r8
   d6f5e:	d1e7      	bne.n	d6f30 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6f60:	e7d6      	b.n	d6f10 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d6f62:	b00f      	add	sp, #60	; 0x3c
   d6f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6f68 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f6c:	b088      	sub	sp, #32
    unsigned clock = 0;
   d6f6e:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6f70:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6f72:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d6f74:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6f76:	460e      	mov	r6, r1
   d6f78:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d6f7a:	f7ff ff29 	bl	d6dd0 <_ZN8SPIClass4lockEv.isra.0>
   d6f7e:	4605      	mov	r5, r0
   d6f80:	bb00      	cbnz	r0, d6fc4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d6f82:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6f86:	4601      	mov	r1, r0
   d6f88:	2214      	movs	r2, #20
   d6f8a:	a803      	add	r0, sp, #12
   d6f8c:	f001 fae3 	bl	d8556 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6f90:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6f92:	462a      	mov	r2, r5
   d6f94:	a903      	add	r1, sp, #12
   d6f96:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6f98:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d6f9c:	f7ff fc86 	bl	d68ac <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6fa0:	ab02      	add	r3, sp, #8
   d6fa2:	f10d 0207 	add.w	r2, sp, #7
   d6fa6:	fb07 f106 	mul.w	r1, r7, r6
   d6faa:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d6fac:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d6fb0:	f7ff ff54 	bl	d6e5c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d6fb4:	7820      	ldrb	r0, [r4, #0]
   d6fb6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6fba:	f7ff fc57 	bl	d686c <HAL_SPI_Set_Clock_Divider>
        unlock();
   d6fbe:	7820      	ldrb	r0, [r4, #0]
   d6fc0:	f7ff ff09 	bl	d6dd6 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d6fc4:	9802      	ldr	r0, [sp, #8]
   d6fc6:	b008      	add	sp, #32
   d6fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6fcc <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6fcc:	b538      	push	{r3, r4, r5, lr}
   d6fce:	4604      	mov	r4, r0
    if (!lock())
   d6fd0:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6fd2:	460d      	mov	r5, r1
    if (!lock())
   d6fd4:	f7ff fefc 	bl	d6dd0 <_ZN8SPIClass4lockEv.isra.0>
   d6fd8:	b9c8      	cbnz	r0, d700e <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d6fda:	6861      	ldr	r1, [r4, #4]
   d6fdc:	b171      	cbz	r1, d6ffc <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d6fde:	4b0c      	ldr	r3, [pc, #48]	; (d7010 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d6fe0:	5cc2      	ldrb	r2, [r0, r3]
   d6fe2:	42aa      	cmp	r2, r5
   d6fe4:	d002      	beq.n	d6fec <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d6fe6:	3001      	adds	r0, #1
   d6fe8:	2808      	cmp	r0, #8
   d6fea:	d1f9      	bne.n	d6fe0 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d6fec:	3001      	adds	r0, #1
   d6fee:	b2c0      	uxtb	r0, r0
   d6ff0:	40c1      	lsrs	r1, r0
   d6ff2:	2201      	movs	r2, #1
   d6ff4:	4620      	mov	r0, r4
   d6ff6:	f7ff ffb7 	bl	d6f68 <_ZN8SPIClass13setClockSpeedEjj>
   d6ffa:	e003      	b.n	d7004 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6ffc:	4629      	mov	r1, r5
   d6ffe:	7820      	ldrb	r0, [r4, #0]
   d7000:	f7ff fc34 	bl	d686c <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d7004:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d700a:	f7ff bee4 	b.w	d6dd6 <_ZN8SPIClass6unlockEv.isra.1>
   d700e:	bd38      	pop	{r3, r4, r5, pc}
   d7010:	000d90c8 	.word	0x000d90c8

000d7014 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7014:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d7016:	7800      	ldrb	r0, [r0, #0]
   d7018:	f7ff fc30 	bl	d687c <HAL_SPI_Send_Receive_Data>
}
   d701c:	b2c0      	uxtb	r0, r0
   d701e:	bd08      	pop	{r3, pc}

000d7020 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7020:	b530      	push	{r4, r5, lr}
   d7022:	b087      	sub	sp, #28
   d7024:	4604      	mov	r4, r0
   d7026:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7028:	7800      	ldrb	r0, [r0, #0]
   d702a:	9500      	str	r5, [sp, #0]
   d702c:	f7ff fc46 	bl	d68bc <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d7030:	b93d      	cbnz	r5, d7042 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d7032:	a902      	add	r1, sp, #8
   d7034:	7820      	ldrb	r0, [r4, #0]
   d7036:	f7ff fc49 	bl	d68cc <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d703a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d703e:	07db      	lsls	r3, r3, #31
   d7040:	d4f7      	bmi.n	d7032 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d7042:	b007      	add	sp, #28
   d7044:	bd30      	pop	{r4, r5, pc}

000d7046 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d7046:	7800      	ldrb	r0, [r0, #0]
   d7048:	f7ff bc28 	b.w	d689c <HAL_SPI_Is_Enabled>

000d704c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d704c:	b510      	push	{r4, lr}
   d704e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7050:	6800      	ldr	r0, [r0, #0]
   d7052:	b118      	cbz	r0, d705c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d7054:	f7ff fe66 	bl	d6d24 <free>
            wakeupSource_ = nullptr;
   d7058:	2300      	movs	r3, #0
   d705a:	6023      	str	r3, [r4, #0]
   d705c:	bd10      	pop	{r4, pc}

000d705e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d705e:	b510      	push	{r4, lr}
   d7060:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7062:	f7ff fff3 	bl	d704c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7066:	4620      	mov	r0, r4
   d7068:	bd10      	pop	{r4, pc}
	...

000d706c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d706c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d706e:	4c09      	ldr	r4, [pc, #36]	; (d7094 <_GLOBAL__sub_I_System+0x28>)
   d7070:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7072:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7076:	6020      	str	r0, [r4, #0]
   d7078:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d707a:	71a0      	strb	r0, [r4, #6]
   d707c:	8120      	strh	r0, [r4, #8]
   d707e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7080:	f7ff fdc4 	bl	d6c0c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7084:	4620      	mov	r0, r4
   d7086:	4a04      	ldr	r2, [pc, #16]	; (d7098 <_GLOBAL__sub_I_System+0x2c>)
   d7088:	4904      	ldr	r1, [pc, #16]	; (d709c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d708a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d708e:	f001 b8df 	b.w	d8250 <__aeabi_atexit>
   d7092:	bf00      	nop
   d7094:	2003e3e4 	.word	0x2003e3e4
   d7098:	2003dcf8 	.word	0x2003dcf8
   d709c:	000d705f 	.word	0x000d705f

000d70a0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d70a0:	b510      	push	{r4, lr}
   d70a2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d70a4:	6800      	ldr	r0, [r0, #0]
   d70a6:	b108      	cbz	r0, d70ac <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d70a8:	f7ff fc78 	bl	d699c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d70ac:	4620      	mov	r0, r4
   d70ae:	bd10      	pop	{r4, pc}

000d70b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d70b0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d70b2:	4c06      	ldr	r4, [pc, #24]	; (d70cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d70b4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d70b6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d70b8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d70ba:	f7ff fc67 	bl	d698c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d70be:	4620      	mov	r0, r4
   d70c0:	4a03      	ldr	r2, [pc, #12]	; (d70d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d70c2:	4904      	ldr	r1, [pc, #16]	; (d70d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d70c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d70c8:	f001 b8c2 	b.w	d8250 <__aeabi_atexit>
   d70cc:	2003e3f0 	.word	0x2003e3f0
   d70d0:	2003dcf8 	.word	0x2003dcf8
   d70d4:	000d70a1 	.word	0x000d70a1

000d70d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d70d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70da:	4606      	mov	r6, r0
   d70dc:	460d      	mov	r5, r1
   d70de:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d70e0:	2400      	movs	r4, #0
  while (size--) {
   d70e2:	42bd      	cmp	r5, r7
   d70e4:	d00c      	beq.n	d7100 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d70e6:	6833      	ldr	r3, [r6, #0]
   d70e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d70ec:	689b      	ldr	r3, [r3, #8]
   d70ee:	4630      	mov	r0, r6
   d70f0:	4798      	blx	r3
     if (chunk>=0)
   d70f2:	2800      	cmp	r0, #0
   d70f4:	db01      	blt.n	d70fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d70f6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d70f8:	e7f3      	b.n	d70e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d70fa:	2c00      	cmp	r4, #0
   d70fc:	bf08      	it	eq
   d70fe:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7100:	4620      	mov	r0, r4
   d7102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7104 <_ZN5Print5printEPKc>:
   d7104:	b508      	push	{r3, lr}
   d7106:	f7fe feaf 	bl	d5e68 <_ZN5Print5writeEPKc>
   d710a:	bd08      	pop	{r3, pc}

000d710c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d710c:	6803      	ldr	r3, [r0, #0]
   d710e:	689b      	ldr	r3, [r3, #8]
   d7110:	4718      	bx	r3

000d7112 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7112:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7114:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7116:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7118:	f7ff fff8 	bl	d710c <_ZN5Print5printEc>
  n += print('\n');
   d711c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d711e:	4604      	mov	r4, r0
  n += print('\n');
   d7120:	4628      	mov	r0, r5
   d7122:	f7ff fff3 	bl	d710c <_ZN5Print5printEc>
  return n;
}
   d7126:	4420      	add	r0, r4
   d7128:	bd38      	pop	{r3, r4, r5, pc}

000d712a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d712a:	b538      	push	{r3, r4, r5, lr}
   d712c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d712e:	f7fe fe9b 	bl	d5e68 <_ZN5Print5writeEPKc>
   d7132:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7134:	4628      	mov	r0, r5
   d7136:	f7ff ffec 	bl	d7112 <_ZN5Print7printlnEv>
  return n;
}
   d713a:	4420      	add	r0, r4
   d713c:	bd38      	pop	{r3, r4, r5, pc}

000d713e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d713e:	b530      	push	{r4, r5, lr}
   d7140:	b08b      	sub	sp, #44	; 0x2c
   d7142:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7144:	2100      	movs	r1, #0
   d7146:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d714a:	2a01      	cmp	r2, #1
   d714c:	bf98      	it	ls
   d714e:	220a      	movls	r2, #10
   d7150:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7154:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7158:	fb05 3312 	mls	r3, r5, r2, r3
   d715c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7160:	2b09      	cmp	r3, #9
   d7162:	bf94      	ite	ls
   d7164:	3330      	addls	r3, #48	; 0x30
   d7166:	3337      	addhi	r3, #55	; 0x37
   d7168:	b2db      	uxtb	r3, r3
   d716a:	4621      	mov	r1, r4
   d716c:	f804 3901 	strb.w	r3, [r4], #-1
   d7170:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7172:	2d00      	cmp	r5, #0
   d7174:	d1ee      	bne.n	d7154 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7176:	f7fe fe77 	bl	d5e68 <_ZN5Print5writeEPKc>
}
   d717a:	b00b      	add	sp, #44	; 0x2c
   d717c:	bd30      	pop	{r4, r5, pc}

000d717e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d717e:	b40c      	push	{r2, r3}
   d7180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7184:	b087      	sub	sp, #28
   d7186:	af00      	add	r7, sp, #0
   d7188:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d718c:	4605      	mov	r5, r0
   d718e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7192:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7194:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7196:	4623      	mov	r3, r4
   d7198:	464a      	mov	r2, r9
   d719a:	2114      	movs	r1, #20
   d719c:	1d38      	adds	r0, r7, #4
   d719e:	f7ff fdc9 	bl	d6d34 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d71a2:	2813      	cmp	r0, #19
   d71a4:	d805      	bhi.n	d71b2 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d71a6:	1d39      	adds	r1, r7, #4
   d71a8:	4628      	mov	r0, r5
   d71aa:	f7fe fe5d 	bl	d5e68 <_ZN5Print5writeEPKc>
   d71ae:	4604      	mov	r4, r0
   d71b0:	e013      	b.n	d71da <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d71b2:	f100 0308 	add.w	r3, r0, #8
   d71b6:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d71ba:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d71bc:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d71c0:	1c41      	adds	r1, r0, #1
   d71c2:	4623      	mov	r3, r4
   d71c4:	464a      	mov	r2, r9
   d71c6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d71c8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d71ca:	f7ff fdb3 	bl	d6d34 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d71ce:	4669      	mov	r1, sp
   d71d0:	4628      	mov	r0, r5
   d71d2:	f7fe fe49 	bl	d5e68 <_ZN5Print5writeEPKc>
   d71d6:	4604      	mov	r4, r0
   d71d8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d71da:	b11e      	cbz	r6, d71e4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d71dc:	4628      	mov	r0, r5
   d71de:	f7ff ff98 	bl	d7112 <_ZN5Print7printlnEv>
   d71e2:	4404      	add	r4, r0
    return n;
}
   d71e4:	4620      	mov	r0, r4
   d71e6:	371c      	adds	r7, #28
   d71e8:	46bd      	mov	sp, r7
   d71ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d71ee:	b002      	add	sp, #8
   d71f0:	4770      	bx	lr
	...

000d71f4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d71f4:	4b01      	ldr	r3, [pc, #4]	; (d71fc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d71f6:	4a02      	ldr	r2, [pc, #8]	; (d7200 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d71f8:	601a      	str	r2, [r3, #0]
   d71fa:	4770      	bx	lr
   d71fc:	2003e3f4 	.word	0x2003e3f4
   d7200:	000d9143 	.word	0x000d9143

000d7204 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7204:	4b02      	ldr	r3, [pc, #8]	; (d7210 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7206:	681a      	ldr	r2, [r3, #0]
   d7208:	4b02      	ldr	r3, [pc, #8]	; (d7214 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d720a:	601a      	str	r2, [r3, #0]
   d720c:	4770      	bx	lr
   d720e:	bf00      	nop
   d7210:	2003dc90 	.word	0x2003dc90
   d7214:	2003e3f8 	.word	0x2003e3f8

000d7218 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7218:	2100      	movs	r1, #0
   d721a:	f7ff bcff 	b.w	d6c1c <system_delay_ms>

000d721e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d721e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7220:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7222:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7224:	b113      	cbz	r3, d722c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7226:	2203      	movs	r2, #3
   d7228:	4601      	mov	r1, r0
   d722a:	4798      	blx	r3
    }
   d722c:	4620      	mov	r0, r4
   d722e:	bd10      	pop	{r4, pc}

000d7230 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7230:	b510      	push	{r4, lr}
   d7232:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7234:	f7ff fff3 	bl	d721e <_ZNSt14_Function_baseD1Ev>
   d7238:	4620      	mov	r0, r4
   d723a:	bd10      	pop	{r4, pc}

000d723c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d723c:	4803      	ldr	r0, [pc, #12]	; (d724c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d723e:	4a04      	ldr	r2, [pc, #16]	; (d7250 <_GLOBAL__sub_I_RGB+0x14>)
   d7240:	4904      	ldr	r1, [pc, #16]	; (d7254 <_GLOBAL__sub_I_RGB+0x18>)
   d7242:	2300      	movs	r3, #0
   d7244:	6083      	str	r3, [r0, #8]
   d7246:	f001 b803 	b.w	d8250 <__aeabi_atexit>
   d724a:	bf00      	nop
   d724c:	2003e3fc 	.word	0x2003e3fc
   d7250:	2003dcf8 	.word	0x2003dcf8
   d7254:	000d7231 	.word	0x000d7231

000d7258 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7258:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d725a:	4b0c      	ldr	r3, [pc, #48]	; (d728c <serialEventRun+0x34>)
   d725c:	b133      	cbz	r3, d726c <serialEventRun+0x14>
   d725e:	f000 f96d 	bl	d753c <_Z16_fetch_usbserialv>
   d7262:	6803      	ldr	r3, [r0, #0]
   d7264:	691b      	ldr	r3, [r3, #16]
   d7266:	4798      	blx	r3
   d7268:	2800      	cmp	r0, #0
   d726a:	dc09      	bgt.n	d7280 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d726c:	4b08      	ldr	r3, [pc, #32]	; (d7290 <serialEventRun+0x38>)
   d726e:	b163      	cbz	r3, d728a <serialEventRun+0x32>
   d7270:	f000 f9ec 	bl	d764c <_Z22__fetch_global_Serial1v>
   d7274:	6803      	ldr	r3, [r0, #0]
   d7276:	691b      	ldr	r3, [r3, #16]
   d7278:	4798      	blx	r3
   d727a:	2800      	cmp	r0, #0
   d727c:	dc03      	bgt.n	d7286 <serialEventRun+0x2e>
   d727e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7280:	f3af 8000 	nop.w
   d7284:	e7f2      	b.n	d726c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7286:	f3af 8000 	nop.w
   d728a:	bd08      	pop	{r3, pc}
	...

000d7294 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7294:	b508      	push	{r3, lr}
	serialEventRun();
   d7296:	f7ff ffdf 	bl	d7258 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d729a:	f7ff fb57 	bl	d694c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d729e:	4b01      	ldr	r3, [pc, #4]	; (d72a4 <_post_loop+0x10>)
   d72a0:	6018      	str	r0, [r3, #0]
   d72a2:	bd08      	pop	{r3, pc}
   d72a4:	2003e730 	.word	0x2003e730

000d72a8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d72a8:	4802      	ldr	r0, [pc, #8]	; (d72b4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d72aa:	4a03      	ldr	r2, [pc, #12]	; (d72b8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d72ac:	4903      	ldr	r1, [pc, #12]	; (d72bc <_Z33system_initialize_user_backup_ramv+0x14>)
   d72ae:	1a12      	subs	r2, r2, r0
   d72b0:	f001 b946 	b.w	d8540 <memcpy>
   d72b4:	2003f400 	.word	0x2003f400
   d72b8:	2003f404 	.word	0x2003f404
   d72bc:	000d9490 	.word	0x000d9490

000d72c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d72c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d72c2:	2300      	movs	r3, #0
   d72c4:	9300      	str	r3, [sp, #0]
   d72c6:	461a      	mov	r2, r3
   d72c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d72cc:	f7ff fcb8 	bl	d6c40 <system_ctrl_set_result>
}
   d72d0:	b003      	add	sp, #12
   d72d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d72d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d72d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d72da:	8843      	ldrh	r3, [r0, #2]
   d72dc:	2b0a      	cmp	r3, #10
   d72de:	d008      	beq.n	d72f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d72e0:	2b50      	cmp	r3, #80	; 0x50
   d72e2:	d109      	bne.n	d72f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d72e4:	4b09      	ldr	r3, [pc, #36]	; (d730c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d72e6:	681b      	ldr	r3, [r3, #0]
   d72e8:	b13b      	cbz	r3, d72fa <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d72ea:	b003      	add	sp, #12
   d72ec:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d72f0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d72f2:	f7ff ffe5 	bl	d72c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d72f6:	e006      	b.n	d7306 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d72f8:	2300      	movs	r3, #0
   d72fa:	9300      	str	r3, [sp, #0]
   d72fc:	461a      	mov	r2, r3
   d72fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7302:	f7ff fc9d 	bl	d6c40 <system_ctrl_set_result>
        break;
    }
}
   d7306:	b003      	add	sp, #12
   d7308:	f85d fb04 	ldr.w	pc, [sp], #4
   d730c:	2003e40c 	.word	0x2003e40c

000d7310 <module_user_init_hook>:

void module_user_init_hook()
{
   d7310:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7312:	4c10      	ldr	r4, [pc, #64]	; (d7354 <module_user_init_hook+0x44>)
   d7314:	4d10      	ldr	r5, [pc, #64]	; (d7358 <module_user_init_hook+0x48>)
   d7316:	6823      	ldr	r3, [r4, #0]
   d7318:	42ab      	cmp	r3, r5
   d731a:	4b10      	ldr	r3, [pc, #64]	; (d735c <module_user_init_hook+0x4c>)
   d731c:	bf0c      	ite	eq
   d731e:	2201      	moveq	r2, #1
   d7320:	2200      	movne	r2, #0
   d7322:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7324:	d002      	beq.n	d732c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7326:	f7ff ffbf 	bl	d72a8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d732a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d732c:	f7ff faf6 	bl	d691c <HAL_RNG_GetRandomNumber>
   d7330:	4604      	mov	r4, r0
    srand(seed);
   d7332:	f001 f919 	bl	d8568 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7336:	4b0a      	ldr	r3, [pc, #40]	; (d7360 <module_user_init_hook+0x50>)
   d7338:	b113      	cbz	r3, d7340 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d733a:	4620      	mov	r0, r4
   d733c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7340:	2100      	movs	r1, #0
   d7342:	4807      	ldr	r0, [pc, #28]	; (d7360 <module_user_init_hook+0x50>)
   d7344:	f7ff fcde 	bl	d6d04 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7348:	2100      	movs	r1, #0
   d734a:	4806      	ldr	r0, [pc, #24]	; (d7364 <module_user_init_hook+0x54>)
}
   d734c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7350:	f7ff bc6c 	b.w	d6c2c <system_ctrl_set_app_request_handler>
   d7354:	2003f400 	.word	0x2003f400
   d7358:	9a271c1e 	.word	0x9a271c1e
   d735c:	2003e410 	.word	0x2003e410
   d7360:	00000000 	.word	0x00000000
   d7364:	000d72d9 	.word	0x000d72d9

000d7368 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7368:	4770      	bx	lr

000d736a <_ZN9IPAddressD0Ev>:
   d736a:	b510      	push	{r4, lr}
   d736c:	2118      	movs	r1, #24
   d736e:	4604      	mov	r4, r0
   d7370:	f000 ff7c 	bl	d826c <_ZdlPvj>
   d7374:	4620      	mov	r0, r4
   d7376:	bd10      	pop	{r4, pc}

000d7378 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7378:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d737a:	7d03      	ldrb	r3, [r0, #20]
   d737c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d737e:	b08d      	sub	sp, #52	; 0x34
   d7380:	460e      	mov	r6, r1
   d7382:	f100 0704 	add.w	r7, r0, #4
   d7386:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d738a:	d002      	beq.n	d7392 <_ZNK9IPAddress7printToER5Print+0x1a>
   d738c:	f100 0508 	add.w	r5, r0, #8
   d7390:	e018      	b.n	d73c4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7392:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7394:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7396:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d739a:	232f      	movs	r3, #47	; 0x2f
   d739c:	462a      	mov	r2, r5
   d739e:	200a      	movs	r0, #10
   d73a0:	f7ff fb04 	bl	d69ac <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d73a4:	4628      	mov	r0, r5
   d73a6:	f001 f90f 	bl	d85c8 <strlen>
   d73aa:	6833      	ldr	r3, [r6, #0]
   d73ac:	4602      	mov	r2, r0
   d73ae:	68db      	ldr	r3, [r3, #12]
   d73b0:	4629      	mov	r1, r5
   d73b2:	4630      	mov	r0, r6
   d73b4:	4798      	blx	r3
   d73b6:	e00f      	b.n	d73d8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d73b8:	b124      	cbz	r4, d73c4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d73ba:	212e      	movs	r1, #46	; 0x2e
   d73bc:	4630      	mov	r0, r6
   d73be:	f7ff fea5 	bl	d710c <_ZN5Print5printEc>
   d73c2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d73c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d73c8:	220a      	movs	r2, #10
   d73ca:	4630      	mov	r0, r6
   d73cc:	f7ff feb7 	bl	d713e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d73d0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d73d2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d73d4:	d1f0      	bne.n	d73b8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d73d6:	4620      	mov	r0, r4
    }
    return n;
}
   d73d8:	b00d      	add	sp, #52	; 0x34
   d73da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d73dc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d73dc:	b510      	push	{r4, lr}
   d73de:	4b05      	ldr	r3, [pc, #20]	; (d73f4 <_ZN9IPAddressC1Ev+0x18>)
   d73e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d73e2:	2211      	movs	r2, #17
   d73e4:	f840 3b04 	str.w	r3, [r0], #4
   d73e8:	2100      	movs	r1, #0
   d73ea:	f001 f8b4 	bl	d8556 <memset>
{
    clear();
}
   d73ee:	4620      	mov	r0, r4
   d73f0:	bd10      	pop	{r4, pc}
   d73f2:	bf00      	nop
   d73f4:	000d91d4 	.word	0x000d91d4

000d73f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d73f8:	4603      	mov	r3, r0
   d73fa:	4a07      	ldr	r2, [pc, #28]	; (d7418 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d73fc:	b510      	push	{r4, lr}
   d73fe:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7402:	f101 0210 	add.w	r2, r1, #16
   d7406:	f851 4b04 	ldr.w	r4, [r1], #4
   d740a:	f843 4b04 	str.w	r4, [r3], #4
   d740e:	4291      	cmp	r1, r2
   d7410:	d1f9      	bne.n	d7406 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7412:	780a      	ldrb	r2, [r1, #0]
   d7414:	701a      	strb	r2, [r3, #0]
}
   d7416:	bd10      	pop	{r4, pc}
   d7418:	000d91d4 	.word	0x000d91d4

000d741c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d741c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d741e:	2b04      	cmp	r3, #4
   d7420:	d101      	bne.n	d7426 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d7422:	6840      	ldr	r0, [r0, #4]
   d7424:	e008      	b.n	d7438 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d7426:	2b06      	cmp	r3, #6
   d7428:	d10a      	bne.n	d7440 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d742a:	6843      	ldr	r3, [r0, #4]
   d742c:	b953      	cbnz	r3, d7444 <_ZNK9IPAddresscvbEv+0x28>
   d742e:	6883      	ldr	r3, [r0, #8]
   d7430:	b943      	cbnz	r3, d7444 <_ZNK9IPAddresscvbEv+0x28>
   d7432:	68c3      	ldr	r3, [r0, #12]
   d7434:	b933      	cbnz	r3, d7444 <_ZNK9IPAddresscvbEv+0x28>
   d7436:	6900      	ldr	r0, [r0, #16]
   d7438:	3000      	adds	r0, #0
   d743a:	bf18      	it	ne
   d743c:	2001      	movne	r0, #1
   d743e:	4770      	bx	lr
    } else {
        return false;
   d7440:	2000      	movs	r0, #0
   d7442:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7444:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d7446:	4770      	bx	lr

000d7448 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7448:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d744a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d744e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7452:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7456:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d745a:	2304      	movs	r3, #4
   d745c:	6041      	str	r1, [r0, #4]
   d745e:	7503      	strb	r3, [r0, #20]
   d7460:	bd10      	pop	{r4, pc}

000d7462 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7462:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7464:	780d      	ldrb	r5, [r1, #0]
   d7466:	788b      	ldrb	r3, [r1, #2]
   d7468:	784a      	ldrb	r2, [r1, #1]
   d746a:	78c9      	ldrb	r1, [r1, #3]
   d746c:	9100      	str	r1, [sp, #0]
   d746e:	4629      	mov	r1, r5
   d7470:	f7ff ffea 	bl	d7448 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7474:	b003      	add	sp, #12
   d7476:	bd30      	pop	{r4, r5, pc}

000d7478 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7478:	7441      	strb	r1, [r0, #17]
   d747a:	4770      	bx	lr

000d747c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d747c:	4770      	bx	lr

000d747e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d747e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7480:	2100      	movs	r1, #0
   d7482:	7c00      	ldrb	r0, [r0, #16]
   d7484:	f7ff fb9a 	bl	d6bbc <HAL_USB_USART_Receive_Data>
}
   d7488:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d748c:	bf28      	it	cs
   d748e:	f04f 30ff 	movcs.w	r0, #4294967295
   d7492:	bd08      	pop	{r3, pc}

000d7494 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7494:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7496:	2101      	movs	r1, #1
   d7498:	7c00      	ldrb	r0, [r0, #16]
   d749a:	f7ff fb8f 	bl	d6bbc <HAL_USB_USART_Receive_Data>
}
   d749e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d74a2:	bf28      	it	cs
   d74a4:	f04f 30ff 	movcs.w	r0, #4294967295
   d74a8:	bd08      	pop	{r3, pc}

000d74aa <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d74aa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d74ac:	7c00      	ldrb	r0, [r0, #16]
   d74ae:	f7ff fb7d 	bl	d6bac <HAL_USB_USART_Available_Data_For_Write>
}
   d74b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d74b6:	bd08      	pop	{r3, pc}

000d74b8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d74b8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d74ba:	7c00      	ldrb	r0, [r0, #16]
   d74bc:	f7ff fb6e 	bl	d6b9c <HAL_USB_USART_Available_Data>
}
   d74c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d74c4:	bd08      	pop	{r3, pc}

000d74c6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d74c6:	7c00      	ldrb	r0, [r0, #16]
   d74c8:	f7ff bb88 	b.w	d6bdc <HAL_USB_USART_Flush_Data>

000d74cc <_ZN9USBSerialD0Ev>:
   d74cc:	b510      	push	{r4, lr}
   d74ce:	2114      	movs	r1, #20
   d74d0:	4604      	mov	r4, r0
   d74d2:	f000 fecb 	bl	d826c <_ZdlPvj>
   d74d6:	4620      	mov	r0, r4
   d74d8:	bd10      	pop	{r4, pc}

000d74da <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d74da:	b538      	push	{r3, r4, r5, lr}
   d74dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d74de:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d74e0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d74e2:	f7ff fb63 	bl	d6bac <HAL_USB_USART_Available_Data_For_Write>
   d74e6:	2800      	cmp	r0, #0
   d74e8:	dc01      	bgt.n	d74ee <_ZN9USBSerial5writeEh+0x14>
   d74ea:	7c60      	ldrb	r0, [r4, #17]
   d74ec:	b128      	cbz	r0, d74fa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d74ee:	4629      	mov	r1, r5
   d74f0:	7c20      	ldrb	r0, [r4, #16]
   d74f2:	f7ff fb6b 	bl	d6bcc <HAL_USB_USART_Send_Data>
   d74f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d74fa:	bd38      	pop	{r3, r4, r5, pc}

000d74fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d74fc:	b510      	push	{r4, lr}
   d74fe:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7500:	2300      	movs	r3, #0
   d7502:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7508:	60a3      	str	r3, [r4, #8]
   d750a:	4b05      	ldr	r3, [pc, #20]	; (d7520 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d750c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d750e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7510:	4608      	mov	r0, r1
{
  _serial = serial;
   d7512:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7514:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7516:	4611      	mov	r1, r2
   d7518:	f7ff fb30 	bl	d6b7c <HAL_USB_USART_Init>
}
   d751c:	4620      	mov	r0, r4
   d751e:	bd10      	pop	{r4, pc}
   d7520:	000d91e8 	.word	0x000d91e8

000d7524 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7524:	2200      	movs	r2, #0
   d7526:	7c00      	ldrb	r0, [r0, #16]
   d7528:	f7ff bb30 	b.w	d6b8c <HAL_USB_USART_Begin>

000d752c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d752c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d752e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7530:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7532:	2100      	movs	r1, #0
   d7534:	f001 f80f 	bl	d8556 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7538:	4620      	mov	r0, r4
   d753a:	bd10      	pop	{r4, pc}

000d753c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d753c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d753e:	4d0e      	ldr	r5, [pc, #56]	; (d7578 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7540:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7542:	a801      	add	r0, sp, #4
   d7544:	f7ff fff2 	bl	d752c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7548:	6829      	ldr	r1, [r5, #0]
   d754a:	f011 0401 	ands.w	r4, r1, #1
   d754e:	d110      	bne.n	d7572 <_Z16_fetch_usbserialv+0x36>
   d7550:	4628      	mov	r0, r5
   d7552:	f7fc fdb1 	bl	d40b8 <__cxa_guard_acquire>
   d7556:	b160      	cbz	r0, d7572 <_Z16_fetch_usbserialv+0x36>
   d7558:	aa01      	add	r2, sp, #4
   d755a:	4621      	mov	r1, r4
   d755c:	4807      	ldr	r0, [pc, #28]	; (d757c <_Z16_fetch_usbserialv+0x40>)
   d755e:	f7ff ffcd 	bl	d74fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7562:	4628      	mov	r0, r5
   d7564:	f7fc fdad 	bl	d40c2 <__cxa_guard_release>
   d7568:	4a05      	ldr	r2, [pc, #20]	; (d7580 <_Z16_fetch_usbserialv+0x44>)
   d756a:	4906      	ldr	r1, [pc, #24]	; (d7584 <_Z16_fetch_usbserialv+0x48>)
   d756c:	4803      	ldr	r0, [pc, #12]	; (d757c <_Z16_fetch_usbserialv+0x40>)
   d756e:	f000 fe6f 	bl	d8250 <__aeabi_atexit>
	return _usbserial;
}
   d7572:	4802      	ldr	r0, [pc, #8]	; (d757c <_Z16_fetch_usbserialv+0x40>)
   d7574:	b007      	add	sp, #28
   d7576:	bd30      	pop	{r4, r5, pc}
   d7578:	2003e414 	.word	0x2003e414
   d757c:	2003e418 	.word	0x2003e418
   d7580:	2003dcf8 	.word	0x2003dcf8
   d7584:	000d747d 	.word	0x000d747d

000d7588 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7588:	4770      	bx	lr

000d758a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d758a:	7441      	strb	r1, [r0, #17]
   d758c:	4770      	bx	lr

000d758e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d758e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7590:	7c00      	ldrb	r0, [r0, #16]
   d7592:	f7ff fa5b 	bl	d6a4c <HAL_USART_Available_Data_For_Write>
}
   d7596:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d759a:	bd08      	pop	{r3, pc}

000d759c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d759c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d759e:	7c00      	ldrb	r0, [r0, #16]
   d75a0:	f7ff fa2c 	bl	d69fc <HAL_USART_Available_Data>
}
   d75a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d75a8:	bd08      	pop	{r3, pc}

000d75aa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d75aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d75ac:	7c00      	ldrb	r0, [r0, #16]
   d75ae:	f7ff fa35 	bl	d6a1c <HAL_USART_Peek_Data>
}
   d75b2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d75b6:	bf28      	it	cs
   d75b8:	f04f 30ff 	movcs.w	r0, #4294967295
   d75bc:	bd08      	pop	{r3, pc}

000d75be <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d75be:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d75c0:	7c00      	ldrb	r0, [r0, #16]
   d75c2:	f7ff fa23 	bl	d6a0c <HAL_USART_Read_Data>
}
   d75c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d75ca:	bf28      	it	cs
   d75cc:	f04f 30ff 	movcs.w	r0, #4294967295
   d75d0:	bd08      	pop	{r3, pc}

000d75d2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d75d2:	7c00      	ldrb	r0, [r0, #16]
   d75d4:	f7ff ba2a 	b.w	d6a2c <HAL_USART_Flush_Data>

000d75d8 <_ZN11USARTSerialD0Ev>:
   d75d8:	b510      	push	{r4, lr}
   d75da:	2114      	movs	r1, #20
   d75dc:	4604      	mov	r4, r0
   d75de:	f000 fe45 	bl	d826c <_ZdlPvj>
   d75e2:	4620      	mov	r0, r4
   d75e4:	bd10      	pop	{r4, pc}

000d75e6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d75e6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d75e8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d75ea:	4604      	mov	r4, r0
   d75ec:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d75ee:	b925      	cbnz	r5, d75fa <_ZN11USARTSerial5writeEh+0x14>
   d75f0:	7c00      	ldrb	r0, [r0, #16]
   d75f2:	f7ff fa2b 	bl	d6a4c <HAL_USART_Available_Data_For_Write>
   d75f6:	2800      	cmp	r0, #0
   d75f8:	dd05      	ble.n	d7606 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d75fa:	4631      	mov	r1, r6
   d75fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d75fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7602:	f7ff b9f3 	b.w	d69ec <HAL_USART_Write_Data>
  }
  return 0;
}
   d7606:	4628      	mov	r0, r5
   d7608:	bd70      	pop	{r4, r5, r6, pc}
	...

000d760c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d760c:	b510      	push	{r4, lr}
   d760e:	4604      	mov	r4, r0
   d7610:	4608      	mov	r0, r1
   d7612:	4611      	mov	r1, r2
   d7614:	2200      	movs	r2, #0
   d7616:	6062      	str	r2, [r4, #4]
   d7618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d761c:	60a2      	str	r2, [r4, #8]
   d761e:	4a05      	ldr	r2, [pc, #20]	; (d7634 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7620:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7622:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7624:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7626:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7628:	461a      	mov	r2, r3
   d762a:	f7ff f9d7 	bl	d69dc <HAL_USART_Init>
}
   d762e:	4620      	mov	r0, r4
   d7630:	bd10      	pop	{r4, pc}
   d7632:	bf00      	nop
   d7634:	000d9218 	.word	0x000d9218

000d7638 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7638:	2300      	movs	r3, #0
   d763a:	7c00      	ldrb	r0, [r0, #16]
   d763c:	f7ff ba0e 	b.w	d6a5c <HAL_USART_BeginConfig>

000d7640 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7640:	2200      	movs	r2, #0
   d7642:	f7ff bff9 	b.w	d7638 <_ZN11USARTSerial5beginEmm>

000d7646 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7646:	7c00      	ldrb	r0, [r0, #16]
   d7648:	f7ff b9f8 	b.w	d6a3c <HAL_USART_Is_Enabled>

000d764c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d764c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d764e:	4d0c      	ldr	r5, [pc, #48]	; (d7680 <_Z22__fetch_global_Serial1v+0x34>)
   d7650:	6829      	ldr	r1, [r5, #0]
   d7652:	f011 0401 	ands.w	r4, r1, #1
   d7656:	d111      	bne.n	d767c <_Z22__fetch_global_Serial1v+0x30>
   d7658:	4628      	mov	r0, r5
   d765a:	f7fc fd2d 	bl	d40b8 <__cxa_guard_acquire>
   d765e:	b168      	cbz	r0, d767c <_Z22__fetch_global_Serial1v+0x30>
   d7660:	4a08      	ldr	r2, [pc, #32]	; (d7684 <_Z22__fetch_global_Serial1v+0x38>)
   d7662:	4b09      	ldr	r3, [pc, #36]	; (d7688 <_Z22__fetch_global_Serial1v+0x3c>)
   d7664:	4809      	ldr	r0, [pc, #36]	; (d768c <_Z22__fetch_global_Serial1v+0x40>)
   d7666:	4621      	mov	r1, r4
   d7668:	f7ff ffd0 	bl	d760c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d766c:	4628      	mov	r0, r5
   d766e:	f7fc fd28 	bl	d40c2 <__cxa_guard_release>
   d7672:	4a07      	ldr	r2, [pc, #28]	; (d7690 <_Z22__fetch_global_Serial1v+0x44>)
   d7674:	4907      	ldr	r1, [pc, #28]	; (d7694 <_Z22__fetch_global_Serial1v+0x48>)
   d7676:	4805      	ldr	r0, [pc, #20]	; (d768c <_Z22__fetch_global_Serial1v+0x40>)
   d7678:	f000 fdea 	bl	d8250 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d767c:	4803      	ldr	r0, [pc, #12]	; (d768c <_Z22__fetch_global_Serial1v+0x40>)
   d767e:	bd38      	pop	{r3, r4, r5, pc}
   d7680:	2003e4c4 	.word	0x2003e4c4
   d7684:	2003e4c8 	.word	0x2003e4c8
   d7688:	2003e440 	.word	0x2003e440
   d768c:	2003e42c 	.word	0x2003e42c
   d7690:	2003dcf8 	.word	0x2003dcf8
   d7694:	000d7589 	.word	0x000d7589

000d7698 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7698:	4770      	bx	lr

000d769a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d769a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d769c:	4606      	mov	r6, r0
   d769e:	4615      	mov	r5, r2
   d76a0:	460c      	mov	r4, r1
   d76a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d76a4:	42bc      	cmp	r4, r7
   d76a6:	d006      	beq.n	d76b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d76a8:	6833      	ldr	r3, [r6, #0]
   d76aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d76ae:	689b      	ldr	r3, [r3, #8]
   d76b0:	4630      	mov	r0, r6
   d76b2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d76b4:	e7f6      	b.n	d76a4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d76b6:	4628      	mov	r0, r5
   d76b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76ba <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d76ba:	2200      	movs	r2, #0
   d76bc:	7c00      	ldrb	r0, [r0, #16]
   d76be:	f7ff b9ed 	b.w	d6a9c <HAL_I2C_Write_Data>

000d76c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d76c2:	2100      	movs	r1, #0
   d76c4:	7c00      	ldrb	r0, [r0, #16]
   d76c6:	f7ff b9f1 	b.w	d6aac <HAL_I2C_Available_Data>

000d76ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d76ca:	2100      	movs	r1, #0
   d76cc:	7c00      	ldrb	r0, [r0, #16]
   d76ce:	f7ff b9f5 	b.w	d6abc <HAL_I2C_Read_Data>

000d76d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d76d2:	2100      	movs	r1, #0
   d76d4:	7c00      	ldrb	r0, [r0, #16]
   d76d6:	f7ff b9f9 	b.w	d6acc <HAL_I2C_Peek_Data>

000d76da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d76da:	2100      	movs	r1, #0
   d76dc:	7c00      	ldrb	r0, [r0, #16]
   d76de:	f7ff b9fd 	b.w	d6adc <HAL_I2C_Flush_Data>

000d76e2 <_ZN7TwoWireD0Ev>:
   d76e2:	b510      	push	{r4, lr}
   d76e4:	2114      	movs	r1, #20
   d76e6:	4604      	mov	r4, r0
   d76e8:	f000 fdc0 	bl	d826c <_ZdlPvj>
   d76ec:	4620      	mov	r0, r4
   d76ee:	bd10      	pop	{r4, pc}

000d76f0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d76f0:	b510      	push	{r4, lr}
   d76f2:	4604      	mov	r4, r0
   d76f4:	2300      	movs	r3, #0
   d76f6:	6063      	str	r3, [r4, #4]
   d76f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d76fc:	60a3      	str	r3, [r4, #8]
   d76fe:	4b04      	ldr	r3, [pc, #16]	; (d7710 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7700:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7702:	4608      	mov	r0, r1
   d7704:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7706:	4611      	mov	r1, r2
   d7708:	f7ff f9f8 	bl	d6afc <HAL_I2C_Init>
}
   d770c:	4620      	mov	r0, r4
   d770e:	bd10      	pop	{r4, pc}
   d7710:	000d9248 	.word	0x000d9248

000d7714 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7714:	2300      	movs	r3, #0
   d7716:	461a      	mov	r2, r3
   d7718:	4619      	mov	r1, r3
   d771a:	7c00      	ldrb	r0, [r0, #16]
   d771c:	f7ff b9a6 	b.w	d6a6c <HAL_I2C_Begin>

000d7720 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7720:	b570      	push	{r4, r5, r6, lr}
   d7722:	460c      	mov	r4, r1
   d7724:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7726:	2514      	movs	r5, #20
   d7728:	4606      	mov	r6, r0
   d772a:	462a      	mov	r2, r5
   d772c:	2100      	movs	r1, #0
   d772e:	a801      	add	r0, sp, #4
   d7730:	f000 ff11 	bl	d8556 <memset>
   d7734:	7823      	ldrb	r3, [r4, #0]
   d7736:	f88d 3008 	strb.w	r3, [sp, #8]
   d773a:	6863      	ldr	r3, [r4, #4]
   d773c:	9303      	str	r3, [sp, #12]
   d773e:	68e3      	ldr	r3, [r4, #12]
   d7740:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d7742:	2200      	movs	r2, #0
   d7744:	7a23      	ldrb	r3, [r4, #8]
   d7746:	7c30      	ldrb	r0, [r6, #16]
   d7748:	f8ad 5004 	strh.w	r5, [sp, #4]
   d774c:	a901      	add	r1, sp, #4
   d774e:	9305      	str	r3, [sp, #20]
   d7750:	f7ff f9dc 	bl	d6b0c <HAL_I2C_Request_Data_Ex>
}
   d7754:	b006      	add	sp, #24
   d7756:	bd70      	pop	{r4, r5, r6, pc}

000d7758 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d775a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d775c:	f88d 1000 	strb.w	r1, [sp]
   d7760:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7764:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7766:	bf18      	it	ne
   d7768:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d776a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d776c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d776e:	f88d 3008 	strb.w	r3, [sp, #8]
   d7772:	f7ff ffd5 	bl	d7720 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7776:	b005      	add	sp, #20
   d7778:	f85d fb04 	ldr.w	pc, [sp], #4

000d777c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d777c:	2301      	movs	r3, #1
   d777e:	f7ff bfeb 	b.w	d7758 <_ZN7TwoWire11requestFromEhjh>

000d7782 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7782:	2200      	movs	r2, #0
   d7784:	7c00      	ldrb	r0, [r0, #16]
   d7786:	f7ff b979 	b.w	d6a7c <HAL_I2C_Begin_Transmission>

000d778a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d778a:	b2c9      	uxtb	r1, r1
   d778c:	f7ff bff9 	b.w	d7782 <_ZN7TwoWire17beginTransmissionEh>

000d7790 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7790:	2200      	movs	r2, #0
   d7792:	7c00      	ldrb	r0, [r0, #16]
   d7794:	f7ff b97a 	b.w	d6a8c <HAL_I2C_End_Transmission>

000d7798 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7798:	2101      	movs	r1, #1
   d779a:	f7ff bff9 	b.w	d7790 <_ZN7TwoWire15endTransmissionEh>

000d779e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d779e:	2100      	movs	r1, #0
   d77a0:	7c00      	ldrb	r0, [r0, #16]
   d77a2:	f7ff b9a3 	b.w	d6aec <HAL_I2C_Is_Enabled>

000d77a6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d77a6:	2200      	movs	r2, #0
   d77a8:	4611      	mov	r1, r2
   d77aa:	6840      	ldr	r0, [r0, #4]
   d77ac:	f7ff ba8a 	b.w	d6cc4 <network_listening>

000d77b0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d77b0:	2200      	movs	r2, #0
   d77b2:	4611      	mov	r1, r2
   d77b4:	6840      	ldr	r0, [r0, #4]
   d77b6:	f7ff ba95 	b.w	d6ce4 <network_get_listen_timeout>

000d77ba <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d77ba:	2200      	movs	r2, #0
   d77bc:	6840      	ldr	r0, [r0, #4]
   d77be:	f7ff ba89 	b.w	d6cd4 <network_set_listen_timeout>

000d77c2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d77c2:	2200      	movs	r2, #0
   d77c4:	f081 0101 	eor.w	r1, r1, #1
   d77c8:	6840      	ldr	r0, [r0, #4]
   d77ca:	f7ff ba73 	b.w	d6cb4 <network_listen>

000d77ce <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d77ce:	2300      	movs	r3, #0
   d77d0:	461a      	mov	r2, r3
   d77d2:	2101      	movs	r1, #1
   d77d4:	6840      	ldr	r0, [r0, #4]
   d77d6:	f7ff ba65 	b.w	d6ca4 <network_off>

000d77da <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d77da:	2300      	movs	r3, #0
   d77dc:	461a      	mov	r2, r3
   d77de:	4619      	mov	r1, r3
   d77e0:	6840      	ldr	r0, [r0, #4]
   d77e2:	f7ff ba57 	b.w	d6c94 <network_on>

000d77e6 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d77e6:	2200      	movs	r2, #0
   d77e8:	4611      	mov	r1, r2
   d77ea:	6840      	ldr	r0, [r0, #4]
   d77ec:	f7ff ba4a 	b.w	d6c84 <network_ready>

000d77f0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d77f0:	2200      	movs	r2, #0
   d77f2:	4611      	mov	r1, r2
   d77f4:	6840      	ldr	r0, [r0, #4]
   d77f6:	f7ff ba35 	b.w	d6c64 <network_connecting>

000d77fa <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d77fa:	2200      	movs	r2, #0
   d77fc:	2102      	movs	r1, #2
   d77fe:	6840      	ldr	r0, [r0, #4]
   d7800:	f7ff ba38 	b.w	d6c74 <network_disconnect>

000d7804 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7804:	2300      	movs	r3, #0
   d7806:	461a      	mov	r2, r3
   d7808:	6840      	ldr	r0, [r0, #4]
   d780a:	f7ff ba23 	b.w	d6c54 <network_connect>

000d780e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d780e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7810:	4605      	mov	r5, r0
   d7812:	b188      	cbz	r0, d7838 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7814:	6804      	ldr	r4, [r0, #0]
   d7816:	b14c      	cbz	r4, d782c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d7818:	68a3      	ldr	r3, [r4, #8]
   d781a:	b11b      	cbz	r3, d7824 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d781c:	2203      	movs	r2, #3
   d781e:	4621      	mov	r1, r4
   d7820:	4620      	mov	r0, r4
   d7822:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7824:	2110      	movs	r1, #16
   d7826:	4620      	mov	r0, r4
   d7828:	f000 fd20 	bl	d826c <_ZdlPvj>
   d782c:	4628      	mov	r0, r5
   d782e:	2114      	movs	r1, #20
      }
   d7830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7834:	f000 bd1a 	b.w	d826c <_ZdlPvj>
   d7838:	bd38      	pop	{r3, r4, r5, pc}

000d783a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d783a:	b110      	cbz	r0, d7842 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d783c:	6803      	ldr	r3, [r0, #0]
   d783e:	685b      	ldr	r3, [r3, #4]
   d7840:	4718      	bx	r3
   d7842:	4770      	bx	lr

000d7844 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7844:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7846:	6803      	ldr	r3, [r0, #0]
   d7848:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d784a:	b1bb      	cbz	r3, d787c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d784c:	6858      	ldr	r0, [r3, #4]
   d784e:	f7ff f885 	bl	d695c <os_thread_is_current>
   d7852:	b978      	cbnz	r0, d7874 <_ZN6ThreadD1Ev+0x30>
   d7854:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7856:	7c5a      	ldrb	r2, [r3, #17]
   d7858:	b912      	cbnz	r2, d7860 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d785a:	6858      	ldr	r0, [r3, #4]
   d785c:	f7ff f886 	bl	d696c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7860:	6823      	ldr	r3, [r4, #0]
   d7862:	6858      	ldr	r0, [r3, #4]
   d7864:	f7ff f88a 	bl	d697c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7868:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d786a:	2300      	movs	r3, #0
   d786c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d786e:	b128      	cbz	r0, d787c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7870:	f7ff ffcd 	bl	d780e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7874:	6820      	ldr	r0, [r4, #0]
   d7876:	b108      	cbz	r0, d787c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7878:	f7ff ffc9 	bl	d780e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d787c:	4620      	mov	r0, r4
   d787e:	bd10      	pop	{r4, pc}

000d7880 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7880:	b538      	push	{r3, r4, r5, lr}
   d7882:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7884:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7888:	b108      	cbz	r0, d788e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d788a:	f7fc fc08 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d788e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7892:	b108      	cbz	r0, d7898 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7894:	f7ff f882 	bl	d699c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7898:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d789c:	b135      	cbz	r5, d78ac <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d789e:	4628      	mov	r0, r5
   d78a0:	f7ff ffd0 	bl	d7844 <_ZN6ThreadD1Ev>
   d78a4:	2104      	movs	r1, #4
   d78a6:	4628      	mov	r0, r5
   d78a8:	f000 fce0 	bl	d826c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d78ac:	6820      	ldr	r0, [r4, #0]
   d78ae:	b108      	cbz	r0, d78b4 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d78b0:	f7ff ffc3 	bl	d783a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d78b4:	4620      	mov	r0, r4
   d78b6:	bd38      	pop	{r3, r4, r5, pc}

000d78b8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d78b8:	b510      	push	{r4, lr}
   d78ba:	4b04      	ldr	r3, [pc, #16]	; (d78cc <_ZN5spark9MeshClassD1Ev+0x14>)
   d78bc:	4604      	mov	r4, r0
   d78be:	f840 3b08 	str.w	r3, [r0], #8
   d78c2:	f7ff ffdd 	bl	d7880 <_ZN5spark11MeshPublishD1Ev>
   d78c6:	4620      	mov	r0, r4
   d78c8:	bd10      	pop	{r4, pc}
   d78ca:	bf00      	nop
   d78cc:	000d9270 	.word	0x000d9270

000d78d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d78d0:	b538      	push	{r3, r4, r5, lr}
   d78d2:	4c0e      	ldr	r4, [pc, #56]	; (d790c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d78d4:	4b0e      	ldr	r3, [pc, #56]	; (d7910 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d78d6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d78d8:	2500      	movs	r5, #0
   d78da:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d78dc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d78e0:	6063      	str	r3, [r4, #4]
   d78e2:	60a5      	str	r5, [r4, #8]
   d78e4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d78e8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d78ec:	f7ff f84e 	bl	d698c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d78f0:	4b08      	ldr	r3, [pc, #32]	; (d7914 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d78f2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d78f6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d78fa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d78fc:	4620      	mov	r0, r4
   d78fe:	4a06      	ldr	r2, [pc, #24]	; (d7918 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7900:	4906      	ldr	r1, [pc, #24]	; (d791c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7906:	f000 bca3 	b.w	d8250 <__aeabi_atexit>
   d790a:	bf00      	nop
   d790c:	2003e54c 	.word	0x2003e54c
   d7910:	000d9358 	.word	0x000d9358
   d7914:	000d9270 	.word	0x000d9270
   d7918:	2003dcf8 	.word	0x2003dcf8
   d791c:	000d78b9 	.word	0x000d78b9

000d7920 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7920:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7922:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7924:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7926:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d792a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d792c:	2201      	movs	r2, #1
   d792e:	f04f 33ff 	mov.w	r3, #4294967295
   d7932:	4621      	mov	r1, r4
   d7934:	47a8      	blx	r5
}
   d7936:	b003      	add	sp, #12
   d7938:	bd30      	pop	{r4, r5, pc}

000d793a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d793a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d793c:	6803      	ldr	r3, [r0, #0]
   d793e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7940:	f04f 33ff 	mov.w	r3, #4294967295
   d7944:	46a4      	mov	ip, r4
}
   d7946:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d794a:	4760      	bx	ip

000d794c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d794c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d794e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7950:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7952:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7956:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7958:	4621      	mov	r1, r4
   d795a:	4613      	mov	r3, r2
   d795c:	2201      	movs	r2, #1
   d795e:	47a8      	blx	r5
}
   d7960:	b003      	add	sp, #12
   d7962:	bd30      	pop	{r4, r5, pc}

000d7964 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7964:	4770      	bx	lr

000d7966 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7966:	b538      	push	{r3, r4, r5, lr}
   d7968:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d796a:	681a      	ldr	r2, [r3, #0]
   d796c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d796e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7970:	da05      	bge.n	d797e <_ZN9TCPClient9connectedEv+0x18>
   d7972:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7976:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d797a:	429a      	cmp	r2, r3
   d797c:	d001      	beq.n	d7982 <_ZN9TCPClient9connectedEv+0x1c>
   d797e:	2501      	movs	r5, #1
   d7980:	e00b      	b.n	d799a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7982:	6803      	ldr	r3, [r0, #0]
   d7984:	691b      	ldr	r3, [r3, #16]
   d7986:	4798      	blx	r3
   d7988:	2800      	cmp	r0, #0
   d798a:	bf14      	ite	ne
   d798c:	2501      	movne	r5, #1
   d798e:	2500      	moveq	r5, #0
        if (!rv) {
   d7990:	d103      	bne.n	d799a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7992:	6823      	ldr	r3, [r4, #0]
   d7994:	4620      	mov	r0, r4
   d7996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7998:	4798      	blx	r3
        }
    }
    return rv;
}
   d799a:	4628      	mov	r0, r5
   d799c:	bd38      	pop	{r3, r4, r5, pc}

000d799e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d799e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d79a0:	6818      	ldr	r0, [r3, #0]
}
   d79a2:	43c0      	mvns	r0, r0
   d79a4:	0fc0      	lsrs	r0, r0, #31
   d79a6:	4770      	bx	lr

000d79a8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d79a8:	4770      	bx	lr

000d79aa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d79aa:	2000      	movs	r0, #0
   d79ac:	4770      	bx	lr

000d79ae <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d79ae:	b510      	push	{r4, lr}
   d79b0:	2114      	movs	r1, #20
   d79b2:	4604      	mov	r4, r0
   d79b4:	f000 fc5a 	bl	d826c <_ZdlPvj>
   d79b8:	4620      	mov	r0, r4
   d79ba:	bd10      	pop	{r4, pc}

000d79bc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d79bc:	f7fc bb6d 	b.w	d409a <_ZdlPv>

000d79c0 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d79c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d79c2:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d79c4:	2200      	movs	r2, #0
   d79c6:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d79c8:	9202      	str	r2, [sp, #8]
   d79ca:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d79cc:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d79ce:	4604      	mov	r4, r0
   d79d0:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d79d2:	d008      	beq.n	d79e6 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d79d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d79d8:	fbb3 f1f2 	udiv	r1, r3, r2
   d79dc:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d79de:	fb02 3111 	mls	r1, r2, r1, r3
   d79e2:	434a      	muls	r2, r1
   d79e4:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d79e6:	6960      	ldr	r0, [r4, #20]
   d79e8:	2308      	movs	r3, #8
   d79ea:	9300      	str	r3, [sp, #0]
   d79ec:	f241 0205 	movw	r2, #4101	; 0x1005
   d79f0:	446b      	add	r3, sp
   d79f2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d79f6:	6800      	ldr	r0, [r0, #0]
   d79f8:	f7ff f890 	bl	d6b1c <sock_setsockopt>
    if (ret < 0) {
   d79fc:	2800      	cmp	r0, #0
   d79fe:	db08      	blt.n	d7a12 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7a00:	6960      	ldr	r0, [r4, #20]
   d7a02:	2300      	movs	r3, #0
   d7a04:	4632      	mov	r2, r6
   d7a06:	4629      	mov	r1, r5
   d7a08:	6800      	ldr	r0, [r0, #0]
   d7a0a:	f7ff f8a7 	bl	d6b5c <sock_send>
    if (ret < 0) {
   d7a0e:	2800      	cmp	r0, #0
   d7a10:	da04      	bge.n	d7a1c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7a12:	f7ff f997 	bl	d6d44 <__errno>
   d7a16:	6803      	ldr	r3, [r0, #0]
   d7a18:	6063      	str	r3, [r4, #4]
   d7a1a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d7a1c:	b004      	add	sp, #16
   d7a1e:	bd70      	pop	{r4, r5, r6, pc}

000d7a20 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7a20:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7a22:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7a24:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7a26:	689b      	ldr	r3, [r3, #8]
   d7a28:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7a2a:	68a3      	ldr	r3, [r4, #8]
   d7a2c:	3b01      	subs	r3, #1
   d7a2e:	60a3      	str	r3, [r4, #8]
   d7a30:	b92b      	cbnz	r3, d7a3e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d7a32:	6823      	ldr	r3, [r4, #0]
   d7a34:	4620      	mov	r0, r4
   d7a36:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d7a3c:	4718      	bx	r3
   d7a3e:	bd10      	pop	{r4, pc}

000d7a40 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7a40:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7a42:	4604      	mov	r4, r0
   d7a44:	694d      	ldr	r5, [r1, #20]
   d7a46:	4b05      	ldr	r3, [pc, #20]	; (d7a5c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7a48:	f844 3b04 	str.w	r3, [r4], #4
   d7a4c:	358c      	adds	r5, #140	; 0x8c
   d7a4e:	4606      	mov	r6, r0
   d7a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7a54:	682b      	ldr	r3, [r5, #0]
   d7a56:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7a58:	4630      	mov	r0, r6
   d7a5a:	bd70      	pop	{r4, r5, r6, pc}
   d7a5c:	000d91d4 	.word	0x000d91d4

000d7a60 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7a60:	b510      	push	{r4, lr}
   d7a62:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7a64:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a68:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7a6c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7a6e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7a70:	d005      	beq.n	d7a7e <_ZN9TCPClient4peekEv+0x1e>
   d7a72:	6962      	ldr	r2, [r4, #20]
   d7a74:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7a78:	4413      	add	r3, r2
   d7a7a:	7918      	ldrb	r0, [r3, #4]
   d7a7c:	bd10      	pop	{r4, pc}
   d7a7e:	6803      	ldr	r3, [r0, #0]
   d7a80:	691b      	ldr	r3, [r3, #16]
   d7a82:	4798      	blx	r3
   d7a84:	2800      	cmp	r0, #0
   d7a86:	d1f4      	bne.n	d7a72 <_ZN9TCPClient4peekEv+0x12>
   d7a88:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7a8c:	bd10      	pop	{r4, pc}

000d7a8e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7a8e:	b510      	push	{r4, lr}
   d7a90:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7a92:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a96:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7a9a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7a9c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7a9e:	d008      	beq.n	d7ab2 <_ZN9TCPClient4readEv+0x24>
   d7aa0:	6962      	ldr	r2, [r4, #20]
   d7aa2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7aa6:	1c59      	adds	r1, r3, #1
   d7aa8:	4413      	add	r3, r2
   d7aaa:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d7aae:	7918      	ldrb	r0, [r3, #4]
   d7ab0:	bd10      	pop	{r4, pc}
   d7ab2:	6803      	ldr	r3, [r0, #0]
   d7ab4:	691b      	ldr	r3, [r3, #16]
   d7ab6:	4798      	blx	r3
   d7ab8:	2800      	cmp	r0, #0
   d7aba:	d1f1      	bne.n	d7aa0 <_ZN9TCPClient4readEv+0x12>
   d7abc:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7ac0:	bd10      	pop	{r4, pc}

000d7ac2 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ac4:	6943      	ldr	r3, [r0, #20]
   d7ac6:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7ac8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7acc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7ad0:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7ad2:	4605      	mov	r5, r0
   d7ad4:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7ad6:	d106      	bne.n	d7ae6 <_ZN9TCPClient4readEPhj+0x24>
   d7ad8:	6803      	ldr	r3, [r0, #0]
   d7ada:	691b      	ldr	r3, [r3, #16]
   d7adc:	4798      	blx	r3
   d7ade:	b910      	cbnz	r0, d7ae6 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7ae0:	f04f 34ff 	mov.w	r4, #4294967295
   d7ae4:	e014      	b.n	d7b10 <_ZN9TCPClient4readEPhj+0x4e>
   d7ae6:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7ae8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7aec:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7af0:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7af2:	42bc      	cmp	r4, r7
   d7af4:	bf28      	it	cs
   d7af6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7af8:	4419      	add	r1, r3
   d7afa:	4622      	mov	r2, r4
   d7afc:	3104      	adds	r1, #4
   d7afe:	4630      	mov	r0, r6
   d7b00:	f000 fd1e 	bl	d8540 <memcpy>
   d7b04:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7b06:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7b0a:	4423      	add	r3, r4
   d7b0c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7b10:	4620      	mov	r0, r4
   d7b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b14 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7b18:	4698      	mov	r8, r3
    stop();
   d7b1a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7b1c:	b093      	sub	sp, #76	; 0x4c
    stop();
   d7b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7b20:	460d      	mov	r5, r1
   d7b22:	4606      	mov	r6, r0
   d7b24:	4617      	mov	r7, r2
    stop();
   d7b26:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d7b28:	ab12      	add	r3, sp, #72	; 0x48
   d7b2a:	2400      	movs	r4, #0
   d7b2c:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7b30:	4622      	mov	r2, r4
   d7b32:	4621      	mov	r1, r4
   d7b34:	4628      	mov	r0, r5
   d7b36:	f7fe fe41 	bl	d67bc <netdb_getaddrinfo>
   d7b3a:	4681      	mov	r9, r0
   d7b3c:	2800      	cmp	r0, #0
   d7b3e:	d13d      	bne.n	d7bbc <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7b40:	9b00      	ldr	r3, [sp, #0]
   d7b42:	2b00      	cmp	r3, #0
   d7b44:	d056      	beq.n	d7bf4 <_ZN9TCPClient7connectEPKctm+0xe0>
   d7b46:	695b      	ldr	r3, [r3, #20]
   d7b48:	2b00      	cmp	r3, #0
   d7b4a:	d053      	beq.n	d7bf4 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d7b4c:	a806      	add	r0, sp, #24
   d7b4e:	f7ff fc45 	bl	d73dc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7b52:	9b00      	ldr	r3, [sp, #0]
   d7b54:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7b56:	7863      	ldrb	r3, [r4, #1]
   d7b58:	2b02      	cmp	r3, #2
   d7b5a:	d101      	bne.n	d7b60 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7b5c:	1d21      	adds	r1, r4, #4
   d7b5e:	e013      	b.n	d7b88 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7b60:	2b0a      	cmp	r3, #10
   d7b62:	d114      	bne.n	d7b8e <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7b64:	2211      	movs	r2, #17
   d7b66:	4649      	mov	r1, r9
   d7b68:	a801      	add	r0, sp, #4
   d7b6a:	f000 fcf4 	bl	d8556 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7b6e:	68a3      	ldr	r3, [r4, #8]
   d7b70:	bb33      	cbnz	r3, d7bc0 <_ZN9TCPClient7connectEPKctm+0xac>
   d7b72:	68e3      	ldr	r3, [r4, #12]
   d7b74:	bb23      	cbnz	r3, d7bc0 <_ZN9TCPClient7connectEPKctm+0xac>
   d7b76:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7b7a:	6925      	ldr	r5, [r4, #16]
   d7b7c:	f7fe ff1e 	bl	d69bc <inet_htonl>
   d7b80:	4285      	cmp	r5, r0
   d7b82:	d11d      	bne.n	d7bc0 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7b84:	f104 0114 	add.w	r1, r4, #20
   d7b88:	a806      	add	r0, sp, #24
   d7b8a:	f7ff fc6a 	bl	d7462 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7b8e:	a806      	add	r0, sp, #24
   d7b90:	f7ff fc44 	bl	d741c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7b94:	2800      	cmp	r0, #0
   d7b96:	d02d      	beq.n	d7bf4 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7b98:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7b9a:	ad07      	add	r5, sp, #28
   d7b9c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7ba0:	4b18      	ldr	r3, [pc, #96]	; (d7c04 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d7ba2:	930c      	str	r3, [sp, #48]	; 0x30
   d7ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ba6:	ac0d      	add	r4, sp, #52	; 0x34
   d7ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7baa:	682b      	ldr	r3, [r5, #0]
   d7bac:	7023      	strb	r3, [r4, #0]
   d7bae:	463a      	mov	r2, r7
   d7bb0:	4643      	mov	r3, r8
   d7bb2:	a90c      	add	r1, sp, #48	; 0x30
   d7bb4:	4630      	mov	r0, r6
   d7bb6:	47c8      	blx	r9
   d7bb8:	4681      	mov	r9, r0
   d7bba:	e01b      	b.n	d7bf4 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7bbc:	46a1      	mov	r9, r4
   d7bbe:	e019      	b.n	d7bf4 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7bc0:	f104 0308 	add.w	r3, r4, #8
   d7bc4:	ad01      	add	r5, sp, #4
   d7bc6:	3418      	adds	r4, #24
   d7bc8:	6818      	ldr	r0, [r3, #0]
   d7bca:	6859      	ldr	r1, [r3, #4]
   d7bcc:	462a      	mov	r2, r5
   d7bce:	c203      	stmia	r2!, {r0, r1}
   d7bd0:	3308      	adds	r3, #8
   d7bd2:	42a3      	cmp	r3, r4
   d7bd4:	4615      	mov	r5, r2
   d7bd6:	d1f7      	bne.n	d7bc8 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7bd8:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7bda:	a901      	add	r1, sp, #4
   d7bdc:	a80c      	add	r0, sp, #48	; 0x30
   d7bde:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7be0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7be4:	f7ff fc08 	bl	d73f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7bea:	ac07      	add	r4, sp, #28
   d7bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7bee:	682b      	ldr	r3, [r5, #0]
   d7bf0:	7023      	strb	r3, [r4, #0]
   d7bf2:	e7cc      	b.n	d7b8e <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7bf4:	9800      	ldr	r0, [sp, #0]
   d7bf6:	f7fe fdd9 	bl	d67ac <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d7bfa:	4648      	mov	r0, r9
   d7bfc:	b013      	add	sp, #76	; 0x4c
   d7bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7c02:	bf00      	nop
   d7c04:	000d91d4 	.word	0x000d91d4

000d7c08 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7c08:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7c0a:	2300      	movs	r3, #0
   d7c0c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7c10:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7c12:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7c16:	4770      	bx	lr

000d7c18 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7c1c:	461e      	mov	r6, r3
    stop();
   d7c1e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7c20:	460c      	mov	r4, r1
   d7c22:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7c26:	4605      	mov	r5, r0
   d7c28:	4617      	mov	r7, r2
    stop();
   d7c2a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7c2c:	7d23      	ldrb	r3, [r4, #20]
   d7c2e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7c32:	2b04      	cmp	r3, #4
   d7c34:	bf0c      	ite	eq
   d7c36:	2002      	moveq	r0, #2
   d7c38:	200a      	movne	r0, #10
   d7c3a:	2206      	movs	r2, #6
   d7c3c:	2101      	movs	r1, #1
   d7c3e:	f7fe ff95 	bl	d6b6c <sock_socket>
   d7c42:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7c46:	696b      	ldr	r3, [r5, #20]
   d7c48:	681b      	ldr	r3, [r3, #0]
   d7c4a:	2b00      	cmp	r3, #0
   d7c4c:	db18      	blt.n	d7c80 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d7c4e:	4628      	mov	r0, r5
   d7c50:	f7ff ffda 	bl	d7c08 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7c54:	b1d6      	cbz	r6, d7c8c <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d7c56:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7c58:	a903      	add	r1, sp, #12
   d7c5a:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7c5c:	9303      	str	r3, [sp, #12]
   d7c5e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7c62:	f7fe fe53 	bl	d690c <if_index_to_name>
   d7c66:	b958      	cbnz	r0, d7c80 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7c68:	6968      	ldr	r0, [r5, #20]
   d7c6a:	2306      	movs	r3, #6
   d7c6c:	9300      	str	r3, [sp, #0]
   d7c6e:	f241 020b 	movw	r2, #4107	; 0x100b
   d7c72:	ab03      	add	r3, sp, #12
   d7c74:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7c78:	6800      	ldr	r0, [r0, #0]
   d7c7a:	f7fe ff4f 	bl	d6b1c <sock_setsockopt>
   d7c7e:	b128      	cbz	r0, d7c8c <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7c80:	682b      	ldr	r3, [r5, #0]
   d7c82:	4628      	mov	r0, r5
   d7c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7c86:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7c88:	4798      	blx	r3
   d7c8a:	e03b      	b.n	d7d04 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7c8c:	261c      	movs	r6, #28
   d7c8e:	4632      	mov	r2, r6
   d7c90:	2100      	movs	r1, #0
   d7c92:	a803      	add	r0, sp, #12
   d7c94:	f000 fc5f 	bl	d8556 <memset>
    if (ip.version() == 4) {
   d7c98:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7c9a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d7c9e:	2b04      	cmp	r3, #4
   d7ca0:	d10c      	bne.n	d7cbc <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7ca2:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7ca4:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7ca6:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7caa:	f7fe fe8f 	bl	d69cc <inet_htons>
   d7cae:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7cb2:	6860      	ldr	r0, [r4, #4]
   d7cb4:	f7fe fe82 	bl	d69bc <inet_htonl>
   d7cb8:	9004      	str	r0, [sp, #16]
   d7cba:	e013      	b.n	d7ce4 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7cbc:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7cbe:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7cc0:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7cc4:	f7fe fe82 	bl	d69cc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7cc8:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7cca:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7cce:	1d23      	adds	r3, r4, #4
   d7cd0:	f104 0714 	add.w	r7, r4, #20
   d7cd4:	6818      	ldr	r0, [r3, #0]
   d7cd6:	6859      	ldr	r1, [r3, #4]
   d7cd8:	4632      	mov	r2, r6
   d7cda:	c203      	stmia	r2!, {r0, r1}
   d7cdc:	3308      	adds	r3, #8
   d7cde:	42bb      	cmp	r3, r7
   d7ce0:	4616      	mov	r6, r2
   d7ce2:	d1f7      	bne.n	d7cd4 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7ce4:	696b      	ldr	r3, [r5, #20]
   d7ce6:	221c      	movs	r2, #28
   d7ce8:	a903      	add	r1, sp, #12
   d7cea:	6818      	ldr	r0, [r3, #0]
   d7cec:	f7fe ff26 	bl	d6b3c <sock_connect>
   d7cf0:	2800      	cmp	r0, #0
   d7cf2:	d1c5      	bne.n	d7c80 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d7cf4:	3404      	adds	r4, #4
   d7cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7cf8:	696d      	ldr	r5, [r5, #20]
   d7cfa:	358c      	adds	r5, #140	; 0x8c
   d7cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7cfe:	6823      	ldr	r3, [r4, #0]
   d7d00:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d7d02:	2401      	movs	r4, #1
}
   d7d04:	4620      	mov	r0, r4
   d7d06:	b00a      	add	sp, #40	; 0x28
   d7d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7d0c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7d0c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7d0e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7d10:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7d12:	6818      	ldr	r0, [r3, #0]
   d7d14:	2800      	cmp	r0, #0
   d7d16:	db01      	blt.n	d7d1c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7d18:	f7fe ff08 	bl	d6b2c <sock_close>
   d7d1c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7d1e:	f04f 32ff 	mov.w	r2, #4294967295
   d7d22:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7d24:	6960      	ldr	r0, [r4, #20]
   d7d26:	2211      	movs	r2, #17
   d7d28:	2100      	movs	r1, #0
   d7d2a:	308c      	adds	r0, #140	; 0x8c
   d7d2c:	f000 fc13 	bl	d8556 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7d30:	4620      	mov	r0, r4
}
   d7d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7d36:	f7ff bf67 	b.w	d7c08 <_ZN9TCPClient12flush_bufferEv>
	...

000d7d3c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7d3c:	b530      	push	{r4, r5, lr}
   d7d3e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7d40:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7d44:	b08b      	sub	sp, #44	; 0x2c
   d7d46:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7d48:	b11b      	cbz	r3, d7d52 <_ZN9TCPClient9availableEv+0x16>
   d7d4a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7d4e:	429a      	cmp	r2, r3
   d7d50:	d040      	beq.n	d7dd4 <_ZN9TCPClient9availableEv+0x98>
   d7d52:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7d54:	6818      	ldr	r0, [r3, #0]
   d7d56:	2800      	cmp	r0, #0
   d7d58:	db3f      	blt.n	d7dda <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7d5a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7d5e:	2d7f      	cmp	r5, #127	; 0x7f
   d7d60:	d83b      	bhi.n	d7dda <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7d62:	1d19      	adds	r1, r3, #4
   d7d64:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7d68:	2308      	movs	r3, #8
   d7d6a:	4429      	add	r1, r5
   d7d6c:	f7fe feee 	bl	d6b4c <sock_recv>
            if (ret > 0) {
   d7d70:	2800      	cmp	r0, #0
   d7d72:	dd0c      	ble.n	d7d8e <_ZN9TCPClient9availableEv+0x52>
   d7d74:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7d76:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7d7a:	b90a      	cbnz	r2, d7d80 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7d7c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7d80:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7d82:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7d86:	4418      	add	r0, r3
   d7d88:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7d8c:	e025      	b.n	d7dda <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7d8e:	f7fe ffd9 	bl	d6d44 <__errno>
   d7d92:	6803      	ldr	r3, [r0, #0]
   d7d94:	2b0b      	cmp	r3, #11
   d7d96:	d020      	beq.n	d7dda <_ZN9TCPClient9availableEv+0x9e>
   d7d98:	f7fe ffd4 	bl	d6d44 <__errno>
   d7d9c:	6803      	ldr	r3, [r0, #0]
   d7d9e:	2b0b      	cmp	r3, #11
   d7da0:	d01b      	beq.n	d7dda <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7da2:	2320      	movs	r3, #32
   d7da4:	2500      	movs	r5, #0
   d7da6:	9302      	str	r3, [sp, #8]
   d7da8:	9503      	str	r5, [sp, #12]
   d7daa:	f7fe ffcb 	bl	d6d44 <__errno>
   d7dae:	6803      	ldr	r3, [r0, #0]
   d7db0:	9301      	str	r3, [sp, #4]
   d7db2:	4b0e      	ldr	r3, [pc, #56]	; (d7dec <_ZN9TCPClient9availableEv+0xb0>)
   d7db4:	9300      	str	r3, [sp, #0]
   d7db6:	aa02      	add	r2, sp, #8
   d7db8:	462b      	mov	r3, r5
   d7dba:	490d      	ldr	r1, [pc, #52]	; (d7df0 <_ZN9TCPClient9availableEv+0xb4>)
   d7dbc:	2032      	movs	r0, #50	; 0x32
   d7dbe:	f7fe ff1d 	bl	d6bfc <log_message>
                    sock_close(d_->sock);
   d7dc2:	6963      	ldr	r3, [r4, #20]
   d7dc4:	6818      	ldr	r0, [r3, #0]
   d7dc6:	f7fe feb1 	bl	d6b2c <sock_close>
   d7dca:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7dcc:	f04f 32ff 	mov.w	r2, #4294967295
   d7dd0:	601a      	str	r2, [r3, #0]
   d7dd2:	e002      	b.n	d7dda <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7dd4:	f7ff ff18 	bl	d7c08 <_ZN9TCPClient12flush_bufferEv>
   d7dd8:	e7bb      	b.n	d7d52 <_ZN9TCPClient9availableEv+0x16>
   d7dda:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7ddc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7de0:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7de4:	1a18      	subs	r0, r3, r0
}
   d7de6:	b00b      	add	sp, #44	; 0x2c
   d7de8:	bd30      	pop	{r4, r5, pc}
   d7dea:	bf00      	nop
   d7dec:	000d930b 	.word	0x000d930b
   d7df0:	000d9304 	.word	0x000d9304

000d7df4 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7df4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7df6:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7df8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d7dfa:	6001      	str	r1, [r0, #0]
   d7dfc:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7e00:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7e04:	3088      	adds	r0, #136	; 0x88
   d7e06:	f7ff fae9 	bl	d73dc <_ZN9IPAddressC1Ev>
}
   d7e0a:	4620      	mov	r0, r4
   d7e0c:	bd10      	pop	{r4, pc}
	...

000d7e10 <_ZN9TCPClientC1Ei>:
   d7e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7e14:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7e16:	2300      	movs	r3, #0
   d7e18:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d7e1a:	4a14      	ldr	r2, [pc, #80]	; (d7e6c <_ZN9TCPClientC1Ei+0x5c>)
   d7e1c:	6043      	str	r3, [r0, #4]
   d7e1e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7e20:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7e22:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7e24:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7e26:	20a0      	movs	r0, #160	; 0xa0
   d7e28:	460e      	mov	r6, r1
   d7e2a:	f7fc f934 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7e2e:	4605      	mov	r5, r0
   d7e30:	b110      	cbz	r0, d7e38 <_ZN9TCPClientC1Ei+0x28>
   d7e32:	4631      	mov	r1, r6
   d7e34:	f7ff ffde 	bl	d7df4 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7e38:	2014      	movs	r0, #20
   d7e3a:	f7fc f92c 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7e3e:	4603      	mov	r3, r0
   d7e40:	b128      	cbz	r0, d7e4e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7e42:	2201      	movs	r2, #1
   d7e44:	6042      	str	r2, [r0, #4]
   d7e46:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7e48:	4a09      	ldr	r2, [pc, #36]	; (d7e70 <_ZN9TCPClientC1Ei+0x60>)
   d7e4a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7e4c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7e4e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7e50:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7e52:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7e54:	b128      	cbz	r0, d7e62 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7e56:	6843      	ldr	r3, [r0, #4]
   d7e58:	3b01      	subs	r3, #1
   d7e5a:	6043      	str	r3, [r0, #4]
   d7e5c:	b90b      	cbnz	r3, d7e62 <_ZN9TCPClientC1Ei+0x52>
   d7e5e:	f7ff fddf 	bl	d7a20 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d7e62:	4620      	mov	r0, r4
   d7e64:	f7ff fed0 	bl	d7c08 <_ZN9TCPClient12flush_bufferEv>
}
   d7e68:	4620      	mov	r0, r4
   d7e6a:	bd70      	pop	{r4, r5, r6, pc}
   d7e6c:	000d92c0 	.word	0x000d92c0
   d7e70:	000d92a4 	.word	0x000d92a4

000d7e74 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7e74:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7e76:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7e7a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7e7c:	f7ff ffc8 	bl	d7e10 <_ZN9TCPClientC1Ei>
}
   d7e80:	4620      	mov	r0, r4
   d7e82:	bd10      	pop	{r4, pc}

000d7e84 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7e84:	b510      	push	{r4, lr}
   d7e86:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7e88:	6800      	ldr	r0, [r0, #0]
   d7e8a:	2800      	cmp	r0, #0
   d7e8c:	db01      	blt.n	d7e92 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7e8e:	f7fe fe4d 	bl	d6b2c <sock_close>
    }
}
   d7e92:	4620      	mov	r0, r4
   d7e94:	bd10      	pop	{r4, pc}

000d7e96 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7e96:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7e98:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d7e9a:	4620      	mov	r0, r4
   d7e9c:	f7ff fff2 	bl	d7e84 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7ea0:	b124      	cbz	r4, d7eac <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7ea2:	4620      	mov	r0, r4
   d7ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7ea8:	f7fc b8f7 	b.w	d409a <_ZdlPv>
   d7eac:	bd10      	pop	{r4, pc}

000d7eae <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7eae:	2200      	movs	r2, #0
   d7eb0:	4611      	mov	r1, r2
   d7eb2:	6840      	ldr	r0, [r0, #4]
   d7eb4:	f7fe bee6 	b.w	d6c84 <network_ready>

000d7eb8 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7eb8:	2200      	movs	r2, #0
   d7eba:	4611      	mov	r1, r2
   d7ebc:	6840      	ldr	r0, [r0, #4]
   d7ebe:	f7fe bf01 	b.w	d6cc4 <network_listening>

000d7ec2 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7ec2:	2200      	movs	r2, #0
   d7ec4:	4611      	mov	r1, r2
   d7ec6:	6840      	ldr	r0, [r0, #4]
   d7ec8:	f7fe bf0c 	b.w	d6ce4 <network_get_listen_timeout>

000d7ecc <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7ecc:	2200      	movs	r2, #0
   d7ece:	6840      	ldr	r0, [r0, #4]
   d7ed0:	f7fe bf00 	b.w	d6cd4 <network_set_listen_timeout>

000d7ed4 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7ed4:	2200      	movs	r2, #0
   d7ed6:	f081 0101 	eor.w	r1, r1, #1
   d7eda:	6840      	ldr	r0, [r0, #4]
   d7edc:	f7fe beea 	b.w	d6cb4 <network_listen>

000d7ee0 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7ee0:	2300      	movs	r3, #0
   d7ee2:	461a      	mov	r2, r3
   d7ee4:	4619      	mov	r1, r3
   d7ee6:	6840      	ldr	r0, [r0, #4]
   d7ee8:	f7fe bedc 	b.w	d6ca4 <network_off>

000d7eec <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7eec:	2300      	movs	r3, #0
   d7eee:	461a      	mov	r2, r3
   d7ef0:	4619      	mov	r1, r3
   d7ef2:	6840      	ldr	r0, [r0, #4]
   d7ef4:	f7fe bece 	b.w	d6c94 <network_on>

000d7ef8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7ef8:	2200      	movs	r2, #0
   d7efa:	4611      	mov	r1, r2
   d7efc:	6840      	ldr	r0, [r0, #4]
   d7efe:	f7fe beb1 	b.w	d6c64 <network_connecting>

000d7f02 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7f02:	2200      	movs	r2, #0
   d7f04:	2102      	movs	r1, #2
   d7f06:	6840      	ldr	r0, [r0, #4]
   d7f08:	f7fe beb4 	b.w	d6c74 <network_disconnect>

000d7f0c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7f0c:	2300      	movs	r3, #0
   d7f0e:	461a      	mov	r2, r3
   d7f10:	6840      	ldr	r0, [r0, #4]
   d7f12:	f7fe be9f 	b.w	d6c54 <network_connect>
	...

000d7f18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7f18:	4b02      	ldr	r3, [pc, #8]	; (d7f24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7f1a:	2204      	movs	r2, #4
   d7f1c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7f1e:	4a02      	ldr	r2, [pc, #8]	; (d7f28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7f20:	601a      	str	r2, [r3, #0]
   d7f22:	4770      	bx	lr
   d7f24:	2003e720 	.word	0x2003e720
   d7f28:	000d9324 	.word	0x000d9324

000d7f2c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7f2c:	2300      	movs	r3, #0
   d7f2e:	461a      	mov	r2, r3
   d7f30:	6840      	ldr	r0, [r0, #4]
   d7f32:	f7fe be8f 	b.w	d6c54 <network_connect>

000d7f36 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7f36:	2200      	movs	r2, #0
   d7f38:	2102      	movs	r1, #2
   d7f3a:	6840      	ldr	r0, [r0, #4]
   d7f3c:	f7fe be9a 	b.w	d6c74 <network_disconnect>

000d7f40 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7f40:	2200      	movs	r2, #0
   d7f42:	4611      	mov	r1, r2
   d7f44:	6840      	ldr	r0, [r0, #4]
   d7f46:	f7fe be8d 	b.w	d6c64 <network_connecting>

000d7f4a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7f4a:	2200      	movs	r2, #0
   d7f4c:	4611      	mov	r1, r2
   d7f4e:	6840      	ldr	r0, [r0, #4]
   d7f50:	f7fe be98 	b.w	d6c84 <network_ready>

000d7f54 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7f54:	2300      	movs	r3, #0
   d7f56:	461a      	mov	r2, r3
   d7f58:	4619      	mov	r1, r3
   d7f5a:	6840      	ldr	r0, [r0, #4]
   d7f5c:	f7fe be9a 	b.w	d6c94 <network_on>

000d7f60 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7f60:	2300      	movs	r3, #0
   d7f62:	461a      	mov	r2, r3
   d7f64:	4619      	mov	r1, r3
   d7f66:	6840      	ldr	r0, [r0, #4]
   d7f68:	f7fe be9c 	b.w	d6ca4 <network_off>

000d7f6c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7f6c:	2200      	movs	r2, #0
   d7f6e:	f081 0101 	eor.w	r1, r1, #1
   d7f72:	6840      	ldr	r0, [r0, #4]
   d7f74:	f7fe be9e 	b.w	d6cb4 <network_listen>

000d7f78 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7f78:	2200      	movs	r2, #0
   d7f7a:	6840      	ldr	r0, [r0, #4]
   d7f7c:	f7fe beaa 	b.w	d6cd4 <network_set_listen_timeout>

000d7f80 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7f80:	2200      	movs	r2, #0
   d7f82:	4611      	mov	r1, r2
   d7f84:	6840      	ldr	r0, [r0, #4]
   d7f86:	f7fe bead 	b.w	d6ce4 <network_get_listen_timeout>

000d7f8a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7f8a:	2200      	movs	r2, #0
   d7f8c:	4611      	mov	r1, r2
   d7f8e:	6840      	ldr	r0, [r0, #4]
   d7f90:	f7fe be98 	b.w	d6cc4 <network_listening>

000d7f94 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7f98:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7f9a:	b095      	sub	sp, #84	; 0x54
   d7f9c:	4616      	mov	r6, r2
   d7f9e:	460d      	mov	r5, r1
   d7fa0:	4607      	mov	r7, r0
    IPAddress addr;
   d7fa2:	f7ff fa1b 	bl	d73dc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7fa6:	4621      	mov	r1, r4
   d7fa8:	2220      	movs	r2, #32
   d7faa:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7fac:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7fae:	f000 fad2 	bl	d8556 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7fb2:	2340      	movs	r3, #64	; 0x40
   d7fb4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7fb6:	4621      	mov	r1, r4
   d7fb8:	466b      	mov	r3, sp
   d7fba:	aa0c      	add	r2, sp, #48	; 0x30
   d7fbc:	4630      	mov	r0, r6
   d7fbe:	f7fe fbfd 	bl	d67bc <netdb_getaddrinfo>
    if (!r) {
   d7fc2:	4604      	mov	r4, r0
   d7fc4:	2800      	cmp	r0, #0
   d7fc6:	d144      	bne.n	d8052 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7fc8:	4602      	mov	r2, r0
   d7fca:	2101      	movs	r1, #1
   d7fcc:	6868      	ldr	r0, [r5, #4]
   d7fce:	f7fe fe59 	bl	d6c84 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fd2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7fd4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fd6:	4622      	mov	r2, r4
   d7fd8:	6868      	ldr	r0, [r5, #4]
   d7fda:	f7fe fe53 	bl	d6c84 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fde:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fe0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7fe2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fe4:	2e00      	cmp	r6, #0
   d7fe6:	d034      	beq.n	d8052 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7fe8:	2900      	cmp	r1, #0
   d7fea:	d132      	bne.n	d8052 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7fec:	6873      	ldr	r3, [r6, #4]
   d7fee:	2b02      	cmp	r3, #2
   d7ff0:	d002      	beq.n	d7ff8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7ff2:	2b0a      	cmp	r3, #10
   d7ff4:	d009      	beq.n	d800a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7ff6:	e02a      	b.n	d804e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7ff8:	f1b8 0f00 	cmp.w	r8, #0
   d7ffc:	d027      	beq.n	d804e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7ffe:	6971      	ldr	r1, [r6, #20]
   d8000:	4638      	mov	r0, r7
   d8002:	3104      	adds	r1, #4
   d8004:	f7ff fa2d 	bl	d7462 <_ZN9IPAddressaSEPKh>
   d8008:	e020      	b.n	d804c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d800a:	f1b9 0f00 	cmp.w	r9, #0
   d800e:	d01e      	beq.n	d804e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8010:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8012:	2211      	movs	r2, #17
   d8014:	a801      	add	r0, sp, #4
   d8016:	f000 fa9e 	bl	d8556 <memset>
                    a.v = 6;
   d801a:	2306      	movs	r3, #6
   d801c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8020:	ad01      	add	r5, sp, #4
   d8022:	f104 0308 	add.w	r3, r4, #8
   d8026:	3418      	adds	r4, #24
   d8028:	6818      	ldr	r0, [r3, #0]
   d802a:	6859      	ldr	r1, [r3, #4]
   d802c:	462a      	mov	r2, r5
   d802e:	c203      	stmia	r2!, {r0, r1}
   d8030:	3308      	adds	r3, #8
   d8032:	42a3      	cmp	r3, r4
   d8034:	4615      	mov	r5, r2
   d8036:	d1f7      	bne.n	d8028 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8038:	a901      	add	r1, sp, #4
   d803a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d803c:	ad07      	add	r5, sp, #28
   d803e:	f7ff f9db 	bl	d73f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8044:	1d3c      	adds	r4, r7, #4
   d8046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8048:	682b      	ldr	r3, [r5, #0]
   d804a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d804c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d804e:	69f6      	ldr	r6, [r6, #28]
   d8050:	e7c8      	b.n	d7fe4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8052:	9800      	ldr	r0, [sp, #0]
   d8054:	f7fe fbaa 	bl	d67ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8058:	4638      	mov	r0, r7
   d805a:	b015      	add	sp, #84	; 0x54
   d805c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8060 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8060:	4b02      	ldr	r3, [pc, #8]	; (d806c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8062:	4a03      	ldr	r2, [pc, #12]	; (d8070 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8064:	601a      	str	r2, [r3, #0]
   d8066:	2200      	movs	r2, #0
   d8068:	605a      	str	r2, [r3, #4]
   d806a:	4770      	bx	lr
   d806c:	2003e728 	.word	0x2003e728
   d8070:	000d9358 	.word	0x000d9358

000d8074 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8074:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8076:	4e18      	ldr	r6, [pc, #96]	; (d80d8 <pinAvailable+0x64>)
   d8078:	6831      	ldr	r1, [r6, #0]
   d807a:	f011 0501 	ands.w	r5, r1, #1
   d807e:	4604      	mov	r4, r0
   d8080:	d10a      	bne.n	d8098 <pinAvailable+0x24>
   d8082:	4630      	mov	r0, r6
   d8084:	f7fc f818 	bl	d40b8 <__cxa_guard_acquire>
   d8088:	b130      	cbz	r0, d8098 <pinAvailable+0x24>
   d808a:	4629      	mov	r1, r5
   d808c:	4813      	ldr	r0, [pc, #76]	; (d80dc <pinAvailable+0x68>)
   d808e:	f7fe fea5 	bl	d6ddc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8092:	4630      	mov	r0, r6
   d8094:	f7fc f815 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8098:	4810      	ldr	r0, [pc, #64]	; (d80dc <pinAvailable+0x68>)
   d809a:	f7fe ffd4 	bl	d7046 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d809e:	b128      	cbz	r0, d80ac <pinAvailable+0x38>
   d80a0:	f1a4 030b 	sub.w	r3, r4, #11
   d80a4:	2b02      	cmp	r3, #2
   d80a6:	d801      	bhi.n	d80ac <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d80a8:	2000      	movs	r0, #0
   d80aa:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d80ac:	f000 f8aa 	bl	d8204 <_Z19__fetch_global_Wirev>
   d80b0:	f7ff fb75 	bl	d779e <_ZN7TwoWire9isEnabledEv>
   d80b4:	b108      	cbz	r0, d80ba <pinAvailable+0x46>
   d80b6:	2c01      	cmp	r4, #1
   d80b8:	d9f6      	bls.n	d80a8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d80ba:	f7ff fac7 	bl	d764c <_Z22__fetch_global_Serial1v>
   d80be:	f7ff fac2 	bl	d7646 <_ZN11USARTSerial9isEnabledEv>
   d80c2:	b118      	cbz	r0, d80cc <pinAvailable+0x58>
   d80c4:	f1a4 0309 	sub.w	r3, r4, #9
   d80c8:	2b01      	cmp	r3, #1
   d80ca:	d9ed      	bls.n	d80a8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d80cc:	2c23      	cmp	r4, #35	; 0x23
   d80ce:	bf8c      	ite	hi
   d80d0:	2000      	movhi	r0, #0
   d80d2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d80d4:	bd70      	pop	{r4, r5, r6, pc}
   d80d6:	bf00      	nop
   d80d8:	2003dcfc 	.word	0x2003dcfc
   d80dc:	2003dd00 	.word	0x2003dd00

000d80e0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d80e0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d80e2:	b538      	push	{r3, r4, r5, lr}
   d80e4:	4604      	mov	r4, r0
   d80e6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d80e8:	d80a      	bhi.n	d8100 <pinMode+0x20>
   d80ea:	29ff      	cmp	r1, #255	; 0xff
   d80ec:	d008      	beq.n	d8100 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d80ee:	f7ff ffc1 	bl	d8074 <pinAvailable>
   d80f2:	b128      	cbz	r0, d8100 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d80f4:	4629      	mov	r1, r5
   d80f6:	4620      	mov	r0, r4
}
   d80f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d80fc:	f7fe bb76 	b.w	d67ec <HAL_Pin_Mode>
   d8100:	bd38      	pop	{r3, r4, r5, pc}

000d8102 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8102:	b538      	push	{r3, r4, r5, lr}
   d8104:	4604      	mov	r4, r0
   d8106:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8108:	f7fe fb78 	bl	d67fc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d810c:	28ff      	cmp	r0, #255	; 0xff
   d810e:	d010      	beq.n	d8132 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8110:	2806      	cmp	r0, #6
   d8112:	d804      	bhi.n	d811e <digitalWrite+0x1c>
   d8114:	234d      	movs	r3, #77	; 0x4d
   d8116:	fa23 f000 	lsr.w	r0, r3, r0
   d811a:	07c3      	lsls	r3, r0, #31
   d811c:	d409      	bmi.n	d8132 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d811e:	4620      	mov	r0, r4
   d8120:	f7ff ffa8 	bl	d8074 <pinAvailable>
   d8124:	b128      	cbz	r0, d8132 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8126:	4629      	mov	r1, r5
   d8128:	4620      	mov	r0, r4
}
   d812a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d812e:	f7fe bb6d 	b.w	d680c <HAL_GPIO_Write>
   d8132:	bd38      	pop	{r3, r4, r5, pc}

000d8134 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8134:	b510      	push	{r4, lr}
   d8136:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8138:	f7fe fb60 	bl	d67fc <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d813c:	3804      	subs	r0, #4
   d813e:	b2c0      	uxtb	r0, r0
   d8140:	2801      	cmp	r0, #1
   d8142:	d908      	bls.n	d8156 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8144:	4620      	mov	r0, r4
   d8146:	f7ff ff95 	bl	d8074 <pinAvailable>
   d814a:	b120      	cbz	r0, d8156 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d814c:	4620      	mov	r0, r4
}
   d814e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8152:	f7fe bb63 	b.w	d681c <HAL_GPIO_Read>
}
   d8156:	2000      	movs	r0, #0
   d8158:	bd10      	pop	{r4, pc}

000d815a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d815a:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d815c:	b510      	push	{r4, lr}
   d815e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8160:	bf9c      	itt	ls
   d8162:	340e      	addls	r4, #14
   d8164:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8166:	4620      	mov	r0, r4
   d8168:	f7ff ff84 	bl	d8074 <pinAvailable>
   d816c:	b150      	cbz	r0, d8184 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d816e:	2103      	movs	r1, #3
   d8170:	4620      	mov	r0, r4
   d8172:	f7fe fb33 	bl	d67dc <HAL_Validate_Pin_Function>
   d8176:	2803      	cmp	r0, #3
   d8178:	d104      	bne.n	d8184 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d817a:	4620      	mov	r0, r4
}
   d817c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8180:	f7fe bb54 	b.w	d682c <HAL_ADC_Read>
}
   d8184:	2000      	movs	r0, #0
   d8186:	bd10      	pop	{r4, pc}

000d8188 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d8188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d818c:	4690      	mov	r8, r2
   d818e:	461e      	mov	r6, r3
   d8190:	2407      	movs	r4, #7
   d8192:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d8194:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d8196:	f1b8 0f00 	cmp.w	r8, #0
   d819a:	d104      	bne.n	d81a6 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d819c:	f1c4 0107 	rsb	r1, r4, #7
   d81a0:	fa46 f101 	asr.w	r1, r6, r1
   d81a4:	e001      	b.n	d81aa <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d81a6:	fa46 f104 	asr.w	r1, r6, r4
   d81aa:	f001 0101 	and.w	r1, r1, #1
   d81ae:	4638      	mov	r0, r7
   d81b0:	f7ff ffa7 	bl	d8102 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d81b4:	2101      	movs	r1, #1
   d81b6:	4628      	mov	r0, r5
   d81b8:	f7ff ffa3 	bl	d8102 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d81bc:	2100      	movs	r1, #0
   d81be:	4628      	mov	r0, r5
   d81c0:	f7ff ff9f 	bl	d8102 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d81c4:	f114 34ff 	adds.w	r4, r4, #4294967295
   d81c8:	d2e5      	bcs.n	d8196 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d81ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d81d0 <_Z17acquireWireBufferv>:
   d81d0:	b570      	push	{r4, r5, r6, lr}
   d81d2:	4604      	mov	r4, r0
   d81d4:	2514      	movs	r5, #20
   d81d6:	462a      	mov	r2, r5
   d81d8:	4e09      	ldr	r6, [pc, #36]	; (d8200 <_Z17acquireWireBufferv+0x30>)
   d81da:	2100      	movs	r1, #0
   d81dc:	f000 f9bb 	bl	d8556 <memset>
   d81e0:	8025      	strh	r5, [r4, #0]
   d81e2:	2520      	movs	r5, #32
   d81e4:	4631      	mov	r1, r6
   d81e6:	60a5      	str	r5, [r4, #8]
   d81e8:	6125      	str	r5, [r4, #16]
   d81ea:	4628      	mov	r0, r5
   d81ec:	f000 f840 	bl	d8270 <_ZnajRKSt9nothrow_t>
   d81f0:	4631      	mov	r1, r6
   d81f2:	6060      	str	r0, [r4, #4]
   d81f4:	4628      	mov	r0, r5
   d81f6:	f000 f83b 	bl	d8270 <_ZnajRKSt9nothrow_t>
   d81fa:	60e0      	str	r0, [r4, #12]
   d81fc:	4620      	mov	r0, r4
   d81fe:	bd70      	pop	{r4, r5, r6, pc}
   d8200:	000d9384 	.word	0x000d9384

000d8204 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8204:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8206:	4d0e      	ldr	r5, [pc, #56]	; (d8240 <_Z19__fetch_global_Wirev+0x3c>)
   d8208:	6829      	ldr	r1, [r5, #0]
   d820a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d820e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8210:	d113      	bne.n	d823a <_Z19__fetch_global_Wirev+0x36>
   d8212:	4628      	mov	r0, r5
   d8214:	f7fb ff50 	bl	d40b8 <__cxa_guard_acquire>
   d8218:	b178      	cbz	r0, d823a <_Z19__fetch_global_Wirev+0x36>
   d821a:	a801      	add	r0, sp, #4
   d821c:	f7ff ffd8 	bl	d81d0 <_Z17acquireWireBufferv>
   d8220:	aa01      	add	r2, sp, #4
   d8222:	4621      	mov	r1, r4
   d8224:	4807      	ldr	r0, [pc, #28]	; (d8244 <_Z19__fetch_global_Wirev+0x40>)
   d8226:	f7ff fa63 	bl	d76f0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d822a:	4628      	mov	r0, r5
   d822c:	f7fb ff49 	bl	d40c2 <__cxa_guard_release>
   d8230:	4a05      	ldr	r2, [pc, #20]	; (d8248 <_Z19__fetch_global_Wirev+0x44>)
   d8232:	4906      	ldr	r1, [pc, #24]	; (d824c <_Z19__fetch_global_Wirev+0x48>)
   d8234:	4803      	ldr	r0, [pc, #12]	; (d8244 <_Z19__fetch_global_Wirev+0x40>)
   d8236:	f000 f80b 	bl	d8250 <__aeabi_atexit>
	return wire;
}
   d823a:	4802      	ldr	r0, [pc, #8]	; (d8244 <_Z19__fetch_global_Wirev+0x40>)
   d823c:	b007      	add	sp, #28
   d823e:	bd30      	pop	{r4, r5, pc}
   d8240:	2003e734 	.word	0x2003e734
   d8244:	2003e738 	.word	0x2003e738
   d8248:	2003dcf8 	.word	0x2003dcf8
   d824c:	000d7699 	.word	0x000d7699

000d8250 <__aeabi_atexit>:
   d8250:	460b      	mov	r3, r1
   d8252:	4601      	mov	r1, r0
   d8254:	4618      	mov	r0, r3
   d8256:	f000 b965 	b.w	d8524 <__cxa_atexit>
	...

000d825c <_ZSt15get_new_handlerv>:
   d825c:	4b02      	ldr	r3, [pc, #8]	; (d8268 <_ZSt15get_new_handlerv+0xc>)
   d825e:	6818      	ldr	r0, [r3, #0]
   d8260:	f3bf 8f5f 	dmb	sy
   d8264:	4770      	bx	lr
   d8266:	bf00      	nop
   d8268:	2003e74c 	.word	0x2003e74c

000d826c <_ZdlPvj>:
   d826c:	f7fb bf15 	b.w	d409a <_ZdlPv>

000d8270 <_ZnajRKSt9nothrow_t>:
   d8270:	f000 b800 	b.w	d8274 <_ZnwjRKSt9nothrow_t>

000d8274 <_ZnwjRKSt9nothrow_t>:
   d8274:	b510      	push	{r4, lr}
   d8276:	2800      	cmp	r0, #0
   d8278:	bf14      	ite	ne
   d827a:	4604      	movne	r4, r0
   d827c:	2401      	moveq	r4, #1
   d827e:	4620      	mov	r0, r4
   d8280:	f7fe fd48 	bl	d6d14 <malloc>
   d8284:	b920      	cbnz	r0, d8290 <_ZnwjRKSt9nothrow_t+0x1c>
   d8286:	f7ff ffe9 	bl	d825c <_ZSt15get_new_handlerv>
   d828a:	b108      	cbz	r0, d8290 <_ZnwjRKSt9nothrow_t+0x1c>
   d828c:	4780      	blx	r0
   d828e:	e7f6      	b.n	d827e <_ZnwjRKSt9nothrow_t+0xa>
   d8290:	bd10      	pop	{r4, pc}
	...

000d8294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8294:	4b18      	ldr	r3, [pc, #96]	; (d82f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8296:	681a      	ldr	r2, [r3, #0]
   d8298:	07d1      	lsls	r1, r2, #31
   d829a:	bf5c      	itt	pl
   d829c:	2201      	movpl	r2, #1
   d829e:	601a      	strpl	r2, [r3, #0]
   d82a0:	4b16      	ldr	r3, [pc, #88]	; (d82fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d82a2:	681a      	ldr	r2, [r3, #0]
   d82a4:	07d2      	lsls	r2, r2, #31
   d82a6:	bf5c      	itt	pl
   d82a8:	2201      	movpl	r2, #1
   d82aa:	601a      	strpl	r2, [r3, #0]
   d82ac:	4b14      	ldr	r3, [pc, #80]	; (d8300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d82ae:	681a      	ldr	r2, [r3, #0]
   d82b0:	07d0      	lsls	r0, r2, #31
   d82b2:	bf5c      	itt	pl
   d82b4:	2201      	movpl	r2, #1
   d82b6:	601a      	strpl	r2, [r3, #0]
   d82b8:	4b12      	ldr	r3, [pc, #72]	; (d8304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d82ba:	681a      	ldr	r2, [r3, #0]
   d82bc:	07d1      	lsls	r1, r2, #31
   d82be:	bf5c      	itt	pl
   d82c0:	2201      	movpl	r2, #1
   d82c2:	601a      	strpl	r2, [r3, #0]
   d82c4:	4b10      	ldr	r3, [pc, #64]	; (d8308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d82c6:	681a      	ldr	r2, [r3, #0]
   d82c8:	07d2      	lsls	r2, r2, #31
   d82ca:	bf5c      	itt	pl
   d82cc:	2201      	movpl	r2, #1
   d82ce:	601a      	strpl	r2, [r3, #0]
   d82d0:	4b0e      	ldr	r3, [pc, #56]	; (d830c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d82d2:	681a      	ldr	r2, [r3, #0]
   d82d4:	07d0      	lsls	r0, r2, #31
   d82d6:	bf5c      	itt	pl
   d82d8:	2201      	movpl	r2, #1
   d82da:	601a      	strpl	r2, [r3, #0]
   d82dc:	4b0c      	ldr	r3, [pc, #48]	; (d8310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d82de:	681a      	ldr	r2, [r3, #0]
   d82e0:	07d1      	lsls	r1, r2, #31
   d82e2:	bf5c      	itt	pl
   d82e4:	2201      	movpl	r2, #1
   d82e6:	601a      	strpl	r2, [r3, #0]
   d82e8:	4b0a      	ldr	r3, [pc, #40]	; (d8314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d82ea:	681a      	ldr	r2, [r3, #0]
   d82ec:	07d2      	lsls	r2, r2, #31
   d82ee:	bf5c      	itt	pl
   d82f0:	2201      	movpl	r2, #1
   d82f2:	601a      	strpl	r2, [r3, #0]
   d82f4:	4770      	bx	lr
   d82f6:	bf00      	nop
   d82f8:	2003e76c 	.word	0x2003e76c
   d82fc:	2003e768 	.word	0x2003e768
   d8300:	2003e764 	.word	0x2003e764
   d8304:	2003e760 	.word	0x2003e760
   d8308:	2003e75c 	.word	0x2003e75c
   d830c:	2003e758 	.word	0x2003e758
   d8310:	2003e754 	.word	0x2003e754
   d8314:	2003e750 	.word	0x2003e750

000d8318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8318:	4b24      	ldr	r3, [pc, #144]	; (d83ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d831a:	681a      	ldr	r2, [r3, #0]
   d831c:	07d0      	lsls	r0, r2, #31
   d831e:	bf5c      	itt	pl
   d8320:	2201      	movpl	r2, #1
   d8322:	601a      	strpl	r2, [r3, #0]
   d8324:	4b22      	ldr	r3, [pc, #136]	; (d83b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8326:	681a      	ldr	r2, [r3, #0]
   d8328:	07d1      	lsls	r1, r2, #31
   d832a:	bf5c      	itt	pl
   d832c:	2201      	movpl	r2, #1
   d832e:	601a      	strpl	r2, [r3, #0]
   d8330:	4b20      	ldr	r3, [pc, #128]	; (d83b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8332:	681a      	ldr	r2, [r3, #0]
   d8334:	07d2      	lsls	r2, r2, #31
   d8336:	bf5c      	itt	pl
   d8338:	2201      	movpl	r2, #1
   d833a:	601a      	strpl	r2, [r3, #0]
   d833c:	4b1e      	ldr	r3, [pc, #120]	; (d83b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d833e:	681a      	ldr	r2, [r3, #0]
   d8340:	07d0      	lsls	r0, r2, #31
   d8342:	bf5c      	itt	pl
   d8344:	2201      	movpl	r2, #1
   d8346:	601a      	strpl	r2, [r3, #0]
   d8348:	4b1c      	ldr	r3, [pc, #112]	; (d83bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d834a:	681a      	ldr	r2, [r3, #0]
   d834c:	07d1      	lsls	r1, r2, #31
   d834e:	bf5c      	itt	pl
   d8350:	2201      	movpl	r2, #1
   d8352:	601a      	strpl	r2, [r3, #0]
   d8354:	4b1a      	ldr	r3, [pc, #104]	; (d83c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8356:	681a      	ldr	r2, [r3, #0]
   d8358:	07d2      	lsls	r2, r2, #31
   d835a:	bf5c      	itt	pl
   d835c:	2201      	movpl	r2, #1
   d835e:	601a      	strpl	r2, [r3, #0]
   d8360:	4b18      	ldr	r3, [pc, #96]	; (d83c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8362:	681a      	ldr	r2, [r3, #0]
   d8364:	07d0      	lsls	r0, r2, #31
   d8366:	bf5c      	itt	pl
   d8368:	2201      	movpl	r2, #1
   d836a:	601a      	strpl	r2, [r3, #0]
   d836c:	4b16      	ldr	r3, [pc, #88]	; (d83c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d836e:	681a      	ldr	r2, [r3, #0]
   d8370:	07d1      	lsls	r1, r2, #31
   d8372:	bf5c      	itt	pl
   d8374:	2201      	movpl	r2, #1
   d8376:	601a      	strpl	r2, [r3, #0]
   d8378:	4b14      	ldr	r3, [pc, #80]	; (d83cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d837a:	681a      	ldr	r2, [r3, #0]
   d837c:	07d2      	lsls	r2, r2, #31
   d837e:	bf5c      	itt	pl
   d8380:	2201      	movpl	r2, #1
   d8382:	601a      	strpl	r2, [r3, #0]
   d8384:	4b12      	ldr	r3, [pc, #72]	; (d83d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8386:	681a      	ldr	r2, [r3, #0]
   d8388:	07d0      	lsls	r0, r2, #31
   d838a:	bf5c      	itt	pl
   d838c:	2201      	movpl	r2, #1
   d838e:	601a      	strpl	r2, [r3, #0]
   d8390:	4b10      	ldr	r3, [pc, #64]	; (d83d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8392:	681a      	ldr	r2, [r3, #0]
   d8394:	07d1      	lsls	r1, r2, #31
   d8396:	bf5c      	itt	pl
   d8398:	2201      	movpl	r2, #1
   d839a:	601a      	strpl	r2, [r3, #0]
   d839c:	4b0e      	ldr	r3, [pc, #56]	; (d83d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d839e:	681a      	ldr	r2, [r3, #0]
   d83a0:	07d2      	lsls	r2, r2, #31
   d83a2:	bf5c      	itt	pl
   d83a4:	2201      	movpl	r2, #1
   d83a6:	601a      	strpl	r2, [r3, #0]
   d83a8:	4770      	bx	lr
   d83aa:	bf00      	nop
   d83ac:	2003e79c 	.word	0x2003e79c
   d83b0:	2003e798 	.word	0x2003e798
   d83b4:	2003e794 	.word	0x2003e794
   d83b8:	2003e790 	.word	0x2003e790
   d83bc:	2003e78c 	.word	0x2003e78c
   d83c0:	2003e788 	.word	0x2003e788
   d83c4:	2003e784 	.word	0x2003e784
   d83c8:	2003e780 	.word	0x2003e780
   d83cc:	2003e77c 	.word	0x2003e77c
   d83d0:	2003e778 	.word	0x2003e778
   d83d4:	2003e774 	.word	0x2003e774
   d83d8:	2003e770 	.word	0x2003e770

000d83dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d83dc:	4b24      	ldr	r3, [pc, #144]	; (d8470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d83de:	681a      	ldr	r2, [r3, #0]
   d83e0:	07d0      	lsls	r0, r2, #31
   d83e2:	bf5c      	itt	pl
   d83e4:	2201      	movpl	r2, #1
   d83e6:	601a      	strpl	r2, [r3, #0]
   d83e8:	4b22      	ldr	r3, [pc, #136]	; (d8474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d83ea:	681a      	ldr	r2, [r3, #0]
   d83ec:	07d1      	lsls	r1, r2, #31
   d83ee:	bf5c      	itt	pl
   d83f0:	2201      	movpl	r2, #1
   d83f2:	601a      	strpl	r2, [r3, #0]
   d83f4:	4b20      	ldr	r3, [pc, #128]	; (d8478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d83f6:	681a      	ldr	r2, [r3, #0]
   d83f8:	07d2      	lsls	r2, r2, #31
   d83fa:	bf5c      	itt	pl
   d83fc:	2201      	movpl	r2, #1
   d83fe:	601a      	strpl	r2, [r3, #0]
   d8400:	4b1e      	ldr	r3, [pc, #120]	; (d847c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8402:	681a      	ldr	r2, [r3, #0]
   d8404:	07d0      	lsls	r0, r2, #31
   d8406:	bf5c      	itt	pl
   d8408:	2201      	movpl	r2, #1
   d840a:	601a      	strpl	r2, [r3, #0]
   d840c:	4b1c      	ldr	r3, [pc, #112]	; (d8480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d840e:	681a      	ldr	r2, [r3, #0]
   d8410:	07d1      	lsls	r1, r2, #31
   d8412:	bf5c      	itt	pl
   d8414:	2201      	movpl	r2, #1
   d8416:	601a      	strpl	r2, [r3, #0]
   d8418:	4b1a      	ldr	r3, [pc, #104]	; (d8484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d841a:	681a      	ldr	r2, [r3, #0]
   d841c:	07d2      	lsls	r2, r2, #31
   d841e:	bf5c      	itt	pl
   d8420:	2201      	movpl	r2, #1
   d8422:	601a      	strpl	r2, [r3, #0]
   d8424:	4b18      	ldr	r3, [pc, #96]	; (d8488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8426:	681a      	ldr	r2, [r3, #0]
   d8428:	07d0      	lsls	r0, r2, #31
   d842a:	bf5c      	itt	pl
   d842c:	2201      	movpl	r2, #1
   d842e:	601a      	strpl	r2, [r3, #0]
   d8430:	4b16      	ldr	r3, [pc, #88]	; (d848c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8432:	681a      	ldr	r2, [r3, #0]
   d8434:	07d1      	lsls	r1, r2, #31
   d8436:	bf5c      	itt	pl
   d8438:	2201      	movpl	r2, #1
   d843a:	601a      	strpl	r2, [r3, #0]
   d843c:	4b14      	ldr	r3, [pc, #80]	; (d8490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d843e:	681a      	ldr	r2, [r3, #0]
   d8440:	07d2      	lsls	r2, r2, #31
   d8442:	bf5c      	itt	pl
   d8444:	2201      	movpl	r2, #1
   d8446:	601a      	strpl	r2, [r3, #0]
   d8448:	4b12      	ldr	r3, [pc, #72]	; (d8494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d844a:	681a      	ldr	r2, [r3, #0]
   d844c:	07d0      	lsls	r0, r2, #31
   d844e:	bf5c      	itt	pl
   d8450:	2201      	movpl	r2, #1
   d8452:	601a      	strpl	r2, [r3, #0]
   d8454:	4b10      	ldr	r3, [pc, #64]	; (d8498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8456:	681a      	ldr	r2, [r3, #0]
   d8458:	07d1      	lsls	r1, r2, #31
   d845a:	bf5c      	itt	pl
   d845c:	2201      	movpl	r2, #1
   d845e:	601a      	strpl	r2, [r3, #0]
   d8460:	4b0e      	ldr	r3, [pc, #56]	; (d849c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8462:	681a      	ldr	r2, [r3, #0]
   d8464:	07d2      	lsls	r2, r2, #31
   d8466:	bf5c      	itt	pl
   d8468:	2201      	movpl	r2, #1
   d846a:	601a      	strpl	r2, [r3, #0]
   d846c:	4770      	bx	lr
   d846e:	bf00      	nop
   d8470:	2003e7cc 	.word	0x2003e7cc
   d8474:	2003e7c8 	.word	0x2003e7c8
   d8478:	2003e7c4 	.word	0x2003e7c4
   d847c:	2003e7c0 	.word	0x2003e7c0
   d8480:	2003e7bc 	.word	0x2003e7bc
   d8484:	2003e7b8 	.word	0x2003e7b8
   d8488:	2003e7b4 	.word	0x2003e7b4
   d848c:	2003e7b0 	.word	0x2003e7b0
   d8490:	2003e7ac 	.word	0x2003e7ac
   d8494:	2003e7a8 	.word	0x2003e7a8
   d8498:	2003e7a4 	.word	0x2003e7a4
   d849c:	2003e7a0 	.word	0x2003e7a0

000d84a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d84a0:	4b18      	ldr	r3, [pc, #96]	; (d8504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d84a2:	681a      	ldr	r2, [r3, #0]
   d84a4:	07d1      	lsls	r1, r2, #31
   d84a6:	bf5c      	itt	pl
   d84a8:	2201      	movpl	r2, #1
   d84aa:	601a      	strpl	r2, [r3, #0]
   d84ac:	4b16      	ldr	r3, [pc, #88]	; (d8508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d84ae:	681a      	ldr	r2, [r3, #0]
   d84b0:	07d2      	lsls	r2, r2, #31
   d84b2:	bf5c      	itt	pl
   d84b4:	2201      	movpl	r2, #1
   d84b6:	601a      	strpl	r2, [r3, #0]
   d84b8:	4b14      	ldr	r3, [pc, #80]	; (d850c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d84ba:	681a      	ldr	r2, [r3, #0]
   d84bc:	07d0      	lsls	r0, r2, #31
   d84be:	bf5c      	itt	pl
   d84c0:	2201      	movpl	r2, #1
   d84c2:	601a      	strpl	r2, [r3, #0]
   d84c4:	4b12      	ldr	r3, [pc, #72]	; (d8510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d84c6:	681a      	ldr	r2, [r3, #0]
   d84c8:	07d1      	lsls	r1, r2, #31
   d84ca:	bf5c      	itt	pl
   d84cc:	2201      	movpl	r2, #1
   d84ce:	601a      	strpl	r2, [r3, #0]
   d84d0:	4b10      	ldr	r3, [pc, #64]	; (d8514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d84d2:	681a      	ldr	r2, [r3, #0]
   d84d4:	07d2      	lsls	r2, r2, #31
   d84d6:	bf5c      	itt	pl
   d84d8:	2201      	movpl	r2, #1
   d84da:	601a      	strpl	r2, [r3, #0]
   d84dc:	4b0e      	ldr	r3, [pc, #56]	; (d8518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d84de:	681a      	ldr	r2, [r3, #0]
   d84e0:	07d0      	lsls	r0, r2, #31
   d84e2:	bf5c      	itt	pl
   d84e4:	2201      	movpl	r2, #1
   d84e6:	601a      	strpl	r2, [r3, #0]
   d84e8:	4b0c      	ldr	r3, [pc, #48]	; (d851c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d84ea:	681a      	ldr	r2, [r3, #0]
   d84ec:	07d1      	lsls	r1, r2, #31
   d84ee:	bf5c      	itt	pl
   d84f0:	2201      	movpl	r2, #1
   d84f2:	601a      	strpl	r2, [r3, #0]
   d84f4:	4b0a      	ldr	r3, [pc, #40]	; (d8520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d84f6:	681a      	ldr	r2, [r3, #0]
   d84f8:	07d2      	lsls	r2, r2, #31
   d84fa:	bf5c      	itt	pl
   d84fc:	2201      	movpl	r2, #1
   d84fe:	601a      	strpl	r2, [r3, #0]
   d8500:	4770      	bx	lr
   d8502:	bf00      	nop
   d8504:	2003e7ec 	.word	0x2003e7ec
   d8508:	2003e7e8 	.word	0x2003e7e8
   d850c:	2003e7e4 	.word	0x2003e7e4
   d8510:	2003e7e0 	.word	0x2003e7e0
   d8514:	2003e7dc 	.word	0x2003e7dc
   d8518:	2003e7d8 	.word	0x2003e7d8
   d851c:	2003e7d4 	.word	0x2003e7d4
   d8520:	2003e7d0 	.word	0x2003e7d0

000d8524 <__cxa_atexit>:
   d8524:	b510      	push	{r4, lr}
   d8526:	4c05      	ldr	r4, [pc, #20]	; (d853c <__cxa_atexit+0x18>)
   d8528:	4613      	mov	r3, r2
   d852a:	b12c      	cbz	r4, d8538 <__cxa_atexit+0x14>
   d852c:	460a      	mov	r2, r1
   d852e:	4601      	mov	r1, r0
   d8530:	2002      	movs	r0, #2
   d8532:	f3af 8000 	nop.w
   d8536:	bd10      	pop	{r4, pc}
   d8538:	4620      	mov	r0, r4
   d853a:	bd10      	pop	{r4, pc}
   d853c:	00000000 	.word	0x00000000

000d8540 <memcpy>:
   d8540:	b510      	push	{r4, lr}
   d8542:	1e43      	subs	r3, r0, #1
   d8544:	440a      	add	r2, r1
   d8546:	4291      	cmp	r1, r2
   d8548:	d004      	beq.n	d8554 <memcpy+0x14>
   d854a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d854e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8552:	e7f8      	b.n	d8546 <memcpy+0x6>
   d8554:	bd10      	pop	{r4, pc}

000d8556 <memset>:
   d8556:	4402      	add	r2, r0
   d8558:	4603      	mov	r3, r0
   d855a:	4293      	cmp	r3, r2
   d855c:	d002      	beq.n	d8564 <memset+0xe>
   d855e:	f803 1b01 	strb.w	r1, [r3], #1
   d8562:	e7fa      	b.n	d855a <memset+0x4>
   d8564:	4770      	bx	lr
	...

000d8568 <srand>:
   d8568:	b538      	push	{r3, r4, r5, lr}
   d856a:	4b12      	ldr	r3, [pc, #72]	; (d85b4 <srand+0x4c>)
   d856c:	681c      	ldr	r4, [r3, #0]
   d856e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8570:	4605      	mov	r5, r0
   d8572:	b9d3      	cbnz	r3, d85aa <srand+0x42>
   d8574:	2018      	movs	r0, #24
   d8576:	f7fe fbcd 	bl	d6d14 <malloc>
   d857a:	f243 330e 	movw	r3, #13070	; 0x330e
   d857e:	63a0      	str	r0, [r4, #56]	; 0x38
   d8580:	8003      	strh	r3, [r0, #0]
   d8582:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8586:	8043      	strh	r3, [r0, #2]
   d8588:	f241 2334 	movw	r3, #4660	; 0x1234
   d858c:	8083      	strh	r3, [r0, #4]
   d858e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8592:	80c3      	strh	r3, [r0, #6]
   d8594:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8598:	8103      	strh	r3, [r0, #8]
   d859a:	2305      	movs	r3, #5
   d859c:	8143      	strh	r3, [r0, #10]
   d859e:	230b      	movs	r3, #11
   d85a0:	8183      	strh	r3, [r0, #12]
   d85a2:	2201      	movs	r2, #1
   d85a4:	2300      	movs	r3, #0
   d85a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d85aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d85ac:	2200      	movs	r2, #0
   d85ae:	611d      	str	r5, [r3, #16]
   d85b0:	615a      	str	r2, [r3, #20]
   d85b2:	bd38      	pop	{r3, r4, r5, pc}
   d85b4:	2003dcf4 	.word	0x2003dcf4

000d85b8 <strcpy>:
   d85b8:	4603      	mov	r3, r0
   d85ba:	f811 2b01 	ldrb.w	r2, [r1], #1
   d85be:	f803 2b01 	strb.w	r2, [r3], #1
   d85c2:	2a00      	cmp	r2, #0
   d85c4:	d1f9      	bne.n	d85ba <strcpy+0x2>
   d85c6:	4770      	bx	lr

000d85c8 <strlen>:
   d85c8:	4603      	mov	r3, r0
   d85ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   d85ce:	2a00      	cmp	r2, #0
   d85d0:	d1fb      	bne.n	d85ca <strlen+0x2>
   d85d2:	1a18      	subs	r0, r3, r0
   d85d4:	3801      	subs	r0, #1
   d85d6:	4770      	bx	lr

000d85d8 <dynalib_user>:
   d85d8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d85e8:	0000 0000                                   ....

000d85ec <_ZTVN8particle13__SPISettingsE>:
	...
   d85f4:	4145 000d                                   EA..

000d85f8 <_ZTV4File>:
	...
   d8600:	40e5 000d 4135 000d 411d 000d 4117 000d     .@..5A...A...A..
   d8610:	40c9 000d 40f7 000d 40f1 000d 40eb 000d     .@...@...@...@..
   d8620:	ff7e 0006 0001 0000 ef00 6564 6166 6c75     ~.........defaul
   d8630:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   d8640:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   d8650:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   d8660:	6c25 2075 7325 4d20 444f 2545 3e64 5300     %lu %s MODE%d>.S
   d8670:	2044 6e69 7469 4400 5046 616c 6579 2072     D init.DFPlayer 
   d8680:	6e69 7469 6620 6961 656c 0064 4644 6c50     init failed.DFPl
   d8690:	7961 7265 6920 696e 0074 6c70 7961 6e69     ayer init.playin
   d86a0:	2e67 2e2e 6300 6e6f 656e 7463 6e69 2067     g....connecting 
   d86b0:	6f74 4d20 5451 2054 2e2e 002e 6572 7274     to MQTT ....retr
   d86c0:	6979 676e 4d20 5451 2054 6f63 6e6e 6365     ying MQTT connec
   d86d0:	6974 6e6f 6920 206e 2035 6573 6f63 646e     tion in 5 second
   d86e0:	2e73 2e2e 4d00 5451 2054 6f63 6e6e 6365     s....MQTT connec
   d86f0:	6574 3f64 7700 6972 6974 676e 7420 206f     ted?.writing to 
   d8700:	6966 656c 6900 736e 7265 2074 6574 7478     file.insert text
   d8710:	6820 7265 0065 7265 6f72 2072 706f 6e65      here.error open
   d8720:	6e69 2067 6966 656c 4100 7269 5120 6175     ing file.Air Qua
   d8730:	696c 7974 7720 7261 696e 676e 202e 5141     lity warning. AQ
   d8740:	7220 6165 3a64 2520 2069 000a 6941 2072      read: %i ..Air 
   d8750:	7551 6c61 7469 2079 6552 6461 203a 6925     Quality Read: %i
   d8760:	0a20 4100 2051 7277 7469 2065 7265 6f72      ..AQ write erro
   d8770:	0072 514d 392d 7720 7261 696e 676e 202e     r.MQ-9 warning. 
   d8780:	514d 392d 7220 6165 3a64 2520 2069 000a     MQ-9 read: %i ..
   d8790:	514d 392d 7720 6972 6574 6520 7272 726f     MQ-9 write error
   d87a0:	4400 4e41 4547 2052 4d49 494d 414e 544e     .DANGER IMMINANT
   d87b0:	202e 514d 392d 203a 6925 4120 3a51 2520     . MQ-9: %i AQ: %
   d87c0:	2069 6554 706d 203a 6925 0a20 4800 6769     i Temp: %i ..Hig
   d87d0:	2068 6144 676e 7265 202e 514d 392d 203a     h Danger. MQ-9: 
   d87e0:	6925 4120 3a51 2520 2069 6554 706d 2520     %i AQ: %i Temp %
   d87f0:	2069 000a 6948 6867 6420 6e61 6567 2072     i ..High danger 
   d8800:	7277 7469 2065 7265 6f72 2e72 6d00 7561     write error..mau
   d8810:	6972 6963 766f 3939 6900 2e6f 6461 6661     riciov99.io.adaf
   d8820:	7572 7469 632e 6d6f 7400 6968 6973 6173     ruit.com.thisisa
   d8830:	6172 646e 6d6f 7473 6972 676e 6f66 6172     randomstringfora
   d8840:	656b 0079 616d 7275 6369 6f69 3976 2f39     key.mauriciov99/
   d8850:	6566 6465 2f73 0020 616d 7275 6369 6f69     feeds/ .mauricio
   d8860:	3976 2f39 6566 6465 2f73 6d53 7261 5f74     v99/feeds/Smart_
   d8870:	6548 6d6c 7465 425f 454d 6d00 7561 6972     Helmet_BME.mauri
   d8880:	6963 766f 3939 662f 6565 7364 532f 616d     ciov99/feeds/Sma
   d8890:	7472 485f 6c65 656d 5f74 514d 392d 6d00     rt_Helmet_MQ-9.m
   d88a0:	7561 6972 6963 766f 3939 662f 6565 7364     auriciov99/feeds
   d88b0:	532f 616d 7472 485f 6c65 656d 5f74 6941     /Smart_Helmet_Ai
   d88c0:	5172 6175 696c 7974 0000 0000 c000 4001     rQuality.......@
   d88d0:	1000 4002 2000 4002                         ...@. .@

000d88d8 <CSWTCH.65>:
   d88d8:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d88e8:	0050 0000                                   P...

000d88ec <_ZTV16Adafruit_SSD1306>:
	...
   d88f4:	40e9 000d 42d7 000d 57f1 000d 70d9 000d     .@...B...W...p..
   d8904:	50ed 000d 54f1 000d 4f75 000d 4e01 000d     .P...T..uO...N..
   d8914:	55b1 000d 5647 000d 567f 000d 569b 000d     .U..GV...V...V..

000d8924 <_ZTV12Adafruit_GFX>:
	...
   d8934:	57f1 000d 70d9 000d 40a5 000d 54f1 000d     .W...p...@...T..
   d8944:	5611 000d 562d 000d 55b1 000d 5647 000d     .V..-V...U..GV..
   d8954:	567f 000d 569b 000d                         .V...V..

000d895c <_ZL4font>:
   d895c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d896c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d897c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d898c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d899c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d89ac:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d89bc:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d89cc:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d89dc:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d89ec:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d89fc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d8a0c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d8a1c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d8a2c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d8a3c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d8a4c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d8a5c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d8a6c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d8a7c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d8a8c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d8a9c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d8aac:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d8abc:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d8acc:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d8adc:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d8aec:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d8afc:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d8b0c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d8b1c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d8b2c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d8b3c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d8b4c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d8b5c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d8b6c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d8b7c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d8b8c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d8b9c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d8bac:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d8bbc:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d8bcc:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d8bdc:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d8bec:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d8bfc:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d8c0c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d8c1c:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d8c2c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d8c3c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d8c4c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d8c5c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d8c6c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d8c7c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d8c8c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d8c9c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d8cac:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d8cbc:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d8ccc:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d8cdc:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d8cec:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d8cfc:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d8d0c:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d8d1c:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d8d2c:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d8d3c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d8d4c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d8d5c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d8d6c:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d8d7c:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d8d8c:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d8d9c:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d8dac:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d8dbc:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d8dcc:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d8ddc:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d8dec:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d8dfc:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d8e0c:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d8e1c:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d8e2c:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d8e3c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d8e4c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d8e58 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d8e60:	40e7 000d 42c9 000d 586f 000d 591b 000d     .@...B..oX...Y..
   d8e70:	594d 000d 5883 000d 58c3 000d               MY...X...X..

000d8e7c <_ZTV13Adafruit_MQTT>:
	...
   d8e8c:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   d8e9c:	40a5 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   d8eac:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   d8ebc:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   d8ecc:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   d8edc:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   d8eec:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   d8efc:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   d8f0c:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   d8f1c:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   d8f2c:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   d8f3c:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   d8f4c:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   d8f5c:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   d8f6c:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   d8f7c:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   d8f8c:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   d8f9c:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   d8fac:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   d8fbc:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   d8fcc:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   d8fdc:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   d8fec:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   d8ffc:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   d900c:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   d901c:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   d902c:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   d903c:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   d904c:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   d905c:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   d906c:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   d907c:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   d908c:	7465 6961 736c 002e                         etails..

000d9094 <_ZTVN5spark13EthernetClassE>:
	...
   d909c:	6db3 000d 6da9 000d 6d9f 000d 6d95 000d     .m...m...m...m..
   d90ac:	6d89 000d 6d7d 000d 6d71 000d 6d69 000d     .m..}m..qm..im..
   d90bc:	6d5f 000d 6d55 000d 7f95 000d               _m..Um......

000d90c8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d90c8:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d90d8:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d90e8:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d90f8:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d9108:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d9118:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d9128:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d9138:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d9148:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   d9158:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   d9168:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   d9178:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d9188:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d9198:	7000 6e61 6369 6100 6c6c 5a00 2500 302b     .panic.all.Z.%+0
   d91a8:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   d91b8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d91c8:	6d69 0065                                   ime.

000d91cc <_ZTV9IPAddress>:
	...
   d91d4:	7379 000d 7369 000d 736b 000d               ys..is..ks..

000d91e0 <_ZTV9USBSerial>:
	...
   d91e8:	747d 000d 74cd 000d 74db 000d 70d9 000d     }t...t...t...p..
   d91f8:	74b9 000d 747f 000d 7495 000d 74c7 000d     .t...t...t...t..
   d9208:	74ab 000d 7479 000d                         .t..yt..

000d9210 <_ZTV11USARTSerial>:
	...
   d9218:	7589 000d 75d9 000d 75e7 000d 70d9 000d     .u...u...u...p..
   d9228:	759d 000d 75bf 000d 75ab 000d 75d3 000d     .u...u...u...u..
   d9238:	758b 000d 758f 000d                         .u...u..

000d9240 <_ZTV7TwoWire>:
	...
   d9248:	7699 000d 76e3 000d 76bb 000d 769b 000d     .v...v...v...v..
   d9258:	76c3 000d 76cb 000d 76d3 000d 76db 000d     .v...v...v...v..

000d9268 <_ZTVN5spark9MeshClassE>:
	...
   d9270:	7805 000d 77fb 000d 77f1 000d 77e7 000d     .x...w...w...w..
   d9280:	77db 000d 77cf 000d 77c3 000d 77bb 000d     .w...w...w...w..
   d9290:	77b1 000d 77a7 000d 7f95 000d               .w...w......

000d929c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d92a4:	79a9 000d 79af 000d 7e97 000d 79bd 000d     .y...y...~...y..
   d92b4:	79ab 000d                                   .y..

000d92b8 <_ZTV9TCPClient>:
	...
   d92c0:	419d 000d 41d1 000d 7921 000d 793b 000d     .A...A..!y..;y..
   d92d0:	7d3d 000d 7a8f 000d 7a61 000d 7965 000d     =}...z..az..ey..
   d92e0:	7c19 000d 7b15 000d 7ac3 000d 7d0d 000d     .|...{...z...}..
   d92f0:	7967 000d 799f 000d 794d 000d 79c1 000d     gy...y..My...y..
   d9300:	7a41 000d 6977 6972 676e 7200 6365 2076     Az..wiring.recv 
   d9310:	7265 6f72 2072 203d 6425 0000               error = %d..

000d931c <_ZTVN5spark9WiFiClassE>:
	...
   d9324:	7f0d 000d 7f03 000d 7ef9 000d 7eaf 000d     .........~...~..
   d9334:	7eed 000d 7ee1 000d 7ed5 000d 7ecd 000d     .~...~...~...~..
   d9344:	7ec3 000d 7eb9 000d 7f95 000d               .~...~......

000d9350 <_ZTVN5spark12NetworkClassE>:
	...
   d9358:	7f2d 000d 7f37 000d 7f41 000d 7f4b 000d     -...7...A...K...
   d9368:	7f55 000d 7f61 000d 7f6d 000d 7f79 000d     U...a...m...y...
   d9378:	7f81 000d 7f8b 000d 7f95 000d               ............

000d9384 <_ZSt7nothrow>:
   d9384:	0000 0000                                   ....

000d9388 <__sf_fake_stdin>:
	...

000d93a8 <__sf_fake_stdout>:
	...

000d93c8 <__sf_fake_stderr>:
	...
   d93e8:	0043                                        C.

000d93ea <link_const_variable_data_end>:
	...

000d93ec <link_constructors_location>:
   d93ec:	000d42e5 	.word	0x000d42e5
   d93f0:	000d49db 	.word	0x000d49db
   d93f4:	000d4ded 	.word	0x000d4ded
   d93f8:	000d54ed 	.word	0x000d54ed
   d93fc:	000d586b 	.word	0x000d586b
   d9400:	000d596b 	.word	0x000d596b
   d9404:	000d59d9 	.word	0x000d59d9
   d9408:	000d59dd 	.word	0x000d59dd
   d940c:	000d59e1 	.word	0x000d59e1
   d9410:	000d59ff 	.word	0x000d59ff
   d9414:	000d5a03 	.word	0x000d5a03
   d9418:	000d5a07 	.word	0x000d5a07
   d941c:	000d5a0b 	.word	0x000d5a0b
   d9420:	000d5e65 	.word	0x000d5e65
   d9424:	000d5e89 	.word	0x000d5e89
   d9428:	000d5e8d 	.word	0x000d5e8d
   d942c:	000d6073 	.word	0x000d6073
   d9430:	000d6077 	.word	0x000d6077
   d9434:	000d607b 	.word	0x000d607b
   d9438:	000d6431 	.word	0x000d6431
   d943c:	000d6435 	.word	0x000d6435
   d9440:	000d6439 	.word	0x000d6439
   d9444:	000d64bd 	.word	0x000d64bd
   d9448:	000d64f5 	.word	0x000d64f5
   d944c:	000d67a9 	.word	0x000d67a9
   d9450:	000d6dbd 	.word	0x000d6dbd
   d9454:	000d706d 	.word	0x000d706d
   d9458:	000d70b1 	.word	0x000d70b1
   d945c:	000d71f5 	.word	0x000d71f5
   d9460:	000d7205 	.word	0x000d7205
   d9464:	000d723d 	.word	0x000d723d
   d9468:	000d78d1 	.word	0x000d78d1
   d946c:	000d7f19 	.word	0x000d7f19
   d9470:	000d8061 	.word	0x000d8061
   d9474:	000d8295 	.word	0x000d8295
   d9478:	000d8319 	.word	0x000d8319
   d947c:	000d83dd 	.word	0x000d83dd
   d9480:	000d84a1 	.word	0x000d84a1

000d9484 <link_constructors_end>:
	...
