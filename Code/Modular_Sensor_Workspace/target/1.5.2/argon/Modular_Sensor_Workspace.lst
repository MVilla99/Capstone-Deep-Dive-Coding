
c:/Users/mauri/Documents/IoTc2/Capstone-Deep-Dive-Coding/Code/Modular_Sensor_Workspace/target/1.5.2/argon/Modular_Sensor_Workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006b64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dab80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000bc  2003dc1c  000dab84  0001dc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000b18  2003dcd8  2003dcd8  0002dcd8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dac40  000dac40  0002ac40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dac68  000dac68  0002ac68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001ce723  00000000  00000000  0002ac6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00024bf4  00000000  00000000  001f938f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032db0  00000000  00000000  0021df83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000038f0  00000000  00000000  00250d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000068a8  00000000  00000000  00254623  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000568da  00000000  00000000  0025aecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00064e87  00000000  00000000  002b17a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00114922  00000000  00000000  0031662c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00010928  00000000  00000000  0042af50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 fbac 	bl	d978a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 fbb1 	bl	d97a0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dc1c 	.word	0x2003dc1c
   d4048:	000dab84 	.word	0x000dab84
   d404c:	2003dcd8 	.word	0x2003dcd8
   d4050:	2003dcd8 	.word	0x2003dcd8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 ff7f 	bl	d7f5c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000dab74 	.word	0x000dab74
   d4080:	000daadc 	.word	0x000daadc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b902 	b.w	d428c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fbef 	bl	d486c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bf25 	b.w	d7ee0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f003 bb83 	b.w	d77a0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f003 bb89 	b.w	d77b0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f003 bb87 	b.w	d77b0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fabc 	bl	d7628 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7349 	.word	0x000d7349

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40c8:	7c03      	ldrb	r3, [r0, #16]
   d40ca:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40ce:	4602      	mov	r2, r0
   d40d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40d4:	b12b      	cbz	r3, d40e2 <_ZN4File9availableEv+0x1a>
   d40d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40d8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40da:	1a18      	subs	r0, r3, r0
   d40dc:	bf48      	it	mi
   d40de:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40e2:	4770      	bx	lr

000d40e4 <_Z12enableButtonv>:
  TimeOnly.toCharArray(currentTime,9);
}

void enableButton() //ISR for switching the neopixels on or off
{
  pixelState = !pixelState;
   d40e4:	4a02      	ldr	r2, [pc, #8]	; (d40f0 <_Z12enableButtonv+0xc>)
   d40e6:	7813      	ldrb	r3, [r2, #0]
   d40e8:	f083 0301 	eor.w	r3, r3, #1
   d40ec:	7013      	strb	r3, [r2, #0]
   d40ee:	4770      	bx	lr
   d40f0:	2003e34c 	.word	0x2003e34c

000d40f4 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40f4:	4770      	bx	lr

000d40f6 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40f6:	4770      	bx	lr

000d40f8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40fa:	4602      	mov	r2, r0
   d40fc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40fe:	7913      	ldrb	r3, [r2, #4]
   d4100:	6895      	ldr	r5, [r2, #8]
   d4102:	b133      	cbz	r3, d4112 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4104:	b93d      	cbnz	r5, d4116 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4106:	490c      	ldr	r1, [pc, #48]	; (d4138 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4108:	b004      	add	sp, #16
   d410a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d410e:	f003 bd9f 	b.w	d7c50 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4112:	4b0a      	ldr	r3, [pc, #40]	; (d413c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4114:	e000      	b.n	d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4116:	4b0a      	ldr	r3, [pc, #40]	; (d4140 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4118:	7b16      	ldrb	r6, [r2, #12]
   d411a:	4c0a      	ldr	r4, [pc, #40]	; (d4144 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d411c:	490a      	ldr	r1, [pc, #40]	; (d4148 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d411e:	7b52      	ldrb	r2, [r2, #13]
   d4120:	9202      	str	r2, [sp, #8]
   d4122:	2e01      	cmp	r6, #1
   d4124:	bf08      	it	eq
   d4126:	4621      	moveq	r1, r4
   d4128:	9101      	str	r1, [sp, #4]
   d412a:	9500      	str	r5, [sp, #0]
   d412c:	4a07      	ldr	r2, [pc, #28]	; (d414c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d412e:	2100      	movs	r1, #0
   d4130:	f003 fdcb 	bl	d7cca <_ZN5Print11printf_implEbPKcz>
  }
   d4134:	b004      	add	sp, #16
   d4136:	bd70      	pop	{r4, r5, r6, pc}
   d4138:	000da01b 	.word	0x000da01b
   d413c:	000da3a9 	.word	0x000da3a9
   d4140:	000da00a 	.word	0x000da00a
   d4144:	000da013 	.word	0x000da013
   d4148:	000da017 	.word	0x000da017
   d414c:	000da031 	.word	0x000da031

000d4150 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4150:	3010      	adds	r0, #16
   d4152:	f002 b8db 	b.w	d630c <_ZN7FatFile4syncEv>

000d4156 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4156:	3010      	adds	r0, #16
   d4158:	f001 bff0 	b.w	d613c <_ZN7FatFile4peekEv>

000d415c <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d415c:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d415e:	2201      	movs	r2, #1
   d4160:	f10d 0107 	add.w	r1, sp, #7
   d4164:	3010      	adds	r0, #16
   d4166:	f001 ff36 	bl	d5fd6 <_ZN7FatFile4readEPvj>
   d416a:	2801      	cmp	r0, #1
   d416c:	bf0c      	ite	eq
   d416e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4172:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d4176:	b003      	add	sp, #12
   d4178:	f85d fb04 	ldr.w	pc, [sp], #4

000d417c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d417c:	3010      	adds	r0, #16
   d417e:	f002 b951 	b.w	d6424 <_ZN7FatFile5writeEPKvj>

000d4182 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4182:	b507      	push	{r0, r1, r2, lr}
   d4184:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4186:	2201      	movs	r2, #1
   d4188:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d418c:	3010      	adds	r0, #16
   d418e:	4619      	mov	r1, r3
   d4190:	f002 f948 	bl	d6424 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4194:	b003      	add	sp, #12
   d4196:	f85d fb04 	ldr.w	pc, [sp], #4

000d419a <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d419a:	b510      	push	{r4, lr}
   d419c:	2134      	movs	r1, #52	; 0x34
   d419e:	4604      	mov	r4, r0
   d41a0:	f004 fe8e 	bl	d8ec0 <_ZdlPvj>
   d41a4:	4620      	mov	r0, r4
   d41a6:	bd10      	pop	{r4, pc}

000d41a8 <_ZN10CloudClass12syncTimeDoneEv.isra.3>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d41a8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41aa:	2000      	movs	r0, #0
   d41ac:	f003 fae8 	bl	d7780 <spark_sync_time_pending>
   d41b0:	b128      	cbz	r0, d41be <_ZN10CloudClass12syncTimeDoneEv.isra.3+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41b2:	f003 fad5 	bl	d7760 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d41b6:	f080 0001 	eor.w	r0, r0, #1
   d41ba:	b2c0      	uxtb	r0, r0
   d41bc:	bd08      	pop	{r3, pc}
   d41be:	2001      	movs	r0, #1
    }
   d41c0:	bd08      	pop	{r3, pc}
	...

000d41c4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d41c4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41c6:	6984      	ldr	r4, [r0, #24]
   d41c8:	4b0a      	ldr	r3, [pc, #40]	; (d41f4 <_ZN9TCPClientD1Ev+0x30>)
   d41ca:	6003      	str	r3, [r0, #0]
   d41cc:	4605      	mov	r5, r0
   d41ce:	b17c      	cbz	r4, d41f0 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41d0:	6863      	ldr	r3, [r4, #4]
   d41d2:	3b01      	subs	r3, #1
   d41d4:	6063      	str	r3, [r4, #4]
   d41d6:	b95b      	cbnz	r3, d41f0 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d41d8:	6823      	ldr	r3, [r4, #0]
   d41da:	4620      	mov	r0, r4
   d41dc:	689b      	ldr	r3, [r3, #8]
   d41de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41e0:	68a3      	ldr	r3, [r4, #8]
   d41e2:	3b01      	subs	r3, #1
   d41e4:	60a3      	str	r3, [r4, #8]
   d41e6:	b91b      	cbnz	r3, d41f0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d41e8:	6823      	ldr	r3, [r4, #0]
   d41ea:	4620      	mov	r0, r4
   d41ec:	68db      	ldr	r3, [r3, #12]
   d41ee:	4798      	blx	r3
   d41f0:	4628      	mov	r0, r5
   d41f2:	bd38      	pop	{r3, r4, r5, pc}
   d41f4:	000da7bc 	.word	0x000da7bc

000d41f8 <_ZN9TCPClientD0Ev>:
   d41f8:	b510      	push	{r4, lr}
   d41fa:	4604      	mov	r4, r0
   d41fc:	f7ff ffe2 	bl	d41c4 <_ZN9TCPClientD1Ev>
   d4200:	4620      	mov	r0, r4
   d4202:	211c      	movs	r1, #28
   d4204:	f004 fe5c 	bl	d8ec0 <_ZdlPvj>
   d4208:	4620      	mov	r0, r4
   d420a:	bd10      	pop	{r4, pc}

000d420c <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d420c:	b530      	push	{r4, r5, lr}
   d420e:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4210:	4b1c      	ldr	r3, [pc, #112]	; (d4284 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d4212:	9300      	str	r3, [sp, #0]
   d4214:	7913      	ldrb	r3, [r2, #4]
   d4216:	f88d 3004 	strb.w	r3, [sp, #4]
   d421a:	6893      	ldr	r3, [r2, #8]
   d421c:	9302      	str	r3, [sp, #8]
   d421e:	7b13      	ldrb	r3, [r2, #12]
   d4220:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4224:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d4228:	7b53      	ldrb	r3, [r2, #13]
   d422a:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d422e:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4230:	460a      	mov	r2, r1
   d4232:	466b      	mov	r3, sp
   d4234:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d4238:	4628      	mov	r0, r5
   d423a:	f002 fc3b 	bl	d6ab4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d423e:	b1f0      	cbz	r0, d427e <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4240:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d4242:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d4246:	4628      	mov	r0, r5
   d4248:	f002 f896 	bl	d6378 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d424c:	2101      	movs	r1, #1
   d424e:	4620      	mov	r0, r4
   d4250:	f002 fad9 	bl	d6806 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4254:	4601      	mov	r1, r0
   d4256:	b168      	cbz	r0, d4274 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d4258:	4621      	mov	r1, r4
   d425a:	4628      	mov	r0, r5
   d425c:	f001 fea3 	bl	d5fa6 <_ZN7FatFile8openRootEP9FatVolume>
   d4260:	b168      	cbz	r0, d427e <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4262:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4266:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d426a:	bf16      	itet	ne
   d426c:	4b06      	ldrne	r3, [pc, #24]	; (d4288 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d426e:	4618      	moveq	r0, r3
   d4270:	601d      	strne	r5, [r3, #0]
   d4272:	e005      	b.n	d4280 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4274:	4620      	mov	r0, r4
   d4276:	f002 fac6 	bl	d6806 <_ZN9FatVolume4initEh>
   d427a:	2800      	cmp	r0, #0
   d427c:	d1ec      	bne.n	d4258 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d427e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d4280:	b005      	add	sp, #20
   d4282:	bd30      	pop	{r4, r5, pc}
   d4284:	000d9fd4 	.word	0x000d9fd4
   d4288:	2003e39c 	.word	0x2003e39c

000d428c <setup>:
int MQval;

/*    for syncing particle clock      */
char currentDateTime[25], currentTime[9];

void setup() {
   d428c:	b570      	push	{r4, r5, r6, lr}
   d428e:	b086      	sub	sp, #24
  Serial.begin(9600);
   d4290:	f003 ff7a 	bl	d8188 <_Z16_fetch_usbserialv>
   d4294:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4298:	f003 ff6a 	bl	d8170 <_ZN9USBSerial5beginEl>
  delay(100);
   d429c:	2064      	movs	r0, #100	; 0x64
   d429e:	f003 fde1 	bl	d7e64 <delay>
  Serial1.begin(9600); // for using with the DFRobot player
   d42a2:	f004 f823 	bl	d82ec <_Z22__fetch_global_Serial1v>
   d42a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42aa:	f004 f819 	bl	d82e0 <_ZN11USARTSerial5beginEm>
  delay(100); // waiting for serial monitor to initialize 
   d42ae:	2064      	movs	r0, #100	; 0x64
   d42b0:	f003 fdd8 	bl	d7e64 <delay>
  Wire.begin();
   d42b4:	f004 fdd0 	bl	d8e58 <_Z19__fetch_global_Wirev>
   d42b8:	f004 f87c 	bl	d83b4 <_ZN7TwoWire5beginEv>

  last = 0; // for MQTT publish timer. 
   d42bc:	4b2a      	ldr	r3, [pc, #168]	; (d4368 <setup+0xdc>)

  pixel.begin();
   d42be:	482b      	ldr	r0, [pc, #172]	; (d436c <setup+0xe0>)
  pixel.show();

  bme.begin(0x76);
  senseAQ.init();

  pinMode(Bpin, INPUT_PULLDOWN);
   d42c0:	4e2b      	ldr	r6, [pc, #172]	; (d4370 <setup+0xe4>)
  delay(100);
  Serial1.begin(9600); // for using with the DFRobot player
  delay(100); // waiting for serial monitor to initialize 
  Wire.begin();

  last = 0; // for MQTT publish timer. 
   d42c2:	2400      	movs	r4, #0
   d42c4:	601c      	str	r4, [r3, #0]

  pixel.begin();
   d42c6:	f000 fe89 	bl	d4fdc <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.clear();
   d42ca:	4828      	ldr	r0, [pc, #160]	; (d436c <setup+0xe0>)
   d42cc:	f001 f8cf 	bl	d546e <_ZN17Adafruit_NeoPixel5clearEv>
  pixel.show();
   d42d0:	4826      	ldr	r0, [pc, #152]	; (d436c <setup+0xe0>)
   d42d2:	f000 feb9 	bl	d5048 <_ZN17Adafruit_NeoPixel4showEv>

  bme.begin(0x76);
   d42d6:	2176      	movs	r1, #118	; 0x76
   d42d8:	4826      	ldr	r0, [pc, #152]	; (d4374 <setup+0xe8>)
   d42da:	f000 fe43 	bl	d4f64 <_ZN15Adafruit_BME2805beginEh>
  senseAQ.init();
   d42de:	4826      	ldr	r0, [pc, #152]	; (d4378 <setup+0xec>)
   d42e0:	f002 fe11 	bl	d6f06 <_ZN16AirQualitySensor4initEv>

  pinMode(Bpin, INPUT_PULLDOWN);
   d42e4:	2103      	movs	r1, #3
   d42e6:	8830      	ldrh	r0, [r6, #0]
   d42e8:	f004 fd48 	bl	d8d7c <pinMode>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d42ec:	4b23      	ldr	r3, [pc, #140]	; (d437c <setup+0xf0>)
   d42ee:	9302      	str	r3, [sp, #8]
   d42f0:	2501      	movs	r5, #1
   d42f2:	4b23      	ldr	r3, [pc, #140]	; (d4380 <setup+0xf4>)

  if(!SD.begin(SD_CS_PIN)){
   d42f4:	4823      	ldr	r0, [pc, #140]	; (d4384 <setup+0xf8>)
   d42f6:	f88d 400c 	strb.w	r4, [sp, #12]
   d42fa:	aa02      	add	r2, sp, #8
   d42fc:	210e      	movs	r1, #14
   d42fe:	9304      	str	r3, [sp, #16]
   d4300:	f88d 5014 	strb.w	r5, [sp, #20]
   d4304:	f88d 4015 	strb.w	r4, [sp, #21]
   d4308:	f7ff ff80 	bl	d420c <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d430c:	b928      	cbnz	r0, d431a <setup+0x8e>
    Serial.println("initialization failed!");
   d430e:	f003 ff3b 	bl	d8188 <_Z16_fetch_usbserialv>
   d4312:	491d      	ldr	r1, [pc, #116]	; (d4388 <setup+0xfc>)
   d4314:	f003 fcaf 	bl	d7c76 <_ZN5Print7printlnEPKc>
    return;
   d4318:	e024      	b.n	d4364 <setup+0xd8>
  }
  Serial.println("SDlog init");
   d431a:	f003 ff35 	bl	d8188 <_Z16_fetch_usbserialv>
   d431e:	491b      	ldr	r1, [pc, #108]	; (d438c <setup+0x100>)
   d4320:	f003 fca9 	bl	d7c76 <_ZN5Print7printlnEPKc>
    if(!myDFP.begin(Serial1)){
   d4324:	f003 ffe2 	bl	d82ec <_Z22__fetch_global_Serial1v>
   d4328:	462a      	mov	r2, r5
   d432a:	4601      	mov	r1, r0
   d432c:	4818      	ldr	r0, [pc, #96]	; (d4390 <setup+0x104>)
   d432e:	f002 ff2b 	bl	d7188 <_ZN19DFRobotDFPlayerMini5beginER6Streamb>
   d4332:	b928      	cbnz	r0, d4340 <setup+0xb4>
    Serial.println("DFPlayer init failed");
   d4334:	f003 ff28 	bl	d8188 <_Z16_fetch_usbserialv>
   d4338:	4916      	ldr	r1, [pc, #88]	; (d4394 <setup+0x108>)
   d433a:	f003 fc9c 	bl	d7c76 <_ZN5Print7printlnEPKc>
   d433e:	e7fe      	b.n	d433e <setup+0xb2>
    while(true);
  } 
  Serial.println("DFPlayer init");
   d4340:	f003 ff22 	bl	d8188 <_Z16_fetch_usbserialv>
   d4344:	4914      	ldr	r1, [pc, #80]	; (d4398 <setup+0x10c>)
   d4346:	f003 fc96 	bl	d7c76 <_ZN5Print7printlnEPKc>

/*                          commented this chunk out while i tested the bme and other sensors.
  mqtt.subscribe(&subData);
  */
 Serial.println("Initialization finished");
   d434a:	f003 ff1d 	bl	d8188 <_Z16_fetch_usbserialv>
   d434e:	4913      	ldr	r1, [pc, #76]	; (d439c <setup+0x110>)
   d4350:	f003 fc91 	bl	d7c76 <_ZN5Print7printlnEPKc>
 attachInterrupt(Bpin, enableButton, RISING);
   d4354:	8830      	ldrh	r0, [r6, #0]
   d4356:	9400      	str	r4, [sp, #0]
   d4358:	f04f 33ff 	mov.w	r3, #4294967295
   d435c:	462a      	mov	r2, r5
   d435e:	4910      	ldr	r1, [pc, #64]	; (d43a0 <setup+0x114>)
   d4360:	f003 ff3a 	bl	d81d8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d4364:	b006      	add	sp, #24
   d4366:	bd70      	pop	{r4, r5, r6, pc}
   d4368:	2003dcec 	.word	0x2003dcec
   d436c:	2003e350 	.word	0x2003e350
   d4370:	2003dc1c 	.word	0x2003dc1c
   d4374:	2003dcf4 	.word	0x2003dcf4
   d4378:	2003e2c8 	.word	0x2003e2c8
   d437c:	000d9fd4 	.word	0x000d9fd4
   d4380:	02faf080 	.word	0x02faf080
   d4384:	2003de0c 	.word	0x2003de0c
   d4388:	000da04f 	.word	0x000da04f
   d438c:	000da066 	.word	0x000da066
   d4390:	2003e2e8 	.word	0x2003e2e8
   d4394:	000da071 	.word	0x000da071
   d4398:	000da086 	.word	0x000da086
   d439c:	000da094 	.word	0x000da094
   d43a0:	000d40e5 	.word	0x000d40e5

000d43a4 <_Z13LEDBrightnessv>:
  //myDFP.playMp3Folder(3); //switch all DFP functions to playMP3Folder
  //delay(60000);

}

void LEDBrightness(){ // function for using the photoresistor to adjust the brightness of the NeoPixels to be relative to the lighting of the enviornment.
   d43a4:	b507      	push	{r0, r1, r2, lr}
  int pVal;
  int pPin = A2;
  pVal = analogRead(pPin);  // dont have pinmode in setup but works anyways?
   d43a6:	2011      	movs	r0, #17
   d43a8:	f004 fd25 	bl	d8df6 <analogRead>
  luminoscity = map(pVal,800,4096,10,255);
   d43ac:	23ff      	movs	r3, #255	; 0xff
   d43ae:	9300      	str	r3, [sp, #0]
   d43b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   d43b4:	230a      	movs	r3, #10
   d43b6:	f44f 7148 	mov.w	r1, #800	; 0x320
   d43ba:	f003 fd47 	bl	d7e4c <_Z3mapiiiii>
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <_Z13LEDBrightnessv+0x24>)
   d43c0:	6018      	str	r0, [r3, #0]
}  
   d43c2:	b003      	add	sp, #12
   d43c4:	f85d fb04 	ldr.w	pc, [sp], #4
   d43c8:	2003e2e4 	.word	0x2003e2e4

000d43cc <_Z14HighQualityLEDv>:
void HighQualityLED(){
   d43cc:	b508      	push	{r3, lr}
  if(pixelState){
   d43ce:	4b11      	ldr	r3, [pc, #68]	; (d4414 <_Z14HighQualityLEDv+0x48>)
    pixel.clear();
   d43d0:	4811      	ldr	r0, [pc, #68]	; (d4418 <_Z14HighQualityLEDv+0x4c>)
  int pPin = A2;
  pVal = analogRead(pPin);  // dont have pinmode in setup but works anyways?
  luminoscity = map(pVal,800,4096,10,255);
}  
void HighQualityLED(){
  if(pixelState){
   d43d2:	781b      	ldrb	r3, [r3, #0]
   d43d4:	b1bb      	cbz	r3, d4406 <_Z14HighQualityLEDv+0x3a>
    pixel.clear();
   d43d6:	f001 f84a 	bl	d546e <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.setPixelColor(0,green);
   d43da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   d43de:	2100      	movs	r1, #0
   d43e0:	480d      	ldr	r0, [pc, #52]	; (d4418 <_Z14HighQualityLEDv+0x4c>)
   d43e2:	f000 ffd3 	bl	d538c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setPixelColor(1,green);
   d43e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   d43ea:	2101      	movs	r1, #1
   d43ec:	480a      	ldr	r0, [pc, #40]	; (d4418 <_Z14HighQualityLEDv+0x4c>)
   d43ee:	f000 ffcd 	bl	d538c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setBrightness(luminoscity);  // replace with luminoscity  
   d43f2:	4b0a      	ldr	r3, [pc, #40]	; (d441c <_Z14HighQualityLEDv+0x50>)
   d43f4:	4808      	ldr	r0, [pc, #32]	; (d4418 <_Z14HighQualityLEDv+0x4c>)
   d43f6:	7819      	ldrb	r1, [r3, #0]
   d43f8:	f001 f813 	bl	d5422 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    pixel.show();
   d43fc:	4806      	ldr	r0, [pc, #24]	; (d4418 <_Z14HighQualityLEDv+0x4c>)
  }
  else if(!pixelState){
    pixel.clear();
    pixel.show();
  }
}
   d43fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if(pixelState){
    pixel.clear();
    pixel.setPixelColor(0,green);
    pixel.setPixelColor(1,green);
    pixel.setBrightness(luminoscity);  // replace with luminoscity  
    pixel.show();
   d4402:	f000 be21 	b.w	d5048 <_ZN17Adafruit_NeoPixel4showEv>
  }
  else if(!pixelState){
    pixel.clear();
   d4406:	f001 f832 	bl	d546e <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.show();
   d440a:	4803      	ldr	r0, [pc, #12]	; (d4418 <_Z14HighQualityLEDv+0x4c>)
  }
}
   d440c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pixel.setBrightness(luminoscity);  // replace with luminoscity  
    pixel.show();
  }
  else if(!pixelState){
    pixel.clear();
    pixel.show();
   d4410:	f000 be1a 	b.w	d5048 <_ZN17Adafruit_NeoPixel4showEv>
   d4414:	2003e34c 	.word	0x2003e34c
   d4418:	2003e350 	.word	0x2003e350
   d441c:	2003e2e4 	.word	0x2003e2e4

000d4420 <_Z13MidQualityLEDv>:
  }
}
void MidQualityLED(){
   d4420:	b508      	push	{r3, lr}
  if(pixelState){
   d4422:	4b10      	ldr	r3, [pc, #64]	; (d4464 <_Z13MidQualityLEDv+0x44>)
    pixel.clear();
   d4424:	4810      	ldr	r0, [pc, #64]	; (d4468 <_Z13MidQualityLEDv+0x48>)
    pixel.clear();
    pixel.show();
  }
}
void MidQualityLED(){
  if(pixelState){
   d4426:	781b      	ldrb	r3, [r3, #0]
   d4428:	b1ab      	cbz	r3, d4456 <_Z13MidQualityLEDv+0x36>
    pixel.clear();
   d442a:	f001 f820 	bl	d546e <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.setPixelColor(0, yellow);
   d442e:	4a0f      	ldr	r2, [pc, #60]	; (d446c <_Z13MidQualityLEDv+0x4c>)
   d4430:	480d      	ldr	r0, [pc, #52]	; (d4468 <_Z13MidQualityLEDv+0x48>)
   d4432:	2100      	movs	r1, #0
   d4434:	f000 ffaa 	bl	d538c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setPixelColor(1, yellow);
   d4438:	4a0c      	ldr	r2, [pc, #48]	; (d446c <_Z13MidQualityLEDv+0x4c>)
   d443a:	480b      	ldr	r0, [pc, #44]	; (d4468 <_Z13MidQualityLEDv+0x48>)
   d443c:	2101      	movs	r1, #1
   d443e:	f000 ffa5 	bl	d538c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setBrightness(luminoscity);
   d4442:	4b0b      	ldr	r3, [pc, #44]	; (d4470 <_Z13MidQualityLEDv+0x50>)
   d4444:	4808      	ldr	r0, [pc, #32]	; (d4468 <_Z13MidQualityLEDv+0x48>)
   d4446:	7819      	ldrb	r1, [r3, #0]
   d4448:	f000 ffeb 	bl	d5422 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    pixel.show();
   d444c:	4806      	ldr	r0, [pc, #24]	; (d4468 <_Z13MidQualityLEDv+0x48>)
  }
  else if(!pixelState){
    pixel.clear();
    pixel.show();
  }
}
   d444e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if(pixelState){
    pixel.clear();
    pixel.setPixelColor(0, yellow);
    pixel.setPixelColor(1, yellow);
    pixel.setBrightness(luminoscity);
    pixel.show();
   d4452:	f000 bdf9 	b.w	d5048 <_ZN17Adafruit_NeoPixel4showEv>
  }
  else if(!pixelState){
    pixel.clear();
   d4456:	f001 f80a 	bl	d546e <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.show();
   d445a:	4803      	ldr	r0, [pc, #12]	; (d4468 <_Z13MidQualityLEDv+0x48>)
  }
}
   d445c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pixel.setBrightness(luminoscity);
    pixel.show();
  }
  else if(!pixelState){
    pixel.clear();
    pixel.show();
   d4460:	f000 bdf2 	b.w	d5048 <_ZN17Adafruit_NeoPixel4showEv>
   d4464:	2003e34c 	.word	0x2003e34c
   d4468:	2003e350 	.word	0x2003e350
   d446c:	00ffff00 	.word	0x00ffff00
   d4470:	2003e2e4 	.word	0x2003e2e4

000d4474 <_Z13LowQualityLEDv>:
  }
}
void LowQualityLED(){
   d4474:	b508      	push	{r3, lr}
  if(pixelState){
   d4476:	4b10      	ldr	r3, [pc, #64]	; (d44b8 <_Z13LowQualityLEDv+0x44>)
    pixel.clear();
   d4478:	4810      	ldr	r0, [pc, #64]	; (d44bc <_Z13LowQualityLEDv+0x48>)
    pixel.clear();
    pixel.show();
  }
}
void LowQualityLED(){
  if(pixelState){
   d447a:	781b      	ldrb	r3, [r3, #0]
   d447c:	b1ab      	cbz	r3, d44aa <_Z13LowQualityLEDv+0x36>
    pixel.clear();
   d447e:	f000 fff6 	bl	d546e <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.setPixelColor(0, orange);
   d4482:	4a0f      	ldr	r2, [pc, #60]	; (d44c0 <_Z13LowQualityLEDv+0x4c>)
   d4484:	480d      	ldr	r0, [pc, #52]	; (d44bc <_Z13LowQualityLEDv+0x48>)
   d4486:	2100      	movs	r1, #0
   d4488:	f000 ff80 	bl	d538c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setPixelColor(1, orange);
   d448c:	4a0c      	ldr	r2, [pc, #48]	; (d44c0 <_Z13LowQualityLEDv+0x4c>)
   d448e:	480b      	ldr	r0, [pc, #44]	; (d44bc <_Z13LowQualityLEDv+0x48>)
   d4490:	2101      	movs	r1, #1
   d4492:	f000 ff7b 	bl	d538c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setBrightness(luminoscity);
   d4496:	4b0b      	ldr	r3, [pc, #44]	; (d44c4 <_Z13LowQualityLEDv+0x50>)
   d4498:	4808      	ldr	r0, [pc, #32]	; (d44bc <_Z13LowQualityLEDv+0x48>)
   d449a:	7819      	ldrb	r1, [r3, #0]
   d449c:	f000 ffc1 	bl	d5422 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    pixel.show();
   d44a0:	4806      	ldr	r0, [pc, #24]	; (d44bc <_Z13LowQualityLEDv+0x48>)
  }
  else if(!pixelState){
    pixel.clear();
    pixel.show();
  }
}
   d44a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if(pixelState){
    pixel.clear();
    pixel.setPixelColor(0, orange);
    pixel.setPixelColor(1, orange);
    pixel.setBrightness(luminoscity);
    pixel.show();
   d44a6:	f000 bdcf 	b.w	d5048 <_ZN17Adafruit_NeoPixel4showEv>
  }
  else if(!pixelState){
    pixel.clear();
   d44aa:	f000 ffe0 	bl	d546e <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.show();
   d44ae:	4803      	ldr	r0, [pc, #12]	; (d44bc <_Z13LowQualityLEDv+0x48>)
  }
}
   d44b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pixel.setBrightness(luminoscity);
    pixel.show();
  }
  else if(!pixelState){
    pixel.clear();
    pixel.show();
   d44b4:	f000 bdc8 	b.w	d5048 <_ZN17Adafruit_NeoPixel4showEv>
   d44b8:	2003e34c 	.word	0x2003e34c
   d44bc:	2003e350 	.word	0x2003e350
   d44c0:	00ffa500 	.word	0x00ffa500
   d44c4:	2003e2e4 	.word	0x2003e2e4

000d44c8 <_Z9DangerLEDv>:
  }
}
void DangerLED(){
   d44c8:	b508      	push	{r3, lr}
  if(pixelState){
   d44ca:	4b11      	ldr	r3, [pc, #68]	; (d4510 <_Z9DangerLEDv+0x48>)
    pixel.clear();
   d44cc:	4811      	ldr	r0, [pc, #68]	; (d4514 <_Z9DangerLEDv+0x4c>)
    pixel.clear();
    pixel.show();
  }
}
void DangerLED(){
  if(pixelState){
   d44ce:	781b      	ldrb	r3, [r3, #0]
   d44d0:	b1bb      	cbz	r3, d4502 <_Z9DangerLEDv+0x3a>
    pixel.clear();
   d44d2:	f000 ffcc 	bl	d546e <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.setPixelColor(0, red);
   d44d6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   d44da:	2100      	movs	r1, #0
   d44dc:	480d      	ldr	r0, [pc, #52]	; (d4514 <_Z9DangerLEDv+0x4c>)
   d44de:	f000 ff55 	bl	d538c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setPixelColor(1, red);
   d44e2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   d44e6:	2101      	movs	r1, #1
   d44e8:	480a      	ldr	r0, [pc, #40]	; (d4514 <_Z9DangerLEDv+0x4c>)
   d44ea:	f000 ff4f 	bl	d538c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setBrightness(luminoscity);
   d44ee:	4b0a      	ldr	r3, [pc, #40]	; (d4518 <_Z9DangerLEDv+0x50>)
   d44f0:	4808      	ldr	r0, [pc, #32]	; (d4514 <_Z9DangerLEDv+0x4c>)
   d44f2:	7819      	ldrb	r1, [r3, #0]
   d44f4:	f000 ff95 	bl	d5422 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    pixel.show();
   d44f8:	4806      	ldr	r0, [pc, #24]	; (d4514 <_Z9DangerLEDv+0x4c>)
  }
  else if(!pixelState){
    pixel.clear();
    pixel.show();
  }
}
   d44fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if(pixelState){
    pixel.clear();
    pixel.setPixelColor(0, red);
    pixel.setPixelColor(1, red);
    pixel.setBrightness(luminoscity);
    pixel.show();
   d44fe:	f000 bda3 	b.w	d5048 <_ZN17Adafruit_NeoPixel4showEv>
  }
  else if(!pixelState){
    pixel.clear();
   d4502:	f000 ffb4 	bl	d546e <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.show();
   d4506:	4803      	ldr	r0, [pc, #12]	; (d4514 <_Z9DangerLEDv+0x4c>)
  }
}
   d4508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pixel.setBrightness(luminoscity);
    pixel.show();
  }
  else if(!pixelState){
    pixel.clear();
    pixel.show();
   d450c:	f000 bd9c 	b.w	d5048 <_ZN17Adafruit_NeoPixel4showEv>
   d4510:	2003e34c 	.word	0x2003e34c
   d4514:	2003e350 	.word	0x2003e350
   d4518:	2003e2e4 	.word	0x2003e2e4

000d451c <_Z11MQTTConnectv>:
  }
}

/*      function for starting up the connection to MQTT. dont forget to do IFTTT       */
void MQTTConnect(){
   d451c:	b538      	push	{r3, r4, r5, lr}
  int8_t ret;
  if(mqtt.connected()){ // if mqtt is connected, stop
   d451e:	4817      	ldr	r0, [pc, #92]	; (d457c <_Z11MQTTConnectv+0x60>)
   d4520:	f000 ffb8 	bl	d5494 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d4524:	bb40      	cbnz	r0, d4578 <_Z11MQTTConnectv+0x5c>
    return;
  }
  Serial.print("connecting to MQTT ...");
   d4526:	f003 fe2f 	bl	d8188 <_Z16_fetch_usbserialv>
   d452a:	4915      	ldr	r1, [pc, #84]	; (d4580 <_Z11MQTTConnectv+0x64>)
   d452c:	f003 fb90 	bl	d7c50 <_ZN5Print5printEPKc>
  while((ret = mqtt.connect()) != 0){ // if connected, will return a 0
   d4530:	4812      	ldr	r0, [pc, #72]	; (d457c <_Z11MQTTConnectv+0x60>)
   d4532:	f001 f961 	bl	d57f8 <_ZN13Adafruit_MQTT7connectEv>
   d4536:	4604      	mov	r4, r0
   d4538:	b1b8      	cbz	r0, d456a <_Z11MQTTConnectv+0x4e>
    Serial.println(mqtt.connectErrorString(ret));
   d453a:	f003 fe25 	bl	d8188 <_Z16_fetch_usbserialv>
   d453e:	4621      	mov	r1, r4
   d4540:	4605      	mov	r5, r0
   d4542:	480e      	ldr	r0, [pc, #56]	; (d457c <_Z11MQTTConnectv+0x60>)
   d4544:	f001 f8be 	bl	d56c4 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d4548:	4601      	mov	r1, r0
   d454a:	4628      	mov	r0, r5
   d454c:	f003 fb93 	bl	d7c76 <_ZN5Print7printlnEPKc>
    Serial.println("retrying MQTT connection in 5 seconds...");
   d4550:	f003 fe1a 	bl	d8188 <_Z16_fetch_usbserialv>
   d4554:	490b      	ldr	r1, [pc, #44]	; (d4584 <_Z11MQTTConnectv+0x68>)
   d4556:	f003 fb8e 	bl	d7c76 <_ZN5Print7printlnEPKc>
    mqtt.disconnect();
   d455a:	4808      	ldr	r0, [pc, #32]	; (d457c <_Z11MQTTConnectv+0x60>)
   d455c:	f001 f8c0 	bl	d56e0 <_ZN13Adafruit_MQTT10disconnectEv>
    delay(5000);
   d4560:	f241 3088 	movw	r0, #5000	; 0x1388
   d4564:	f003 fc7e 	bl	d7e64 <delay>
   d4568:	e7e2      	b.n	d4530 <_Z11MQTTConnectv+0x14>
  }
  Serial.println("MQTT connected!");
   d456a:	f003 fe0d 	bl	d8188 <_Z16_fetch_usbserialv>
   d456e:	4906      	ldr	r1, [pc, #24]	; (d4588 <_Z11MQTTConnectv+0x6c>)
}
   d4570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println(mqtt.connectErrorString(ret));
    Serial.println("retrying MQTT connection in 5 seconds...");
    mqtt.disconnect();
    delay(5000);
  }
  Serial.println("MQTT connected!");
   d4574:	f003 bb7f 	b.w	d7c76 <_ZN5Print7printlnEPKc>
   d4578:	bd38      	pop	{r3, r4, r5, pc}
   d457a:	bf00      	nop
   d457c:	2003dd38 	.word	0x2003dd38
   d4580:	000da0ac 	.word	0x000da0ac
   d4584:	000da0c3 	.word	0x000da0c3
   d4588:	000da0ec 	.word	0x000da0ec

000d458c <_Z8SyncTimev>:
  if(file){ // if the files open, close it
    file.close();
    }
}

void SyncTime(){ // syncing particle clock to cloud clock to get accurate time for timestamps
   d458c:	b500      	push	{lr}
   d458e:	b08d      	sub	sp, #52	; 0x34
  String DateTime, TimeOnly;
   d4590:	4924      	ldr	r1, [pc, #144]	; (d4624 <_Z8SyncTimev+0x98>)
   d4592:	4668      	mov	r0, sp
   d4594:	f003 fab9 	bl	d7b0a <_ZN6StringC1EPK19__FlashStringHelper>
   d4598:	4922      	ldr	r1, [pc, #136]	; (d4624 <_Z8SyncTimev+0x98>)
   d459a:	a804      	add	r0, sp, #16
   d459c:	f003 fab5 	bl	d7b0a <_ZN6StringC1EPK19__FlashStringHelper>
  Time.zone(-6);
   d45a0:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d45a4:	f003 fbe2 	bl	d7d6c <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d45a8:	f003 f8da 	bl	d7760 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d45ac:	b110      	cbz	r0, d45b4 <_Z8SyncTimev+0x28>
            return false;
        }
        return spark_sync_time(NULL);
   d45ae:	2000      	movs	r0, #0
   d45b0:	f003 f8de 	bl	d7770 <spark_sync_time>
  Particle.syncTime();
  waitUntil(Particle.syncTimeDone);
   d45b4:	f7ff fdf8 	bl	d41a8 <_ZN10CloudClass12syncTimeDoneEv.isra.3>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d45b8:	b910      	cbnz	r0, d45c0 <_Z8SyncTimev+0x34>
            spark_process();
   d45ba:	f003 f8c9 	bl	d7750 <spark_process>
   d45be:	e7f9      	b.n	d45b4 <_Z8SyncTimev+0x28>
   d45c0:	f7ff fdf2 	bl	d41a8 <_ZN10CloudClass12syncTimeDoneEv.isra.3>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d45c4:	f003 fc31 	bl	d7e2a <_ZN9TimeClass3nowEv>
   d45c8:	4601      	mov	r1, r0
   d45ca:	a808      	add	r0, sp, #32
   d45cc:	f003 fbea 	bl	d7da4 <_ZN9TimeClass7timeStrEl>
  DateTime = Time.timeStr();
   d45d0:	a908      	add	r1, sp, #32
   d45d2:	4668      	mov	r0, sp
   d45d4:	f003 fac9 	bl	d7b6a <_ZN6StringaSEOS_>
   d45d8:	a808      	add	r0, sp, #32
   d45da:	f003 fa4f 	bl	d7a7c <_ZN6StringD1Ev>
  TimeOnly = DateTime.substring(11,19);
   d45de:	2313      	movs	r3, #19
   d45e0:	220b      	movs	r2, #11
   d45e2:	4669      	mov	r1, sp
   d45e4:	a808      	add	r0, sp, #32
   d45e6:	f003 fae1 	bl	d7bac <_ZNK6String9substringEjj>
   d45ea:	a908      	add	r1, sp, #32
   d45ec:	a804      	add	r0, sp, #16
   d45ee:	f003 fabc 	bl	d7b6a <_ZN6StringaSEOS_>
   d45f2:	a808      	add	r0, sp, #32
   d45f4:	f003 fa42 	bl	d7a7c <_ZN6StringD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d45f8:	4668      	mov	r0, sp
   d45fa:	2300      	movs	r3, #0
   d45fc:	2219      	movs	r2, #25
   d45fe:	490a      	ldr	r1, [pc, #40]	; (d4628 <_Z8SyncTimev+0x9c>)
   d4600:	f003 fabb 	bl	d7b7a <_ZNK6String8getBytesEPhjj>
   d4604:	2300      	movs	r3, #0
   d4606:	2209      	movs	r2, #9
   d4608:	4908      	ldr	r1, [pc, #32]	; (d462c <_Z8SyncTimev+0xa0>)
   d460a:	a804      	add	r0, sp, #16
   d460c:	f003 fab5 	bl	d7b7a <_ZNK6String8getBytesEPhjj>
    file.close();
    }
}

void SyncTime(){ // syncing particle clock to cloud clock to get accurate time for timestamps
  String DateTime, TimeOnly;
   d4610:	a804      	add	r0, sp, #16
   d4612:	f003 fa33 	bl	d7a7c <_ZN6StringD1Ev>
   d4616:	4668      	mov	r0, sp
   d4618:	f003 fa30 	bl	d7a7c <_ZN6StringD1Ev>
  waitUntil(Particle.syncTimeDone);
  DateTime = Time.timeStr();
  TimeOnly = DateTime.substring(11,19);
  DateTime.toCharArray(currentDateTime,25);
  TimeOnly.toCharArray(currentTime,9);
}
   d461c:	b00d      	add	sp, #52	; 0x34
   d461e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4622:	bf00      	nop
   d4624:	000da3a9 	.word	0x000da3a9
   d4628:	2003e364 	.word	0x2003e364
   d462c:	2003e38c 	.word	0x2003e38c

000d4630 <_ZN5Print6printfIIiEEEjPKcDpT_>:
   d4630:	4613      	mov	r3, r2
   d4632:	460a      	mov	r2, r1
   d4634:	2100      	movs	r1, #0
   d4636:	f003 bb48 	b.w	d7cca <_ZN5Print11printf_implEbPKcz>
	...

000d463c <_Z14WarningMessagev>:
  hum = bme.readHumidity();
  press = (bme.readPressure() / 100.0F);
  alt = bme.readAltitude(SEALEVELPRESSURE_HPA);
}

void WarningMessage(){ // this function reads the sensory data and outputs a meassage accordingly 
   d463c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4640:	b092      	sub	sp, #72	; 0x48
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4642:	2300      	movs	r3, #0
   d4644:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d4648:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d464c:	9306      	str	r3, [sp, #24]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d464e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4652:	9307      	str	r3, [sp, #28]
 public:
  File() {}
   d4654:	4b6d      	ldr	r3, [pc, #436]	; (d480c <_Z14WarningMessagev+0x1d0>)
   d4656:	9305      	str	r3, [sp, #20]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d4658:	4a6d      	ldr	r2, [pc, #436]	; (d4810 <_Z14WarningMessagev+0x1d4>)
   d465a:	496e      	ldr	r1, [pc, #440]	; (d4814 <_Z14WarningMessagev+0x1d8>)
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d465c:	4e6e      	ldr	r6, [pc, #440]	; (d4818 <_Z14WarningMessagev+0x1dc>)
   d465e:	f244 2302 	movw	r3, #16898	; 0x4202
   d4662:	a809      	add	r0, sp, #36	; 0x24
   d4664:	ac09      	add	r4, sp, #36	; 0x24
   d4666:	f001 fe8e 	bl	d6386 <_ZN7FatFile4openEPS_PKci>
   d466a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d466c:	f106 0510 	add.w	r5, r6, #16
   d4670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4676:	6823      	ldr	r3, [r4, #0]
   d4678:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d467a:	9b06      	ldr	r3, [sp, #24]
   d467c:	6073      	str	r3, [r6, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d467e:	9b07      	ldr	r3, [sp, #28]
   d4680:	60b3      	str	r3, [r6, #8]
   d4682:	9b08      	ldr	r3, [sp, #32]
  file = SD.open("DataLog.txt", FILE_WRITE);
  static int lastQualityValue;
  static int lastMQval;
  if(qualityValue == lastQualityValue && lastMQval == MQval){
   d4684:	4965      	ldr	r1, [pc, #404]	; (d481c <_Z14WarningMessagev+0x1e0>)
   d4686:	60f3      	str	r3, [r6, #12]
   d4688:	4b65      	ldr	r3, [pc, #404]	; (d4820 <_Z14WarningMessagev+0x1e4>)
   d468a:	680a      	ldr	r2, [r1, #0]
   d468c:	6818      	ldr	r0, [r3, #0]
   d468e:	4282      	cmp	r2, r0
   d4690:	4634      	mov	r4, r6
   d4692:	4864      	ldr	r0, [pc, #400]	; (d4824 <_Z14WarningMessagev+0x1e8>)
   d4694:	460e      	mov	r6, r1
   d4696:	4964      	ldr	r1, [pc, #400]	; (d4828 <_Z14WarningMessagev+0x1ec>)
   d4698:	d104      	bne.n	d46a4 <_Z14WarningMessagev+0x68>
   d469a:	680f      	ldr	r7, [r1, #0]
   d469c:	6805      	ldr	r5, [r0, #0]
   d469e:	42af      	cmp	r7, r5
   d46a0:	f000 80b0 	beq.w	d4804 <_Z14WarningMessagev+0x1c8>
    return;
    }
  else{
    lastQualityValue = qualityValue;
   d46a4:	601a      	str	r2, [r3, #0]
    lastMQval = MQval;
  }
  if(qualityValue>=3 && MQval<=3){ // statement for high air quality pollution
   d46a6:	2a02      	cmp	r2, #2
  if(qualityValue == lastQualityValue && lastMQval == MQval){
    return;
    }
  else{
    lastQualityValue = qualityValue;
    lastMQval = MQval;
   d46a8:	6803      	ldr	r3, [r0, #0]
   d46aa:	4d5e      	ldr	r5, [pc, #376]	; (d4824 <_Z14WarningMessagev+0x1e8>)
   d46ac:	600b      	str	r3, [r1, #0]
  }
  if(qualityValue>=3 && MQval<=3){ // statement for high air quality pollution
   d46ae:	dd21      	ble.n	d46f4 <_Z14WarningMessagev+0xb8>
   d46b0:	2b03      	cmp	r3, #3
   d46b2:	dc69      	bgt.n	d4788 <_Z14WarningMessagev+0x14c>
    MidQualityLED();
   d46b4:	f7ff feb4 	bl	d4420 <_Z13MidQualityLEDv>
    if(file){
   d46b8:	7c23      	ldrb	r3, [r4, #16]
   d46ba:	b18b      	cbz	r3, d46e0 <_Z14WarningMessagev+0xa4>
      Serial.printf("Air Quality warning. AQ read: %i \n", qualityValue); 
   d46bc:	f003 fd64 	bl	d8188 <_Z16_fetch_usbserialv>
   d46c0:	6832      	ldr	r2, [r6, #0]
   d46c2:	495a      	ldr	r1, [pc, #360]	; (d482c <_Z14WarningMessagev+0x1f0>)
   d46c4:	f7ff ffb4 	bl	d4630 <_ZN5Print6printfIIiEEEjPKcDpT_>
      file.printf("Air Quality Read: %i \n", qualityValue);
   d46c8:	6832      	ldr	r2, [r6, #0]
   d46ca:	4959      	ldr	r1, [pc, #356]	; (d4830 <_Z14WarningMessagev+0x1f4>)
   d46cc:	4852      	ldr	r0, [pc, #328]	; (d4818 <_Z14WarningMessagev+0x1dc>)
   d46ce:	f7ff ffaf 	bl	d4630 <_ZN5Print6printfIIiEEEjPKcDpT_>
      file.print(currentDateTime);
   d46d2:	4958      	ldr	r1, [pc, #352]	; (d4834 <_Z14WarningMessagev+0x1f8>)
   d46d4:	4850      	ldr	r0, [pc, #320]	; (d4818 <_Z14WarningMessagev+0x1dc>)
   d46d6:	f003 fabb 	bl	d7c50 <_ZN5Print5printEPKc>
      file.close();
   d46da:	4857      	ldr	r0, [pc, #348]	; (d4838 <_Z14WarningMessagev+0x1fc>)
   d46dc:	f001 fe4c 	bl	d6378 <_ZN7FatFile5closeEv>
    }
    if(!file){ // if theres an error with the file, log it
   d46e0:	7c23      	ldrb	r3, [r4, #16]
   d46e2:	2b00      	cmp	r3, #0
   d46e4:	f040 808b 	bne.w	d47fe <_Z14WarningMessagev+0x1c2>
      Serial.println("AQ write error");
   d46e8:	f003 fd4e 	bl	d8188 <_Z16_fetch_usbserialv>
   d46ec:	4953      	ldr	r1, [pc, #332]	; (d483c <_Z14WarningMessagev+0x200>)
   d46ee:	f003 fac2 	bl	d7c76 <_ZN5Print7printlnEPKc>
   d46f2:	e082      	b.n	d47fa <_Z14WarningMessagev+0x1be>
    }
  }
  else if(qualityValue<=2&& MQval>=3){ //statement for high MQ-9 pollution
   d46f4:	2b02      	cmp	r3, #2
   d46f6:	dd1e      	ble.n	d4736 <_Z14WarningMessagev+0xfa>
    LowQualityLED();
   d46f8:	f7ff febc 	bl	d4474 <_Z13LowQualityLEDv>
    if(file){
   d46fc:	7c23      	ldrb	r3, [r4, #16]
   d46fe:	b18b      	cbz	r3, d4724 <_Z14WarningMessagev+0xe8>
      Serial.printf("MQ-9 warning. MQ-9 read: %i \n", MQval);
   d4700:	f003 fd42 	bl	d8188 <_Z16_fetch_usbserialv>
   d4704:	682a      	ldr	r2, [r5, #0]
   d4706:	494e      	ldr	r1, [pc, #312]	; (d4840 <_Z14WarningMessagev+0x204>)
   d4708:	f7ff ff92 	bl	d4630 <_ZN5Print6printfIIiEEEjPKcDpT_>
      file.printf("MQ-9 read: %i \n", MQval);
   d470c:	682a      	ldr	r2, [r5, #0]
   d470e:	494d      	ldr	r1, [pc, #308]	; (d4844 <_Z14WarningMessagev+0x208>)
   d4710:	4841      	ldr	r0, [pc, #260]	; (d4818 <_Z14WarningMessagev+0x1dc>)
   d4712:	f7ff ff8d 	bl	d4630 <_ZN5Print6printfIIiEEEjPKcDpT_>
      file.print(currentDateTime);
   d4716:	4947      	ldr	r1, [pc, #284]	; (d4834 <_Z14WarningMessagev+0x1f8>)
   d4718:	483f      	ldr	r0, [pc, #252]	; (d4818 <_Z14WarningMessagev+0x1dc>)
   d471a:	f003 fa99 	bl	d7c50 <_ZN5Print5printEPKc>
      file.close();
   d471e:	4846      	ldr	r0, [pc, #280]	; (d4838 <_Z14WarningMessagev+0x1fc>)
   d4720:	f001 fe2a 	bl	d6378 <_ZN7FatFile5closeEv>
      // myDFP.playFolder(11, ); // switch to the mp3folder function
     // delay( ); // each DFP audio file needs a delay in seconds to let the audio file play
    }
    if(!file){
   d4724:	7c23      	ldrb	r3, [r4, #16]
   d4726:	2b00      	cmp	r3, #0
   d4728:	d169      	bne.n	d47fe <_Z14WarningMessagev+0x1c2>
      Serial.println("MQ-9 write error");
   d472a:	f003 fd2d 	bl	d8188 <_Z16_fetch_usbserialv>
   d472e:	4946      	ldr	r1, [pc, #280]	; (d4848 <_Z14WarningMessagev+0x20c>)
   d4730:	f003 faa1 	bl	d7c76 <_ZN5Print7printlnEPKc>
   d4734:	e061      	b.n	d47fa <_Z14WarningMessagev+0x1be>
    }
  }
    else if(qualityValue<=2&&MQval<=2){ // function for normal/clean readings
      HighQualityLED();
   d4736:	f7ff fe49 	bl	d43cc <_Z14HighQualityLEDv>
      if(file){
   d473a:	7c23      	ldrb	r3, [r4, #16]
   d473c:	b1db      	cbz	r3, d4776 <_Z14WarningMessagev+0x13a>
        Serial.printf("nominal reads. MQ9: %i AQ: %i Temperature: \n", MQval, qualityValue,temp);
   d473e:	f003 fd23 	bl	d8188 <_Z16_fetch_usbserialv>
   d4742:	4b42      	ldr	r3, [pc, #264]	; (d484c <_Z14WarningMessagev+0x210>)
   d4744:	4607      	mov	r7, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4746:	6818      	ldr	r0, [r3, #0]
   d4748:	f004 fe7a 	bl	d9440 <__aeabi_f2d>
   d474c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4750:	6833      	ldr	r3, [r6, #0]
   d4752:	9300      	str	r3, [sp, #0]
   d4754:	682b      	ldr	r3, [r5, #0]
   d4756:	4a3e      	ldr	r2, [pc, #248]	; (d4850 <_Z14WarningMessagev+0x214>)
   d4758:	2100      	movs	r1, #0
   d475a:	4638      	mov	r0, r7
   d475c:	f003 fab5 	bl	d7cca <_ZN5Print11printf_implEbPKcz>
        file.println("nominal readings. nothing to record");
   d4760:	493c      	ldr	r1, [pc, #240]	; (d4854 <_Z14WarningMessagev+0x218>)
   d4762:	482d      	ldr	r0, [pc, #180]	; (d4818 <_Z14WarningMessagev+0x1dc>)
   d4764:	f003 fa87 	bl	d7c76 <_ZN5Print7printlnEPKc>
        file.print(currentDateTime);
   d4768:	4932      	ldr	r1, [pc, #200]	; (d4834 <_Z14WarningMessagev+0x1f8>)
   d476a:	482b      	ldr	r0, [pc, #172]	; (d4818 <_Z14WarningMessagev+0x1dc>)
   d476c:	f003 fa70 	bl	d7c50 <_ZN5Print5printEPKc>
        file.close();
   d4770:	4831      	ldr	r0, [pc, #196]	; (d4838 <_Z14WarningMessagev+0x1fc>)
   d4772:	f001 fe01 	bl	d6378 <_ZN7FatFile5closeEv>
        // myDFP.playFolder(11, );
        // delay( );
      }
      if(!file){
   d4776:	7c23      	ldrb	r3, [r4, #16]
   d4778:	2b00      	cmp	r3, #0
   d477a:	d140      	bne.n	d47fe <_Z14WarningMessagev+0x1c2>
        Serial.println("nominal readings write error.");
   d477c:	f003 fd04 	bl	d8188 <_Z16_fetch_usbserialv>
   d4780:	4935      	ldr	r1, [pc, #212]	; (d4858 <_Z14WarningMessagev+0x21c>)
   d4782:	f003 fa78 	bl	d7c76 <_ZN5Print7printlnEPKc>
   d4786:	e038      	b.n	d47fa <_Z14WarningMessagev+0x1be>
      }
    }
  else if(qualityValue>=3 && MQval>=3 && temp>=100){ //statement for high levels of all sensors Ask Brian about the temp with the stuff at the top of this function
   d4788:	4f30      	ldr	r7, [pc, #192]	; (d484c <_Z14WarningMessagev+0x210>)
   d478a:	eddf 7a34 	vldr	s15, [pc, #208]	; d485c <_Z14WarningMessagev+0x220>
   d478e:	ed97 7a00 	vldr	s14, [r7]
   d4792:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d479a:	db2e      	blt.n	d47fa <_Z14WarningMessagev+0x1be>
    DangerLED();
   d479c:	f7ff fe94 	bl	d44c8 <_Z9DangerLEDv>
    if(file){
   d47a0:	7c23      	ldrb	r3, [r4, #16]
   d47a2:	b31b      	cbz	r3, d47ec <_Z14WarningMessagev+0x1b0>
      Serial.printf("DANGER IMMINANT. MQ-9: %i AQ: %i Temp: %i \n", MQval, qualityValue, temp); 
   d47a4:	f003 fcf0 	bl	d8188 <_Z16_fetch_usbserialv>
   d47a8:	4680      	mov	r8, r0
   d47aa:	6838      	ldr	r0, [r7, #0]
   d47ac:	f004 fe48 	bl	d9440 <__aeabi_f2d>
   d47b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d47b4:	6833      	ldr	r3, [r6, #0]
   d47b6:	9300      	str	r3, [sp, #0]
   d47b8:	682b      	ldr	r3, [r5, #0]
   d47ba:	4a29      	ldr	r2, [pc, #164]	; (d4860 <_Z14WarningMessagev+0x224>)
   d47bc:	2100      	movs	r1, #0
   d47be:	4640      	mov	r0, r8
   d47c0:	f003 fa83 	bl	d7cca <_ZN5Print11printf_implEbPKcz>
   d47c4:	6838      	ldr	r0, [r7, #0]
   d47c6:	f004 fe3b 	bl	d9440 <__aeabi_f2d>
   d47ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d47ce:	6833      	ldr	r3, [r6, #0]
   d47d0:	9300      	str	r3, [sp, #0]
   d47d2:	682b      	ldr	r3, [r5, #0]
   d47d4:	4a23      	ldr	r2, [pc, #140]	; (d4864 <_Z14WarningMessagev+0x228>)
   d47d6:	4810      	ldr	r0, [pc, #64]	; (d4818 <_Z14WarningMessagev+0x1dc>)
   d47d8:	2100      	movs	r1, #0
   d47da:	f003 fa76 	bl	d7cca <_ZN5Print11printf_implEbPKcz>
      file.printf("High Danger. MQ-9: %i AQ: %i Temp %i \n", MQval, qualityValue, temp);
      file.print(currentDateTime);
   d47de:	4915      	ldr	r1, [pc, #84]	; (d4834 <_Z14WarningMessagev+0x1f8>)
   d47e0:	480d      	ldr	r0, [pc, #52]	; (d4818 <_Z14WarningMessagev+0x1dc>)
   d47e2:	f003 fa35 	bl	d7c50 <_ZN5Print5printEPKc>
      file.close();
   d47e6:	4814      	ldr	r0, [pc, #80]	; (d4838 <_Z14WarningMessagev+0x1fc>)
   d47e8:	f001 fdc6 	bl	d6378 <_ZN7FatFile5closeEv>
     // myDFP.playFolder(11, );
     // delay( );
    }
    if(!file){
   d47ec:	7c23      	ldrb	r3, [r4, #16]
   d47ee:	b933      	cbnz	r3, d47fe <_Z14WarningMessagev+0x1c2>
      Serial.println("High danger write error.");
   d47f0:	f003 fcca 	bl	d8188 <_Z16_fetch_usbserialv>
   d47f4:	491c      	ldr	r1, [pc, #112]	; (d4868 <_Z14WarningMessagev+0x22c>)
   d47f6:	f003 fa3e 	bl	d7c76 <_ZN5Print7printlnEPKc>
    }
  }
  if(file){ // if the files open, close it
   d47fa:	7c23      	ldrb	r3, [r4, #16]
   d47fc:	b113      	cbz	r3, d4804 <_Z14WarningMessagev+0x1c8>
    file.close();
   d47fe:	480e      	ldr	r0, [pc, #56]	; (d4838 <_Z14WarningMessagev+0x1fc>)
   d4800:	f001 fdba 	bl	d6378 <_ZN7FatFile5closeEv>
    }
}
   d4804:	b012      	add	sp, #72	; 0x48
   d4806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d480a:	bf00      	nop
   d480c:	000d9fe0 	.word	0x000d9fe0
   d4810:	000da0fc 	.word	0x000da0fc
   d4814:	2003e248 	.word	0x2003e248
   d4818:	2003e314 	.word	0x2003e314
   d481c:	2003dcf0 	.word	0x2003dcf0
   d4820:	2003e348 	.word	0x2003e348
   d4824:	2003e310 	.word	0x2003e310
   d4828:	2003dce8 	.word	0x2003dce8
   d482c:	000da108 	.word	0x000da108
   d4830:	000da12b 	.word	0x000da12b
   d4834:	2003e364 	.word	0x2003e364
   d4838:	2003e324 	.word	0x2003e324
   d483c:	000da142 	.word	0x000da142
   d4840:	000da151 	.word	0x000da151
   d4844:	000da15f 	.word	0x000da15f
   d4848:	000da16f 	.word	0x000da16f
   d484c:	2003e2c4 	.word	0x2003e2c4
   d4850:	000da180 	.word	0x000da180
   d4854:	000da1ad 	.word	0x000da1ad
   d4858:	000da1d1 	.word	0x000da1d1
   d485c:	42c80000 	.word	0x42c80000
   d4860:	000da1ef 	.word	0x000da1ef
   d4864:	000da21b 	.word	0x000da21b
   d4868:	000da242 	.word	0x000da242

000d486c <loop>:
 attachInterrupt(Bpin, enableButton, RISING);
}

void loop() {
//MQTT_connect(); // the name for the function has changed
  qualityValue = 3;
   d486c:	4a09      	ldr	r2, [pc, #36]	; (d4894 <loop+0x28>)
  */
 Serial.println("Initialization finished");
 attachInterrupt(Bpin, enableButton, RISING);
}

void loop() {
   d486e:	b508      	push	{r3, lr}
//MQTT_connect(); // the name for the function has changed
  qualityValue = 3;
   d4870:	2303      	movs	r3, #3
   d4872:	6013      	str	r3, [r2, #0]
  MQval = 3;
   d4874:	4a08      	ldr	r2, [pc, #32]	; (d4898 <loop+0x2c>)
   d4876:	6013      	str	r3, [r2, #0]
  temp = 110;
   d4878:	4b08      	ldr	r3, [pc, #32]	; (d489c <loop+0x30>)
   d487a:	4a09      	ldr	r2, [pc, #36]	; (d48a0 <loop+0x34>)
   d487c:	601a      	str	r2, [r3, #0]
  MQTTConnect();
   d487e:	f7ff fe4d 	bl	d451c <_Z11MQTTConnectv>
  SyncTime();
   d4882:	f7ff fe83 	bl	d458c <_Z8SyncTimev>
  LEDBrightness();
   d4886:	f7ff fd8d 	bl	d43a4 <_Z13LEDBrightnessv>
  WarningMessage();
 // MQTTPublish();
  //myDFP.playMp3Folder(3); //switch all DFP functions to playMP3Folder
  //delay(60000);

}
   d488a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MQval = 3;
  temp = 110;
  MQTTConnect();
  SyncTime();
  LEDBrightness();
  WarningMessage();
   d488e:	f7ff bed5 	b.w	d463c <_Z14WarningMessagev>
   d4892:	bf00      	nop
   d4894:	2003dcf0 	.word	0x2003dcf0
   d4898:	2003e310 	.word	0x2003e310
   d489c:	2003e2c4 	.word	0x2003e2c4
   d48a0:	42dc0000 	.word	0x42dc0000

000d48a4 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d48a4:	b510      	push	{r4, lr}
   d48a6:	21d4      	movs	r1, #212	; 0xd4
   d48a8:	4604      	mov	r4, r0
   d48aa:	f004 fb09 	bl	d8ec0 <_ZdlPvj>
   d48ae:	4620      	mov	r0, r4
   d48b0:	bd10      	pop	{r4, pc}
	...

000d48b4 <_GLOBAL__sub_I_myDFP>:
}

void enableButton() //ISR for switching the neopixels on or off
{
  pixelState = !pixelState;
   d48b4:	b573      	push	{r0, r1, r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d48b6:	f002 fc9f 	bl	d71f8 <HAL_Pin_Map>
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
   d48ba:	4b49      	ldr	r3, [pc, #292]	; (d49e0 <_GLOBAL__sub_I_myDFP+0x12c>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d48bc:	4e49      	ldr	r6, [pc, #292]	; (d49e4 <_GLOBAL__sub_I_myDFP+0x130>)
   d48be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d48c2:	609a      	str	r2, [r3, #8]
   d48c4:	4a48      	ldr	r2, [pc, #288]	; (d49e8 <_GLOBAL__sub_I_myDFP+0x134>)
   d48c6:	6811      	ldr	r1, [r2, #0]
   d48c8:	f8c3 1016 	str.w	r1, [r3, #22]
   d48cc:	6851      	ldr	r1, [r2, #4]
   d48ce:	8912      	ldrh	r2, [r2, #8]
   d48d0:	f8c3 101a 	str.w	r1, [r3, #26]
   d48d4:	83da      	strh	r2, [r3, #30]
   d48d6:	2102      	movs	r1, #2
   d48d8:	2200      	movs	r2, #0
   d48da:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
   d48de:	f883 2020 	strb.w	r2, [r3, #32]
   d48e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   d48e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d48ea:	4b40      	ldr	r3, [pc, #256]	; (d49ec <_GLOBAL__sub_I_myDFP+0x138>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d48ec:	2164      	movs	r1, #100	; 0x64
   d48ee:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d48f2:	493f      	ldr	r1, [pc, #252]	; (d49f0 <_GLOBAL__sub_I_myDFP+0x13c>)
   d48f4:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d48f8:	2101      	movs	r1, #1
   d48fa:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d48fe:	6831      	ldr	r1, [r6, #0]
   d4900:	71da      	strb	r2, [r3, #7]
   d4902:	f011 0501 	ands.w	r5, r1, #1
   d4906:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d490a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d490e:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d4912:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d4916:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d491a:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d491e:	461c      	mov	r4, r3
   d4920:	d10a      	bne.n	d4938 <_GLOBAL__sub_I_myDFP+0x84>
   d4922:	4630      	mov	r0, r6
   d4924:	f7ff fbc8 	bl	d40b8 <__cxa_guard_acquire>
   d4928:	b130      	cbz	r0, d4938 <_GLOBAL__sub_I_myDFP+0x84>
   d492a:	4629      	mov	r1, r5
   d492c:	4831      	ldr	r0, [pc, #196]	; (d49f4 <_GLOBAL__sub_I_myDFP+0x140>)
   d492e:	f002 ffbb 	bl	d78a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4932:	4630      	mov	r0, r6
   d4934:	f7ff fbc5 	bl	d40c2 <__cxa_guard_release>
   d4938:	482f      	ldr	r0, [pc, #188]	; (d49f8 <_GLOBAL__sub_I_myDFP+0x144>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d493a:	4b2e      	ldr	r3, [pc, #184]	; (d49f4 <_GLOBAL__sub_I_myDFP+0x140>)
File file;
  #define SD_CS_PIN SS
 // #define error(msg) sd.errorHalt(msg)

/*      for subscribing | publishing        */
TCPClient TheClient;
   d493c:	4e2f      	ldr	r6, [pc, #188]	; (d49fc <_GLOBAL__sub_I_myDFP+0x148>)
   d493e:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d4942:	2500      	movs	r5, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
DFRobotDFPlayerMini myDFP;

/*      for SD logging        */
int i;
SdFat SD;
File file;
   d4948:	4a2d      	ldr	r2, [pc, #180]	; (d4a00 <_GLOBAL__sub_I_myDFP+0x14c>)
   d494a:	492e      	ldr	r1, [pc, #184]	; (d4a04 <_GLOBAL__sub_I_myDFP+0x150>)
   d494c:	7405      	strb	r5, [r0, #16]
   d494e:	7445      	strb	r5, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4950:	6045      	str	r5, [r0, #4]
   d4952:	6083      	str	r3, [r0, #8]
 public:
  File() {}
   d4954:	4b2c      	ldr	r3, [pc, #176]	; (d4a08 <_GLOBAL__sub_I_myDFP+0x154>)
   d4956:	6003      	str	r3, [r0, #0]
   d4958:	f004 faa4 	bl	d8ea4 <__aeabi_atexit>
  #define SD_CS_PIN SS
 // #define error(msg) sd.errorHalt(msg)

/*      for subscribing | publishing        */
TCPClient TheClient;
   d495c:	4630      	mov	r0, r6
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d495e:	4c2b      	ldr	r4, [pc, #172]	; (d4a0c <_GLOBAL__sub_I_myDFP+0x158>)
   d4960:	f004 f8d6 	bl	d8b10 <_ZN9TCPClientC1Ev>
   d4964:	4a26      	ldr	r2, [pc, #152]	; (d4a00 <_GLOBAL__sub_I_myDFP+0x14c>)
   d4966:	492a      	ldr	r1, [pc, #168]	; (d4a10 <_GLOBAL__sub_I_myDFP+0x15c>)
   d4968:	4630      	mov	r0, r6
   d496a:	f004 fa9b 	bl	d8ea4 <__aeabi_atexit>
   d496e:	4b29      	ldr	r3, [pc, #164]	; (d4a14 <_GLOBAL__sub_I_myDFP+0x160>)
   d4970:	9300      	str	r3, [sp, #0]
   d4972:	f240 725b 	movw	r2, #1883	; 0x75b
   d4976:	4b28      	ldr	r3, [pc, #160]	; (d4a18 <_GLOBAL__sub_I_myDFP+0x164>)
   d4978:	4928      	ldr	r1, [pc, #160]	; (d4a1c <_GLOBAL__sub_I_myDFP+0x168>)
   d497a:	4620      	mov	r0, r4
   d497c:	f000 fe1c 	bl	d55b8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d4980:	4b27      	ldr	r3, [pc, #156]	; (d4a20 <_GLOBAL__sub_I_myDFP+0x16c>)
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d4982:	4a1f      	ldr	r2, [pc, #124]	; (d4a00 <_GLOBAL__sub_I_myDFP+0x14c>)
   d4984:	4927      	ldr	r1, [pc, #156]	; (d4a24 <_GLOBAL__sub_I_myDFP+0x170>)
   d4986:	6023      	str	r3, [r4, #0]
   d4988:	4620      	mov	r0, r4
   d498a:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d498e:	f004 fa89 	bl	d8ea4 <__aeabi_atexit>
//Adafruit_MQTT_Subscribe subData = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/ "); // put feed if any subscription needed
Adafruit_MQTT_Publish PubBME = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_BME");
   d4992:	462b      	mov	r3, r5
   d4994:	4621      	mov	r1, r4
   d4996:	4a24      	ldr	r2, [pc, #144]	; (d4a28 <_GLOBAL__sub_I_myDFP+0x174>)
   d4998:	4824      	ldr	r0, [pc, #144]	; (d4a2c <_GLOBAL__sub_I_myDFP+0x178>)
   d499a:	f000 ff86 	bl	d58aa <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubMQ9 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_MQ-9");
   d499e:	462b      	mov	r3, r5
   d49a0:	4621      	mov	r1, r4
   d49a2:	4a23      	ldr	r2, [pc, #140]	; (d4a30 <_GLOBAL__sub_I_myDFP+0x17c>)
   d49a4:	4823      	ldr	r0, [pc, #140]	; (d4a34 <_GLOBAL__sub_I_myDFP+0x180>)
   d49a6:	f000 ff80 	bl	d58aa <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubAQ = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_AirQuality");
   d49aa:	462b      	mov	r3, r5
   d49ac:	4621      	mov	r1, r4
   d49ae:	4a22      	ldr	r2, [pc, #136]	; (d4a38 <_GLOBAL__sub_I_myDFP+0x184>)
   d49b0:	4822      	ldr	r0, [pc, #136]	; (d4a3c <_GLOBAL__sub_I_myDFP+0x188>)
   d49b2:	f000 ff7a 	bl	d58aa <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

/*    for NeoPixels       */
  #define PIXEL_PIN A1
  #define PIXEL_COUNT 2
  #define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixel(PIXEL_COUNT,PIXEL_PIN,PIXEL_TYPE);
   d49b6:	2302      	movs	r3, #2
   d49b8:	4619      	mov	r1, r3
   d49ba:	2212      	movs	r2, #18
   d49bc:	4820      	ldr	r0, [pc, #128]	; (d4a40 <_GLOBAL__sub_I_myDFP+0x18c>)
   d49be:	f000 fb32 	bl	d5026 <_ZN17Adafruit_NeoPixelC1Ethh>
   d49c2:	4a0f      	ldr	r2, [pc, #60]	; (d4a00 <_GLOBAL__sub_I_myDFP+0x14c>)
   d49c4:	491f      	ldr	r1, [pc, #124]	; (d4a44 <_GLOBAL__sub_I_myDFP+0x190>)
   d49c6:	481e      	ldr	r0, [pc, #120]	; (d4a40 <_GLOBAL__sub_I_myDFP+0x18c>)
   d49c8:	f004 fa6c 	bl	d8ea4 <__aeabi_atexit>
bool buttonState = false;
bool pixelState = false;
int Bpin = D2;

/*    for AirQualitySensor use    */
AirQualitySensor senseAQ(A3);
   d49cc:	2110      	movs	r1, #16
   d49ce:	481e      	ldr	r0, [pc, #120]	; (d4a48 <_GLOBAL__sub_I_myDFP+0x194>)
   d49d0:	f002 fa94 	bl	d6efc <_ZN16AirQualitySensorC1Ei>
int quality;
int AQvalue;
int qualityValue;

/*    for BME use     */
Adafruit_BME280 bme;
   d49d4:	481d      	ldr	r0, [pc, #116]	; (d4a4c <_GLOBAL__sub_I_myDFP+0x198>)
}

void enableButton() //ISR for switching the neopixels on or off
{
  pixelState = !pixelState;
   d49d6:	b002      	add	sp, #8
   d49d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
int quality;
int AQvalue;
int qualityValue;

/*    for BME use     */
Adafruit_BME280 bme;
   d49dc:	f000 b838 	b.w	d4a50 <_ZN15Adafruit_BME280C1Ev>
   d49e0:	2003e2e8 	.word	0x2003e2e8
   d49e4:	2003dcdc 	.word	0x2003dcdc
   d49e8:	000da000 	.word	0x000da000
   d49ec:	2003de0c 	.word	0x2003de0c
   d49f0:	000d9fd4 	.word	0x000d9fd4
   d49f4:	2003dce0 	.word	0x2003dce0
   d49f8:	2003e314 	.word	0x2003e314
   d49fc:	2003e29c 	.word	0x2003e29c
   d4a00:	2003dcd8 	.word	0x2003dcd8
   d4a04:	000d40f5 	.word	0x000d40f5
   d4a08:	000d9fe0 	.word	0x000d9fe0
   d4a0c:	2003dd38 	.word	0x2003dd38
   d4a10:	000d41c5 	.word	0x000d41c5
   d4a14:	000da277 	.word	0x000da277
   d4a18:	000da25b 	.word	0x000da25b
   d4a1c:	000da267 	.word	0x000da267
   d4a20:	000da334 	.word	0x000da334
   d4a24:	000d40f7 	.word	0x000d40f7
   d4a28:	000da298 	.word	0x000da298
   d4a2c:	2003e380 	.word	0x2003e380
   d4a30:	000da2bb 	.word	0x000da2bb
   d4a34:	2003e290 	.word	0x2003e290
   d4a38:	000da2df 	.word	0x000da2df
   d4a3c:	2003e2b8 	.word	0x2003e2b8
   d4a40:	2003e350 	.word	0x2003e350
   d4a44:	000d4f87 	.word	0x000d4f87
   d4a48:	2003e2c8 	.word	0x2003e2c8
   d4a4c:	2003dcf4 	.word	0x2003dcf4

000d4a50 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4a50:	22ff      	movs	r2, #255	; 0xff
   d4a52:	7402      	strb	r2, [r0, #16]
   d4a54:	7442      	strb	r2, [r0, #17]
   d4a56:	7482      	strb	r2, [r0, #18]
   d4a58:	74c2      	strb	r2, [r0, #19]
{ }
   d4a5a:	4770      	bx	lr

000d4a5c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4a5c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4a5e:	4d09      	ldr	r5, [pc, #36]	; (d4a84 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4a60:	6829      	ldr	r1, [r5, #0]
   d4a62:	f011 0401 	ands.w	r4, r1, #1
   d4a66:	d10a      	bne.n	d4a7e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4a68:	4628      	mov	r0, r5
   d4a6a:	f7ff fb25 	bl	d40b8 <__cxa_guard_acquire>
   d4a6e:	b130      	cbz	r0, d4a7e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4a70:	4621      	mov	r1, r4
   d4a72:	4805      	ldr	r0, [pc, #20]	; (d4a88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4a74:	f002 ff18 	bl	d78a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4a78:	4628      	mov	r0, r5
   d4a7a:	f7ff fb22 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d4a7e:	4802      	ldr	r0, [pc, #8]	; (d4a88 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4a80:	bd38      	pop	{r3, r4, r5, pc}
   d4a82:	bf00      	nop
   d4a84:	2003dcdc 	.word	0x2003dcdc
   d4a88:	2003dce0 	.word	0x2003dce0

000d4a8c <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4a90:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4a94:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4a96:	4605      	mov	r5, r0
   d4a98:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4a9a:	d106      	bne.n	d4aaa <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4a9c:	f7ff ffde 	bl	d4a5c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4aa0:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4aa6:	f002 bfa3 	b.w	d79f0 <_ZN8SPIClass8transferEh>
   d4aaa:	2607      	movs	r6, #7
   d4aac:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4aae:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4ab2:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4ab6:	2100      	movs	r1, #0
   d4ab8:	b280      	uxth	r0, r0
   d4aba:	f004 f970 	bl	d8d9e <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4abe:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4ac2:	fa08 f106 	lsl.w	r1, r8, r6
   d4ac6:	4039      	ands	r1, r7
   d4ac8:	b280      	uxth	r0, r0
   d4aca:	f004 f968 	bl	d8d9e <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4ace:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4ad2:	2101      	movs	r1, #1
   d4ad4:	b280      	uxth	r0, r0
   d4ad6:	f004 f962 	bl	d8d9e <digitalWrite>
        if (digitalRead(_miso))
   d4ada:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4ade:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4ae0:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4ae2:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4ae4:	f004 f974 	bl	d8dd0 <digitalRead>
   d4ae8:	b108      	cbz	r0, d4aee <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4aea:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4aee:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4af2:	d2de      	bcs.n	d4ab2 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4af4:	4620      	mov	r0, r4
   d4af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4afa <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d4afa:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4afc:	f7ff ffae 	bl	d4a5c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4b00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4b04:	f002 beeb 	b.w	d78de <_ZN8SPIClass14endTransactionEv>

000d4b08 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4b08:	b510      	push	{r4, lr}
   d4b0a:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4b0c:	f7ff ffa6 	bl	d4a5c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4b10:	4621      	mov	r1, r4
    }
   d4b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4b16:	f002 befb 	b.w	d7910 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d4b1c <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4b1c:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4b1e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4b22:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4b24:	b085      	sub	sp, #20
   d4b26:	4604      	mov	r4, r0
   d4b28:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d4b2a:	d11d      	bne.n	d4b68 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4b2c:	7901      	ldrb	r1, [r0, #4]
   d4b2e:	6800      	ldr	r0, [r0, #0]
   d4b30:	f003 fc77 	bl	d8422 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4b34:	6820      	ldr	r0, [r4, #0]
   d4b36:	6803      	ldr	r3, [r0, #0]
   d4b38:	4629      	mov	r1, r5
   d4b3a:	689b      	ldr	r3, [r3, #8]
   d4b3c:	4798      	blx	r3
        _wire -> endTransmission();
   d4b3e:	6820      	ldr	r0, [r4, #0]
   d4b40:	f003 fc77 	bl	d8432 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4b44:	2202      	movs	r2, #2
   d4b46:	7921      	ldrb	r1, [r4, #4]
   d4b48:	6820      	ldr	r0, [r4, #0]
   d4b4a:	f003 fc67 	bl	d841c <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4b4e:	6820      	ldr	r0, [r4, #0]
   d4b50:	6803      	ldr	r3, [r0, #0]
   d4b52:	695b      	ldr	r3, [r3, #20]
   d4b54:	4798      	blx	r3
   d4b56:	4605      	mov	r5, r0
   d4b58:	6820      	ldr	r0, [r4, #0]
   d4b5a:	6803      	ldr	r3, [r0, #0]
   d4b5c:	695b      	ldr	r3, [r3, #20]
   d4b5e:	4798      	blx	r3
   d4b60:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4b64:	b285      	uxth	r5, r0
   d4b66:	e035      	b.n	d4bd4 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d4b68:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4b6c:	3301      	adds	r3, #1
   d4b6e:	d10e      	bne.n	d4b8e <_ZN15Adafruit_BME2806read16Eh+0x72>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4b70:	4b1a      	ldr	r3, [pc, #104]	; (d4bdc <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4b72:	4a1b      	ldr	r2, [pc, #108]	; (d4be0 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d4b74:	9300      	str	r3, [sp, #0]
   d4b76:	9202      	str	r2, [sp, #8]
   d4b78:	2300      	movs	r3, #0
   d4b7a:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4b7c:	4668      	mov	r0, sp
   d4b7e:	f88d 3004 	strb.w	r3, [sp, #4]
   d4b82:	f88d 200c 	strb.w	r2, [sp, #12]
   d4b86:	f88d 300d 	strb.w	r3, [sp, #13]
   d4b8a:	f7ff ffbd 	bl	d4b08 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4b8e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4b92:	2100      	movs	r1, #0
   d4b94:	b280      	uxth	r0, r0
   d4b96:	f004 f902 	bl	d8d9e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4b9a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4b9e:	4620      	mov	r0, r4
   d4ba0:	f7ff ff74 	bl	d4a8c <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4ba4:	2100      	movs	r1, #0
   d4ba6:	4620      	mov	r0, r4
   d4ba8:	f7ff ff70 	bl	d4a8c <_ZN15Adafruit_BME2807spixferEh>
   d4bac:	2100      	movs	r1, #0
   d4bae:	4605      	mov	r5, r0
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	f7ff ff6b 	bl	d4a8c <_ZN15Adafruit_BME2807spixferEh>
   d4bb6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4bba:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4bbc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4bc0:	2101      	movs	r1, #1
   d4bc2:	b280      	uxth	r0, r0
   d4bc4:	f004 f8eb 	bl	d8d9e <digitalWrite>
        if (_sck == -1)
   d4bc8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4bcc:	3301      	adds	r3, #1
   d4bce:	d101      	bne.n	d4bd4 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4bd0:	f7ff ff93 	bl	d4afa <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4bd4:	4628      	mov	r0, r5
   d4bd6:	b005      	add	sp, #20
   d4bd8:	bd30      	pop	{r4, r5, pc}
   d4bda:	bf00      	nop
   d4bdc:	000d9fd4 	.word	0x000d9fd4
   d4be0:	0007a120 	.word	0x0007a120

000d4be4 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4be4:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4be6:	f7ff ff99 	bl	d4b1c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4bea:	ba40      	rev16	r0, r0
}
   d4bec:	b280      	uxth	r0, r0
   d4bee:	bd08      	pop	{r3, pc}

000d4bf0 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4bf0:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4bf2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4bf6:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4bf8:	b085      	sub	sp, #20
   d4bfa:	4604      	mov	r4, r0
   d4bfc:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4bfe:	d116      	bne.n	d4c2e <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4c00:	7901      	ldrb	r1, [r0, #4]
   d4c02:	6800      	ldr	r0, [r0, #0]
   d4c04:	f003 fc0d 	bl	d8422 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4c08:	6820      	ldr	r0, [r4, #0]
   d4c0a:	6803      	ldr	r3, [r0, #0]
   d4c0c:	4629      	mov	r1, r5
   d4c0e:	689b      	ldr	r3, [r3, #8]
   d4c10:	4798      	blx	r3
        _wire -> endTransmission();
   d4c12:	6820      	ldr	r0, [r4, #0]
   d4c14:	f003 fc0d 	bl	d8432 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4c18:	2201      	movs	r2, #1
   d4c1a:	7921      	ldrb	r1, [r4, #4]
   d4c1c:	6820      	ldr	r0, [r4, #0]
   d4c1e:	f003 fbfd 	bl	d841c <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4c22:	6820      	ldr	r0, [r4, #0]
   d4c24:	6803      	ldr	r3, [r0, #0]
   d4c26:	695b      	ldr	r3, [r3, #20]
   d4c28:	4798      	blx	r3
   d4c2a:	b2c5      	uxtb	r5, r0
   d4c2c:	e02e      	b.n	d4c8c <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d4c2e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4c32:	3301      	adds	r3, #1
   d4c34:	d10e      	bne.n	d4c54 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4c36:	4b17      	ldr	r3, [pc, #92]	; (d4c94 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4c38:	4a17      	ldr	r2, [pc, #92]	; (d4c98 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d4c3a:	9300      	str	r3, [sp, #0]
   d4c3c:	9202      	str	r2, [sp, #8]
   d4c3e:	2300      	movs	r3, #0
   d4c40:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4c42:	4668      	mov	r0, sp
   d4c44:	f88d 3004 	strb.w	r3, [sp, #4]
   d4c48:	f88d 200c 	strb.w	r2, [sp, #12]
   d4c4c:	f88d 300d 	strb.w	r3, [sp, #13]
   d4c50:	f7ff ff5a 	bl	d4b08 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4c54:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c58:	2100      	movs	r1, #0
   d4c5a:	b280      	uxth	r0, r0
   d4c5c:	f004 f89f 	bl	d8d9e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4c60:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4c64:	4620      	mov	r0, r4
   d4c66:	f7ff ff11 	bl	d4a8c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4c6a:	2100      	movs	r1, #0
   d4c6c:	4620      	mov	r0, r4
   d4c6e:	f7ff ff0d 	bl	d4a8c <_ZN15Adafruit_BME2807spixferEh>
   d4c72:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4c74:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c78:	2101      	movs	r1, #1
   d4c7a:	b280      	uxth	r0, r0
   d4c7c:	f004 f88f 	bl	d8d9e <digitalWrite>
        if (_sck == -1)
   d4c80:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4c84:	3301      	adds	r3, #1
   d4c86:	d101      	bne.n	d4c8c <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d4c88:	f7ff ff37 	bl	d4afa <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4c8c:	4628      	mov	r0, r5
   d4c8e:	b005      	add	sp, #20
   d4c90:	bd30      	pop	{r4, r5, pc}
   d4c92:	bf00      	nop
   d4c94:	000d9fd4 	.word	0x000d9fd4
   d4c98:	0007a120 	.word	0x0007a120

000d4c9c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4c9c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4c9e:	21f3      	movs	r1, #243	; 0xf3
   d4ca0:	f7ff ffa6 	bl	d4bf0 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4ca4:	f000 0001 	and.w	r0, r0, #1
   d4ca8:	bd08      	pop	{r3, pc}

000d4caa <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4caa:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4cac:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4cae:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4cb0:	f7ff ff98 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cb4:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4cb6:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cb8:	4620      	mov	r0, r4
   d4cba:	f7ff ff93 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4cbe:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4cc0:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cc2:	4620      	mov	r0, r4
   d4cc4:	f7ff ff8e 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4cc8:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4cca:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4ccc:	4620      	mov	r0, r4
   d4cce:	f7ff ff89 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cd2:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4cd4:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	f7ff ff84 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4cdc:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4cde:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ce0:	4620      	mov	r0, r4
   d4ce2:	f7ff ff7f 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4ce6:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4ce8:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cea:	4620      	mov	r0, r4
   d4cec:	f7ff ff7a 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4cf0:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4cf2:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cf4:	4620      	mov	r0, r4
   d4cf6:	f7ff ff75 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4cfa:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4cfc:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cfe:	4620      	mov	r0, r4
   d4d00:	f7ff ff70 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4d04:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4d06:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d08:	4620      	mov	r0, r4
   d4d0a:	f7ff ff6b 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4d0e:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4d10:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d12:	4620      	mov	r0, r4
   d4d14:	f7ff ff66 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
   d4d18:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4d1a:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d1c:	4620      	mov	r0, r4
   d4d1e:	f7ff ff61 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4d22:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4d24:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4d26:	4620      	mov	r0, r4
   d4d28:	f7ff ff62 	bl	d4bf0 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d2c:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4d2e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d32:	4620      	mov	r0, r4
   d4d34:	f7ff ff56 	bl	d4be4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d38:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4d3a:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d3c:	4620      	mov	r0, r4
   d4d3e:	f7ff ff57 	bl	d4bf0 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4d42:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d44:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f7ff ff51 	bl	d4bf0 <_ZN15Adafruit_BME2805read8Eh>
   d4d4e:	21e5      	movs	r1, #229	; 0xe5
   d4d50:	4605      	mov	r5, r0
   d4d52:	4620      	mov	r0, r4
   d4d54:	f7ff ff4c 	bl	d4bf0 <_ZN15Adafruit_BME2805read8Eh>
   d4d58:	f000 000f 	and.w	r0, r0, #15
   d4d5c:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4d60:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4d62:	21e6      	movs	r1, #230	; 0xe6
   d4d64:	4620      	mov	r0, r4
   d4d66:	f7ff ff43 	bl	d4bf0 <_ZN15Adafruit_BME2805read8Eh>
   d4d6a:	21e5      	movs	r1, #229	; 0xe5
   d4d6c:	4605      	mov	r5, r0
   d4d6e:	4620      	mov	r0, r4
   d4d70:	f7ff ff3e 	bl	d4bf0 <_ZN15Adafruit_BME2805read8Eh>
   d4d74:	1100      	asrs	r0, r0, #4
   d4d76:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4d7a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4d7c:	21e7      	movs	r1, #231	; 0xe7
   d4d7e:	4620      	mov	r0, r4
   d4d80:	f7ff ff36 	bl	d4bf0 <_ZN15Adafruit_BME2805read8Eh>
   d4d84:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4d88:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d8c <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4d8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4d8e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4d92:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4d94:	4604      	mov	r4, r0
   d4d96:	460e      	mov	r6, r1
   d4d98:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4d9a:	d111      	bne.n	d4dc0 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4d9c:	7901      	ldrb	r1, [r0, #4]
   d4d9e:	6800      	ldr	r0, [r0, #0]
   d4da0:	f003 fb3f 	bl	d8422 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4da4:	6820      	ldr	r0, [r4, #0]
   d4da6:	6803      	ldr	r3, [r0, #0]
   d4da8:	4631      	mov	r1, r6
   d4daa:	689b      	ldr	r3, [r3, #8]
   d4dac:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4dae:	6820      	ldr	r0, [r4, #0]
   d4db0:	6803      	ldr	r3, [r0, #0]
   d4db2:	4629      	mov	r1, r5
   d4db4:	689b      	ldr	r3, [r3, #8]
   d4db6:	4798      	blx	r3
        _wire -> endTransmission();
   d4db8:	6820      	ldr	r0, [r4, #0]
   d4dba:	f003 fb3a 	bl	d8432 <_ZN7TwoWire15endTransmissionEv>
   d4dbe:	e02d      	b.n	d4e1c <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4dc0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4dc4:	3301      	adds	r3, #1
   d4dc6:	d10e      	bne.n	d4de6 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4dc8:	4b15      	ldr	r3, [pc, #84]	; (d4e20 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4dca:	4a16      	ldr	r2, [pc, #88]	; (d4e24 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4dcc:	9300      	str	r3, [sp, #0]
   d4dce:	9202      	str	r2, [sp, #8]
   d4dd0:	2300      	movs	r3, #0
   d4dd2:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4dd4:	4668      	mov	r0, sp
   d4dd6:	f88d 3004 	strb.w	r3, [sp, #4]
   d4dda:	f88d 200c 	strb.w	r2, [sp, #12]
   d4dde:	f88d 300d 	strb.w	r3, [sp, #13]
   d4de2:	f7ff fe91 	bl	d4b08 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4de6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4dea:	2100      	movs	r1, #0
   d4dec:	b280      	uxth	r0, r0
   d4dee:	f003 ffd6 	bl	d8d9e <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4df2:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4df6:	4620      	mov	r0, r4
   d4df8:	f7ff fe48 	bl	d4a8c <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4dfc:	4629      	mov	r1, r5
   d4dfe:	4620      	mov	r0, r4
   d4e00:	f7ff fe44 	bl	d4a8c <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4e04:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4e08:	2101      	movs	r1, #1
   d4e0a:	b280      	uxth	r0, r0
   d4e0c:	f003 ffc7 	bl	d8d9e <digitalWrite>
    if (_sck == -1)
   d4e10:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4e14:	3301      	adds	r3, #1
   d4e16:	d101      	bne.n	d4e1c <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4e18:	f7ff fe6f 	bl	d4afa <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d4e1c:	b004      	add	sp, #16
   d4e1e:	bd70      	pop	{r4, r5, r6, pc}
   d4e20:	000d9fd4 	.word	0x000d9fd4
   d4e24:	0007a120 	.word	0x0007a120

000d4e28 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4e2a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4e2e:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4e32:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4e36:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4e3a:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4e3e:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4e42:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4e46:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4e4a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4e4e:	f366 1347 	bfi	r3, r6, #5, #3
   d4e52:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4e56:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4e5a:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4e5e:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4e60:	f367 0302 	bfi	r3, r7, #0, #3
   d4e64:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4e68:	f006 0207 	and.w	r2, r6, #7
   d4e6c:	21f2      	movs	r1, #242	; 0xf2
   d4e6e:	f7ff ff8d 	bl	d4d8c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4e72:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4e76:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4e7a:	f002 0107 	and.w	r1, r2, #7
   d4e7e:	009b      	lsls	r3, r3, #2
   d4e80:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4e84:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4e88:	4620      	mov	r0, r4
   d4e8a:	21f5      	movs	r1, #245	; 0xf5
   d4e8c:	f7ff ff7e 	bl	d4d8c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4e90:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4e94:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4e98:	f002 0107 	and.w	r1, r2, #7
   d4e9c:	009b      	lsls	r3, r3, #2
   d4e9e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4ea2:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4ea6:	4620      	mov	r0, r4
   d4ea8:	21f4      	movs	r1, #244	; 0xf4
}
   d4eaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4eae:	f7ff bf6d 	b.w	d4d8c <_ZN15Adafruit_BME2806write8Ehh>

000d4eb2 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4eb2:	b530      	push	{r4, r5, lr}
   d4eb4:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4eb6:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4eba:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4ebc:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4ebe:	d103      	bne.n	d4ec8 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4ec0:	6820      	ldr	r0, [r4, #0]
   d4ec2:	f003 fa77 	bl	d83b4 <_ZN7TwoWire5beginEv>
   d4ec6:	e022      	b.n	d4f0e <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4ec8:	2101      	movs	r1, #1
   d4eca:	b280      	uxth	r0, r0
   d4ecc:	f003 ff67 	bl	d8d9e <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4ed0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ed4:	2101      	movs	r1, #1
   d4ed6:	b280      	uxth	r0, r0
   d4ed8:	f003 ff50 	bl	d8d7c <pinMode>
        if (_sck == -1) {
   d4edc:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4ee0:	1c43      	adds	r3, r0, #1
   d4ee2:	d104      	bne.n	d4eee <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4ee4:	f7ff fdba 	bl	d4a5c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4ee8:	f002 fce8 	bl	d78bc <_ZN8SPIClass5beginEv>
   d4eec:	e00f      	b.n	d4f0e <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4eee:	2101      	movs	r1, #1
   d4ef0:	b280      	uxth	r0, r0
   d4ef2:	f003 ff43 	bl	d8d7c <pinMode>
            pinMode(_mosi, OUTPUT);
   d4ef6:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4efa:	2101      	movs	r1, #1
   d4efc:	b280      	uxth	r0, r0
   d4efe:	f003 ff3d 	bl	d8d7c <pinMode>
            pinMode(_miso, INPUT);
   d4f02:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4f06:	2100      	movs	r1, #0
   d4f08:	b280      	uxth	r0, r0
   d4f0a:	f003 ff37 	bl	d8d7c <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4f0e:	21d0      	movs	r1, #208	; 0xd0
   d4f10:	4620      	mov	r0, r4
   d4f12:	f7ff fe6d 	bl	d4bf0 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4f16:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4f18:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4f1a:	d120      	bne.n	d4f5e <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	22b6      	movs	r2, #182	; 0xb6
   d4f20:	21e0      	movs	r1, #224	; 0xe0
   d4f22:	f7ff ff33 	bl	d4d8c <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4f26:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4f2a:	f002 ff9b 	bl	d7e64 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4f2e:	4620      	mov	r0, r4
   d4f30:	f7ff feb4 	bl	d4c9c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4f34:	4605      	mov	r5, r0
   d4f36:	b108      	cbz	r0, d4f3c <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4f38:	2064      	movs	r0, #100	; 0x64
   d4f3a:	e7f6      	b.n	d4f2a <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4f3c:	4620      	mov	r0, r4
   d4f3e:	f7ff feb4 	bl	d4caa <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4f42:	2305      	movs	r3, #5
   d4f44:	9300      	str	r3, [sp, #0]
   d4f46:	461a      	mov	r2, r3
   d4f48:	2103      	movs	r1, #3
   d4f4a:	4620      	mov	r0, r4
   d4f4c:	9502      	str	r5, [sp, #8]
   d4f4e:	9501      	str	r5, [sp, #4]
   d4f50:	f7ff ff6a 	bl	d4e28 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4f54:	2064      	movs	r0, #100	; 0x64
   d4f56:	f002 ff85 	bl	d7e64 <delay>
   d4f5a:	2001      	movs	r0, #1
   d4f5c:	e000      	b.n	d4f60 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4f5e:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4f60:	b005      	add	sp, #20
   d4f62:	bd30      	pop	{r4, r5, pc}

000d4f64 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4f64:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d4f66:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4f68:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d4f6a:	f003 ff75 	bl	d8e58 <_Z19__fetch_global_Wirev>
   d4f6e:	6020      	str	r0, [r4, #0]
	return init();
   d4f70:	4620      	mov	r0, r4
}
   d4f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d4f76:	f7ff bf9c 	b.w	d4eb2 <_ZN15Adafruit_BME2804initEv>

000d4f7a <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4f7a:	f002 b93d 	b.w	d71f8 <HAL_Pin_Map>

000d4f7e <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4f7e:	f002 b9eb 	b.w	d7358 <HAL_Timer_Get_Micro_Seconds>

000d4f82 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4f82:	f002 b9e1 	b.w	d7348 <HAL_Delay_Microseconds>

000d4f86 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4f86:	b510      	push	{r4, lr}
   d4f88:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4f8a:	68c0      	ldr	r0, [r0, #12]
   d4f8c:	b108      	cbz	r0, d4f92 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4f8e:	f002 fc0f 	bl	d77b0 <free>
  if (begun) pinMode(pin, INPUT);
   d4f92:	7823      	ldrb	r3, [r4, #0]
   d4f94:	b11b      	cbz	r3, d4f9e <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4f96:	2100      	movs	r1, #0
   d4f98:	79e0      	ldrb	r0, [r4, #7]
   d4f9a:	f003 feef 	bl	d8d7c <pinMode>
}
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	bd10      	pop	{r4, pc}

000d4fa2 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4fa2:	b538      	push	{r3, r4, r5, lr}
   d4fa4:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4fa6:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4fa8:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4faa:	b108      	cbz	r0, d4fb0 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4fac:	f002 fc00 	bl	d77b0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4fb0:	79a3      	ldrb	r3, [r4, #6]
   d4fb2:	2b06      	cmp	r3, #6
   d4fb4:	bf0c      	ite	eq
   d4fb6:	2004      	moveq	r0, #4
   d4fb8:	2003      	movne	r0, #3
   d4fba:	fb10 f005 	smulbb	r0, r0, r5
   d4fbe:	b280      	uxth	r0, r0
   d4fc0:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4fc2:	f002 fbed 	bl	d77a0 <malloc>
   d4fc6:	60e0      	str	r0, [r4, #12]
   d4fc8:	b128      	cbz	r0, d4fd6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4fca:	88a2      	ldrh	r2, [r4, #4]
   d4fcc:	2100      	movs	r1, #0
   d4fce:	f004 fbe7 	bl	d97a0 <memset>
    numLEDs = n;
   d4fd2:	8065      	strh	r5, [r4, #2]
   d4fd4:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4fd6:	80a0      	strh	r0, [r4, #4]
   d4fd8:	8060      	strh	r0, [r4, #2]
   d4fda:	bd38      	pop	{r3, r4, r5, pc}

000d4fdc <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d4fdc:	b510      	push	{r4, lr}
   d4fde:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4fe0:	2101      	movs	r1, #1
   d4fe2:	79c0      	ldrb	r0, [r0, #7]
   d4fe4:	f003 feca 	bl	d8d7c <pinMode>
  digitalWrite(pin, LOW);
   d4fe8:	2100      	movs	r1, #0
   d4fea:	79e0      	ldrb	r0, [r4, #7]
   d4fec:	f003 fed7 	bl	d8d9e <digitalWrite>
  begun = true;
   d4ff0:	2301      	movs	r3, #1
   d4ff2:	7023      	strb	r3, [r4, #0]
   d4ff4:	bd10      	pop	{r4, pc}

000d4ff6 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4ff6:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d4ff8:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4ffa:	4605      	mov	r5, r0
   d4ffc:	460c      	mov	r4, r1
    if (begun) {
   d4ffe:	b11b      	cbz	r3, d5008 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d5000:	2100      	movs	r1, #0
   d5002:	79c0      	ldrb	r0, [r0, #7]
   d5004:	f003 feba 	bl	d8d7c <pinMode>
    }
    pin = p;
    if (begun) {
   d5008:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d500a:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d500c:	b153      	cbz	r3, d5024 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d500e:	b2a4      	uxth	r4, r4
   d5010:	4620      	mov	r0, r4
   d5012:	2101      	movs	r1, #1
   d5014:	f003 feb2 	bl	d8d7c <pinMode>
        digitalWrite(p, LOW);
   d5018:	4620      	mov	r0, r4
   d501a:	2100      	movs	r1, #0
    }
}
   d501c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d5020:	f003 bebd 	b.w	d8d9e <digitalWrite>
   d5024:	bd38      	pop	{r3, r4, r5, pc}

000d5026 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d5026:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d5028:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d502a:	4604      	mov	r4, r0
   d502c:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d502e:	7183      	strb	r3, [r0, #6]
   d5030:	7005      	strb	r5, [r0, #0]
   d5032:	7205      	strb	r5, [r0, #8]
   d5034:	60c5      	str	r5, [r0, #12]
   d5036:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d5038:	f7ff ffb3 	bl	d4fa2 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d503c:	4620      	mov	r0, r4
   d503e:	4631      	mov	r1, r6
   d5040:	f7ff ffd9 	bl	d4ff6 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d5044:	4620      	mov	r0, r4
   d5046:	bd70      	pop	{r4, r5, r6, pc}

000d5048 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d5048:	68c3      	ldr	r3, [r0, #12]
   d504a:	2b00      	cmp	r3, #0
   d504c:	f000 818b 	beq.w	d5366 <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d5050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5054:	7983      	ldrb	r3, [r0, #6]
   d5056:	3b02      	subs	r3, #2
   d5058:	b2db      	uxtb	r3, r3
   d505a:	2b04      	cmp	r3, #4
   d505c:	bf9c      	itt	ls
   d505e:	4ac4      	ldrls	r2, [pc, #784]	; (d5370 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d5060:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d5064:	b087      	sub	sp, #28
   d5066:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d5068:	bf88      	it	hi
   d506a:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d506c:	f7ff ff87 	bl	d4f7e <micros>
   d5070:	692b      	ldr	r3, [r5, #16]
   d5072:	1ac0      	subs	r0, r0, r3
   d5074:	42a0      	cmp	r0, r4
   d5076:	d3f9      	bcc.n	d506c <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d5078:	4abe      	ldr	r2, [pc, #760]	; (d5374 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d507a:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d507c:	ca07      	ldmia	r2, {r0, r1, r2}
   d507e:	ac06      	add	r4, sp, #24
   d5080:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d5084:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d5086:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d5088:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d508c:	3304      	adds	r3, #4
   d508e:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5090:	b922      	cbnz	r2, d509c <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5092:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d5096:	2b00      	cmp	r3, #0
   d5098:	f2c0 8155 	blt.w	d5346 <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d509c:	9c04      	ldr	r4, [sp, #16]
   d509e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d50a2:	b923      	cbnz	r3, d50ae <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d50a4:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d50a8:	2b00      	cmp	r3, #0
   d50aa:	f2c0 813c 	blt.w	d5326 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d50ae:	9c05      	ldr	r4, [sp, #20]
   d50b0:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d50b4:	b91b      	cbnz	r3, d50be <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d50b6:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d50ba:	2b00      	cmp	r3, #0
   d50bc:	db6e      	blt.n	d519c <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d50be:	4bae      	ldr	r3, [pc, #696]	; (d5378 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d50c0:	79ea      	ldrb	r2, [r5, #7]
   d50c2:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d50c4:	4cad      	ldr	r4, [pc, #692]	; (d537c <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d50c6:	49ae      	ldr	r1, [pc, #696]	; (d5380 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d50c8:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d50ca:	0112      	lsls	r2, r2, #4
   d50cc:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d50ce:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d50d2:	785b      	ldrb	r3, [r3, #1]
   d50d4:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d50d6:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d50d8:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d50da:	f003 031f 	and.w	r3, r3, #31
   d50de:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d50e2:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d50e4:	433a      	orrs	r2, r7
   d50e6:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d50e8:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d50ea:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d50ec:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d50f0:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d50f4:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d50f6:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d50f8:	2800      	cmp	r0, #0
   d50fa:	d044      	beq.n	d5186 <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d50fc:	46cc      	mov	ip, r9
   d50fe:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d5100:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d5104:	f81c eb01 	ldrb.w	lr, [ip], #1
   d5108:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d510a:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d510c:	6863      	ldr	r3, [r4, #4]
   d510e:	1a9b      	subs	r3, r3, r2
   d5110:	2b46      	cmp	r3, #70	; 0x46
   d5112:	d9fb      	bls.n	d510c <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d5114:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d5118:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d511c:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d5120:	ea43 0307 	orr.w	r3, r3, r7
   d5124:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d5128:	d02f      	beq.n	d518a <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d512a:	6863      	ldr	r3, [r4, #4]
   d512c:	1a9b      	subs	r3, r3, r2
   d512e:	2b28      	cmp	r3, #40	; 0x28
   d5130:	d9fb      	bls.n	d512a <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d5132:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d5136:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d5138:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d513c:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d5140:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d5144:	d1e2      	bne.n	d510c <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d5146:	ebc9 030c 	rsb	r3, r9, ip
   d514a:	88a8      	ldrh	r0, [r5, #4]
   d514c:	b29b      	uxth	r3, r3
   d514e:	4298      	cmp	r0, r3
   d5150:	d8d8      	bhi.n	d5104 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d5152:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d5156:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d515a:	6863      	ldr	r3, [r4, #4]
   d515c:	1a9b      	subs	r3, r3, r2
   d515e:	2b46      	cmp	r3, #70	; 0x46
   d5160:	d9fb      	bls.n	d515a <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d5162:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d5166:	ebca 0a03 	rsb	sl, sl, r3
   d516a:	4582      	cmp	sl, r0
   d516c:	f0c0 80d5 	bcc.w	d531a <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d5170:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5174:	f7ff ff05 	bl	d4f82 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d5178:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d517a:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d517e:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d5182:	2800      	cmp	r0, #0
   d5184:	d1ba      	bne.n	d50fc <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d5186:	4602      	mov	r2, r0
   d5188:	e7e7      	b.n	d515a <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d518a:	6863      	ldr	r3, [r4, #4]
   d518c:	1a9b      	subs	r3, r3, r2
   d518e:	2b11      	cmp	r3, #17
   d5190:	d8cf      	bhi.n	d5132 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d5192:	6863      	ldr	r3, [r4, #4]
   d5194:	1a9b      	subs	r3, r3, r2
   d5196:	2b11      	cmp	r3, #17
   d5198:	d9f7      	bls.n	d518a <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d519a:	e7ca      	b.n	d5132 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d519c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d51a0:	2b00      	cmp	r3, #0
   d51a2:	da8c      	bge.n	d50be <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d51a4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d51a8:	2b00      	cmp	r3, #0
   d51aa:	da88      	bge.n	d50be <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d51ac:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d51b0:	2b00      	cmp	r3, #0
   d51b2:	da84      	bge.n	d50be <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d51b4:	9801      	ldr	r0, [sp, #4]
   d51b6:	f002 faf3 	bl	d77a0 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d51ba:	2800      	cmp	r0, #0
   d51bc:	f43f af7f 	beq.w	d50be <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d51c0:	88ab      	ldrh	r3, [r5, #4]
   d51c2:	2b00      	cmp	r3, #0
   d51c4:	f000 80d0 	beq.w	d5368 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d51c8:	2700      	movs	r7, #0
   d51ca:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d51cc:	4e6d      	ldr	r6, [pc, #436]	; (d5384 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d51ce:	496e      	ldr	r1, [pc, #440]	; (d5388 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d51d0:	e000      	b.n	d51d4 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d51d2:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d51d4:	68ea      	ldr	r2, [r5, #12]
   d51d6:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d51d8:	f103 0e01 	add.w	lr, r3, #1
   d51dc:	f012 0f80 	tst.w	r2, #128	; 0x80
   d51e0:	bf14      	ite	ne
   d51e2:	46b0      	movne	r8, r6
   d51e4:	4688      	moveq	r8, r1
   d51e6:	fa1f fe8e 	uxth.w	lr, lr
   d51ea:	f012 0f40 	tst.w	r2, #64	; 0x40
   d51ee:	bf14      	ite	ne
   d51f0:	46b1      	movne	r9, r6
   d51f2:	4689      	moveq	r9, r1
   d51f4:	f012 0f20 	tst.w	r2, #32
   d51f8:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d51fc:	bf18      	it	ne
   d51fe:	46b2      	movne	sl, r6
   d5200:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d5204:	bf08      	it	eq
   d5206:	468a      	moveq	sl, r1
   d5208:	f103 0802 	add.w	r8, r3, #2
   d520c:	f012 0f10 	tst.w	r2, #16
   d5210:	f103 0e03 	add.w	lr, r3, #3
   d5214:	bf14      	ite	ne
   d5216:	46b4      	movne	ip, r6
   d5218:	468c      	moveq	ip, r1
   d521a:	fa1f f888 	uxth.w	r8, r8
   d521e:	f012 0f08 	tst.w	r2, #8
   d5222:	fa1f fe8e 	uxth.w	lr, lr
   d5226:	f103 0904 	add.w	r9, r3, #4
   d522a:	fa1f f989 	uxth.w	r9, r9
   d522e:	bf14      	ite	ne
   d5230:	46b3      	movne	fp, r6
   d5232:	468b      	moveq	fp, r1
   d5234:	f012 0f04 	tst.w	r2, #4
   d5238:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d523c:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d5240:	bf14      	ite	ne
   d5242:	46b2      	movne	sl, r6
   d5244:	468a      	moveq	sl, r1
   d5246:	f103 0805 	add.w	r8, r3, #5
   d524a:	f012 0f02 	tst.w	r2, #2
   d524e:	f103 0c06 	add.w	ip, r3, #6
   d5252:	f103 0e07 	add.w	lr, r3, #7
   d5256:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d525a:	fa1f fe8e 	uxth.w	lr, lr
   d525e:	bf14      	ite	ne
   d5260:	46b1      	movne	r9, r6
   d5262:	4689      	moveq	r9, r1
   d5264:	fa1f f888 	uxth.w	r8, r8
   d5268:	f012 0f01 	tst.w	r2, #1
   d526c:	fa1f fc8c 	uxth.w	ip, ip
   d5270:	bf14      	ite	ne
   d5272:	4632      	movne	r2, r6
   d5274:	460a      	moveq	r2, r1
   d5276:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d527a:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d527e:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d5282:	3701      	adds	r7, #1
   d5284:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d5288:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d528a:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d528e:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d5290:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d5292:	d89e      	bhi.n	d51d2 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d5294:	f103 0209 	add.w	r2, r3, #9
   d5298:	330a      	adds	r3, #10
   d529a:	b292      	uxth	r2, r2
   d529c:	b29b      	uxth	r3, r3
   d529e:	0052      	lsls	r2, r2, #1
   d52a0:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d52a2:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d52a4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d52a8:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d52aa:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d52ac:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d52ae:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d52b0:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d52b2:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d52b6:	4e30      	ldr	r6, [pc, #192]	; (d5378 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d52b8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d52bc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d52c0:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d52c4:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d52c8:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d52cc:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d52d0:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d52d4:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d52d8:	79eb      	ldrb	r3, [r5, #7]
   d52da:	6831      	ldr	r1, [r6, #0]
   d52dc:	011b      	lsls	r3, r3, #4
   d52de:	18ce      	adds	r6, r1, r3
   d52e0:	5cc9      	ldrb	r1, [r1, r3]
   d52e2:	7873      	ldrb	r3, [r6, #1]
   d52e4:	f003 031f 	and.w	r3, r3, #31
   d52e8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d52ec:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d52ee:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d52f2:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d52f6:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d52fa:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d52fc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d5300:	2b00      	cmp	r3, #0
   d5302:	d0fb      	beq.n	d52fc <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d5304:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d5306:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d530a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d530e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d5312:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d5316:	f002 fa4b 	bl	d77b0 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d531a:	f7ff fe30 	bl	d4f7e <micros>
   d531e:	6128      	str	r0, [r5, #16]
}
   d5320:	b007      	add	sp, #28
   d5322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5326:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d532a:	2b00      	cmp	r3, #0
   d532c:	f6bf aebf 	bge.w	d50ae <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5330:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5334:	2b00      	cmp	r3, #0
   d5336:	f6bf aeba 	bge.w	d50ae <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d533a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d533e:	2b00      	cmp	r3, #0
   d5340:	f6bf aeb5 	bge.w	d50ae <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d5344:	e736      	b.n	d51b4 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5346:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d534a:	2b00      	cmp	r3, #0
   d534c:	f6bf aea6 	bge.w	d509c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5350:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d5354:	2b00      	cmp	r3, #0
   d5356:	f6bf aea1 	bge.w	d509c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d535a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d535e:	2b00      	cmp	r3, #0
   d5360:	f6bf ae9c 	bge.w	d509c <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d5364:	e726      	b.n	d51b4 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d5366:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d5368:	2304      	movs	r3, #4
   d536a:	2202      	movs	r2, #2
   d536c:	e799      	b.n	d52a2 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d536e:	bf00      	nop
   d5370:	000da318 	.word	0x000da318
   d5374:	000da30c 	.word	0x000da30c
   d5378:	2003e398 	.word	0x2003e398
   d537c:	e000edf0 	.word	0xe000edf0
   d5380:	e0001000 	.word	0xe0001000
   d5384:	ffff800d 	.word	0xffff800d
   d5388:	ffff8006 	.word	0xffff8006

000d538c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d538c:	8843      	ldrh	r3, [r0, #2]
   d538e:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d5390:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d5392:	d945      	bls.n	d5420 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d5394:	7a05      	ldrb	r5, [r0, #8]
   d5396:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d539a:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d539e:	b2d6      	uxtb	r6, r2
   d53a0:	b145      	cbz	r5, d53b4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d53a2:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d53a4:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d53a6:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d53a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d53ac:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d53b0:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d53b4:	f890 c006 	ldrb.w	ip, [r0, #6]
   d53b8:	68c7      	ldr	r7, [r0, #12]
   d53ba:	f1bc 0f06 	cmp.w	ip, #6
   d53be:	bf0c      	ite	eq
   d53c0:	2504      	moveq	r5, #4
   d53c2:	2503      	movne	r5, #3
   d53c4:	4369      	muls	r1, r5
   d53c6:	f1bc 0f08 	cmp.w	ip, #8
   d53ca:	eb07 0501 	add.w	r5, r7, r1
   d53ce:	d824      	bhi.n	d541a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d53d0:	f04f 0e01 	mov.w	lr, #1
   d53d4:	fa0e fe0c 	lsl.w	lr, lr, ip
   d53d8:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d53dc:	d10c      	bne.n	d53f8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d53de:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d53e2:	d10d      	bne.n	d5400 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d53e4:	f01e 0f10 	tst.w	lr, #16
   d53e8:	d017      	beq.n	d541a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d53ea:	2bff      	cmp	r3, #255	; 0xff
   d53ec:	bf08      	it	eq
   d53ee:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d53f0:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d53f2:	706e      	strb	r6, [r5, #1]
          *p = g;
   d53f4:	70ac      	strb	r4, [r5, #2]
        } break;
   d53f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d53f8:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d53fa:	706b      	strb	r3, [r5, #1]
          *p = b;
   d53fc:	70ae      	strb	r6, [r5, #2]
        } break;
   d53fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d5400:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d5402:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d5404:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d5406:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d5408:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d540a:	b90b      	cbnz	r3, d5410 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d540c:	b2d2      	uxtb	r2, r2
   d540e:	e002      	b.n	d5416 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d5410:	435a      	muls	r2, r3
   d5412:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d5416:	70ea      	strb	r2, [r5, #3]
        } break;
   d5418:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d541a:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d541c:	706c      	strb	r4, [r5, #1]
          *p = b;
   d541e:	70ae      	strb	r6, [r5, #2]
   d5420:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5422 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d5422:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
   d5424:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d5426:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d5428:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d542a:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d542c:	d01e      	beq.n	d546c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d542e:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d5430:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d5434:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d5436:	d00c      	beq.n	d5452 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d5438:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d543a:	bf1f      	itttt	ne
   d543c:	0211      	lslne	r1, r2, #8
   d543e:	f101 31ff 	addne.w	r1, r1, #4294967295
   d5442:	fb91 f3f3 	sdivne	r3, r1, r3
   d5446:	b29b      	uxthne	r3, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
   d5448:	bf04      	itt	eq
   d544a:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d544e:	fb91 f3f3 	sdiveq	r3, r1, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d5452:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d5454:	1b29      	subs	r1, r5, r4
   d5456:	8886      	ldrh	r6, [r0, #4]
   d5458:	b289      	uxth	r1, r1
   d545a:	428e      	cmp	r6, r1
   d545c:	d905      	bls.n	d546a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
   d545e:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
   d5460:	4359      	muls	r1, r3
   d5462:	1209      	asrs	r1, r1, #8
   d5464:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d5468:	e7f4      	b.n	d5454 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
   d546a:	7202      	strb	r2, [r0, #8]
   d546c:	bd70      	pop	{r4, r5, r6, pc}

000d546e <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d546e:	8882      	ldrh	r2, [r0, #4]
   d5470:	68c0      	ldr	r0, [r0, #12]
   d5472:	2100      	movs	r1, #0
   d5474:	f004 b994 	b.w	d97a0 <memset>

000d5478 <_GLOBAL__sub_I_PIN_MAP2>:
}
   d5478:	b508      	push	{r3, lr}
   d547a:	f001 febd 	bl	d71f8 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d547e:	f001 febb 	bl	d71f8 <HAL_Pin_Map>
   d5482:	4b01      	ldr	r3, [pc, #4]	; (d5488 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d5484:	6018      	str	r0, [r3, #0]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	2003e398 	.word	0x2003e398

000d548c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d548c:	f001 beb4 	b.w	d71f8 <HAL_Pin_Map>

000d5490 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d5490:	f001 beb2 	b.w	d71f8 <HAL_Pin_Map>

000d5494 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d5494:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d5496:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d549a:	6803      	ldr	r3, [r0, #0]
   d549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d549e:	4798      	blx	r3
}
   d54a0:	3000      	adds	r0, #0
   d54a2:	bf18      	it	ne
   d54a4:	2001      	movne	r0, #1
   d54a6:	bd08      	pop	{r3, pc}

000d54a8 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d54a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54aa:	4606      	mov	r6, r0
   d54ac:	460f      	mov	r7, r1
   d54ae:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d54b0:	b1c4      	cbz	r4, d54e4 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d54b2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d54b6:	6803      	ldr	r3, [r0, #0]
   d54b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54ba:	4798      	blx	r3
   d54bc:	b908      	cbnz	r0, d54c2 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d54be:	2000      	movs	r0, #0
   d54c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d54c2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d54c6:	2cfa      	cmp	r4, #250	; 0xfa
   d54c8:	6803      	ldr	r3, [r0, #0]
   d54ca:	4625      	mov	r5, r4
   d54cc:	bfa8      	it	ge
   d54ce:	25fa      	movge	r5, #250	; 0xfa
   d54d0:	68db      	ldr	r3, [r3, #12]
   d54d2:	462a      	mov	r2, r5
   d54d4:	4639      	mov	r1, r7
   d54d6:	4798      	blx	r3
   d54d8:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d54da:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d54dc:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d54de:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d54e0:	d0e6      	beq.n	d54b0 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d54e2:	e7ec      	b.n	d54be <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d54e4:	2001      	movs	r0, #1
}
   d54e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54e8 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d54e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d54ec:	4606      	mov	r6, r0
   d54ee:	4688      	mov	r8, r1
   d54f0:	4691      	mov	r9, r2
   d54f2:	461f      	mov	r7, r3
   d54f4:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d54f6:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d54f8:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d54fc:	6803      	ldr	r3, [r0, #0]
   d54fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5500:	4798      	blx	r3
   d5502:	b1d0      	cbz	r0, d553a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d5504:	2d00      	cmp	r5, #0
   d5506:	db18      	blt.n	d553a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d5508:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d550c:	6803      	ldr	r3, [r0, #0]
   d550e:	691b      	ldr	r3, [r3, #16]
   d5510:	4798      	blx	r3
   d5512:	b160      	cbz	r0, d552e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d5514:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5518:	6803      	ldr	r3, [r0, #0]
   d551a:	695b      	ldr	r3, [r3, #20]
   d551c:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d551e:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d5522:	3401      	adds	r4, #1
   d5524:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5526:	454c      	cmp	r4, r9
   d5528:	d007      	beq.n	d553a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d552a:	463d      	mov	r5, r7
   d552c:	e7ec      	b.n	d5508 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d552e:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5530:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5532:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5534:	f002 fc96 	bl	d7e64 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5538:	e7de      	b.n	d54f8 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d553a:	4620      	mov	r0, r4
   d553c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5540 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d5540:	b570      	push	{r4, r5, r6, lr}
   d5542:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d5544:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d5548:	2296      	movs	r2, #150	; 0x96
   d554a:	2100      	movs	r1, #0
   d554c:	4628      	mov	r0, r5
   d554e:	f004 f927 	bl	d97a0 <memset>
  strcpy((char *)buffer, servername);
   d5552:	6861      	ldr	r1, [r4, #4]
   d5554:	4628      	mov	r0, r5
   d5556:	f004 f95d 	bl	d9814 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d555a:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d555e:	8922      	ldrh	r2, [r4, #8]
   d5560:	6803      	ldr	r3, [r0, #0]
   d5562:	4629      	mov	r1, r5
   d5564:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d5566:	2300      	movs	r3, #0
   d5568:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d556a:	3000      	adds	r0, #0
   d556c:	bf18      	it	ne
   d556e:	2001      	movne	r0, #1
   d5570:	bd70      	pop	{r4, r5, r6, pc}

000d5572 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d5572:	b510      	push	{r4, lr}
   d5574:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d5576:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d557a:	6803      	ldr	r3, [r0, #0]
   d557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d557e:	4798      	blx	r3
   d5580:	b120      	cbz	r0, d558c <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d5582:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5586:	6803      	ldr	r3, [r0, #0]
   d5588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d558a:	4798      	blx	r3
  }
  return true;
}
   d558c:	2001      	movs	r0, #1
   d558e:	bd10      	pop	{r4, pc}

000d5590 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d5590:	f001 be32 	b.w	d71f8 <HAL_Pin_Map>

000d5594 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d5594:	b570      	push	{r4, r5, r6, lr}
   d5596:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d5598:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d559a:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d559c:	f004 f942 	bl	d9824 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d55a0:	1203      	asrs	r3, r0, #8
   d55a2:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d55a4:	7060      	strb	r0, [r4, #1]
   d55a6:	b285      	uxth	r5, r0
   d55a8:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d55aa:	462a      	mov	r2, r5
   d55ac:	4631      	mov	r1, r6
   d55ae:	4620      	mov	r0, r4
   d55b0:	f004 f955 	bl	d985e <strncpy>
  return p+len;
}
   d55b4:	1960      	adds	r0, r4, r5
   d55b6:	bd70      	pop	{r4, r5, r6, pc}

000d55b8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d55b8:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d55ba:	6103      	str	r3, [r0, #16]
  password = pass;
   d55bc:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d55be:	4d0d      	ldr	r5, [pc, #52]	; (d55f4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d55c0:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d55c2:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d55c4:	4a0c      	ldr	r2, [pc, #48]	; (d55f8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d55c6:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d55c8:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d55ca:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d55cc:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d55ce:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d55d2:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d55d6:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d55da:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d55de:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d55e2:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d55e4:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d55e6:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d55ea:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d55ee:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d55f2:	bd30      	pop	{r4, r5, pc}
   d55f4:	000da358 	.word	0x000da358
   d55f8:	000da3a9 	.word	0x000da3a9

000d55fc <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d55fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5600:	fa0f fa83 	sxth.w	sl, r3
   d5604:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5606:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5608:	699d      	ldr	r5, [r3, #24]
   d560a:	2201      	movs	r2, #1
   d560c:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d560e:	4606      	mov	r6, r0
   d5610:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5612:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d5614:	b2c0      	uxtb	r0, r0
   d5616:	2801      	cmp	r0, #1
   d5618:	d001      	beq.n	d561e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d561a:	2000      	movs	r0, #0
   d561c:	e034      	b.n	d5688 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d561e:	1c65      	adds	r5, r4, #1
   d5620:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d5624:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d5626:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d562a:	6833      	ldr	r3, [r6, #0]
   d562c:	699b      	ldr	r3, [r3, #24]
   d562e:	2201      	movs	r2, #1
   d5630:	461f      	mov	r7, r3
   d5632:	4629      	mov	r1, r5
   d5634:	4653      	mov	r3, sl
   d5636:	4630      	mov	r0, r6
   d5638:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d563a:	b2c0      	uxtb	r0, r0
   d563c:	2801      	cmp	r0, #1
   d563e:	d1ec      	bne.n	d561a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d5640:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d5644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d5648:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d564a:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d564e:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d5652:	d0e2      	beq.n	d561a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d5654:	061b      	lsls	r3, r3, #24
   d5656:	d4e8      	bmi.n	d562a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d5658:	9b01      	ldr	r3, [sp, #4]
   d565a:	1b2c      	subs	r4, r5, r4
   d565c:	1b1b      	subs	r3, r3, r4
   d565e:	3b01      	subs	r3, #1
   d5660:	4599      	cmp	r9, r3
   d5662:	6833      	ldr	r3, [r6, #0]
   d5664:	d906      	bls.n	d5674 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d5666:	9a01      	ldr	r2, [sp, #4]
   d5668:	699f      	ldr	r7, [r3, #24]
   d566a:	3a01      	subs	r2, #1
   d566c:	1b12      	subs	r2, r2, r4
   d566e:	4653      	mov	r3, sl
   d5670:	b292      	uxth	r2, r2
   d5672:	e003      	b.n	d567c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d5674:	699f      	ldr	r7, [r3, #24]
   d5676:	fa1f f289 	uxth.w	r2, r9
   d567a:	4653      	mov	r3, sl
   d567c:	4629      	mov	r1, r5
   d567e:	4630      	mov	r0, r6
   d5680:	47b8      	blx	r7
   d5682:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d5684:	4420      	add	r0, r4
   d5686:	b280      	uxth	r0, r0
}
   d5688:	b003      	add	sp, #12
   d568a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d5690 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d5690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5692:	4605      	mov	r5, r0
   d5694:	460c      	mov	r4, r1
   d5696:	4616      	mov	r6, r2
   d5698:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d569a:	463b      	mov	r3, r7
   d569c:	2296      	movs	r2, #150	; 0x96
   d569e:	4621      	mov	r1, r4
   d56a0:	4628      	mov	r0, r5
   d56a2:	f7ff ffab 	bl	d55fc <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d56a6:	b148      	cbz	r0, d56bc <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d56a8:	7823      	ldrb	r3, [r4, #0]
   d56aa:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d56ae:	d005      	beq.n	d56bc <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d56b0:	f002 fd6a 	bl	d8188 <_Z16_fetch_usbserialv>
   d56b4:	4902      	ldr	r1, [pc, #8]	; (d56c0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d56b6:	f002 fade 	bl	d7c76 <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d56ba:	e7ee      	b.n	d569a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d56bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d56be:	bf00      	nop
   d56c0:	000da3aa 	.word	0x000da3aa

000d56c4 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

  return ((pbuff - buffer)+rlen);
}

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   d56c4:	3102      	adds	r1, #2
   d56c6:	b2c9      	uxtb	r1, r1
   d56c8:	2909      	cmp	r1, #9
   d56ca:	bf9a      	itte	ls
   d56cc:	4b02      	ldrls	r3, [pc, #8]	; (d56d8 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d56ce:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   switch (code) {
   d56d2:	4802      	ldrhi	r0, [pc, #8]	; (d56dc <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d56d4:	4770      	bx	lr
   d56d6:	bf00      	nop
   d56d8:	000da374 	.word	0x000da374
   d56dc:	000da3bb 	.word	0x000da3bb

000d56e0 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d56e0:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d56e2:	23e0      	movs	r3, #224	; 0xe0
   d56e4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d56e8:	2300      	movs	r3, #0
   d56ea:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d56ee:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d56f0:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d56f2:	695b      	ldr	r3, [r3, #20]
   d56f4:	2202      	movs	r2, #2
   d56f6:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d56fa:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d56fc:	6823      	ldr	r3, [r4, #0]
   d56fe:	4620      	mov	r0, r4
   d5700:	691b      	ldr	r3, [r3, #16]

}
   d5702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d5706:	4718      	bx	r3

000d5708 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5708:	b538      	push	{r3, r4, r5, lr}
   d570a:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d570c:	4608      	mov	r0, r1
   d570e:	2310      	movs	r3, #16
   d5710:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5714:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d5716:	4929      	ldr	r1, [pc, #164]	; (d57bc <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d5718:	f7ff ff3c 	bl	d5594 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d571c:	2304      	movs	r3, #4
   d571e:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d5720:	2302      	movs	r3, #2
   d5722:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5724:	69a3      	ldr	r3, [r4, #24]
   d5726:	b1ab      	cbz	r3, d5754 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d5728:	781b      	ldrb	r3, [r3, #0]
   d572a:	b19b      	cbz	r3, d5754 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d572c:	2306      	movs	r3, #6
   d572e:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d5730:	f894 3020 	ldrb.w	r3, [r4, #32]
   d5734:	2b01      	cmp	r3, #1
   d5736:	d101      	bne.n	d573c <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d5738:	230e      	movs	r3, #14
   d573a:	e002      	b.n	d5742 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d573c:	2b02      	cmp	r3, #2
   d573e:	d101      	bne.n	d5744 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d5740:	231e      	movs	r3, #30
   d5742:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d5744:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d5748:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d574a:	bf02      	ittt	eq
   d574c:	7843      	ldrbeq	r3, [r0, #1]
   d574e:	f043 0320 	orreq.w	r3, r3, #32
   d5752:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d5754:	6923      	ldr	r3, [r4, #16]
   d5756:	781b      	ldrb	r3, [r3, #0]
   d5758:	b11b      	cbz	r3, d5762 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d575a:	7843      	ldrb	r3, [r0, #1]
   d575c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5760:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d5762:	6963      	ldr	r3, [r4, #20]
   d5764:	781b      	ldrb	r3, [r3, #0]
   d5766:	b11b      	cbz	r3, d5770 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d5768:	7843      	ldrb	r3, [r0, #1]
   d576a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d576e:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d5770:	2301      	movs	r3, #1
   d5772:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d5774:	232c      	movs	r3, #44	; 0x2c
   d5776:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d5778:	68e1      	ldr	r1, [r4, #12]
   d577a:	780b      	ldrb	r3, [r1, #0]
   d577c:	b11b      	cbz	r3, d5786 <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d577e:	3004      	adds	r0, #4
   d5780:	f7ff ff08 	bl	d5594 <_ZL11stringprintPhPKct.constprop.3>
   d5784:	e002      	b.n	d578c <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d5786:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d5788:	7143      	strb	r3, [r0, #5]
      p++;
   d578a:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d578c:	69a1      	ldr	r1, [r4, #24]
   d578e:	b131      	cbz	r1, d579e <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d5790:	780b      	ldrb	r3, [r1, #0]
   d5792:	b123      	cbz	r3, d579e <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d5794:	f7ff fefe 	bl	d5594 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d5798:	69e1      	ldr	r1, [r4, #28]
   d579a:	f7ff fefb 	bl	d5594 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d579e:	6921      	ldr	r1, [r4, #16]
   d57a0:	780b      	ldrb	r3, [r1, #0]
   d57a2:	b10b      	cbz	r3, d57a8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d57a4:	f7ff fef6 	bl	d5594 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d57a8:	6961      	ldr	r1, [r4, #20]
   d57aa:	780b      	ldrb	r3, [r1, #0]
   d57ac:	b10b      	cbz	r3, d57b2 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d57ae:	f7ff fef1 	bl	d5594 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d57b2:	1b40      	subs	r0, r0, r5
   d57b4:	b2c0      	uxtb	r0, r0
   d57b6:	1e83      	subs	r3, r0, #2
   d57b8:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d57ba:	bd38      	pop	{r3, r4, r5, pc}
   d57bc:	000da3c9 	.word	0x000da3c9

000d57c0 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d57c0:	b538      	push	{r3, r4, r5, lr}
   d57c2:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d57c4:	2382      	movs	r3, #130	; 0x82
   d57c6:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d57c8:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d57ca:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d57ce:	0a09      	lsrs	r1, r1, #8
   d57d0:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d57d2:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d57d6:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d57d8:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d57dc:	3101      	adds	r1, #1
   d57de:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d57e2:	4611      	mov	r1, r2
   d57e4:	1d20      	adds	r0, r4, #4
   d57e6:	f7ff fed5 	bl	d5594 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d57ea:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d57ee:	1b00      	subs	r0, r0, r4
   d57f0:	b2c0      	uxtb	r0, r0
   d57f2:	1e83      	subs	r3, r0, #2
   d57f4:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d57f6:	bd38      	pop	{r3, r4, r5, pc}

000d57f8 <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d57f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d57fc:	6803      	ldr	r3, [r0, #0]
   d57fe:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5800:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d5802:	4798      	blx	r3
   d5804:	b918      	cbnz	r0, d580e <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5806:	f04f 30ff 	mov.w	r0, #4294967295
   d580a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d580e:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d5812:	4629      	mov	r1, r5
   d5814:	4620      	mov	r0, r4
   d5816:	f7ff ff77 	bl	d5708 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d581a:	6823      	ldr	r3, [r4, #0]
   d581c:	b282      	uxth	r2, r0
   d581e:	695b      	ldr	r3, [r3, #20]
   d5820:	4629      	mov	r1, r5
   d5822:	4620      	mov	r0, r4
   d5824:	4798      	blx	r3
   d5826:	2800      	cmp	r0, #0
   d5828:	d0ed      	beq.n	d5806 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d582a:	f241 7370 	movw	r3, #6000	; 0x1770
   d582e:	2296      	movs	r2, #150	; 0x96
   d5830:	4629      	mov	r1, r5
   d5832:	4620      	mov	r0, r4
   d5834:	f7ff fee2 	bl	d55fc <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d5838:	b2c0      	uxtb	r0, r0
   d583a:	2804      	cmp	r0, #4
   d583c:	d1e3      	bne.n	d5806 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d583e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5840:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d5844:	d1df      	bne.n	d5806 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d5846:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d584a:	b110      	cbz	r0, d5852 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d584c:	b240      	sxtb	r0, r0
   d584e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5852:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5856:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d585a:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d585e:	b1fb      	cbz	r3, d58a0 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5860:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d5862:	683a      	ldr	r2, [r7, #0]
   d5864:	4629      	mov	r1, r5
   d5866:	7913      	ldrb	r3, [r2, #4]
   d5868:	6812      	ldr	r2, [r2, #0]
   d586a:	4620      	mov	r0, r4
   d586c:	f7ff ffa8 	bl	d57c0 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d5870:	6823      	ldr	r3, [r4, #0]
   d5872:	b282      	uxth	r2, r0
   d5874:	695b      	ldr	r3, [r3, #20]
   d5876:	4629      	mov	r1, r5
   d5878:	4620      	mov	r0, r4
   d587a:	4798      	blx	r3
   d587c:	2800      	cmp	r0, #0
   d587e:	d0c2      	beq.n	d5806 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d5880:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d5884:	2209      	movs	r2, #9
   d5886:	4629      	mov	r1, r5
   d5888:	4620      	mov	r0, r4
   d588a:	f7ff ff01 	bl	d5690 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d588e:	b938      	cbnz	r0, d58a0 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d5890:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d5892:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5896:	d1e4      	bne.n	d5862 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d5898:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d58a0:	4547      	cmp	r7, r8
   d58a2:	d1da      	bne.n	d585a <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d58a4:	2000      	movs	r0, #0
   d58a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d58aa <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d58aa:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d58ac:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d58b0:	7203      	strb	r3, [r0, #8]
}
   d58b2:	bd10      	pop	{r4, pc}

000d58b4 <_GLOBAL__sub_I__Z11printBufferPht>:
   d58b4:	f001 bca0 	b.w	d71f8 <HAL_Pin_Map>

000d58b8 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d58b8:	f001 bc9e 	b.w	d71f8 <HAL_Pin_Map>

000d58bc <_GLOBAL__sub_I__ZN7istream3getEv>:
   d58bc:	f001 bc9c 	b.w	d71f8 <HAL_Pin_Map>

000d58c0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d58c0:	b510      	push	{r4, lr}
   d58c2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d58c4:	3024      	adds	r0, #36	; 0x24
   d58c6:	f000 fe8f 	bl	d65e8 <_ZN8FatCache4syncEv>
   d58ca:	b128      	cbz	r0, d58d8 <_ZN9FatVolume9cacheSyncEv+0x18>
   d58cc:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d58d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d58d4:	f000 be88 	b.w	d65e8 <_ZN8FatCache4syncEv>
  }
   d58d8:	bd10      	pop	{r4, pc}

000d58da <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d58da:	1e41      	subs	r1, r0, #1
   d58dc:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d58e0:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d58e2:	0843      	lsrs	r3, r0, #1
   d58e4:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d58e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d58ec:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d58f0:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d58f2:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d58f4:	d1f5      	bne.n	d58e2 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d58f6:	4770      	bx	lr

000d58f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d58f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d58fc:	7803      	ldrb	r3, [r0, #0]
   d58fe:	2b20      	cmp	r3, #32
   d5900:	f100 0401 	add.w	r4, r0, #1
   d5904:	d101      	bne.n	d590a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d5906:	4620      	mov	r0, r4
   d5908:	e7f8      	b.n	d58fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d590a:	4f70      	ldr	r7, [pc, #448]	; (d5acc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d590c:	6088      	str	r0, [r1, #8]
   d590e:	4605      	mov	r5, r0
   d5910:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d5912:	462e      	mov	r6, r5
   d5914:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d5918:	b30b      	cbz	r3, d595e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d591a:	2b2f      	cmp	r3, #47	; 0x2f
   d591c:	d101      	bne.n	d5922 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d591e:	1903      	adds	r3, r0, r4
   d5920:	e017      	b.n	d5952 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5922:	2b5c      	cmp	r3, #92	; 0x5c
   d5924:	d102      	bne.n	d592c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d5926:	2000      	movs	r0, #0
   d5928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d592c:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d5930:	b2e4      	uxtb	r4, r4
   d5932:	2c1d      	cmp	r4, #29
   d5934:	d803      	bhi.n	d593e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d5936:	fa27 f404 	lsr.w	r4, r7, r4
   d593a:	07e4      	lsls	r4, r4, #31
   d593c:	d4f3      	bmi.n	d5926 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d593e:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d5942:	2c3c      	cmp	r4, #60	; 0x3c
   d5944:	d0ef      	beq.n	d5926 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d5946:	3b20      	subs	r3, #32
   d5948:	2b5e      	cmp	r3, #94	; 0x5e
   d594a:	d9e1      	bls.n	d5910 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d594c:	e7eb      	b.n	d5926 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d594e:	2d2f      	cmp	r5, #47	; 0x2f
   d5950:	d105      	bne.n	d595e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d5952:	461e      	mov	r6, r3
   d5954:	f813 5b01 	ldrb.w	r5, [r3], #1
   d5958:	2d20      	cmp	r5, #32
   d595a:	d1f8      	bne.n	d594e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d595c:	e7f9      	b.n	d5952 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d595e:	6016      	str	r6, [r2, #0]
   d5960:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d5962:	4298      	cmp	r0, r3
   d5964:	ebc0 0803 	rsb	r8, r0, r3
   d5968:	d009      	beq.n	d597e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d596a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d596e:	2a2e      	cmp	r2, #46	; 0x2e
   d5970:	d0f7      	beq.n	d5962 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d5972:	2a20      	cmp	r2, #32
   d5974:	d0f5      	beq.n	d5962 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d5976:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d597a:	dcd4      	bgt.n	d5926 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d597c:	e001      	b.n	d5982 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d597e:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d5982:	f8c1 8004 	str.w	r8, [r1, #4]
   d5986:	f101 030c 	add.w	r3, r1, #12
   d598a:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d598e:	2420      	movs	r4, #32
   d5990:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d5994:	4293      	cmp	r3, r2
   d5996:	d1fb      	bne.n	d5990 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d5998:	4603      	mov	r3, r0
   d599a:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d599c:	f813 4b01 	ldrb.w	r4, [r3], #1
   d59a0:	2c2e      	cmp	r4, #46	; 0x2e
   d59a2:	d0fa      	beq.n	d599a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d59a4:	2c20      	cmp	r4, #32
   d59a6:	d0f8      	beq.n	d599a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d59a8:	fab2 f482 	clz	r4, r2
   d59ac:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d59ae:	f108 36ff 	add.w	r6, r8, #4294967295
   d59b2:	1c73      	adds	r3, r6, #1
   d59b4:	d107      	bne.n	d59c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d59b6:	2700      	movs	r7, #0
   d59b8:	f04f 0e07 	mov.w	lr, #7
   d59bc:	463d      	mov	r5, r7
   d59be:	46ba      	mov	sl, r7
   d59c0:	f04f 0908 	mov.w	r9, #8
   d59c4:	e009      	b.n	d59da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d59c6:	5d83      	ldrb	r3, [r0, r6]
   d59c8:	2b2e      	cmp	r3, #46	; 0x2e
   d59ca:	d0f4      	beq.n	d59b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d59cc:	3e01      	subs	r6, #1
   d59ce:	e7f0      	b.n	d59b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d59d0:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d59d2:	2b20      	cmp	r3, #32
   d59d4:	d104      	bne.n	d59e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d59d6:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d59d8:	3201      	adds	r2, #1
   d59da:	4542      	cmp	r2, r8
   d59dc:	dbf8      	blt.n	d59d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d59de:	e04b      	b.n	d5a78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d59e0:	2b2e      	cmp	r3, #46	; 0x2e
   d59e2:	d102      	bne.n	d59ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d59e4:	42b2      	cmp	r2, r6
   d59e6:	d1f6      	bne.n	d59d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d59e8:	e003      	b.n	d59f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d59ea:	2b22      	cmp	r3, #34	; 0x22
   d59ec:	d017      	beq.n	d5a1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d59ee:	2b7c      	cmp	r3, #124	; 0x7c
   d59f0:	d015      	beq.n	d5a1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d59f2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d59f6:	f1bc 0f05 	cmp.w	ip, #5
   d59fa:	d801      	bhi.n	d5a00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d59fc:	2b2d      	cmp	r3, #45	; 0x2d
   d59fe:	d10e      	bne.n	d5a1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d5a00:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d5a04:	f1bc 0f05 	cmp.w	ip, #5
   d5a08:	d909      	bls.n	d5a1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d5a0a:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d5a0e:	f1bc 0f02 	cmp.w	ip, #2
   d5a12:	d904      	bls.n	d5a1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d5a14:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d5a18:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5a1c:	d902      	bls.n	d5a24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d5a1e:	42b2      	cmp	r2, r6
   d5a20:	d10e      	bne.n	d5a40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d5a22:	e049      	b.n	d5ab8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5a24:	42b2      	cmp	r2, r6
   d5a26:	d047      	beq.n	d5ab8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d5a28:	4575      	cmp	r5, lr
   d5a2a:	d821      	bhi.n	d5a70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d5a2c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d5a30:	f1bc 0f19 	cmp.w	ip, #25
   d5a34:	d808      	bhi.n	d5a48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d5a36:	3b20      	subs	r3, #32
   d5a38:	b2db      	uxtb	r3, r3
        lc |= bit;
   d5a3a:	ea49 0707 	orr.w	r7, r9, r7
   d5a3e:	e00a      	b.n	d5a56 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5a40:	4575      	cmp	r5, lr
   d5a42:	d815      	bhi.n	d5a70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d5a44:	2400      	movs	r4, #0
      c = '_';
   d5a46:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d5a48:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d5a4c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d5a50:	bf98      	it	ls
   d5a52:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d5a56:	f105 0c01 	add.w	ip, r5, #1
   d5a5a:	fa5f fc8c 	uxtb.w	ip, ip
   d5a5e:	440d      	add	r5, r1
      if (i < 7) {
   d5a60:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d5a64:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d5a66:	d801      	bhi.n	d5a6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d5a68:	f881 c00c 	strb.w	ip, [r1, #12]
   d5a6c:	4665      	mov	r5, ip
   d5a6e:	e7b3      	b.n	d59d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5a70:	f1be 0f0a 	cmp.w	lr, #10
   d5a74:	d117      	bne.n	d5aa6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d5a76:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d5a78:	7b4b      	ldrb	r3, [r1, #13]
   d5a7a:	2b20      	cmp	r3, #32
   d5a7c:	f43f af53 	beq.w	d5926 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d5a80:	b13c      	cbz	r4, d5a92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d5a82:	ea1a 0f07 	tst.w	sl, r7
   d5a86:	bf18      	it	ne
   d5a88:	2702      	movne	r7, #2
   d5a8a:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d5a8c:	2001      	movs	r0, #1
   d5a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d5a92:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d5a94:	2001      	movs	r0, #1
   d5a96:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d5a98:	4419      	add	r1, r3
   d5a9a:	237e      	movs	r3, #126	; 0x7e
   d5a9c:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d5a9e:	2331      	movs	r3, #49	; 0x31
   d5aa0:	738b      	strb	r3, [r1, #14]
   d5aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d5aa6:	42b2      	cmp	r2, r6
   d5aa8:	dce5      	bgt.n	d5a76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5aaa:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5aac:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5ab0:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5ab2:	f04f 0910 	mov.w	r9, #16
   d5ab6:	e78e      	b.n	d59d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5ab8:	f1be 0f0a 	cmp.w	lr, #10
   d5abc:	d0db      	beq.n	d5a76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5abe:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5ac0:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5ac4:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5ac6:	f04f 0910 	mov.w	r9, #16
   d5aca:	e785      	b.n	d59d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d5acc:	31000101 	.word	0x31000101

000d5ad0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5ad4:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5ad8:	4606      	mov	r6, r0
   d5ada:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5adc:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5ade:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5ae0:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d5ae4:	6869      	ldr	r1, [r5, #4]
   d5ae6:	68aa      	ldr	r2, [r5, #8]
   d5ae8:	1863      	adds	r3, r4, r1
   d5aea:	b29b      	uxth	r3, r3
   d5aec:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d5aee:	4291      	cmp	r1, r2
   d5af0:	d006      	beq.n	d5b00 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d5af2:	f812 0b01 	ldrb.w	r0, [r2], #1
   d5af6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d5afa:	4043      	eors	r3, r0
   d5afc:	b29b      	uxth	r3, r3
   d5afe:	e7f6      	b.n	d5aee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d5b00:	f1b9 0f03 	cmp.w	r9, #3
   d5b04:	bf28      	it	cs
   d5b06:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5b0a:	f109 0204 	add.w	r2, r9, #4
   d5b0e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d5b10:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5b14:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5b16:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5b18:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5b1a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5b1c:	bf94      	ite	ls
   d5b1e:	3130      	addls	r1, #48	; 0x30
   d5b20:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5b22:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5b24:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d5b26:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5b2a:	d3f1      	bcc.n	d5b10 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5b2c:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d5b30:	2100      	movs	r1, #0
   d5b32:	735f      	strb	r7, [r3, #13]
   d5b34:	4630      	mov	r0, r6
   d5b36:	f000 fb31 	bl	d619c <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d5b3a:	2101      	movs	r1, #1
   d5b3c:	4630      	mov	r0, r6
   d5b3e:	f000 fb10 	bl	d6162 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d5b42:	4601      	mov	r1, r0
   d5b44:	b928      	cbnz	r0, d5b52 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d5b46:	7870      	ldrb	r0, [r6, #1]
   d5b48:	fab0 f080 	clz	r0, r0
   d5b4c:	0940      	lsrs	r0, r0, #5
   d5b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5b52:	7803      	ldrb	r3, [r0, #0]
   d5b54:	b14b      	cbz	r3, d5b6a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5b56:	7ac3      	ldrb	r3, [r0, #11]
   d5b58:	071b      	lsls	r3, r3, #28
   d5b5a:	d4ee      	bmi.n	d5b3a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5b5c:	220b      	movs	r2, #11
   d5b5e:	4640      	mov	r0, r8
   d5b60:	f003 fe04 	bl	d976c <memcmp>
   d5b64:	2800      	cmp	r0, #0
   d5b66:	d1e8      	bne.n	d5b3a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d5b68:	e002      	b.n	d5b70 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d5b6a:	2001      	movs	r0, #1
   d5b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5b70:	3401      	adds	r4, #1
   d5b72:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d5b74:	2c64      	cmp	r4, #100	; 0x64
   d5b76:	d1b5      	bne.n	d5ae4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d5b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5b7c <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b80:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5b82:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5b84:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5b86:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5b8a:	9005      	str	r0, [sp, #20]
   d5b8c:	460e      	mov	r6, r1
   d5b8e:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5b90:	d101      	bne.n	d5b96 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d5b92:	2000      	movs	r0, #0
   d5b94:	e1a0      	b.n	d5ed8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5b96:	9b05      	ldr	r3, [sp, #20]
   d5b98:	781b      	ldrb	r3, [r3, #0]
   d5b9a:	2b00      	cmp	r3, #0
   d5b9c:	d1f9      	bne.n	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d5b9e:	6853      	ldr	r3, [r2, #4]
   d5ba0:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5ba2:	7813      	ldrb	r3, [r2, #0]
   d5ba4:	079b      	lsls	r3, r3, #30
   d5ba6:	f000 818d 	beq.w	d5ec4 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d5baa:	9b02      	ldr	r3, [sp, #8]
   d5bac:	270d      	movs	r7, #13
   d5bae:	330c      	adds	r3, #12
   d5bb0:	fbb3 f7f7 	udiv	r7, r3, r7
   d5bb4:	3701      	adds	r7, #1
   d5bb6:	b2ff      	uxtb	r7, r7
   d5bb8:	2100      	movs	r1, #0
   d5bba:	4630      	mov	r0, r6
   d5bbc:	f000 faee 	bl	d619c <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d5bc0:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5bc4:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d5bc8:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d5bcc:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d5bce:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d5bd0:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d5bd2:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5bd6:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5bd8:	6972      	ldr	r2, [r6, #20]
   d5bda:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5bdc:	2101      	movs	r1, #1
   d5bde:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5be0:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d5be4:	f000 fabd 	bl	d6162 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5be8:	9b07      	ldr	r3, [sp, #28]
   d5bea:	b920      	cbnz	r0, d5bf6 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d5bec:	7873      	ldrb	r3, [r6, #1]
   d5bee:	2b00      	cmp	r3, #0
   d5bf0:	f000 8090 	beq.w	d5d14 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d5bf4:	e7cd      	b.n	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d5bf6:	7802      	ldrb	r2, [r0, #0]
   d5bf8:	2ae5      	cmp	r2, #229	; 0xe5
   d5bfa:	d000      	beq.n	d5bfe <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d5bfc:	b942      	cbnz	r2, d5c10 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5bfe:	2c00      	cmp	r4, #0
   d5c00:	bf08      	it	eq
   d5c02:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d5c04:	42bc      	cmp	r4, r7
        freeFound++;
   d5c06:	bf3c      	itt	cc
   d5c08:	3401      	addcc	r4, #1
   d5c0a:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5c0c:	b922      	cbnz	r2, d5c18 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d5c0e:	e081      	b.n	d5d14 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d5c10:	42bc      	cmp	r4, r7
   d5c12:	bf38      	it	cc
   d5c14:	2400      	movcc	r4, #0
   d5c16:	e003      	b.n	d5c20 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5c18:	2ae5      	cmp	r2, #229	; 0xe5
   d5c1a:	d101      	bne.n	d5c20 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d5c1c:	2500      	movs	r5, #0
   d5c1e:	e7db      	b.n	d5bd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5c20:	2a2e      	cmp	r2, #46	; 0x2e
   d5c22:	d0fb      	beq.n	d5c1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5c24:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d5c26:	290f      	cmp	r1, #15
   d5c28:	d152      	bne.n	d5cd0 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d5c2a:	b93d      	cbnz	r5, d5c3c <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d5c2c:	0651      	lsls	r1, r2, #25
   d5c2e:	d5d3      	bpl.n	d5bd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d5c30:	7b43      	ldrb	r3, [r0, #13]
   d5c32:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d5c34:	f002 051f 	and.w	r5, r2, #31
   d5c38:	462b      	mov	r3, r5
   d5c3a:	e007      	b.n	d5c4c <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d5c3c:	3b01      	subs	r3, #1
   d5c3e:	b2db      	uxtb	r3, r3
   d5c40:	429a      	cmp	r2, r3
   d5c42:	d1eb      	bne.n	d5c1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5c44:	7b42      	ldrb	r2, [r0, #13]
   d5c46:	9903      	ldr	r1, [sp, #12]
   d5c48:	4291      	cmp	r1, r2
   d5c4a:	d1e7      	bne.n	d5c1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d5c4c:	1e5a      	subs	r2, r3, #1
   d5c4e:	f04f 0c0d 	mov.w	ip, #13
   d5c52:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d5c56:	9a02      	ldr	r2, [sp, #8]
   d5c58:	4562      	cmp	r2, ip
   d5c5a:	d9df      	bls.n	d5c1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5c5c:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d5c60:	f1be 0f04 	cmp.w	lr, #4
   d5c64:	fa5f f28e 	uxtb.w	r2, lr
   d5c68:	d804      	bhi.n	d5c74 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d5c6a:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d5c6e:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d5c72:	e00c      	b.n	d5c8e <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5c74:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5c76:	bf95      	itete	ls
   d5c78:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5c7c:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5c80:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5c84:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5c88:	bf94      	ite	ls
   d5c8a:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5c8c:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d5c8e:	9902      	ldr	r1, [sp, #8]
   d5c90:	4561      	cmp	r1, ip
   d5c92:	d103      	bne.n	d5c9c <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d5c94:	2a00      	cmp	r2, #0
   d5c96:	bf18      	it	ne
   d5c98:	2500      	movne	r5, #0
   d5c9a:	e79d      	b.n	d5bd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5c9c:	2aff      	cmp	r2, #255	; 0xff
   d5c9e:	d8bd      	bhi.n	d5c1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5ca0:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5ca2:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d5ca6:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5ca8:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d5cac:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5cb0:	bf98      	it	ls
   d5cb2:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5cb4:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5cb8:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d5cbc:	bf98      	it	ls
   d5cbe:	b2d2      	uxtbls	r2, r2
   d5cc0:	f1bc 0f19 	cmp.w	ip, #25
   d5cc4:	bf9c      	itt	ls
   d5cc6:	3120      	addls	r1, #32
   d5cc8:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5cca:	4291      	cmp	r1, r2
   d5ccc:	d1a6      	bne.n	d5c1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5cce:	e0fb      	b.n	d5ec8 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5cd0:	0709      	lsls	r1, r1, #28
   d5cd2:	d4a3      	bmi.n	d5c1c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d5cd4:	b14d      	cbz	r5, d5cea <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d5cd6:	2b01      	cmp	r3, #1
   d5cd8:	f47f af5b 	bne.w	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5cdc:	f7ff fdfd 	bl	d58da <_ZN7FatFile11lfnChecksumEPh>
   d5ce0:	9b03      	ldr	r3, [sp, #12]
   d5ce2:	4283      	cmp	r3, r0
   d5ce4:	f47f af55 	bne.w	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5ce8:	e00f      	b.n	d5d0a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5cea:	220b      	movs	r2, #11
   d5cec:	9906      	ldr	r1, [sp, #24]
   d5cee:	9307      	str	r3, [sp, #28]
   d5cf0:	f003 fd3c 	bl	d976c <memcmp>
   d5cf4:	9b07      	ldr	r3, [sp, #28]
   d5cf6:	2800      	cmp	r0, #0
   d5cf8:	f47f af6e 	bne.w	d5bd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d5cfc:	f899 2000 	ldrb.w	r2, [r9]
   d5d00:	07d2      	lsls	r2, r2, #31
   d5d02:	d502      	bpl.n	d5d0a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d5d04:	2201      	movs	r2, #1
   d5d06:	9204      	str	r2, [sp, #16]
   d5d08:	e766      	b.n	d5bd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d5d0a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d5d0e:	f000 80d1 	beq.w	d5eb4 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d5d12:	e73e      	b.n	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d5d14:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d5d18:	f43f af3b 	beq.w	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5d1c:	f00b 0303 	and.w	r3, fp, #3
   d5d20:	3b01      	subs	r3, #1
   d5d22:	2b01      	cmp	r3, #1
   d5d24:	f63f af35 	bhi.w	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d5d28:	2c00      	cmp	r4, #0
   d5d2a:	bf08      	it	eq
   d5d2c:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5d2e:	42bc      	cmp	r4, r7
   d5d30:	d302      	bcc.n	d5d38 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d5d32:	9b04      	ldr	r3, [sp, #16]
   d5d34:	b9cb      	cbnz	r3, d5d6a <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d5d36:	e01f      	b.n	d5d78 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d5d38:	2100      	movs	r1, #0
   d5d3a:	4630      	mov	r0, r6
   d5d3c:	f000 fa11 	bl	d6162 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5d40:	b910      	cbnz	r0, d5d48 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d5d42:	7873      	ldrb	r3, [r6, #1]
   d5d44:	b15b      	cbz	r3, d5d5e <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d5d46:	e724      	b.n	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d5d48:	3401      	adds	r4, #1
   d5d4a:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5d4c:	e7ef      	b.n	d5d2e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d5d4e:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d5d50:	791b      	ldrb	r3, [r3, #4]
   d5d52:	2b01      	cmp	r3, #1
   d5d54:	d8ed      	bhi.n	d5d32 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d5d56:	3410      	adds	r4, #16
   d5d58:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d5d5a:	42a7      	cmp	r7, r4
   d5d5c:	d9e9      	bls.n	d5d32 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d5d5e:	4630      	mov	r0, r6
   d5d60:	f000 f8d2 	bl	d5f08 <_ZN7FatFile13addDirClusterEv>
   d5d64:	2800      	cmp	r0, #0
   d5d66:	d1f2      	bne.n	d5d4e <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d5d68:	e713      	b.n	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d5d6a:	4649      	mov	r1, r9
   d5d6c:	4630      	mov	r0, r6
   d5d6e:	f7ff feaf 	bl	d5ad0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d5d72:	2800      	cmp	r0, #0
   d5d74:	f43f af0d 	beq.w	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d5d78:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d5d7c:	4630      	mov	r0, r6
   d5d7e:	f000 fa0d 	bl	d619c <_ZN7FatFile7seekSetEm>
   d5d82:	2800      	cmp	r0, #0
   d5d84:	f43f af05 	beq.w	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d5d88:	1e7d      	subs	r5, r7, #1
   d5d8a:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5d8c:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5d8e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d5d92:	f04f 080f 	mov.w	r8, #15
   d5d96:	e041      	b.n	d5e1c <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5d98:	2100      	movs	r1, #0
   d5d9a:	4630      	mov	r0, r6
   d5d9c:	f000 f9e1 	bl	d6162 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5da0:	4607      	mov	r7, r0
   d5da2:	2800      	cmp	r0, #0
   d5da4:	f43f aef5 	beq.w	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5da8:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d5daa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5dae:	42ac      	cmp	r4, r5
   d5db0:	f043 0301 	orr.w	r3, r3, #1
   d5db4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5db8:	bf0c      	ite	eq
   d5dba:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d5dbe:	4622      	movne	r2, r4
   d5dc0:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d5dc2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d5dc6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d5dca:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5dce:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5dd0:	f7ff fd83 	bl	d58da <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5dd4:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5dd6:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5dd8:	f887 a01a 	strb.w	sl, [r7, #26]
   d5ddc:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5de0:	f002 021f 	and.w	r2, r2, #31
   d5de4:	230d      	movs	r3, #13
   d5de6:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5de8:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5dec:	435a      	muls	r2, r3
   d5dee:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5df0:	9902      	ldr	r1, [sp, #8]
   d5df2:	4291      	cmp	r1, r2
   d5df4:	d915      	bls.n	d5e22 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d5df6:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d5dfa:	2b04      	cmp	r3, #4
   d5dfc:	fa5f fc83 	uxtb.w	ip, r3
   d5e00:	f103 0001 	add.w	r0, r3, #1
   d5e04:	d813      	bhi.n	d5e2e <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5e06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d5e0a:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d5e0e:	280d      	cmp	r0, #13
   d5e10:	f102 0201 	add.w	r2, r2, #1
   d5e14:	4603      	mov	r3, r0
   d5e16:	d1eb      	bne.n	d5df0 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5e18:	3c01      	subs	r4, #1
   d5e1a:	b2e4      	uxtb	r4, r4
   d5e1c:	2c00      	cmp	r4, #0
   d5e1e:	d1bb      	bne.n	d5d98 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d5e20:	e00e      	b.n	d5e40 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5e22:	bf14      	ite	ne
   d5e24:	f04f 31ff 	movne.w	r1, #4294967295
   d5e28:	2100      	moveq	r1, #0
   d5e2a:	b289      	uxth	r1, r1
   d5e2c:	e7e5      	b.n	d5dfa <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5e2e:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d5e32:	bf94      	ite	ls
   d5e34:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5e38:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d5e3c:	8099      	strh	r1, [r3, #4]
   d5e3e:	e7e6      	b.n	d5e0e <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5e40:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d5e42:	4621      	mov	r1, r4
   d5e44:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5e46:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5e4a:	f000 f98a 	bl	d6162 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d5e4e:	4607      	mov	r7, r0
   d5e50:	2800      	cmp	r0, #0
   d5e52:	f43f ae9e 	beq.w	d5b92 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d5e56:	2220      	movs	r2, #32
   d5e58:	4621      	mov	r1, r4
   d5e5a:	f003 fca1 	bl	d97a0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d5e5e:	464b      	mov	r3, r9
   d5e60:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d5e64:	603a      	str	r2, [r7, #0]
   d5e66:	685a      	ldr	r2, [r3, #4]
   d5e68:	607a      	str	r2, [r7, #4]
   d5e6a:	891a      	ldrh	r2, [r3, #8]
   d5e6c:	813a      	strh	r2, [r7, #8]
   d5e6e:	7a9b      	ldrb	r3, [r3, #10]
   d5e70:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d5e72:	f899 3000 	ldrb.w	r3, [r9]
   d5e76:	f003 0318 	and.w	r3, r3, #24
   d5e7a:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5e7c:	4b18      	ldr	r3, [pc, #96]	; (d5ee0 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d5e7e:	681b      	ldr	r3, [r3, #0]
   d5e80:	b12b      	cbz	r3, d5e8e <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d5e82:	f107 010e 	add.w	r1, r7, #14
   d5e86:	f107 0010 	add.w	r0, r7, #16
   d5e8a:	4798      	blx	r3
   d5e8c:	e006      	b.n	d5e9c <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d5e8e:	2321      	movs	r3, #33	; 0x21
   d5e90:	743b      	strb	r3, [r7, #16]
   d5e92:	2328      	movs	r3, #40	; 0x28
   d5e94:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d5e96:	2308      	movs	r3, #8
   d5e98:	73bc      	strb	r4, [r7, #14]
   d5e9a:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5e9c:	8a3b      	ldrh	r3, [r7, #16]
   d5e9e:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5ea0:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d5ea2:	89fb      	ldrh	r3, [r7, #14]
   d5ea4:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d5ea6:	68b2      	ldr	r2, [r6, #8]
   d5ea8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5eac:	f043 0301 	orr.w	r3, r3, #1
   d5eb0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5eb4:	9500      	str	r5, [sp, #0]
   d5eb6:	465b      	mov	r3, fp
   d5eb8:	4652      	mov	r2, sl
   d5eba:	4631      	mov	r1, r6
   d5ebc:	9805      	ldr	r0, [sp, #20]
   d5ebe:	f000 f9b6 	bl	d622e <_ZN7FatFile15openCachedEntryEPS_tih>
   d5ec2:	e009      	b.n	d5ed8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5ec4:	2701      	movs	r7, #1
   d5ec6:	e677      	b.n	d5bb8 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5ec8:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5ecc:	f1be 0f0d 	cmp.w	lr, #13
   d5ed0:	f43f ae82 	beq.w	d5bd8 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5ed4:	46d4      	mov	ip, sl
   d5ed6:	e6c3      	b.n	d5c60 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5ed8:	b009      	add	sp, #36	; 0x24
   d5eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ede:	bf00      	nop
   d5ee0:	2003e3a0 	.word	0x2003e3a0

000d5ee4 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5ee4:	f001 b988 	b.w	d71f8 <HAL_Pin_Map>

000d5ee8 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5ee8:	f001 b986 	b.w	d71f8 <HAL_Pin_Map>

000d5eec <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5eec:	f001 b984 	b.w	d71f8 <HAL_Pin_Map>

000d5ef0 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5ef0:	f001 b982 	b.w	d71f8 <HAL_Pin_Map>

000d5ef4 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5ef4:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5ef6:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5ef8:	f043 0304 	orr.w	r3, r3, #4
   d5efc:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5efe:	f100 0210 	add.w	r2, r0, #16
   d5f02:	6880      	ldr	r0, [r0, #8]
   d5f04:	f000 bc26 	b.w	d6754 <_ZN9FatVolume15allocateClusterEmPm>

000d5f08 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5f0c:	7803      	ldrb	r3, [r0, #0]
   d5f0e:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5f12:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5f14:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5f18:	b10b      	cbz	r3, d5f1e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5f1a:	2600      	movs	r6, #0
   d5f1c:	e02e      	b.n	d5f7c <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d5f1e:	6942      	ldr	r2, [r0, #20]
   d5f20:	4b18      	ldr	r3, [pc, #96]	; (d5f84 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d5f22:	429a      	cmp	r2, r3
   d5f24:	d8f9      	bhi.n	d5f1a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d5f26:	f7ff ffe5 	bl	d5ef4 <_ZN7FatFile10addClusterEv>
   d5f2a:	4606      	mov	r6, r0
   d5f2c:	2800      	cmp	r0, #0
   d5f2e:	d0f4      	beq.n	d5f1a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5f30:	6921      	ldr	r1, [r4, #16]
   d5f32:	68a0      	ldr	r0, [r4, #8]
   d5f34:	f000 fba3 	bl	d667e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5f38:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5f3a:	68a0      	ldr	r0, [r4, #8]
   d5f3c:	2205      	movs	r2, #5
   d5f3e:	4639      	mov	r1, r7
   d5f40:	3024      	adds	r0, #36	; 0x24
   d5f42:	f000 fb78 	bl	d6636 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d5f46:	4680      	mov	r8, r0
   d5f48:	2800      	cmp	r0, #0
   d5f4a:	d0e6      	beq.n	d5f1a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5f4c:	4629      	mov	r1, r5
   d5f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5f52:	f003 fc25 	bl	d97a0 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5f56:	2501      	movs	r5, #1
   d5f58:	68a3      	ldr	r3, [r4, #8]
   d5f5a:	791a      	ldrb	r2, [r3, #4]
   d5f5c:	42aa      	cmp	r2, r5
   d5f5e:	d909      	bls.n	d5f74 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5f60:	4642      	mov	r2, r8
   d5f62:	19e9      	adds	r1, r5, r7
   d5f64:	6818      	ldr	r0, [r3, #0]
   d5f66:	f000 fee3 	bl	d6d30 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5f6a:	2800      	cmp	r0, #0
   d5f6c:	d0d5      	beq.n	d5f1a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5f6e:	3501      	adds	r5, #1
   d5f70:	b2ed      	uxtb	r5, r5
   d5f72:	e7f1      	b.n	d5f58 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5f74:	6963      	ldr	r3, [r4, #20]
   d5f76:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5f7a:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d5f7c:	4630      	mov	r0, r6
   d5f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f82:	bf00      	nop
   d5f84:	001ffdff 	.word	0x001ffdff

000d5f88 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5f88:	b510      	push	{r4, lr}
   d5f8a:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5f8c:	6880      	ldr	r0, [r0, #8]
   d5f8e:	460a      	mov	r2, r1
   d5f90:	3024      	adds	r0, #36	; 0x24
   d5f92:	69a1      	ldr	r1, [r4, #24]
   d5f94:	f000 fb4f 	bl	d6636 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5f98:	b120      	cbz	r0, d5fa4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5f9a:	88a3      	ldrh	r3, [r4, #4]
   d5f9c:	f003 030f 	and.w	r3, r3, #15
   d5fa0:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5fa4:	bd10      	pop	{r4, pc}

000d5fa6 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5fa6:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5fa8:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5faa:	4605      	mov	r5, r0
   d5fac:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5fae:	b984      	cbnz	r4, d5fd2 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5fb0:	2224      	movs	r2, #36	; 0x24
   d5fb2:	4621      	mov	r1, r4
   d5fb4:	f003 fbf4 	bl	d97a0 <memset>

  m_vol = vol;
   d5fb8:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5fba:	79f3      	ldrb	r3, [r6, #7]
   d5fbc:	2b10      	cmp	r3, #16
   d5fbe:	d003      	beq.n	d5fc8 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5fc0:	2b20      	cmp	r3, #32
   d5fc2:	d106      	bne.n	d5fd2 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5fc4:	2340      	movs	r3, #64	; 0x40
   d5fc6:	e000      	b.n	d5fca <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5fc8:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5fca:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5fcc:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5fce:	70a8      	strb	r0, [r5, #2]
   d5fd0:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5fd2:	2000      	movs	r0, #0
   d5fd4:	bd70      	pop	{r4, r5, r6, pc}

000d5fd6 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5fd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fda:	7803      	ldrb	r3, [r0, #0]
   d5fdc:	4604      	mov	r4, r0
   d5fde:	4689      	mov	r9, r1
   d5fe0:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5fe2:	b14b      	cbz	r3, d5ff8 <_ZN7FatFile4readEPvj+0x22>
   d5fe4:	7882      	ldrb	r2, [r0, #2]
   d5fe6:	07d1      	lsls	r1, r2, #31
   d5fe8:	d506      	bpl.n	d5ff8 <_ZN7FatFile4readEPvj+0x22>
   d5fea:	e00c      	b.n	d6006 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5fec:	465a      	mov	r2, fp
   d5fee:	6921      	ldr	r1, [r4, #16]
   d5ff0:	f000 fb4b 	bl	d668a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5ff4:	2800      	cmp	r0, #0
   d5ff6:	da3d      	bge.n	d6074 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5ff8:	7863      	ldrb	r3, [r4, #1]
   d5ffa:	f043 0302 	orr.w	r3, r3, #2
   d5ffe:	7063      	strb	r3, [r4, #1]
  return -1;
   d6000:	f04f 30ff 	mov.w	r0, #4294967295
   d6004:	e097      	b.n	d6136 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d6006:	071a      	lsls	r2, r3, #28
   d6008:	d503      	bpl.n	d6012 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d600a:	69e3      	ldr	r3, [r4, #28]
   d600c:	6962      	ldr	r2, [r4, #20]
   d600e:	1a9b      	subs	r3, r3, r2
   d6010:	e007      	b.n	d6022 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d6012:	069a      	lsls	r2, r3, #26
   d6014:	d508      	bpl.n	d6028 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d6016:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d6018:	891a      	ldrh	r2, [r3, #8]
   d601a:	6963      	ldr	r3, [r4, #20]
   d601c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d6020:	b29b      	uxth	r3, r3
   d6022:	429d      	cmp	r5, r3
   d6024:	bf28      	it	cs
   d6026:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d6028:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d602a:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d602e:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d6032:	2e00      	cmp	r6, #0
   d6034:	d035      	beq.n	d60a2 <_ZN7FatFile4readEPvj+0xcc>
   d6036:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6038:	6963      	ldr	r3, [r4, #20]
   d603a:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d603c:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d6040:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d6044:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d6048:	d002      	beq.n	d6050 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d604a:	6a03      	ldr	r3, [r0, #32]
   d604c:	4419      	add	r1, r3
   d604e:	e01d      	b.n	d608c <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d6050:	f890 8005 	ldrb.w	r8, [r0, #5]
   d6054:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d6058:	f1ba 0f00 	cmp.w	sl, #0
   d605c:	d110      	bne.n	d6080 <_ZN7FatFile4readEPvj+0xaa>
   d605e:	f1b8 0f00 	cmp.w	r8, #0
   d6062:	d10d      	bne.n	d6080 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d6064:	2b00      	cmp	r3, #0
   d6066:	d1c1      	bne.n	d5fec <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d6068:	0653      	lsls	r3, r2, #25
   d606a:	bf4c      	ite	mi
   d606c:	6a03      	ldrmi	r3, [r0, #32]
   d606e:	6a23      	ldrpl	r3, [r4, #32]
   d6070:	6123      	str	r3, [r4, #16]
   d6072:	e005      	b.n	d6080 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d6074:	d104      	bne.n	d6080 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d6076:	7823      	ldrb	r3, [r4, #0]
   d6078:	f013 0f70 	tst.w	r3, #112	; 0x70
   d607c:	d111      	bne.n	d60a2 <_ZN7FatFile4readEPvj+0xcc>
   d607e:	e7bb      	b.n	d5ff8 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6080:	6921      	ldr	r1, [r4, #16]
   d6082:	68a0      	ldr	r0, [r4, #8]
   d6084:	f000 fafb 	bl	d667e <_ZNK9FatVolume17clusterFirstBlockEm>
   d6088:	eb08 0100 	add.w	r1, r8, r0
   d608c:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d608e:	f1ba 0f00 	cmp.w	sl, #0
   d6092:	d135      	bne.n	d6100 <_ZN7FatFile4readEPvj+0x12a>
   d6094:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6098:	d332      	bcc.n	d6100 <_ZN7FatFile4readEPvj+0x12a>
   d609a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d609c:	4299      	cmp	r1, r3
   d609e:	d102      	bne.n	d60a6 <_ZN7FatFile4readEPvj+0xd0>
   d60a0:	e02e      	b.n	d6100 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d60a2:	1ba8      	subs	r0, r5, r6
   d60a4:	e047      	b.n	d6136 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d60a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d60aa:	d31b      	bcc.n	d60e4 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d60ac:	7822      	ldrb	r2, [r4, #0]
   d60ae:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d60b0:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d60b4:	d406      	bmi.n	d60c4 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d60b6:	7902      	ldrb	r2, [r0, #4]
   d60b8:	ebc8 0202 	rsb	r2, r8, r2
   d60bc:	b2d2      	uxtb	r2, r2
   d60be:	4592      	cmp	sl, r2
   d60c0:	bf28      	it	cs
   d60c2:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d60c4:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d60c6:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d60ca:	d207      	bcs.n	d60dc <_ZN7FatFile4readEPvj+0x106>
   d60cc:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d60ce:	4653      	mov	r3, sl
   d60d0:	464a      	mov	r2, r9
   d60d2:	6800      	ldr	r0, [r0, #0]
   d60d4:	f000 fdea 	bl	d6cac <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d60d8:	b960      	cbnz	r0, d60f4 <_ZN7FatFile4readEPvj+0x11e>
   d60da:	e78d      	b.n	d5ff8 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d60dc:	4453      	add	r3, sl
   d60de:	4299      	cmp	r1, r3
   d60e0:	d321      	bcc.n	d6126 <_ZN7FatFile4readEPvj+0x150>
   d60e2:	e7f3      	b.n	d60cc <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d60e4:	464a      	mov	r2, r9
   d60e6:	6800      	ldr	r0, [r0, #0]
   d60e8:	f000 fd98 	bl	d6c1c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d60ec:	2800      	cmp	r0, #0
   d60ee:	d083      	beq.n	d5ff8 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d60f0:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d60f4:	6963      	ldr	r3, [r4, #20]
   d60f6:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d60f8:	44b9      	add	r9, r7
    m_curPosition += n;
   d60fa:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d60fc:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d60fe:	e798      	b.n	d6032 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6100:	2200      	movs	r2, #0
   d6102:	3024      	adds	r0, #36	; 0x24
   d6104:	f000 fa97 	bl	d6636 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d6108:	2800      	cmp	r0, #0
   d610a:	f43f af75 	beq.w	d5ff8 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d610e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d6112:	42b7      	cmp	r7, r6
   d6114:	bf28      	it	cs
   d6116:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d6118:	eb00 010a 	add.w	r1, r0, sl
   d611c:	463a      	mov	r2, r7
   d611e:	4648      	mov	r0, r9
   d6120:	f003 fb33 	bl	d978a <memcpy>
   d6124:	e7e6      	b.n	d60f4 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6126:	3024      	adds	r0, #36	; 0x24
   d6128:	9101      	str	r1, [sp, #4]
   d612a:	f000 fa5d 	bl	d65e8 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d612e:	9901      	ldr	r1, [sp, #4]
   d6130:	2800      	cmp	r0, #0
   d6132:	d1cb      	bne.n	d60cc <_ZN7FatFile4readEPvj+0xf6>
   d6134:	e760      	b.n	d5ff8 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d6136:	b003      	add	sp, #12
   d6138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d613c <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d613c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d613e:	2201      	movs	r2, #1
   d6140:	f10d 0107 	add.w	r1, sp, #7
   d6144:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d6146:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d6148:	6905      	ldr	r5, [r0, #16]
   d614a:	f7ff ff44 	bl	d5fd6 <_ZN7FatFile4readEPvj>
   d614e:	2801      	cmp	r0, #1
   d6150:	bf05      	ittet	eq
   d6152:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d6156:	6166      	streq	r6, [r4, #20]
   d6158:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d615c:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d615e:	b002      	add	sp, #8
   d6160:	bd70      	pop	{r4, r5, r6, pc}

000d6162 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d6162:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d6164:	6943      	ldr	r3, [r0, #20]
   d6166:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d616a:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d616c:	b105      	cbz	r5, d6170 <_ZN7FatFile12readDirCacheEb+0xe>
   d616e:	b969      	cbnz	r1, d618c <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d6170:	2201      	movs	r2, #1
   d6172:	f10d 0107 	add.w	r1, sp, #7
   d6176:	4620      	mov	r0, r4
   d6178:	f7ff ff2d 	bl	d5fd6 <_ZN7FatFile4readEPvj>
   d617c:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d617e:	2801      	cmp	r0, #1
   d6180:	d001      	beq.n	d6186 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d6182:	2000      	movs	r0, #0
   d6184:	e008      	b.n	d6198 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d6186:	6963      	ldr	r3, [r4, #20]
   d6188:	331f      	adds	r3, #31
   d618a:	e000      	b.n	d618e <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d618c:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d618e:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d6190:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d6192:	3030      	adds	r0, #48	; 0x30
   d6194:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d6198:	b003      	add	sp, #12
   d619a:	bd30      	pop	{r4, r5, pc}

000d619c <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d61a0:	460e      	mov	r6, r1
   d61a2:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d61a4:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d61a6:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d61a8:	2900      	cmp	r1, #0
   d61aa:	d039      	beq.n	d6220 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d61ac:	6945      	ldr	r5, [r0, #20]
   d61ae:	42b5      	cmp	r5, r6
   d61b0:	d03a      	beq.n	d6228 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d61b2:	b90e      	cbnz	r6, d61b8 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d61b4:	6106      	str	r6, [r0, #16]
    goto done;
   d61b6:	e031      	b.n	d621c <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d61b8:	070b      	lsls	r3, r1, #28
   d61ba:	d503      	bpl.n	d61c4 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d61bc:	69c3      	ldr	r3, [r0, #28]
   d61be:	429e      	cmp	r6, r3
   d61c0:	d82e      	bhi.n	d6220 <_ZN7FatFile7seekSetEm+0x84>
   d61c2:	e007      	b.n	d61d4 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d61c4:	0688      	lsls	r0, r1, #26
   d61c6:	d505      	bpl.n	d61d4 <_ZN7FatFile7seekSetEm+0x38>
   d61c8:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d61ca:	891b      	ldrh	r3, [r3, #8]
   d61cc:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d61d0:	d826      	bhi.n	d6220 <_ZN7FatFile7seekSetEm+0x84>
   d61d2:	e023      	b.n	d621c <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d61d4:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d61d8:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d61dc:	1e6a      	subs	r2, r5, #1
   d61de:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d61e2:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d61e4:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d61e6:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d61e8:	429a      	cmp	r2, r3
   d61ea:	d800      	bhi.n	d61ee <_ZN7FatFile7seekSetEm+0x52>
   d61ec:	b94d      	cbnz	r5, d6202 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d61ee:	064a      	lsls	r2, r1, #25
   d61f0:	bf4c      	ite	mi
   d61f2:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d61f6:	6a22      	ldrpl	r2, [r4, #32]
   d61f8:	6122      	str	r2, [r4, #16]
   d61fa:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d61fc:	f104 0810 	add.w	r8, r4, #16
   d6200:	e00a      	b.n	d6218 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d6202:	1a9b      	subs	r3, r3, r2
   d6204:	e7f9      	b.n	d61fa <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d6206:	4642      	mov	r2, r8
   d6208:	6921      	ldr	r1, [r4, #16]
   d620a:	68a0      	ldr	r0, [r4, #8]
   d620c:	f000 fa3d 	bl	d668a <_ZN9FatVolume6fatGetEmPm>
   d6210:	2800      	cmp	r0, #0
   d6212:	f105 35ff 	add.w	r5, r5, #4294967295
   d6216:	dd03      	ble.n	d6220 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d6218:	2d00      	cmp	r5, #0
   d621a:	d1f4      	bne.n	d6206 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d621c:	6166      	str	r6, [r4, #20]
   d621e:	e003      	b.n	d6228 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d6220:	6127      	str	r7, [r4, #16]
  return false;
   d6222:	2000      	movs	r0, #0
   d6224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d6228:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d622a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d622e <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d622e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6230:	460f      	mov	r7, r1
   d6232:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d6234:	2100      	movs	r1, #0
   d6236:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d6238:	4604      	mov	r4, r0
   d623a:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d623c:	f003 fab0 	bl	d97a0 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d6240:	68b8      	ldr	r0, [r7, #8]
   d6242:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6244:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d6248:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d624a:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d624e:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d6250:	6a3b      	ldr	r3, [r7, #32]
   d6252:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d6254:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6256:	7acb      	ldrb	r3, [r1, #11]
   d6258:	071d      	lsls	r5, r3, #28
   d625a:	d44c      	bmi.n	d62f6 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d625c:	1883      	adds	r3, r0, r2
   d625e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d6262:	f003 0317 	and.w	r3, r3, #23
   d6266:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d6268:	7ac9      	ldrb	r1, [r1, #11]
   d626a:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d626e:	bf04      	itt	eq
   d6270:	f043 0308 	orreq.w	r3, r3, #8
   d6274:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d6276:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d627a:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d627c:	f006 0303 	and.w	r3, r6, #3
   d6280:	2b01      	cmp	r3, #1
   d6282:	d009      	beq.n	d6298 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d6284:	2b02      	cmp	r3, #2
   d6286:	d005      	beq.n	d6294 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d6288:	2b00      	cmp	r3, #0
   d628a:	d134      	bne.n	d62f6 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d628c:	0571      	lsls	r1, r6, #21
   d628e:	d432      	bmi.n	d62f6 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d6290:	2301      	movs	r3, #1
   d6292:	e002      	b.n	d629a <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d6294:	2303      	movs	r3, #3
   d6296:	e000      	b.n	d629a <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d6298:	2302      	movs	r3, #2
   d629a:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d629c:	78a1      	ldrb	r1, [r4, #2]
   d629e:	078b      	lsls	r3, r1, #30
   d62a0:	d503      	bpl.n	d62aa <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d62a2:	7823      	ldrb	r3, [r4, #0]
   d62a4:	f013 0f11 	tst.w	r3, #17
   d62a8:	d125      	bne.n	d62f6 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d62aa:	b24b      	sxtb	r3, r1
   d62ac:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d62b0:	f006 0108 	and.w	r1, r6, #8
   d62b4:	bf14      	ite	ne
   d62b6:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d62ba:	2700      	moveq	r7, #0
   d62bc:	4319      	orrs	r1, r3
   d62be:	4339      	orrs	r1, r7
   d62c0:	70a1      	strb	r1, [r4, #2]
   d62c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d62c4:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d62c6:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d62c8:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d62ca:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d62ce:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d62d2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d62d6:	d504      	bpl.n	d62e2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d62d8:	b181      	cbz	r1, d62fc <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d62da:	f000 fa76 	bl	d67ca <_ZN9FatVolume9freeChainEm>
   d62de:	b968      	cbnz	r0, d62fc <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d62e0:	e009      	b.n	d62f6 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d62e2:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d62e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d62e6:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d62e8:	0473      	lsls	r3, r6, #17
   d62ea:	d50c      	bpl.n	d6306 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d62ec:	69e1      	ldr	r1, [r4, #28]
   d62ee:	4620      	mov	r0, r4
   d62f0:	f7ff ff54 	bl	d619c <_ZN7FatFile7seekSetEm>
   d62f4:	b938      	cbnz	r0, d6306 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d62f6:	2000      	movs	r0, #0
   d62f8:	7020      	strb	r0, [r4, #0]
  return false;
   d62fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d62fc:	78a3      	ldrb	r3, [r4, #2]
   d62fe:	f043 0304 	orr.w	r3, r3, #4
   d6302:	70a3      	strb	r3, [r4, #2]
   d6304:	e7f0      	b.n	d62e8 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d6306:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d6308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d630c <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d630c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d630e:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d6310:	4604      	mov	r4, r0
  if (!isOpen()) {
   d6312:	b90b      	cbnz	r3, d6318 <_ZN7FatFile4syncEv+0xc>
    return true;
   d6314:	2001      	movs	r0, #1
   d6316:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d6318:	7883      	ldrb	r3, [r0, #2]
   d631a:	075a      	lsls	r2, r3, #29
   d631c:	d523      	bpl.n	d6366 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d631e:	2101      	movs	r1, #1
   d6320:	f7ff fe32 	bl	d5f88 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6324:	4605      	mov	r5, r0
   d6326:	b928      	cbnz	r0, d6334 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d6328:	7863      	ldrb	r3, [r4, #1]
   d632a:	f043 0301 	orr.w	r3, r3, #1
   d632e:	7063      	strb	r3, [r4, #1]
  return false;
   d6330:	2000      	movs	r0, #0
   d6332:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d6334:	7803      	ldrb	r3, [r0, #0]
   d6336:	2be5      	cmp	r3, #229	; 0xe5
   d6338:	d0f6      	beq.n	d6328 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d633a:	7823      	ldrb	r3, [r4, #0]
   d633c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d633e:	bf44      	itt	mi
   d6340:	69e3      	ldrmi	r3, [r4, #28]
   d6342:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d6344:	8c23      	ldrh	r3, [r4, #32]
   d6346:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d6348:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d634a:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d634c:	4b09      	ldr	r3, [pc, #36]	; (d6374 <_ZN7FatFile4syncEv+0x68>)
   d634e:	681b      	ldr	r3, [r3, #0]
   d6350:	b12b      	cbz	r3, d635e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d6352:	f100 0116 	add.w	r1, r0, #22
   d6356:	3018      	adds	r0, #24
   d6358:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d635a:	8b2b      	ldrh	r3, [r5, #24]
   d635c:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d635e:	78a3      	ldrb	r3, [r4, #2]
   d6360:	f023 0304 	bic.w	r3, r3, #4
   d6364:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d6366:	68a0      	ldr	r0, [r4, #8]
   d6368:	f7ff faaa 	bl	d58c0 <_ZN9FatVolume9cacheSyncEv>
   d636c:	2800      	cmp	r0, #0
   d636e:	d0db      	beq.n	d6328 <_ZN7FatFile4syncEv+0x1c>
   d6370:	e7d0      	b.n	d6314 <_ZN7FatFile4syncEv+0x8>
   d6372:	bf00      	nop
   d6374:	2003e3a0 	.word	0x2003e3a0

000d6378 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d6378:	b510      	push	{r4, lr}
   d637a:	4604      	mov	r4, r0
  bool rtn = sync();
   d637c:	f7ff ffc6 	bl	d630c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d6380:	2300      	movs	r3, #0
   d6382:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d6384:	bd10      	pop	{r4, pc}

000d6386 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6386:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6388:	b093      	sub	sp, #76	; 0x4c
   d638a:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d638c:	2300      	movs	r3, #0
   d638e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d6392:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d6396:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d6398:	9201      	str	r2, [sp, #4]
   d639a:	4606      	mov	r6, r0
   d639c:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d639e:	b10b      	cbz	r3, d63a4 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d63a0:	2000      	movs	r0, #0
   d63a2:	e03d      	b.n	d6420 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d63a4:	780b      	ldrb	r3, [r1, #0]
   d63a6:	f013 0f70 	tst.w	r3, #112	; 0x70
   d63aa:	d0f9      	beq.n	d63a0 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d63ac:	7813      	ldrb	r3, [r2, #0]
   d63ae:	2b2f      	cmp	r3, #47	; 0x2f
   d63b0:	d112      	bne.n	d63d8 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d63b2:	9b01      	ldr	r3, [sp, #4]
   d63b4:	781a      	ldrb	r2, [r3, #0]
   d63b6:	2a2f      	cmp	r2, #47	; 0x2f
   d63b8:	d102      	bne.n	d63c0 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d63ba:	3301      	adds	r3, #1
   d63bc:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d63be:	e7f8      	b.n	d63b2 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d63c0:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d63c2:	b91a      	cbnz	r2, d63cc <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d63c4:	4630      	mov	r0, r6
   d63c6:	f7ff fdee 	bl	d5fa6 <_ZN7FatFile8openRootEP9FatVolume>
   d63ca:	e029      	b.n	d6420 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d63cc:	a809      	add	r0, sp, #36	; 0x24
   d63ce:	f7ff fdea 	bl	d5fa6 <_ZN7FatFile8openRootEP9FatVolume>
   d63d2:	2800      	cmp	r0, #0
   d63d4:	d0e4      	beq.n	d63a0 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d63d6:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d63d8:	aa01      	add	r2, sp, #4
   d63da:	a903      	add	r1, sp, #12
   d63dc:	9801      	ldr	r0, [sp, #4]
   d63de:	f7ff fa8b 	bl	d58f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d63e2:	2800      	cmp	r0, #0
   d63e4:	d0dc      	beq.n	d63a0 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d63e6:	9b01      	ldr	r3, [sp, #4]
   d63e8:	781b      	ldrb	r3, [r3, #0]
   d63ea:	b19b      	cbz	r3, d6414 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d63ec:	2300      	movs	r3, #0
   d63ee:	aa03      	add	r2, sp, #12
   d63f0:	4621      	mov	r1, r4
   d63f2:	4630      	mov	r0, r6
   d63f4:	f7ff fbc2 	bl	d5b7c <_ZN7FatFile4openEPS_P7fname_ti>
   d63f8:	2800      	cmp	r0, #0
   d63fa:	d0d1      	beq.n	d63a0 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d63fc:	4635      	mov	r5, r6
   d63fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6400:	ac09      	add	r4, sp, #36	; 0x24
   d6402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6408:	682b      	ldr	r3, [r5, #0]
   d640a:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d640c:	4630      	mov	r0, r6
   d640e:	f7ff ffb3 	bl	d6378 <_ZN7FatFile5closeEv>
   d6412:	e7e0      	b.n	d63d6 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d6414:	463b      	mov	r3, r7
   d6416:	aa03      	add	r2, sp, #12
   d6418:	4621      	mov	r1, r4
   d641a:	4630      	mov	r0, r6
   d641c:	f7ff fbae 	bl	d5b7c <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d6420:	b013      	add	sp, #76	; 0x4c
   d6422:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6424 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6428:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d642a:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d642c:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d642e:	4604      	mov	r4, r0
   d6430:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6432:	d508      	bpl.n	d6446 <_ZN7FatFile5writeEPKvj+0x22>
   d6434:	7883      	ldrb	r3, [r0, #2]
   d6436:	079a      	lsls	r2, r3, #30
   d6438:	d505      	bpl.n	d6446 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d643a:	071b      	lsls	r3, r3, #28
   d643c:	d50b      	bpl.n	d6456 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d643e:	69e1      	ldr	r1, [r4, #28]
   d6440:	f7ff feac 	bl	d619c <_ZN7FatFile7seekSetEm>
   d6444:	b938      	cbnz	r0, d6456 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6446:	7863      	ldrb	r3, [r4, #1]
   d6448:	f043 0301 	orr.w	r3, r3, #1
   d644c:	7063      	strb	r3, [r4, #1]
  return -1;
   d644e:	f04f 30ff 	mov.w	r0, #4294967295
   d6452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d6456:	6963      	ldr	r3, [r4, #20]
   d6458:	43db      	mvns	r3, r3
   d645a:	4598      	cmp	r8, r3
   d645c:	d8f3      	bhi.n	d6446 <_ZN7FatFile5writeEPKvj+0x22>
   d645e:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6460:	f04f 0a00 	mov.w	sl, #0
   d6464:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d6466:	2e00      	cmp	r6, #0
   d6468:	f000 8081 	beq.w	d656e <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d646c:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d646e:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6470:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d6474:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6478:	d11c      	bne.n	d64b4 <_ZN7FatFile5writeEPKvj+0x90>
   d647a:	b9df      	cbnz	r7, d64b4 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d647c:	6921      	ldr	r1, [r4, #16]
   d647e:	b171      	cbz	r1, d649e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6480:	f104 0210 	add.w	r2, r4, #16
   d6484:	f000 f901 	bl	d668a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d6488:	2800      	cmp	r0, #0
   d648a:	dbdc      	blt.n	d6446 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d648c:	f040 808e 	bne.w	d65ac <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d6490:	4620      	mov	r0, r4
   d6492:	f7ff fd2f 	bl	d5ef4 <_ZN7FatFile10addClusterEv>
   d6496:	2800      	cmp	r0, #0
   d6498:	f040 8088 	bne.w	d65ac <_ZN7FatFile5writeEPKvj+0x188>
   d649c:	e7d3      	b.n	d6446 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d649e:	6a23      	ldr	r3, [r4, #32]
   d64a0:	b93b      	cbnz	r3, d64b2 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d64a2:	4620      	mov	r0, r4
   d64a4:	f7ff fd26 	bl	d5ef4 <_ZN7FatFile10addClusterEv>
   d64a8:	2800      	cmp	r0, #0
   d64aa:	d0cc      	beq.n	d6446 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d64ac:	6923      	ldr	r3, [r4, #16]
   d64ae:	6223      	str	r3, [r4, #32]
   d64b0:	e000      	b.n	d64b4 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d64b2:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d64b4:	6921      	ldr	r1, [r4, #16]
   d64b6:	68a0      	ldr	r0, [r4, #8]
   d64b8:	f000 f8e1 	bl	d667e <_ZNK9FatVolume17clusterFirstBlockEm>
   d64bc:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d64be:	b917      	cbnz	r7, d64c6 <_ZN7FatFile5writeEPKvj+0xa2>
   d64c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d64c4:	d221      	bcs.n	d650a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d64c6:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d64ca:	42b5      	cmp	r5, r6
   d64cc:	bf28      	it	cs
   d64ce:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d64d0:	b937      	cbnz	r7, d64e0 <_ZN7FatFile5writeEPKvj+0xbc>
   d64d2:	6963      	ldr	r3, [r4, #20]
   d64d4:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d64d6:	4293      	cmp	r3, r2
   d64d8:	bf34      	ite	cc
   d64da:	2201      	movcc	r2, #1
   d64dc:	2205      	movcs	r2, #5
   d64de:	e000      	b.n	d64e2 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d64e0:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d64e2:	68a0      	ldr	r0, [r4, #8]
   d64e4:	3024      	adds	r0, #36	; 0x24
   d64e6:	f000 f8a6 	bl	d6636 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d64ea:	2800      	cmp	r0, #0
   d64ec:	d0ab      	beq.n	d6446 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d64ee:	4438      	add	r0, r7
   d64f0:	462a      	mov	r2, r5
   d64f2:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d64f4:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d64f6:	f003 f948 	bl	d978a <memcpy>
      if (512 == (n + blockOffset)) {
   d64fa:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d64fe:	d130      	bne.n	d6562 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d6500:	68a0      	ldr	r0, [r4, #8]
   d6502:	3024      	adds	r0, #36	; 0x24
   d6504:	f000 f870 	bl	d65e8 <_ZN8FatCache4syncEv>
   d6508:	e017      	b.n	d653a <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d650a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d650e:	68a0      	ldr	r0, [r4, #8]
   d6510:	d315      	bcc.n	d653e <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d6512:	7902      	ldrb	r2, [r0, #4]
   d6514:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d6516:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d6518:	b2d2      	uxtb	r2, r2
   d651a:	4293      	cmp	r3, r2
   d651c:	bf28      	it	cs
   d651e:	4613      	movcs	r3, r2
   d6520:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6522:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d6524:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6528:	d302      	bcc.n	d6530 <_ZN7FatFile5writeEPKvj+0x10c>
   d652a:	441a      	add	r2, r3
   d652c:	4291      	cmp	r1, r2
   d652e:	d337      	bcc.n	d65a0 <_ZN7FatFile5writeEPKvj+0x17c>
   d6530:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d6532:	464a      	mov	r2, r9
   d6534:	6838      	ldr	r0, [r7, #0]
   d6536:	f000 fc6d 	bl	d6e14 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d653a:	b990      	cbnz	r0, d6562 <_ZN7FatFile5writeEPKvj+0x13e>
   d653c:	e783      	b.n	d6446 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d653e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6540:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6542:	bf02      	ittt	eq
   d6544:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6548:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d654c:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d654e:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6550:	464a      	mov	r2, r9
   d6552:	6818      	ldr	r0, [r3, #0]
   d6554:	f000 fbec 	bl	d6d30 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d6558:	2800      	cmp	r0, #0
   d655a:	f43f af74 	beq.w	d6446 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d655e:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d6562:	6963      	ldr	r3, [r4, #20]
   d6564:	442b      	add	r3, r5
   d6566:	6163      	str	r3, [r4, #20]
    src += n;
   d6568:	44a9      	add	r9, r5
    nToWrite -= n;
   d656a:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d656c:	e77a      	b.n	d6464 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d656e:	69e2      	ldr	r2, [r4, #28]
   d6570:	4293      	cmp	r3, r2
   d6572:	d901      	bls.n	d6578 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d6574:	61e3      	str	r3, [r4, #28]
   d6576:	e002      	b.n	d657e <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d6578:	4b0f      	ldr	r3, [pc, #60]	; (d65b8 <_ZN7FatFile5writeEPKvj+0x194>)
   d657a:	681b      	ldr	r3, [r3, #0]
   d657c:	b11b      	cbz	r3, d6586 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d657e:	78a3      	ldrb	r3, [r4, #2]
   d6580:	f043 0304 	orr.w	r3, r3, #4
   d6584:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d6586:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d658a:	2b00      	cmp	r3, #0
   d658c:	db02      	blt.n	d6594 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d658e:	4640      	mov	r0, r8
   d6590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d6594:	4620      	mov	r0, r4
   d6596:	f7ff feb9 	bl	d630c <_ZN7FatFile4syncEv>
   d659a:	2800      	cmp	r0, #0
   d659c:	d1f7      	bne.n	d658e <_ZN7FatFile5writeEPKvj+0x16a>
   d659e:	e752      	b.n	d6446 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d65a0:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d65a4:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d65a8:	62c2      	str	r2, [r0, #44]	; 0x2c
   d65aa:	e7c1      	b.n	d6530 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d65ac:	6921      	ldr	r1, [r4, #16]
   d65ae:	68a0      	ldr	r0, [r4, #8]
   d65b0:	f000 f865 	bl	d667e <_ZNK9FatVolume17clusterFirstBlockEm>
   d65b4:	4601      	mov	r1, r0
   d65b6:	e783      	b.n	d64c0 <_ZN7FatFile5writeEPKvj+0x9c>
   d65b8:	2003e3a0 	.word	0x2003e3a0

000d65bc <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d65bc:	f000 be1c 	b.w	d71f8 <HAL_Pin_Map>

000d65c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d65c0:	b570      	push	{r4, r5, r6, lr}
   d65c2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d65c4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d65c6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d65c8:	b149      	cbz	r1, d65de <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d65ca:	f003 f92b 	bl	d9824 <strlen>
   d65ce:	682b      	ldr	r3, [r5, #0]
   d65d0:	4602      	mov	r2, r0
   d65d2:	4621      	mov	r1, r4
   d65d4:	4628      	mov	r0, r5
   d65d6:	68db      	ldr	r3, [r3, #12]
    }
   d65d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d65dc:	4718      	bx	r3
    }
   d65de:	bd70      	pop	{r4, r5, r6, pc}

000d65e0 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d65e0:	f000 be0a 	b.w	d71f8 <HAL_Pin_Map>

000d65e4 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d65e4:	f000 be08 	b.w	d71f8 <HAL_Pin_Map>

000d65e8 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d65e8:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d65ea:	7803      	ldrb	r3, [r0, #0]
   d65ec:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d65ee:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d65f0:	d51e      	bpl.n	d6630 <_ZN8FatCache4syncEv+0x48>
   d65f2:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d65f4:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d65f6:	f100 060c 	add.w	r6, r0, #12
   d65fa:	4632      	mov	r2, r6
   d65fc:	6818      	ldr	r0, [r3, #0]
   d65fe:	f000 fb97 	bl	d6d30 <_ZN9SdSpiCard10writeBlockEmPKh>
   d6602:	4605      	mov	r5, r0
   d6604:	b908      	cbnz	r0, d660a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d6606:	2500      	movs	r5, #0
   d6608:	e013      	b.n	d6632 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d660a:	7823      	ldrb	r3, [r4, #0]
   d660c:	079b      	lsls	r3, r3, #30
   d660e:	d404      	bmi.n	d661a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d6610:	7823      	ldrb	r3, [r4, #0]
   d6612:	f023 0301 	bic.w	r3, r3, #1
   d6616:	7023      	strb	r3, [r4, #0]
   d6618:	e00b      	b.n	d6632 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d661a:	6863      	ldr	r3, [r4, #4]
   d661c:	68a0      	ldr	r0, [r4, #8]
   d661e:	6919      	ldr	r1, [r3, #16]
   d6620:	4632      	mov	r2, r6
   d6622:	4401      	add	r1, r0
   d6624:	6818      	ldr	r0, [r3, #0]
   d6626:	f000 fb83 	bl	d6d30 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d662a:	2800      	cmp	r0, #0
   d662c:	d1f0      	bne.n	d6610 <_ZN8FatCache4syncEv+0x28>
   d662e:	e7ea      	b.n	d6606 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d6630:	2501      	movs	r5, #1

fail:
  return false;
}
   d6632:	4628      	mov	r0, r5
   d6634:	bd70      	pop	{r4, r5, r6, pc}

000d6636 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6636:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6638:	6883      	ldr	r3, [r0, #8]
   d663a:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d663c:	4604      	mov	r4, r0
   d663e:	460e      	mov	r6, r1
   d6640:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d6642:	d014      	beq.n	d666e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d6644:	f7ff ffd0 	bl	d65e8 <_ZN8FatCache4syncEv>
   d6648:	b908      	cbnz	r0, d664e <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d664a:	2000      	movs	r0, #0
   d664c:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d664e:	076b      	lsls	r3, r5, #29
   d6650:	d503      	bpl.n	d665a <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d6652:	2300      	movs	r3, #0
   d6654:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d6656:	60a6      	str	r6, [r4, #8]
   d6658:	e009      	b.n	d666e <_ZN8FatCache4readEmh+0x38>
   d665a:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d665c:	f104 020c 	add.w	r2, r4, #12
   d6660:	4631      	mov	r1, r6
   d6662:	6818      	ldr	r0, [r3, #0]
   d6664:	f000 fada 	bl	d6c1c <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d6668:	2800      	cmp	r0, #0
   d666a:	d1f2      	bne.n	d6652 <_ZN8FatCache4readEmh+0x1c>
   d666c:	e7ed      	b.n	d664a <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d666e:	7823      	ldrb	r3, [r4, #0]
   d6670:	4620      	mov	r0, r4
   d6672:	f005 0503 	and.w	r5, r5, #3
   d6676:	431d      	orrs	r5, r3
   d6678:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d667c:	bd70      	pop	{r4, r5, r6, pc}

000d667e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d667e:	7983      	ldrb	r3, [r0, #6]
   d6680:	6940      	ldr	r0, [r0, #20]
   d6682:	3902      	subs	r1, #2
   d6684:	4099      	lsls	r1, r3
}
   d6686:	4408      	add	r0, r1
   d6688:	4770      	bx	lr

000d668a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d668a:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d668c:	b570      	push	{r4, r5, r6, lr}
   d668e:	4605      	mov	r5, r0
   d6690:	460c      	mov	r4, r1
   d6692:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6694:	d802      	bhi.n	d669c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d6696:	f04f 30ff 	mov.w	r0, #4294967295
   d669a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d669c:	69c3      	ldr	r3, [r0, #28]
   d669e:	4299      	cmp	r1, r3
   d66a0:	d8f9      	bhi.n	d6696 <_ZN9FatVolume6fatGetEmPm+0xc>
   d66a2:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d66a4:	2b20      	cmp	r3, #32
   d66a6:	d110      	bne.n	d66ca <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d66a8:	6981      	ldr	r1, [r0, #24]
   d66aa:	2202      	movs	r2, #2
   d66ac:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d66b0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d66b4:	f7ff ffbf 	bl	d6636 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d66b8:	2800      	cmp	r0, #0
   d66ba:	d0ec      	beq.n	d6696 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d66bc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d66c0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d66c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d66c8:	e00f      	b.n	d66ea <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d66ca:	2b10      	cmp	r3, #16
   d66cc:	d1e3      	bne.n	d6696 <_ZN9FatVolume6fatGetEmPm+0xc>
   d66ce:	6983      	ldr	r3, [r0, #24]
   d66d0:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d66d4:	2202      	movs	r2, #2
   d66d6:	4419      	add	r1, r3
   d66d8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d66dc:	f7ff ffab 	bl	d6636 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d66e0:	2800      	cmp	r0, #0
   d66e2:	d0d8      	beq.n	d6696 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d66e4:	b2e4      	uxtb	r4, r4
   d66e6:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d66ea:	69ea      	ldr	r2, [r5, #28]
   d66ec:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d66ee:	bf9a      	itte	ls
   d66f0:	6033      	strls	r3, [r6, #0]
  return 1;
   d66f2:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d66f4:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d66f6:	bd70      	pop	{r4, r5, r6, pc}

000d66f8 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d66f8:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d66fa:	b538      	push	{r3, r4, r5, lr}
   d66fc:	460c      	mov	r4, r1
   d66fe:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6700:	d801      	bhi.n	d6706 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d6702:	2000      	movs	r0, #0
   d6704:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6706:	69c3      	ldr	r3, [r0, #28]
   d6708:	4299      	cmp	r1, r3
   d670a:	d8fa      	bhi.n	d6702 <_ZN9FatVolume6fatPutEmm+0xa>
   d670c:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d670e:	2b20      	cmp	r3, #32
   d6710:	d10e      	bne.n	d6730 <_ZN9FatVolume6fatPutEmm+0x38>
   d6712:	6981      	ldr	r1, [r0, #24]
   d6714:	2203      	movs	r2, #3
   d6716:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d671a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d671e:	f7ff ff8a 	bl	d6636 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6722:	2800      	cmp	r0, #0
   d6724:	d0ed      	beq.n	d6702 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d6726:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d672a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d672e:	e00f      	b.n	d6750 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d6730:	2b10      	cmp	r3, #16
   d6732:	d1e6      	bne.n	d6702 <_ZN9FatVolume6fatPutEmm+0xa>
   d6734:	6983      	ldr	r3, [r0, #24]
   d6736:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d673a:	2203      	movs	r2, #3
   d673c:	4419      	add	r1, r3
   d673e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6742:	f7ff ff78 	bl	d6636 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6746:	2800      	cmp	r0, #0
   d6748:	d0db      	beq.n	d6702 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d674a:	b2e4      	uxtb	r4, r4
   d674c:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d6750:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d6752:	bd38      	pop	{r3, r4, r5, pc}

000d6754 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6754:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6758:	68c4      	ldr	r4, [r0, #12]
   d675a:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d675c:	4605      	mov	r5, r0
   d675e:	460e      	mov	r6, r1
   d6760:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6762:	d207      	bcs.n	d6774 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d6764:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d6766:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d6768:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d676a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d676c:	429c      	cmp	r4, r3
   d676e:	d903      	bls.n	d6778 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d6770:	b9cf      	cbnz	r7, d67a6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d6772:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d6774:	2701      	movs	r7, #1
   d6776:	e7f7      	b.n	d6768 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d6778:	42a6      	cmp	r6, r4
   d677a:	d014      	beq.n	d67a6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d677c:	aa01      	add	r2, sp, #4
   d677e:	4621      	mov	r1, r4
   d6780:	4628      	mov	r0, r5
   d6782:	f7ff ff82 	bl	d668a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6786:	2800      	cmp	r0, #0
   d6788:	db0d      	blt.n	d67a6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d678a:	d0ed      	beq.n	d6768 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d678c:	9b01      	ldr	r3, [sp, #4]
   d678e:	2b00      	cmp	r3, #0
   d6790:	d1ea      	bne.n	d6768 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d6792:	b107      	cbz	r7, d6796 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d6794:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d6796:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d679a:	4621      	mov	r1, r4
   d679c:	4628      	mov	r0, r5
   d679e:	f7ff ffab 	bl	d66f8 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d67a2:	4607      	mov	r7, r0
   d67a4:	b908      	cbnz	r0, d67aa <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d67a6:	2700      	movs	r7, #0
   d67a8:	e00b      	b.n	d67c2 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d67aa:	b916      	cbnz	r6, d67b2 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d67ac:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d67b0:	e007      	b.n	d67c2 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d67b2:	4622      	mov	r2, r4
   d67b4:	4631      	mov	r1, r6
   d67b6:	4628      	mov	r0, r5
   d67b8:	f7ff ff9e 	bl	d66f8 <_ZN9FatVolume6fatPutEmm>
   d67bc:	2800      	cmp	r0, #0
   d67be:	d1f5      	bne.n	d67ac <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d67c0:	e7f1      	b.n	d67a6 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d67c2:	4638      	mov	r0, r7
   d67c4:	b002      	add	sp, #8
   d67c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d67ca <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d67ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d67cc:	4605      	mov	r5, r0
   d67ce:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d67d0:	aa01      	add	r2, sp, #4
   d67d2:	4621      	mov	r1, r4
   d67d4:	4628      	mov	r0, r5
   d67d6:	f7ff ff58 	bl	d668a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d67da:	1e06      	subs	r6, r0, #0
   d67dc:	da01      	bge.n	d67e2 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d67de:	2000      	movs	r0, #0
   d67e0:	e00f      	b.n	d6802 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d67e2:	2200      	movs	r2, #0
   d67e4:	4621      	mov	r1, r4
   d67e6:	4628      	mov	r0, r5
   d67e8:	f7ff ff86 	bl	d66f8 <_ZN9FatVolume6fatPutEmm>
   d67ec:	2800      	cmp	r0, #0
   d67ee:	d0f6      	beq.n	d67de <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d67f0:	68eb      	ldr	r3, [r5, #12]
   d67f2:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d67f4:	bf9c      	itt	ls
   d67f6:	f104 34ff 	addls.w	r4, r4, #4294967295
   d67fa:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d67fc:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d67fe:	2e00      	cmp	r6, #0
   d6800:	d1e6      	bne.n	d67d0 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d6802:	b002      	add	sp, #8
   d6804:	bd70      	pop	{r4, r5, r6, pc}

000d6806 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6806:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d6808:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d680a:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d680c:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d680e:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6810:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6814:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d6816:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6818:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d681a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d681e:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6820:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6824:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6828:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d682c:	b1a1      	cbz	r1, d6858 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d682e:	2904      	cmp	r1, #4
   d6830:	d85d      	bhi.n	d68ee <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6832:	4611      	mov	r1, r2
   d6834:	3024      	adds	r0, #36	; 0x24
   d6836:	f7ff fefe 	bl	d6636 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d683a:	2800      	cmp	r0, #0
   d683c:	d057      	beq.n	d68ee <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d683e:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6842:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d6846:	065b      	lsls	r3, r3, #25
   d6848:	d151      	bne.n	d68ee <_ZN9FatVolume4initEh+0xe8>
   d684a:	351b      	adds	r5, #27
   d684c:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d6850:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d6854:	2d00      	cmp	r5, #0
   d6856:	d04a      	beq.n	d68ee <_ZN9FatVolume4initEh+0xe8>
   d6858:	2200      	movs	r2, #0
   d685a:	4629      	mov	r1, r5
   d685c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6860:	f7ff fee9 	bl	d6636 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d6864:	2800      	cmp	r0, #0
   d6866:	d042      	beq.n	d68ee <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d6868:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d686c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d6870:	d13d      	bne.n	d68ee <_ZN9FatVolume4initEh+0xe8>
   d6872:	7c03      	ldrb	r3, [r0, #16]
   d6874:	2b02      	cmp	r3, #2
   d6876:	d13a      	bne.n	d68ee <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d6878:	89c3      	ldrh	r3, [r0, #14]
   d687a:	2b00      	cmp	r3, #0
   d687c:	d037      	beq.n	d68ee <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d687e:	7b41      	ldrb	r1, [r0, #13]
   d6880:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d6882:	1e4b      	subs	r3, r1, #1
   d6884:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d6886:	2300      	movs	r3, #0
   d6888:	71a3      	strb	r3, [r4, #6]
   d688a:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d688c:	2301      	movs	r3, #1
   d688e:	428b      	cmp	r3, r1
   d6890:	d007      	beq.n	d68a2 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d6892:	3e01      	subs	r6, #1
   d6894:	d02b      	beq.n	d68ee <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6896:	79a2      	ldrb	r2, [r4, #6]
   d6898:	005b      	lsls	r3, r3, #1
   d689a:	3201      	adds	r2, #1
   d689c:	b2db      	uxtb	r3, r3
   d689e:	71a2      	strb	r2, [r4, #6]
   d68a0:	e7f5      	b.n	d688e <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d68a2:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d68a4:	b902      	cbnz	r2, d68a8 <_ZN9FatVolume4initEh+0xa2>
   d68a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d68a8:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d68aa:	89c6      	ldrh	r6, [r0, #14]
   d68ac:	442e      	add	r6, r5
   d68ae:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d68b0:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d68b4:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d68b6:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d68ba:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d68bc:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d68c0:	0152      	lsls	r2, r2, #5
   d68c2:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d68c6:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d68ca:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d68cc:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d68d0:	b903      	cbnz	r3, d68d4 <_ZN9FatVolume4initEh+0xce>
   d68d2:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d68d4:	1aad      	subs	r5, r5, r2
   d68d6:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d68d8:	79a5      	ldrb	r5, [r4, #6]
   d68da:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d68de:	1c6b      	adds	r3, r5, #1
   d68e0:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d68e2:	f640 73f4 	movw	r3, #4084	; 0xff4
   d68e6:	429d      	cmp	r5, r3
   d68e8:	d803      	bhi.n	d68f2 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d68ea:	230c      	movs	r3, #12
   d68ec:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d68ee:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d68f0:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d68f2:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d68f6:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d68f8:	bf85      	ittet	hi
   d68fa:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d68fc:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d68fe:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d6900:	2320      	movhi	r3, #32
   d6902:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d6904:	2001      	movs	r0, #1

fail:
  return false;
}
   d6906:	bd70      	pop	{r4, r5, r6, pc}

000d6908 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d6908:	f000 bc76 	b.w	d71f8 <HAL_Pin_Map>

000d690c <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d690c:	f000 bc74 	b.w	d71f8 <HAL_Pin_Map>

000d6910 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d6910:	f000 bc72 	b.w	d71f8 <HAL_Pin_Map>

000d6914 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6914:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6916:	4c0e      	ldr	r4, [pc, #56]	; (d6950 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6918:	460e      	mov	r6, r1
   d691a:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d691c:	f000 fd1c 	bl	d7358 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6920:	6823      	ldr	r3, [r4, #0]
   d6922:	1ac0      	subs	r0, r0, r3
   d6924:	4b0b      	ldr	r3, [pc, #44]	; (d6954 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d6926:	4298      	cmp	r0, r3
   d6928:	d908      	bls.n	d693c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d692a:	f000 fd1d 	bl	d7368 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d692e:	4b0a      	ldr	r3, [pc, #40]	; (d6958 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6930:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6932:	f000 ff0d 	bl	d7750 <spark_process>
   d6936:	f000 fd0f 	bl	d7358 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d693a:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d693c:	f000 fd14 	bl	d7368 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6940:	b280      	uxth	r0, r0
   d6942:	1b80      	subs	r0, r0, r6
}
   d6944:	42a8      	cmp	r0, r5
   d6946:	bfd4      	ite	le
   d6948:	2000      	movle	r0, #0
   d694a:	2001      	movgt	r0, #1
   d694c:	bd70      	pop	{r4, r5, r6, pc}
   d694e:	bf00      	nop
   d6950:	2003e3a4 	.word	0x2003e3a4
   d6954:	000186a0 	.word	0x000186a0
   d6958:	2003e708 	.word	0x2003e708

000d695c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d695c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d695e:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6960:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d6962:	b94d      	cbnz	r5, d6978 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6964:	6840      	ldr	r0, [r0, #4]
   d6966:	f000 fa7d 	bl	d6e64 <_ZN14SdSpiAltDriver8activateEv>
   d696a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d696c:	4629      	mov	r1, r5
   d696e:	7d18      	ldrb	r0, [r3, #20]
   d6970:	f002 fa15 	bl	d8d9e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6974:	2301      	movs	r3, #1
   d6976:	7223      	strb	r3, [r4, #8]
   d6978:	bd38      	pop	{r3, r4, r5, pc}

000d697a <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d697a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d697c:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d697e:	4604      	mov	r4, r0
  if (m_spiActive) {
   d6980:	b16b      	cbz	r3, d699e <_ZN9SdSpiCard7spiStopEv+0x24>
   d6982:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d6984:	2101      	movs	r1, #1
   d6986:	7d18      	ldrb	r0, [r3, #20]
   d6988:	f002 fa09 	bl	d8d9e <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d698c:	21ff      	movs	r1, #255	; 0xff
   d698e:	6860      	ldr	r0, [r4, #4]
   d6990:	f000 fa9a 	bl	d6ec8 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d6994:	6860      	ldr	r0, [r4, #4]
   d6996:	f000 fa79 	bl	d6e8c <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d699a:	2300      	movs	r3, #0
   d699c:	7223      	strb	r3, [r4, #8]
   d699e:	bd10      	pop	{r4, pc}

000d69a0 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d69a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69a2:	4604      	mov	r4, r0
   d69a4:	460d      	mov	r5, r1
   d69a6:	4616      	mov	r6, r2
   d69a8:	f000 fcde 	bl	d7368 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d69ac:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d69ae:	6860      	ldr	r0, [r4, #4]
   d69b0:	f000 fa6f 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d69b4:	28ff      	cmp	r0, #255	; 0xff
   d69b6:	7260      	strb	r0, [r4, #9]
   d69b8:	d109      	bne.n	d69ce <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d69ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d69be:	4639      	mov	r1, r7
   d69c0:	4620      	mov	r0, r4
   d69c2:	f7ff ffa7 	bl	d6914 <_ZN9SdSpiCard10isTimedOutEtt>
   d69c6:	2800      	cmp	r0, #0
   d69c8:	d0f1      	beq.n	d69ae <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d69ca:	2355      	movs	r3, #85	; 0x55
   d69cc:	e00b      	b.n	d69e6 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d69ce:	28fe      	cmp	r0, #254	; 0xfe
   d69d0:	d001      	beq.n	d69d6 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d69d2:	2350      	movs	r3, #80	; 0x50
   d69d4:	e007      	b.n	d69e6 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d69d6:	4632      	mov	r2, r6
   d69d8:	4629      	mov	r1, r5
   d69da:	6860      	ldr	r0, [r4, #4]
   d69dc:	f000 fa5e 	bl	d6e9c <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d69e0:	7260      	strb	r0, [r4, #9]
   d69e2:	b130      	cbz	r0, d69f2 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d69e4:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d69e6:	4620      	mov	r0, r4
   d69e8:	7023      	strb	r3, [r4, #0]
   d69ea:	f7ff ffc6 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d69ee:	2000      	movs	r0, #0
}
   d69f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d69f2:	6860      	ldr	r0, [r4, #4]
   d69f4:	f000 fa4d 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
   d69f8:	6860      	ldr	r0, [r4, #4]
   d69fa:	f000 fa4a 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
   d69fe:	2001      	movs	r0, #1
   d6a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a02 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6a02:	b570      	push	{r4, r5, r6, lr}
   d6a04:	4604      	mov	r4, r0
   d6a06:	460e      	mov	r6, r1
   d6a08:	f000 fcae 	bl	d7368 <HAL_Timer_Get_Milli_Seconds>
   d6a0c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6a0e:	4632      	mov	r2, r6
   d6a10:	4629      	mov	r1, r5
   d6a12:	4620      	mov	r0, r4
   d6a14:	f7ff ff7e 	bl	d6914 <_ZN9SdSpiCard10isTimedOutEtt>
   d6a18:	b930      	cbnz	r0, d6a28 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d6a1a:	6860      	ldr	r0, [r4, #4]
   d6a1c:	f000 fa39 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6a20:	28ff      	cmp	r0, #255	; 0xff
   d6a22:	d1f4      	bne.n	d6a0e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6a24:	2001      	movs	r0, #1
   d6a26:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d6a28:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d6a2a:	bd70      	pop	{r4, r5, r6, pc}

000d6a2c <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d6a2e:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6a30:	9201      	str	r2, [sp, #4]
   d6a32:	4604      	mov	r4, r0
   d6a34:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d6a36:	b90b      	cbnz	r3, d6a3c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6a38:	f7ff ff90 	bl	d695c <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6a3c:	b125      	cbz	r5, d6a48 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d6a3e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6a42:	4620      	mov	r0, r4
   d6a44:	f7ff ffdd 	bl	d6a02 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6a48:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6a4c:	6860      	ldr	r0, [r4, #4]
   d6a4e:	f000 fa3b 	bl	d6ec8 <_ZN14SdSpiAltDriver4sendEh>
   d6a52:	f10d 0607 	add.w	r6, sp, #7
   d6a56:	f10d 0703 	add.w	r7, sp, #3
   d6a5a:	f816 1901 	ldrb.w	r1, [r6], #-1
   d6a5e:	6860      	ldr	r0, [r4, #4]
   d6a60:	f000 fa32 	bl	d6ec8 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d6a64:	42be      	cmp	r6, r7
   d6a66:	d1f8      	bne.n	d6a5a <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d6a68:	2d00      	cmp	r5, #0
   d6a6a:	bf0c      	ite	eq
   d6a6c:	2195      	moveq	r1, #149	; 0x95
   d6a6e:	2187      	movne	r1, #135	; 0x87
   d6a70:	6860      	ldr	r0, [r4, #4]
   d6a72:	f000 fa29 	bl	d6ec8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6a76:	6860      	ldr	r0, [r4, #4]
   d6a78:	f000 fa0b 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
   d6a7c:	250b      	movs	r5, #11
   d6a7e:	6860      	ldr	r0, [r4, #4]
   d6a80:	f000 fa07 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d6a84:	0603      	lsls	r3, r0, #24
   d6a86:	7260      	strb	r0, [r4, #9]
   d6a88:	d503      	bpl.n	d6a92 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d6a8a:	3d01      	subs	r5, #1
   d6a8c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6a90:	d1f5      	bne.n	d6a7e <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d6a92:	b003      	add	sp, #12
   d6a94:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a96 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d6a96:	b570      	push	{r4, r5, r6, lr}
   d6a98:	4604      	mov	r4, r0
   d6a9a:	460d      	mov	r5, r1
   d6a9c:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d6a9e:	2137      	movs	r1, #55	; 0x37
   d6aa0:	2200      	movs	r2, #0
   d6aa2:	f7ff ffc3 	bl	d6a2c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d6aa6:	4632      	mov	r2, r6
   d6aa8:	4629      	mov	r1, r5
   d6aaa:	4620      	mov	r0, r4
  }
   d6aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d6ab0:	f7ff bfbc 	b.w	d6a2c <_ZN9SdSpiCard11cardCommandEhm>

000d6ab4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d6ab8:	2500      	movs	r5, #0
   d6aba:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d6abc:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d6abe:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6ac0:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6ac2:	4604      	mov	r4, r0
   d6ac4:	4690      	mov	r8, r2
   d6ac6:	461e      	mov	r6, r3
   d6ac8:	f000 fc4e 	bl	d7368 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d6acc:	4641      	mov	r1, r8
   d6ace:	4607      	mov	r7, r0
   d6ad0:	6860      	ldr	r0, [r4, #4]
   d6ad2:	f000 f9cb 	bl	d6e6c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d6ad6:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d6ad8:	4a4f      	ldr	r2, [pc, #316]	; (d6c18 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d6ada:	721d      	strb	r5, [r3, #8]
   d6adc:	f04f 0801 	mov.w	r8, #1
   d6ae0:	60da      	str	r2, [r3, #12]
   d6ae2:	745d      	strb	r5, [r3, #17]
   d6ae4:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d6ae8:	4620      	mov	r0, r4
   d6aea:	f7ff ff37 	bl	d695c <_ZN9SdSpiCard8spiStartEv>
   d6aee:	6863      	ldr	r3, [r4, #4]
   d6af0:	4641      	mov	r1, r8
   d6af2:	7d18      	ldrb	r0, [r3, #20]
   d6af4:	f002 f953 	bl	d8d9e <digitalWrite>
   d6af8:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6afa:	21ff      	movs	r1, #255	; 0xff
   d6afc:	6860      	ldr	r0, [r4, #4]
   d6afe:	3d01      	subs	r5, #1
   d6b00:	f000 f9e2 	bl	d6ec8 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d6b04:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6b08:	d1f7      	bne.n	d6afa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d6b0a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6b0c:	4629      	mov	r1, r5
   d6b0e:	7d18      	ldrb	r0, [r3, #20]
   d6b10:	f002 f945 	bl	d8d9e <digitalWrite>
   d6b14:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d6b16:	2200      	movs	r2, #0
   d6b18:	4611      	mov	r1, r2
   d6b1a:	4620      	mov	r0, r4
   d6b1c:	f7ff ff86 	bl	d6a2c <_ZN9SdSpiCard11cardCommandEhm>
   d6b20:	2801      	cmp	r0, #1
   d6b22:	4680      	mov	r8, r0
   d6b24:	d012      	beq.n	d6b4c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d6b26:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d6b28:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6b2c:	d101      	bne.n	d6b32 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6b2e:	2320      	movs	r3, #32
   d6b30:	e057      	b.n	d6be2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6b32:	21fd      	movs	r1, #253	; 0xfd
   d6b34:	6860      	ldr	r0, [r4, #4]
   d6b36:	f000 f9c7 	bl	d6ec8 <_ZN14SdSpiAltDriver4sendEh>
   d6b3a:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6b3e:	6860      	ldr	r0, [r4, #4]
   d6b40:	f000 f9a7 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6b44:	f1b8 0801 	subs.w	r8, r8, #1
   d6b48:	d1f9      	bne.n	d6b3e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d6b4a:	e7e4      	b.n	d6b16 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6b4c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6b50:	2108      	movs	r1, #8
   d6b52:	4620      	mov	r0, r4
   d6b54:	f7ff ff6a 	bl	d6a2c <_ZN9SdSpiCard11cardCommandEhm>
   d6b58:	2805      	cmp	r0, #5
   d6b5a:	d102      	bne.n	d6b62 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6b5c:	f884 800a 	strb.w	r8, [r4, #10]
   d6b60:	e00f      	b.n	d6b82 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d6b62:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6b64:	6860      	ldr	r0, [r4, #4]
   d6b66:	f000 f994 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
   d6b6a:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6b6c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d6b70:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6b72:	d1f7      	bne.n	d6b64 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d6b74:	28aa      	cmp	r0, #170	; 0xaa
   d6b76:	d102      	bne.n	d6b7e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6b78:	2302      	movs	r3, #2
   d6b7a:	72a3      	strb	r3, [r4, #10]
   d6b7c:	e001      	b.n	d6b82 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6b7e:	2325      	movs	r3, #37	; 0x25
   d6b80:	e02f      	b.n	d6be2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6b82:	7aa3      	ldrb	r3, [r4, #10]
   d6b84:	2b02      	cmp	r3, #2
   d6b86:	bf0c      	ite	eq
   d6b88:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d6b8c:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6b8e:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d6b90:	462a      	mov	r2, r5
   d6b92:	2129      	movs	r1, #41	; 0x29
   d6b94:	4620      	mov	r0, r4
   d6b96:	f7ff ff7e 	bl	d6a96 <_ZN9SdSpiCard8cardAcmdEhm>
   d6b9a:	4602      	mov	r2, r0
   d6b9c:	b148      	cbz	r0, d6bb2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6b9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d6ba2:	4639      	mov	r1, r7
   d6ba4:	4620      	mov	r0, r4
   d6ba6:	f7ff feb5 	bl	d6914 <_ZN9SdSpiCard10isTimedOutEtt>
   d6baa:	2800      	cmp	r0, #0
   d6bac:	d0f0      	beq.n	d6b90 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d6bae:	2343      	movs	r3, #67	; 0x43
   d6bb0:	e017      	b.n	d6be2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d6bb2:	7aa3      	ldrb	r3, [r4, #10]
   d6bb4:	2b02      	cmp	r3, #2
   d6bb6:	d00e      	beq.n	d6bd6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d6bb8:	4620      	mov	r0, r4
   d6bba:	f7ff fede 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d6bbe:	6863      	ldr	r3, [r4, #4]
   d6bc0:	68b0      	ldr	r0, [r6, #8]
   d6bc2:	7934      	ldrb	r4, [r6, #4]
   d6bc4:	7b31      	ldrb	r1, [r6, #12]
   d6bc6:	7b72      	ldrb	r2, [r6, #13]
   d6bc8:	745a      	strb	r2, [r3, #17]
   d6bca:	60d8      	str	r0, [r3, #12]
   d6bcc:	721c      	strb	r4, [r3, #8]
   d6bce:	7419      	strb	r1, [r3, #16]
  return true;
   d6bd0:	2001      	movs	r0, #1
   d6bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d6bd6:	213a      	movs	r1, #58	; 0x3a
   d6bd8:	4620      	mov	r0, r4
   d6bda:	f7ff ff27 	bl	d6a2c <_ZN9SdSpiCard11cardCommandEhm>
   d6bde:	b138      	cbz	r0, d6bf0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d6be0:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d6be2:	4620      	mov	r0, r4
   d6be4:	7023      	strb	r3, [r4, #0]
   d6be6:	f7ff fec8 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6bea:	2000      	movs	r0, #0
}
   d6bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6bf0:	6860      	ldr	r0, [r4, #4]
   d6bf2:	f000 f94e 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d6bf6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d6bfa:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6bfc:	bf04      	itt	eq
   d6bfe:	2303      	moveq	r3, #3
   d6c00:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6c02:	6860      	ldr	r0, [r4, #4]
   d6c04:	f000 f945 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
   d6c08:	6860      	ldr	r0, [r4, #4]
   d6c0a:	f000 f942 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
   d6c0e:	6860      	ldr	r0, [r4, #4]
   d6c10:	f000 f93f 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
   d6c14:	e7d0      	b.n	d6bb8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d6c16:	bf00      	nop
   d6c18:	0003d090 	.word	0x0003d090

000d6c1c <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6c1c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6c1e:	7a83      	ldrb	r3, [r0, #10]
   d6c20:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6c22:	bf18      	it	ne
   d6c24:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6c26:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6c28:	460a      	mov	r2, r1
   d6c2a:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6c2c:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6c2e:	f7ff fefd 	bl	d6a2c <_ZN9SdSpiCard11cardCommandEhm>
   d6c32:	b110      	cbz	r0, d6c3a <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6c34:	2330      	movs	r3, #48	; 0x30
   d6c36:	7023      	strb	r3, [r4, #0]
   d6c38:	e00b      	b.n	d6c52 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d6c3a:	4629      	mov	r1, r5
   d6c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6c40:	4620      	mov	r0, r4
   d6c42:	f7ff fead 	bl	d69a0 <_ZN9SdSpiCard8readDataEPhj>
   d6c46:	4605      	mov	r5, r0
   d6c48:	b118      	cbz	r0, d6c52 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d6c4a:	4620      	mov	r0, r4
   d6c4c:	f7ff fe95 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6c50:	e003      	b.n	d6c5a <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d6c52:	4620      	mov	r0, r4
   d6c54:	f7ff fe91 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6c58:	2500      	movs	r5, #0
}
   d6c5a:	4628      	mov	r0, r5
   d6c5c:	bd38      	pop	{r3, r4, r5, pc}

000d6c5e <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6c5e:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d6c60:	7a83      	ldrb	r3, [r0, #10]
   d6c62:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6c64:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6c66:	bf18      	it	ne
   d6c68:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6c6a:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6c6c:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6c6e:	f7ff fedd 	bl	d6a2c <_ZN9SdSpiCard11cardCommandEhm>
   d6c72:	b130      	cbz	r0, d6c82 <_ZN9SdSpiCard9readStartEm+0x24>
   d6c74:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d6c76:	4620      	mov	r0, r4
   d6c78:	7023      	strb	r3, [r4, #0]
   d6c7a:	f7ff fe7e 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6c7e:	2000      	movs	r0, #0
   d6c80:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d6c82:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6c84:	bd10      	pop	{r4, pc}

000d6c86 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6c86:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6c88:	2200      	movs	r2, #0
   d6c8a:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6c8c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d6c8e:	f7ff fecd 	bl	d6a2c <_ZN9SdSpiCard11cardCommandEhm>
   d6c92:	b130      	cbz	r0, d6ca2 <_ZN9SdSpiCard8readStopEv+0x1c>
   d6c94:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d6c96:	4620      	mov	r0, r4
   d6c98:	7023      	strb	r3, [r4, #0]
   d6c9a:	f7ff fe6e 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6c9e:	2000      	movs	r0, #0
   d6ca0:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d6ca2:	4620      	mov	r0, r4
   d6ca4:	f7ff fe69 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6ca8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6caa:	bd10      	pop	{r4, pc}

000d6cac <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cae:	4605      	mov	r5, r0
   d6cb0:	4616      	mov	r6, r2
   d6cb2:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6cb4:	f7ff ffd3 	bl	d6c5e <_ZN9SdSpiCard9readStartEm>
   d6cb8:	b198      	cbz	r0, d6ce2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d6cba:	2400      	movs	r4, #0
   d6cbc:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d6cbe:	429f      	cmp	r7, r3
   d6cc0:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d6cc4:	d908      	bls.n	d6cd8 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d6cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6cca:	4628      	mov	r0, r5
   d6ccc:	f7ff fe68 	bl	d69a0 <_ZN9SdSpiCard8readDataEPhj>
   d6cd0:	3401      	adds	r4, #1
   d6cd2:	2800      	cmp	r0, #0
   d6cd4:	d1f2      	bne.n	d6cbc <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d6cd6:	e004      	b.n	d6ce2 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6cd8:	4628      	mov	r0, r5
}
   d6cda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d6cde:	f7ff bfd2 	b.w	d6c86 <_ZN9SdSpiCard8readStopEv>
}
   d6ce2:	2000      	movs	r0, #0
   d6ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ce6 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6ce6:	b538      	push	{r3, r4, r5, lr}
   d6ce8:	4604      	mov	r4, r0
   d6cea:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6cec:	6840      	ldr	r0, [r0, #4]
   d6cee:	f000 f8eb 	bl	d6ec8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d6cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6cf6:	4629      	mov	r1, r5
   d6cf8:	6860      	ldr	r0, [r4, #4]
   d6cfa:	f000 f8e9 	bl	d6ed0 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6cfe:	21ff      	movs	r1, #255	; 0xff
   d6d00:	6860      	ldr	r0, [r4, #4]
   d6d02:	f000 f8e1 	bl	d6ec8 <_ZN14SdSpiAltDriver4sendEh>
   d6d06:	21ff      	movs	r1, #255	; 0xff
   d6d08:	6860      	ldr	r0, [r4, #4]
   d6d0a:	f000 f8dd 	bl	d6ec8 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6d0e:	6860      	ldr	r0, [r4, #4]
   d6d10:	f000 f8bf 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6d14:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6d16:	f000 001f 	and.w	r0, r0, #31
   d6d1a:	2805      	cmp	r0, #5
   d6d1c:	d006      	beq.n	d6d2c <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6d1e:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6d20:	4620      	mov	r0, r4
   d6d22:	7023      	strb	r3, [r4, #0]
   d6d24:	f7ff fe29 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6d28:	2000      	movs	r0, #0
   d6d2a:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6d2c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6d2e:	bd38      	pop	{r3, r4, r5, pc}

000d6d30 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6d30:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6d32:	7a83      	ldrb	r3, [r0, #10]
   d6d34:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6d36:	bf18      	it	ne
   d6d38:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6d3a:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6d3c:	460a      	mov	r2, r1
   d6d3e:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6d40:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6d42:	f7ff fe73 	bl	d6a2c <_ZN9SdSpiCard11cardCommandEhm>
   d6d46:	4606      	mov	r6, r0
   d6d48:	b108      	cbz	r0, d6d4e <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d6d4a:	2332      	movs	r3, #50	; 0x32
   d6d4c:	e01d      	b.n	d6d8a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d6d4e:	462a      	mov	r2, r5
   d6d50:	21fe      	movs	r1, #254	; 0xfe
   d6d52:	4620      	mov	r0, r4
   d6d54:	f7ff ffc7 	bl	d6ce6 <_ZN9SdSpiCard9writeDataEhPKh>
   d6d58:	b1c0      	cbz	r0, d6d8c <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6d5a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6d5e:	4620      	mov	r0, r4
   d6d60:	f7ff fe4f 	bl	d6a02 <_ZN9SdSpiCard11waitNotBusyEt>
   d6d64:	4605      	mov	r5, r0
   d6d66:	b908      	cbnz	r0, d6d6c <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d6d68:	235a      	movs	r3, #90	; 0x5a
   d6d6a:	e00e      	b.n	d6d8a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6d6c:	4632      	mov	r2, r6
   d6d6e:	210d      	movs	r1, #13
   d6d70:	4620      	mov	r0, r4
   d6d72:	f7ff fe5b 	bl	d6a2c <_ZN9SdSpiCard11cardCommandEhm>
   d6d76:	b938      	cbnz	r0, d6d88 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6d78:	6860      	ldr	r0, [r4, #4]
   d6d7a:	f000 f88a 	bl	d6e92 <_ZN14SdSpiAltDriver7receiveEv>
   d6d7e:	b918      	cbnz	r0, d6d88 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d6d80:	4620      	mov	r0, r4
   d6d82:	f7ff fdfa 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6d86:	e005      	b.n	d6d94 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6d88:	2329      	movs	r3, #41	; 0x29
   d6d8a:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d6d8c:	4620      	mov	r0, r4
   d6d8e:	f7ff fdf4 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6d92:	2500      	movs	r5, #0
}
   d6d94:	4628      	mov	r0, r5
   d6d96:	bd70      	pop	{r4, r5, r6, pc}

000d6d98 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6d98:	b538      	push	{r3, r4, r5, lr}
   d6d9a:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6d9c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6da0:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6da2:	f7ff fe2e 	bl	d6a02 <_ZN9SdSpiCard11waitNotBusyEt>
   d6da6:	b910      	cbnz	r0, d6dae <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d6da8:	235b      	movs	r3, #91	; 0x5b
   d6daa:	7023      	strb	r3, [r4, #0]
   d6dac:	e005      	b.n	d6dba <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6dae:	462a      	mov	r2, r5
   d6db0:	21fc      	movs	r1, #252	; 0xfc
   d6db2:	4620      	mov	r0, r4
   d6db4:	f7ff ff97 	bl	d6ce6 <_ZN9SdSpiCard9writeDataEhPKh>
   d6db8:	b918      	cbnz	r0, d6dc2 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6dba:	4620      	mov	r0, r4
   d6dbc:	f7ff fddd 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6dc0:	2000      	movs	r0, #0
}
   d6dc2:	bd38      	pop	{r3, r4, r5, pc}

000d6dc4 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6dc4:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6dc6:	7a83      	ldrb	r3, [r0, #10]
   d6dc8:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6dca:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6dcc:	bf18      	it	ne
   d6dce:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6dd0:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6dd2:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6dd4:	f7ff fe2a 	bl	d6a2c <_ZN9SdSpiCard11cardCommandEhm>
   d6dd8:	b130      	cbz	r0, d6de8 <_ZN9SdSpiCard10writeStartEm+0x24>
   d6dda:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6ddc:	4620      	mov	r0, r4
   d6dde:	7023      	strb	r3, [r4, #0]
   d6de0:	f7ff fdcb 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6de4:	2000      	movs	r0, #0
   d6de6:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6de8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6dea:	bd10      	pop	{r4, pc}

000d6dec <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6dec:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6dee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6df2:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6df4:	f7ff fe05 	bl	d6a02 <_ZN9SdSpiCard11waitNotBusyEt>
   d6df8:	4605      	mov	r5, r0
   d6dfa:	b120      	cbz	r0, d6e06 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6dfc:	21fd      	movs	r1, #253	; 0xfd
   d6dfe:	6860      	ldr	r0, [r4, #4]
   d6e00:	f000 f862 	bl	d6ec8 <_ZN14SdSpiAltDriver4sendEh>
   d6e04:	e001      	b.n	d6e0a <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6e06:	2356      	movs	r3, #86	; 0x56
   d6e08:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d6e0a:	4620      	mov	r0, r4
   d6e0c:	f7ff fdb5 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6e10:	4628      	mov	r0, r5
   d6e12:	bd38      	pop	{r3, r4, r5, pc}

000d6e14 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e16:	4605      	mov	r5, r0
   d6e18:	4616      	mov	r6, r2
   d6e1a:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6e1c:	f7ff ffd2 	bl	d6dc4 <_ZN9SdSpiCard10writeStartEm>
   d6e20:	b170      	cbz	r0, d6e40 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d6e22:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6e24:	42bc      	cmp	r4, r7
   d6e26:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6e2a:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6e2c:	d004      	beq.n	d6e38 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6e2e:	f7ff ffb3 	bl	d6d98 <_ZN9SdSpiCard9writeDataEPKh>
   d6e32:	b128      	cbz	r0, d6e40 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6e34:	3401      	adds	r4, #1
   d6e36:	e7f5      	b.n	d6e24 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6e38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6e3c:	f7ff bfd6 	b.w	d6dec <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6e40:	4628      	mov	r0, r5
   d6e42:	f7ff fd9a 	bl	d697a <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6e46:	2000      	movs	r0, #0
   d6e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e4a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6e4a:	f000 b9d5 	b.w	d71f8 <HAL_Pin_Map>

000d6e4e <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6e4e:	f000 b9d3 	b.w	d71f8 <HAL_Pin_Map>

000d6e52 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6e52:	f000 b9d1 	b.w	d71f8 <HAL_Pin_Map>
	...

000d6e58 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6e58:	4b01      	ldr	r3, [pc, #4]	; (d6e60 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d6e5a:	2201      	movs	r2, #1
   d6e5c:	701a      	strb	r2, [r3, #0]
   d6e5e:	4770      	bx	lr
   d6e60:	2003e3a8 	.word	0x2003e3a8

000d6e64 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6e64:	1d01      	adds	r1, r0, #4
   d6e66:	6800      	ldr	r0, [r0, #0]
   d6e68:	f000 bd52 	b.w	d7910 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6e6c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d6e6c:	b510      	push	{r4, lr}
   d6e6e:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6e70:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d6e72:	6800      	ldr	r0, [r0, #0]
   d6e74:	f000 fd22 	bl	d78bc <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d6e78:	7d20      	ldrb	r0, [r4, #20]
   d6e7a:	2101      	movs	r1, #1
   d6e7c:	f001 ff7e 	bl	d8d7c <pinMode>
  digitalWrite(m_csPin, HIGH);
   d6e80:	7d20      	ldrb	r0, [r4, #20]
   d6e82:	2101      	movs	r1, #1
}
   d6e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d6e88:	f001 bf89 	b.w	d8d9e <digitalWrite>

000d6e8c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6e8c:	6800      	ldr	r0, [r0, #0]
   d6e8e:	f000 bd26 	b.w	d78de <_ZN8SPIClass14endTransactionEv>

000d6e92 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d6e92:	21ff      	movs	r1, #255	; 0xff
   d6e94:	6800      	ldr	r0, [r0, #0]
   d6e96:	f000 bdab 	b.w	d79f0 <_ZN8SPIClass8transferEh>
	...

000d6e9c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d6e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6e9e:	4b08      	ldr	r3, [pc, #32]	; (d6ec0 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6ea0:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6ea2:	2500      	movs	r5, #0
   d6ea4:	4c07      	ldr	r4, [pc, #28]	; (d6ec4 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6ea6:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6ea8:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6eaa:	4613      	mov	r3, r2
   d6eac:	460a      	mov	r2, r1
   d6eae:	4629      	mov	r1, r5
   d6eb0:	f000 fda4 	bl	d79fc <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6eb4:	7823      	ldrb	r3, [r4, #0]
   d6eb6:	2b00      	cmp	r3, #0
   d6eb8:	d0fc      	beq.n	d6eb4 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d6eba:	2000      	movs	r0, #0
   d6ebc:	b003      	add	sp, #12
   d6ebe:	bd30      	pop	{r4, r5, pc}
   d6ec0:	000d6e59 	.word	0x000d6e59
   d6ec4:	2003e3a8 	.word	0x2003e3a8

000d6ec8 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6ec8:	6800      	ldr	r0, [r0, #0]
   d6eca:	f000 bd91 	b.w	d79f0 <_ZN8SPIClass8transferEh>
	...

000d6ed0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6ed2:	4b07      	ldr	r3, [pc, #28]	; (d6ef0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6ed4:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6ed6:	2500      	movs	r5, #0
   d6ed8:	4c06      	ldr	r4, [pc, #24]	; (d6ef4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6eda:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6edc:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6ede:	4613      	mov	r3, r2
   d6ee0:	462a      	mov	r2, r5
   d6ee2:	f000 fd8b 	bl	d79fc <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d6ee6:	7823      	ldrb	r3, [r4, #0]
   d6ee8:	2b00      	cmp	r3, #0
   d6eea:	d0fc      	beq.n	d6ee6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6eec:	b003      	add	sp, #12
   d6eee:	bd30      	pop	{r4, r5, pc}
   d6ef0:	000d6e59 	.word	0x000d6e59
   d6ef4:	2003e3a8 	.word	0x2003e3a8

000d6ef8 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6ef8:	f000 b97e 	b.w	d71f8 <HAL_Pin_Map>

000d6efc <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d6efc:	2200      	movs	r2, #0
   d6efe:	6001      	str	r1, [r0, #0]
   d6f00:	6102      	str	r2, [r0, #16]
   d6f02:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d6f04:	4770      	bx	lr

000d6f06 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d6f06:	b510      	push	{r4, lr}
   d6f08:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d6f0a:	8800      	ldrh	r0, [r0, #0]
   d6f0c:	f001 ff73 	bl	d8df6 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d6f10:	f240 3312 	movw	r3, #786	; 0x312
   d6f14:	f1a0 020b 	sub.w	r2, r0, #11
   d6f18:	429a      	cmp	r2, r3
   d6f1a:	d807      	bhi.n	d6f2c <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d6f1c:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d6f1e:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d6f20:	60e0      	str	r0, [r4, #12]
   d6f22:	f000 fa21 	bl	d7368 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d6f26:	61a0      	str	r0, [r4, #24]

        return true;
   d6f28:	2001      	movs	r0, #1
   d6f2a:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d6f2c:	2000      	movs	r0, #0
    }
}
   d6f2e:	bd10      	pop	{r4, pc}

000d6f30 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d6f30:	f000 b962 	b.w	d71f8 <HAL_Pin_Map>

000d6f34 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>:
void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
   d6f34:	1d8b      	adds	r3, r1, #6
  uint16_t sum = 0;
   d6f36:	2000      	movs	r0, #0
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
   d6f38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6f3c:	4410      	add	r0, r2
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
   d6f3e:	428b      	cmp	r3, r1
    sum += buffer[i];
   d6f40:	b280      	uxth	r0, r0
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
   d6f42:	d1f9      	bne.n	d6f38 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh+0x4>
    sum += buffer[i];
  }
  return -sum;
   d6f44:	4240      	negs	r0, r0
}
   d6f46:	b280      	uxth	r0, r0
   d6f48:	4770      	bx	lr

000d6f4a <_ZN19DFRobotDFPlayerMini10parseStackEv>:
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
   d6f4a:	7c41      	ldrb	r1, [r0, #17]
  value <<=8;
  value += *(array+1);
   d6f4c:	7c83      	ldrb	r3, [r0, #18]
  _isAvailable = false;
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
   d6f4e:	7bc2      	ldrb	r2, [r0, #15]
   d6f50:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
  value += *(array+1);
   d6f54:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   d6f58:	b29b      	uxth	r3, r3

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);

  switch (_handleCommand) {
   d6f5a:	3a3a      	subs	r2, #58	; 0x3a
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
   d6f5c:	8483      	strh	r3, [r0, #36]	; 0x24

  switch (_handleCommand) {
   d6f5e:	2a15      	cmp	r2, #21
   d6f60:	d833      	bhi.n	d6fca <_ZN19DFRobotDFPlayerMini10parseStackEv+0x80>
   d6f62:	e8df f002 	tbb	[pc, r2]
   d6f66:	1e17      	.short	0x1e17
   d6f68:	102e0b2e 	.word	0x102e0b2e
   d6f6c:	2e2e2c25 	.word	0x2e2e2c25
   d6f70:	2e2e2e2e 	.word	0x2e2e2e2e
   d6f74:	2e322e2e 	.word	0x2e322e2e
   d6f78:	2e2e2e2e 	.word	0x2e2e2e2e
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6f7c:	2300      	movs	r3, #0
   d6f7e:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6f82:	2305      	movs	r3, #5
   d6f84:	e018      	b.n	d6fb8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x02) {
   d6f86:	0799      	lsls	r1, r3, #30
   d6f88:	d52a      	bpl.n	d6fe0 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6f8a:	2300      	movs	r3, #0
   d6f8c:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6f90:	2304      	movs	r3, #4
   d6f92:	e011      	b.n	d6fb8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
      if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x02) {
   d6f94:	079a      	lsls	r2, r3, #30
   d6f96:	d523      	bpl.n	d6fe0 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6f98:	2300      	movs	r3, #0
   d6f9a:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6f9e:	2302      	movs	r3, #2
   d6fa0:	e00a      	b.n	d6fb8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
      if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x02) {
   d6fa2:	079b      	lsls	r3, r3, #30
   d6fa4:	d51c      	bpl.n	d6fe0 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6fa6:	2300      	movs	r3, #0
   d6fa8:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6fac:	2303      	movs	r3, #3
   d6fae:	e003      	b.n	d6fb8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6fb0:	2300      	movs	r3, #0
   d6fb2:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6fb6:	2306      	movs	r3, #6
   d6fb8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   d6fbc:	e001      	b.n	d6fc2 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x78>
      break;
    case 0x40:
      handleMessage(DFPlayerError, _handleParameter);
      break;
    case 0x41:
      _isSending = false;
   d6fbe:	2300      	movs	r3, #0
   d6fc0:	e00c      	b.n	d6fdc <_ZN19DFRobotDFPlayerMini10parseStackEv+0x92>
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
      _isAvailable = true;
   d6fc2:	2301      	movs	r3, #1
   d6fc4:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
      break;
   d6fc8:	4770      	bx	lr
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6fca:	2300      	movs	r3, #0
  _handleType = type;
   d6fcc:	2201      	movs	r2, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6fce:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6fd2:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
  _handleParameter = parameter;
   d6fd6:	8483      	strh	r3, [r0, #36]	; 0x24
  _isAvailable = true;
   d6fd8:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d6fdc:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
   d6fe0:	4770      	bx	lr

000d6fe2 <_ZN19DFRobotDFPlayerMini13validateStackEv>:
  value <<=8;
  value += *(array+1);
  return value;
}

bool DFRobotDFPlayerMini::validateStack(){
   d6fe2:	b510      	push	{r4, lr}
   d6fe4:	4604      	mov	r4, r0
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
   d6fe6:	f100 010c 	add.w	r1, r0, #12
   d6fea:	f7ff ffa3 	bl	d6f34 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
   d6fee:	7ce2      	ldrb	r2, [r4, #19]
  value += *(array+1);
  return value;
}

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
   d6ff0:	7d23      	ldrb	r3, [r4, #20]
   d6ff2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d6ff6:	b29b      	uxth	r3, r3
}
   d6ff8:	1a1b      	subs	r3, r3, r0
   d6ffa:	4258      	negs	r0, r3
   d6ffc:	4158      	adcs	r0, r3
   d6ffe:	bd10      	pop	{r4, pc}

000d7000 <_ZN19DFRobotDFPlayerMini9availableEv>:

bool DFRobotDFPlayerMini::available(){
   d7000:	b570      	push	{r4, r5, r6, lr}
   d7002:	4604      	mov	r4, r0
  while (_serial->available()) {
   d7004:	6820      	ldr	r0, [r4, #0]
   d7006:	6803      	ldr	r3, [r0, #0]
   d7008:	691b      	ldr	r3, [r3, #16]
   d700a:	4798      	blx	r3
   d700c:	4605      	mov	r5, r0
   d700e:	2800      	cmp	r0, #0
   d7010:	d05a      	beq.n	d70c8 <_ZN19DFRobotDFPlayerMini9availableEv+0xc8>
   d7012:	6820      	ldr	r0, [r4, #0]
    if (_receivedIndex == 0) {
   d7014:	f894 5020 	ldrb.w	r5, [r4, #32]
      _received[Stack_Header] = _serial->read();
   d7018:	6803      	ldr	r3, [r0, #0]
   d701a:	695b      	ldr	r3, [r3, #20]
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    if (_receivedIndex == 0) {
   d701c:	b94d      	cbnz	r5, d7032 <_ZN19DFRobotDFPlayerMini9availableEv+0x32>
      _received[Stack_Header] = _serial->read();
   d701e:	4798      	blx	r3
   d7020:	b2c0      	uxtb	r0, r0
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
   d7022:	287e      	cmp	r0, #126	; 0x7e
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    if (_receivedIndex == 0) {
      _received[Stack_Header] = _serial->read();
   d7024:	7320      	strb	r0, [r4, #12]
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
   d7026:	d1ed      	bne.n	d7004 <_ZN19DFRobotDFPlayerMini9availableEv+0x4>
        _isAvailable = false;
   d7028:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        _receivedIndex ++;
   d702c:	f894 3020 	ldrb.w	r3, [r4, #32]
   d7030:	e046      	b.n	d70c0 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
   d7032:	4798      	blx	r3
   d7034:	4425      	add	r5, r4
   d7036:	7328      	strb	r0, [r5, #12]
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
   d7038:	f894 3020 	ldrb.w	r3, [r4, #32]
   d703c:	2b02      	cmp	r3, #2
   d703e:	d011      	beq.n	d7064 <_ZN19DFRobotDFPlayerMini9availableEv+0x64>
   d7040:	2b09      	cmp	r3, #9
   d7042:	d013      	beq.n	d706c <_ZN19DFRobotDFPlayerMini9availableEv+0x6c>
   d7044:	2b01      	cmp	r3, #1
   d7046:	d13b      	bne.n	d70c0 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
   d7048:	7b62      	ldrb	r2, [r4, #13]
   d704a:	2aff      	cmp	r2, #255	; 0xff
   d704c:	d038      	beq.n	d70c0 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d704e:	2200      	movs	r2, #0
   d7050:	f884 2020 	strb.w	r2, [r4, #32]
  _handleType = type;
   d7054:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d7058:	84a2      	strh	r2, [r4, #36]	; 0x24
  _isAvailable = true;
   d705a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d705e:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
   d7062:	e048      	b.n	d70f6 <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
   d7064:	7ba2      	ldrb	r2, [r4, #14]
   d7066:	2a06      	cmp	r2, #6
   d7068:	d02a      	beq.n	d70c0 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
   d706a:	e002      	b.n	d7072 <_ZN19DFRobotDFPlayerMini9availableEv+0x72>
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
   d706c:	7d63      	ldrb	r3, [r4, #21]
   d706e:	2bef      	cmp	r3, #239	; 0xef
   d7070:	d009      	beq.n	d7086 <_ZN19DFRobotDFPlayerMini9availableEv+0x86>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d7072:	2300      	movs	r3, #0
  _handleType = type;
   d7074:	2201      	movs	r2, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d7076:	f884 3020 	strb.w	r3, [r4, #32]
  _handleType = type;
   d707a:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d707e:	84a3      	strh	r3, [r4, #36]	; 0x24
  _isAvailable = true;
   d7080:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   d7084:	e00e      	b.n	d70a4 <_ZN19DFRobotDFPlayerMini9availableEv+0xa4>
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
   d7086:	4620      	mov	r0, r4
   d7088:	f7ff ffab 	bl	d6fe2 <_ZN19DFRobotDFPlayerMini13validateStackEv>
   d708c:	b168      	cbz	r0, d70aa <_ZN19DFRobotDFPlayerMini9availableEv+0xaa>
              _receivedIndex = 0;
   d708e:	2300      	movs	r3, #0
   d7090:	f884 3020 	strb.w	r3, [r4, #32]
              parseStack();
   d7094:	4620      	mov	r0, r4
   d7096:	f7ff ff58 	bl	d6f4a <_ZN19DFRobotDFPlayerMini10parseStackEv>
              if (_isAvailable && !_sending[Stack_ACK]) {
   d709a:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
   d709e:	b356      	cbz	r6, d70f6 <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
   d70a0:	7ea3      	ldrb	r3, [r4, #26]
   d70a2:	bb43      	cbnz	r3, d70f6 <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
                _isSending = false;
   d70a4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   d70a8:	e025      	b.n	d70f6 <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
   d70aa:	2301      	movs	r3, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d70ac:	f884 0020 	strb.w	r0, [r4, #32]
  _handleType = type;
   d70b0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d70b4:	84a0      	strh	r0, [r4, #36]	; 0x24
  _isAvailable = true;
   d70b6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d70ba:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
                _isSending = false;
              }
              return _isAvailable;
            }
            else{
              return handleError(WrongStack);
   d70be:	e01a      	b.n	d70f6 <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
   d70c0:	3301      	adds	r3, #1
   d70c2:	f884 3020 	strb.w	r3, [r4, #32]
   d70c6:	e79d      	b.n	d7004 <_ZN19DFRobotDFPlayerMini9availableEv+0x4>
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
   d70c8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d70cc:	b18b      	cbz	r3, d70f2 <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
   d70ce:	f000 f94b 	bl	d7368 <HAL_Timer_Get_Milli_Seconds>
   d70d2:	6863      	ldr	r3, [r4, #4]
   d70d4:	1ac0      	subs	r0, r0, r3
   d70d6:	68a3      	ldr	r3, [r4, #8]
   d70d8:	4298      	cmp	r0, r3
   d70da:	d30a      	bcc.n	d70f2 <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
  _handleParameter = parameter;
  _isAvailable = true;
   d70dc:	2301      	movs	r3, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d70de:	f884 5020 	strb.w	r5, [r4, #32]
  _handleType = type;
   d70e2:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d70e6:	84a5      	strh	r5, [r4, #36]	; 0x24
  _isAvailable = true;
   d70e8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d70ec:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
   d70f0:	e001      	b.n	d70f6 <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
  }
  
  return _isAvailable;
   d70f2:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
}
   d70f6:	4630      	mov	r0, r6
   d70f8:	bd70      	pop	{r4, r5, r6, pc}

000d70fa <_ZN19DFRobotDFPlayerMini9sendStackEv>:
    sum += buffer[i];
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
   d70fa:	b510      	push	{r4, lr}
  if (_sending[Stack_ACK]) {
   d70fc:	7e83      	ldrb	r3, [r0, #26]
    sum += buffer[i];
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
   d70fe:	4604      	mov	r4, r0
  if (_sending[Stack_ACK]) {
   d7100:	b133      	cbz	r3, d7110 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x16>
    while (_isSending) {
   d7102:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d7106:	b133      	cbz	r3, d7116 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x1c>
      available();
   d7108:	4620      	mov	r0, r4
   d710a:	f7ff ff79 	bl	d7000 <_ZN19DFRobotDFPlayerMini9availableEv>
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {
    while (_isSending) {
   d710e:	e7f8      	b.n	d7102 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x8>
      available();
    }
  }
  else{
    delay(10);
   d7110:	200a      	movs	r0, #10
   d7112:	f000 fea7 	bl	d7e64 <delay>
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
   d7116:	4621      	mov	r1, r4
   d7118:	220a      	movs	r2, #10
   d711a:	f851 0b16 	ldr.w	r0, [r1], #22
   d711e:	6803      	ldr	r3, [r0, #0]
   d7120:	68db      	ldr	r3, [r3, #12]
   d7122:	4798      	blx	r3
   d7124:	f000 f920 	bl	d7368 <HAL_Timer_Get_Milli_Seconds>
  _timeOutTimer = millis();
  _isSending = _sending[Stack_ACK];
   d7128:	7ea3      	ldrb	r3, [r4, #26]
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
  _timeOutTimer = millis();
   d712a:	6060      	str	r0, [r4, #4]
  _isSending = _sending[Stack_ACK];
   d712c:	3300      	adds	r3, #0
   d712e:	bf18      	it	ne
   d7130:	2301      	movne	r3, #1
   d7132:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   d7136:	bd10      	pop	{r4, pc}

000d7138 <_ZN19DFRobotDFPlayerMini9sendStackEht>:
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d7138:	1213      	asrs	r3, r2, #8

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
   d713a:	b510      	push	{r4, lr}
  _sending[Stack_Command] = command;
   d713c:	7641      	strb	r1, [r0, #25]
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d713e:	76c3      	strb	r3, [r0, #27]
  *(array+1) = (uint8_t)(value);
   d7140:	7702      	strb	r2, [r0, #28]
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
   d7142:	f100 0116 	add.w	r1, r0, #22

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
   d7146:	4604      	mov	r4, r0
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
   d7148:	f7ff fef4 	bl	d6f34 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d714c:	1203      	asrs	r3, r0, #8
  *(array+1) = (uint8_t)(value);
   d714e:	77a0      	strb	r0, [r4, #30]
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d7150:	7763      	strb	r3, [r4, #29]

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
   d7152:	4620      	mov	r0, r4
}
   d7154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
   d7158:	f7ff bfcf 	b.w	d70fa <_ZN19DFRobotDFPlayerMini9sendStackEv>

000d715c <_ZN19DFRobotDFPlayerMini9sendStackEh>:
  _timeOutTimer = millis();
  _isSending = _sending[Stack_ACK];
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
   d715c:	2200      	movs	r2, #0
   d715e:	f7ff bfeb 	b.w	d7138 <_ZN19DFRobotDFPlayerMini9sendStackEht>

000d7162 <_ZN19DFRobotDFPlayerMini13waitAvailableEv>:
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(){
  _isSending = true;
   d7162:	2301      	movs	r3, #1

void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(){
   d7164:	b510      	push	{r4, lr}
   d7166:	4604      	mov	r4, r0
  _isSending = true;
   d7168:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
  while (!available());
   d716c:	4620      	mov	r0, r4
   d716e:	f7ff ff47 	bl	d7000 <_ZN19DFRobotDFPlayerMini9availableEv>
   d7172:	2800      	cmp	r0, #0
   d7174:	d0fa      	beq.n	d716c <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0xa>
  return _handleType != TimeOut;
   d7176:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
}
   d717a:	3000      	adds	r0, #0
   d717c:	bf18      	it	ne
   d717e:	2001      	movne	r0, #1
   d7180:	bd10      	pop	{r4, pc}

000d7182 <_ZN19DFRobotDFPlayerMini5resetEv>:
void DFRobotDFPlayerMini::sleep(){
  sendStack(0x0A);
}

void DFRobotDFPlayerMini::reset(){
  sendStack(0x0C);
   d7182:	210c      	movs	r1, #12
   d7184:	f7ff bfea 	b.w	d715c <_ZN19DFRobotDFPlayerMini9sendStackEh>

000d7188 <_ZN19DFRobotDFPlayerMini5beginER6Streamb>:
  _isSending = true;
  while (!available());
  return _handleType != TimeOut;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK){
   d7188:	b538      	push	{r3, r4, r5, lr}
   d718a:	4604      	mov	r4, r0
  if (isACK) {
   d718c:	4615      	mov	r5, r2
   d718e:	b112      	cbz	r2, d7196 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0xe>
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
   d7190:	2301      	movs	r3, #1
   d7192:	7683      	strb	r3, [r0, #26]
   d7194:	e000      	b.n	d7198 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x10>
}

void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
   d7196:	76a2      	strb	r2, [r4, #26]
  else{
    disableACK();
  }
  
  _serial = &stream;
  _timeOutDuration += 3000;
   d7198:	68a3      	ldr	r3, [r4, #8]
  }
  else{
    disableACK();
  }
  
  _serial = &stream;
   d719a:	6021      	str	r1, [r4, #0]
  _timeOutDuration += 3000;
   d719c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
   d71a0:	60a3      	str	r3, [r4, #8]
  reset();
   d71a2:	4620      	mov	r0, r4
   d71a4:	f7ff ffed 	bl	d7182 <_ZN19DFRobotDFPlayerMini5resetEv>
  waitAvailable();
   d71a8:	4620      	mov	r0, r4
   d71aa:	f7ff ffda 	bl	d7162 <_ZN19DFRobotDFPlayerMini13waitAvailableEv>
  _timeOutDuration -= 3000;
   d71ae:	68a3      	ldr	r3, [r4, #8]
   d71b0:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
  delay(200);
   d71b4:	20c8      	movs	r0, #200	; 0xc8
  
  _serial = &stream;
  _timeOutDuration += 3000;
  reset();
  waitAvailable();
  _timeOutDuration -= 3000;
   d71b6:	60a3      	str	r3, [r4, #8]
  delay(200);
   d71b8:	f000 fe54 	bl	d7e64 <delay>
  return (readType() == DFPlayerCardOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
   d71bc:	2300      	movs	r3, #0
   d71be:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  _timeOutDuration += 3000;
  reset();
  waitAvailable();
  _timeOutDuration -= 3000;
  delay(200);
  return (readType() == DFPlayerCardOnline) || !isACK;
   d71c2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d71c6:	2b04      	cmp	r3, #4
   d71c8:	bf14      	ite	ne
   d71ca:	f085 0001 	eorne.w	r0, r5, #1
   d71ce:	2001      	moveq	r0, #1
}
   d71d0:	bd38      	pop	{r3, r4, r5, pc}

000d71d2 <_GLOBAL__sub_I__ZN19DFRobotDFPlayerMini10setTimeOutEm>:
   d71d2:	f000 b811 	b.w	d71f8 <HAL_Pin_Map>
	...

000d71d8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d71d8:	b508      	push	{r3, lr}
   d71da:	4b02      	ldr	r3, [pc, #8]	; (d71e4 <netdb_freeaddrinfo+0xc>)
   d71dc:	681b      	ldr	r3, [r3, #0]
   d71de:	689b      	ldr	r3, [r3, #8]
   d71e0:	9301      	str	r3, [sp, #4]
   d71e2:	bd08      	pop	{r3, pc}
   d71e4:	00030268 	.word	0x00030268

000d71e8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d71e8:	b508      	push	{r3, lr}
   d71ea:	4b02      	ldr	r3, [pc, #8]	; (d71f4 <netdb_getaddrinfo+0xc>)
   d71ec:	681b      	ldr	r3, [r3, #0]
   d71ee:	68db      	ldr	r3, [r3, #12]
   d71f0:	9301      	str	r3, [sp, #4]
   d71f2:	bd08      	pop	{r3, pc}
   d71f4:	00030268 	.word	0x00030268

000d71f8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d71f8:	b508      	push	{r3, lr}
   d71fa:	4b02      	ldr	r3, [pc, #8]	; (d7204 <HAL_Pin_Map+0xc>)
   d71fc:	681b      	ldr	r3, [r3, #0]
   d71fe:	681b      	ldr	r3, [r3, #0]
   d7200:	9301      	str	r3, [sp, #4]
   d7202:	bd08      	pop	{r3, pc}
   d7204:	0003022c 	.word	0x0003022c

000d7208 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7208:	b508      	push	{r3, lr}
   d720a:	4b02      	ldr	r3, [pc, #8]	; (d7214 <HAL_Validate_Pin_Function+0xc>)
   d720c:	681b      	ldr	r3, [r3, #0]
   d720e:	685b      	ldr	r3, [r3, #4]
   d7210:	9301      	str	r3, [sp, #4]
   d7212:	bd08      	pop	{r3, pc}
   d7214:	0003022c 	.word	0x0003022c

000d7218 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7218:	b508      	push	{r3, lr}
   d721a:	4b02      	ldr	r3, [pc, #8]	; (d7224 <HAL_Pin_Mode+0xc>)
   d721c:	681b      	ldr	r3, [r3, #0]
   d721e:	689b      	ldr	r3, [r3, #8]
   d7220:	9301      	str	r3, [sp, #4]
   d7222:	bd08      	pop	{r3, pc}
   d7224:	0003022c 	.word	0x0003022c

000d7228 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7228:	b508      	push	{r3, lr}
   d722a:	4b02      	ldr	r3, [pc, #8]	; (d7234 <HAL_Get_Pin_Mode+0xc>)
   d722c:	681b      	ldr	r3, [r3, #0]
   d722e:	68db      	ldr	r3, [r3, #12]
   d7230:	9301      	str	r3, [sp, #4]
   d7232:	bd08      	pop	{r3, pc}
   d7234:	0003022c 	.word	0x0003022c

000d7238 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7238:	b508      	push	{r3, lr}
   d723a:	4b02      	ldr	r3, [pc, #8]	; (d7244 <HAL_GPIO_Write+0xc>)
   d723c:	681b      	ldr	r3, [r3, #0]
   d723e:	691b      	ldr	r3, [r3, #16]
   d7240:	9301      	str	r3, [sp, #4]
   d7242:	bd08      	pop	{r3, pc}
   d7244:	0003022c 	.word	0x0003022c

000d7248 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7248:	b508      	push	{r3, lr}
   d724a:	4b02      	ldr	r3, [pc, #8]	; (d7254 <HAL_GPIO_Read+0xc>)
   d724c:	681b      	ldr	r3, [r3, #0]
   d724e:	695b      	ldr	r3, [r3, #20]
   d7250:	9301      	str	r3, [sp, #4]
   d7252:	bd08      	pop	{r3, pc}
   d7254:	0003022c 	.word	0x0003022c

000d7258 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7258:	b508      	push	{r3, lr}
   d725a:	4b02      	ldr	r3, [pc, #8]	; (d7264 <HAL_Interrupts_Attach+0xc>)
   d725c:	681b      	ldr	r3, [r3, #0]
   d725e:	699b      	ldr	r3, [r3, #24]
   d7260:	9301      	str	r3, [sp, #4]
   d7262:	bd08      	pop	{r3, pc}
   d7264:	0003022c 	.word	0x0003022c

000d7268 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7268:	b508      	push	{r3, lr}
   d726a:	4b02      	ldr	r3, [pc, #8]	; (d7274 <HAL_Interrupts_Detach+0xc>)
   d726c:	681b      	ldr	r3, [r3, #0]
   d726e:	69db      	ldr	r3, [r3, #28]
   d7270:	9301      	str	r3, [sp, #4]
   d7272:	bd08      	pop	{r3, pc}
   d7274:	0003022c 	.word	0x0003022c

000d7278 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d7278:	b508      	push	{r3, lr}
   d727a:	4b02      	ldr	r3, [pc, #8]	; (d7284 <HAL_ADC_Read+0xc>)
   d727c:	681b      	ldr	r3, [r3, #0]
   d727e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7280:	9301      	str	r3, [sp, #4]
   d7282:	bd08      	pop	{r3, pc}
   d7284:	0003022c 	.word	0x0003022c

000d7288 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d7288:	b508      	push	{r3, lr}
   d728a:	4b02      	ldr	r3, [pc, #8]	; (d7294 <HAL_SPI_Begin+0xc>)
   d728c:	681b      	ldr	r3, [r3, #0]
   d728e:	681b      	ldr	r3, [r3, #0]
   d7290:	9301      	str	r3, [sp, #4]
   d7292:	bd08      	pop	{r3, pc}
   d7294:	00030230 	.word	0x00030230

000d7298 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d7298:	b508      	push	{r3, lr}
   d729a:	4b02      	ldr	r3, [pc, #8]	; (d72a4 <HAL_SPI_Send_Receive_Data+0xc>)
   d729c:	681b      	ldr	r3, [r3, #0]
   d729e:	695b      	ldr	r3, [r3, #20]
   d72a0:	9301      	str	r3, [sp, #4]
   d72a2:	bd08      	pop	{r3, pc}
   d72a4:	00030230 	.word	0x00030230

000d72a8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d72a8:	b508      	push	{r3, lr}
   d72aa:	4b02      	ldr	r3, [pc, #8]	; (d72b4 <HAL_SPI_Init+0xc>)
   d72ac:	681b      	ldr	r3, [r3, #0]
   d72ae:	69db      	ldr	r3, [r3, #28]
   d72b0:	9301      	str	r3, [sp, #4]
   d72b2:	bd08      	pop	{r3, pc}
   d72b4:	00030230 	.word	0x00030230

000d72b8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d72b8:	b508      	push	{r3, lr}
   d72ba:	4b02      	ldr	r3, [pc, #8]	; (d72c4 <HAL_SPI_Is_Enabled+0xc>)
   d72bc:	681b      	ldr	r3, [r3, #0]
   d72be:	6a1b      	ldr	r3, [r3, #32]
   d72c0:	9301      	str	r3, [sp, #4]
   d72c2:	bd08      	pop	{r3, pc}
   d72c4:	00030230 	.word	0x00030230

000d72c8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d72c8:	b508      	push	{r3, lr}
   d72ca:	4b02      	ldr	r3, [pc, #8]	; (d72d4 <HAL_SPI_Info+0xc>)
   d72cc:	681b      	ldr	r3, [r3, #0]
   d72ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d72d0:	9301      	str	r3, [sp, #4]
   d72d2:	bd08      	pop	{r3, pc}
   d72d4:	00030230 	.word	0x00030230

000d72d8 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d72d8:	b508      	push	{r3, lr}
   d72da:	4b02      	ldr	r3, [pc, #8]	; (d72e4 <HAL_SPI_DMA_Transfer+0xc>)
   d72dc:	681b      	ldr	r3, [r3, #0]
   d72de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d72e0:	9301      	str	r3, [sp, #4]
   d72e2:	bd08      	pop	{r3, pc}
   d72e4:	00030230 	.word	0x00030230

000d72e8 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d72e8:	b508      	push	{r3, lr}
   d72ea:	4b02      	ldr	r3, [pc, #8]	; (d72f4 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d72ec:	681b      	ldr	r3, [r3, #0]
   d72ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d72f0:	9301      	str	r3, [sp, #4]
   d72f2:	bd08      	pop	{r3, pc}
   d72f4:	00030230 	.word	0x00030230

000d72f8 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d72f8:	b508      	push	{r3, lr}
   d72fa:	4b02      	ldr	r3, [pc, #8]	; (d7304 <HAL_SPI_Set_Settings+0xc>)
   d72fc:	681b      	ldr	r3, [r3, #0]
   d72fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7300:	9301      	str	r3, [sp, #4]
   d7302:	bd08      	pop	{r3, pc}
   d7304:	00030230 	.word	0x00030230

000d7308 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d7308:	b508      	push	{r3, lr}
   d730a:	4b02      	ldr	r3, [pc, #8]	; (d7314 <HAL_SPI_Acquire+0xc>)
   d730c:	681b      	ldr	r3, [r3, #0]
   d730e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7310:	9301      	str	r3, [sp, #4]
   d7312:	bd08      	pop	{r3, pc}
   d7314:	00030230 	.word	0x00030230

000d7318 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d7318:	b508      	push	{r3, lr}
   d731a:	4b02      	ldr	r3, [pc, #8]	; (d7324 <HAL_SPI_Release+0xc>)
   d731c:	681b      	ldr	r3, [r3, #0]
   d731e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7320:	9301      	str	r3, [sp, #4]
   d7322:	bd08      	pop	{r3, pc}
   d7324:	00030230 	.word	0x00030230

000d7328 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d7328:	b508      	push	{r3, lr}
   d732a:	4b02      	ldr	r3, [pc, #8]	; (d7334 <if_index_to_name+0xc>)
   d732c:	681b      	ldr	r3, [r3, #0]
   d732e:	695b      	ldr	r3, [r3, #20]
   d7330:	9301      	str	r3, [sp, #4]
   d7332:	bd08      	pop	{r3, pc}
   d7334:	0003026c 	.word	0x0003026c

000d7338 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7338:	b508      	push	{r3, lr}
   d733a:	4b02      	ldr	r3, [pc, #8]	; (d7344 <HAL_RNG_GetRandomNumber+0xc>)
   d733c:	681b      	ldr	r3, [r3, #0]
   d733e:	685b      	ldr	r3, [r3, #4]
   d7340:	9301      	str	r3, [sp, #4]
   d7342:	bd08      	pop	{r3, pc}
   d7344:	00030218 	.word	0x00030218

000d7348 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7348:	b508      	push	{r3, lr}
   d734a:	4b02      	ldr	r3, [pc, #8]	; (d7354 <HAL_Delay_Microseconds+0xc>)
   d734c:	681b      	ldr	r3, [r3, #0]
   d734e:	68db      	ldr	r3, [r3, #12]
   d7350:	9301      	str	r3, [sp, #4]
   d7352:	bd08      	pop	{r3, pc}
   d7354:	00030218 	.word	0x00030218

000d7358 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7358:	b508      	push	{r3, lr}
   d735a:	4b02      	ldr	r3, [pc, #8]	; (d7364 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d735c:	681b      	ldr	r3, [r3, #0]
   d735e:	691b      	ldr	r3, [r3, #16]
   d7360:	9301      	str	r3, [sp, #4]
   d7362:	bd08      	pop	{r3, pc}
   d7364:	00030218 	.word	0x00030218

000d7368 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7368:	b508      	push	{r3, lr}
   d736a:	4b02      	ldr	r3, [pc, #8]	; (d7374 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d736c:	681b      	ldr	r3, [r3, #0]
   d736e:	695b      	ldr	r3, [r3, #20]
   d7370:	9301      	str	r3, [sp, #4]
   d7372:	bd08      	pop	{r3, pc}
   d7374:	00030218 	.word	0x00030218

000d7378 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d7378:	b508      	push	{r3, lr}
   d737a:	4b02      	ldr	r3, [pc, #8]	; (d7384 <HAL_RTC_Get_UnixTime+0xc>)
   d737c:	681b      	ldr	r3, [r3, #0]
   d737e:	69db      	ldr	r3, [r3, #28]
   d7380:	9301      	str	r3, [sp, #4]
   d7382:	bd08      	pop	{r3, pc}
   d7384:	00030218 	.word	0x00030218

000d7388 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d7388:	b508      	push	{r3, lr}
   d738a:	4b02      	ldr	r3, [pc, #8]	; (d7394 <HAL_RTC_Time_Is_Valid+0xc>)
   d738c:	681b      	ldr	r3, [r3, #0]
   d738e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7390:	9301      	str	r3, [sp, #4]
   d7392:	bd08      	pop	{r3, pc}
   d7394:	00030218 	.word	0x00030218

000d7398 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d7398:	b508      	push	{r3, lr}
   d739a:	4b02      	ldr	r3, [pc, #8]	; (d73a4 <os_thread_is_current+0xc>)
   d739c:	681b      	ldr	r3, [r3, #0]
   d739e:	689b      	ldr	r3, [r3, #8]
   d73a0:	9301      	str	r3, [sp, #4]
   d73a2:	bd08      	pop	{r3, pc}
   d73a4:	00030248 	.word	0x00030248

000d73a8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d73a8:	b508      	push	{r3, lr}
   d73aa:	4b02      	ldr	r3, [pc, #8]	; (d73b4 <os_thread_join+0xc>)
   d73ac:	681b      	ldr	r3, [r3, #0]
   d73ae:	691b      	ldr	r3, [r3, #16]
   d73b0:	9301      	str	r3, [sp, #4]
   d73b2:	bd08      	pop	{r3, pc}
   d73b4:	00030248 	.word	0x00030248

000d73b8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d73b8:	b508      	push	{r3, lr}
   d73ba:	4b02      	ldr	r3, [pc, #8]	; (d73c4 <os_thread_cleanup+0xc>)
   d73bc:	681b      	ldr	r3, [r3, #0]
   d73be:	695b      	ldr	r3, [r3, #20]
   d73c0:	9301      	str	r3, [sp, #4]
   d73c2:	bd08      	pop	{r3, pc}
   d73c4:	00030248 	.word	0x00030248

000d73c8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d73c8:	b508      	push	{r3, lr}
   d73ca:	4b02      	ldr	r3, [pc, #8]	; (d73d4 <os_mutex_recursive_create+0xc>)
   d73cc:	681b      	ldr	r3, [r3, #0]
   d73ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d73d0:	9301      	str	r3, [sp, #4]
   d73d2:	bd08      	pop	{r3, pc}
   d73d4:	00030248 	.word	0x00030248

000d73d8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d73d8:	b508      	push	{r3, lr}
   d73da:	4b02      	ldr	r3, [pc, #8]	; (d73e4 <os_mutex_recursive_destroy+0xc>)
   d73dc:	681b      	ldr	r3, [r3, #0]
   d73de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d73e0:	9301      	str	r3, [sp, #4]
   d73e2:	bd08      	pop	{r3, pc}
   d73e4:	00030248 	.word	0x00030248

000d73e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d73e8:	b508      	push	{r3, lr}
   d73ea:	4b02      	ldr	r3, [pc, #8]	; (d73f4 <inet_inet_ntop+0xc>)
   d73ec:	681b      	ldr	r3, [r3, #0]
   d73ee:	695b      	ldr	r3, [r3, #20]
   d73f0:	9301      	str	r3, [sp, #4]
   d73f2:	bd08      	pop	{r3, pc}
   d73f4:	00030264 	.word	0x00030264

000d73f8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d73f8:	b508      	push	{r3, lr}
   d73fa:	4b02      	ldr	r3, [pc, #8]	; (d7404 <inet_htonl+0xc>)
   d73fc:	681b      	ldr	r3, [r3, #0]
   d73fe:	6a1b      	ldr	r3, [r3, #32]
   d7400:	9301      	str	r3, [sp, #4]
   d7402:	bd08      	pop	{r3, pc}
   d7404:	00030264 	.word	0x00030264

000d7408 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d7408:	b508      	push	{r3, lr}
   d740a:	4b02      	ldr	r3, [pc, #8]	; (d7414 <inet_htons+0xc>)
   d740c:	681b      	ldr	r3, [r3, #0]
   d740e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7410:	9301      	str	r3, [sp, #4]
   d7412:	bd08      	pop	{r3, pc}
   d7414:	00030264 	.word	0x00030264

000d7418 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d7418:	b508      	push	{r3, lr}
   d741a:	4b02      	ldr	r3, [pc, #8]	; (d7424 <HAL_USART_Init+0xc>)
   d741c:	681b      	ldr	r3, [r3, #0]
   d741e:	681b      	ldr	r3, [r3, #0]
   d7420:	9301      	str	r3, [sp, #4]
   d7422:	bd08      	pop	{r3, pc}
   d7424:	0003023c 	.word	0x0003023c

000d7428 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d7428:	b508      	push	{r3, lr}
   d742a:	4b02      	ldr	r3, [pc, #8]	; (d7434 <HAL_USART_Write_Data+0xc>)
   d742c:	681b      	ldr	r3, [r3, #0]
   d742e:	68db      	ldr	r3, [r3, #12]
   d7430:	9301      	str	r3, [sp, #4]
   d7432:	bd08      	pop	{r3, pc}
   d7434:	0003023c 	.word	0x0003023c

000d7438 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d7438:	b508      	push	{r3, lr}
   d743a:	4b02      	ldr	r3, [pc, #8]	; (d7444 <HAL_USART_Available_Data+0xc>)
   d743c:	681b      	ldr	r3, [r3, #0]
   d743e:	691b      	ldr	r3, [r3, #16]
   d7440:	9301      	str	r3, [sp, #4]
   d7442:	bd08      	pop	{r3, pc}
   d7444:	0003023c 	.word	0x0003023c

000d7448 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d7448:	b508      	push	{r3, lr}
   d744a:	4b02      	ldr	r3, [pc, #8]	; (d7454 <HAL_USART_Read_Data+0xc>)
   d744c:	681b      	ldr	r3, [r3, #0]
   d744e:	695b      	ldr	r3, [r3, #20]
   d7450:	9301      	str	r3, [sp, #4]
   d7452:	bd08      	pop	{r3, pc}
   d7454:	0003023c 	.word	0x0003023c

000d7458 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d7458:	b508      	push	{r3, lr}
   d745a:	4b02      	ldr	r3, [pc, #8]	; (d7464 <HAL_USART_Peek_Data+0xc>)
   d745c:	681b      	ldr	r3, [r3, #0]
   d745e:	699b      	ldr	r3, [r3, #24]
   d7460:	9301      	str	r3, [sp, #4]
   d7462:	bd08      	pop	{r3, pc}
   d7464:	0003023c 	.word	0x0003023c

000d7468 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d7468:	b508      	push	{r3, lr}
   d746a:	4b02      	ldr	r3, [pc, #8]	; (d7474 <HAL_USART_Flush_Data+0xc>)
   d746c:	681b      	ldr	r3, [r3, #0]
   d746e:	69db      	ldr	r3, [r3, #28]
   d7470:	9301      	str	r3, [sp, #4]
   d7472:	bd08      	pop	{r3, pc}
   d7474:	0003023c 	.word	0x0003023c

000d7478 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d7478:	b508      	push	{r3, lr}
   d747a:	4b02      	ldr	r3, [pc, #8]	; (d7484 <HAL_USART_Is_Enabled+0xc>)
   d747c:	681b      	ldr	r3, [r3, #0]
   d747e:	6a1b      	ldr	r3, [r3, #32]
   d7480:	9301      	str	r3, [sp, #4]
   d7482:	bd08      	pop	{r3, pc}
   d7484:	0003023c 	.word	0x0003023c

000d7488 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d7488:	b508      	push	{r3, lr}
   d748a:	4b02      	ldr	r3, [pc, #8]	; (d7494 <HAL_USART_Available_Data_For_Write+0xc>)
   d748c:	681b      	ldr	r3, [r3, #0]
   d748e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7490:	9301      	str	r3, [sp, #4]
   d7492:	bd08      	pop	{r3, pc}
   d7494:	0003023c 	.word	0x0003023c

000d7498 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d7498:	b508      	push	{r3, lr}
   d749a:	4b02      	ldr	r3, [pc, #8]	; (d74a4 <HAL_USART_BeginConfig+0xc>)
   d749c:	681b      	ldr	r3, [r3, #0]
   d749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d74a0:	9301      	str	r3, [sp, #4]
   d74a2:	bd08      	pop	{r3, pc}
   d74a4:	0003023c 	.word	0x0003023c

000d74a8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d74a8:	b508      	push	{r3, lr}
   d74aa:	4b02      	ldr	r3, [pc, #8]	; (d74b4 <HAL_I2C_Begin+0xc>)
   d74ac:	681b      	ldr	r3, [r3, #0]
   d74ae:	68db      	ldr	r3, [r3, #12]
   d74b0:	9301      	str	r3, [sp, #4]
   d74b2:	bd08      	pop	{r3, pc}
   d74b4:	00030228 	.word	0x00030228

000d74b8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d74b8:	b508      	push	{r3, lr}
   d74ba:	4b02      	ldr	r3, [pc, #8]	; (d74c4 <HAL_I2C_Begin_Transmission+0xc>)
   d74bc:	681b      	ldr	r3, [r3, #0]
   d74be:	699b      	ldr	r3, [r3, #24]
   d74c0:	9301      	str	r3, [sp, #4]
   d74c2:	bd08      	pop	{r3, pc}
   d74c4:	00030228 	.word	0x00030228

000d74c8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d74c8:	b508      	push	{r3, lr}
   d74ca:	4b02      	ldr	r3, [pc, #8]	; (d74d4 <HAL_I2C_End_Transmission+0xc>)
   d74cc:	681b      	ldr	r3, [r3, #0]
   d74ce:	69db      	ldr	r3, [r3, #28]
   d74d0:	9301      	str	r3, [sp, #4]
   d74d2:	bd08      	pop	{r3, pc}
   d74d4:	00030228 	.word	0x00030228

000d74d8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d74d8:	b508      	push	{r3, lr}
   d74da:	4b02      	ldr	r3, [pc, #8]	; (d74e4 <HAL_I2C_Write_Data+0xc>)
   d74dc:	681b      	ldr	r3, [r3, #0]
   d74de:	6a1b      	ldr	r3, [r3, #32]
   d74e0:	9301      	str	r3, [sp, #4]
   d74e2:	bd08      	pop	{r3, pc}
   d74e4:	00030228 	.word	0x00030228

000d74e8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d74e8:	b508      	push	{r3, lr}
   d74ea:	4b02      	ldr	r3, [pc, #8]	; (d74f4 <HAL_I2C_Available_Data+0xc>)
   d74ec:	681b      	ldr	r3, [r3, #0]
   d74ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d74f0:	9301      	str	r3, [sp, #4]
   d74f2:	bd08      	pop	{r3, pc}
   d74f4:	00030228 	.word	0x00030228

000d74f8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d74f8:	b508      	push	{r3, lr}
   d74fa:	4b02      	ldr	r3, [pc, #8]	; (d7504 <HAL_I2C_Read_Data+0xc>)
   d74fc:	681b      	ldr	r3, [r3, #0]
   d74fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7500:	9301      	str	r3, [sp, #4]
   d7502:	bd08      	pop	{r3, pc}
   d7504:	00030228 	.word	0x00030228

000d7508 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d7508:	b508      	push	{r3, lr}
   d750a:	4b02      	ldr	r3, [pc, #8]	; (d7514 <HAL_I2C_Peek_Data+0xc>)
   d750c:	681b      	ldr	r3, [r3, #0]
   d750e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7510:	9301      	str	r3, [sp, #4]
   d7512:	bd08      	pop	{r3, pc}
   d7514:	00030228 	.word	0x00030228

000d7518 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d7518:	b508      	push	{r3, lr}
   d751a:	4b02      	ldr	r3, [pc, #8]	; (d7524 <HAL_I2C_Flush_Data+0xc>)
   d751c:	681b      	ldr	r3, [r3, #0]
   d751e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7520:	9301      	str	r3, [sp, #4]
   d7522:	bd08      	pop	{r3, pc}
   d7524:	00030228 	.word	0x00030228

000d7528 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d7528:	b508      	push	{r3, lr}
   d752a:	4b02      	ldr	r3, [pc, #8]	; (d7534 <HAL_I2C_Is_Enabled+0xc>)
   d752c:	681b      	ldr	r3, [r3, #0]
   d752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7530:	9301      	str	r3, [sp, #4]
   d7532:	bd08      	pop	{r3, pc}
   d7534:	00030228 	.word	0x00030228

000d7538 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d7538:	b508      	push	{r3, lr}
   d753a:	4b02      	ldr	r3, [pc, #8]	; (d7544 <HAL_I2C_Init+0xc>)
   d753c:	681b      	ldr	r3, [r3, #0]
   d753e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7540:	9301      	str	r3, [sp, #4]
   d7542:	bd08      	pop	{r3, pc}
   d7544:	00030228 	.word	0x00030228

000d7548 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d7548:	b508      	push	{r3, lr}
   d754a:	4b02      	ldr	r3, [pc, #8]	; (d7554 <HAL_I2C_Request_Data_Ex+0xc>)
   d754c:	681b      	ldr	r3, [r3, #0]
   d754e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7550:	9301      	str	r3, [sp, #4]
   d7552:	bd08      	pop	{r3, pc}
   d7554:	00030228 	.word	0x00030228

000d7558 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d7558:	b508      	push	{r3, lr}
   d755a:	4b02      	ldr	r3, [pc, #8]	; (d7564 <sock_setsockopt+0xc>)
   d755c:	681b      	ldr	r3, [r3, #0]
   d755e:	699b      	ldr	r3, [r3, #24]
   d7560:	9301      	str	r3, [sp, #4]
   d7562:	bd08      	pop	{r3, pc}
   d7564:	00030238 	.word	0x00030238

000d7568 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d7568:	b508      	push	{r3, lr}
   d756a:	4b02      	ldr	r3, [pc, #8]	; (d7574 <sock_close+0xc>)
   d756c:	681b      	ldr	r3, [r3, #0]
   d756e:	69db      	ldr	r3, [r3, #28]
   d7570:	9301      	str	r3, [sp, #4]
   d7572:	bd08      	pop	{r3, pc}
   d7574:	00030238 	.word	0x00030238

000d7578 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d7578:	b508      	push	{r3, lr}
   d757a:	4b02      	ldr	r3, [pc, #8]	; (d7584 <sock_connect+0xc>)
   d757c:	681b      	ldr	r3, [r3, #0]
   d757e:	6a1b      	ldr	r3, [r3, #32]
   d7580:	9301      	str	r3, [sp, #4]
   d7582:	bd08      	pop	{r3, pc}
   d7584:	00030238 	.word	0x00030238

000d7588 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d7588:	b508      	push	{r3, lr}
   d758a:	4b02      	ldr	r3, [pc, #8]	; (d7594 <sock_recv+0xc>)
   d758c:	681b      	ldr	r3, [r3, #0]
   d758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7590:	9301      	str	r3, [sp, #4]
   d7592:	bd08      	pop	{r3, pc}
   d7594:	00030238 	.word	0x00030238

000d7598 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d7598:	b508      	push	{r3, lr}
   d759a:	4b02      	ldr	r3, [pc, #8]	; (d75a4 <sock_send+0xc>)
   d759c:	681b      	ldr	r3, [r3, #0]
   d759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d75a0:	9301      	str	r3, [sp, #4]
   d75a2:	bd08      	pop	{r3, pc}
   d75a4:	00030238 	.word	0x00030238

000d75a8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d75a8:	b508      	push	{r3, lr}
   d75aa:	4b02      	ldr	r3, [pc, #8]	; (d75b4 <sock_socket+0xc>)
   d75ac:	681b      	ldr	r3, [r3, #0]
   d75ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d75b0:	9301      	str	r3, [sp, #4]
   d75b2:	bd08      	pop	{r3, pc}
   d75b4:	00030238 	.word	0x00030238

000d75b8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d75b8:	b508      	push	{r3, lr}
   d75ba:	4b02      	ldr	r3, [pc, #8]	; (d75c4 <HAL_USB_USART_Init+0xc>)
   d75bc:	681b      	ldr	r3, [r3, #0]
   d75be:	681b      	ldr	r3, [r3, #0]
   d75c0:	9301      	str	r3, [sp, #4]
   d75c2:	bd08      	pop	{r3, pc}
   d75c4:	0003024c 	.word	0x0003024c

000d75c8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d75c8:	b508      	push	{r3, lr}
   d75ca:	4b02      	ldr	r3, [pc, #8]	; (d75d4 <HAL_USB_USART_Begin+0xc>)
   d75cc:	681b      	ldr	r3, [r3, #0]
   d75ce:	685b      	ldr	r3, [r3, #4]
   d75d0:	9301      	str	r3, [sp, #4]
   d75d2:	bd08      	pop	{r3, pc}
   d75d4:	0003024c 	.word	0x0003024c

000d75d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d75d8:	b508      	push	{r3, lr}
   d75da:	4b02      	ldr	r3, [pc, #8]	; (d75e4 <HAL_USB_USART_Available_Data+0xc>)
   d75dc:	681b      	ldr	r3, [r3, #0]
   d75de:	691b      	ldr	r3, [r3, #16]
   d75e0:	9301      	str	r3, [sp, #4]
   d75e2:	bd08      	pop	{r3, pc}
   d75e4:	0003024c 	.word	0x0003024c

000d75e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d75e8:	b508      	push	{r3, lr}
   d75ea:	4b02      	ldr	r3, [pc, #8]	; (d75f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d75ec:	681b      	ldr	r3, [r3, #0]
   d75ee:	695b      	ldr	r3, [r3, #20]
   d75f0:	9301      	str	r3, [sp, #4]
   d75f2:	bd08      	pop	{r3, pc}
   d75f4:	0003024c 	.word	0x0003024c

000d75f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d75f8:	b508      	push	{r3, lr}
   d75fa:	4b02      	ldr	r3, [pc, #8]	; (d7604 <HAL_USB_USART_Receive_Data+0xc>)
   d75fc:	681b      	ldr	r3, [r3, #0]
   d75fe:	699b      	ldr	r3, [r3, #24]
   d7600:	9301      	str	r3, [sp, #4]
   d7602:	bd08      	pop	{r3, pc}
   d7604:	0003024c 	.word	0x0003024c

000d7608 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7608:	b508      	push	{r3, lr}
   d760a:	4b02      	ldr	r3, [pc, #8]	; (d7614 <HAL_USB_USART_Send_Data+0xc>)
   d760c:	681b      	ldr	r3, [r3, #0]
   d760e:	69db      	ldr	r3, [r3, #28]
   d7610:	9301      	str	r3, [sp, #4]
   d7612:	bd08      	pop	{r3, pc}
   d7614:	0003024c 	.word	0x0003024c

000d7618 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7618:	b508      	push	{r3, lr}
   d761a:	4b02      	ldr	r3, [pc, #8]	; (d7624 <HAL_USB_USART_Flush_Data+0xc>)
   d761c:	681b      	ldr	r3, [r3, #0]
   d761e:	6a1b      	ldr	r3, [r3, #32]
   d7620:	9301      	str	r3, [sp, #4]
   d7622:	bd08      	pop	{r3, pc}
   d7624:	0003024c 	.word	0x0003024c

000d7628 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7628:	b508      	push	{r3, lr}
   d762a:	4b02      	ldr	r3, [pc, #8]	; (d7634 <panic_+0xc>)
   d762c:	681b      	ldr	r3, [r3, #0]
   d762e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7630:	9301      	str	r3, [sp, #4]
   d7632:	bd08      	pop	{r3, pc}
   d7634:	00030260 	.word	0x00030260

000d7638 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7638:	b508      	push	{r3, lr}
   d763a:	4b02      	ldr	r3, [pc, #8]	; (d7644 <log_message+0xc>)
   d763c:	681b      	ldr	r3, [r3, #0]
   d763e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7640:	9301      	str	r3, [sp, #4]
   d7642:	bd08      	pop	{r3, pc}
   d7644:	00030260 	.word	0x00030260

000d7648 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7648:	b508      	push	{r3, lr}
   d764a:	4b02      	ldr	r3, [pc, #8]	; (d7654 <system_mode+0xc>)
   d764c:	681b      	ldr	r3, [r3, #0]
   d764e:	681b      	ldr	r3, [r3, #0]
   d7650:	9301      	str	r3, [sp, #4]
   d7652:	bd08      	pop	{r3, pc}
   d7654:	00030220 	.word	0x00030220

000d7658 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7658:	b508      	push	{r3, lr}
   d765a:	4b02      	ldr	r3, [pc, #8]	; (d7664 <set_system_mode+0xc>)
   d765c:	681b      	ldr	r3, [r3, #0]
   d765e:	685b      	ldr	r3, [r3, #4]
   d7660:	9301      	str	r3, [sp, #4]
   d7662:	bd08      	pop	{r3, pc}
   d7664:	00030220 	.word	0x00030220

000d7668 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7668:	b508      	push	{r3, lr}
   d766a:	4b02      	ldr	r3, [pc, #8]	; (d7674 <system_delay_ms+0xc>)
   d766c:	681b      	ldr	r3, [r3, #0]
   d766e:	695b      	ldr	r3, [r3, #20]
   d7670:	9301      	str	r3, [sp, #4]
   d7672:	bd08      	pop	{r3, pc}
   d7674:	00030220 	.word	0x00030220

000d7678 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7678:	b508      	push	{r3, lr}
   d767a:	4b02      	ldr	r3, [pc, #8]	; (d7684 <system_thread_get_state+0xc>)
   d767c:	681b      	ldr	r3, [r3, #0]
   d767e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7680:	9301      	str	r3, [sp, #4]
   d7682:	bd08      	pop	{r3, pc}
   d7684:	00030220 	.word	0x00030220

000d7688 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7688:	b508      	push	{r3, lr}
   d768a:	4b03      	ldr	r3, [pc, #12]	; (d7698 <system_ctrl_set_app_request_handler+0x10>)
   d768c:	681b      	ldr	r3, [r3, #0]
   d768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7692:	9301      	str	r3, [sp, #4]
   d7694:	bd08      	pop	{r3, pc}
   d7696:	0000      	.short	0x0000
   d7698:	00030220 	.word	0x00030220

000d769c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d769c:	b508      	push	{r3, lr}
   d769e:	4b03      	ldr	r3, [pc, #12]	; (d76ac <system_ctrl_set_result+0x10>)
   d76a0:	681b      	ldr	r3, [r3, #0]
   d76a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d76a6:	9301      	str	r3, [sp, #4]
   d76a8:	bd08      	pop	{r3, pc}
   d76aa:	0000      	.short	0x0000
   d76ac:	00030220 	.word	0x00030220

000d76b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d76b0:	b508      	push	{r3, lr}
   d76b2:	4b02      	ldr	r3, [pc, #8]	; (d76bc <network_connect+0xc>)
   d76b4:	681b      	ldr	r3, [r3, #0]
   d76b6:	685b      	ldr	r3, [r3, #4]
   d76b8:	9301      	str	r3, [sp, #4]
   d76ba:	bd08      	pop	{r3, pc}
   d76bc:	00030240 	.word	0x00030240

000d76c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d76c0:	b508      	push	{r3, lr}
   d76c2:	4b02      	ldr	r3, [pc, #8]	; (d76cc <network_connecting+0xc>)
   d76c4:	681b      	ldr	r3, [r3, #0]
   d76c6:	689b      	ldr	r3, [r3, #8]
   d76c8:	9301      	str	r3, [sp, #4]
   d76ca:	bd08      	pop	{r3, pc}
   d76cc:	00030240 	.word	0x00030240

000d76d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d76d0:	b508      	push	{r3, lr}
   d76d2:	4b02      	ldr	r3, [pc, #8]	; (d76dc <network_disconnect+0xc>)
   d76d4:	681b      	ldr	r3, [r3, #0]
   d76d6:	68db      	ldr	r3, [r3, #12]
   d76d8:	9301      	str	r3, [sp, #4]
   d76da:	bd08      	pop	{r3, pc}
   d76dc:	00030240 	.word	0x00030240

000d76e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d76e0:	b508      	push	{r3, lr}
   d76e2:	4b02      	ldr	r3, [pc, #8]	; (d76ec <network_ready+0xc>)
   d76e4:	681b      	ldr	r3, [r3, #0]
   d76e6:	691b      	ldr	r3, [r3, #16]
   d76e8:	9301      	str	r3, [sp, #4]
   d76ea:	bd08      	pop	{r3, pc}
   d76ec:	00030240 	.word	0x00030240

000d76f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d76f0:	b508      	push	{r3, lr}
   d76f2:	4b02      	ldr	r3, [pc, #8]	; (d76fc <network_on+0xc>)
   d76f4:	681b      	ldr	r3, [r3, #0]
   d76f6:	695b      	ldr	r3, [r3, #20]
   d76f8:	9301      	str	r3, [sp, #4]
   d76fa:	bd08      	pop	{r3, pc}
   d76fc:	00030240 	.word	0x00030240

000d7700 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7700:	b508      	push	{r3, lr}
   d7702:	4b02      	ldr	r3, [pc, #8]	; (d770c <network_off+0xc>)
   d7704:	681b      	ldr	r3, [r3, #0]
   d7706:	699b      	ldr	r3, [r3, #24]
   d7708:	9301      	str	r3, [sp, #4]
   d770a:	bd08      	pop	{r3, pc}
   d770c:	00030240 	.word	0x00030240

000d7710 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7710:	b508      	push	{r3, lr}
   d7712:	4b02      	ldr	r3, [pc, #8]	; (d771c <network_listen+0xc>)
   d7714:	681b      	ldr	r3, [r3, #0]
   d7716:	69db      	ldr	r3, [r3, #28]
   d7718:	9301      	str	r3, [sp, #4]
   d771a:	bd08      	pop	{r3, pc}
   d771c:	00030240 	.word	0x00030240

000d7720 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7720:	b508      	push	{r3, lr}
   d7722:	4b02      	ldr	r3, [pc, #8]	; (d772c <network_listening+0xc>)
   d7724:	681b      	ldr	r3, [r3, #0]
   d7726:	6a1b      	ldr	r3, [r3, #32]
   d7728:	9301      	str	r3, [sp, #4]
   d772a:	bd08      	pop	{r3, pc}
   d772c:	00030240 	.word	0x00030240

000d7730 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7730:	b508      	push	{r3, lr}
   d7732:	4b02      	ldr	r3, [pc, #8]	; (d773c <network_set_listen_timeout+0xc>)
   d7734:	681b      	ldr	r3, [r3, #0]
   d7736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7738:	9301      	str	r3, [sp, #4]
   d773a:	bd08      	pop	{r3, pc}
   d773c:	00030240 	.word	0x00030240

000d7740 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7740:	b508      	push	{r3, lr}
   d7742:	4b02      	ldr	r3, [pc, #8]	; (d774c <network_get_listen_timeout+0xc>)
   d7744:	681b      	ldr	r3, [r3, #0]
   d7746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7748:	9301      	str	r3, [sp, #4]
   d774a:	bd08      	pop	{r3, pc}
   d774c:	00030240 	.word	0x00030240

000d7750 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7750:	b508      	push	{r3, lr}
   d7752:	4b02      	ldr	r3, [pc, #8]	; (d775c <spark_process+0xc>)
   d7754:	681b      	ldr	r3, [r3, #0]
   d7756:	689b      	ldr	r3, [r3, #8]
   d7758:	9301      	str	r3, [sp, #4]
   d775a:	bd08      	pop	{r3, pc}
   d775c:	00030244 	.word	0x00030244

000d7760 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7760:	b508      	push	{r3, lr}
   d7762:	4b02      	ldr	r3, [pc, #8]	; (d776c <spark_cloud_flag_connected+0xc>)
   d7764:	681b      	ldr	r3, [r3, #0]
   d7766:	695b      	ldr	r3, [r3, #20]
   d7768:	9301      	str	r3, [sp, #4]
   d776a:	bd08      	pop	{r3, pc}
   d776c:	00030244 	.word	0x00030244

000d7770 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d7770:	b508      	push	{r3, lr}
   d7772:	4b02      	ldr	r3, [pc, #8]	; (d777c <spark_sync_time+0xc>)
   d7774:	681b      	ldr	r3, [r3, #0]
   d7776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7778:	9301      	str	r3, [sp, #4]
   d777a:	bd08      	pop	{r3, pc}
   d777c:	00030244 	.word	0x00030244

000d7780 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7780:	b508      	push	{r3, lr}
   d7782:	4b02      	ldr	r3, [pc, #8]	; (d778c <spark_sync_time_pending+0xc>)
   d7784:	681b      	ldr	r3, [r3, #0]
   d7786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7788:	9301      	str	r3, [sp, #4]
   d778a:	bd08      	pop	{r3, pc}
   d778c:	00030244 	.word	0x00030244

000d7790 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7790:	b508      	push	{r3, lr}
   d7792:	4b02      	ldr	r3, [pc, #8]	; (d779c <spark_set_random_seed_from_cloud_handler+0xc>)
   d7794:	681b      	ldr	r3, [r3, #0]
   d7796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7798:	9301      	str	r3, [sp, #4]
   d779a:	bd08      	pop	{r3, pc}
   d779c:	00030244 	.word	0x00030244

000d77a0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d77a0:	b508      	push	{r3, lr}
   d77a2:	4b02      	ldr	r3, [pc, #8]	; (d77ac <malloc+0xc>)
   d77a4:	681b      	ldr	r3, [r3, #0]
   d77a6:	681b      	ldr	r3, [r3, #0]
   d77a8:	9301      	str	r3, [sp, #4]
   d77aa:	bd08      	pop	{r3, pc}
   d77ac:	0003021c 	.word	0x0003021c

000d77b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d77b0:	b508      	push	{r3, lr}
   d77b2:	4b02      	ldr	r3, [pc, #8]	; (d77bc <free+0xc>)
   d77b4:	681b      	ldr	r3, [r3, #0]
   d77b6:	685b      	ldr	r3, [r3, #4]
   d77b8:	9301      	str	r3, [sp, #4]
   d77ba:	bd08      	pop	{r3, pc}
   d77bc:	0003021c 	.word	0x0003021c

000d77c0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d77c0:	b508      	push	{r3, lr}
   d77c2:	4b02      	ldr	r3, [pc, #8]	; (d77cc <realloc+0xc>)
   d77c4:	681b      	ldr	r3, [r3, #0]
   d77c6:	689b      	ldr	r3, [r3, #8]
   d77c8:	9301      	str	r3, [sp, #4]
   d77ca:	bd08      	pop	{r3, pc}
   d77cc:	0003021c 	.word	0x0003021c

000d77d0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d77d0:	b508      	push	{r3, lr}
   d77d2:	4b02      	ldr	r3, [pc, #8]	; (d77dc <siprintf+0xc>)
   d77d4:	681b      	ldr	r3, [r3, #0]
   d77d6:	691b      	ldr	r3, [r3, #16]
   d77d8:	9301      	str	r3, [sp, #4]
   d77da:	bd08      	pop	{r3, pc}
   d77dc:	0003021c 	.word	0x0003021c

000d77e0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d77e0:	b508      	push	{r3, lr}
   d77e2:	4b02      	ldr	r3, [pc, #8]	; (d77ec <siscanf+0xc>)
   d77e4:	681b      	ldr	r3, [r3, #0]
   d77e6:	699b      	ldr	r3, [r3, #24]
   d77e8:	9301      	str	r3, [sp, #4]
   d77ea:	bd08      	pop	{r3, pc}
   d77ec:	0003021c 	.word	0x0003021c

000d77f0 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d77f0:	b508      	push	{r3, lr}
   d77f2:	4b02      	ldr	r3, [pc, #8]	; (d77fc <vsnprintf+0xc>)
   d77f4:	681b      	ldr	r3, [r3, #0]
   d77f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d77f8:	9301      	str	r3, [sp, #4]
   d77fa:	bd08      	pop	{r3, pc}
   d77fc:	0003021c 	.word	0x0003021c

000d7800 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7800:	b508      	push	{r3, lr}
   d7802:	4b02      	ldr	r3, [pc, #8]	; (d780c <_malloc_r+0xc>)
   d7804:	681b      	ldr	r3, [r3, #0]
   d7806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7808:	9301      	str	r3, [sp, #4]
   d780a:	bd08      	pop	{r3, pc}
   d780c:	0003021c 	.word	0x0003021c

000d7810 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7810:	b508      	push	{r3, lr}
   d7812:	4b02      	ldr	r3, [pc, #8]	; (d781c <__errno+0xc>)
   d7814:	681b      	ldr	r3, [r3, #0]
   d7816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7818:	9301      	str	r3, [sp, #4]
   d781a:	bd08      	pop	{r3, pc}
   d781c:	0003021c 	.word	0x0003021c

000d7820 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7820:	2200      	movs	r2, #0
   d7822:	4611      	mov	r1, r2
   d7824:	6840      	ldr	r0, [r0, #4]
   d7826:	f7ff bf7b 	b.w	d7720 <network_listening>

000d782a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d782a:	2200      	movs	r2, #0
   d782c:	4611      	mov	r1, r2
   d782e:	6840      	ldr	r0, [r0, #4]
   d7830:	f7ff bf86 	b.w	d7740 <network_get_listen_timeout>

000d7834 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7834:	2200      	movs	r2, #0
   d7836:	6840      	ldr	r0, [r0, #4]
   d7838:	f7ff bf7a 	b.w	d7730 <network_set_listen_timeout>

000d783c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d783c:	2200      	movs	r2, #0
   d783e:	f081 0101 	eor.w	r1, r1, #1
   d7842:	6840      	ldr	r0, [r0, #4]
   d7844:	f7ff bf64 	b.w	d7710 <network_listen>

000d7848 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7848:	2300      	movs	r3, #0
   d784a:	461a      	mov	r2, r3
   d784c:	4619      	mov	r1, r3
   d784e:	6840      	ldr	r0, [r0, #4]
   d7850:	f7ff bf56 	b.w	d7700 <network_off>

000d7854 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7854:	2300      	movs	r3, #0
   d7856:	461a      	mov	r2, r3
   d7858:	4619      	mov	r1, r3
   d785a:	6840      	ldr	r0, [r0, #4]
   d785c:	f7ff bf48 	b.w	d76f0 <network_on>

000d7860 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7860:	2200      	movs	r2, #0
   d7862:	4611      	mov	r1, r2
   d7864:	6840      	ldr	r0, [r0, #4]
   d7866:	f7ff bf3b 	b.w	d76e0 <network_ready>

000d786a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d786a:	2200      	movs	r2, #0
   d786c:	4611      	mov	r1, r2
   d786e:	6840      	ldr	r0, [r0, #4]
   d7870:	f7ff bf26 	b.w	d76c0 <network_connecting>

000d7874 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7874:	2200      	movs	r2, #0
   d7876:	2102      	movs	r1, #2
   d7878:	6840      	ldr	r0, [r0, #4]
   d787a:	f7ff bf29 	b.w	d76d0 <network_disconnect>

000d787e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d787e:	2300      	movs	r3, #0
   d7880:	461a      	mov	r2, r3
   d7882:	6840      	ldr	r0, [r0, #4]
   d7884:	f7ff bf14 	b.w	d76b0 <network_connect>

000d7888 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7888:	4b02      	ldr	r3, [pc, #8]	; (d7894 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d788a:	2203      	movs	r2, #3
   d788c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d788e:	4a02      	ldr	r2, [pc, #8]	; (d7898 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7890:	601a      	str	r2, [r3, #0]
   d7892:	4770      	bx	lr
   d7894:	2003e3ac 	.word	0x2003e3ac
   d7898:	000da598 	.word	0x000da598

000d789c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d789c:	2100      	movs	r1, #0
   d789e:	f7ff bd33 	b.w	d7308 <HAL_SPI_Acquire>

000d78a2 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d78a2:	2100      	movs	r1, #0
   d78a4:	f7ff bd38 	b.w	d7318 <HAL_SPI_Release>

000d78a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d78a8:	b510      	push	{r4, lr}
   d78aa:	4604      	mov	r4, r0
{
    _spi = spi;
   d78ac:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d78ae:	4608      	mov	r0, r1
   d78b0:	f7ff fcfa 	bl	d72a8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d78b4:	2300      	movs	r3, #0
   d78b6:	6063      	str	r3, [r4, #4]
}
   d78b8:	4620      	mov	r0, r4
   d78ba:	bd10      	pop	{r4, pc}

000d78bc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d78bc:	b510      	push	{r4, lr}
   d78be:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d78c0:	7800      	ldrb	r0, [r0, #0]
   d78c2:	f7ff ffeb 	bl	d789c <_ZN8SPIClass4lockEv.isra.0>
   d78c6:	b948      	cbnz	r0, d78dc <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d78c8:	7820      	ldrb	r0, [r4, #0]
   d78ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d78ce:	f7ff fcdb 	bl	d7288 <HAL_SPI_Begin>
        unlock();
   d78d2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d78d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d78d8:	f7ff bfe3 	b.w	d78a2 <_ZN8SPIClass6unlockEv.isra.1>
   d78dc:	bd10      	pop	{r4, pc}

000d78de <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d78de:	7800      	ldrb	r0, [r0, #0]
   d78e0:	f7ff bfdf 	b.w	d78a2 <_ZN8SPIClass6unlockEv.isra.1>

000d78e4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d78e4:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d78e6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d78e8:	6018      	str	r0, [r3, #0]
   d78ea:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d78ec:	6818      	ldr	r0, [r3, #0]
   d78ee:	4288      	cmp	r0, r1
   d78f0:	b2e5      	uxtb	r5, r4
   d78f2:	d906      	bls.n	d7902 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d78f4:	3401      	adds	r4, #1
   d78f6:	2c08      	cmp	r4, #8
   d78f8:	d002      	beq.n	d7900 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d78fa:	0840      	lsrs	r0, r0, #1
   d78fc:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d78fe:	e7f5      	b.n	d78ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7900:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d7902:	4b02      	ldr	r3, [pc, #8]	; (d790c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7904:	5d5b      	ldrb	r3, [r3, r5]
   d7906:	7013      	strb	r3, [r2, #0]
   d7908:	bd30      	pop	{r4, r5, pc}
   d790a:	bf00      	nop
   d790c:	000da5c4 	.word	0x000da5c4

000d7910 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7914:	4607      	mov	r7, r0
   d7916:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d7918:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d791a:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d791c:	f7ff ffbe 	bl	d789c <_ZN8SPIClass4lockEv.isra.0>
   d7920:	2800      	cmp	r0, #0
   d7922:	db62      	blt.n	d79ea <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d7924:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d7926:	2214      	movs	r2, #20
   d7928:	2100      	movs	r1, #0
   d792a:	a809      	add	r0, sp, #36	; 0x24
   d792c:	f001 ff38 	bl	d97a0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7930:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d7932:	4620      	mov	r0, r4
   d7934:	2200      	movs	r2, #0
   d7936:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d7938:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d793c:	f7ff fcc4 	bl	d72c8 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d7940:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7944:	b154      	cbz	r4, d795c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d7946:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d794a:	b935      	cbnz	r5, d795a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d794c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7950:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7954:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7958:	e003      	b.n	d7962 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d795a:	2400      	movs	r4, #0
   d795c:	46a1      	mov	r9, r4
   d795e:	46a0      	mov	r8, r4
   d7960:	2501      	movs	r5, #1
   d7962:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7964:	b105      	cbz	r5, d7968 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d7966:	b9bb      	cbnz	r3, d7998 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d7968:	429d      	cmp	r5, r3
   d796a:	d10b      	bne.n	d7984 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d796c:	68b2      	ldr	r2, [r6, #8]
   d796e:	4542      	cmp	r2, r8
   d7970:	d108      	bne.n	d7984 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7972:	f88d 9020 	strb.w	r9, [sp, #32]
   d7976:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d797a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d797e:	89b2      	ldrh	r2, [r6, #12]
   d7980:	4291      	cmp	r1, r2
   d7982:	d009      	beq.n	d7998 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d7984:	b153      	cbz	r3, d799c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7986:	2400      	movs	r4, #0
   d7988:	7838      	ldrb	r0, [r7, #0]
   d798a:	9401      	str	r4, [sp, #4]
   d798c:	9400      	str	r4, [sp, #0]
   d798e:	4623      	mov	r3, r4
   d7990:	4622      	mov	r2, r4
   d7992:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d7994:	f7ff fcb0 	bl	d72f8 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d7998:	2000      	movs	r0, #0
   d799a:	e026      	b.n	d79ea <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d799c:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d79a0:	68b1      	ldr	r1, [r6, #8]
   d79a2:	980a      	ldr	r0, [sp, #40]	; 0x28
   d79a4:	ab04      	add	r3, sp, #16
   d79a6:	f10d 020f 	add.w	r2, sp, #15
   d79aa:	f7ff ff9b 	bl	d78e4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d79ae:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d79b0:	b105      	cbz	r5, d79b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d79b2:	b9b1      	cbnz	r1, d79e2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d79b4:	42a9      	cmp	r1, r5
   d79b6:	d008      	beq.n	d79ca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d79b8:	2400      	movs	r4, #0
   d79ba:	7838      	ldrb	r0, [r7, #0]
   d79bc:	9401      	str	r4, [sp, #4]
   d79be:	7b74      	ldrb	r4, [r6, #13]
   d79c0:	7b33      	ldrb	r3, [r6, #12]
   d79c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d79c6:	9400      	str	r4, [sp, #0]
   d79c8:	e7e4      	b.n	d7994 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d79ca:	68b3      	ldr	r3, [r6, #8]
   d79cc:	4543      	cmp	r3, r8
   d79ce:	d3f3      	bcc.n	d79b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d79d0:	f88d 9020 	strb.w	r9, [sp, #32]
   d79d4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d79d8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d79dc:	89b3      	ldrh	r3, [r6, #12]
   d79de:	429a      	cmp	r2, r3
   d79e0:	d1ea      	bne.n	d79b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d79e2:	9b04      	ldr	r3, [sp, #16]
   d79e4:	4543      	cmp	r3, r8
   d79e6:	d1e7      	bne.n	d79b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d79e8:	e7d6      	b.n	d7998 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d79ea:	b00f      	add	sp, #60	; 0x3c
   d79ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d79f0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d79f0:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d79f2:	7800      	ldrb	r0, [r0, #0]
   d79f4:	f7ff fc50 	bl	d7298 <HAL_SPI_Send_Receive_Data>
}
   d79f8:	b2c0      	uxtb	r0, r0
   d79fa:	bd08      	pop	{r3, pc}

000d79fc <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d79fc:	b530      	push	{r4, r5, lr}
   d79fe:	b087      	sub	sp, #28
   d7a00:	4604      	mov	r4, r0
   d7a02:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7a04:	7800      	ldrb	r0, [r0, #0]
   d7a06:	9500      	str	r5, [sp, #0]
   d7a08:	f7ff fc66 	bl	d72d8 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d7a0c:	b93d      	cbnz	r5, d7a1e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d7a0e:	a902      	add	r1, sp, #8
   d7a10:	7820      	ldrb	r0, [r4, #0]
   d7a12:	f7ff fc69 	bl	d72e8 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d7a16:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7a1a:	07db      	lsls	r3, r3, #31
   d7a1c:	d4f7      	bmi.n	d7a0e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d7a1e:	b007      	add	sp, #28
   d7a20:	bd30      	pop	{r4, r5, pc}

000d7a22 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d7a22:	7800      	ldrb	r0, [r0, #0]
   d7a24:	f7ff bc48 	b.w	d72b8 <HAL_SPI_Is_Enabled>

000d7a28 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7a28:	b510      	push	{r4, lr}
   d7a2a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7a2c:	6800      	ldr	r0, [r0, #0]
   d7a2e:	b118      	cbz	r0, d7a38 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d7a30:	f7ff febe 	bl	d77b0 <free>
            wakeupSource_ = nullptr;
   d7a34:	2300      	movs	r3, #0
   d7a36:	6023      	str	r3, [r4, #0]
   d7a38:	bd10      	pop	{r4, pc}

000d7a3a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7a3a:	b510      	push	{r4, lr}
   d7a3c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7a3e:	f7ff fff3 	bl	d7a28 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7a42:	4620      	mov	r0, r4
   d7a44:	bd10      	pop	{r4, pc}
	...

000d7a48 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7a48:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7a4a:	4c09      	ldr	r4, [pc, #36]	; (d7a70 <_GLOBAL__sub_I_System+0x28>)
   d7a4c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7a52:	6020      	str	r0, [r4, #0]
   d7a54:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7a56:	71a0      	strb	r0, [r4, #6]
   d7a58:	8120      	strh	r0, [r4, #8]
   d7a5a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7a5c:	f7ff fdfc 	bl	d7658 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7a60:	4620      	mov	r0, r4
   d7a62:	4a04      	ldr	r2, [pc, #16]	; (d7a74 <_GLOBAL__sub_I_System+0x2c>)
   d7a64:	4904      	ldr	r1, [pc, #16]	; (d7a78 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7a6a:	f001 ba1b 	b.w	d8ea4 <__aeabi_atexit>
   d7a6e:	bf00      	nop
   d7a70:	2003e3b4 	.word	0x2003e3b4
   d7a74:	2003dcd8 	.word	0x2003dcd8
   d7a78:	000d7a3b 	.word	0x000d7a3b

000d7a7c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7a7c:	b510      	push	{r4, lr}
   d7a7e:	4604      	mov	r4, r0
{
	free(buffer);
   d7a80:	6800      	ldr	r0, [r0, #0]
   d7a82:	f7ff fe95 	bl	d77b0 <free>
}
   d7a86:	4620      	mov	r0, r4
   d7a88:	bd10      	pop	{r4, pc}

000d7a8a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7a8a:	b510      	push	{r4, lr}
   d7a8c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7a8e:	6800      	ldr	r0, [r0, #0]
   d7a90:	b108      	cbz	r0, d7a96 <_ZN6String10invalidateEv+0xc>
   d7a92:	f7ff fe8d 	bl	d77b0 <free>
	buffer = NULL;
   d7a96:	2300      	movs	r3, #0
   d7a98:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7a9a:	60a3      	str	r3, [r4, #8]
   d7a9c:	6063      	str	r3, [r4, #4]
   d7a9e:	bd10      	pop	{r4, pc}

000d7aa0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7aa0:	b538      	push	{r3, r4, r5, lr}
   d7aa2:	4604      	mov	r4, r0
   d7aa4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7aa6:	6800      	ldr	r0, [r0, #0]
   d7aa8:	3101      	adds	r1, #1
   d7aaa:	f7ff fe89 	bl	d77c0 <realloc>
	if (newbuffer) {
   d7aae:	b110      	cbz	r0, d7ab6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7ab0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7ab4:	2001      	movs	r0, #1
	}
	return 0;
}
   d7ab6:	bd38      	pop	{r3, r4, r5, pc}

000d7ab8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7ab8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7aba:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7abc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7abe:	b113      	cbz	r3, d7ac6 <_ZN6String7reserveEj+0xe>
   d7ac0:	6843      	ldr	r3, [r0, #4]
   d7ac2:	428b      	cmp	r3, r1
   d7ac4:	d207      	bcs.n	d7ad6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7ac6:	4620      	mov	r0, r4
   d7ac8:	f7ff ffea 	bl	d7aa0 <_ZN6String12changeBufferEj>
   d7acc:	b120      	cbz	r0, d7ad8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7ace:	68a3      	ldr	r3, [r4, #8]
   d7ad0:	b90b      	cbnz	r3, d7ad6 <_ZN6String7reserveEj+0x1e>
   d7ad2:	6822      	ldr	r2, [r4, #0]
   d7ad4:	7013      	strb	r3, [r2, #0]
   d7ad6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7ad8:	bd10      	pop	{r4, pc}

000d7ada <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7ada:	b570      	push	{r4, r5, r6, lr}
   d7adc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7ade:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7ae0:	4604      	mov	r4, r0
   d7ae2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7ae4:	f7ff ffe8 	bl	d7ab8 <_ZN6String7reserveEj>
   d7ae8:	b918      	cbnz	r0, d7af2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7aea:	4620      	mov	r0, r4
   d7aec:	f7ff ffcd 	bl	d7a8a <_ZN6String10invalidateEv>
		return *this;
   d7af0:	e009      	b.n	d7b06 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7af2:	462a      	mov	r2, r5
   d7af4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7af6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7af8:	6820      	ldr	r0, [r4, #0]
   d7afa:	f001 fe46 	bl	d978a <memcpy>
	buffer[len] = 0;
   d7afe:	6822      	ldr	r2, [r4, #0]
   d7b00:	68a3      	ldr	r3, [r4, #8]
   d7b02:	2100      	movs	r1, #0
   d7b04:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7b06:	4620      	mov	r0, r4
   d7b08:	bd70      	pop	{r4, r5, r6, pc}

000d7b0a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7b0a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7b0c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7b0e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7b10:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7b12:	6043      	str	r3, [r0, #4]
	len = 0;
   d7b14:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7b16:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7b18:	460d      	mov	r5, r1
   d7b1a:	b139      	cbz	r1, d7b2c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7b1c:	4608      	mov	r0, r1
   d7b1e:	f001 fe81 	bl	d9824 <strlen>
   d7b22:	4629      	mov	r1, r5
   d7b24:	4602      	mov	r2, r0
   d7b26:	4620      	mov	r0, r4
   d7b28:	f7ff ffd7 	bl	d7ada <_ZN6String4copyEPKcj>
}
   d7b2c:	4620      	mov	r0, r4
   d7b2e:	bd38      	pop	{r3, r4, r5, pc}

000d7b30 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7b30:	b538      	push	{r3, r4, r5, lr}
   d7b32:	4605      	mov	r5, r0
	if (buffer) {
   d7b34:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d7b36:	460c      	mov	r4, r1
	if (buffer) {
   d7b38:	b160      	cbz	r0, d7b54 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d7b3a:	686a      	ldr	r2, [r5, #4]
   d7b3c:	688b      	ldr	r3, [r1, #8]
   d7b3e:	429a      	cmp	r2, r3
   d7b40:	d306      	bcc.n	d7b50 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d7b42:	6809      	ldr	r1, [r1, #0]
   d7b44:	f001 fe66 	bl	d9814 <strcpy>
			len = rhs.len;
   d7b48:	68a3      	ldr	r3, [r4, #8]
   d7b4a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d7b4c:	2300      	movs	r3, #0
   d7b4e:	e00a      	b.n	d7b66 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d7b50:	f7ff fe2e 	bl	d77b0 <free>
		}
	}
	buffer = rhs.buffer;
   d7b54:	6823      	ldr	r3, [r4, #0]
   d7b56:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d7b58:	6863      	ldr	r3, [r4, #4]
   d7b5a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d7b5c:	68a3      	ldr	r3, [r4, #8]
   d7b5e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d7b60:	2300      	movs	r3, #0
   d7b62:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d7b64:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d7b66:	60a3      	str	r3, [r4, #8]
   d7b68:	bd38      	pop	{r3, r4, r5, pc}

000d7b6a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d7b6a:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d7b6c:	b510      	push	{r4, lr}
   d7b6e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d7b70:	d001      	beq.n	d7b76 <_ZN6StringaSEOS_+0xc>
   d7b72:	f7ff ffdd 	bl	d7b30 <_ZN6String4moveERS_>
	return *this;
}
   d7b76:	4620      	mov	r0, r4
   d7b78:	bd10      	pop	{r4, pc}

000d7b7a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d7b7a:	b570      	push	{r4, r5, r6, lr}
   d7b7c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d7b7e:	b19a      	cbz	r2, d7ba8 <_ZNK6String8getBytesEPhjj+0x2e>
   d7b80:	b191      	cbz	r1, d7ba8 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d7b82:	6885      	ldr	r5, [r0, #8]
   d7b84:	429d      	cmp	r5, r3
   d7b86:	d802      	bhi.n	d7b8e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7b88:	2300      	movs	r3, #0
   d7b8a:	700b      	strb	r3, [r1, #0]
		return;
   d7b8c:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d7b8e:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d7b90:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d7b92:	6801      	ldr	r1, [r0, #0]
   d7b94:	42ac      	cmp	r4, r5
   d7b96:	bf28      	it	cs
   d7b98:	462c      	movcs	r4, r5
   d7b9a:	4419      	add	r1, r3
   d7b9c:	4622      	mov	r2, r4
   d7b9e:	4630      	mov	r0, r6
   d7ba0:	f001 fe5d 	bl	d985e <strncpy>
	buf[n] = 0;
   d7ba4:	2300      	movs	r3, #0
   d7ba6:	5533      	strb	r3, [r6, r4]
   d7ba8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7bac <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d7bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d7bae:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d7bb0:	460f      	mov	r7, r1
   d7bb2:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d7bb4:	490c      	ldr	r1, [pc, #48]	; (d7be8 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d7bb6:	bf88      	it	hi
   d7bb8:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d7bba:	4614      	mov	r4, r2
   d7bbc:	4606      	mov	r6, r0
	if (left > right) {
   d7bbe:	bf84      	itt	hi
   d7bc0:	462c      	movhi	r4, r5
   d7bc2:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d7bc4:	f7ff ffa1 	bl	d7b0a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d7bc8:	68ba      	ldr	r2, [r7, #8]
   d7bca:	4294      	cmp	r4, r2
   d7bcc:	d80a      	bhi.n	d7be4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d7bce:	6839      	ldr	r1, [r7, #0]
   d7bd0:	4295      	cmp	r5, r2
   d7bd2:	bf94      	ite	ls
   d7bd4:	ebc4 0205 	rsbls	r2, r4, r5
   d7bd8:	ebc4 0202 	rsbhi	r2, r4, r2
   d7bdc:	4421      	add	r1, r4
   d7bde:	4630      	mov	r0, r6
   d7be0:	f7ff ff7b 	bl	d7ada <_ZN6String4copyEPKcj>
	return out;
}
   d7be4:	4630      	mov	r0, r6
   d7be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7be8:	000da3a9 	.word	0x000da3a9

000d7bec <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7bec:	b510      	push	{r4, lr}
   d7bee:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7bf0:	6800      	ldr	r0, [r0, #0]
   d7bf2:	b108      	cbz	r0, d7bf8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7bf4:	f7ff fbf0 	bl	d73d8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d7bf8:	4620      	mov	r0, r4
   d7bfa:	bd10      	pop	{r4, pc}

000d7bfc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7bfc:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7bfe:	4c06      	ldr	r4, [pc, #24]	; (d7c18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7c00:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d7c02:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7c04:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7c06:	f7ff fbdf 	bl	d73c8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7c0a:	4620      	mov	r0, r4
   d7c0c:	4a03      	ldr	r2, [pc, #12]	; (d7c1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7c0e:	4904      	ldr	r1, [pc, #16]	; (d7c20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7c14:	f001 b946 	b.w	d8ea4 <__aeabi_atexit>
   d7c18:	2003e3c0 	.word	0x2003e3c0
   d7c1c:	2003dcd8 	.word	0x2003dcd8
   d7c20:	000d7bed 	.word	0x000d7bed

000d7c24 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c26:	4606      	mov	r6, r0
   d7c28:	460d      	mov	r5, r1
   d7c2a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7c2c:	2400      	movs	r4, #0
  while (size--) {
   d7c2e:	42bd      	cmp	r5, r7
   d7c30:	d00c      	beq.n	d7c4c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7c32:	6833      	ldr	r3, [r6, #0]
   d7c34:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7c38:	689b      	ldr	r3, [r3, #8]
   d7c3a:	4630      	mov	r0, r6
   d7c3c:	4798      	blx	r3
     if (chunk>=0)
   d7c3e:	2800      	cmp	r0, #0
   d7c40:	db01      	blt.n	d7c46 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7c42:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7c44:	e7f3      	b.n	d7c2e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7c46:	2c00      	cmp	r4, #0
   d7c48:	bf08      	it	eq
   d7c4a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c50 <_ZN5Print5printEPKc>:
   d7c50:	b508      	push	{r3, lr}
   d7c52:	f7fe fcb5 	bl	d65c0 <_ZN5Print5writeEPKc>
   d7c56:	bd08      	pop	{r3, pc}

000d7c58 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7c58:	6803      	ldr	r3, [r0, #0]
   d7c5a:	689b      	ldr	r3, [r3, #8]
   d7c5c:	4718      	bx	r3

000d7c5e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7c5e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7c60:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7c62:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7c64:	f7ff fff8 	bl	d7c58 <_ZN5Print5printEc>
  n += print('\n');
   d7c68:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7c6a:	4604      	mov	r4, r0
  n += print('\n');
   d7c6c:	4628      	mov	r0, r5
   d7c6e:	f7ff fff3 	bl	d7c58 <_ZN5Print5printEc>
  return n;
}
   d7c72:	4420      	add	r0, r4
   d7c74:	bd38      	pop	{r3, r4, r5, pc}

000d7c76 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7c76:	b538      	push	{r3, r4, r5, lr}
   d7c78:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7c7a:	f7fe fca1 	bl	d65c0 <_ZN5Print5writeEPKc>
   d7c7e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7c80:	4628      	mov	r0, r5
   d7c82:	f7ff ffec 	bl	d7c5e <_ZN5Print7printlnEv>
  return n;
}
   d7c86:	4420      	add	r0, r4
   d7c88:	bd38      	pop	{r3, r4, r5, pc}

000d7c8a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7c8a:	b530      	push	{r4, r5, lr}
   d7c8c:	b08b      	sub	sp, #44	; 0x2c
   d7c8e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7c90:	2100      	movs	r1, #0
   d7c92:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7c96:	2a01      	cmp	r2, #1
   d7c98:	bf98      	it	ls
   d7c9a:	220a      	movls	r2, #10
   d7c9c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7ca0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7ca4:	fb05 3312 	mls	r3, r5, r2, r3
   d7ca8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7cac:	2b09      	cmp	r3, #9
   d7cae:	bf94      	ite	ls
   d7cb0:	3330      	addls	r3, #48	; 0x30
   d7cb2:	3337      	addhi	r3, #55	; 0x37
   d7cb4:	b2db      	uxtb	r3, r3
   d7cb6:	4621      	mov	r1, r4
   d7cb8:	f804 3901 	strb.w	r3, [r4], #-1
   d7cbc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7cbe:	2d00      	cmp	r5, #0
   d7cc0:	d1ee      	bne.n	d7ca0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7cc2:	f7fe fc7d 	bl	d65c0 <_ZN5Print5writeEPKc>
}
   d7cc6:	b00b      	add	sp, #44	; 0x2c
   d7cc8:	bd30      	pop	{r4, r5, pc}

000d7cca <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7cca:	b40c      	push	{r2, r3}
   d7ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7cd0:	b087      	sub	sp, #28
   d7cd2:	af00      	add	r7, sp, #0
   d7cd4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7cd8:	4605      	mov	r5, r0
   d7cda:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7cde:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7ce0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7ce2:	4623      	mov	r3, r4
   d7ce4:	464a      	mov	r2, r9
   d7ce6:	2114      	movs	r1, #20
   d7ce8:	1d38      	adds	r0, r7, #4
   d7cea:	f7ff fd81 	bl	d77f0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7cee:	2813      	cmp	r0, #19
   d7cf0:	d805      	bhi.n	d7cfe <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7cf2:	1d39      	adds	r1, r7, #4
   d7cf4:	4628      	mov	r0, r5
   d7cf6:	f7fe fc63 	bl	d65c0 <_ZN5Print5writeEPKc>
   d7cfa:	4604      	mov	r4, r0
   d7cfc:	e013      	b.n	d7d26 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7cfe:	f100 0308 	add.w	r3, r0, #8
   d7d02:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7d06:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7d08:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7d0c:	1c41      	adds	r1, r0, #1
   d7d0e:	4623      	mov	r3, r4
   d7d10:	464a      	mov	r2, r9
   d7d12:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7d14:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7d16:	f7ff fd6b 	bl	d77f0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7d1a:	4669      	mov	r1, sp
   d7d1c:	4628      	mov	r0, r5
   d7d1e:	f7fe fc4f 	bl	d65c0 <_ZN5Print5writeEPKc>
   d7d22:	4604      	mov	r4, r0
   d7d24:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7d26:	b11e      	cbz	r6, d7d30 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7d28:	4628      	mov	r0, r5
   d7d2a:	f7ff ff98 	bl	d7c5e <_ZN5Print7printlnEv>
   d7d2e:	4404      	add	r4, r0
    return n;
}
   d7d30:	4620      	mov	r0, r4
   d7d32:	371c      	adds	r7, #28
   d7d34:	46bd      	mov	sp, r7
   d7d36:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7d3a:	b002      	add	sp, #8
   d7d3c:	4770      	bx	lr
	...

000d7d40 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7d40:	4b01      	ldr	r3, [pc, #4]	; (d7d48 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7d42:	4a02      	ldr	r2, [pc, #8]	; (d7d4c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7d44:	601a      	str	r2, [r3, #0]
   d7d46:	4770      	bx	lr
   d7d48:	2003e3c4 	.word	0x2003e3c4
   d7d4c:	000da63f 	.word	0x000da63f

000d7d50 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7d50:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7d52:	2000      	movs	r0, #0
   d7d54:	f7ff fd14 	bl	d7780 <spark_sync_time_pending>
   d7d58:	b128      	cbz	r0, d7d66 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7d5a:	f7ff fd01 	bl	d7760 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7d5e:	f080 0001 	eor.w	r0, r0, #1
   d7d62:	b2c0      	uxtb	r0, r0
   d7d64:	bd08      	pop	{r3, pc}
   d7d66:	2001      	movs	r0, #1
    }
   d7d68:	bd08      	pop	{r3, pc}
	...

000d7d6c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d7d6c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7d70:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7d78:	d40f      	bmi.n	d7d9a <_ZN9TimeClass4zoneEf+0x2e>
   d7d7a:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d7d7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7d86:	dc08      	bgt.n	d7d9a <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d7d88:	eddf 7a04 	vldr	s15, [pc, #16]	; d7d9c <_ZN9TimeClass4zoneEf+0x30>
   d7d8c:	4b04      	ldr	r3, [pc, #16]	; (d7da0 <_ZN9TimeClass4zoneEf+0x34>)
   d7d8e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7d92:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d7d96:	ed83 0a00 	vstr	s0, [r3]
   d7d9a:	4770      	bx	lr
   d7d9c:	45610000 	.word	0x45610000
   d7da0:	2003e3d0 	.word	0x2003e3d0

000d7da4 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d7da6:	4b0e      	ldr	r3, [pc, #56]	; (d7de0 <_ZN9TimeClass7timeStrEl+0x3c>)
   d7da8:	681b      	ldr	r3, [r3, #0]
   d7daa:	4419      	add	r1, r3
   d7dac:	4b0d      	ldr	r3, [pc, #52]	; (d7de4 <_ZN9TimeClass7timeStrEl+0x40>)
   d7dae:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7db0:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d7db2:	a802      	add	r0, sp, #8
   d7db4:	4419      	add	r1, r3
   d7db6:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d7dba:	f001 fbdf 	bl	d957c <localtime>
        char* ascstr = asctime(calendar_time);
   d7dbe:	f001 fb93 	bl	d94e8 <asctime>
   d7dc2:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d7dc4:	f001 fd2e 	bl	d9824 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d7dc8:	4428      	add	r0, r5
   d7dca:	2300      	movs	r3, #0
   d7dcc:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d7dd0:	4629      	mov	r1, r5
   d7dd2:	4620      	mov	r0, r4
   d7dd4:	f7ff fe99 	bl	d7b0a <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7dd8:	4620      	mov	r0, r4
   d7dda:	b003      	add	sp, #12
   d7ddc:	bd30      	pop	{r4, r5, pc}
   d7dde:	bf00      	nop
   d7de0:	2003e3d0 	.word	0x2003e3d0
   d7de4:	2003e3cc 	.word	0x2003e3cc

000d7de8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7de8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7dea:	2000      	movs	r0, #0
   d7dec:	f7ff facc 	bl	d7388 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7df0:	4604      	mov	r4, r0
   d7df2:	b968      	cbnz	r0, d7e10 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7df4:	f7ff fc28 	bl	d7648 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7df8:	2801      	cmp	r0, #1
   d7dfa:	d10b      	bne.n	d7e14 <_ZN9TimeClass7isValidEv+0x2c>
   d7dfc:	4620      	mov	r0, r4
   d7dfe:	f7ff fc3b 	bl	d7678 <system_thread_get_state>
   d7e02:	b938      	cbnz	r0, d7e14 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7e04:	f7ff ffa4 	bl	d7d50 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7e08:	b930      	cbnz	r0, d7e18 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7e0a:	f7ff fca1 	bl	d7750 <spark_process>
   d7e0e:	e7f9      	b.n	d7e04 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7e10:	2001      	movs	r0, #1
   d7e12:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7e14:	2000      	movs	r0, #0
   d7e16:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7e18:	f7ff ff9a 	bl	d7d50 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d7e1c:	2000      	movs	r0, #0
   d7e1e:	f7ff fab3 	bl	d7388 <HAL_RTC_Time_Is_Valid>
   d7e22:	3000      	adds	r0, #0
   d7e24:	bf18      	it	ne
   d7e26:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7e28:	bd10      	pop	{r4, pc}

000d7e2a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7e2a:	b508      	push	{r3, lr}
    (void)isValid();
   d7e2c:	f7ff ffdc 	bl	d7de8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7e30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7e34:	f7ff baa0 	b.w	d7378 <HAL_RTC_Get_UnixTime>

000d7e38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7e38:	4b02      	ldr	r3, [pc, #8]	; (d7e44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7e3a:	681a      	ldr	r2, [r3, #0]
   d7e3c:	4b02      	ldr	r3, [pc, #8]	; (d7e48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7e3e:	601a      	str	r2, [r3, #0]
   d7e40:	4770      	bx	lr
   d7e42:	bf00      	nop
   d7e44:	2003dc20 	.word	0x2003dc20
   d7e48:	2003e3c8 	.word	0x2003e3c8

000d7e4c <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d7e4c:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d7e4e:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d7e50:	d007      	beq.n	d7e62 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d7e52:	9d03      	ldr	r5, [sp, #12]
   d7e54:	1a44      	subs	r4, r0, r1
   d7e56:	1aed      	subs	r5, r5, r3
   d7e58:	436c      	muls	r4, r5
   d7e5a:	1a52      	subs	r2, r2, r1
   d7e5c:	fb94 f4f2 	sdiv	r4, r4, r2
   d7e60:	18e0      	adds	r0, r4, r3
}
   d7e62:	bd30      	pop	{r4, r5, pc}

000d7e64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7e64:	2100      	movs	r1, #0
   d7e66:	f7ff bbff 	b.w	d7668 <system_delay_ms>

000d7e6a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7e6a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7e6c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7e6e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7e70:	b113      	cbz	r3, d7e78 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7e72:	2203      	movs	r2, #3
   d7e74:	4601      	mov	r1, r0
   d7e76:	4798      	blx	r3
    }
   d7e78:	4620      	mov	r0, r4
   d7e7a:	bd10      	pop	{r4, pc}

000d7e7c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7e7c:	b510      	push	{r4, lr}
   d7e7e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7e80:	f7ff fff3 	bl	d7e6a <_ZNSt14_Function_baseD1Ev>
   d7e84:	4620      	mov	r0, r4
   d7e86:	bd10      	pop	{r4, pc}

000d7e88 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7e88:	4803      	ldr	r0, [pc, #12]	; (d7e98 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7e8a:	4a04      	ldr	r2, [pc, #16]	; (d7e9c <_GLOBAL__sub_I_RGB+0x14>)
   d7e8c:	4904      	ldr	r1, [pc, #16]	; (d7ea0 <_GLOBAL__sub_I_RGB+0x18>)
   d7e8e:	2300      	movs	r3, #0
   d7e90:	6083      	str	r3, [r0, #8]
   d7e92:	f001 b807 	b.w	d8ea4 <__aeabi_atexit>
   d7e96:	bf00      	nop
   d7e98:	2003e3d4 	.word	0x2003e3d4
   d7e9c:	2003dcd8 	.word	0x2003dcd8
   d7ea0:	000d7e7d 	.word	0x000d7e7d

000d7ea4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7ea4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7ea6:	4b0c      	ldr	r3, [pc, #48]	; (d7ed8 <serialEventRun+0x34>)
   d7ea8:	b133      	cbz	r3, d7eb8 <serialEventRun+0x14>
   d7eaa:	f000 f96d 	bl	d8188 <_Z16_fetch_usbserialv>
   d7eae:	6803      	ldr	r3, [r0, #0]
   d7eb0:	691b      	ldr	r3, [r3, #16]
   d7eb2:	4798      	blx	r3
   d7eb4:	2800      	cmp	r0, #0
   d7eb6:	dc09      	bgt.n	d7ecc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7eb8:	4b08      	ldr	r3, [pc, #32]	; (d7edc <serialEventRun+0x38>)
   d7eba:	b163      	cbz	r3, d7ed6 <serialEventRun+0x32>
   d7ebc:	f000 fa16 	bl	d82ec <_Z22__fetch_global_Serial1v>
   d7ec0:	6803      	ldr	r3, [r0, #0]
   d7ec2:	691b      	ldr	r3, [r3, #16]
   d7ec4:	4798      	blx	r3
   d7ec6:	2800      	cmp	r0, #0
   d7ec8:	dc03      	bgt.n	d7ed2 <serialEventRun+0x2e>
   d7eca:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7ecc:	f3af 8000 	nop.w
   d7ed0:	e7f2      	b.n	d7eb8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7ed2:	f3af 8000 	nop.w
   d7ed6:	bd08      	pop	{r3, pc}
	...

000d7ee0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7ee0:	b508      	push	{r3, lr}
	serialEventRun();
   d7ee2:	f7ff ffdf 	bl	d7ea4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7ee6:	f7ff fa3f 	bl	d7368 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7eea:	4b01      	ldr	r3, [pc, #4]	; (d7ef0 <_post_loop+0x10>)
   d7eec:	6018      	str	r0, [r3, #0]
   d7eee:	bd08      	pop	{r3, pc}
   d7ef0:	2003e708 	.word	0x2003e708

000d7ef4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7ef4:	4802      	ldr	r0, [pc, #8]	; (d7f00 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7ef6:	4a03      	ldr	r2, [pc, #12]	; (d7f04 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7ef8:	4903      	ldr	r1, [pc, #12]	; (d7f08 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7efa:	1a12      	subs	r2, r2, r0
   d7efc:	f001 bc45 	b.w	d978a <memcpy>
   d7f00:	2003f400 	.word	0x2003f400
   d7f04:	2003f404 	.word	0x2003f404
   d7f08:	000dab80 	.word	0x000dab80

000d7f0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7f0c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7f0e:	2300      	movs	r3, #0
   d7f10:	9300      	str	r3, [sp, #0]
   d7f12:	461a      	mov	r2, r3
   d7f14:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7f18:	f7ff fbc0 	bl	d769c <system_ctrl_set_result>
}
   d7f1c:	b003      	add	sp, #12
   d7f1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7f24 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7f24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7f26:	8843      	ldrh	r3, [r0, #2]
   d7f28:	2b0a      	cmp	r3, #10
   d7f2a:	d008      	beq.n	d7f3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7f2c:	2b50      	cmp	r3, #80	; 0x50
   d7f2e:	d109      	bne.n	d7f44 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7f30:	4b09      	ldr	r3, [pc, #36]	; (d7f58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7f32:	681b      	ldr	r3, [r3, #0]
   d7f34:	b13b      	cbz	r3, d7f46 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7f36:	b003      	add	sp, #12
   d7f38:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7f3c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7f3e:	f7ff ffe5 	bl	d7f0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7f42:	e006      	b.n	d7f52 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7f44:	2300      	movs	r3, #0
   d7f46:	9300      	str	r3, [sp, #0]
   d7f48:	461a      	mov	r2, r3
   d7f4a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7f4e:	f7ff fba5 	bl	d769c <system_ctrl_set_result>
        break;
    }
}
   d7f52:	b003      	add	sp, #12
   d7f54:	f85d fb04 	ldr.w	pc, [sp], #4
   d7f58:	2003e3e4 	.word	0x2003e3e4

000d7f5c <module_user_init_hook>:

void module_user_init_hook()
{
   d7f5c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7f5e:	4c10      	ldr	r4, [pc, #64]	; (d7fa0 <module_user_init_hook+0x44>)
   d7f60:	4d10      	ldr	r5, [pc, #64]	; (d7fa4 <module_user_init_hook+0x48>)
   d7f62:	6823      	ldr	r3, [r4, #0]
   d7f64:	42ab      	cmp	r3, r5
   d7f66:	4b10      	ldr	r3, [pc, #64]	; (d7fa8 <module_user_init_hook+0x4c>)
   d7f68:	bf0c      	ite	eq
   d7f6a:	2201      	moveq	r2, #1
   d7f6c:	2200      	movne	r2, #0
   d7f6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7f70:	d002      	beq.n	d7f78 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7f72:	f7ff ffbf 	bl	d7ef4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7f76:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7f78:	f7ff f9de 	bl	d7338 <HAL_RNG_GetRandomNumber>
   d7f7c:	4604      	mov	r4, r0
    srand(seed);
   d7f7e:	f001 fc17 	bl	d97b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7f82:	4b0a      	ldr	r3, [pc, #40]	; (d7fac <module_user_init_hook+0x50>)
   d7f84:	b113      	cbz	r3, d7f8c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7f86:	4620      	mov	r0, r4
   d7f88:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7f8c:	2100      	movs	r1, #0
   d7f8e:	4807      	ldr	r0, [pc, #28]	; (d7fac <module_user_init_hook+0x50>)
   d7f90:	f7ff fbfe 	bl	d7790 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7f94:	2100      	movs	r1, #0
   d7f96:	4806      	ldr	r0, [pc, #24]	; (d7fb0 <module_user_init_hook+0x54>)
}
   d7f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7f9c:	f7ff bb74 	b.w	d7688 <system_ctrl_set_app_request_handler>
   d7fa0:	2003f400 	.word	0x2003f400
   d7fa4:	9a271c1e 	.word	0x9a271c1e
   d7fa8:	2003e3e8 	.word	0x2003e3e8
   d7fac:	00000000 	.word	0x00000000
   d7fb0:	000d7f25 	.word	0x000d7f25

000d7fb4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7fb4:	4770      	bx	lr

000d7fb6 <_ZN9IPAddressD0Ev>:
   d7fb6:	b510      	push	{r4, lr}
   d7fb8:	2118      	movs	r1, #24
   d7fba:	4604      	mov	r4, r0
   d7fbc:	f000 ff80 	bl	d8ec0 <_ZdlPvj>
   d7fc0:	4620      	mov	r0, r4
   d7fc2:	bd10      	pop	{r4, pc}

000d7fc4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7fc6:	7d03      	ldrb	r3, [r0, #20]
   d7fc8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7fca:	b08d      	sub	sp, #52	; 0x34
   d7fcc:	460e      	mov	r6, r1
   d7fce:	f100 0704 	add.w	r7, r0, #4
   d7fd2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7fd6:	d002      	beq.n	d7fde <_ZNK9IPAddress7printToER5Print+0x1a>
   d7fd8:	f100 0508 	add.w	r5, r0, #8
   d7fdc:	e018      	b.n	d8010 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7fde:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7fe0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7fe2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7fe6:	232f      	movs	r3, #47	; 0x2f
   d7fe8:	462a      	mov	r2, r5
   d7fea:	200a      	movs	r0, #10
   d7fec:	f7ff f9fc 	bl	d73e8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7ff0:	4628      	mov	r0, r5
   d7ff2:	f001 fc17 	bl	d9824 <strlen>
   d7ff6:	6833      	ldr	r3, [r6, #0]
   d7ff8:	4602      	mov	r2, r0
   d7ffa:	68db      	ldr	r3, [r3, #12]
   d7ffc:	4629      	mov	r1, r5
   d7ffe:	4630      	mov	r0, r6
   d8000:	4798      	blx	r3
   d8002:	e00f      	b.n	d8024 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d8004:	b124      	cbz	r4, d8010 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d8006:	212e      	movs	r1, #46	; 0x2e
   d8008:	4630      	mov	r0, r6
   d800a:	f7ff fe25 	bl	d7c58 <_ZN5Print5printEc>
   d800e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8010:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8014:	220a      	movs	r2, #10
   d8016:	4630      	mov	r0, r6
   d8018:	f7ff fe37 	bl	d7c8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d801c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d801e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8020:	d1f0      	bne.n	d8004 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8022:	4620      	mov	r0, r4
    }
    return n;
}
   d8024:	b00d      	add	sp, #52	; 0x34
   d8026:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8028 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d8028:	b510      	push	{r4, lr}
   d802a:	4b05      	ldr	r3, [pc, #20]	; (d8040 <_ZN9IPAddressC1Ev+0x18>)
   d802c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d802e:	2211      	movs	r2, #17
   d8030:	f840 3b04 	str.w	r3, [r0], #4
   d8034:	2100      	movs	r1, #0
   d8036:	f001 fbb3 	bl	d97a0 <memset>
{
    clear();
}
   d803a:	4620      	mov	r0, r4
   d803c:	bd10      	pop	{r4, pc}
   d803e:	bf00      	nop
   d8040:	000da6d0 	.word	0x000da6d0

000d8044 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8044:	4603      	mov	r3, r0
   d8046:	4a07      	ldr	r2, [pc, #28]	; (d8064 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8048:	b510      	push	{r4, lr}
   d804a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d804e:	f101 0210 	add.w	r2, r1, #16
   d8052:	f851 4b04 	ldr.w	r4, [r1], #4
   d8056:	f843 4b04 	str.w	r4, [r3], #4
   d805a:	4291      	cmp	r1, r2
   d805c:	d1f9      	bne.n	d8052 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d805e:	780a      	ldrb	r2, [r1, #0]
   d8060:	701a      	strb	r2, [r3, #0]
}
   d8062:	bd10      	pop	{r4, pc}
   d8064:	000da6d0 	.word	0x000da6d0

000d8068 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d8068:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d806a:	2b04      	cmp	r3, #4
   d806c:	d101      	bne.n	d8072 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d806e:	6840      	ldr	r0, [r0, #4]
   d8070:	e008      	b.n	d8084 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d8072:	2b06      	cmp	r3, #6
   d8074:	d10a      	bne.n	d808c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8076:	6843      	ldr	r3, [r0, #4]
   d8078:	b953      	cbnz	r3, d8090 <_ZNK9IPAddresscvbEv+0x28>
   d807a:	6883      	ldr	r3, [r0, #8]
   d807c:	b943      	cbnz	r3, d8090 <_ZNK9IPAddresscvbEv+0x28>
   d807e:	68c3      	ldr	r3, [r0, #12]
   d8080:	b933      	cbnz	r3, d8090 <_ZNK9IPAddresscvbEv+0x28>
   d8082:	6900      	ldr	r0, [r0, #16]
   d8084:	3000      	adds	r0, #0
   d8086:	bf18      	it	ne
   d8088:	2001      	movne	r0, #1
   d808a:	4770      	bx	lr
    } else {
        return false;
   d808c:	2000      	movs	r0, #0
   d808e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8090:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d8092:	4770      	bx	lr

000d8094 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8094:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8096:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d809a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d809e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d80a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d80a6:	2304      	movs	r3, #4
   d80a8:	6041      	str	r1, [r0, #4]
   d80aa:	7503      	strb	r3, [r0, #20]
   d80ac:	bd10      	pop	{r4, pc}

000d80ae <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d80ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d80b0:	780d      	ldrb	r5, [r1, #0]
   d80b2:	788b      	ldrb	r3, [r1, #2]
   d80b4:	784a      	ldrb	r2, [r1, #1]
   d80b6:	78c9      	ldrb	r1, [r1, #3]
   d80b8:	9100      	str	r1, [sp, #0]
   d80ba:	4629      	mov	r1, r5
   d80bc:	f7ff ffea 	bl	d8094 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d80c0:	b003      	add	sp, #12
   d80c2:	bd30      	pop	{r4, r5, pc}

000d80c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d80c4:	7441      	strb	r1, [r0, #17]
   d80c6:	4770      	bx	lr

000d80c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d80c8:	4770      	bx	lr

000d80ca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d80ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d80cc:	2100      	movs	r1, #0
   d80ce:	7c00      	ldrb	r0, [r0, #16]
   d80d0:	f7ff fa92 	bl	d75f8 <HAL_USB_USART_Receive_Data>
}
   d80d4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d80d8:	bf28      	it	cs
   d80da:	f04f 30ff 	movcs.w	r0, #4294967295
   d80de:	bd08      	pop	{r3, pc}

000d80e0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d80e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d80e2:	2101      	movs	r1, #1
   d80e4:	7c00      	ldrb	r0, [r0, #16]
   d80e6:	f7ff fa87 	bl	d75f8 <HAL_USB_USART_Receive_Data>
}
   d80ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d80ee:	bf28      	it	cs
   d80f0:	f04f 30ff 	movcs.w	r0, #4294967295
   d80f4:	bd08      	pop	{r3, pc}

000d80f6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d80f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d80f8:	7c00      	ldrb	r0, [r0, #16]
   d80fa:	f7ff fa75 	bl	d75e8 <HAL_USB_USART_Available_Data_For_Write>
}
   d80fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8102:	bd08      	pop	{r3, pc}

000d8104 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d8104:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8106:	7c00      	ldrb	r0, [r0, #16]
   d8108:	f7ff fa66 	bl	d75d8 <HAL_USB_USART_Available_Data>
}
   d810c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8110:	bd08      	pop	{r3, pc}

000d8112 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d8112:	7c00      	ldrb	r0, [r0, #16]
   d8114:	f7ff ba80 	b.w	d7618 <HAL_USB_USART_Flush_Data>

000d8118 <_ZN9USBSerialD0Ev>:
   d8118:	b510      	push	{r4, lr}
   d811a:	2114      	movs	r1, #20
   d811c:	4604      	mov	r4, r0
   d811e:	f000 fecf 	bl	d8ec0 <_ZdlPvj>
   d8122:	4620      	mov	r0, r4
   d8124:	bd10      	pop	{r4, pc}

000d8126 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8126:	b538      	push	{r3, r4, r5, lr}
   d8128:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d812a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d812c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d812e:	f7ff fa5b 	bl	d75e8 <HAL_USB_USART_Available_Data_For_Write>
   d8132:	2800      	cmp	r0, #0
   d8134:	dc01      	bgt.n	d813a <_ZN9USBSerial5writeEh+0x14>
   d8136:	7c60      	ldrb	r0, [r4, #17]
   d8138:	b128      	cbz	r0, d8146 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d813a:	4629      	mov	r1, r5
   d813c:	7c20      	ldrb	r0, [r4, #16]
   d813e:	f7ff fa63 	bl	d7608 <HAL_USB_USART_Send_Data>
   d8142:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8146:	bd38      	pop	{r3, r4, r5, pc}

000d8148 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8148:	b510      	push	{r4, lr}
   d814a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d814c:	2300      	movs	r3, #0
   d814e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8154:	60a3      	str	r3, [r4, #8]
   d8156:	4b05      	ldr	r3, [pc, #20]	; (d816c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8158:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d815a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d815c:	4608      	mov	r0, r1
{
  _serial = serial;
   d815e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8160:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8162:	4611      	mov	r1, r2
   d8164:	f7ff fa28 	bl	d75b8 <HAL_USB_USART_Init>
}
   d8168:	4620      	mov	r0, r4
   d816a:	bd10      	pop	{r4, pc}
   d816c:	000da6e4 	.word	0x000da6e4

000d8170 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8170:	2200      	movs	r2, #0
   d8172:	7c00      	ldrb	r0, [r0, #16]
   d8174:	f7ff ba28 	b.w	d75c8 <HAL_USB_USART_Begin>

000d8178 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8178:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d817a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d817c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d817e:	2100      	movs	r1, #0
   d8180:	f001 fb0e 	bl	d97a0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8184:	4620      	mov	r0, r4
   d8186:	bd10      	pop	{r4, pc}

000d8188 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8188:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d818a:	4d0e      	ldr	r5, [pc, #56]	; (d81c4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d818c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d818e:	a801      	add	r0, sp, #4
   d8190:	f7ff fff2 	bl	d8178 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8194:	6829      	ldr	r1, [r5, #0]
   d8196:	f011 0401 	ands.w	r4, r1, #1
   d819a:	d110      	bne.n	d81be <_Z16_fetch_usbserialv+0x36>
   d819c:	4628      	mov	r0, r5
   d819e:	f7fb ff8b 	bl	d40b8 <__cxa_guard_acquire>
   d81a2:	b160      	cbz	r0, d81be <_Z16_fetch_usbserialv+0x36>
   d81a4:	aa01      	add	r2, sp, #4
   d81a6:	4621      	mov	r1, r4
   d81a8:	4807      	ldr	r0, [pc, #28]	; (d81c8 <_Z16_fetch_usbserialv+0x40>)
   d81aa:	f7ff ffcd 	bl	d8148 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d81ae:	4628      	mov	r0, r5
   d81b0:	f7fb ff87 	bl	d40c2 <__cxa_guard_release>
   d81b4:	4a05      	ldr	r2, [pc, #20]	; (d81cc <_Z16_fetch_usbserialv+0x44>)
   d81b6:	4906      	ldr	r1, [pc, #24]	; (d81d0 <_Z16_fetch_usbserialv+0x48>)
   d81b8:	4803      	ldr	r0, [pc, #12]	; (d81c8 <_Z16_fetch_usbserialv+0x40>)
   d81ba:	f000 fe73 	bl	d8ea4 <__aeabi_atexit>
	return _usbserial;
}
   d81be:	4802      	ldr	r0, [pc, #8]	; (d81c8 <_Z16_fetch_usbserialv+0x40>)
   d81c0:	b007      	add	sp, #28
   d81c2:	bd30      	pop	{r4, r5, pc}
   d81c4:	2003e3ec 	.word	0x2003e3ec
   d81c8:	2003e3f0 	.word	0x2003e3f0
   d81cc:	2003dcd8 	.word	0x2003dcd8
   d81d0:	000d80c9 	.word	0x000d80c9

000d81d4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d81d4:	4700      	bx	r0
	...

000d81d8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d81d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d81da:	b085      	sub	sp, #20
   d81dc:	461c      	mov	r4, r3
   d81de:	460e      	mov	r6, r1
   d81e0:	4617      	mov	r7, r2
   d81e2:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d81e4:	f7ff f840 	bl	d7268 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d81e8:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d81ea:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d81ec:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d81f0:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d81f2:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d81f6:	bfa5      	ittet	ge
   d81f8:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d81fc:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d8200:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d8202:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8204:	9300      	str	r3, [sp, #0]
   d8206:	4632      	mov	r2, r6
   d8208:	463b      	mov	r3, r7
   d820a:	4906      	ldr	r1, [pc, #24]	; (d8224 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d820c:	bfa8      	it	ge
   d820e:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8212:	4628      	mov	r0, r5
   d8214:	f7ff f820 	bl	d7258 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8218:	fab0 f080 	clz	r0, r0
   d821c:	0940      	lsrs	r0, r0, #5
   d821e:	b005      	add	sp, #20
   d8220:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8222:	bf00      	nop
   d8224:	000d81d5 	.word	0x000d81d5

000d8228 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d8228:	4770      	bx	lr

000d822a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d822a:	7441      	strb	r1, [r0, #17]
   d822c:	4770      	bx	lr

000d822e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d822e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8230:	7c00      	ldrb	r0, [r0, #16]
   d8232:	f7ff f929 	bl	d7488 <HAL_USART_Available_Data_For_Write>
}
   d8236:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d823a:	bd08      	pop	{r3, pc}

000d823c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d823c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d823e:	7c00      	ldrb	r0, [r0, #16]
   d8240:	f7ff f8fa 	bl	d7438 <HAL_USART_Available_Data>
}
   d8244:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8248:	bd08      	pop	{r3, pc}

000d824a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d824a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d824c:	7c00      	ldrb	r0, [r0, #16]
   d824e:	f7ff f903 	bl	d7458 <HAL_USART_Peek_Data>
}
   d8252:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8256:	bf28      	it	cs
   d8258:	f04f 30ff 	movcs.w	r0, #4294967295
   d825c:	bd08      	pop	{r3, pc}

000d825e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d825e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d8260:	7c00      	ldrb	r0, [r0, #16]
   d8262:	f7ff f8f1 	bl	d7448 <HAL_USART_Read_Data>
}
   d8266:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d826a:	bf28      	it	cs
   d826c:	f04f 30ff 	movcs.w	r0, #4294967295
   d8270:	bd08      	pop	{r3, pc}

000d8272 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d8272:	7c00      	ldrb	r0, [r0, #16]
   d8274:	f7ff b8f8 	b.w	d7468 <HAL_USART_Flush_Data>

000d8278 <_ZN11USARTSerialD0Ev>:
   d8278:	b510      	push	{r4, lr}
   d827a:	2114      	movs	r1, #20
   d827c:	4604      	mov	r4, r0
   d827e:	f000 fe1f 	bl	d8ec0 <_ZdlPvj>
   d8282:	4620      	mov	r0, r4
   d8284:	bd10      	pop	{r4, pc}

000d8286 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8286:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8288:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d828a:	4604      	mov	r4, r0
   d828c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d828e:	b925      	cbnz	r5, d829a <_ZN11USARTSerial5writeEh+0x14>
   d8290:	7c00      	ldrb	r0, [r0, #16]
   d8292:	f7ff f8f9 	bl	d7488 <HAL_USART_Available_Data_For_Write>
   d8296:	2800      	cmp	r0, #0
   d8298:	dd05      	ble.n	d82a6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d829a:	4631      	mov	r1, r6
   d829c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d829e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d82a2:	f7ff b8c1 	b.w	d7428 <HAL_USART_Write_Data>
  }
  return 0;
}
   d82a6:	4628      	mov	r0, r5
   d82a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d82ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d82ac:	b510      	push	{r4, lr}
   d82ae:	4604      	mov	r4, r0
   d82b0:	4608      	mov	r0, r1
   d82b2:	4611      	mov	r1, r2
   d82b4:	2200      	movs	r2, #0
   d82b6:	6062      	str	r2, [r4, #4]
   d82b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d82bc:	60a2      	str	r2, [r4, #8]
   d82be:	4a05      	ldr	r2, [pc, #20]	; (d82d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d82c0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d82c2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d82c4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d82c6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d82c8:	461a      	mov	r2, r3
   d82ca:	f7ff f8a5 	bl	d7418 <HAL_USART_Init>
}
   d82ce:	4620      	mov	r0, r4
   d82d0:	bd10      	pop	{r4, pc}
   d82d2:	bf00      	nop
   d82d4:	000da714 	.word	0x000da714

000d82d8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d82d8:	2300      	movs	r3, #0
   d82da:	7c00      	ldrb	r0, [r0, #16]
   d82dc:	f7ff b8dc 	b.w	d7498 <HAL_USART_BeginConfig>

000d82e0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d82e0:	2200      	movs	r2, #0
   d82e2:	f7ff bff9 	b.w	d82d8 <_ZN11USARTSerial5beginEmm>

000d82e6 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d82e6:	7c00      	ldrb	r0, [r0, #16]
   d82e8:	f7ff b8c6 	b.w	d7478 <HAL_USART_Is_Enabled>

000d82ec <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d82ec:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d82ee:	4d0c      	ldr	r5, [pc, #48]	; (d8320 <_Z22__fetch_global_Serial1v+0x34>)
   d82f0:	6829      	ldr	r1, [r5, #0]
   d82f2:	f011 0401 	ands.w	r4, r1, #1
   d82f6:	d111      	bne.n	d831c <_Z22__fetch_global_Serial1v+0x30>
   d82f8:	4628      	mov	r0, r5
   d82fa:	f7fb fedd 	bl	d40b8 <__cxa_guard_acquire>
   d82fe:	b168      	cbz	r0, d831c <_Z22__fetch_global_Serial1v+0x30>
   d8300:	4a08      	ldr	r2, [pc, #32]	; (d8324 <_Z22__fetch_global_Serial1v+0x38>)
   d8302:	4b09      	ldr	r3, [pc, #36]	; (d8328 <_Z22__fetch_global_Serial1v+0x3c>)
   d8304:	4809      	ldr	r0, [pc, #36]	; (d832c <_Z22__fetch_global_Serial1v+0x40>)
   d8306:	4621      	mov	r1, r4
   d8308:	f7ff ffd0 	bl	d82ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d830c:	4628      	mov	r0, r5
   d830e:	f7fb fed8 	bl	d40c2 <__cxa_guard_release>
   d8312:	4a07      	ldr	r2, [pc, #28]	; (d8330 <_Z22__fetch_global_Serial1v+0x44>)
   d8314:	4907      	ldr	r1, [pc, #28]	; (d8334 <_Z22__fetch_global_Serial1v+0x48>)
   d8316:	4805      	ldr	r0, [pc, #20]	; (d832c <_Z22__fetch_global_Serial1v+0x40>)
   d8318:	f000 fdc4 	bl	d8ea4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d831c:	4803      	ldr	r0, [pc, #12]	; (d832c <_Z22__fetch_global_Serial1v+0x40>)
   d831e:	bd38      	pop	{r3, r4, r5, pc}
   d8320:	2003e49c 	.word	0x2003e49c
   d8324:	2003e4a0 	.word	0x2003e4a0
   d8328:	2003e418 	.word	0x2003e418
   d832c:	2003e404 	.word	0x2003e404
   d8330:	2003dcd8 	.word	0x2003dcd8
   d8334:	000d8229 	.word	0x000d8229

000d8338 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8338:	4770      	bx	lr

000d833a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d833a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d833c:	4606      	mov	r6, r0
   d833e:	4615      	mov	r5, r2
   d8340:	460c      	mov	r4, r1
   d8342:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8344:	42bc      	cmp	r4, r7
   d8346:	d006      	beq.n	d8356 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8348:	6833      	ldr	r3, [r6, #0]
   d834a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d834e:	689b      	ldr	r3, [r3, #8]
   d8350:	4630      	mov	r0, r6
   d8352:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8354:	e7f6      	b.n	d8344 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8356:	4628      	mov	r0, r5
   d8358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d835a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d835a:	2200      	movs	r2, #0
   d835c:	7c00      	ldrb	r0, [r0, #16]
   d835e:	f7ff b8bb 	b.w	d74d8 <HAL_I2C_Write_Data>

000d8362 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8362:	2100      	movs	r1, #0
   d8364:	7c00      	ldrb	r0, [r0, #16]
   d8366:	f7ff b8bf 	b.w	d74e8 <HAL_I2C_Available_Data>

000d836a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d836a:	2100      	movs	r1, #0
   d836c:	7c00      	ldrb	r0, [r0, #16]
   d836e:	f7ff b8c3 	b.w	d74f8 <HAL_I2C_Read_Data>

000d8372 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8372:	2100      	movs	r1, #0
   d8374:	7c00      	ldrb	r0, [r0, #16]
   d8376:	f7ff b8c7 	b.w	d7508 <HAL_I2C_Peek_Data>

000d837a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d837a:	2100      	movs	r1, #0
   d837c:	7c00      	ldrb	r0, [r0, #16]
   d837e:	f7ff b8cb 	b.w	d7518 <HAL_I2C_Flush_Data>

000d8382 <_ZN7TwoWireD0Ev>:
   d8382:	b510      	push	{r4, lr}
   d8384:	2114      	movs	r1, #20
   d8386:	4604      	mov	r4, r0
   d8388:	f000 fd9a 	bl	d8ec0 <_ZdlPvj>
   d838c:	4620      	mov	r0, r4
   d838e:	bd10      	pop	{r4, pc}

000d8390 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8390:	b510      	push	{r4, lr}
   d8392:	4604      	mov	r4, r0
   d8394:	2300      	movs	r3, #0
   d8396:	6063      	str	r3, [r4, #4]
   d8398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d839c:	60a3      	str	r3, [r4, #8]
   d839e:	4b04      	ldr	r3, [pc, #16]	; (d83b0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d83a0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d83a2:	4608      	mov	r0, r1
   d83a4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d83a6:	4611      	mov	r1, r2
   d83a8:	f7ff f8c6 	bl	d7538 <HAL_I2C_Init>
}
   d83ac:	4620      	mov	r0, r4
   d83ae:	bd10      	pop	{r4, pc}
   d83b0:	000da744 	.word	0x000da744

000d83b4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d83b4:	2300      	movs	r3, #0
   d83b6:	461a      	mov	r2, r3
   d83b8:	4619      	mov	r1, r3
   d83ba:	7c00      	ldrb	r0, [r0, #16]
   d83bc:	f7ff b874 	b.w	d74a8 <HAL_I2C_Begin>

000d83c0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d83c0:	b570      	push	{r4, r5, r6, lr}
   d83c2:	460c      	mov	r4, r1
   d83c4:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d83c6:	2514      	movs	r5, #20
   d83c8:	4606      	mov	r6, r0
   d83ca:	462a      	mov	r2, r5
   d83cc:	2100      	movs	r1, #0
   d83ce:	a801      	add	r0, sp, #4
   d83d0:	f001 f9e6 	bl	d97a0 <memset>
   d83d4:	7823      	ldrb	r3, [r4, #0]
   d83d6:	f88d 3008 	strb.w	r3, [sp, #8]
   d83da:	6863      	ldr	r3, [r4, #4]
   d83dc:	9303      	str	r3, [sp, #12]
   d83de:	68e3      	ldr	r3, [r4, #12]
   d83e0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d83e2:	2200      	movs	r2, #0
   d83e4:	7a23      	ldrb	r3, [r4, #8]
   d83e6:	7c30      	ldrb	r0, [r6, #16]
   d83e8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d83ec:	a901      	add	r1, sp, #4
   d83ee:	9305      	str	r3, [sp, #20]
   d83f0:	f7ff f8aa 	bl	d7548 <HAL_I2C_Request_Data_Ex>
}
   d83f4:	b006      	add	sp, #24
   d83f6:	bd70      	pop	{r4, r5, r6, pc}

000d83f8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d83f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d83fa:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d83fc:	f88d 1000 	strb.w	r1, [sp]
   d8400:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8404:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d8406:	bf18      	it	ne
   d8408:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d840a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d840c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d840e:	f88d 3008 	strb.w	r3, [sp, #8]
   d8412:	f7ff ffd5 	bl	d83c0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8416:	b005      	add	sp, #20
   d8418:	f85d fb04 	ldr.w	pc, [sp], #4

000d841c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d841c:	2301      	movs	r3, #1
   d841e:	f7ff bfeb 	b.w	d83f8 <_ZN7TwoWire11requestFromEhjh>

000d8422 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d8422:	2200      	movs	r2, #0
   d8424:	7c00      	ldrb	r0, [r0, #16]
   d8426:	f7ff b847 	b.w	d74b8 <HAL_I2C_Begin_Transmission>

000d842a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d842a:	2200      	movs	r2, #0
   d842c:	7c00      	ldrb	r0, [r0, #16]
   d842e:	f7ff b84b 	b.w	d74c8 <HAL_I2C_End_Transmission>

000d8432 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d8432:	2101      	movs	r1, #1
   d8434:	f7ff bff9 	b.w	d842a <_ZN7TwoWire15endTransmissionEh>

000d8438 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8438:	2100      	movs	r1, #0
   d843a:	7c00      	ldrb	r0, [r0, #16]
   d843c:	f7ff b874 	b.w	d7528 <HAL_I2C_Is_Enabled>

000d8440 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8440:	2200      	movs	r2, #0
   d8442:	4611      	mov	r1, r2
   d8444:	6840      	ldr	r0, [r0, #4]
   d8446:	f7ff b96b 	b.w	d7720 <network_listening>

000d844a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d844a:	2200      	movs	r2, #0
   d844c:	4611      	mov	r1, r2
   d844e:	6840      	ldr	r0, [r0, #4]
   d8450:	f7ff b976 	b.w	d7740 <network_get_listen_timeout>

000d8454 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8454:	2200      	movs	r2, #0
   d8456:	6840      	ldr	r0, [r0, #4]
   d8458:	f7ff b96a 	b.w	d7730 <network_set_listen_timeout>

000d845c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d845c:	2200      	movs	r2, #0
   d845e:	f081 0101 	eor.w	r1, r1, #1
   d8462:	6840      	ldr	r0, [r0, #4]
   d8464:	f7ff b954 	b.w	d7710 <network_listen>

000d8468 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d8468:	2300      	movs	r3, #0
   d846a:	461a      	mov	r2, r3
   d846c:	2101      	movs	r1, #1
   d846e:	6840      	ldr	r0, [r0, #4]
   d8470:	f7ff b946 	b.w	d7700 <network_off>

000d8474 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8474:	2300      	movs	r3, #0
   d8476:	461a      	mov	r2, r3
   d8478:	4619      	mov	r1, r3
   d847a:	6840      	ldr	r0, [r0, #4]
   d847c:	f7ff b938 	b.w	d76f0 <network_on>

000d8480 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8480:	2200      	movs	r2, #0
   d8482:	4611      	mov	r1, r2
   d8484:	6840      	ldr	r0, [r0, #4]
   d8486:	f7ff b92b 	b.w	d76e0 <network_ready>

000d848a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d848a:	2200      	movs	r2, #0
   d848c:	4611      	mov	r1, r2
   d848e:	6840      	ldr	r0, [r0, #4]
   d8490:	f7ff b916 	b.w	d76c0 <network_connecting>

000d8494 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8494:	2200      	movs	r2, #0
   d8496:	2102      	movs	r1, #2
   d8498:	6840      	ldr	r0, [r0, #4]
   d849a:	f7ff b919 	b.w	d76d0 <network_disconnect>

000d849e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d849e:	2300      	movs	r3, #0
   d84a0:	461a      	mov	r2, r3
   d84a2:	6840      	ldr	r0, [r0, #4]
   d84a4:	f7ff b904 	b.w	d76b0 <network_connect>

000d84a8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d84a8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d84aa:	4605      	mov	r5, r0
   d84ac:	b188      	cbz	r0, d84d2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d84ae:	6804      	ldr	r4, [r0, #0]
   d84b0:	b14c      	cbz	r4, d84c6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d84b2:	68a3      	ldr	r3, [r4, #8]
   d84b4:	b11b      	cbz	r3, d84be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d84b6:	2203      	movs	r2, #3
   d84b8:	4621      	mov	r1, r4
   d84ba:	4620      	mov	r0, r4
   d84bc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d84be:	2110      	movs	r1, #16
   d84c0:	4620      	mov	r0, r4
   d84c2:	f000 fcfd 	bl	d8ec0 <_ZdlPvj>
   d84c6:	4628      	mov	r0, r5
   d84c8:	2114      	movs	r1, #20
      }
   d84ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d84ce:	f000 bcf7 	b.w	d8ec0 <_ZdlPvj>
   d84d2:	bd38      	pop	{r3, r4, r5, pc}

000d84d4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d84d4:	b110      	cbz	r0, d84dc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d84d6:	6803      	ldr	r3, [r0, #0]
   d84d8:	685b      	ldr	r3, [r3, #4]
   d84da:	4718      	bx	r3
   d84dc:	4770      	bx	lr

000d84de <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d84de:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d84e0:	6803      	ldr	r3, [r0, #0]
   d84e2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d84e4:	b1bb      	cbz	r3, d8516 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d84e6:	6858      	ldr	r0, [r3, #4]
   d84e8:	f7fe ff56 	bl	d7398 <os_thread_is_current>
   d84ec:	b978      	cbnz	r0, d850e <_ZN6ThreadD1Ev+0x30>
   d84ee:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d84f0:	7c5a      	ldrb	r2, [r3, #17]
   d84f2:	b912      	cbnz	r2, d84fa <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d84f4:	6858      	ldr	r0, [r3, #4]
   d84f6:	f7fe ff57 	bl	d73a8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d84fa:	6823      	ldr	r3, [r4, #0]
   d84fc:	6858      	ldr	r0, [r3, #4]
   d84fe:	f7fe ff5b 	bl	d73b8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8502:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8504:	2300      	movs	r3, #0
   d8506:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8508:	b128      	cbz	r0, d8516 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d850a:	f7ff ffcd 	bl	d84a8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d850e:	6820      	ldr	r0, [r4, #0]
   d8510:	b108      	cbz	r0, d8516 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8512:	f7ff ffc9 	bl	d84a8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8516:	4620      	mov	r0, r4
   d8518:	bd10      	pop	{r4, pc}

000d851a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d851a:	b538      	push	{r3, r4, r5, lr}
   d851c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d851e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d8522:	b108      	cbz	r0, d8528 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8524:	f7fb fdbb 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8528:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d852c:	b108      	cbz	r0, d8532 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d852e:	f7fe ff53 	bl	d73d8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8532:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8536:	b135      	cbz	r5, d8546 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8538:	4628      	mov	r0, r5
   d853a:	f7ff ffd0 	bl	d84de <_ZN6ThreadD1Ev>
   d853e:	2104      	movs	r1, #4
   d8540:	4628      	mov	r0, r5
   d8542:	f000 fcbd 	bl	d8ec0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8546:	6820      	ldr	r0, [r4, #0]
   d8548:	b108      	cbz	r0, d854e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d854a:	f7ff ffc3 	bl	d84d4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d854e:	4620      	mov	r0, r4
   d8550:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8554 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8554:	b510      	push	{r4, lr}
   d8556:	4b04      	ldr	r3, [pc, #16]	; (d8568 <_ZN5spark9MeshClassD1Ev+0x14>)
   d8558:	4604      	mov	r4, r0
   d855a:	f840 3b08 	str.w	r3, [r0], #8
   d855e:	f7ff ffdc 	bl	d851a <_ZN5spark11MeshPublishD1Ev>
   d8562:	4620      	mov	r0, r4
   d8564:	bd10      	pop	{r4, pc}
   d8566:	bf00      	nop
   d8568:	000da76c 	.word	0x000da76c

000d856c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d856c:	b538      	push	{r3, r4, r5, lr}
   d856e:	4c0e      	ldr	r4, [pc, #56]	; (d85a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d8570:	4b0e      	ldr	r3, [pc, #56]	; (d85ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d8572:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8574:	2500      	movs	r5, #0
   d8576:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d8578:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d857c:	6063      	str	r3, [r4, #4]
   d857e:	60a5      	str	r5, [r4, #8]
   d8580:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8584:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8588:	f7fe ff1e 	bl	d73c8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d858c:	4b08      	ldr	r3, [pc, #32]	; (d85b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d858e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8592:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d8596:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8598:	4620      	mov	r0, r4
   d859a:	4a06      	ldr	r2, [pc, #24]	; (d85b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d859c:	4906      	ldr	r1, [pc, #24]	; (d85b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d859e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d85a2:	f000 bc7f 	b.w	d8ea4 <__aeabi_atexit>
   d85a6:	bf00      	nop
   d85a8:	2003e524 	.word	0x2003e524
   d85ac:	000da854 	.word	0x000da854
   d85b0:	000da76c 	.word	0x000da76c
   d85b4:	2003dcd8 	.word	0x2003dcd8
   d85b8:	000d8555 	.word	0x000d8555

000d85bc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d85bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d85be:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d85c0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d85c2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d85c6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d85c8:	2201      	movs	r2, #1
   d85ca:	f04f 33ff 	mov.w	r3, #4294967295
   d85ce:	4621      	mov	r1, r4
   d85d0:	47a8      	blx	r5
}
   d85d2:	b003      	add	sp, #12
   d85d4:	bd30      	pop	{r4, r5, pc}

000d85d6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d85d6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d85d8:	6803      	ldr	r3, [r0, #0]
   d85da:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d85dc:	f04f 33ff 	mov.w	r3, #4294967295
   d85e0:	46a4      	mov	ip, r4
}
   d85e2:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d85e6:	4760      	bx	ip

000d85e8 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d85e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d85ea:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d85ec:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d85ee:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d85f2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d85f4:	4621      	mov	r1, r4
   d85f6:	4613      	mov	r3, r2
   d85f8:	2201      	movs	r2, #1
   d85fa:	47a8      	blx	r5
}
   d85fc:	b003      	add	sp, #12
   d85fe:	bd30      	pop	{r4, r5, pc}

000d8600 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d8600:	4770      	bx	lr

000d8602 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8602:	b538      	push	{r3, r4, r5, lr}
   d8604:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d8606:	681a      	ldr	r2, [r3, #0]
   d8608:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d860a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d860c:	da05      	bge.n	d861a <_ZN9TCPClient9connectedEv+0x18>
   d860e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8612:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8616:	429a      	cmp	r2, r3
   d8618:	d001      	beq.n	d861e <_ZN9TCPClient9connectedEv+0x1c>
   d861a:	2501      	movs	r5, #1
   d861c:	e00b      	b.n	d8636 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d861e:	6803      	ldr	r3, [r0, #0]
   d8620:	691b      	ldr	r3, [r3, #16]
   d8622:	4798      	blx	r3
   d8624:	2800      	cmp	r0, #0
   d8626:	bf14      	ite	ne
   d8628:	2501      	movne	r5, #1
   d862a:	2500      	moveq	r5, #0
        if (!rv) {
   d862c:	d103      	bne.n	d8636 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d862e:	6823      	ldr	r3, [r4, #0]
   d8630:	4620      	mov	r0, r4
   d8632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8634:	4798      	blx	r3
        }
    }
    return rv;
}
   d8636:	4628      	mov	r0, r5
   d8638:	bd38      	pop	{r3, r4, r5, pc}

000d863a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d863a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d863c:	6818      	ldr	r0, [r3, #0]
}
   d863e:	43c0      	mvns	r0, r0
   d8640:	0fc0      	lsrs	r0, r0, #31
   d8642:	4770      	bx	lr

000d8644 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8644:	4770      	bx	lr

000d8646 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8646:	2000      	movs	r0, #0
   d8648:	4770      	bx	lr

000d864a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d864a:	b510      	push	{r4, lr}
   d864c:	2114      	movs	r1, #20
   d864e:	4604      	mov	r4, r0
   d8650:	f000 fc36 	bl	d8ec0 <_ZdlPvj>
   d8654:	4620      	mov	r0, r4
   d8656:	bd10      	pop	{r4, pc}

000d8658 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8658:	f7fb bd1f 	b.w	d409a <_ZdlPv>

000d865c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d865c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d865e:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d8660:	2200      	movs	r2, #0
   d8662:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d8664:	9202      	str	r2, [sp, #8]
   d8666:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8668:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d866a:	4604      	mov	r4, r0
   d866c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d866e:	d008      	beq.n	d8682 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d8670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8674:	fbb3 f1f2 	udiv	r1, r3, r2
   d8678:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d867a:	fb02 3111 	mls	r1, r2, r1, r3
   d867e:	434a      	muls	r2, r1
   d8680:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d8682:	6960      	ldr	r0, [r4, #20]
   d8684:	2308      	movs	r3, #8
   d8686:	9300      	str	r3, [sp, #0]
   d8688:	f241 0205 	movw	r2, #4101	; 0x1005
   d868c:	446b      	add	r3, sp
   d868e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8692:	6800      	ldr	r0, [r0, #0]
   d8694:	f7fe ff60 	bl	d7558 <sock_setsockopt>
    if (ret < 0) {
   d8698:	2800      	cmp	r0, #0
   d869a:	db08      	blt.n	d86ae <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d869c:	6960      	ldr	r0, [r4, #20]
   d869e:	2300      	movs	r3, #0
   d86a0:	4632      	mov	r2, r6
   d86a2:	4629      	mov	r1, r5
   d86a4:	6800      	ldr	r0, [r0, #0]
   d86a6:	f7fe ff77 	bl	d7598 <sock_send>
    if (ret < 0) {
   d86aa:	2800      	cmp	r0, #0
   d86ac:	da04      	bge.n	d86b8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d86ae:	f7ff f8af 	bl	d7810 <__errno>
   d86b2:	6803      	ldr	r3, [r0, #0]
   d86b4:	6063      	str	r3, [r4, #4]
   d86b6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d86b8:	b004      	add	sp, #16
   d86ba:	bd70      	pop	{r4, r5, r6, pc}

000d86bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d86bc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d86be:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d86c0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d86c2:	689b      	ldr	r3, [r3, #8]
   d86c4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d86c6:	68a3      	ldr	r3, [r4, #8]
   d86c8:	3b01      	subs	r3, #1
   d86ca:	60a3      	str	r3, [r4, #8]
   d86cc:	b92b      	cbnz	r3, d86da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d86ce:	6823      	ldr	r3, [r4, #0]
   d86d0:	4620      	mov	r0, r4
   d86d2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d86d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d86d8:	4718      	bx	r3
   d86da:	bd10      	pop	{r4, pc}

000d86dc <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d86dc:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d86de:	4604      	mov	r4, r0
   d86e0:	694d      	ldr	r5, [r1, #20]
   d86e2:	4b05      	ldr	r3, [pc, #20]	; (d86f8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d86e4:	f844 3b04 	str.w	r3, [r4], #4
   d86e8:	358c      	adds	r5, #140	; 0x8c
   d86ea:	4606      	mov	r6, r0
   d86ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d86ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d86f0:	682b      	ldr	r3, [r5, #0]
   d86f2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d86f4:	4630      	mov	r0, r6
   d86f6:	bd70      	pop	{r4, r5, r6, pc}
   d86f8:	000da6d0 	.word	0x000da6d0

000d86fc <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d86fc:	b510      	push	{r4, lr}
   d86fe:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8700:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8704:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8708:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d870a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d870c:	d005      	beq.n	d871a <_ZN9TCPClient4peekEv+0x1e>
   d870e:	6962      	ldr	r2, [r4, #20]
   d8710:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8714:	4413      	add	r3, r2
   d8716:	7918      	ldrb	r0, [r3, #4]
   d8718:	bd10      	pop	{r4, pc}
   d871a:	6803      	ldr	r3, [r0, #0]
   d871c:	691b      	ldr	r3, [r3, #16]
   d871e:	4798      	blx	r3
   d8720:	2800      	cmp	r0, #0
   d8722:	d1f4      	bne.n	d870e <_ZN9TCPClient4peekEv+0x12>
   d8724:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8728:	bd10      	pop	{r4, pc}

000d872a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d872a:	b510      	push	{r4, lr}
   d872c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d872e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8732:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8736:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8738:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d873a:	d008      	beq.n	d874e <_ZN9TCPClient4readEv+0x24>
   d873c:	6962      	ldr	r2, [r4, #20]
   d873e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8742:	1c59      	adds	r1, r3, #1
   d8744:	4413      	add	r3, r2
   d8746:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d874a:	7918      	ldrb	r0, [r3, #4]
   d874c:	bd10      	pop	{r4, pc}
   d874e:	6803      	ldr	r3, [r0, #0]
   d8750:	691b      	ldr	r3, [r3, #16]
   d8752:	4798      	blx	r3
   d8754:	2800      	cmp	r0, #0
   d8756:	d1f1      	bne.n	d873c <_ZN9TCPClient4readEv+0x12>
   d8758:	f04f 30ff 	mov.w	r0, #4294967295
}
   d875c:	bd10      	pop	{r4, pc}

000d875e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d875e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8760:	6943      	ldr	r3, [r0, #20]
   d8762:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d8764:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8768:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d876c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d876e:	4605      	mov	r5, r0
   d8770:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d8772:	d106      	bne.n	d8782 <_ZN9TCPClient4readEPhj+0x24>
   d8774:	6803      	ldr	r3, [r0, #0]
   d8776:	691b      	ldr	r3, [r3, #16]
   d8778:	4798      	blx	r3
   d877a:	b910      	cbnz	r0, d8782 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d877c:	f04f 34ff 	mov.w	r4, #4294967295
   d8780:	e014      	b.n	d87ac <_ZN9TCPClient4readEPhj+0x4e>
   d8782:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d8784:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d8788:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d878c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d878e:	42bc      	cmp	r4, r7
   d8790:	bf28      	it	cs
   d8792:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d8794:	4419      	add	r1, r3
   d8796:	4622      	mov	r2, r4
   d8798:	3104      	adds	r1, #4
   d879a:	4630      	mov	r0, r6
   d879c:	f000 fff5 	bl	d978a <memcpy>
   d87a0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d87a2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d87a6:	4423      	add	r3, r4
   d87a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d87ac:	4620      	mov	r0, r4
   d87ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d87b0 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d87b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d87b4:	4698      	mov	r8, r3
    stop();
   d87b6:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d87b8:	b093      	sub	sp, #76	; 0x4c
    stop();
   d87ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d87bc:	460d      	mov	r5, r1
   d87be:	4606      	mov	r6, r0
   d87c0:	4617      	mov	r7, r2
    stop();
   d87c2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d87c4:	ab12      	add	r3, sp, #72	; 0x48
   d87c6:	2400      	movs	r4, #0
   d87c8:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d87cc:	4622      	mov	r2, r4
   d87ce:	4621      	mov	r1, r4
   d87d0:	4628      	mov	r0, r5
   d87d2:	f7fe fd09 	bl	d71e8 <netdb_getaddrinfo>
   d87d6:	4681      	mov	r9, r0
   d87d8:	2800      	cmp	r0, #0
   d87da:	d13d      	bne.n	d8858 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d87dc:	9b00      	ldr	r3, [sp, #0]
   d87de:	2b00      	cmp	r3, #0
   d87e0:	d056      	beq.n	d8890 <_ZN9TCPClient7connectEPKctm+0xe0>
   d87e2:	695b      	ldr	r3, [r3, #20]
   d87e4:	2b00      	cmp	r3, #0
   d87e6:	d053      	beq.n	d8890 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d87e8:	a806      	add	r0, sp, #24
   d87ea:	f7ff fc1d 	bl	d8028 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d87ee:	9b00      	ldr	r3, [sp, #0]
   d87f0:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d87f2:	7863      	ldrb	r3, [r4, #1]
   d87f4:	2b02      	cmp	r3, #2
   d87f6:	d101      	bne.n	d87fc <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d87f8:	1d21      	adds	r1, r4, #4
   d87fa:	e013      	b.n	d8824 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d87fc:	2b0a      	cmp	r3, #10
   d87fe:	d114      	bne.n	d882a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d8800:	2211      	movs	r2, #17
   d8802:	4649      	mov	r1, r9
   d8804:	a801      	add	r0, sp, #4
   d8806:	f000 ffcb 	bl	d97a0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d880a:	68a3      	ldr	r3, [r4, #8]
   d880c:	bb33      	cbnz	r3, d885c <_ZN9TCPClient7connectEPKctm+0xac>
   d880e:	68e3      	ldr	r3, [r4, #12]
   d8810:	bb23      	cbnz	r3, d885c <_ZN9TCPClient7connectEPKctm+0xac>
   d8812:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8816:	6925      	ldr	r5, [r4, #16]
   d8818:	f7fe fdee 	bl	d73f8 <inet_htonl>
   d881c:	4285      	cmp	r5, r0
   d881e:	d11d      	bne.n	d885c <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8820:	f104 0114 	add.w	r1, r4, #20
   d8824:	a806      	add	r0, sp, #24
   d8826:	f7ff fc42 	bl	d80ae <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d882a:	a806      	add	r0, sp, #24
   d882c:	f7ff fc1c 	bl	d8068 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8830:	2800      	cmp	r0, #0
   d8832:	d02d      	beq.n	d8890 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d8834:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8836:	ad07      	add	r5, sp, #28
   d8838:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d883c:	4b18      	ldr	r3, [pc, #96]	; (d88a0 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d883e:	930c      	str	r3, [sp, #48]	; 0x30
   d8840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8842:	ac0d      	add	r4, sp, #52	; 0x34
   d8844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8846:	682b      	ldr	r3, [r5, #0]
   d8848:	7023      	strb	r3, [r4, #0]
   d884a:	463a      	mov	r2, r7
   d884c:	4643      	mov	r3, r8
   d884e:	a90c      	add	r1, sp, #48	; 0x30
   d8850:	4630      	mov	r0, r6
   d8852:	47c8      	blx	r9
   d8854:	4681      	mov	r9, r0
   d8856:	e01b      	b.n	d8890 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8858:	46a1      	mov	r9, r4
   d885a:	e019      	b.n	d8890 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d885c:	f104 0308 	add.w	r3, r4, #8
   d8860:	ad01      	add	r5, sp, #4
   d8862:	3418      	adds	r4, #24
   d8864:	6818      	ldr	r0, [r3, #0]
   d8866:	6859      	ldr	r1, [r3, #4]
   d8868:	462a      	mov	r2, r5
   d886a:	c203      	stmia	r2!, {r0, r1}
   d886c:	3308      	adds	r3, #8
   d886e:	42a3      	cmp	r3, r4
   d8870:	4615      	mov	r5, r2
   d8872:	d1f7      	bne.n	d8864 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d8874:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8876:	a901      	add	r1, sp, #4
   d8878:	a80c      	add	r0, sp, #48	; 0x30
   d887a:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d887c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8880:	f7ff fbe0 	bl	d8044 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8886:	ac07      	add	r4, sp, #28
   d8888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d888a:	682b      	ldr	r3, [r5, #0]
   d888c:	7023      	strb	r3, [r4, #0]
   d888e:	e7cc      	b.n	d882a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d8890:	9800      	ldr	r0, [sp, #0]
   d8892:	f7fe fca1 	bl	d71d8 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d8896:	4648      	mov	r0, r9
   d8898:	b013      	add	sp, #76	; 0x4c
   d889a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d889e:	bf00      	nop
   d88a0:	000da6d0 	.word	0x000da6d0

000d88a4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d88a4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d88a6:	2300      	movs	r3, #0
   d88a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d88ac:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d88ae:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d88b2:	4770      	bx	lr

000d88b4 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d88b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d88b8:	461e      	mov	r6, r3
    stop();
   d88ba:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d88bc:	460c      	mov	r4, r1
   d88be:	b08a      	sub	sp, #40	; 0x28
    stop();
   d88c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d88c2:	4605      	mov	r5, r0
   d88c4:	4617      	mov	r7, r2
    stop();
   d88c6:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d88c8:	7d23      	ldrb	r3, [r4, #20]
   d88ca:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d88ce:	2b04      	cmp	r3, #4
   d88d0:	bf0c      	ite	eq
   d88d2:	2002      	moveq	r0, #2
   d88d4:	200a      	movne	r0, #10
   d88d6:	2206      	movs	r2, #6
   d88d8:	2101      	movs	r1, #1
   d88da:	f7fe fe65 	bl	d75a8 <sock_socket>
   d88de:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d88e2:	696b      	ldr	r3, [r5, #20]
   d88e4:	681b      	ldr	r3, [r3, #0]
   d88e6:	2b00      	cmp	r3, #0
   d88e8:	db18      	blt.n	d891c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d88ea:	4628      	mov	r0, r5
   d88ec:	f7ff ffda 	bl	d88a4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d88f0:	b1d6      	cbz	r6, d8928 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d88f2:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d88f4:	a903      	add	r1, sp, #12
   d88f6:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d88f8:	9303      	str	r3, [sp, #12]
   d88fa:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d88fe:	f7fe fd13 	bl	d7328 <if_index_to_name>
   d8902:	b958      	cbnz	r0, d891c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8904:	6968      	ldr	r0, [r5, #20]
   d8906:	2306      	movs	r3, #6
   d8908:	9300      	str	r3, [sp, #0]
   d890a:	f241 020b 	movw	r2, #4107	; 0x100b
   d890e:	ab03      	add	r3, sp, #12
   d8910:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8914:	6800      	ldr	r0, [r0, #0]
   d8916:	f7fe fe1f 	bl	d7558 <sock_setsockopt>
   d891a:	b128      	cbz	r0, d8928 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d891c:	682b      	ldr	r3, [r5, #0]
   d891e:	4628      	mov	r0, r5
   d8920:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8922:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d8924:	4798      	blx	r3
   d8926:	e03b      	b.n	d89a0 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d8928:	261c      	movs	r6, #28
   d892a:	4632      	mov	r2, r6
   d892c:	2100      	movs	r1, #0
   d892e:	a803      	add	r0, sp, #12
   d8930:	f000 ff36 	bl	d97a0 <memset>
    if (ip.version() == 4) {
   d8934:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d8936:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d893a:	2b04      	cmp	r3, #4
   d893c:	d10c      	bne.n	d8958 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d893e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d8940:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d8942:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d8946:	f7fe fd5f 	bl	d7408 <inet_htons>
   d894a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d894e:	6860      	ldr	r0, [r4, #4]
   d8950:	f7fe fd52 	bl	d73f8 <inet_htonl>
   d8954:	9004      	str	r0, [sp, #16]
   d8956:	e013      	b.n	d8980 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d8958:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d895a:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d895c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d8960:	f7fe fd52 	bl	d7408 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8964:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d8966:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d896a:	1d23      	adds	r3, r4, #4
   d896c:	f104 0714 	add.w	r7, r4, #20
   d8970:	6818      	ldr	r0, [r3, #0]
   d8972:	6859      	ldr	r1, [r3, #4]
   d8974:	4632      	mov	r2, r6
   d8976:	c203      	stmia	r2!, {r0, r1}
   d8978:	3308      	adds	r3, #8
   d897a:	42bb      	cmp	r3, r7
   d897c:	4616      	mov	r6, r2
   d897e:	d1f7      	bne.n	d8970 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d8980:	696b      	ldr	r3, [r5, #20]
   d8982:	221c      	movs	r2, #28
   d8984:	a903      	add	r1, sp, #12
   d8986:	6818      	ldr	r0, [r3, #0]
   d8988:	f7fe fdf6 	bl	d7578 <sock_connect>
   d898c:	2800      	cmp	r0, #0
   d898e:	d1c5      	bne.n	d891c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d8990:	3404      	adds	r4, #4
   d8992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8994:	696d      	ldr	r5, [r5, #20]
   d8996:	358c      	adds	r5, #140	; 0x8c
   d8998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d899a:	6823      	ldr	r3, [r4, #0]
   d899c:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d899e:	2401      	movs	r4, #1
}
   d89a0:	4620      	mov	r0, r4
   d89a2:	b00a      	add	sp, #40	; 0x28
   d89a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d89a8 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d89a8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d89aa:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d89ac:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d89ae:	6818      	ldr	r0, [r3, #0]
   d89b0:	2800      	cmp	r0, #0
   d89b2:	db01      	blt.n	d89b8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d89b4:	f7fe fdd8 	bl	d7568 <sock_close>
   d89b8:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d89ba:	f04f 32ff 	mov.w	r2, #4294967295
   d89be:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d89c0:	6960      	ldr	r0, [r4, #20]
   d89c2:	2211      	movs	r2, #17
   d89c4:	2100      	movs	r1, #0
   d89c6:	308c      	adds	r0, #140	; 0x8c
   d89c8:	f000 feea 	bl	d97a0 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d89cc:	4620      	mov	r0, r4
}
   d89ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d89d2:	f7ff bf67 	b.w	d88a4 <_ZN9TCPClient12flush_bufferEv>
	...

000d89d8 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d89d8:	b530      	push	{r4, r5, lr}
   d89da:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d89dc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d89e0:	b08b      	sub	sp, #44	; 0x2c
   d89e2:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d89e4:	b11b      	cbz	r3, d89ee <_ZN9TCPClient9availableEv+0x16>
   d89e6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d89ea:	429a      	cmp	r2, r3
   d89ec:	d040      	beq.n	d8a70 <_ZN9TCPClient9availableEv+0x98>
   d89ee:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d89f0:	6818      	ldr	r0, [r3, #0]
   d89f2:	2800      	cmp	r0, #0
   d89f4:	db3f      	blt.n	d8a76 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d89f6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d89fa:	2d7f      	cmp	r5, #127	; 0x7f
   d89fc:	d83b      	bhi.n	d8a76 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d89fe:	1d19      	adds	r1, r3, #4
   d8a00:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8a04:	2308      	movs	r3, #8
   d8a06:	4429      	add	r1, r5
   d8a08:	f7fe fdbe 	bl	d7588 <sock_recv>
            if (ret > 0) {
   d8a0c:	2800      	cmp	r0, #0
   d8a0e:	dd0c      	ble.n	d8a2a <_ZN9TCPClient9availableEv+0x52>
   d8a10:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8a12:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8a16:	b90a      	cbnz	r2, d8a1c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8a18:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8a1c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d8a1e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8a22:	4418      	add	r0, r3
   d8a24:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8a28:	e025      	b.n	d8a76 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8a2a:	f7fe fef1 	bl	d7810 <__errno>
   d8a2e:	6803      	ldr	r3, [r0, #0]
   d8a30:	2b0b      	cmp	r3, #11
   d8a32:	d020      	beq.n	d8a76 <_ZN9TCPClient9availableEv+0x9e>
   d8a34:	f7fe feec 	bl	d7810 <__errno>
   d8a38:	6803      	ldr	r3, [r0, #0]
   d8a3a:	2b0b      	cmp	r3, #11
   d8a3c:	d01b      	beq.n	d8a76 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d8a3e:	2320      	movs	r3, #32
   d8a40:	2500      	movs	r5, #0
   d8a42:	9302      	str	r3, [sp, #8]
   d8a44:	9503      	str	r5, [sp, #12]
   d8a46:	f7fe fee3 	bl	d7810 <__errno>
   d8a4a:	6803      	ldr	r3, [r0, #0]
   d8a4c:	9301      	str	r3, [sp, #4]
   d8a4e:	4b0e      	ldr	r3, [pc, #56]	; (d8a88 <_ZN9TCPClient9availableEv+0xb0>)
   d8a50:	9300      	str	r3, [sp, #0]
   d8a52:	aa02      	add	r2, sp, #8
   d8a54:	462b      	mov	r3, r5
   d8a56:	490d      	ldr	r1, [pc, #52]	; (d8a8c <_ZN9TCPClient9availableEv+0xb4>)
   d8a58:	2032      	movs	r0, #50	; 0x32
   d8a5a:	f7fe fded 	bl	d7638 <log_message>
                    sock_close(d_->sock);
   d8a5e:	6963      	ldr	r3, [r4, #20]
   d8a60:	6818      	ldr	r0, [r3, #0]
   d8a62:	f7fe fd81 	bl	d7568 <sock_close>
   d8a66:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8a68:	f04f 32ff 	mov.w	r2, #4294967295
   d8a6c:	601a      	str	r2, [r3, #0]
   d8a6e:	e002      	b.n	d8a76 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d8a70:	f7ff ff18 	bl	d88a4 <_ZN9TCPClient12flush_bufferEv>
   d8a74:	e7bb      	b.n	d89ee <_ZN9TCPClient9availableEv+0x16>
   d8a76:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d8a78:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8a7c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d8a80:	1a18      	subs	r0, r3, r0
}
   d8a82:	b00b      	add	sp, #44	; 0x2c
   d8a84:	bd30      	pop	{r4, r5, pc}
   d8a86:	bf00      	nop
   d8a88:	000da807 	.word	0x000da807
   d8a8c:	000da800 	.word	0x000da800

000d8a90 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8a90:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8a92:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8a94:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d8a96:	6001      	str	r1, [r0, #0]
   d8a98:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d8a9c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d8aa0:	3088      	adds	r0, #136	; 0x88
   d8aa2:	f7ff fac1 	bl	d8028 <_ZN9IPAddressC1Ev>
}
   d8aa6:	4620      	mov	r0, r4
   d8aa8:	bd10      	pop	{r4, pc}
	...

000d8aac <_ZN9TCPClientC1Ei>:
   d8aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8ab0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8ab2:	2300      	movs	r3, #0
   d8ab4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d8ab6:	4a14      	ldr	r2, [pc, #80]	; (d8b08 <_ZN9TCPClientC1Ei+0x5c>)
   d8ab8:	6043      	str	r3, [r0, #4]
   d8aba:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8abc:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8abe:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8ac0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8ac2:	20a0      	movs	r0, #160	; 0xa0
   d8ac4:	460e      	mov	r6, r1
   d8ac6:	f7fb fae6 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8aca:	4605      	mov	r5, r0
   d8acc:	b110      	cbz	r0, d8ad4 <_ZN9TCPClientC1Ei+0x28>
   d8ace:	4631      	mov	r1, r6
   d8ad0:	f7ff ffde 	bl	d8a90 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8ad4:	2014      	movs	r0, #20
   d8ad6:	f7fb fade 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8ada:	4603      	mov	r3, r0
   d8adc:	b128      	cbz	r0, d8aea <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8ade:	2201      	movs	r2, #1
   d8ae0:	6042      	str	r2, [r0, #4]
   d8ae2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8ae4:	4a09      	ldr	r2, [pc, #36]	; (d8b0c <_ZN9TCPClientC1Ei+0x60>)
   d8ae6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8ae8:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8aea:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8aec:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8aee:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d8af0:	b128      	cbz	r0, d8afe <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8af2:	6843      	ldr	r3, [r0, #4]
   d8af4:	3b01      	subs	r3, #1
   d8af6:	6043      	str	r3, [r0, #4]
   d8af8:	b90b      	cbnz	r3, d8afe <_ZN9TCPClientC1Ei+0x52>
   d8afa:	f7ff fddf 	bl	d86bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d8afe:	4620      	mov	r0, r4
   d8b00:	f7ff fed0 	bl	d88a4 <_ZN9TCPClient12flush_bufferEv>
}
   d8b04:	4620      	mov	r0, r4
   d8b06:	bd70      	pop	{r4, r5, r6, pc}
   d8b08:	000da7bc 	.word	0x000da7bc
   d8b0c:	000da7a0 	.word	0x000da7a0

000d8b10 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8b10:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8b12:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8b16:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8b18:	f7ff ffc8 	bl	d8aac <_ZN9TCPClientC1Ei>
}
   d8b1c:	4620      	mov	r0, r4
   d8b1e:	bd10      	pop	{r4, pc}

000d8b20 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8b20:	b510      	push	{r4, lr}
   d8b22:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8b24:	6800      	ldr	r0, [r0, #0]
   d8b26:	2800      	cmp	r0, #0
   d8b28:	db01      	blt.n	d8b2e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8b2a:	f7fe fd1d 	bl	d7568 <sock_close>
    }
}
   d8b2e:	4620      	mov	r0, r4
   d8b30:	bd10      	pop	{r4, pc}

000d8b32 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8b32:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8b34:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d8b36:	4620      	mov	r0, r4
   d8b38:	f7ff fff2 	bl	d8b20 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8b3c:	b124      	cbz	r4, d8b48 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8b3e:	4620      	mov	r0, r4
   d8b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8b44:	f7fb baa9 	b.w	d409a <_ZdlPv>
   d8b48:	bd10      	pop	{r4, pc}

000d8b4a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8b4a:	2200      	movs	r2, #0
   d8b4c:	4611      	mov	r1, r2
   d8b4e:	6840      	ldr	r0, [r0, #4]
   d8b50:	f7fe bdc6 	b.w	d76e0 <network_ready>

000d8b54 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8b54:	2200      	movs	r2, #0
   d8b56:	4611      	mov	r1, r2
   d8b58:	6840      	ldr	r0, [r0, #4]
   d8b5a:	f7fe bde1 	b.w	d7720 <network_listening>

000d8b5e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8b5e:	2200      	movs	r2, #0
   d8b60:	4611      	mov	r1, r2
   d8b62:	6840      	ldr	r0, [r0, #4]
   d8b64:	f7fe bdec 	b.w	d7740 <network_get_listen_timeout>

000d8b68 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8b68:	2200      	movs	r2, #0
   d8b6a:	6840      	ldr	r0, [r0, #4]
   d8b6c:	f7fe bde0 	b.w	d7730 <network_set_listen_timeout>

000d8b70 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8b70:	2200      	movs	r2, #0
   d8b72:	f081 0101 	eor.w	r1, r1, #1
   d8b76:	6840      	ldr	r0, [r0, #4]
   d8b78:	f7fe bdca 	b.w	d7710 <network_listen>

000d8b7c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8b7c:	2300      	movs	r3, #0
   d8b7e:	461a      	mov	r2, r3
   d8b80:	4619      	mov	r1, r3
   d8b82:	6840      	ldr	r0, [r0, #4]
   d8b84:	f7fe bdbc 	b.w	d7700 <network_off>

000d8b88 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8b88:	2300      	movs	r3, #0
   d8b8a:	461a      	mov	r2, r3
   d8b8c:	4619      	mov	r1, r3
   d8b8e:	6840      	ldr	r0, [r0, #4]
   d8b90:	f7fe bdae 	b.w	d76f0 <network_on>

000d8b94 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8b94:	2200      	movs	r2, #0
   d8b96:	4611      	mov	r1, r2
   d8b98:	6840      	ldr	r0, [r0, #4]
   d8b9a:	f7fe bd91 	b.w	d76c0 <network_connecting>

000d8b9e <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8b9e:	2200      	movs	r2, #0
   d8ba0:	2102      	movs	r1, #2
   d8ba2:	6840      	ldr	r0, [r0, #4]
   d8ba4:	f7fe bd94 	b.w	d76d0 <network_disconnect>

000d8ba8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8ba8:	2300      	movs	r3, #0
   d8baa:	461a      	mov	r2, r3
   d8bac:	6840      	ldr	r0, [r0, #4]
   d8bae:	f7fe bd7f 	b.w	d76b0 <network_connect>
	...

000d8bb4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8bb4:	4b02      	ldr	r3, [pc, #8]	; (d8bc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8bb6:	2204      	movs	r2, #4
   d8bb8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8bba:	4a02      	ldr	r2, [pc, #8]	; (d8bc4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8bbc:	601a      	str	r2, [r3, #0]
   d8bbe:	4770      	bx	lr
   d8bc0:	2003e6f8 	.word	0x2003e6f8
   d8bc4:	000da820 	.word	0x000da820

000d8bc8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8bc8:	2300      	movs	r3, #0
   d8bca:	461a      	mov	r2, r3
   d8bcc:	6840      	ldr	r0, [r0, #4]
   d8bce:	f7fe bd6f 	b.w	d76b0 <network_connect>

000d8bd2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8bd2:	2200      	movs	r2, #0
   d8bd4:	2102      	movs	r1, #2
   d8bd6:	6840      	ldr	r0, [r0, #4]
   d8bd8:	f7fe bd7a 	b.w	d76d0 <network_disconnect>

000d8bdc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8bdc:	2200      	movs	r2, #0
   d8bde:	4611      	mov	r1, r2
   d8be0:	6840      	ldr	r0, [r0, #4]
   d8be2:	f7fe bd6d 	b.w	d76c0 <network_connecting>

000d8be6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8be6:	2200      	movs	r2, #0
   d8be8:	4611      	mov	r1, r2
   d8bea:	6840      	ldr	r0, [r0, #4]
   d8bec:	f7fe bd78 	b.w	d76e0 <network_ready>

000d8bf0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8bf0:	2300      	movs	r3, #0
   d8bf2:	461a      	mov	r2, r3
   d8bf4:	4619      	mov	r1, r3
   d8bf6:	6840      	ldr	r0, [r0, #4]
   d8bf8:	f7fe bd7a 	b.w	d76f0 <network_on>

000d8bfc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8bfc:	2300      	movs	r3, #0
   d8bfe:	461a      	mov	r2, r3
   d8c00:	4619      	mov	r1, r3
   d8c02:	6840      	ldr	r0, [r0, #4]
   d8c04:	f7fe bd7c 	b.w	d7700 <network_off>

000d8c08 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8c08:	2200      	movs	r2, #0
   d8c0a:	f081 0101 	eor.w	r1, r1, #1
   d8c0e:	6840      	ldr	r0, [r0, #4]
   d8c10:	f7fe bd7e 	b.w	d7710 <network_listen>

000d8c14 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8c14:	2200      	movs	r2, #0
   d8c16:	6840      	ldr	r0, [r0, #4]
   d8c18:	f7fe bd8a 	b.w	d7730 <network_set_listen_timeout>

000d8c1c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8c1c:	2200      	movs	r2, #0
   d8c1e:	4611      	mov	r1, r2
   d8c20:	6840      	ldr	r0, [r0, #4]
   d8c22:	f7fe bd8d 	b.w	d7740 <network_get_listen_timeout>

000d8c26 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8c26:	2200      	movs	r2, #0
   d8c28:	4611      	mov	r1, r2
   d8c2a:	6840      	ldr	r0, [r0, #4]
   d8c2c:	f7fe bd78 	b.w	d7720 <network_listening>

000d8c30 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8c34:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8c36:	b095      	sub	sp, #84	; 0x54
   d8c38:	4616      	mov	r6, r2
   d8c3a:	460d      	mov	r5, r1
   d8c3c:	4607      	mov	r7, r0
    IPAddress addr;
   d8c3e:	f7ff f9f3 	bl	d8028 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8c42:	4621      	mov	r1, r4
   d8c44:	2220      	movs	r2, #32
   d8c46:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8c48:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8c4a:	f000 fda9 	bl	d97a0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8c4e:	2340      	movs	r3, #64	; 0x40
   d8c50:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8c52:	4621      	mov	r1, r4
   d8c54:	466b      	mov	r3, sp
   d8c56:	aa0c      	add	r2, sp, #48	; 0x30
   d8c58:	4630      	mov	r0, r6
   d8c5a:	f7fe fac5 	bl	d71e8 <netdb_getaddrinfo>
    if (!r) {
   d8c5e:	4604      	mov	r4, r0
   d8c60:	2800      	cmp	r0, #0
   d8c62:	d144      	bne.n	d8cee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8c64:	4602      	mov	r2, r0
   d8c66:	2101      	movs	r1, #1
   d8c68:	6868      	ldr	r0, [r5, #4]
   d8c6a:	f7fe fd39 	bl	d76e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8c6e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8c70:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8c72:	4622      	mov	r2, r4
   d8c74:	6868      	ldr	r0, [r5, #4]
   d8c76:	f7fe fd33 	bl	d76e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8c7a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8c7c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8c7e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8c80:	2e00      	cmp	r6, #0
   d8c82:	d034      	beq.n	d8cee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8c84:	2900      	cmp	r1, #0
   d8c86:	d132      	bne.n	d8cee <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8c88:	6873      	ldr	r3, [r6, #4]
   d8c8a:	2b02      	cmp	r3, #2
   d8c8c:	d002      	beq.n	d8c94 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8c8e:	2b0a      	cmp	r3, #10
   d8c90:	d009      	beq.n	d8ca6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8c92:	e02a      	b.n	d8cea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8c94:	f1b8 0f00 	cmp.w	r8, #0
   d8c98:	d027      	beq.n	d8cea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8c9a:	6971      	ldr	r1, [r6, #20]
   d8c9c:	4638      	mov	r0, r7
   d8c9e:	3104      	adds	r1, #4
   d8ca0:	f7ff fa05 	bl	d80ae <_ZN9IPAddressaSEPKh>
   d8ca4:	e020      	b.n	d8ce8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8ca6:	f1b9 0f00 	cmp.w	r9, #0
   d8caa:	d01e      	beq.n	d8cea <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8cac:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8cae:	2211      	movs	r2, #17
   d8cb0:	a801      	add	r0, sp, #4
   d8cb2:	f000 fd75 	bl	d97a0 <memset>
                    a.v = 6;
   d8cb6:	2306      	movs	r3, #6
   d8cb8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8cbc:	ad01      	add	r5, sp, #4
   d8cbe:	f104 0308 	add.w	r3, r4, #8
   d8cc2:	3418      	adds	r4, #24
   d8cc4:	6818      	ldr	r0, [r3, #0]
   d8cc6:	6859      	ldr	r1, [r3, #4]
   d8cc8:	462a      	mov	r2, r5
   d8cca:	c203      	stmia	r2!, {r0, r1}
   d8ccc:	3308      	adds	r3, #8
   d8cce:	42a3      	cmp	r3, r4
   d8cd0:	4615      	mov	r5, r2
   d8cd2:	d1f7      	bne.n	d8cc4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8cd4:	a901      	add	r1, sp, #4
   d8cd6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8cd8:	ad07      	add	r5, sp, #28
   d8cda:	f7ff f9b3 	bl	d8044 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8ce0:	1d3c      	adds	r4, r7, #4
   d8ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8ce4:	682b      	ldr	r3, [r5, #0]
   d8ce6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8ce8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8cea:	69f6      	ldr	r6, [r6, #28]
   d8cec:	e7c8      	b.n	d8c80 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8cee:	9800      	ldr	r0, [sp, #0]
   d8cf0:	f7fe fa72 	bl	d71d8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8cf4:	4638      	mov	r0, r7
   d8cf6:	b015      	add	sp, #84	; 0x54
   d8cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8cfc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8cfc:	4b02      	ldr	r3, [pc, #8]	; (d8d08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8cfe:	4a03      	ldr	r2, [pc, #12]	; (d8d0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8d00:	601a      	str	r2, [r3, #0]
   d8d02:	2200      	movs	r2, #0
   d8d04:	605a      	str	r2, [r3, #4]
   d8d06:	4770      	bx	lr
   d8d08:	2003e700 	.word	0x2003e700
   d8d0c:	000da854 	.word	0x000da854

000d8d10 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8d10:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8d12:	4e18      	ldr	r6, [pc, #96]	; (d8d74 <pinAvailable+0x64>)
   d8d14:	6831      	ldr	r1, [r6, #0]
   d8d16:	f011 0501 	ands.w	r5, r1, #1
   d8d1a:	4604      	mov	r4, r0
   d8d1c:	d10a      	bne.n	d8d34 <pinAvailable+0x24>
   d8d1e:	4630      	mov	r0, r6
   d8d20:	f7fb f9ca 	bl	d40b8 <__cxa_guard_acquire>
   d8d24:	b130      	cbz	r0, d8d34 <pinAvailable+0x24>
   d8d26:	4629      	mov	r1, r5
   d8d28:	4813      	ldr	r0, [pc, #76]	; (d8d78 <pinAvailable+0x68>)
   d8d2a:	f7fe fdbd 	bl	d78a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8d2e:	4630      	mov	r0, r6
   d8d30:	f7fb f9c7 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8d34:	4810      	ldr	r0, [pc, #64]	; (d8d78 <pinAvailable+0x68>)
   d8d36:	f7fe fe74 	bl	d7a22 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8d3a:	b128      	cbz	r0, d8d48 <pinAvailable+0x38>
   d8d3c:	f1a4 030b 	sub.w	r3, r4, #11
   d8d40:	2b02      	cmp	r3, #2
   d8d42:	d801      	bhi.n	d8d48 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8d44:	2000      	movs	r0, #0
   d8d46:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8d48:	f000 f886 	bl	d8e58 <_Z19__fetch_global_Wirev>
   d8d4c:	f7ff fb74 	bl	d8438 <_ZN7TwoWire9isEnabledEv>
   d8d50:	b108      	cbz	r0, d8d56 <pinAvailable+0x46>
   d8d52:	2c01      	cmp	r4, #1
   d8d54:	d9f6      	bls.n	d8d44 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8d56:	f7ff fac9 	bl	d82ec <_Z22__fetch_global_Serial1v>
   d8d5a:	f7ff fac4 	bl	d82e6 <_ZN11USARTSerial9isEnabledEv>
   d8d5e:	b118      	cbz	r0, d8d68 <pinAvailable+0x58>
   d8d60:	f1a4 0309 	sub.w	r3, r4, #9
   d8d64:	2b01      	cmp	r3, #1
   d8d66:	d9ed      	bls.n	d8d44 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8d68:	2c23      	cmp	r4, #35	; 0x23
   d8d6a:	bf8c      	ite	hi
   d8d6c:	2000      	movhi	r0, #0
   d8d6e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8d70:	bd70      	pop	{r4, r5, r6, pc}
   d8d72:	bf00      	nop
   d8d74:	2003dcdc 	.word	0x2003dcdc
   d8d78:	2003dce0 	.word	0x2003dce0

000d8d7c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8d7c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8d7e:	b538      	push	{r3, r4, r5, lr}
   d8d80:	4604      	mov	r4, r0
   d8d82:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8d84:	d80a      	bhi.n	d8d9c <pinMode+0x20>
   d8d86:	29ff      	cmp	r1, #255	; 0xff
   d8d88:	d008      	beq.n	d8d9c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8d8a:	f7ff ffc1 	bl	d8d10 <pinAvailable>
   d8d8e:	b128      	cbz	r0, d8d9c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8d90:	4629      	mov	r1, r5
   d8d92:	4620      	mov	r0, r4
}
   d8d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8d98:	f7fe ba3e 	b.w	d7218 <HAL_Pin_Mode>
   d8d9c:	bd38      	pop	{r3, r4, r5, pc}

000d8d9e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d8d9e:	b538      	push	{r3, r4, r5, lr}
   d8da0:	4604      	mov	r4, r0
   d8da2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8da4:	f7fe fa40 	bl	d7228 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8da8:	28ff      	cmp	r0, #255	; 0xff
   d8daa:	d010      	beq.n	d8dce <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d8dac:	2806      	cmp	r0, #6
   d8dae:	d804      	bhi.n	d8dba <digitalWrite+0x1c>
   d8db0:	234d      	movs	r3, #77	; 0x4d
   d8db2:	fa23 f000 	lsr.w	r0, r3, r0
   d8db6:	07c3      	lsls	r3, r0, #31
   d8db8:	d409      	bmi.n	d8dce <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8dba:	4620      	mov	r0, r4
   d8dbc:	f7ff ffa8 	bl	d8d10 <pinAvailable>
   d8dc0:	b128      	cbz	r0, d8dce <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8dc2:	4629      	mov	r1, r5
   d8dc4:	4620      	mov	r0, r4
}
   d8dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8dca:	f7fe ba35 	b.w	d7238 <HAL_GPIO_Write>
   d8dce:	bd38      	pop	{r3, r4, r5, pc}

000d8dd0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8dd0:	b510      	push	{r4, lr}
   d8dd2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8dd4:	f7fe fa28 	bl	d7228 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8dd8:	3804      	subs	r0, #4
   d8dda:	b2c0      	uxtb	r0, r0
   d8ddc:	2801      	cmp	r0, #1
   d8dde:	d908      	bls.n	d8df2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8de0:	4620      	mov	r0, r4
   d8de2:	f7ff ff95 	bl	d8d10 <pinAvailable>
   d8de6:	b120      	cbz	r0, d8df2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8de8:	4620      	mov	r0, r4
}
   d8dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8dee:	f7fe ba2b 	b.w	d7248 <HAL_GPIO_Read>
}
   d8df2:	2000      	movs	r0, #0
   d8df4:	bd10      	pop	{r4, pc}

000d8df6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8df6:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8df8:	b510      	push	{r4, lr}
   d8dfa:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8dfc:	bf9c      	itt	ls
   d8dfe:	340e      	addls	r4, #14
   d8e00:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8e02:	4620      	mov	r0, r4
   d8e04:	f7ff ff84 	bl	d8d10 <pinAvailable>
   d8e08:	b150      	cbz	r0, d8e20 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8e0a:	2103      	movs	r1, #3
   d8e0c:	4620      	mov	r0, r4
   d8e0e:	f7fe f9fb 	bl	d7208 <HAL_Validate_Pin_Function>
   d8e12:	2803      	cmp	r0, #3
   d8e14:	d104      	bne.n	d8e20 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8e16:	4620      	mov	r0, r4
}
   d8e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8e1c:	f7fe ba2c 	b.w	d7278 <HAL_ADC_Read>
}
   d8e20:	2000      	movs	r0, #0
   d8e22:	bd10      	pop	{r4, pc}

000d8e24 <_Z17acquireWireBufferv>:
   d8e24:	b570      	push	{r4, r5, r6, lr}
   d8e26:	4604      	mov	r4, r0
   d8e28:	2514      	movs	r5, #20
   d8e2a:	462a      	mov	r2, r5
   d8e2c:	4e09      	ldr	r6, [pc, #36]	; (d8e54 <_Z17acquireWireBufferv+0x30>)
   d8e2e:	2100      	movs	r1, #0
   d8e30:	f000 fcb6 	bl	d97a0 <memset>
   d8e34:	8025      	strh	r5, [r4, #0]
   d8e36:	2520      	movs	r5, #32
   d8e38:	4631      	mov	r1, r6
   d8e3a:	60a5      	str	r5, [r4, #8]
   d8e3c:	6125      	str	r5, [r4, #16]
   d8e3e:	4628      	mov	r0, r5
   d8e40:	f000 f840 	bl	d8ec4 <_ZnajRKSt9nothrow_t>
   d8e44:	4631      	mov	r1, r6
   d8e46:	6060      	str	r0, [r4, #4]
   d8e48:	4628      	mov	r0, r5
   d8e4a:	f000 f83b 	bl	d8ec4 <_ZnajRKSt9nothrow_t>
   d8e4e:	60e0      	str	r0, [r4, #12]
   d8e50:	4620      	mov	r0, r4
   d8e52:	bd70      	pop	{r4, r5, r6, pc}
   d8e54:	000da880 	.word	0x000da880

000d8e58 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8e58:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8e5a:	4d0e      	ldr	r5, [pc, #56]	; (d8e94 <_Z19__fetch_global_Wirev+0x3c>)
   d8e5c:	6829      	ldr	r1, [r5, #0]
   d8e5e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8e62:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8e64:	d113      	bne.n	d8e8e <_Z19__fetch_global_Wirev+0x36>
   d8e66:	4628      	mov	r0, r5
   d8e68:	f7fb f926 	bl	d40b8 <__cxa_guard_acquire>
   d8e6c:	b178      	cbz	r0, d8e8e <_Z19__fetch_global_Wirev+0x36>
   d8e6e:	a801      	add	r0, sp, #4
   d8e70:	f7ff ffd8 	bl	d8e24 <_Z17acquireWireBufferv>
   d8e74:	aa01      	add	r2, sp, #4
   d8e76:	4621      	mov	r1, r4
   d8e78:	4807      	ldr	r0, [pc, #28]	; (d8e98 <_Z19__fetch_global_Wirev+0x40>)
   d8e7a:	f7ff fa89 	bl	d8390 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d8e7e:	4628      	mov	r0, r5
   d8e80:	f7fb f91f 	bl	d40c2 <__cxa_guard_release>
   d8e84:	4a05      	ldr	r2, [pc, #20]	; (d8e9c <_Z19__fetch_global_Wirev+0x44>)
   d8e86:	4906      	ldr	r1, [pc, #24]	; (d8ea0 <_Z19__fetch_global_Wirev+0x48>)
   d8e88:	4803      	ldr	r0, [pc, #12]	; (d8e98 <_Z19__fetch_global_Wirev+0x40>)
   d8e8a:	f000 f80b 	bl	d8ea4 <__aeabi_atexit>
	return wire;
}
   d8e8e:	4802      	ldr	r0, [pc, #8]	; (d8e98 <_Z19__fetch_global_Wirev+0x40>)
   d8e90:	b007      	add	sp, #28
   d8e92:	bd30      	pop	{r4, r5, pc}
   d8e94:	2003e70c 	.word	0x2003e70c
   d8e98:	2003e710 	.word	0x2003e710
   d8e9c:	2003dcd8 	.word	0x2003dcd8
   d8ea0:	000d8339 	.word	0x000d8339

000d8ea4 <__aeabi_atexit>:
   d8ea4:	460b      	mov	r3, r1
   d8ea6:	4601      	mov	r1, r0
   d8ea8:	4618      	mov	r0, r3
   d8eaa:	f000 bb59 	b.w	d9560 <__cxa_atexit>
	...

000d8eb0 <_ZSt15get_new_handlerv>:
   d8eb0:	4b02      	ldr	r3, [pc, #8]	; (d8ebc <_ZSt15get_new_handlerv+0xc>)
   d8eb2:	6818      	ldr	r0, [r3, #0]
   d8eb4:	f3bf 8f5f 	dmb	sy
   d8eb8:	4770      	bx	lr
   d8eba:	bf00      	nop
   d8ebc:	2003e724 	.word	0x2003e724

000d8ec0 <_ZdlPvj>:
   d8ec0:	f7fb b8eb 	b.w	d409a <_ZdlPv>

000d8ec4 <_ZnajRKSt9nothrow_t>:
   d8ec4:	f000 b800 	b.w	d8ec8 <_ZnwjRKSt9nothrow_t>

000d8ec8 <_ZnwjRKSt9nothrow_t>:
   d8ec8:	b510      	push	{r4, lr}
   d8eca:	2800      	cmp	r0, #0
   d8ecc:	bf14      	ite	ne
   d8ece:	4604      	movne	r4, r0
   d8ed0:	2401      	moveq	r4, #1
   d8ed2:	4620      	mov	r0, r4
   d8ed4:	f7fe fc64 	bl	d77a0 <malloc>
   d8ed8:	b920      	cbnz	r0, d8ee4 <_ZnwjRKSt9nothrow_t+0x1c>
   d8eda:	f7ff ffe9 	bl	d8eb0 <_ZSt15get_new_handlerv>
   d8ede:	b108      	cbz	r0, d8ee4 <_ZnwjRKSt9nothrow_t+0x1c>
   d8ee0:	4780      	blx	r0
   d8ee2:	e7f6      	b.n	d8ed2 <_ZnwjRKSt9nothrow_t+0xa>
   d8ee4:	bd10      	pop	{r4, pc}
	...

000d8ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8ee8:	4b18      	ldr	r3, [pc, #96]	; (d8f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8eea:	681a      	ldr	r2, [r3, #0]
   d8eec:	07d1      	lsls	r1, r2, #31
   d8eee:	bf5c      	itt	pl
   d8ef0:	2201      	movpl	r2, #1
   d8ef2:	601a      	strpl	r2, [r3, #0]
   d8ef4:	4b16      	ldr	r3, [pc, #88]	; (d8f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8ef6:	681a      	ldr	r2, [r3, #0]
   d8ef8:	07d2      	lsls	r2, r2, #31
   d8efa:	bf5c      	itt	pl
   d8efc:	2201      	movpl	r2, #1
   d8efe:	601a      	strpl	r2, [r3, #0]
   d8f00:	4b14      	ldr	r3, [pc, #80]	; (d8f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8f02:	681a      	ldr	r2, [r3, #0]
   d8f04:	07d0      	lsls	r0, r2, #31
   d8f06:	bf5c      	itt	pl
   d8f08:	2201      	movpl	r2, #1
   d8f0a:	601a      	strpl	r2, [r3, #0]
   d8f0c:	4b12      	ldr	r3, [pc, #72]	; (d8f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8f0e:	681a      	ldr	r2, [r3, #0]
   d8f10:	07d1      	lsls	r1, r2, #31
   d8f12:	bf5c      	itt	pl
   d8f14:	2201      	movpl	r2, #1
   d8f16:	601a      	strpl	r2, [r3, #0]
   d8f18:	4b10      	ldr	r3, [pc, #64]	; (d8f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8f1a:	681a      	ldr	r2, [r3, #0]
   d8f1c:	07d2      	lsls	r2, r2, #31
   d8f1e:	bf5c      	itt	pl
   d8f20:	2201      	movpl	r2, #1
   d8f22:	601a      	strpl	r2, [r3, #0]
   d8f24:	4b0e      	ldr	r3, [pc, #56]	; (d8f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8f26:	681a      	ldr	r2, [r3, #0]
   d8f28:	07d0      	lsls	r0, r2, #31
   d8f2a:	bf5c      	itt	pl
   d8f2c:	2201      	movpl	r2, #1
   d8f2e:	601a      	strpl	r2, [r3, #0]
   d8f30:	4b0c      	ldr	r3, [pc, #48]	; (d8f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8f32:	681a      	ldr	r2, [r3, #0]
   d8f34:	07d1      	lsls	r1, r2, #31
   d8f36:	bf5c      	itt	pl
   d8f38:	2201      	movpl	r2, #1
   d8f3a:	601a      	strpl	r2, [r3, #0]
   d8f3c:	4b0a      	ldr	r3, [pc, #40]	; (d8f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8f3e:	681a      	ldr	r2, [r3, #0]
   d8f40:	07d2      	lsls	r2, r2, #31
   d8f42:	bf5c      	itt	pl
   d8f44:	2201      	movpl	r2, #1
   d8f46:	601a      	strpl	r2, [r3, #0]
   d8f48:	4770      	bx	lr
   d8f4a:	bf00      	nop
   d8f4c:	2003e744 	.word	0x2003e744
   d8f50:	2003e740 	.word	0x2003e740
   d8f54:	2003e73c 	.word	0x2003e73c
   d8f58:	2003e738 	.word	0x2003e738
   d8f5c:	2003e734 	.word	0x2003e734
   d8f60:	2003e730 	.word	0x2003e730
   d8f64:	2003e72c 	.word	0x2003e72c
   d8f68:	2003e728 	.word	0x2003e728

000d8f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8f6c:	4b24      	ldr	r3, [pc, #144]	; (d9000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8f6e:	681a      	ldr	r2, [r3, #0]
   d8f70:	07d0      	lsls	r0, r2, #31
   d8f72:	bf5c      	itt	pl
   d8f74:	2201      	movpl	r2, #1
   d8f76:	601a      	strpl	r2, [r3, #0]
   d8f78:	4b22      	ldr	r3, [pc, #136]	; (d9004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8f7a:	681a      	ldr	r2, [r3, #0]
   d8f7c:	07d1      	lsls	r1, r2, #31
   d8f7e:	bf5c      	itt	pl
   d8f80:	2201      	movpl	r2, #1
   d8f82:	601a      	strpl	r2, [r3, #0]
   d8f84:	4b20      	ldr	r3, [pc, #128]	; (d9008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8f86:	681a      	ldr	r2, [r3, #0]
   d8f88:	07d2      	lsls	r2, r2, #31
   d8f8a:	bf5c      	itt	pl
   d8f8c:	2201      	movpl	r2, #1
   d8f8e:	601a      	strpl	r2, [r3, #0]
   d8f90:	4b1e      	ldr	r3, [pc, #120]	; (d900c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8f92:	681a      	ldr	r2, [r3, #0]
   d8f94:	07d0      	lsls	r0, r2, #31
   d8f96:	bf5c      	itt	pl
   d8f98:	2201      	movpl	r2, #1
   d8f9a:	601a      	strpl	r2, [r3, #0]
   d8f9c:	4b1c      	ldr	r3, [pc, #112]	; (d9010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8f9e:	681a      	ldr	r2, [r3, #0]
   d8fa0:	07d1      	lsls	r1, r2, #31
   d8fa2:	bf5c      	itt	pl
   d8fa4:	2201      	movpl	r2, #1
   d8fa6:	601a      	strpl	r2, [r3, #0]
   d8fa8:	4b1a      	ldr	r3, [pc, #104]	; (d9014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8faa:	681a      	ldr	r2, [r3, #0]
   d8fac:	07d2      	lsls	r2, r2, #31
   d8fae:	bf5c      	itt	pl
   d8fb0:	2201      	movpl	r2, #1
   d8fb2:	601a      	strpl	r2, [r3, #0]
   d8fb4:	4b18      	ldr	r3, [pc, #96]	; (d9018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8fb6:	681a      	ldr	r2, [r3, #0]
   d8fb8:	07d0      	lsls	r0, r2, #31
   d8fba:	bf5c      	itt	pl
   d8fbc:	2201      	movpl	r2, #1
   d8fbe:	601a      	strpl	r2, [r3, #0]
   d8fc0:	4b16      	ldr	r3, [pc, #88]	; (d901c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8fc2:	681a      	ldr	r2, [r3, #0]
   d8fc4:	07d1      	lsls	r1, r2, #31
   d8fc6:	bf5c      	itt	pl
   d8fc8:	2201      	movpl	r2, #1
   d8fca:	601a      	strpl	r2, [r3, #0]
   d8fcc:	4b14      	ldr	r3, [pc, #80]	; (d9020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8fce:	681a      	ldr	r2, [r3, #0]
   d8fd0:	07d2      	lsls	r2, r2, #31
   d8fd2:	bf5c      	itt	pl
   d8fd4:	2201      	movpl	r2, #1
   d8fd6:	601a      	strpl	r2, [r3, #0]
   d8fd8:	4b12      	ldr	r3, [pc, #72]	; (d9024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8fda:	681a      	ldr	r2, [r3, #0]
   d8fdc:	07d0      	lsls	r0, r2, #31
   d8fde:	bf5c      	itt	pl
   d8fe0:	2201      	movpl	r2, #1
   d8fe2:	601a      	strpl	r2, [r3, #0]
   d8fe4:	4b10      	ldr	r3, [pc, #64]	; (d9028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8fe6:	681a      	ldr	r2, [r3, #0]
   d8fe8:	07d1      	lsls	r1, r2, #31
   d8fea:	bf5c      	itt	pl
   d8fec:	2201      	movpl	r2, #1
   d8fee:	601a      	strpl	r2, [r3, #0]
   d8ff0:	4b0e      	ldr	r3, [pc, #56]	; (d902c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8ff2:	681a      	ldr	r2, [r3, #0]
   d8ff4:	07d2      	lsls	r2, r2, #31
   d8ff6:	bf5c      	itt	pl
   d8ff8:	2201      	movpl	r2, #1
   d8ffa:	601a      	strpl	r2, [r3, #0]
   d8ffc:	4770      	bx	lr
   d8ffe:	bf00      	nop
   d9000:	2003e774 	.word	0x2003e774
   d9004:	2003e770 	.word	0x2003e770
   d9008:	2003e76c 	.word	0x2003e76c
   d900c:	2003e768 	.word	0x2003e768
   d9010:	2003e764 	.word	0x2003e764
   d9014:	2003e760 	.word	0x2003e760
   d9018:	2003e75c 	.word	0x2003e75c
   d901c:	2003e758 	.word	0x2003e758
   d9020:	2003e754 	.word	0x2003e754
   d9024:	2003e750 	.word	0x2003e750
   d9028:	2003e74c 	.word	0x2003e74c
   d902c:	2003e748 	.word	0x2003e748

000d9030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9030:	4b24      	ldr	r3, [pc, #144]	; (d90c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d9032:	681a      	ldr	r2, [r3, #0]
   d9034:	07d0      	lsls	r0, r2, #31
   d9036:	bf5c      	itt	pl
   d9038:	2201      	movpl	r2, #1
   d903a:	601a      	strpl	r2, [r3, #0]
   d903c:	4b22      	ldr	r3, [pc, #136]	; (d90c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d903e:	681a      	ldr	r2, [r3, #0]
   d9040:	07d1      	lsls	r1, r2, #31
   d9042:	bf5c      	itt	pl
   d9044:	2201      	movpl	r2, #1
   d9046:	601a      	strpl	r2, [r3, #0]
   d9048:	4b20      	ldr	r3, [pc, #128]	; (d90cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d904a:	681a      	ldr	r2, [r3, #0]
   d904c:	07d2      	lsls	r2, r2, #31
   d904e:	bf5c      	itt	pl
   d9050:	2201      	movpl	r2, #1
   d9052:	601a      	strpl	r2, [r3, #0]
   d9054:	4b1e      	ldr	r3, [pc, #120]	; (d90d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d9056:	681a      	ldr	r2, [r3, #0]
   d9058:	07d0      	lsls	r0, r2, #31
   d905a:	bf5c      	itt	pl
   d905c:	2201      	movpl	r2, #1
   d905e:	601a      	strpl	r2, [r3, #0]
   d9060:	4b1c      	ldr	r3, [pc, #112]	; (d90d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d9062:	681a      	ldr	r2, [r3, #0]
   d9064:	07d1      	lsls	r1, r2, #31
   d9066:	bf5c      	itt	pl
   d9068:	2201      	movpl	r2, #1
   d906a:	601a      	strpl	r2, [r3, #0]
   d906c:	4b1a      	ldr	r3, [pc, #104]	; (d90d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d906e:	681a      	ldr	r2, [r3, #0]
   d9070:	07d2      	lsls	r2, r2, #31
   d9072:	bf5c      	itt	pl
   d9074:	2201      	movpl	r2, #1
   d9076:	601a      	strpl	r2, [r3, #0]
   d9078:	4b18      	ldr	r3, [pc, #96]	; (d90dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d907a:	681a      	ldr	r2, [r3, #0]
   d907c:	07d0      	lsls	r0, r2, #31
   d907e:	bf5c      	itt	pl
   d9080:	2201      	movpl	r2, #1
   d9082:	601a      	strpl	r2, [r3, #0]
   d9084:	4b16      	ldr	r3, [pc, #88]	; (d90e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d9086:	681a      	ldr	r2, [r3, #0]
   d9088:	07d1      	lsls	r1, r2, #31
   d908a:	bf5c      	itt	pl
   d908c:	2201      	movpl	r2, #1
   d908e:	601a      	strpl	r2, [r3, #0]
   d9090:	4b14      	ldr	r3, [pc, #80]	; (d90e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d9092:	681a      	ldr	r2, [r3, #0]
   d9094:	07d2      	lsls	r2, r2, #31
   d9096:	bf5c      	itt	pl
   d9098:	2201      	movpl	r2, #1
   d909a:	601a      	strpl	r2, [r3, #0]
   d909c:	4b12      	ldr	r3, [pc, #72]	; (d90e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d909e:	681a      	ldr	r2, [r3, #0]
   d90a0:	07d0      	lsls	r0, r2, #31
   d90a2:	bf5c      	itt	pl
   d90a4:	2201      	movpl	r2, #1
   d90a6:	601a      	strpl	r2, [r3, #0]
   d90a8:	4b10      	ldr	r3, [pc, #64]	; (d90ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d90aa:	681a      	ldr	r2, [r3, #0]
   d90ac:	07d1      	lsls	r1, r2, #31
   d90ae:	bf5c      	itt	pl
   d90b0:	2201      	movpl	r2, #1
   d90b2:	601a      	strpl	r2, [r3, #0]
   d90b4:	4b0e      	ldr	r3, [pc, #56]	; (d90f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d90b6:	681a      	ldr	r2, [r3, #0]
   d90b8:	07d2      	lsls	r2, r2, #31
   d90ba:	bf5c      	itt	pl
   d90bc:	2201      	movpl	r2, #1
   d90be:	601a      	strpl	r2, [r3, #0]
   d90c0:	4770      	bx	lr
   d90c2:	bf00      	nop
   d90c4:	2003e7a4 	.word	0x2003e7a4
   d90c8:	2003e7a0 	.word	0x2003e7a0
   d90cc:	2003e79c 	.word	0x2003e79c
   d90d0:	2003e798 	.word	0x2003e798
   d90d4:	2003e794 	.word	0x2003e794
   d90d8:	2003e790 	.word	0x2003e790
   d90dc:	2003e78c 	.word	0x2003e78c
   d90e0:	2003e788 	.word	0x2003e788
   d90e4:	2003e784 	.word	0x2003e784
   d90e8:	2003e780 	.word	0x2003e780
   d90ec:	2003e77c 	.word	0x2003e77c
   d90f0:	2003e778 	.word	0x2003e778

000d90f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d90f4:	4b18      	ldr	r3, [pc, #96]	; (d9158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d90f6:	681a      	ldr	r2, [r3, #0]
   d90f8:	07d1      	lsls	r1, r2, #31
   d90fa:	bf5c      	itt	pl
   d90fc:	2201      	movpl	r2, #1
   d90fe:	601a      	strpl	r2, [r3, #0]
   d9100:	4b16      	ldr	r3, [pc, #88]	; (d915c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9102:	681a      	ldr	r2, [r3, #0]
   d9104:	07d2      	lsls	r2, r2, #31
   d9106:	bf5c      	itt	pl
   d9108:	2201      	movpl	r2, #1
   d910a:	601a      	strpl	r2, [r3, #0]
   d910c:	4b14      	ldr	r3, [pc, #80]	; (d9160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d910e:	681a      	ldr	r2, [r3, #0]
   d9110:	07d0      	lsls	r0, r2, #31
   d9112:	bf5c      	itt	pl
   d9114:	2201      	movpl	r2, #1
   d9116:	601a      	strpl	r2, [r3, #0]
   d9118:	4b12      	ldr	r3, [pc, #72]	; (d9164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d911a:	681a      	ldr	r2, [r3, #0]
   d911c:	07d1      	lsls	r1, r2, #31
   d911e:	bf5c      	itt	pl
   d9120:	2201      	movpl	r2, #1
   d9122:	601a      	strpl	r2, [r3, #0]
   d9124:	4b10      	ldr	r3, [pc, #64]	; (d9168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9126:	681a      	ldr	r2, [r3, #0]
   d9128:	07d2      	lsls	r2, r2, #31
   d912a:	bf5c      	itt	pl
   d912c:	2201      	movpl	r2, #1
   d912e:	601a      	strpl	r2, [r3, #0]
   d9130:	4b0e      	ldr	r3, [pc, #56]	; (d916c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9132:	681a      	ldr	r2, [r3, #0]
   d9134:	07d0      	lsls	r0, r2, #31
   d9136:	bf5c      	itt	pl
   d9138:	2201      	movpl	r2, #1
   d913a:	601a      	strpl	r2, [r3, #0]
   d913c:	4b0c      	ldr	r3, [pc, #48]	; (d9170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d913e:	681a      	ldr	r2, [r3, #0]
   d9140:	07d1      	lsls	r1, r2, #31
   d9142:	bf5c      	itt	pl
   d9144:	2201      	movpl	r2, #1
   d9146:	601a      	strpl	r2, [r3, #0]
   d9148:	4b0a      	ldr	r3, [pc, #40]	; (d9174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d914a:	681a      	ldr	r2, [r3, #0]
   d914c:	07d2      	lsls	r2, r2, #31
   d914e:	bf5c      	itt	pl
   d9150:	2201      	movpl	r2, #1
   d9152:	601a      	strpl	r2, [r3, #0]
   d9154:	4770      	bx	lr
   d9156:	bf00      	nop
   d9158:	2003e7c4 	.word	0x2003e7c4
   d915c:	2003e7c0 	.word	0x2003e7c0
   d9160:	2003e7bc 	.word	0x2003e7bc
   d9164:	2003e7b8 	.word	0x2003e7b8
   d9168:	2003e7b4 	.word	0x2003e7b4
   d916c:	2003e7b0 	.word	0x2003e7b0
   d9170:	2003e7ac 	.word	0x2003e7ac
   d9174:	2003e7a8 	.word	0x2003e7a8

000d9178 <__aeabi_drsub>:
   d9178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d917c:	e002      	b.n	d9184 <__adddf3>
   d917e:	bf00      	nop

000d9180 <__aeabi_dsub>:
   d9180:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9184 <__adddf3>:
   d9184:	b530      	push	{r4, r5, lr}
   d9186:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d918a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d918e:	ea94 0f05 	teq	r4, r5
   d9192:	bf08      	it	eq
   d9194:	ea90 0f02 	teqeq	r0, r2
   d9198:	bf1f      	itttt	ne
   d919a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d919e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d91a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d91a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d91aa:	f000 80e2 	beq.w	d9372 <__adddf3+0x1ee>
   d91ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d91b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d91b6:	bfb8      	it	lt
   d91b8:	426d      	neglt	r5, r5
   d91ba:	dd0c      	ble.n	d91d6 <__adddf3+0x52>
   d91bc:	442c      	add	r4, r5
   d91be:	ea80 0202 	eor.w	r2, r0, r2
   d91c2:	ea81 0303 	eor.w	r3, r1, r3
   d91c6:	ea82 0000 	eor.w	r0, r2, r0
   d91ca:	ea83 0101 	eor.w	r1, r3, r1
   d91ce:	ea80 0202 	eor.w	r2, r0, r2
   d91d2:	ea81 0303 	eor.w	r3, r1, r3
   d91d6:	2d36      	cmp	r5, #54	; 0x36
   d91d8:	bf88      	it	hi
   d91da:	bd30      	pophi	{r4, r5, pc}
   d91dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d91e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d91e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d91e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d91ec:	d002      	beq.n	d91f4 <__adddf3+0x70>
   d91ee:	4240      	negs	r0, r0
   d91f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d91f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d91f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d91fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9200:	d002      	beq.n	d9208 <__adddf3+0x84>
   d9202:	4252      	negs	r2, r2
   d9204:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9208:	ea94 0f05 	teq	r4, r5
   d920c:	f000 80a7 	beq.w	d935e <__adddf3+0x1da>
   d9210:	f1a4 0401 	sub.w	r4, r4, #1
   d9214:	f1d5 0e20 	rsbs	lr, r5, #32
   d9218:	db0d      	blt.n	d9236 <__adddf3+0xb2>
   d921a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d921e:	fa22 f205 	lsr.w	r2, r2, r5
   d9222:	1880      	adds	r0, r0, r2
   d9224:	f141 0100 	adc.w	r1, r1, #0
   d9228:	fa03 f20e 	lsl.w	r2, r3, lr
   d922c:	1880      	adds	r0, r0, r2
   d922e:	fa43 f305 	asr.w	r3, r3, r5
   d9232:	4159      	adcs	r1, r3
   d9234:	e00e      	b.n	d9254 <__adddf3+0xd0>
   d9236:	f1a5 0520 	sub.w	r5, r5, #32
   d923a:	f10e 0e20 	add.w	lr, lr, #32
   d923e:	2a01      	cmp	r2, #1
   d9240:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9244:	bf28      	it	cs
   d9246:	f04c 0c02 	orrcs.w	ip, ip, #2
   d924a:	fa43 f305 	asr.w	r3, r3, r5
   d924e:	18c0      	adds	r0, r0, r3
   d9250:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9254:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9258:	d507      	bpl.n	d926a <__adddf3+0xe6>
   d925a:	f04f 0e00 	mov.w	lr, #0
   d925e:	f1dc 0c00 	rsbs	ip, ip, #0
   d9262:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9266:	eb6e 0101 	sbc.w	r1, lr, r1
   d926a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d926e:	d31b      	bcc.n	d92a8 <__adddf3+0x124>
   d9270:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9274:	d30c      	bcc.n	d9290 <__adddf3+0x10c>
   d9276:	0849      	lsrs	r1, r1, #1
   d9278:	ea5f 0030 	movs.w	r0, r0, rrx
   d927c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9280:	f104 0401 	add.w	r4, r4, #1
   d9284:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9288:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d928c:	f080 809a 	bcs.w	d93c4 <__adddf3+0x240>
   d9290:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9294:	bf08      	it	eq
   d9296:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d929a:	f150 0000 	adcs.w	r0, r0, #0
   d929e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d92a2:	ea41 0105 	orr.w	r1, r1, r5
   d92a6:	bd30      	pop	{r4, r5, pc}
   d92a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d92ac:	4140      	adcs	r0, r0
   d92ae:	eb41 0101 	adc.w	r1, r1, r1
   d92b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d92b6:	f1a4 0401 	sub.w	r4, r4, #1
   d92ba:	d1e9      	bne.n	d9290 <__adddf3+0x10c>
   d92bc:	f091 0f00 	teq	r1, #0
   d92c0:	bf04      	itt	eq
   d92c2:	4601      	moveq	r1, r0
   d92c4:	2000      	moveq	r0, #0
   d92c6:	fab1 f381 	clz	r3, r1
   d92ca:	bf08      	it	eq
   d92cc:	3320      	addeq	r3, #32
   d92ce:	f1a3 030b 	sub.w	r3, r3, #11
   d92d2:	f1b3 0220 	subs.w	r2, r3, #32
   d92d6:	da0c      	bge.n	d92f2 <__adddf3+0x16e>
   d92d8:	320c      	adds	r2, #12
   d92da:	dd08      	ble.n	d92ee <__adddf3+0x16a>
   d92dc:	f102 0c14 	add.w	ip, r2, #20
   d92e0:	f1c2 020c 	rsb	r2, r2, #12
   d92e4:	fa01 f00c 	lsl.w	r0, r1, ip
   d92e8:	fa21 f102 	lsr.w	r1, r1, r2
   d92ec:	e00c      	b.n	d9308 <__adddf3+0x184>
   d92ee:	f102 0214 	add.w	r2, r2, #20
   d92f2:	bfd8      	it	le
   d92f4:	f1c2 0c20 	rsble	ip, r2, #32
   d92f8:	fa01 f102 	lsl.w	r1, r1, r2
   d92fc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9300:	bfdc      	itt	le
   d9302:	ea41 010c 	orrle.w	r1, r1, ip
   d9306:	4090      	lslle	r0, r2
   d9308:	1ae4      	subs	r4, r4, r3
   d930a:	bfa2      	ittt	ge
   d930c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9310:	4329      	orrge	r1, r5
   d9312:	bd30      	popge	{r4, r5, pc}
   d9314:	ea6f 0404 	mvn.w	r4, r4
   d9318:	3c1f      	subs	r4, #31
   d931a:	da1c      	bge.n	d9356 <__adddf3+0x1d2>
   d931c:	340c      	adds	r4, #12
   d931e:	dc0e      	bgt.n	d933e <__adddf3+0x1ba>
   d9320:	f104 0414 	add.w	r4, r4, #20
   d9324:	f1c4 0220 	rsb	r2, r4, #32
   d9328:	fa20 f004 	lsr.w	r0, r0, r4
   d932c:	fa01 f302 	lsl.w	r3, r1, r2
   d9330:	ea40 0003 	orr.w	r0, r0, r3
   d9334:	fa21 f304 	lsr.w	r3, r1, r4
   d9338:	ea45 0103 	orr.w	r1, r5, r3
   d933c:	bd30      	pop	{r4, r5, pc}
   d933e:	f1c4 040c 	rsb	r4, r4, #12
   d9342:	f1c4 0220 	rsb	r2, r4, #32
   d9346:	fa20 f002 	lsr.w	r0, r0, r2
   d934a:	fa01 f304 	lsl.w	r3, r1, r4
   d934e:	ea40 0003 	orr.w	r0, r0, r3
   d9352:	4629      	mov	r1, r5
   d9354:	bd30      	pop	{r4, r5, pc}
   d9356:	fa21 f004 	lsr.w	r0, r1, r4
   d935a:	4629      	mov	r1, r5
   d935c:	bd30      	pop	{r4, r5, pc}
   d935e:	f094 0f00 	teq	r4, #0
   d9362:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9366:	bf06      	itte	eq
   d9368:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d936c:	3401      	addeq	r4, #1
   d936e:	3d01      	subne	r5, #1
   d9370:	e74e      	b.n	d9210 <__adddf3+0x8c>
   d9372:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9376:	bf18      	it	ne
   d9378:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d937c:	d029      	beq.n	d93d2 <__adddf3+0x24e>
   d937e:	ea94 0f05 	teq	r4, r5
   d9382:	bf08      	it	eq
   d9384:	ea90 0f02 	teqeq	r0, r2
   d9388:	d005      	beq.n	d9396 <__adddf3+0x212>
   d938a:	ea54 0c00 	orrs.w	ip, r4, r0
   d938e:	bf04      	itt	eq
   d9390:	4619      	moveq	r1, r3
   d9392:	4610      	moveq	r0, r2
   d9394:	bd30      	pop	{r4, r5, pc}
   d9396:	ea91 0f03 	teq	r1, r3
   d939a:	bf1e      	ittt	ne
   d939c:	2100      	movne	r1, #0
   d939e:	2000      	movne	r0, #0
   d93a0:	bd30      	popne	{r4, r5, pc}
   d93a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d93a6:	d105      	bne.n	d93b4 <__adddf3+0x230>
   d93a8:	0040      	lsls	r0, r0, #1
   d93aa:	4149      	adcs	r1, r1
   d93ac:	bf28      	it	cs
   d93ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d93b2:	bd30      	pop	{r4, r5, pc}
   d93b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d93b8:	bf3c      	itt	cc
   d93ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d93be:	bd30      	popcc	{r4, r5, pc}
   d93c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d93c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d93c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d93cc:	f04f 0000 	mov.w	r0, #0
   d93d0:	bd30      	pop	{r4, r5, pc}
   d93d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d93d6:	bf1a      	itte	ne
   d93d8:	4619      	movne	r1, r3
   d93da:	4610      	movne	r0, r2
   d93dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d93e0:	bf1c      	itt	ne
   d93e2:	460b      	movne	r3, r1
   d93e4:	4602      	movne	r2, r0
   d93e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d93ea:	bf06      	itte	eq
   d93ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d93f0:	ea91 0f03 	teqeq	r1, r3
   d93f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d93f8:	bd30      	pop	{r4, r5, pc}
   d93fa:	bf00      	nop

000d93fc <__aeabi_ui2d>:
   d93fc:	f090 0f00 	teq	r0, #0
   d9400:	bf04      	itt	eq
   d9402:	2100      	moveq	r1, #0
   d9404:	4770      	bxeq	lr
   d9406:	b530      	push	{r4, r5, lr}
   d9408:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d940c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9410:	f04f 0500 	mov.w	r5, #0
   d9414:	f04f 0100 	mov.w	r1, #0
   d9418:	e750      	b.n	d92bc <__adddf3+0x138>
   d941a:	bf00      	nop

000d941c <__aeabi_i2d>:
   d941c:	f090 0f00 	teq	r0, #0
   d9420:	bf04      	itt	eq
   d9422:	2100      	moveq	r1, #0
   d9424:	4770      	bxeq	lr
   d9426:	b530      	push	{r4, r5, lr}
   d9428:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d942c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9430:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9434:	bf48      	it	mi
   d9436:	4240      	negmi	r0, r0
   d9438:	f04f 0100 	mov.w	r1, #0
   d943c:	e73e      	b.n	d92bc <__adddf3+0x138>
   d943e:	bf00      	nop

000d9440 <__aeabi_f2d>:
   d9440:	0042      	lsls	r2, r0, #1
   d9442:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9446:	ea4f 0131 	mov.w	r1, r1, rrx
   d944a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d944e:	bf1f      	itttt	ne
   d9450:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9454:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9458:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d945c:	4770      	bxne	lr
   d945e:	f092 0f00 	teq	r2, #0
   d9462:	bf14      	ite	ne
   d9464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9468:	4770      	bxeq	lr
   d946a:	b530      	push	{r4, r5, lr}
   d946c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9478:	e720      	b.n	d92bc <__adddf3+0x138>
   d947a:	bf00      	nop

000d947c <__aeabi_ul2d>:
   d947c:	ea50 0201 	orrs.w	r2, r0, r1
   d9480:	bf08      	it	eq
   d9482:	4770      	bxeq	lr
   d9484:	b530      	push	{r4, r5, lr}
   d9486:	f04f 0500 	mov.w	r5, #0
   d948a:	e00a      	b.n	d94a2 <__aeabi_l2d+0x16>

000d948c <__aeabi_l2d>:
   d948c:	ea50 0201 	orrs.w	r2, r0, r1
   d9490:	bf08      	it	eq
   d9492:	4770      	bxeq	lr
   d9494:	b530      	push	{r4, r5, lr}
   d9496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d949a:	d502      	bpl.n	d94a2 <__aeabi_l2d+0x16>
   d949c:	4240      	negs	r0, r0
   d949e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d94a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d94a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d94aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d94ae:	f43f aedc 	beq.w	d926a <__adddf3+0xe6>
   d94b2:	f04f 0203 	mov.w	r2, #3
   d94b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d94ba:	bf18      	it	ne
   d94bc:	3203      	addne	r2, #3
   d94be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d94c2:	bf18      	it	ne
   d94c4:	3203      	addne	r2, #3
   d94c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d94ca:	f1c2 0320 	rsb	r3, r2, #32
   d94ce:	fa00 fc03 	lsl.w	ip, r0, r3
   d94d2:	fa20 f002 	lsr.w	r0, r0, r2
   d94d6:	fa01 fe03 	lsl.w	lr, r1, r3
   d94da:	ea40 000e 	orr.w	r0, r0, lr
   d94de:	fa21 f102 	lsr.w	r1, r1, r2
   d94e2:	4414      	add	r4, r2
   d94e4:	e6c1      	b.n	d926a <__adddf3+0xe6>
   d94e6:	bf00      	nop

000d94e8 <asctime>:
   d94e8:	4b09      	ldr	r3, [pc, #36]	; (d9510 <asctime+0x28>)
   d94ea:	b570      	push	{r4, r5, r6, lr}
   d94ec:	681c      	ldr	r4, [r3, #0]
   d94ee:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d94f0:	4606      	mov	r6, r0
   d94f2:	b93d      	cbnz	r5, d9504 <asctime+0x1c>
   d94f4:	201a      	movs	r0, #26
   d94f6:	f7fe f953 	bl	d77a0 <malloc>
   d94fa:	221a      	movs	r2, #26
   d94fc:	6420      	str	r0, [r4, #64]	; 0x40
   d94fe:	4629      	mov	r1, r5
   d9500:	f000 f94e 	bl	d97a0 <memset>
   d9504:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d9506:	4630      	mov	r0, r6
   d9508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d950c:	f000 b802 	b.w	d9514 <asctime_r>
   d9510:	2003dc88 	.word	0x2003dc88

000d9514 <asctime_r>:
   d9514:	b510      	push	{r4, lr}
   d9516:	460c      	mov	r4, r1
   d9518:	6941      	ldr	r1, [r0, #20]
   d951a:	6903      	ldr	r3, [r0, #16]
   d951c:	6982      	ldr	r2, [r0, #24]
   d951e:	b086      	sub	sp, #24
   d9520:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9524:	9104      	str	r1, [sp, #16]
   d9526:	6801      	ldr	r1, [r0, #0]
   d9528:	9103      	str	r1, [sp, #12]
   d952a:	6841      	ldr	r1, [r0, #4]
   d952c:	9102      	str	r1, [sp, #8]
   d952e:	6881      	ldr	r1, [r0, #8]
   d9530:	9101      	str	r1, [sp, #4]
   d9532:	68c1      	ldr	r1, [r0, #12]
   d9534:	9100      	str	r1, [sp, #0]
   d9536:	4907      	ldr	r1, [pc, #28]	; (d9554 <asctime_r+0x40>)
   d9538:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d953c:	440b      	add	r3, r1
   d953e:	4906      	ldr	r1, [pc, #24]	; (d9558 <asctime_r+0x44>)
   d9540:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9544:	440a      	add	r2, r1
   d9546:	4620      	mov	r0, r4
   d9548:	4904      	ldr	r1, [pc, #16]	; (d955c <asctime_r+0x48>)
   d954a:	f7fe f941 	bl	d77d0 <siprintf>
   d954e:	4620      	mov	r0, r4
   d9550:	b006      	add	sp, #24
   d9552:	bd10      	pop	{r4, pc}
   d9554:	000da896 	.word	0x000da896
   d9558:	000da881 	.word	0x000da881
   d955c:	000da8ba 	.word	0x000da8ba

000d9560 <__cxa_atexit>:
   d9560:	b510      	push	{r4, lr}
   d9562:	4c05      	ldr	r4, [pc, #20]	; (d9578 <__cxa_atexit+0x18>)
   d9564:	4613      	mov	r3, r2
   d9566:	b12c      	cbz	r4, d9574 <__cxa_atexit+0x14>
   d9568:	460a      	mov	r2, r1
   d956a:	4601      	mov	r1, r0
   d956c:	2002      	movs	r0, #2
   d956e:	f3af 8000 	nop.w
   d9572:	bd10      	pop	{r4, pc}
   d9574:	4620      	mov	r0, r4
   d9576:	bd10      	pop	{r4, pc}
   d9578:	00000000 	.word	0x00000000

000d957c <localtime>:
   d957c:	b538      	push	{r3, r4, r5, lr}
   d957e:	4b07      	ldr	r3, [pc, #28]	; (d959c <localtime+0x20>)
   d9580:	681c      	ldr	r4, [r3, #0]
   d9582:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9584:	4605      	mov	r5, r0
   d9586:	b91b      	cbnz	r3, d9590 <localtime+0x14>
   d9588:	2024      	movs	r0, #36	; 0x24
   d958a:	f7fe f909 	bl	d77a0 <malloc>
   d958e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9590:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9592:	4628      	mov	r0, r5
   d9594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9598:	f000 b802 	b.w	d95a0 <localtime_r>
   d959c:	2003dc88 	.word	0x2003dc88

000d95a0 <localtime_r>:
   d95a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d95a4:	460c      	mov	r4, r1
   d95a6:	4680      	mov	r8, r0
   d95a8:	f000 fc68 	bl	d9e7c <__gettzinfo>
   d95ac:	4621      	mov	r1, r4
   d95ae:	4607      	mov	r7, r0
   d95b0:	4640      	mov	r0, r8
   d95b2:	f000 fc67 	bl	d9e84 <gmtime_r>
   d95b6:	6946      	ldr	r6, [r0, #20]
   d95b8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d95bc:	07b3      	lsls	r3, r6, #30
   d95be:	4604      	mov	r4, r0
   d95c0:	d105      	bne.n	d95ce <localtime_r+0x2e>
   d95c2:	2264      	movs	r2, #100	; 0x64
   d95c4:	fb96 f3f2 	sdiv	r3, r6, r2
   d95c8:	fb02 6313 	mls	r3, r2, r3, r6
   d95cc:	b94b      	cbnz	r3, d95e2 <localtime_r+0x42>
   d95ce:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d95d2:	fb96 f3f5 	sdiv	r3, r6, r5
   d95d6:	fb05 6513 	mls	r5, r5, r3, r6
   d95da:	fab5 f385 	clz	r3, r5
   d95de:	095b      	lsrs	r3, r3, #5
   d95e0:	e000      	b.n	d95e4 <localtime_r+0x44>
   d95e2:	2301      	movs	r3, #1
   d95e4:	4a5f      	ldr	r2, [pc, #380]	; (d9764 <localtime_r+0x1c4>)
   d95e6:	2530      	movs	r5, #48	; 0x30
   d95e8:	fb05 2503 	mla	r5, r5, r3, r2
   d95ec:	f000 fa7a 	bl	d9ae4 <__tz_lock>
   d95f0:	f000 fa7a 	bl	d9ae8 <_tzset_unlocked>
   d95f4:	4b5c      	ldr	r3, [pc, #368]	; (d9768 <localtime_r+0x1c8>)
   d95f6:	681b      	ldr	r3, [r3, #0]
   d95f8:	b1f3      	cbz	r3, d9638 <localtime_r+0x98>
   d95fa:	687b      	ldr	r3, [r7, #4]
   d95fc:	429e      	cmp	r6, r3
   d95fe:	d105      	bne.n	d960c <localtime_r+0x6c>
   d9600:	6839      	ldr	r1, [r7, #0]
   d9602:	f8d8 3000 	ldr.w	r3, [r8]
   d9606:	69fa      	ldr	r2, [r7, #28]
   d9608:	b941      	cbnz	r1, d961c <localtime_r+0x7c>
   d960a:	e00a      	b.n	d9622 <localtime_r+0x82>
   d960c:	4630      	mov	r0, r6
   d960e:	f000 f9c1 	bl	d9994 <__tzcalc_limits>
   d9612:	2800      	cmp	r0, #0
   d9614:	d1f4      	bne.n	d9600 <localtime_r+0x60>
   d9616:	f04f 33ff 	mov.w	r3, #4294967295
   d961a:	e00d      	b.n	d9638 <localtime_r+0x98>
   d961c:	4293      	cmp	r3, r2
   d961e:	db08      	blt.n	d9632 <localtime_r+0x92>
   d9620:	e001      	b.n	d9626 <localtime_r+0x86>
   d9622:	4293      	cmp	r3, r2
   d9624:	da07      	bge.n	d9636 <localtime_r+0x96>
   d9626:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d9628:	4293      	cmp	r3, r2
   d962a:	bfac      	ite	ge
   d962c:	2300      	movge	r3, #0
   d962e:	2301      	movlt	r3, #1
   d9630:	e002      	b.n	d9638 <localtime_r+0x98>
   d9632:	2300      	movs	r3, #0
   d9634:	e000      	b.n	d9638 <localtime_r+0x98>
   d9636:	2301      	movs	r3, #1
   d9638:	6223      	str	r3, [r4, #32]
   d963a:	6a23      	ldr	r3, [r4, #32]
   d963c:	2b01      	cmp	r3, #1
   d963e:	bf0c      	ite	eq
   d9640:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d9642:	6a39      	ldrne	r1, [r7, #32]
   d9644:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d9648:	203c      	movs	r0, #60	; 0x3c
   d964a:	fb91 f6f3 	sdiv	r6, r1, r3
   d964e:	fb03 1316 	mls	r3, r3, r6, r1
   d9652:	6861      	ldr	r1, [r4, #4]
   d9654:	fb93 f2f0 	sdiv	r2, r3, r0
   d9658:	fb00 3012 	mls	r0, r0, r2, r3
   d965c:	6823      	ldr	r3, [r4, #0]
   d965e:	1a89      	subs	r1, r1, r2
   d9660:	68a2      	ldr	r2, [r4, #8]
   d9662:	6061      	str	r1, [r4, #4]
   d9664:	1a1b      	subs	r3, r3, r0
   d9666:	1b92      	subs	r2, r2, r6
   d9668:	2b3b      	cmp	r3, #59	; 0x3b
   d966a:	6023      	str	r3, [r4, #0]
   d966c:	60a2      	str	r2, [r4, #8]
   d966e:	dd03      	ble.n	d9678 <localtime_r+0xd8>
   d9670:	3101      	adds	r1, #1
   d9672:	6061      	str	r1, [r4, #4]
   d9674:	3b3c      	subs	r3, #60	; 0x3c
   d9676:	e004      	b.n	d9682 <localtime_r+0xe2>
   d9678:	2b00      	cmp	r3, #0
   d967a:	da03      	bge.n	d9684 <localtime_r+0xe4>
   d967c:	3901      	subs	r1, #1
   d967e:	6061      	str	r1, [r4, #4]
   d9680:	333c      	adds	r3, #60	; 0x3c
   d9682:	6023      	str	r3, [r4, #0]
   d9684:	6863      	ldr	r3, [r4, #4]
   d9686:	2b3b      	cmp	r3, #59	; 0x3b
   d9688:	dd03      	ble.n	d9692 <localtime_r+0xf2>
   d968a:	3201      	adds	r2, #1
   d968c:	60a2      	str	r2, [r4, #8]
   d968e:	3b3c      	subs	r3, #60	; 0x3c
   d9690:	e004      	b.n	d969c <localtime_r+0xfc>
   d9692:	2b00      	cmp	r3, #0
   d9694:	da03      	bge.n	d969e <localtime_r+0xfe>
   d9696:	3a01      	subs	r2, #1
   d9698:	60a2      	str	r2, [r4, #8]
   d969a:	333c      	adds	r3, #60	; 0x3c
   d969c:	6063      	str	r3, [r4, #4]
   d969e:	68a3      	ldr	r3, [r4, #8]
   d96a0:	2b17      	cmp	r3, #23
   d96a2:	dd22      	ble.n	d96ea <localtime_r+0x14a>
   d96a4:	69e2      	ldr	r2, [r4, #28]
   d96a6:	3201      	adds	r2, #1
   d96a8:	61e2      	str	r2, [r4, #28]
   d96aa:	69a2      	ldr	r2, [r4, #24]
   d96ac:	3201      	adds	r2, #1
   d96ae:	2a06      	cmp	r2, #6
   d96b0:	bfc8      	it	gt
   d96b2:	2200      	movgt	r2, #0
   d96b4:	61a2      	str	r2, [r4, #24]
   d96b6:	68e2      	ldr	r2, [r4, #12]
   d96b8:	3b18      	subs	r3, #24
   d96ba:	3201      	adds	r2, #1
   d96bc:	60a3      	str	r3, [r4, #8]
   d96be:	6923      	ldr	r3, [r4, #16]
   d96c0:	60e2      	str	r2, [r4, #12]
   d96c2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d96c6:	428a      	cmp	r2, r1
   d96c8:	dd46      	ble.n	d9758 <localtime_r+0x1b8>
   d96ca:	3301      	adds	r3, #1
   d96cc:	2b0c      	cmp	r3, #12
   d96ce:	bf0c      	ite	eq
   d96d0:	6963      	ldreq	r3, [r4, #20]
   d96d2:	6123      	strne	r3, [r4, #16]
   d96d4:	eba2 0201 	sub.w	r2, r2, r1
   d96d8:	60e2      	str	r2, [r4, #12]
   d96da:	bf01      	itttt	eq
   d96dc:	3301      	addeq	r3, #1
   d96de:	2200      	moveq	r2, #0
   d96e0:	6122      	streq	r2, [r4, #16]
   d96e2:	6163      	streq	r3, [r4, #20]
   d96e4:	bf08      	it	eq
   d96e6:	61e2      	streq	r2, [r4, #28]
   d96e8:	e036      	b.n	d9758 <localtime_r+0x1b8>
   d96ea:	2b00      	cmp	r3, #0
   d96ec:	da34      	bge.n	d9758 <localtime_r+0x1b8>
   d96ee:	69e2      	ldr	r2, [r4, #28]
   d96f0:	3a01      	subs	r2, #1
   d96f2:	61e2      	str	r2, [r4, #28]
   d96f4:	69a2      	ldr	r2, [r4, #24]
   d96f6:	3a01      	subs	r2, #1
   d96f8:	bf48      	it	mi
   d96fa:	2206      	movmi	r2, #6
   d96fc:	61a2      	str	r2, [r4, #24]
   d96fe:	68e2      	ldr	r2, [r4, #12]
   d9700:	3318      	adds	r3, #24
   d9702:	3a01      	subs	r2, #1
   d9704:	60e2      	str	r2, [r4, #12]
   d9706:	60a3      	str	r3, [r4, #8]
   d9708:	bb32      	cbnz	r2, d9758 <localtime_r+0x1b8>
   d970a:	6923      	ldr	r3, [r4, #16]
   d970c:	3b01      	subs	r3, #1
   d970e:	d401      	bmi.n	d9714 <localtime_r+0x174>
   d9710:	6123      	str	r3, [r4, #16]
   d9712:	e01d      	b.n	d9750 <localtime_r+0x1b0>
   d9714:	230b      	movs	r3, #11
   d9716:	6123      	str	r3, [r4, #16]
   d9718:	6963      	ldr	r3, [r4, #20]
   d971a:	1e5a      	subs	r2, r3, #1
   d971c:	f012 0f03 	tst.w	r2, #3
   d9720:	6162      	str	r2, [r4, #20]
   d9722:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d9726:	d105      	bne.n	d9734 <localtime_r+0x194>
   d9728:	2164      	movs	r1, #100	; 0x64
   d972a:	fb93 f2f1 	sdiv	r2, r3, r1
   d972e:	fb01 3212 	mls	r2, r1, r2, r3
   d9732:	b94a      	cbnz	r2, d9748 <localtime_r+0x1a8>
   d9734:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d9738:	fb93 f2f1 	sdiv	r2, r3, r1
   d973c:	fb01 3312 	mls	r3, r1, r2, r3
   d9740:	fab3 f383 	clz	r3, r3
   d9744:	095b      	lsrs	r3, r3, #5
   d9746:	e000      	b.n	d974a <localtime_r+0x1aa>
   d9748:	2301      	movs	r3, #1
   d974a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d974e:	61e3      	str	r3, [r4, #28]
   d9750:	6923      	ldr	r3, [r4, #16]
   d9752:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d9756:	60e3      	str	r3, [r4, #12]
   d9758:	f000 f9c5 	bl	d9ae6 <__tz_unlock>
   d975c:	4620      	mov	r0, r4
   d975e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9762:	bf00      	nop
   d9764:	000daa40 	.word	0x000daa40
   d9768:	2003e7e4 	.word	0x2003e7e4

000d976c <memcmp>:
   d976c:	b510      	push	{r4, lr}
   d976e:	3901      	subs	r1, #1
   d9770:	4402      	add	r2, r0
   d9772:	4290      	cmp	r0, r2
   d9774:	d007      	beq.n	d9786 <memcmp+0x1a>
   d9776:	f810 3b01 	ldrb.w	r3, [r0], #1
   d977a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d977e:	42a3      	cmp	r3, r4
   d9780:	d0f7      	beq.n	d9772 <memcmp+0x6>
   d9782:	1b18      	subs	r0, r3, r4
   d9784:	bd10      	pop	{r4, pc}
   d9786:	2000      	movs	r0, #0
   d9788:	bd10      	pop	{r4, pc}

000d978a <memcpy>:
   d978a:	b510      	push	{r4, lr}
   d978c:	1e43      	subs	r3, r0, #1
   d978e:	440a      	add	r2, r1
   d9790:	4291      	cmp	r1, r2
   d9792:	d004      	beq.n	d979e <memcpy+0x14>
   d9794:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9798:	f803 4f01 	strb.w	r4, [r3, #1]!
   d979c:	e7f8      	b.n	d9790 <memcpy+0x6>
   d979e:	bd10      	pop	{r4, pc}

000d97a0 <memset>:
   d97a0:	4402      	add	r2, r0
   d97a2:	4603      	mov	r3, r0
   d97a4:	4293      	cmp	r3, r2
   d97a6:	d002      	beq.n	d97ae <memset+0xe>
   d97a8:	f803 1b01 	strb.w	r1, [r3], #1
   d97ac:	e7fa      	b.n	d97a4 <memset+0x4>
   d97ae:	4770      	bx	lr

000d97b0 <srand>:
   d97b0:	b538      	push	{r3, r4, r5, lr}
   d97b2:	4b12      	ldr	r3, [pc, #72]	; (d97fc <srand+0x4c>)
   d97b4:	681c      	ldr	r4, [r3, #0]
   d97b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d97b8:	4605      	mov	r5, r0
   d97ba:	b9d3      	cbnz	r3, d97f2 <srand+0x42>
   d97bc:	2018      	movs	r0, #24
   d97be:	f7fd ffef 	bl	d77a0 <malloc>
   d97c2:	f243 330e 	movw	r3, #13070	; 0x330e
   d97c6:	63a0      	str	r0, [r4, #56]	; 0x38
   d97c8:	8003      	strh	r3, [r0, #0]
   d97ca:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d97ce:	8043      	strh	r3, [r0, #2]
   d97d0:	f241 2334 	movw	r3, #4660	; 0x1234
   d97d4:	8083      	strh	r3, [r0, #4]
   d97d6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d97da:	80c3      	strh	r3, [r0, #6]
   d97dc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d97e0:	8103      	strh	r3, [r0, #8]
   d97e2:	2305      	movs	r3, #5
   d97e4:	8143      	strh	r3, [r0, #10]
   d97e6:	230b      	movs	r3, #11
   d97e8:	8183      	strh	r3, [r0, #12]
   d97ea:	2201      	movs	r2, #1
   d97ec:	2300      	movs	r3, #0
   d97ee:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d97f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d97f4:	2200      	movs	r2, #0
   d97f6:	611d      	str	r5, [r3, #16]
   d97f8:	615a      	str	r2, [r3, #20]
   d97fa:	bd38      	pop	{r3, r4, r5, pc}
   d97fc:	2003dc88 	.word	0x2003dc88

000d9800 <strcmp>:
   d9800:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9804:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9808:	2a01      	cmp	r2, #1
   d980a:	bf28      	it	cs
   d980c:	429a      	cmpcs	r2, r3
   d980e:	d0f7      	beq.n	d9800 <strcmp>
   d9810:	1ad0      	subs	r0, r2, r3
   d9812:	4770      	bx	lr

000d9814 <strcpy>:
   d9814:	4603      	mov	r3, r0
   d9816:	f811 2b01 	ldrb.w	r2, [r1], #1
   d981a:	f803 2b01 	strb.w	r2, [r3], #1
   d981e:	2a00      	cmp	r2, #0
   d9820:	d1f9      	bne.n	d9816 <strcpy+0x2>
   d9822:	4770      	bx	lr

000d9824 <strlen>:
   d9824:	4603      	mov	r3, r0
   d9826:	f813 2b01 	ldrb.w	r2, [r3], #1
   d982a:	2a00      	cmp	r2, #0
   d982c:	d1fb      	bne.n	d9826 <strlen+0x2>
   d982e:	1a18      	subs	r0, r3, r0
   d9830:	3801      	subs	r0, #1
   d9832:	4770      	bx	lr

000d9834 <strncmp>:
   d9834:	b530      	push	{r4, r5, lr}
   d9836:	b182      	cbz	r2, d985a <strncmp+0x26>
   d9838:	1e45      	subs	r5, r0, #1
   d983a:	3901      	subs	r1, #1
   d983c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9840:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9844:	42a3      	cmp	r3, r4
   d9846:	d106      	bne.n	d9856 <strncmp+0x22>
   d9848:	43ec      	mvns	r4, r5
   d984a:	4414      	add	r4, r2
   d984c:	42e0      	cmn	r0, r4
   d984e:	d001      	beq.n	d9854 <strncmp+0x20>
   d9850:	2b00      	cmp	r3, #0
   d9852:	d1f3      	bne.n	d983c <strncmp+0x8>
   d9854:	461c      	mov	r4, r3
   d9856:	1b18      	subs	r0, r3, r4
   d9858:	bd30      	pop	{r4, r5, pc}
   d985a:	4610      	mov	r0, r2
   d985c:	bd30      	pop	{r4, r5, pc}

000d985e <strncpy>:
   d985e:	b510      	push	{r4, lr}
   d9860:	4603      	mov	r3, r0
   d9862:	b142      	cbz	r2, d9876 <strncpy+0x18>
   d9864:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9868:	f803 4b01 	strb.w	r4, [r3], #1
   d986c:	3a01      	subs	r2, #1
   d986e:	2c00      	cmp	r4, #0
   d9870:	d1f7      	bne.n	d9862 <strncpy+0x4>
   d9872:	441a      	add	r2, r3
   d9874:	e000      	b.n	d9878 <strncpy+0x1a>
   d9876:	bd10      	pop	{r4, pc}
   d9878:	4293      	cmp	r3, r2
   d987a:	d002      	beq.n	d9882 <strncpy+0x24>
   d987c:	f803 4b01 	strb.w	r4, [r3], #1
   d9880:	e7fa      	b.n	d9878 <strncpy+0x1a>
   d9882:	bd10      	pop	{r4, pc}

000d9884 <_strtoul_r>:
   d9884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9888:	4680      	mov	r8, r0
   d988a:	483c      	ldr	r0, [pc, #240]	; (d997c <_strtoul_r+0xf8>)
   d988c:	f8d0 9000 	ldr.w	r9, [r0]
   d9890:	460e      	mov	r6, r1
   d9892:	4635      	mov	r5, r6
   d9894:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9898:	eb09 0004 	add.w	r0, r9, r4
   d989c:	7840      	ldrb	r0, [r0, #1]
   d989e:	f000 0008 	and.w	r0, r0, #8
   d98a2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d98a6:	b108      	cbz	r0, d98ac <_strtoul_r+0x28>
   d98a8:	462e      	mov	r6, r5
   d98aa:	e7f2      	b.n	d9892 <_strtoul_r+0xe>
   d98ac:	2c2d      	cmp	r4, #45	; 0x2d
   d98ae:	d103      	bne.n	d98b8 <_strtoul_r+0x34>
   d98b0:	1cb5      	adds	r5, r6, #2
   d98b2:	7874      	ldrb	r4, [r6, #1]
   d98b4:	2701      	movs	r7, #1
   d98b6:	e003      	b.n	d98c0 <_strtoul_r+0x3c>
   d98b8:	2c2b      	cmp	r4, #43	; 0x2b
   d98ba:	bf04      	itt	eq
   d98bc:	7874      	ldrbeq	r4, [r6, #1]
   d98be:	1cb5      	addeq	r5, r6, #2
   d98c0:	b113      	cbz	r3, d98c8 <_strtoul_r+0x44>
   d98c2:	2b10      	cmp	r3, #16
   d98c4:	d10a      	bne.n	d98dc <_strtoul_r+0x58>
   d98c6:	e053      	b.n	d9970 <_strtoul_r+0xec>
   d98c8:	2c30      	cmp	r4, #48	; 0x30
   d98ca:	d14f      	bne.n	d996c <_strtoul_r+0xe8>
   d98cc:	7828      	ldrb	r0, [r5, #0]
   d98ce:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d98d2:	2858      	cmp	r0, #88	; 0x58
   d98d4:	d145      	bne.n	d9962 <_strtoul_r+0xde>
   d98d6:	786c      	ldrb	r4, [r5, #1]
   d98d8:	2310      	movs	r3, #16
   d98da:	3502      	adds	r5, #2
   d98dc:	f04f 3cff 	mov.w	ip, #4294967295
   d98e0:	2600      	movs	r6, #0
   d98e2:	fbbc fcf3 	udiv	ip, ip, r3
   d98e6:	fb03 fa0c 	mul.w	sl, r3, ip
   d98ea:	ea6f 0a0a 	mvn.w	sl, sl
   d98ee:	4630      	mov	r0, r6
   d98f0:	eb09 0e04 	add.w	lr, r9, r4
   d98f4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d98f8:	f01e 0f04 	tst.w	lr, #4
   d98fc:	d001      	beq.n	d9902 <_strtoul_r+0x7e>
   d98fe:	3c30      	subs	r4, #48	; 0x30
   d9900:	e00b      	b.n	d991a <_strtoul_r+0x96>
   d9902:	f01e 0e03 	ands.w	lr, lr, #3
   d9906:	d01a      	beq.n	d993e <_strtoul_r+0xba>
   d9908:	f1be 0f01 	cmp.w	lr, #1
   d990c:	bf0c      	ite	eq
   d990e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9912:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9916:	ebce 0404 	rsb	r4, lr, r4
   d991a:	42a3      	cmp	r3, r4
   d991c:	dd0f      	ble.n	d993e <_strtoul_r+0xba>
   d991e:	2e00      	cmp	r6, #0
   d9920:	db08      	blt.n	d9934 <_strtoul_r+0xb0>
   d9922:	4560      	cmp	r0, ip
   d9924:	d806      	bhi.n	d9934 <_strtoul_r+0xb0>
   d9926:	d101      	bne.n	d992c <_strtoul_r+0xa8>
   d9928:	4554      	cmp	r4, sl
   d992a:	dc03      	bgt.n	d9934 <_strtoul_r+0xb0>
   d992c:	fb03 4000 	mla	r0, r3, r0, r4
   d9930:	2601      	movs	r6, #1
   d9932:	e001      	b.n	d9938 <_strtoul_r+0xb4>
   d9934:	f04f 36ff 	mov.w	r6, #4294967295
   d9938:	f815 4b01 	ldrb.w	r4, [r5], #1
   d993c:	e7d8      	b.n	d98f0 <_strtoul_r+0x6c>
   d993e:	2e00      	cmp	r6, #0
   d9940:	da07      	bge.n	d9952 <_strtoul_r+0xce>
   d9942:	2322      	movs	r3, #34	; 0x22
   d9944:	f8c8 3000 	str.w	r3, [r8]
   d9948:	f04f 30ff 	mov.w	r0, #4294967295
   d994c:	b92a      	cbnz	r2, d995a <_strtoul_r+0xd6>
   d994e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9952:	b107      	cbz	r7, d9956 <_strtoul_r+0xd2>
   d9954:	4240      	negs	r0, r0
   d9956:	b172      	cbz	r2, d9976 <_strtoul_r+0xf2>
   d9958:	b106      	cbz	r6, d995c <_strtoul_r+0xd8>
   d995a:	1e69      	subs	r1, r5, #1
   d995c:	6011      	str	r1, [r2, #0]
   d995e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9962:	2430      	movs	r4, #48	; 0x30
   d9964:	2b00      	cmp	r3, #0
   d9966:	d1b9      	bne.n	d98dc <_strtoul_r+0x58>
   d9968:	2308      	movs	r3, #8
   d996a:	e7b7      	b.n	d98dc <_strtoul_r+0x58>
   d996c:	230a      	movs	r3, #10
   d996e:	e7b5      	b.n	d98dc <_strtoul_r+0x58>
   d9970:	2c30      	cmp	r4, #48	; 0x30
   d9972:	d0ab      	beq.n	d98cc <_strtoul_r+0x48>
   d9974:	e7b2      	b.n	d98dc <_strtoul_r+0x58>
   d9976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d997a:	bf00      	nop
   d997c:	2003dc24 	.word	0x2003dc24

000d9980 <strtoul>:
   d9980:	4613      	mov	r3, r2
   d9982:	460a      	mov	r2, r1
   d9984:	4601      	mov	r1, r0
   d9986:	4802      	ldr	r0, [pc, #8]	; (d9990 <strtoul+0x10>)
   d9988:	6800      	ldr	r0, [r0, #0]
   d998a:	f7ff bf7b 	b.w	d9884 <_strtoul_r>
   d998e:	bf00      	nop
   d9990:	2003dc88 	.word	0x2003dc88

000d9994 <__tzcalc_limits>:
   d9994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9998:	4604      	mov	r4, r0
   d999a:	f000 fa6f 	bl	d9e7c <__gettzinfo>
   d999e:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d99a2:	429c      	cmp	r4, r3
   d99a4:	f340 8096 	ble.w	d9ad4 <__tzcalc_limits+0x140>
   d99a8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d99ac:	18e3      	adds	r3, r4, r3
   d99ae:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d99b2:	109b      	asrs	r3, r3, #2
   d99b4:	f240 156d 	movw	r5, #365	; 0x16d
   d99b8:	fb05 3502 	mla	r5, r5, r2, r3
   d99bc:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d99c0:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d99c4:	fb92 f3f3 	sdiv	r3, r2, r3
   d99c8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d99cc:	442b      	add	r3, r5
   d99ce:	18a5      	adds	r5, r4, r2
   d99d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d99d4:	fb95 f5f2 	sdiv	r5, r5, r2
   d99d8:	441d      	add	r5, r3
   d99da:	2364      	movs	r3, #100	; 0x64
   d99dc:	fb94 f7f2 	sdiv	r7, r4, r2
   d99e0:	fb94 f6f3 	sdiv	r6, r4, r3
   d99e4:	fb02 4717 	mls	r7, r2, r7, r4
   d99e8:	fb03 4616 	mls	r6, r3, r6, r4
   d99ec:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d99f0:	fab7 fe87 	clz	lr, r7
   d99f4:	9301      	str	r3, [sp, #4]
   d99f6:	f004 0303 	and.w	r3, r4, #3
   d99fa:	6044      	str	r4, [r0, #4]
   d99fc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d9a00:	4601      	mov	r1, r0
   d9a02:	9300      	str	r3, [sp, #0]
   d9a04:	f04f 0c07 	mov.w	ip, #7
   d9a08:	7a0b      	ldrb	r3, [r1, #8]
   d9a0a:	2b4a      	cmp	r3, #74	; 0x4a
   d9a0c:	d10e      	bne.n	d9a2c <__tzcalc_limits+0x98>
   d9a0e:	694b      	ldr	r3, [r1, #20]
   d9a10:	9a00      	ldr	r2, [sp, #0]
   d9a12:	18ec      	adds	r4, r5, r3
   d9a14:	b902      	cbnz	r2, d9a18 <__tzcalc_limits+0x84>
   d9a16:	b906      	cbnz	r6, d9a1a <__tzcalc_limits+0x86>
   d9a18:	b927      	cbnz	r7, d9a24 <__tzcalc_limits+0x90>
   d9a1a:	2b3b      	cmp	r3, #59	; 0x3b
   d9a1c:	bfd4      	ite	le
   d9a1e:	2300      	movle	r3, #0
   d9a20:	2301      	movgt	r3, #1
   d9a22:	e000      	b.n	d9a26 <__tzcalc_limits+0x92>
   d9a24:	2300      	movs	r3, #0
   d9a26:	4423      	add	r3, r4
   d9a28:	3b01      	subs	r3, #1
   d9a2a:	e03f      	b.n	d9aac <__tzcalc_limits+0x118>
   d9a2c:	2b44      	cmp	r3, #68	; 0x44
   d9a2e:	d102      	bne.n	d9a36 <__tzcalc_limits+0xa2>
   d9a30:	694b      	ldr	r3, [r1, #20]
   d9a32:	442b      	add	r3, r5
   d9a34:	e03a      	b.n	d9aac <__tzcalc_limits+0x118>
   d9a36:	9b00      	ldr	r3, [sp, #0]
   d9a38:	b92b      	cbnz	r3, d9a46 <__tzcalc_limits+0xb2>
   d9a3a:	2e00      	cmp	r6, #0
   d9a3c:	bf0c      	ite	eq
   d9a3e:	46f0      	moveq	r8, lr
   d9a40:	f04f 0801 	movne.w	r8, #1
   d9a44:	e000      	b.n	d9a48 <__tzcalc_limits+0xb4>
   d9a46:	46f0      	mov	r8, lr
   d9a48:	4b24      	ldr	r3, [pc, #144]	; (d9adc <__tzcalc_limits+0x148>)
   d9a4a:	68cc      	ldr	r4, [r1, #12]
   d9a4c:	2230      	movs	r2, #48	; 0x30
   d9a4e:	fb02 3808 	mla	r8, r2, r8, r3
   d9a52:	f1a8 0a04 	sub.w	sl, r8, #4
   d9a56:	46a9      	mov	r9, r5
   d9a58:	2301      	movs	r3, #1
   d9a5a:	42a3      	cmp	r3, r4
   d9a5c:	da04      	bge.n	d9a68 <__tzcalc_limits+0xd4>
   d9a5e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d9a62:	3301      	adds	r3, #1
   d9a64:	44d9      	add	r9, fp
   d9a66:	e7f8      	b.n	d9a5a <__tzcalc_limits+0xc6>
   d9a68:	f109 0304 	add.w	r3, r9, #4
   d9a6c:	fb93 fbfc 	sdiv	fp, r3, ip
   d9a70:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d9a74:	2c01      	cmp	r4, #1
   d9a76:	ebca 0a03 	rsb	sl, sl, r3
   d9a7a:	694b      	ldr	r3, [r1, #20]
   d9a7c:	bfb8      	it	lt
   d9a7e:	2401      	movlt	r4, #1
   d9a80:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d9a84:	ebb3 0a0a 	subs.w	sl, r3, sl
   d9a88:	690b      	ldr	r3, [r1, #16]
   d9a8a:	f104 34ff 	add.w	r4, r4, #4294967295
   d9a8e:	f103 33ff 	add.w	r3, r3, #4294967295
   d9a92:	bf48      	it	mi
   d9a94:	f10a 0a07 	addmi.w	sl, sl, #7
   d9a98:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9a9c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d9aa0:	4453      	add	r3, sl
   d9aa2:	42a3      	cmp	r3, r4
   d9aa4:	db01      	blt.n	d9aaa <__tzcalc_limits+0x116>
   d9aa6:	3b07      	subs	r3, #7
   d9aa8:	e7fb      	b.n	d9aa2 <__tzcalc_limits+0x10e>
   d9aaa:	444b      	add	r3, r9
   d9aac:	698c      	ldr	r4, [r1, #24]
   d9aae:	4a0c      	ldr	r2, [pc, #48]	; (d9ae0 <__tzcalc_limits+0x14c>)
   d9ab0:	fb02 4303 	mla	r3, r2, r3, r4
   d9ab4:	6a0c      	ldr	r4, [r1, #32]
   d9ab6:	4423      	add	r3, r4
   d9ab8:	f841 3f1c 	str.w	r3, [r1, #28]!
   d9abc:	9b01      	ldr	r3, [sp, #4]
   d9abe:	4299      	cmp	r1, r3
   d9ac0:	d1a2      	bne.n	d9a08 <__tzcalc_limits+0x74>
   d9ac2:	69c3      	ldr	r3, [r0, #28]
   d9ac4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d9ac6:	4293      	cmp	r3, r2
   d9ac8:	bfac      	ite	ge
   d9aca:	2300      	movge	r3, #0
   d9acc:	2301      	movlt	r3, #1
   d9ace:	6003      	str	r3, [r0, #0]
   d9ad0:	2001      	movs	r0, #1
   d9ad2:	e000      	b.n	d9ad6 <__tzcalc_limits+0x142>
   d9ad4:	2000      	movs	r0, #0
   d9ad6:	b003      	add	sp, #12
   d9ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9adc:	000daa40 	.word	0x000daa40
   d9ae0:	00015180 	.word	0x00015180

000d9ae4 <__tz_lock>:
   d9ae4:	4770      	bx	lr

000d9ae6 <__tz_unlock>:
   d9ae6:	4770      	bx	lr

000d9ae8 <_tzset_unlocked>:
   d9ae8:	4b01      	ldr	r3, [pc, #4]	; (d9af0 <_tzset_unlocked+0x8>)
   d9aea:	6818      	ldr	r0, [r3, #0]
   d9aec:	f000 b802 	b.w	d9af4 <_tzset_unlocked_r>
   d9af0:	2003dc88 	.word	0x2003dc88

000d9af4 <_tzset_unlocked_r>:
   d9af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9af8:	b08d      	sub	sp, #52	; 0x34
   d9afa:	4607      	mov	r7, r0
   d9afc:	f000 f9be 	bl	d9e7c <__gettzinfo>
   d9b00:	49b0      	ldr	r1, [pc, #704]	; (d9dc4 <_tzset_unlocked_r+0x2d0>)
   d9b02:	4eb1      	ldr	r6, [pc, #708]	; (d9dc8 <_tzset_unlocked_r+0x2d4>)
   d9b04:	4604      	mov	r4, r0
   d9b06:	4638      	mov	r0, r7
   d9b08:	f000 f9b0 	bl	d9e6c <_getenv_r>
   d9b0c:	4605      	mov	r5, r0
   d9b0e:	b960      	cbnz	r0, d9b2a <_tzset_unlocked_r+0x36>
   d9b10:	4bae      	ldr	r3, [pc, #696]	; (d9dcc <_tzset_unlocked_r+0x2d8>)
   d9b12:	4aaf      	ldr	r2, [pc, #700]	; (d9dd0 <_tzset_unlocked_r+0x2dc>)
   d9b14:	6018      	str	r0, [r3, #0]
   d9b16:	4baf      	ldr	r3, [pc, #700]	; (d9dd4 <_tzset_unlocked_r+0x2e0>)
   d9b18:	6018      	str	r0, [r3, #0]
   d9b1a:	4baf      	ldr	r3, [pc, #700]	; (d9dd8 <_tzset_unlocked_r+0x2e4>)
   d9b1c:	6830      	ldr	r0, [r6, #0]
   d9b1e:	601a      	str	r2, [r3, #0]
   d9b20:	605a      	str	r2, [r3, #4]
   d9b22:	f7fd fe45 	bl	d77b0 <free>
   d9b26:	6035      	str	r5, [r6, #0]
   d9b28:	e148      	b.n	d9dbc <_tzset_unlocked_r+0x2c8>
   d9b2a:	6831      	ldr	r1, [r6, #0]
   d9b2c:	b979      	cbnz	r1, d9b4e <_tzset_unlocked_r+0x5a>
   d9b2e:	6830      	ldr	r0, [r6, #0]
   d9b30:	f7fd fe3e 	bl	d77b0 <free>
   d9b34:	4628      	mov	r0, r5
   d9b36:	f7ff fe75 	bl	d9824 <strlen>
   d9b3a:	1c41      	adds	r1, r0, #1
   d9b3c:	4638      	mov	r0, r7
   d9b3e:	f7fd fe5f 	bl	d7800 <_malloc_r>
   d9b42:	6030      	str	r0, [r6, #0]
   d9b44:	b148      	cbz	r0, d9b5a <_tzset_unlocked_r+0x66>
   d9b46:	4629      	mov	r1, r5
   d9b48:	f7ff fe64 	bl	d9814 <strcpy>
   d9b4c:	e005      	b.n	d9b5a <_tzset_unlocked_r+0x66>
   d9b4e:	f7ff fe57 	bl	d9800 <strcmp>
   d9b52:	2800      	cmp	r0, #0
   d9b54:	f000 8132 	beq.w	d9dbc <_tzset_unlocked_r+0x2c8>
   d9b58:	e7e9      	b.n	d9b2e <_tzset_unlocked_r+0x3a>
   d9b5a:	782b      	ldrb	r3, [r5, #0]
   d9b5c:	4a9f      	ldr	r2, [pc, #636]	; (d9ddc <_tzset_unlocked_r+0x2e8>)
   d9b5e:	49a0      	ldr	r1, [pc, #640]	; (d9de0 <_tzset_unlocked_r+0x2ec>)
   d9b60:	2b3a      	cmp	r3, #58	; 0x3a
   d9b62:	bf08      	it	eq
   d9b64:	3501      	addeq	r5, #1
   d9b66:	ae0a      	add	r6, sp, #40	; 0x28
   d9b68:	4633      	mov	r3, r6
   d9b6a:	4628      	mov	r0, r5
   d9b6c:	f7fd fe38 	bl	d77e0 <siscanf>
   d9b70:	2800      	cmp	r0, #0
   d9b72:	f340 8123 	ble.w	d9dbc <_tzset_unlocked_r+0x2c8>
   d9b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9b78:	18ef      	adds	r7, r5, r3
   d9b7a:	5ceb      	ldrb	r3, [r5, r3]
   d9b7c:	2b2d      	cmp	r3, #45	; 0x2d
   d9b7e:	d103      	bne.n	d9b88 <_tzset_unlocked_r+0x94>
   d9b80:	3701      	adds	r7, #1
   d9b82:	f04f 35ff 	mov.w	r5, #4294967295
   d9b86:	e003      	b.n	d9b90 <_tzset_unlocked_r+0x9c>
   d9b88:	2b2b      	cmp	r3, #43	; 0x2b
   d9b8a:	bf08      	it	eq
   d9b8c:	3701      	addeq	r7, #1
   d9b8e:	2501      	movs	r5, #1
   d9b90:	f10d 0a20 	add.w	sl, sp, #32
   d9b94:	f10d 0b1e 	add.w	fp, sp, #30
   d9b98:	f04f 0800 	mov.w	r8, #0
   d9b9c:	9603      	str	r6, [sp, #12]
   d9b9e:	f8cd a008 	str.w	sl, [sp, #8]
   d9ba2:	9601      	str	r6, [sp, #4]
   d9ba4:	f8cd b000 	str.w	fp, [sp]
   d9ba8:	4633      	mov	r3, r6
   d9baa:	aa07      	add	r2, sp, #28
   d9bac:	498d      	ldr	r1, [pc, #564]	; (d9de4 <_tzset_unlocked_r+0x2f0>)
   d9bae:	f8ad 801e 	strh.w	r8, [sp, #30]
   d9bb2:	4638      	mov	r0, r7
   d9bb4:	f8ad 8020 	strh.w	r8, [sp, #32]
   d9bb8:	f7fd fe12 	bl	d77e0 <siscanf>
   d9bbc:	4540      	cmp	r0, r8
   d9bbe:	f340 80fd 	ble.w	d9dbc <_tzset_unlocked_r+0x2c8>
   d9bc2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9bc6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9bca:	f8df 9224 	ldr.w	r9, [pc, #548]	; d9df0 <_tzset_unlocked_r+0x2fc>
   d9bce:	213c      	movs	r1, #60	; 0x3c
   d9bd0:	fb01 3302 	mla	r3, r1, r2, r3
   d9bd4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9bd8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9bdc:	fb01 3302 	mla	r3, r1, r2, r3
   d9be0:	435d      	muls	r5, r3
   d9be2:	6225      	str	r5, [r4, #32]
   d9be4:	4d7c      	ldr	r5, [pc, #496]	; (d9dd8 <_tzset_unlocked_r+0x2e4>)
   d9be6:	4b7d      	ldr	r3, [pc, #500]	; (d9ddc <_tzset_unlocked_r+0x2e8>)
   d9be8:	602b      	str	r3, [r5, #0]
   d9bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9bec:	497c      	ldr	r1, [pc, #496]	; (d9de0 <_tzset_unlocked_r+0x2ec>)
   d9bee:	441f      	add	r7, r3
   d9bf0:	464a      	mov	r2, r9
   d9bf2:	4633      	mov	r3, r6
   d9bf4:	4638      	mov	r0, r7
   d9bf6:	f7fd fdf3 	bl	d77e0 <siscanf>
   d9bfa:	4540      	cmp	r0, r8
   d9bfc:	dc08      	bgt.n	d9c10 <_tzset_unlocked_r+0x11c>
   d9bfe:	682b      	ldr	r3, [r5, #0]
   d9c00:	606b      	str	r3, [r5, #4]
   d9c02:	4b72      	ldr	r3, [pc, #456]	; (d9dcc <_tzset_unlocked_r+0x2d8>)
   d9c04:	6a22      	ldr	r2, [r4, #32]
   d9c06:	601a      	str	r2, [r3, #0]
   d9c08:	4b72      	ldr	r3, [pc, #456]	; (d9dd4 <_tzset_unlocked_r+0x2e0>)
   d9c0a:	f8c3 8000 	str.w	r8, [r3]
   d9c0e:	e0d5      	b.n	d9dbc <_tzset_unlocked_r+0x2c8>
   d9c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9c12:	f8c5 9004 	str.w	r9, [r5, #4]
   d9c16:	18fd      	adds	r5, r7, r3
   d9c18:	5cfb      	ldrb	r3, [r7, r3]
   d9c1a:	2b2d      	cmp	r3, #45	; 0x2d
   d9c1c:	d103      	bne.n	d9c26 <_tzset_unlocked_r+0x132>
   d9c1e:	3501      	adds	r5, #1
   d9c20:	f04f 37ff 	mov.w	r7, #4294967295
   d9c24:	e003      	b.n	d9c2e <_tzset_unlocked_r+0x13a>
   d9c26:	2b2b      	cmp	r3, #43	; 0x2b
   d9c28:	bf08      	it	eq
   d9c2a:	3501      	addeq	r5, #1
   d9c2c:	2701      	movs	r7, #1
   d9c2e:	2300      	movs	r3, #0
   d9c30:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9c34:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9c38:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9c3c:	930a      	str	r3, [sp, #40]	; 0x28
   d9c3e:	9603      	str	r6, [sp, #12]
   d9c40:	f8cd a008 	str.w	sl, [sp, #8]
   d9c44:	9601      	str	r6, [sp, #4]
   d9c46:	f8cd b000 	str.w	fp, [sp]
   d9c4a:	4633      	mov	r3, r6
   d9c4c:	aa07      	add	r2, sp, #28
   d9c4e:	4965      	ldr	r1, [pc, #404]	; (d9de4 <_tzset_unlocked_r+0x2f0>)
   d9c50:	4628      	mov	r0, r5
   d9c52:	f7fd fdc5 	bl	d77e0 <siscanf>
   d9c56:	2800      	cmp	r0, #0
   d9c58:	dc04      	bgt.n	d9c64 <_tzset_unlocked_r+0x170>
   d9c5a:	6a23      	ldr	r3, [r4, #32]
   d9c5c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d9c60:	63e3      	str	r3, [r4, #60]	; 0x3c
   d9c62:	e00e      	b.n	d9c82 <_tzset_unlocked_r+0x18e>
   d9c64:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9c68:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9c6c:	213c      	movs	r1, #60	; 0x3c
   d9c6e:	fb01 3302 	mla	r3, r1, r2, r3
   d9c72:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9c76:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9c7a:	fb01 3302 	mla	r3, r1, r2, r3
   d9c7e:	435f      	muls	r7, r3
   d9c80:	63e7      	str	r7, [r4, #60]	; 0x3c
   d9c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9c84:	4627      	mov	r7, r4
   d9c86:	441d      	add	r5, r3
   d9c88:	f04f 0900 	mov.w	r9, #0
   d9c8c:	782b      	ldrb	r3, [r5, #0]
   d9c8e:	2b2c      	cmp	r3, #44	; 0x2c
   d9c90:	bf08      	it	eq
   d9c92:	3501      	addeq	r5, #1
   d9c94:	f895 8000 	ldrb.w	r8, [r5]
   d9c98:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d9c9c:	d126      	bne.n	d9cec <_tzset_unlocked_r+0x1f8>
   d9c9e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d9ca2:	9302      	str	r3, [sp, #8]
   d9ca4:	ab09      	add	r3, sp, #36	; 0x24
   d9ca6:	9300      	str	r3, [sp, #0]
   d9ca8:	9603      	str	r6, [sp, #12]
   d9caa:	9601      	str	r6, [sp, #4]
   d9cac:	4633      	mov	r3, r6
   d9cae:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d9cb2:	494d      	ldr	r1, [pc, #308]	; (d9de8 <_tzset_unlocked_r+0x2f4>)
   d9cb4:	4628      	mov	r0, r5
   d9cb6:	f7fd fd93 	bl	d77e0 <siscanf>
   d9cba:	2803      	cmp	r0, #3
   d9cbc:	d17e      	bne.n	d9dbc <_tzset_unlocked_r+0x2c8>
   d9cbe:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d9cc2:	1e4b      	subs	r3, r1, #1
   d9cc4:	2b0b      	cmp	r3, #11
   d9cc6:	d879      	bhi.n	d9dbc <_tzset_unlocked_r+0x2c8>
   d9cc8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d9ccc:	1e53      	subs	r3, r2, #1
   d9cce:	2b04      	cmp	r3, #4
   d9cd0:	d874      	bhi.n	d9dbc <_tzset_unlocked_r+0x2c8>
   d9cd2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d9cd6:	2b06      	cmp	r3, #6
   d9cd8:	d870      	bhi.n	d9dbc <_tzset_unlocked_r+0x2c8>
   d9cda:	f887 8008 	strb.w	r8, [r7, #8]
   d9cde:	60f9      	str	r1, [r7, #12]
   d9ce0:	613a      	str	r2, [r7, #16]
   d9ce2:	617b      	str	r3, [r7, #20]
   d9ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9ce6:	eb05 0803 	add.w	r8, r5, r3
   d9cea:	e02a      	b.n	d9d42 <_tzset_unlocked_r+0x24e>
   d9cec:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d9cf0:	bf06      	itte	eq
   d9cf2:	3501      	addeq	r5, #1
   d9cf4:	4643      	moveq	r3, r8
   d9cf6:	2344      	movne	r3, #68	; 0x44
   d9cf8:	220a      	movs	r2, #10
   d9cfa:	a90b      	add	r1, sp, #44	; 0x2c
   d9cfc:	4628      	mov	r0, r5
   d9cfe:	9305      	str	r3, [sp, #20]
   d9d00:	f7ff fe3e 	bl	d9980 <strtoul>
   d9d04:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9d08:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9d0c:	4545      	cmp	r5, r8
   d9d0e:	9b05      	ldr	r3, [sp, #20]
   d9d10:	d114      	bne.n	d9d3c <_tzset_unlocked_r+0x248>
   d9d12:	234d      	movs	r3, #77	; 0x4d
   d9d14:	f1b9 0f00 	cmp.w	r9, #0
   d9d18:	d107      	bne.n	d9d2a <_tzset_unlocked_r+0x236>
   d9d1a:	7223      	strb	r3, [r4, #8]
   d9d1c:	2303      	movs	r3, #3
   d9d1e:	60e3      	str	r3, [r4, #12]
   d9d20:	2302      	movs	r3, #2
   d9d22:	6123      	str	r3, [r4, #16]
   d9d24:	f8c4 9014 	str.w	r9, [r4, #20]
   d9d28:	e00b      	b.n	d9d42 <_tzset_unlocked_r+0x24e>
   d9d2a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d9d2e:	230b      	movs	r3, #11
   d9d30:	62a3      	str	r3, [r4, #40]	; 0x28
   d9d32:	2301      	movs	r3, #1
   d9d34:	62e3      	str	r3, [r4, #44]	; 0x2c
   d9d36:	2300      	movs	r3, #0
   d9d38:	6323      	str	r3, [r4, #48]	; 0x30
   d9d3a:	e002      	b.n	d9d42 <_tzset_unlocked_r+0x24e>
   d9d3c:	b280      	uxth	r0, r0
   d9d3e:	723b      	strb	r3, [r7, #8]
   d9d40:	6178      	str	r0, [r7, #20]
   d9d42:	2302      	movs	r3, #2
   d9d44:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9d48:	2300      	movs	r3, #0
   d9d4a:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9d4e:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9d52:	930a      	str	r3, [sp, #40]	; 0x28
   d9d54:	f898 3000 	ldrb.w	r3, [r8]
   d9d58:	2b2f      	cmp	r3, #47	; 0x2f
   d9d5a:	d10b      	bne.n	d9d74 <_tzset_unlocked_r+0x280>
   d9d5c:	9603      	str	r6, [sp, #12]
   d9d5e:	f8cd a008 	str.w	sl, [sp, #8]
   d9d62:	9601      	str	r6, [sp, #4]
   d9d64:	f8cd b000 	str.w	fp, [sp]
   d9d68:	4633      	mov	r3, r6
   d9d6a:	aa07      	add	r2, sp, #28
   d9d6c:	491f      	ldr	r1, [pc, #124]	; (d9dec <_tzset_unlocked_r+0x2f8>)
   d9d6e:	4640      	mov	r0, r8
   d9d70:	f7fd fd36 	bl	d77e0 <siscanf>
   d9d74:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9d78:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9d7c:	213c      	movs	r1, #60	; 0x3c
   d9d7e:	fb01 3302 	mla	r3, r1, r2, r3
   d9d82:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9d86:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9d8a:	fb01 3302 	mla	r3, r1, r2, r3
   d9d8e:	61bb      	str	r3, [r7, #24]
   d9d90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d9d92:	f109 0901 	add.w	r9, r9, #1
   d9d96:	f1b9 0f02 	cmp.w	r9, #2
   d9d9a:	4445      	add	r5, r8
   d9d9c:	f107 071c 	add.w	r7, r7, #28
   d9da0:	f47f af74 	bne.w	d9c8c <_tzset_unlocked_r+0x198>
   d9da4:	6860      	ldr	r0, [r4, #4]
   d9da6:	f7ff fdf5 	bl	d9994 <__tzcalc_limits>
   d9daa:	4b08      	ldr	r3, [pc, #32]	; (d9dcc <_tzset_unlocked_r+0x2d8>)
   d9dac:	6a22      	ldr	r2, [r4, #32]
   d9dae:	601a      	str	r2, [r3, #0]
   d9db0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9db2:	1a9b      	subs	r3, r3, r2
   d9db4:	4a07      	ldr	r2, [pc, #28]	; (d9dd4 <_tzset_unlocked_r+0x2e0>)
   d9db6:	bf18      	it	ne
   d9db8:	2301      	movne	r3, #1
   d9dba:	6013      	str	r3, [r2, #0]
   d9dbc:	b00d      	add	sp, #52	; 0x34
   d9dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9dc2:	bf00      	nop
   d9dc4:	000daaa0 	.word	0x000daaa0
   d9dc8:	2003e7e0 	.word	0x2003e7e0
   d9dcc:	2003e7e8 	.word	0x2003e7e8
   d9dd0:	000daaa3 	.word	0x000daaa3
   d9dd4:	2003e7e4 	.word	0x2003e7e4
   d9dd8:	2003dc8c 	.word	0x2003dc8c
   d9ddc:	2003e7d3 	.word	0x2003e7d3
   d9de0:	000daaa7 	.word	0x000daaa7
   d9de4:	000daaca 	.word	0x000daaca
   d9de8:	000daab6 	.word	0x000daab6
   d9dec:	000daac9 	.word	0x000daac9
   d9df0:	2003e7c8 	.word	0x2003e7c8

000d9df4 <_findenv_r>:
   d9df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9df8:	4607      	mov	r7, r0
   d9dfa:	468b      	mov	fp, r1
   d9dfc:	4690      	mov	r8, r2
   d9dfe:	f000 f8d9 	bl	d9fb4 <__env_lock>
   d9e02:	4b19      	ldr	r3, [pc, #100]	; (d9e68 <_findenv_r+0x74>)
   d9e04:	681d      	ldr	r5, [r3, #0]
   d9e06:	469a      	mov	sl, r3
   d9e08:	b13d      	cbz	r5, d9e1a <_findenv_r+0x26>
   d9e0a:	465c      	mov	r4, fp
   d9e0c:	4623      	mov	r3, r4
   d9e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9e12:	b142      	cbz	r2, d9e26 <_findenv_r+0x32>
   d9e14:	2a3d      	cmp	r2, #61	; 0x3d
   d9e16:	461c      	mov	r4, r3
   d9e18:	d1f8      	bne.n	d9e0c <_findenv_r+0x18>
   d9e1a:	4638      	mov	r0, r7
   d9e1c:	f000 f8cb 	bl	d9fb6 <__env_unlock>
   d9e20:	2000      	movs	r0, #0
   d9e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9e26:	ebcb 0404 	rsb	r4, fp, r4
   d9e2a:	46a9      	mov	r9, r5
   d9e2c:	f859 0b04 	ldr.w	r0, [r9], #4
   d9e30:	2800      	cmp	r0, #0
   d9e32:	d0f2      	beq.n	d9e1a <_findenv_r+0x26>
   d9e34:	4622      	mov	r2, r4
   d9e36:	4659      	mov	r1, fp
   d9e38:	f7ff fcfc 	bl	d9834 <strncmp>
   d9e3c:	b988      	cbnz	r0, d9e62 <_findenv_r+0x6e>
   d9e3e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d9e42:	191e      	adds	r6, r3, r4
   d9e44:	5d1b      	ldrb	r3, [r3, r4]
   d9e46:	2b3d      	cmp	r3, #61	; 0x3d
   d9e48:	d10b      	bne.n	d9e62 <_findenv_r+0x6e>
   d9e4a:	f8da 3000 	ldr.w	r3, [sl]
   d9e4e:	1aed      	subs	r5, r5, r3
   d9e50:	10ad      	asrs	r5, r5, #2
   d9e52:	4638      	mov	r0, r7
   d9e54:	f8c8 5000 	str.w	r5, [r8]
   d9e58:	f000 f8ad 	bl	d9fb6 <__env_unlock>
   d9e5c:	1c70      	adds	r0, r6, #1
   d9e5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9e62:	464d      	mov	r5, r9
   d9e64:	e7e1      	b.n	d9e2a <_findenv_r+0x36>
   d9e66:	bf00      	nop
   d9e68:	2003dcd4 	.word	0x2003dcd4

000d9e6c <_getenv_r>:
   d9e6c:	b507      	push	{r0, r1, r2, lr}
   d9e6e:	aa01      	add	r2, sp, #4
   d9e70:	f7ff ffc0 	bl	d9df4 <_findenv_r>
   d9e74:	b003      	add	sp, #12
   d9e76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9e7c <__gettzinfo>:
   d9e7c:	4800      	ldr	r0, [pc, #0]	; (d9e80 <__gettzinfo+0x4>)
   d9e7e:	4770      	bx	lr
   d9e80:	2003dc94 	.word	0x2003dc94

000d9e84 <gmtime_r>:
   d9e84:	6802      	ldr	r2, [r0, #0]
   d9e86:	4b47      	ldr	r3, [pc, #284]	; (d9fa4 <gmtime_r+0x120>)
   d9e88:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9e8a:	fb92 f4f3 	sdiv	r4, r2, r3
   d9e8e:	fb03 2214 	mls	r2, r3, r4, r2
   d9e92:	2a00      	cmp	r2, #0
   d9e94:	bfbc      	itt	lt
   d9e96:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9e9a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9e9e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d9ea2:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d9ea6:	fb92 f3f0 	sdiv	r3, r2, r0
   d9eaa:	fb00 2213 	mls	r2, r0, r3, r2
   d9eae:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d9eb2:	bfac      	ite	ge
   d9eb4:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9eb8:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9ebc:	608b      	str	r3, [r1, #8]
   d9ebe:	fb92 f3f0 	sdiv	r3, r2, r0
   d9ec2:	fb00 2213 	mls	r2, r0, r3, r2
   d9ec6:	604b      	str	r3, [r1, #4]
   d9ec8:	600a      	str	r2, [r1, #0]
   d9eca:	2307      	movs	r3, #7
   d9ecc:	1ce2      	adds	r2, r4, #3
   d9ece:	fb92 f3f3 	sdiv	r3, r2, r3
   d9ed2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9ed6:	1ad3      	subs	r3, r2, r3
   d9ed8:	618b      	str	r3, [r1, #24]
   d9eda:	4b33      	ldr	r3, [pc, #204]	; (d9fa8 <gmtime_r+0x124>)
   d9edc:	4d33      	ldr	r5, [pc, #204]	; (d9fac <gmtime_r+0x128>)
   d9ede:	fb94 f5f5 	sdiv	r5, r4, r5
   d9ee2:	fb03 4405 	mla	r4, r3, r5, r4
   d9ee6:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9eea:	fbb4 f2f2 	udiv	r2, r4, r2
   d9eee:	4422      	add	r2, r4
   d9ef0:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9ef4:	fbb4 f3f7 	udiv	r3, r4, r7
   d9ef8:	1ad2      	subs	r2, r2, r3
   d9efa:	482d      	ldr	r0, [pc, #180]	; (d9fb0 <gmtime_r+0x12c>)
   d9efc:	fbb4 f0f0 	udiv	r0, r4, r0
   d9f00:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9f04:	1a13      	subs	r3, r2, r0
   d9f06:	fbb3 f6f6 	udiv	r6, r3, r6
   d9f0a:	4434      	add	r4, r6
   d9f0c:	f240 126d 	movw	r2, #365	; 0x16d
   d9f10:	fbb3 f0f2 	udiv	r0, r3, r2
   d9f14:	fbb3 f3f7 	udiv	r3, r3, r7
   d9f18:	1ae3      	subs	r3, r4, r3
   d9f1a:	fb02 3310 	mls	r3, r2, r0, r3
   d9f1e:	2499      	movs	r4, #153	; 0x99
   d9f20:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9f24:	3202      	adds	r2, #2
   d9f26:	fbb2 f2f4 	udiv	r2, r2, r4
   d9f2a:	2a0a      	cmp	r2, #10
   d9f2c:	fb04 f402 	mul.w	r4, r4, r2
   d9f30:	f104 0602 	add.w	r6, r4, #2
   d9f34:	f04f 0405 	mov.w	r4, #5
   d9f38:	fbb6 f4f4 	udiv	r4, r6, r4
   d9f3c:	bf34      	ite	cc
   d9f3e:	2602      	movcc	r6, #2
   d9f40:	f06f 0609 	mvncs.w	r6, #9
   d9f44:	4416      	add	r6, r2
   d9f46:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9f4a:	fb02 0505 	mla	r5, r2, r5, r0
   d9f4e:	1c5f      	adds	r7, r3, #1
   d9f50:	2e01      	cmp	r6, #1
   d9f52:	bf98      	it	ls
   d9f54:	3501      	addls	r5, #1
   d9f56:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9f5a:	eba7 0704 	sub.w	r7, r7, r4
   d9f5e:	d302      	bcc.n	d9f66 <gmtime_r+0xe2>
   d9f60:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d9f64:	e014      	b.n	d9f90 <gmtime_r+0x10c>
   d9f66:	0782      	lsls	r2, r0, #30
   d9f68:	d105      	bne.n	d9f76 <gmtime_r+0xf2>
   d9f6a:	2464      	movs	r4, #100	; 0x64
   d9f6c:	fbb0 f2f4 	udiv	r2, r0, r4
   d9f70:	fb04 0212 	mls	r2, r4, r2, r0
   d9f74:	b94a      	cbnz	r2, d9f8a <gmtime_r+0x106>
   d9f76:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9f7a:	fbb0 f4f2 	udiv	r4, r0, r2
   d9f7e:	fb02 0014 	mls	r0, r2, r4, r0
   d9f82:	fab0 f280 	clz	r2, r0
   d9f86:	0952      	lsrs	r2, r2, #5
   d9f88:	e000      	b.n	d9f8c <gmtime_r+0x108>
   d9f8a:	2201      	movs	r2, #1
   d9f8c:	333b      	adds	r3, #59	; 0x3b
   d9f8e:	441a      	add	r2, r3
   d9f90:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d9f94:	2300      	movs	r3, #0
   d9f96:	61ca      	str	r2, [r1, #28]
   d9f98:	614d      	str	r5, [r1, #20]
   d9f9a:	610e      	str	r6, [r1, #16]
   d9f9c:	60cf      	str	r7, [r1, #12]
   d9f9e:	620b      	str	r3, [r1, #32]
   d9fa0:	4608      	mov	r0, r1
   d9fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9fa4:	00015180 	.word	0x00015180
   d9fa8:	fffdc54f 	.word	0xfffdc54f
   d9fac:	00023ab1 	.word	0x00023ab1
   d9fb0:	00023ab0 	.word	0x00023ab0

000d9fb4 <__env_lock>:
   d9fb4:	4770      	bx	lr

000d9fb6 <__env_unlock>:
   d9fb6:	4770      	bx	lr

000d9fb8 <dynalib_user>:
   d9fb8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d9fc8:	0000 0000                                   ....

000d9fcc <_ZTVN8particle13__SPISettingsE>:
	...
   d9fd4:	40f9 000d                                   .@..

000d9fd8 <_ZTV4File>:
	...
   d9fe0:	40f5 000d 419b 000d 4183 000d 417d 000d     .@...A...A..}A..
   d9ff0:	40c9 000d 415d 000d 4157 000d 4151 000d     .@..]A..WA..QA..
   da000:	ff7e 0006 0001 0000 ef00 6564 6166 6c75     ~.........defaul
   da010:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   da020:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   da030:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   da040:	6c25 2075 7325 4d20 444f 2545 3e64 6900     %lu %s MODE%d>.i
   da050:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   da060:	6c69 6465 0021 4453 6f6c 2067 6e69 7469     iled!.SDlog init
   da070:	4400 5046 616c 6579 2072 6e69 7469 6620     .DFPlayer init f
   da080:	6961 656c 0064 4644 6c50 7961 7265 6920     ailed.DFPlayer i
   da090:	696e 0074 6e49 7469 6169 696c 617a 6974     nit.Initializati
   da0a0:	6e6f 6620 6e69 7369 6568 0064 6f63 6e6e     on finished.conn
   da0b0:	6365 6974 676e 7420 206f 514d 5454 2e20     ecting to MQTT .
   da0c0:	2e2e 7200 7465 7972 6e69 2067 514d 5454     ...retrying MQTT
   da0d0:	6320 6e6f 656e 7463 6f69 206e 6e69 3520      connection in 5
   da0e0:	7320 6365 6e6f 7364 2e2e 002e 514d 5454      seconds....MQTT
   da0f0:	6320 6e6f 656e 7463 6465 0021 6144 6174      connected!.Data
   da100:	6f4c 2e67 7874 0074 6941 2072 7551 6c61     Log.txt.Air Qual
   da110:	7469 2079 6177 6e72 6e69 2e67 4120 2051     ity warning. AQ 
   da120:	6572 6461 203a 6925 0a20 4100 7269 5120     read: %i ..Air Q
   da130:	6175 696c 7974 5220 6165 3a64 2520 2069     uality Read: %i 
   da140:	000a 5141 7720 6972 6574 6520 7272 726f     ..AQ write error
   da150:	4d00 2d51 2039 6177 6e72 6e69 2e67 4d20     .MQ-9 warning. M
   da160:	2d51 2039 6572 6461 203a 6925 0a20 4d00     Q-9 read: %i ..M
   da170:	2d51 2039 7277 7469 2065 7265 6f72 0072     Q-9 write error.
   da180:	6f6e 696d 616e 206c 6572 6461 2e73 4d20     nominal reads. M
   da190:	3951 203a 6925 4120 3a51 2520 2069 6554     Q9: %i AQ: %i Te
   da1a0:	706d 7265 7461 7275 3a65 0a20 6e00 6d6f     mperature: ..nom
   da1b0:	6e69 6c61 7220 6165 6964 676e 2e73 6e20     inal readings. n
   da1c0:	746f 6968 676e 7420 206f 6572 6f63 6472     othing to record
   da1d0:	6e00 6d6f 6e69 6c61 7220 6165 6964 676e     .nominal reading
   da1e0:	2073 7277 7469 2065 7265 6f72 2e72 4400     s write error..D
   da1f0:	4e41 4547 2052 4d49 494d 414e 544e 202e     ANGER IMMINANT. 
   da200:	514d 392d 203a 6925 4120 3a51 2520 2069     MQ-9: %i AQ: %i 
   da210:	6554 706d 203a 6925 0a20 4800 6769 2068     Temp: %i ..High 
   da220:	6144 676e 7265 202e 514d 392d 203a 6925     Danger. MQ-9: %i
   da230:	4120 3a51 2520 2069 6554 706d 2520 2069      AQ: %i Temp %i 
   da240:	000a 6948 6867 6420 6e61 6567 2072 7277     ..High danger wr
   da250:	7469 2065 7265 6f72 2e72 6d00 7561 6972     ite error..mauri
   da260:	6963 766f 3939 6900 2e6f 6461 6661 7572     ciov99.io.adafru
   da270:	7469 632e 6d6f 6100 6f69 435f 494d 324e     it.com.aio_CMIN2
   da280:	4d34 7943 6947 6d68 7855 4549 4153 5931     4MCyGihmUxIESA1Y
   da290:	3439 5458 3746 0045 616d 7275 6369 6f69     94XTF7E.mauricio
   da2a0:	3976 2f39 6566 6465 2f73 6d53 7261 5f74     v99/feeds/Smart_
   da2b0:	6548 6d6c 7465 425f 454d 6d00 7561 6972     Helmet_BME.mauri
   da2c0:	6963 766f 3939 662f 6565 7364 532f 616d     ciov99/feeds/Sma
   da2d0:	7472 485f 6c65 656d 5f74 514d 392d 6d00     rt_Helmet_MQ-9.m
   da2e0:	7561 6972 6963 766f 3939 662f 6565 7364     auriciov99/feeds
   da2f0:	532f 616d 7472 485f 6c65 656d 5f74 6941     /Smart_Helmet_Ai
   da300:	5172 6175 696c 7974 0000 0000 c000 4001     rQuality.......@
   da310:	1000 4002 2000 4002                         ...@. .@

000da318 <CSWTCH.65>:
   da318:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   da328:	0050 0000                                   P...

000da32c <_ZTV19Adafruit_MQTT_SPARK>:
	...
   da334:	40f7 000d 48a5 000d 5495 000d 5541 000d     .@...H...T..AU..
   da344:	5573 000d 54a9 000d 54e9 000d               sU...T...T..

000da350 <_ZTV13Adafruit_MQTT>:
	...
   da360:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   da370:	40a5 000d                                   .@..

000da374 <CSWTCH.52>:
   da374:	a3d7 000d a3eb 000d a3bb 000d a3fd 000d     ................
   da384:	a442 000d a487 000d a4a7 000d a4da 000d     B...............
   da394:	a4f4 000d a52b 000d 5b20 7830 3000 5d00     ....+... [0x.0.]
   da3a4:	202c 0a00 0009 7244 706f 6570 2064 2061     , ....Dropped a 
   da3b4:	6170 6b63 7465 5500 6b6e 6f6e 6e77 6520     packet.Unknown e
   da3c4:	7272 726f 4d00 5451 0054 2525 6425 252e     rror.MQTT.%%%d.%
   da3d4:	6664 4600 6961 656c 2064 6f74 7320 6275     df.Failed to sub
   da3e4:	6373 6972 6562 4300 6e6f 656e 7463 6f69     scribe.Connectio
   da3f4:	206e 6166 6c69 6465 5400 6568 5320 7265     n failed.The Ser
   da404:	6576 2072 6f64 7365 6e20 746f 7320 7075     ver does not sup
   da414:	6f70 7472 7420 6568 6c20 7665 6c65 6f20     port the level o
   da424:	2066 6874 2065 514d 5454 7020 6f72 6f74     f the MQTT proto
   da434:	6f63 206c 6572 7571 7365 6574 0064 6854     col requested.Th
   da444:	2065 6c43 6569 746e 6920 6564 746e 6669     e Client identif
   da454:	6569 2072 7369 6320 726f 6572 7463 5520     ier is correct U
   da464:	4654 382d 6220 7475 6e20 746f 6120 6c6c     TF-8 but not all
   da474:	776f 6465 6220 2079 6874 2065 6553 7672     owed by the Serv
   da484:	7265 5400 6568 4d20 5451 2054 6573 7672     er.The MQTT serv
   da494:	6369 2065 7369 7520 616e 6176 6c69 6261     ice is unavailab
   da4a4:	656c 5400 6568 6420 7461 2061 6e69 7420     le.The data in t
   da4b4:	6568 7520 6573 2072 616e 656d 6f20 2072     he user name or 
   da4c4:	6170 7373 6f77 6472 6920 2073 616d 666c     password is malf
   da4d4:	726f 656d 0064 6f4e 2074 7561 6874 726f     ormed.Not author
   da4e4:	7a69 6465 7420 206f 6f63 6e6e 6365 0074     ized to connect.
   da4f4:	7845 6563 6465 6465 7220 6365 6e6f 656e     Exceeded reconne
   da504:	7463 7220 7461 2065 696c 696d 2e74 5020     ct rate limit. P
   da514:	656c 7361 2065 7274 2079 6761 6961 206e     lease try again 
   da524:	616c 6574 2e72 5900 756f 6820 7661 2065     later..You have 
   da534:	6562 6e65 6220 6e61 656e 2064 7266 6d6f     been banned from
   da544:	6320 6e6f 656e 7463 6e69 2e67 5020 656c      connecting. Ple
   da554:	7361 2065 6f63 746e 6361 2074 6874 2065     ase contact the 
   da564:	514d 5454 7320 7265 6576 2072 6461 696d     MQTT server admi
   da574:	696e 7473 6172 6f74 2072 6f66 2072 6f6d     nistrator for mo
   da584:	6572 6420 7465 6961 736c 002e               re details..

000da590 <_ZTVN5spark13EthernetClassE>:
	...
   da598:	787f 000d 7875 000d 786b 000d 7861 000d     .x..ux..kx..ax..
   da5a8:	7855 000d 7849 000d 783d 000d 7835 000d     Ux..Ix..=x..5x..
   da5b8:	782b 000d 7821 000d 8c31 000d               +x..!x..1...

000da5c4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   da5c4:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   da5d4:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   da5e4:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   da5f4:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   da604:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   da614:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   da624:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   da634:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   da644:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   da654:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   da664:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   da674:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   da684:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   da694:	7000 6e61 6369 6100 6c6c 2500 302b 6433     .panic.all.%+03d
   da6a4:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   da6b4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   da6c4:	0065 0000                                   e...

000da6c8 <_ZTV9IPAddress>:
	...
   da6d0:	7fc5 000d 7fb5 000d 7fb7 000d               ............

000da6dc <_ZTV9USBSerial>:
	...
   da6e4:	80c9 000d 8119 000d 8127 000d 7c25 000d     ........'...%|..
   da6f4:	8105 000d 80cb 000d 80e1 000d 8113 000d     ................
   da704:	80f7 000d 80c5 000d                         ........

000da70c <_ZTV11USARTSerial>:
	...
   da714:	8229 000d 8279 000d 8287 000d 7c25 000d     )...y.......%|..
   da724:	823d 000d 825f 000d 824b 000d 8273 000d     =..._...K...s...
   da734:	822b 000d 822f 000d                         +.../...

000da73c <_ZTV7TwoWire>:
	...
   da744:	8339 000d 8383 000d 835b 000d 833b 000d     9.......[...;...
   da754:	8363 000d 836b 000d 8373 000d 837b 000d     c...k...s...{...

000da764 <_ZTVN5spark9MeshClassE>:
	...
   da76c:	849f 000d 8495 000d 848b 000d 8481 000d     ................
   da77c:	8475 000d 8469 000d 845d 000d 8455 000d     u...i...]...U...
   da78c:	844b 000d 8441 000d 8c31 000d               K...A...1...

000da798 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da7a0:	8645 000d 864b 000d 8b33 000d 8659 000d     E...K...3...Y...
   da7b0:	8647 000d                                   G...

000da7b4 <_ZTV9TCPClient>:
	...
   da7bc:	41c5 000d 41f9 000d 85bd 000d 85d7 000d     .A...A..........
   da7cc:	89d9 000d 872b 000d 86fd 000d 8601 000d     ....+...........
   da7dc:	88b5 000d 87b1 000d 875f 000d 89a9 000d     ........_.......
   da7ec:	8603 000d 863b 000d 85e9 000d 865d 000d     ....;.......]...
   da7fc:	86dd 000d 6977 6972 676e 7200 6365 2076     ....wiring.recv 
   da80c:	7265 6f72 2072 203d 6425 0000               error = %d..

000da818 <_ZTVN5spark9WiFiClassE>:
	...
   da820:	8ba9 000d 8b9f 000d 8b95 000d 8b4b 000d     ............K...
   da830:	8b89 000d 8b7d 000d 8b71 000d 8b69 000d     ....}...q...i...
   da840:	8b5f 000d 8b55 000d 8c31 000d               _...U...1...

000da84c <_ZTVN5spark12NetworkClassE>:
	...
   da854:	8bc9 000d 8bd3 000d 8bdd 000d 8be7 000d     ................
   da864:	8bf1 000d 8bfd 000d 8c09 000d 8c15 000d     ................
   da874:	8c1d 000d 8c27 000d 8c31 000d               ....'...1...

000da880 <_ZSt7nothrow>:
	...

000da881 <day_name.4725>:
   da881:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   da891:	6972 6153 4a74                                   riSat

000da896 <mon_name.4726>:
   da896:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   da8a6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   da8b6:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   da8c6:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   da8d6:	6425 000a                                   %d..

000da8da <_ctype_>:
   da8da:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da8ea:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da8fa:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da90a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da91a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da92a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da93a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da94a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da95a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000da9dc <__sf_fake_stdin>:
	...

000da9fc <__sf_fake_stdout>:
	...

000daa1c <__sf_fake_stderr>:
	...
   daa3c:	0043 0000                                   C...

000daa40 <__month_lengths>:
   daa40:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   daa50:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   daa60:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   daa70:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   daa80:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   daa90:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   daaa0:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   daab0:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   daac0:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   daad0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000daadc <link_const_variable_data_end>:
   daadc:	000d48b5 	.word	0x000d48b5
   daae0:	000d4f7b 	.word	0x000d4f7b
   daae4:	000d5479 	.word	0x000d5479
   daae8:	000d548d 	.word	0x000d548d
   daaec:	000d5491 	.word	0x000d5491
   daaf0:	000d5591 	.word	0x000d5591
   daaf4:	000d58b5 	.word	0x000d58b5
   daaf8:	000d58b9 	.word	0x000d58b9
   daafc:	000d58bd 	.word	0x000d58bd
   dab00:	000d5ee5 	.word	0x000d5ee5
   dab04:	000d5ee9 	.word	0x000d5ee9
   dab08:	000d5eed 	.word	0x000d5eed
   dab0c:	000d5ef1 	.word	0x000d5ef1
   dab10:	000d65bd 	.word	0x000d65bd
   dab14:	000d65e1 	.word	0x000d65e1
   dab18:	000d65e5 	.word	0x000d65e5
   dab1c:	000d6909 	.word	0x000d6909
   dab20:	000d690d 	.word	0x000d690d
   dab24:	000d6911 	.word	0x000d6911
   dab28:	000d6e4b 	.word	0x000d6e4b
   dab2c:	000d6e4f 	.word	0x000d6e4f
   dab30:	000d6e53 	.word	0x000d6e53
   dab34:	000d6ef9 	.word	0x000d6ef9
   dab38:	000d6f31 	.word	0x000d6f31
   dab3c:	000d71d3 	.word	0x000d71d3
   dab40:	000d7889 	.word	0x000d7889
   dab44:	000d7a49 	.word	0x000d7a49
   dab48:	000d7bfd 	.word	0x000d7bfd
   dab4c:	000d7d41 	.word	0x000d7d41
   dab50:	000d7e39 	.word	0x000d7e39
   dab54:	000d7e89 	.word	0x000d7e89
   dab58:	000d856d 	.word	0x000d856d
   dab5c:	000d8bb5 	.word	0x000d8bb5
   dab60:	000d8cfd 	.word	0x000d8cfd
   dab64:	000d8ee9 	.word	0x000d8ee9
   dab68:	000d8f6d 	.word	0x000d8f6d
   dab6c:	000d9031 	.word	0x000d9031
   dab70:	000d90f5 	.word	0x000d90f5

000dab74 <link_constructors_end>:
	...
