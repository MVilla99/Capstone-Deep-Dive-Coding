
c:/Users/mauri/Documents/IoTc2/Capstone-Deep-Dive-Coding/Code/Modular_Sensor_Workspace/target/1.5.2/argon/Modular_Sensor_Workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005234  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9250  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003dc84  000d9254  0001dc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000b00  2003dcf0  2003dcf0  0002dcf0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d92c0  000d92c0  000292c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d92e8  000d92e8  000292e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c8731  00000000  00000000  000292ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00024230  00000000  00000000  001f1a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030065  00000000  00000000  00215c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003618  00000000  00000000  00245cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000063b8  00000000  00000000  002492ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0005629d  00000000  00000000  0024f682  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000638ba  00000000  00000000  002a591f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00114025  00000000  00000000  003091d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000fcac  00000000  00000000  0041d200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fbdb 	bl	d87e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fbe0 	bl	d87fe <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dc84 	.word	0x2003dc84
   d4048:	000d9254 	.word	0x000d9254
   d404c:	2003dcf0 	.word	0x2003dcf0
   d4050:	2003dcf0 	.word	0x2003dcf0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fe8d 	bl	d6d78 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9244 	.word	0x000d9244
   d4080:	000d91ac 	.word	0x000d91ac

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8fc 	b.w	d4280 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa05 	bl	d4498 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 be33 	b.w	d6cfc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bbed 	b.w	d6874 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 bbf3 	b.w	d6884 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 bbf1 	b.w	d6884 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fb4e 	bl	d674c <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d648d 	.word	0x000d648d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40c8:	7c03      	ldrb	r3, [r0, #16]
   d40ca:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40ce:	4602      	mov	r2, r0
   d40d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40d4:	b12b      	cbz	r3, d40e2 <_ZN4File9availableEv+0x1a>
   d40d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40d8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40da:	1a18      	subs	r0, r3, r0
   d40dc:	bf48      	it	mi
   d40de:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40e2:	4770      	bx	lr

000d40e4 <_Z12enableButtonv>:
  TimeOnly.toCharArray(currentTime,9);
}

void  enableButton() //ISR for switching the neopixels on or off
{
  pixelState = !pixelState;
   d40e4:	4a02      	ldr	r2, [pc, #8]	; (d40f0 <_Z12enableButtonv+0xc>)
   d40e6:	7813      	ldrb	r3, [r2, #0]
   d40e8:	f083 0301 	eor.w	r3, r3, #1
   d40ec:	7013      	strb	r3, [r2, #0]
   d40ee:	4770      	bx	lr
   d40f0:	2003e3a0 	.word	0x2003e3a0

000d40f4 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40f4:	4770      	bx	lr

000d40f6 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40f6:	4770      	bx	lr

000d40f8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40fa:	4602      	mov	r2, r0
   d40fc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40fe:	7913      	ldrb	r3, [r2, #4]
   d4100:	6895      	ldr	r5, [r2, #8]
   d4102:	b133      	cbz	r3, d4112 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4104:	b93d      	cbnz	r5, d4116 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4106:	490c      	ldr	r1, [pc, #48]	; (d4138 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4108:	b004      	add	sp, #16
   d410a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d410e:	f002 bd21 	b.w	d6b54 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4112:	4b0a      	ldr	r3, [pc, #40]	; (d413c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4114:	e000      	b.n	d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4116:	4b0a      	ldr	r3, [pc, #40]	; (d4140 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4118:	7b16      	ldrb	r6, [r2, #12]
   d411a:	4c0a      	ldr	r4, [pc, #40]	; (d4144 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d411c:	490a      	ldr	r1, [pc, #40]	; (d4148 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d411e:	7b52      	ldrb	r2, [r2, #13]
   d4120:	9202      	str	r2, [sp, #8]
   d4122:	2e01      	cmp	r6, #1
   d4124:	bf08      	it	eq
   d4126:	4621      	moveq	r1, r4
   d4128:	9101      	str	r1, [sp, #4]
   d412a:	9500      	str	r5, [sp, #0]
   d412c:	4a07      	ldr	r2, [pc, #28]	; (d414c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d412e:	2100      	movs	r1, #0
   d4130:	f002 fd4d 	bl	d6bce <_ZN5Print11printf_implEbPKcz>
  }
   d4134:	b004      	add	sp, #16
   d4136:	bd70      	pop	{r4, r5, r6, pc}
   d4138:	000d88e3 	.word	0x000d88e3
   d413c:	000d8c6d 	.word	0x000d8c6d
   d4140:	000d88d2 	.word	0x000d88d2
   d4144:	000d88db 	.word	0x000d88db
   d4148:	000d88df 	.word	0x000d88df
   d414c:	000d88f9 	.word	0x000d88f9

000d4150 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4150:	3010      	adds	r0, #16
   d4152:	f001 b9e9 	b.w	d5528 <_ZN7FatFile4syncEv>

000d4156 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4156:	3010      	adds	r0, #16
   d4158:	f001 b989 	b.w	d546e <_ZN7FatFile4peekEv>

000d415c <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d415c:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d415e:	2201      	movs	r2, #1
   d4160:	f10d 0107 	add.w	r1, sp, #7
   d4164:	3010      	adds	r0, #16
   d4166:	f001 f8cf 	bl	d5308 <_ZN7FatFile4readEPvj>
   d416a:	2801      	cmp	r0, #1
   d416c:	bf0c      	ite	eq
   d416e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4172:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d4176:	b003      	add	sp, #12
   d4178:	f85d fb04 	ldr.w	pc, [sp], #4

000d417c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d417c:	3010      	adds	r0, #16
   d417e:	f001 ba11 	b.w	d55a4 <_ZN7FatFile5writeEPKvj>

000d4182 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4182:	b507      	push	{r0, r1, r2, lr}
   d4184:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4186:	2201      	movs	r2, #1
   d4188:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d418c:	3010      	adds	r0, #16
   d418e:	4619      	mov	r1, r3
   d4190:	f001 fa08 	bl	d55a4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4194:	b003      	add	sp, #12
   d4196:	f85d fb04 	ldr.w	pc, [sp], #4

000d419a <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d419a:	b510      	push	{r4, lr}
   d419c:	2134      	movs	r1, #52	; 0x34
   d419e:	4604      	mov	r4, r0
   d41a0:	f003 fd9e 	bl	d7ce0 <_ZdlPvj>
   d41a4:	4620      	mov	r0, r4
   d41a6:	bd10      	pop	{r4, pc}

000d41a8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a8:	b510      	push	{r4, lr}
   d41aa:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d41ac:	6800      	ldr	r0, [r0, #0]
   d41ae:	b108      	cbz	r0, d41b4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41b0:	f002 fb68 	bl	d6884 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41b4:	4620      	mov	r0, r4
   d41b6:	bd10      	pop	{r4, pc}

000d41b8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d41b8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41ba:	6984      	ldr	r4, [r0, #24]
   d41bc:	4b0a      	ldr	r3, [pc, #40]	; (d41e8 <_ZN9TCPClientD1Ev+0x30>)
   d41be:	6003      	str	r3, [r0, #0]
   d41c0:	4605      	mov	r5, r0
   d41c2:	b17c      	cbz	r4, d41e4 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41c4:	6863      	ldr	r3, [r4, #4]
   d41c6:	3b01      	subs	r3, #1
   d41c8:	6063      	str	r3, [r4, #4]
   d41ca:	b95b      	cbnz	r3, d41e4 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d41cc:	6823      	ldr	r3, [r4, #0]
   d41ce:	4620      	mov	r0, r4
   d41d0:	689b      	ldr	r3, [r3, #8]
   d41d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41d4:	68a3      	ldr	r3, [r4, #8]
   d41d6:	3b01      	subs	r3, #1
   d41d8:	60a3      	str	r3, [r4, #8]
   d41da:	b91b      	cbnz	r3, d41e4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d41dc:	6823      	ldr	r3, [r4, #0]
   d41de:	4620      	mov	r0, r4
   d41e0:	68db      	ldr	r3, [r3, #12]
   d41e2:	4798      	blx	r3
   d41e4:	4628      	mov	r0, r5
   d41e6:	bd38      	pop	{r3, r4, r5, pc}
   d41e8:	000d9080 	.word	0x000d9080

000d41ec <_ZN9TCPClientD0Ev>:
   d41ec:	b510      	push	{r4, lr}
   d41ee:	4604      	mov	r4, r0
   d41f0:	f7ff ffe2 	bl	d41b8 <_ZN9TCPClientD1Ev>
   d41f4:	4620      	mov	r0, r4
   d41f6:	211c      	movs	r1, #28
   d41f8:	f003 fd72 	bl	d7ce0 <_ZdlPvj>
   d41fc:	4620      	mov	r0, r4
   d41fe:	bd10      	pop	{r4, pc}

000d4200 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4200:	b530      	push	{r4, r5, lr}
   d4202:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4204:	4b1c      	ldr	r3, [pc, #112]	; (d4278 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d4206:	9300      	str	r3, [sp, #0]
   d4208:	7913      	ldrb	r3, [r2, #4]
   d420a:	f88d 3004 	strb.w	r3, [sp, #4]
   d420e:	6893      	ldr	r3, [r2, #8]
   d4210:	9302      	str	r3, [sp, #8]
   d4212:	7b13      	ldrb	r3, [r2, #12]
   d4214:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4218:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d421c:	7b53      	ldrb	r3, [r2, #13]
   d421e:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4222:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4224:	460a      	mov	r2, r1
   d4226:	466b      	mov	r3, sp
   d4228:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d422c:	4628      	mov	r0, r5
   d422e:	f001 fce3 	bl	d5bf8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4232:	b1f0      	cbz	r0, d4272 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4234:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d4236:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d423a:	4628      	mov	r0, r5
   d423c:	f001 f9aa 	bl	d5594 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4240:	2101      	movs	r1, #1
   d4242:	4620      	mov	r0, r4
   d4244:	f001 fb81 	bl	d594a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4248:	4601      	mov	r1, r0
   d424a:	b168      	cbz	r0, d4268 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d424c:	4621      	mov	r1, r4
   d424e:	4628      	mov	r0, r5
   d4250:	f001 f842 	bl	d52d8 <_ZN7FatFile8openRootEP9FatVolume>
   d4254:	b168      	cbz	r0, d4272 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4256:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d425a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d425e:	bf16      	itet	ne
   d4260:	4b06      	ldrne	r3, [pc, #24]	; (d427c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d4262:	4618      	moveq	r0, r3
   d4264:	601d      	strne	r5, [r3, #0]
   d4266:	e005      	b.n	d4274 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4268:	4620      	mov	r0, r4
   d426a:	f001 fb6e 	bl	d594a <_ZN9FatVolume4initEh>
   d426e:	2800      	cmp	r0, #0
   d4270:	d1ec      	bne.n	d424c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d4272:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d4274:	b005      	add	sp, #20
   d4276:	bd30      	pop	{r4, r5, pc}
   d4278:	000d889c 	.word	0x000d889c
   d427c:	2003e3cc 	.word	0x2003e3cc

000d4280 <setup>:
int MQval;

/*    for syncing particle clock      */
char currentDateTime[25], currentTime[9];

void setup() {
   d4280:	b570      	push	{r4, r5, r6, lr}
   d4282:	b086      	sub	sp, #24
  Serial.begin(9600);
   d4284:	f002 fe8e 	bl	d6fa4 <_Z16_fetch_usbserialv>
   d4288:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d428c:	f002 fe7e 	bl	d6f8c <_ZN9USBSerial5beginEl>
  delay(100);
   d4290:	2064      	movs	r0, #100	; 0x64
   d4292:	f002 fcf5 	bl	d6c80 <delay>
  Serial1.begin(9600); // for using with the DFRobot player
   d4296:	f002 ff37 	bl	d7108 <_Z22__fetch_global_Serial1v>
   d429a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d429e:	f002 ff2d 	bl	d70fc <_ZN11USARTSerial5beginEm>
  delay(100); // waiting for serial monitor to initialize 
   d42a2:	2064      	movs	r0, #100	; 0x64
   d42a4:	f002 fcec 	bl	d6c80 <delay>
  Wire.begin();
   d42a8:	f003 fce6 	bl	d7c78 <_Z19__fetch_global_Wirev>
   d42ac:	f002 ff90 	bl	d71d0 <_ZN7TwoWire5beginEv>

  last = 0; // for MQTT subscription timer. 
   d42b0:	4b2a      	ldr	r3, [pc, #168]	; (d435c <setup+0xdc>)

  pixel.begin();
   d42b2:	482b      	ldr	r0, [pc, #172]	; (d4360 <setup+0xe0>)
  pixel.show();

  bme.begin(0x76);
  senseAQ.init();

  pinMode(Bpin, INPUT_PULLDOWN);
   d42b4:	4e2b      	ldr	r6, [pc, #172]	; (d4364 <setup+0xe4>)
  delay(100);
  Serial1.begin(9600); // for using with the DFRobot player
  delay(100); // waiting for serial monitor to initialize 
  Wire.begin();

  last = 0; // for MQTT subscription timer. 
   d42b6:	2400      	movs	r4, #0
   d42b8:	601c      	str	r4, [r3, #0]

  pixel.begin();
   d42ba:	f000 fcc9 	bl	d4c50 <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.clear();
   d42be:	4828      	ldr	r0, [pc, #160]	; (d4360 <setup+0xe0>)
   d42c0:	f000 ff0f 	bl	d50e2 <_ZN17Adafruit_NeoPixel5clearEv>
  pixel.show();
   d42c4:	4826      	ldr	r0, [pc, #152]	; (d4360 <setup+0xe0>)
   d42c6:	f000 fcf9 	bl	d4cbc <_ZN17Adafruit_NeoPixel4showEv>

  bme.begin(0x76);
   d42ca:	2176      	movs	r1, #118	; 0x76
   d42cc:	4826      	ldr	r0, [pc, #152]	; (d4368 <setup+0xe8>)
   d42ce:	f000 fc83 	bl	d4bd8 <_ZN15Adafruit_BME2805beginEh>
  senseAQ.init();
   d42d2:	4826      	ldr	r0, [pc, #152]	; (d436c <setup+0xec>)
   d42d4:	f001 feb9 	bl	d604a <_ZN16AirQualitySensor4initEv>

  pinMode(Bpin, INPUT_PULLDOWN);
   d42d8:	2103      	movs	r1, #3
   d42da:	8830      	ldrh	r0, [r6, #0]
   d42dc:	f003 fc5e 	bl	d7b9c <pinMode>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d42e0:	4b23      	ldr	r3, [pc, #140]	; (d4370 <setup+0xf0>)
   d42e2:	9302      	str	r3, [sp, #8]
   d42e4:	2501      	movs	r5, #1
   d42e6:	4b23      	ldr	r3, [pc, #140]	; (d4374 <setup+0xf4>)

  if(!SD.begin(SD_CS_PIN)){
   d42e8:	4823      	ldr	r0, [pc, #140]	; (d4378 <setup+0xf8>)
   d42ea:	f88d 400c 	strb.w	r4, [sp, #12]
   d42ee:	aa02      	add	r2, sp, #8
   d42f0:	210e      	movs	r1, #14
   d42f2:	9304      	str	r3, [sp, #16]
   d42f4:	f88d 5014 	strb.w	r5, [sp, #20]
   d42f8:	f88d 4015 	strb.w	r4, [sp, #21]
   d42fc:	f7ff ff80 	bl	d4200 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d4300:	b928      	cbnz	r0, d430e <setup+0x8e>
    Serial.println("initialization failed!");
   d4302:	f002 fe4f 	bl	d6fa4 <_Z16_fetch_usbserialv>
   d4306:	491d      	ldr	r1, [pc, #116]	; (d437c <setup+0xfc>)
   d4308:	f002 fc37 	bl	d6b7a <_ZN5Print7printlnEPKc>
    return;
   d430c:	e024      	b.n	d4358 <setup+0xd8>
  }
  Serial.println("SDlog init");
   d430e:	f002 fe49 	bl	d6fa4 <_Z16_fetch_usbserialv>
   d4312:	491b      	ldr	r1, [pc, #108]	; (d4380 <setup+0x100>)
   d4314:	f002 fc31 	bl	d6b7a <_ZN5Print7printlnEPKc>
    if(!myDFP.begin(Serial1)){
   d4318:	f002 fef6 	bl	d7108 <_Z22__fetch_global_Serial1v>
   d431c:	462a      	mov	r2, r5
   d431e:	4601      	mov	r1, r0
   d4320:	4818      	ldr	r0, [pc, #96]	; (d4384 <setup+0x104>)
   d4322:	f001 ffd3 	bl	d62cc <_ZN19DFRobotDFPlayerMini5beginER6Streamb>
   d4326:	b928      	cbnz	r0, d4334 <setup+0xb4>
    Serial.println("DFPlayer init failed");
   d4328:	f002 fe3c 	bl	d6fa4 <_Z16_fetch_usbserialv>
   d432c:	4916      	ldr	r1, [pc, #88]	; (d4388 <setup+0x108>)
   d432e:	f002 fc24 	bl	d6b7a <_ZN5Print7printlnEPKc>
   d4332:	e7fe      	b.n	d4332 <setup+0xb2>
    while(true);
  } 
  Serial.println("DFPlayer init");
   d4334:	f002 fe36 	bl	d6fa4 <_Z16_fetch_usbserialv>
   d4338:	4914      	ldr	r1, [pc, #80]	; (d438c <setup+0x10c>)
   d433a:	f002 fc1e 	bl	d6b7a <_ZN5Print7printlnEPKc>

/*                          commented this chunk out while i tested the bme and other sensors.
  mqtt.subscribe(&subData);
  */
 Serial.println("Initialization finished");
   d433e:	f002 fe31 	bl	d6fa4 <_Z16_fetch_usbserialv>
   d4342:	4913      	ldr	r1, [pc, #76]	; (d4390 <setup+0x110>)
   d4344:	f002 fc19 	bl	d6b7a <_ZN5Print7printlnEPKc>
 attachInterrupt(Bpin, enableButton, RISING);
   d4348:	8830      	ldrh	r0, [r6, #0]
   d434a:	9400      	str	r4, [sp, #0]
   d434c:	f04f 33ff 	mov.w	r3, #4294967295
   d4350:	462a      	mov	r2, r5
   d4352:	4910      	ldr	r1, [pc, #64]	; (d4394 <setup+0x114>)
   d4354:	f002 fe4e 	bl	d6ff4 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d4358:	b006      	add	sp, #24
   d435a:	bd70      	pop	{r4, r5, r6, pc}
   d435c:	2003dd44 	.word	0x2003dd44
   d4360:	2003e3a4 	.word	0x2003e3a4
   d4364:	2003dc84 	.word	0x2003dc84
   d4368:	2003dd4c 	.word	0x2003dd4c
   d436c:	2003e31c 	.word	0x2003e31c
   d4370:	000d889c 	.word	0x000d889c
   d4374:	02faf080 	.word	0x02faf080
   d4378:	2003de64 	.word	0x2003de64
   d437c:	000d8917 	.word	0x000d8917
   d4380:	000d892e 	.word	0x000d892e
   d4384:	2003e338 	.word	0x2003e338
   d4388:	000d8939 	.word	0x000d8939
   d438c:	000d894e 	.word	0x000d894e
   d4390:	000d895c 	.word	0x000d895c
   d4394:	000d40e5 	.word	0x000d40e5

000d4398 <_Z14HighQualityLEDv>:
  int pVal;
  int pPin = A2;
  pVal = analogRead(pPin);  // dont have pinmode in setup but works anyways?
  luminoscity = map(pVal, 40, 3000,10,255);
}  
void HighQualityLED(){
   d4398:	b508      	push	{r3, lr}
  if(pixelState){
   d439a:	4b11      	ldr	r3, [pc, #68]	; (d43e0 <_Z14HighQualityLEDv+0x48>)
    pixel.clear();
   d439c:	4811      	ldr	r0, [pc, #68]	; (d43e4 <_Z14HighQualityLEDv+0x4c>)
  int pPin = A2;
  pVal = analogRead(pPin);  // dont have pinmode in setup but works anyways?
  luminoscity = map(pVal, 40, 3000,10,255);
}  
void HighQualityLED(){
  if(pixelState){
   d439e:	781b      	ldrb	r3, [r3, #0]
   d43a0:	b1b3      	cbz	r3, d43d0 <_Z14HighQualityLEDv+0x38>
    pixel.clear();
   d43a2:	f000 fe9e 	bl	d50e2 <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.setPixelColor(0,green);
   d43a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   d43aa:	2100      	movs	r1, #0
   d43ac:	480d      	ldr	r0, [pc, #52]	; (d43e4 <_Z14HighQualityLEDv+0x4c>)
   d43ae:	f000 fe27 	bl	d5000 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setPixelColor(1,green);
   d43b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   d43b6:	2101      	movs	r1, #1
   d43b8:	480a      	ldr	r0, [pc, #40]	; (d43e4 <_Z14HighQualityLEDv+0x4c>)
   d43ba:	f000 fe21 	bl	d5000 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    pixel.setBrightness(100);  // replace with luminoscity  
   d43be:	4809      	ldr	r0, [pc, #36]	; (d43e4 <_Z14HighQualityLEDv+0x4c>)
   d43c0:	2164      	movs	r1, #100	; 0x64
   d43c2:	f000 fe68 	bl	d5096 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    pixel.show();
   d43c6:	4807      	ldr	r0, [pc, #28]	; (d43e4 <_Z14HighQualityLEDv+0x4c>)
  }
  else if(!pixelState){
    pixel.clear();
    pixel.show();
  }
}
   d43c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if(pixelState){
    pixel.clear();
    pixel.setPixelColor(0,green);
    pixel.setPixelColor(1,green);
    pixel.setBrightness(100);  // replace with luminoscity  
    pixel.show();
   d43cc:	f000 bc76 	b.w	d4cbc <_ZN17Adafruit_NeoPixel4showEv>
  }
  else if(!pixelState){
    pixel.clear();
   d43d0:	f000 fe87 	bl	d50e2 <_ZN17Adafruit_NeoPixel5clearEv>
    pixel.show();
   d43d4:	4803      	ldr	r0, [pc, #12]	; (d43e4 <_Z14HighQualityLEDv+0x4c>)
  }
}
   d43d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pixel.setBrightness(100);  // replace with luminoscity  
    pixel.show();
  }
  else if(!pixelState){
    pixel.clear();
    pixel.show();
   d43da:	f000 bc6f 	b.w	d4cbc <_ZN17Adafruit_NeoPixel4showEv>
   d43de:	bf00      	nop
   d43e0:	2003e3a0 	.word	0x2003e3a0
   d43e4:	2003e3a4 	.word	0x2003e3a4

000d43e8 <_Z7MQ9Readv>:
    qualityValue = 1;
  }
}

/*      function for the MQ-9 sensor      */
void MQ9Read(){
   d43e8:	b513      	push	{r0, r1, r4, lr}
  Wire.beginTransmission(MQaddress);
   d43ea:	f003 fc45 	bl	d7c78 <_Z19__fetch_global_Wirev>
   d43ee:	2150      	movs	r1, #80	; 0x50
   d43f0:	f002 ff29 	bl	d7246 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x00);
   d43f4:	f003 fc40 	bl	d7c78 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d43f8:	6803      	ldr	r3, [r0, #0]
  Wire.endTransmission(false);
  Wire.requestFrom(MQaddress ,2, true);
  MQData[0] = Wire.read();
   d43fa:	4c21      	ldr	r4, [pc, #132]	; (d4480 <_Z7MQ9Readv+0x98>)
   d43fc:	689b      	ldr	r3, [r3, #8]
   d43fe:	2100      	movs	r1, #0
   d4400:	4798      	blx	r3

/*      function for the MQ-9 sensor      */
void MQ9Read(){
  Wire.beginTransmission(MQaddress);
  Wire.write(0x00);
  Wire.endTransmission(false);
   d4402:	f003 fc39 	bl	d7c78 <_Z19__fetch_global_Wirev>
   d4406:	2100      	movs	r1, #0
   d4408:	f002 ff20 	bl	d724c <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MQaddress ,2, true);
   d440c:	f003 fc34 	bl	d7c78 <_Z19__fetch_global_Wirev>
   d4410:	2202      	movs	r2, #2
   d4412:	2150      	movs	r1, #80	; 0x50
   d4414:	2301      	movs	r3, #1
   d4416:	f002 fefd 	bl	d7214 <_ZN7TwoWire11requestFromEhjh>
  MQData[0] = Wire.read();
   d441a:	f003 fc2d 	bl	d7c78 <_Z19__fetch_global_Wirev>
   d441e:	6803      	ldr	r3, [r0, #0]
   d4420:	695b      	ldr	r3, [r3, #20]
   d4422:	4798      	blx	r3
   d4424:	6020      	str	r0, [r4, #0]
  MQData[1] = Wire.read();
   d4426:	f003 fc27 	bl	d7c78 <_Z19__fetch_global_Wirev>
   d442a:	6803      	ldr	r3, [r0, #0]
   d442c:	695b      	ldr	r3, [r3, #20]
   d442e:	4798      	blx	r3
  MQrawADC = ((MQData[0] & 0x0F)*256)+MQData[1];
   d4430:	6823      	ldr	r3, [r4, #0]
  Wire.beginTransmission(MQaddress);
  Wire.write(0x00);
  Wire.endTransmission(false);
  Wire.requestFrom(MQaddress ,2, true);
  MQData[0] = Wire.read();
  MQData[1] = Wire.read();
   d4432:	6060      	str	r0, [r4, #4]
  MQrawADC = ((MQData[0] & 0x0F)*256)+MQData[1];
   d4434:	f003 030f 	and.w	r3, r3, #15
   d4438:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   d443c:	4b11      	ldr	r3, [pc, #68]	; (d4484 <_Z7MQ9Readv+0x9c>)
   d443e:	6018      	str	r0, [r3, #0]
  COppm = (1000.0/4096.0)*MQrawADC +10.0;
   d4440:	f003 fefc 	bl	d823c <__aeabi_i2d>
   d4444:	2200      	movs	r2, #0
   d4446:	4b10      	ldr	r3, [pc, #64]	; (d4488 <_Z7MQ9Readv+0xa0>)
   d4448:	f003 ff5e 	bl	d8308 <__aeabi_dmul>
   d444c:	2200      	movs	r2, #0
   d444e:	4b0f      	ldr	r3, [pc, #60]	; (d448c <_Z7MQ9Readv+0xa4>)
   d4450:	f003 fda8 	bl	d7fa4 <__adddf3>
   d4454:	f004 f96a 	bl	d872c <__aeabi_d2f>
   d4458:	4b0d      	ldr	r3, [pc, #52]	; (d4490 <_Z7MQ9Readv+0xa8>)
   d445a:	ee07 0a90 	vmov	s15, r0
   d445e:	6018      	str	r0, [r3, #0]
  //Serial.printf("CO: %0.2f ppm \n",COppm);
  MQval = map((int)COppm,0,990,0,4);
   d4460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4464:	2304      	movs	r3, #4
   d4466:	9300      	str	r3, [sp, #0]
   d4468:	2300      	movs	r3, #0
   d446a:	4619      	mov	r1, r3
   d446c:	f240 32de 	movw	r2, #990	; 0x3de
   d4470:	ee17 0a90 	vmov	r0, s15
   d4474:	f002 fbf8 	bl	d6c68 <_Z3mapiiiii>
   d4478:	4b06      	ldr	r3, [pc, #24]	; (d4494 <_Z7MQ9Readv+0xac>)
   d447a:	6018      	str	r0, [r3, #0]
}
   d447c:	b002      	add	sp, #8
   d447e:	bd10      	pop	{r4, pc}
   d4480:	2003e398 	.word	0x2003e398
   d4484:	2003dd48 	.word	0x2003dd48
   d4488:	3fcf4000 	.word	0x3fcf4000
   d448c:	40240000 	.word	0x40240000
   d4490:	2003e3c4 	.word	0x2003e3c4
   d4494:	2003e360 	.word	0x2003e360

000d4498 <loop>:
  */
 Serial.println("Initialization finished");
 attachInterrupt(Bpin, enableButton, RISING);
}

void loop() {
   d4498:	b513      	push	{r0, r1, r4, lr}
//MQTT_connect(); // the name for the function has changed

  HighQualityLED();
   d449a:	f7ff ff7d 	bl	d4398 <_Z14HighQualityLEDv>
 // BMERead();
  //myDFP.playMp3Folder(4); //switch all DFP functions to playMP3Folder
  //delay(10000);
 MQ9Read();
   d449e:	f7ff ffa3 	bl	d43e8 <_Z7MQ9Readv>
 Serial.printf("mqval: %i COppm: %0.2f\n",MQval,COppm);
   d44a2:	f002 fd7f 	bl	d6fa4 <_Z16_fetch_usbserialv>
   d44a6:	4b0a      	ldr	r3, [pc, #40]	; (d44d0 <loop+0x38>)
   d44a8:	4604      	mov	r4, r0
   d44aa:	6818      	ldr	r0, [r3, #0]
   d44ac:	f003 fed8 	bl	d8260 <__aeabi_f2d>
   d44b0:	e9cd 0100 	strd	r0, r1, [sp]
   d44b4:	4b07      	ldr	r3, [pc, #28]	; (d44d4 <loop+0x3c>)
   d44b6:	4a08      	ldr	r2, [pc, #32]	; (d44d8 <loop+0x40>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	2100      	movs	r1, #0
   d44bc:	4620      	mov	r0, r4
   d44be:	f002 fb86 	bl	d6bce <_ZN5Print11printf_implEbPKcz>
 delay(500);
   d44c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
   d44c6:	b002      	add	sp, #8
   d44c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 // BMERead();
  //myDFP.playMp3Folder(4); //switch all DFP functions to playMP3Folder
  //delay(10000);
 MQ9Read();
 Serial.printf("mqval: %i COppm: %0.2f\n",MQval,COppm);
 delay(500);
   d44cc:	f002 bbd8 	b.w	d6c80 <delay>
   d44d0:	2003e3c4 	.word	0x2003e3c4
   d44d4:	2003e360 	.word	0x2003e360
   d44d8:	000d89c4 	.word	0x000d89c4

000d44dc <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d44dc:	b510      	push	{r4, lr}
   d44de:	21d4      	movs	r1, #212	; 0xd4
   d44e0:	4604      	mov	r4, r0
   d44e2:	f003 fbfd 	bl	d7ce0 <_ZdlPvj>
   d44e6:	4620      	mov	r0, r4
   d44e8:	bd10      	pop	{r4, pc}
	...

000d44ec <_GLOBAL__sub_I_SystemMode>:
}

void  enableButton() //ISR for switching the neopixels on or off
{
  pixelState = !pixelState;
   d44ec:	b573      	push	{r0, r1, r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d44ee:	4d55      	ldr	r5, [pc, #340]	; (d4644 <_GLOBAL__sub_I_SystemMode+0x158>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d44f0:	4e55      	ldr	r6, [pc, #340]	; (d4648 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d44f2:	2400      	movs	r4, #0

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44f4:	f001 ff22 	bl	d633c <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d44f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d44fc:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d44fe:	602c      	str	r4, [r5, #0]
   d4500:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4502:	71ac      	strb	r4, [r5, #6]
   d4504:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4506:	2002      	movs	r0, #2
   d4508:	f002 f930 	bl	d676c <set_system_mode>
 * Project Modular_Sensor_Workspace
 * Description: workspace intended to refine sensor modules to integrate in capstone project
 * Author: Mauricio Villa
 * Date: 12 - August - 2020
 */
SYSTEM_MODE(SEMI_AUTOMATIC)
   d450c:	4a4f      	ldr	r2, [pc, #316]	; (d464c <_GLOBAL__sub_I_SystemMode+0x160>)
   d450e:	4950      	ldr	r1, [pc, #320]	; (d4650 <_GLOBAL__sub_I_SystemMode+0x164>)
   d4510:	4628      	mov	r0, r5
   d4512:	f003 fbd7 	bl	d7cc4 <__aeabi_atexit>
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
   d4516:	4b4f      	ldr	r3, [pc, #316]	; (d4654 <_GLOBAL__sub_I_SystemMode+0x168>)
   d4518:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d451c:	609a      	str	r2, [r3, #8]
   d451e:	4a4e      	ldr	r2, [pc, #312]	; (d4658 <_GLOBAL__sub_I_SystemMode+0x16c>)
   d4520:	f883 4020 	strb.w	r4, [r3, #32]
   d4524:	6811      	ldr	r1, [r2, #0]
   d4526:	f8c3 1016 	str.w	r1, [r3, #22]
   d452a:	6851      	ldr	r1, [r2, #4]
   d452c:	8912      	ldrh	r2, [r2, #8]
   d452e:	83da      	strh	r2, [r3, #30]
   d4530:	2202      	movs	r2, #2
   d4532:	f8c3 101a 	str.w	r1, [r3, #26]
   d4536:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   d453a:	f883 4026 	strb.w	r4, [r3, #38]	; 0x26
   d453e:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4542:	4b46      	ldr	r3, [pc, #280]	; (d465c <_GLOBAL__sub_I_SystemMode+0x170>)
   d4544:	6831      	ldr	r1, [r6, #0]
   d4546:	71dc      	strb	r4, [r3, #7]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4548:	2264      	movs	r2, #100	; 0x64
   d454a:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d454e:	4a44      	ldr	r2, [pc, #272]	; (d4660 <_GLOBAL__sub_I_SystemMode+0x174>)
   d4550:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d4554:	2201      	movs	r2, #1
   d4556:	ea11 0502 	ands.w	r5, r1, r2
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d455a:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d455e:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d4562:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d4566:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d456a:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d456e:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d4572:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
   d4576:	461c      	mov	r4, r3
   d4578:	d10a      	bne.n	d4590 <_GLOBAL__sub_I_SystemMode+0xa4>
   d457a:	4630      	mov	r0, r6
   d457c:	f7ff fd9c 	bl	d40b8 <__cxa_guard_acquire>
   d4580:	b130      	cbz	r0, d4590 <_GLOBAL__sub_I_SystemMode+0xa4>
   d4582:	4629      	mov	r1, r5
   d4584:	4837      	ldr	r0, [pc, #220]	; (d4664 <_GLOBAL__sub_I_SystemMode+0x178>)
   d4586:	f002 f9d9 	bl	d693c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d458a:	4630      	mov	r0, r6
   d458c:	f7ff fd99 	bl	d40c2 <__cxa_guard_release>
   d4590:	4835      	ldr	r0, [pc, #212]	; (d4668 <_GLOBAL__sub_I_SystemMode+0x17c>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4592:	4b34      	ldr	r3, [pc, #208]	; (d4664 <_GLOBAL__sub_I_SystemMode+0x178>)
File file;
  #define SD_CS_PIN SS
  #define error(msg) sd.errorHalt(msg)

/*      for subscribing | publishing        */
TCPClient TheClient;
   d4594:	4e35      	ldr	r6, [pc, #212]	; (d466c <_GLOBAL__sub_I_SystemMode+0x180>)
   d4596:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d459a:	2500      	movs	r5, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d459c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
DFRobotDFPlayerMini myDFP;

/*      for SD logging        */
int i;
SdFat SD;
File file;
   d45a0:	4a2a      	ldr	r2, [pc, #168]	; (d464c <_GLOBAL__sub_I_SystemMode+0x160>)
   d45a2:	4933      	ldr	r1, [pc, #204]	; (d4670 <_GLOBAL__sub_I_SystemMode+0x184>)
   d45a4:	7405      	strb	r5, [r0, #16]
   d45a6:	7445      	strb	r5, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d45a8:	6045      	str	r5, [r0, #4]
   d45aa:	6083      	str	r3, [r0, #8]
 public:
  File() {}
   d45ac:	4b31      	ldr	r3, [pc, #196]	; (d4674 <_GLOBAL__sub_I_SystemMode+0x188>)
   d45ae:	6003      	str	r3, [r0, #0]
   d45b0:	f003 fb88 	bl	d7cc4 <__aeabi_atexit>
  #define SD_CS_PIN SS
  #define error(msg) sd.errorHalt(msg)

/*      for subscribing | publishing        */
TCPClient TheClient;
   d45b4:	4630      	mov	r0, r6
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d45b6:	4c30      	ldr	r4, [pc, #192]	; (d4678 <_GLOBAL__sub_I_SystemMode+0x18c>)
   d45b8:	f003 f9ba 	bl	d7930 <_ZN9TCPClientC1Ev>
   d45bc:	4a23      	ldr	r2, [pc, #140]	; (d464c <_GLOBAL__sub_I_SystemMode+0x160>)
   d45be:	492f      	ldr	r1, [pc, #188]	; (d467c <_GLOBAL__sub_I_SystemMode+0x190>)
   d45c0:	4630      	mov	r0, r6
   d45c2:	f003 fb7f 	bl	d7cc4 <__aeabi_atexit>
   d45c6:	4b2e      	ldr	r3, [pc, #184]	; (d4680 <_GLOBAL__sub_I_SystemMode+0x194>)
   d45c8:	9300      	str	r3, [sp, #0]
   d45ca:	f240 7229 	movw	r2, #1833	; 0x729
   d45ce:	4b2d      	ldr	r3, [pc, #180]	; (d4684 <_GLOBAL__sub_I_SystemMode+0x198>)
   d45d0:	492d      	ldr	r1, [pc, #180]	; (d4688 <_GLOBAL__sub_I_SystemMode+0x19c>)
   d45d2:	4620      	mov	r0, r4
   d45d4:	f000 fe18 	bl	d5208 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d45d8:	4b2c      	ldr	r3, [pc, #176]	; (d468c <_GLOBAL__sub_I_SystemMode+0x1a0>)
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d45da:	4a1c      	ldr	r2, [pc, #112]	; (d464c <_GLOBAL__sub_I_SystemMode+0x160>)
   d45dc:	492c      	ldr	r1, [pc, #176]	; (d4690 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d45de:	6023      	str	r3, [r4, #0]
   d45e0:	4620      	mov	r0, r4
   d45e2:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d45e6:	f003 fb6d 	bl	d7cc4 <__aeabi_atexit>
Adafruit_MQTT_Subscribe subData = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/ "); // put feed if any subscription needed
   d45ea:	462b      	mov	r3, r5
   d45ec:	4621      	mov	r1, r4
   d45ee:	4a29      	ldr	r2, [pc, #164]	; (d4694 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d45f0:	4829      	ldr	r0, [pc, #164]	; (d4698 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d45f2:	f000 fe30 	bl	d5256 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubBME = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_BME");
   d45f6:	462b      	mov	r3, r5
   d45f8:	4621      	mov	r1, r4
   d45fa:	4a28      	ldr	r2, [pc, #160]	; (d469c <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d45fc:	4828      	ldr	r0, [pc, #160]	; (d46a0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d45fe:	f000 fe25 	bl	d524c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubMQ9 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_MQ-9");
   d4602:	462b      	mov	r3, r5
   d4604:	4621      	mov	r1, r4
   d4606:	4a27      	ldr	r2, [pc, #156]	; (d46a4 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4608:	4827      	ldr	r0, [pc, #156]	; (d46a8 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d460a:	f000 fe1f 	bl	d524c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubAQ = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_AirQuality");
   d460e:	462b      	mov	r3, r5
   d4610:	4a26      	ldr	r2, [pc, #152]	; (d46ac <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d4612:	4827      	ldr	r0, [pc, #156]	; (d46b0 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d4614:	4621      	mov	r1, r4
   d4616:	f000 fe19 	bl	d524c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
unsigned long last;

/*    for Air Quality Sensor      */
AirQualitySensor senseAQ(A3);
   d461a:	2110      	movs	r1, #16
   d461c:	4825      	ldr	r0, [pc, #148]	; (d46b4 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d461e:	f001 fd0f 	bl	d6040 <_ZN16AirQualitySensorC1Ei>

/*    for NeoPixels       */
  #define PIXEL_PIN A1
  #define PIXEL_COUNT 2
  #define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixel(PIXEL_COUNT,PIXEL_PIN,PIXEL_TYPE);
   d4622:	2302      	movs	r3, #2
   d4624:	4619      	mov	r1, r3
   d4626:	2212      	movs	r2, #18
   d4628:	4823      	ldr	r0, [pc, #140]	; (d46b8 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d462a:	f000 fb36 	bl	d4c9a <_ZN17Adafruit_NeoPixelC1Ethh>
   d462e:	4a07      	ldr	r2, [pc, #28]	; (d464c <_GLOBAL__sub_I_SystemMode+0x160>)
   d4630:	4922      	ldr	r1, [pc, #136]	; (d46bc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4632:	4821      	ldr	r0, [pc, #132]	; (d46b8 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4634:	f003 fb46 	bl	d7cc4 <__aeabi_atexit>
int quality;
int AQvalue;
int qualityValue;

/*    for BME use     */
Adafruit_BME280 bme;
   d4638:	4821      	ldr	r0, [pc, #132]	; (d46c0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
}

void  enableButton() //ISR for switching the neopixels on or off
{
  pixelState = !pixelState;
   d463a:	b002      	add	sp, #8
   d463c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
int quality;
int AQvalue;
int qualityValue;

/*    for BME use     */
Adafruit_BME280 bme;
   d4640:	f000 b840 	b.w	d46c4 <_ZN15Adafruit_BME280C1Ev>
   d4644:	2003dd38 	.word	0x2003dd38
   d4648:	2003dcf4 	.word	0x2003dcf4
   d464c:	2003dcf0 	.word	0x2003dcf0
   d4650:	000d41a9 	.word	0x000d41a9
   d4654:	2003e338 	.word	0x2003e338
   d4658:	000d88c8 	.word	0x000d88c8
   d465c:	2003de64 	.word	0x2003de64
   d4660:	000d889c 	.word	0x000d889c
   d4664:	2003dcf8 	.word	0x2003dcf8
   d4668:	2003e364 	.word	0x2003e364
   d466c:	2003e2f4 	.word	0x2003e2f4
   d4670:	000d40f5 	.word	0x000d40f5
   d4674:	000d88a8 	.word	0x000d88a8
   d4678:	2003dd90 	.word	0x2003dd90
   d467c:	000d41b9 	.word	0x000d41b9
   d4680:	000d8b57 	.word	0x000d8b57
   d4684:	000d8b3b 	.word	0x000d8b3b
   d4688:	000d8b47 	.word	0x000d8b47
   d468c:	000d8c20 	.word	0x000d8c20
   d4690:	000d40f7 	.word	0x000d40f7
   d4694:	000d8b72 	.word	0x000d8b72
   d4698:	2003dd00 	.word	0x2003dd00
   d469c:	000d8b86 	.word	0x000d8b86
   d46a0:	2003e3b8 	.word	0x2003e3b8
   d46a4:	000d8ba9 	.word	0x000d8ba9
   d46a8:	2003e2e8 	.word	0x2003e2e8
   d46ac:	000d8bcd 	.word	0x000d8bcd
   d46b0:	2003e310 	.word	0x2003e310
   d46b4:	2003e31c 	.word	0x2003e31c
   d46b8:	2003e3a4 	.word	0x2003e3a4
   d46bc:	000d4bfb 	.word	0x000d4bfb
   d46c0:	2003dd4c 	.word	0x2003dd4c

000d46c4 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d46c4:	22ff      	movs	r2, #255	; 0xff
   d46c6:	7402      	strb	r2, [r0, #16]
   d46c8:	7442      	strb	r2, [r0, #17]
   d46ca:	7482      	strb	r2, [r0, #18]
   d46cc:	74c2      	strb	r2, [r0, #19]
{ }
   d46ce:	4770      	bx	lr

000d46d0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d46d0:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d46d2:	4d09      	ldr	r5, [pc, #36]	; (d46f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d46d4:	6829      	ldr	r1, [r5, #0]
   d46d6:	f011 0401 	ands.w	r4, r1, #1
   d46da:	d10a      	bne.n	d46f2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d46dc:	4628      	mov	r0, r5
   d46de:	f7ff fceb 	bl	d40b8 <__cxa_guard_acquire>
   d46e2:	b130      	cbz	r0, d46f2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d46e4:	4621      	mov	r1, r4
   d46e6:	4805      	ldr	r0, [pc, #20]	; (d46fc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d46e8:	f002 f928 	bl	d693c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d46ec:	4628      	mov	r0, r5
   d46ee:	f7ff fce8 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d46f2:	4802      	ldr	r0, [pc, #8]	; (d46fc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d46f4:	bd38      	pop	{r3, r4, r5, pc}
   d46f6:	bf00      	nop
   d46f8:	2003dcf4 	.word	0x2003dcf4
   d46fc:	2003dcf8 	.word	0x2003dcf8

000d4700 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4704:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4708:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d470a:	4605      	mov	r5, r0
   d470c:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d470e:	d106      	bne.n	d471e <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4710:	f7ff ffde 	bl	d46d0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4714:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d471a:	f002 b9b3 	b.w	d6a84 <_ZN8SPIClass8transferEh>
   d471e:	2607      	movs	r6, #7
   d4720:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4722:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4726:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d472a:	2100      	movs	r1, #0
   d472c:	b280      	uxth	r0, r0
   d472e:	f003 fa46 	bl	d7bbe <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4732:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4736:	fa08 f106 	lsl.w	r1, r8, r6
   d473a:	4039      	ands	r1, r7
   d473c:	b280      	uxth	r0, r0
   d473e:	f003 fa3e 	bl	d7bbe <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4742:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4746:	2101      	movs	r1, #1
   d4748:	b280      	uxth	r0, r0
   d474a:	f003 fa38 	bl	d7bbe <digitalWrite>
        if (digitalRead(_miso))
   d474e:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4752:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4754:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4756:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4758:	f003 fa4a 	bl	d7bf0 <digitalRead>
   d475c:	b108      	cbz	r0, d4762 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d475e:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4762:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4766:	d2de      	bcs.n	d4726 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4768:	4620      	mov	r0, r4
   d476a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d476e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d476e:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4770:	f7ff ffae 	bl	d46d0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4774:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4778:	f002 b8fb 	b.w	d6972 <_ZN8SPIClass14endTransactionEv>

000d477c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d477c:	b510      	push	{r4, lr}
   d477e:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4780:	f7ff ffa6 	bl	d46d0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4784:	4621      	mov	r1, r4
    }
   d4786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d478a:	f002 b90b 	b.w	d69a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d4790 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4790:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4792:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4796:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4798:	b085      	sub	sp, #20
   d479a:	4604      	mov	r4, r0
   d479c:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d479e:	d11d      	bne.n	d47dc <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d47a0:	7901      	ldrb	r1, [r0, #4]
   d47a2:	6800      	ldr	r0, [r0, #0]
   d47a4:	f002 fd4b 	bl	d723e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d47a8:	6820      	ldr	r0, [r4, #0]
   d47aa:	6803      	ldr	r3, [r0, #0]
   d47ac:	4629      	mov	r1, r5
   d47ae:	689b      	ldr	r3, [r3, #8]
   d47b0:	4798      	blx	r3
        _wire -> endTransmission();
   d47b2:	6820      	ldr	r0, [r4, #0]
   d47b4:	f002 fd4e 	bl	d7254 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d47b8:	2202      	movs	r2, #2
   d47ba:	7921      	ldrb	r1, [r4, #4]
   d47bc:	6820      	ldr	r0, [r4, #0]
   d47be:	f002 fd3b 	bl	d7238 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d47c2:	6820      	ldr	r0, [r4, #0]
   d47c4:	6803      	ldr	r3, [r0, #0]
   d47c6:	695b      	ldr	r3, [r3, #20]
   d47c8:	4798      	blx	r3
   d47ca:	4605      	mov	r5, r0
   d47cc:	6820      	ldr	r0, [r4, #0]
   d47ce:	6803      	ldr	r3, [r0, #0]
   d47d0:	695b      	ldr	r3, [r3, #20]
   d47d2:	4798      	blx	r3
   d47d4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d47d8:	b285      	uxth	r5, r0
   d47da:	e035      	b.n	d4848 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d47dc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d47e0:	3301      	adds	r3, #1
   d47e2:	d10e      	bne.n	d4802 <_ZN15Adafruit_BME2806read16Eh+0x72>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d47e4:	4b1a      	ldr	r3, [pc, #104]	; (d4850 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d47e6:	4a1b      	ldr	r2, [pc, #108]	; (d4854 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d47e8:	9300      	str	r3, [sp, #0]
   d47ea:	9202      	str	r2, [sp, #8]
   d47ec:	2300      	movs	r3, #0
   d47ee:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d47f0:	4668      	mov	r0, sp
   d47f2:	f88d 3004 	strb.w	r3, [sp, #4]
   d47f6:	f88d 200c 	strb.w	r2, [sp, #12]
   d47fa:	f88d 300d 	strb.w	r3, [sp, #13]
   d47fe:	f7ff ffbd 	bl	d477c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4802:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4806:	2100      	movs	r1, #0
   d4808:	b280      	uxth	r0, r0
   d480a:	f003 f9d8 	bl	d7bbe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d480e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4812:	4620      	mov	r0, r4
   d4814:	f7ff ff74 	bl	d4700 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4818:	2100      	movs	r1, #0
   d481a:	4620      	mov	r0, r4
   d481c:	f7ff ff70 	bl	d4700 <_ZN15Adafruit_BME2807spixferEh>
   d4820:	2100      	movs	r1, #0
   d4822:	4605      	mov	r5, r0
   d4824:	4620      	mov	r0, r4
   d4826:	f7ff ff6b 	bl	d4700 <_ZN15Adafruit_BME2807spixferEh>
   d482a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d482e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4830:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4834:	2101      	movs	r1, #1
   d4836:	b280      	uxth	r0, r0
   d4838:	f003 f9c1 	bl	d7bbe <digitalWrite>
        if (_sck == -1)
   d483c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4840:	3301      	adds	r3, #1
   d4842:	d101      	bne.n	d4848 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4844:	f7ff ff93 	bl	d476e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4848:	4628      	mov	r0, r5
   d484a:	b005      	add	sp, #20
   d484c:	bd30      	pop	{r4, r5, pc}
   d484e:	bf00      	nop
   d4850:	000d889c 	.word	0x000d889c
   d4854:	0007a120 	.word	0x0007a120

000d4858 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4858:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d485a:	f7ff ff99 	bl	d4790 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d485e:	ba40      	rev16	r0, r0
}
   d4860:	b280      	uxth	r0, r0
   d4862:	bd08      	pop	{r3, pc}

000d4864 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4864:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4866:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d486a:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d486c:	b085      	sub	sp, #20
   d486e:	4604      	mov	r4, r0
   d4870:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4872:	d116      	bne.n	d48a2 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4874:	7901      	ldrb	r1, [r0, #4]
   d4876:	6800      	ldr	r0, [r0, #0]
   d4878:	f002 fce1 	bl	d723e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d487c:	6820      	ldr	r0, [r4, #0]
   d487e:	6803      	ldr	r3, [r0, #0]
   d4880:	4629      	mov	r1, r5
   d4882:	689b      	ldr	r3, [r3, #8]
   d4884:	4798      	blx	r3
        _wire -> endTransmission();
   d4886:	6820      	ldr	r0, [r4, #0]
   d4888:	f002 fce4 	bl	d7254 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d488c:	2201      	movs	r2, #1
   d488e:	7921      	ldrb	r1, [r4, #4]
   d4890:	6820      	ldr	r0, [r4, #0]
   d4892:	f002 fcd1 	bl	d7238 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4896:	6820      	ldr	r0, [r4, #0]
   d4898:	6803      	ldr	r3, [r0, #0]
   d489a:	695b      	ldr	r3, [r3, #20]
   d489c:	4798      	blx	r3
   d489e:	b2c5      	uxtb	r5, r0
   d48a0:	e02e      	b.n	d4900 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d48a2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d48a6:	3301      	adds	r3, #1
   d48a8:	d10e      	bne.n	d48c8 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d48aa:	4b17      	ldr	r3, [pc, #92]	; (d4908 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d48ac:	4a17      	ldr	r2, [pc, #92]	; (d490c <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d48ae:	9300      	str	r3, [sp, #0]
   d48b0:	9202      	str	r2, [sp, #8]
   d48b2:	2300      	movs	r3, #0
   d48b4:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d48b6:	4668      	mov	r0, sp
   d48b8:	f88d 3004 	strb.w	r3, [sp, #4]
   d48bc:	f88d 200c 	strb.w	r2, [sp, #12]
   d48c0:	f88d 300d 	strb.w	r3, [sp, #13]
   d48c4:	f7ff ff5a 	bl	d477c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d48c8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d48cc:	2100      	movs	r1, #0
   d48ce:	b280      	uxth	r0, r0
   d48d0:	f003 f975 	bl	d7bbe <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d48d4:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d48d8:	4620      	mov	r0, r4
   d48da:	f7ff ff11 	bl	d4700 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d48de:	2100      	movs	r1, #0
   d48e0:	4620      	mov	r0, r4
   d48e2:	f7ff ff0d 	bl	d4700 <_ZN15Adafruit_BME2807spixferEh>
   d48e6:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d48e8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d48ec:	2101      	movs	r1, #1
   d48ee:	b280      	uxth	r0, r0
   d48f0:	f003 f965 	bl	d7bbe <digitalWrite>
        if (_sck == -1)
   d48f4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d48f8:	3301      	adds	r3, #1
   d48fa:	d101      	bne.n	d4900 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d48fc:	f7ff ff37 	bl	d476e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4900:	4628      	mov	r0, r5
   d4902:	b005      	add	sp, #20
   d4904:	bd30      	pop	{r4, r5, pc}
   d4906:	bf00      	nop
   d4908:	000d889c 	.word	0x000d889c
   d490c:	0007a120 	.word	0x0007a120

000d4910 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4910:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4912:	21f3      	movs	r1, #243	; 0xf3
   d4914:	f7ff ffa6 	bl	d4864 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4918:	f000 0001 	and.w	r0, r0, #1
   d491c:	bd08      	pop	{r3, pc}

000d491e <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d491e:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4920:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4922:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4924:	f7ff ff98 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4928:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d492a:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d492c:	4620      	mov	r0, r4
   d492e:	f7ff ff93 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
   d4932:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4934:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4936:	4620      	mov	r0, r4
   d4938:	f7ff ff8e 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d493c:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d493e:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4940:	4620      	mov	r0, r4
   d4942:	f7ff ff89 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4946:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4948:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d494a:	4620      	mov	r0, r4
   d494c:	f7ff ff84 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
   d4950:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4952:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4954:	4620      	mov	r0, r4
   d4956:	f7ff ff7f 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
   d495a:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d495c:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d495e:	4620      	mov	r0, r4
   d4960:	f7ff ff7a 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
   d4964:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4966:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4968:	4620      	mov	r0, r4
   d496a:	f7ff ff75 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
   d496e:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4970:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4972:	4620      	mov	r0, r4
   d4974:	f7ff ff70 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
   d4978:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d497a:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d497c:	4620      	mov	r0, r4
   d497e:	f7ff ff6b 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
   d4982:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4984:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4986:	4620      	mov	r0, r4
   d4988:	f7ff ff66 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
   d498c:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d498e:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff ff61 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4996:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4998:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d499a:	4620      	mov	r0, r4
   d499c:	f7ff ff62 	bl	d4864 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d49a0:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d49a2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d49a6:	4620      	mov	r0, r4
   d49a8:	f7ff ff56 	bl	d4858 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d49ac:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d49ae:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d49b0:	4620      	mov	r0, r4
   d49b2:	f7ff ff57 	bl	d4864 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d49b6:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d49b8:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d49bc:	4620      	mov	r0, r4
   d49be:	f7ff ff51 	bl	d4864 <_ZN15Adafruit_BME2805read8Eh>
   d49c2:	21e5      	movs	r1, #229	; 0xe5
   d49c4:	4605      	mov	r5, r0
   d49c6:	4620      	mov	r0, r4
   d49c8:	f7ff ff4c 	bl	d4864 <_ZN15Adafruit_BME2805read8Eh>
   d49cc:	f000 000f 	and.w	r0, r0, #15
   d49d0:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d49d4:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d49d6:	21e6      	movs	r1, #230	; 0xe6
   d49d8:	4620      	mov	r0, r4
   d49da:	f7ff ff43 	bl	d4864 <_ZN15Adafruit_BME2805read8Eh>
   d49de:	21e5      	movs	r1, #229	; 0xe5
   d49e0:	4605      	mov	r5, r0
   d49e2:	4620      	mov	r0, r4
   d49e4:	f7ff ff3e 	bl	d4864 <_ZN15Adafruit_BME2805read8Eh>
   d49e8:	1100      	asrs	r0, r0, #4
   d49ea:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d49ee:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d49f0:	21e7      	movs	r1, #231	; 0xe7
   d49f2:	4620      	mov	r0, r4
   d49f4:	f7ff ff36 	bl	d4864 <_ZN15Adafruit_BME2805read8Eh>
   d49f8:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d49fc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4a00 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4a00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4a02:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4a06:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4a08:	4604      	mov	r4, r0
   d4a0a:	460e      	mov	r6, r1
   d4a0c:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4a0e:	d111      	bne.n	d4a34 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4a10:	7901      	ldrb	r1, [r0, #4]
   d4a12:	6800      	ldr	r0, [r0, #0]
   d4a14:	f002 fc13 	bl	d723e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4a18:	6820      	ldr	r0, [r4, #0]
   d4a1a:	6803      	ldr	r3, [r0, #0]
   d4a1c:	4631      	mov	r1, r6
   d4a1e:	689b      	ldr	r3, [r3, #8]
   d4a20:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4a22:	6820      	ldr	r0, [r4, #0]
   d4a24:	6803      	ldr	r3, [r0, #0]
   d4a26:	4629      	mov	r1, r5
   d4a28:	689b      	ldr	r3, [r3, #8]
   d4a2a:	4798      	blx	r3
        _wire -> endTransmission();
   d4a2c:	6820      	ldr	r0, [r4, #0]
   d4a2e:	f002 fc11 	bl	d7254 <_ZN7TwoWire15endTransmissionEv>
   d4a32:	e02d      	b.n	d4a90 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4a34:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4a38:	3301      	adds	r3, #1
   d4a3a:	d10e      	bne.n	d4a5a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4a3c:	4b15      	ldr	r3, [pc, #84]	; (d4a94 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4a3e:	4a16      	ldr	r2, [pc, #88]	; (d4a98 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4a40:	9300      	str	r3, [sp, #0]
   d4a42:	9202      	str	r2, [sp, #8]
   d4a44:	2300      	movs	r3, #0
   d4a46:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4a48:	4668      	mov	r0, sp
   d4a4a:	f88d 3004 	strb.w	r3, [sp, #4]
   d4a4e:	f88d 200c 	strb.w	r2, [sp, #12]
   d4a52:	f88d 300d 	strb.w	r3, [sp, #13]
   d4a56:	f7ff fe91 	bl	d477c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4a5a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a5e:	2100      	movs	r1, #0
   d4a60:	b280      	uxth	r0, r0
   d4a62:	f003 f8ac 	bl	d7bbe <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4a66:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	f7ff fe48 	bl	d4700 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4a70:	4629      	mov	r1, r5
   d4a72:	4620      	mov	r0, r4
   d4a74:	f7ff fe44 	bl	d4700 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4a78:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a7c:	2101      	movs	r1, #1
   d4a7e:	b280      	uxth	r0, r0
   d4a80:	f003 f89d 	bl	d7bbe <digitalWrite>
    if (_sck == -1)
   d4a84:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4a88:	3301      	adds	r3, #1
   d4a8a:	d101      	bne.n	d4a90 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4a8c:	f7ff fe6f 	bl	d476e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d4a90:	b004      	add	sp, #16
   d4a92:	bd70      	pop	{r4, r5, r6, pc}
   d4a94:	000d889c 	.word	0x000d889c
   d4a98:	0007a120 	.word	0x0007a120

000d4a9c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4a9e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4aa2:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4aa6:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4aaa:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4aae:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4ab2:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4ab6:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4aba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4abe:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4ac2:	f366 1347 	bfi	r3, r6, #5, #3
   d4ac6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4aca:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4ace:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4ad2:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4ad4:	f367 0302 	bfi	r3, r7, #0, #3
   d4ad8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4adc:	f006 0207 	and.w	r2, r6, #7
   d4ae0:	21f2      	movs	r1, #242	; 0xf2
   d4ae2:	f7ff ff8d 	bl	d4a00 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4ae6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4aea:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4aee:	f002 0107 	and.w	r1, r2, #7
   d4af2:	009b      	lsls	r3, r3, #2
   d4af4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4af8:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4afc:	4620      	mov	r0, r4
   d4afe:	21f5      	movs	r1, #245	; 0xf5
   d4b00:	f7ff ff7e 	bl	d4a00 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4b04:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4b08:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4b0c:	f002 0107 	and.w	r1, r2, #7
   d4b10:	009b      	lsls	r3, r3, #2
   d4b12:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4b16:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4b1a:	4620      	mov	r0, r4
   d4b1c:	21f4      	movs	r1, #244	; 0xf4
}
   d4b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4b22:	f7ff bf6d 	b.w	d4a00 <_ZN15Adafruit_BME2806write8Ehh>

000d4b26 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4b26:	b530      	push	{r4, r5, lr}
   d4b28:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4b2a:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4b2e:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4b30:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4b32:	d103      	bne.n	d4b3c <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4b34:	6820      	ldr	r0, [r4, #0]
   d4b36:	f002 fb4b 	bl	d71d0 <_ZN7TwoWire5beginEv>
   d4b3a:	e022      	b.n	d4b82 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4b3c:	2101      	movs	r1, #1
   d4b3e:	b280      	uxth	r0, r0
   d4b40:	f003 f83d 	bl	d7bbe <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4b44:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4b48:	2101      	movs	r1, #1
   d4b4a:	b280      	uxth	r0, r0
   d4b4c:	f003 f826 	bl	d7b9c <pinMode>
        if (_sck == -1) {
   d4b50:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4b54:	1c43      	adds	r3, r0, #1
   d4b56:	d104      	bne.n	d4b62 <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4b58:	f7ff fdba 	bl	d46d0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4b5c:	f001 fef8 	bl	d6950 <_ZN8SPIClass5beginEv>
   d4b60:	e00f      	b.n	d4b82 <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4b62:	2101      	movs	r1, #1
   d4b64:	b280      	uxth	r0, r0
   d4b66:	f003 f819 	bl	d7b9c <pinMode>
            pinMode(_mosi, OUTPUT);
   d4b6a:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4b6e:	2101      	movs	r1, #1
   d4b70:	b280      	uxth	r0, r0
   d4b72:	f003 f813 	bl	d7b9c <pinMode>
            pinMode(_miso, INPUT);
   d4b76:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4b7a:	2100      	movs	r1, #0
   d4b7c:	b280      	uxth	r0, r0
   d4b7e:	f003 f80d 	bl	d7b9c <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4b82:	21d0      	movs	r1, #208	; 0xd0
   d4b84:	4620      	mov	r0, r4
   d4b86:	f7ff fe6d 	bl	d4864 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4b8a:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4b8c:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4b8e:	d120      	bne.n	d4bd2 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4b90:	4620      	mov	r0, r4
   d4b92:	22b6      	movs	r2, #182	; 0xb6
   d4b94:	21e0      	movs	r1, #224	; 0xe0
   d4b96:	f7ff ff33 	bl	d4a00 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4b9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4b9e:	f002 f86f 	bl	d6c80 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4ba2:	4620      	mov	r0, r4
   d4ba4:	f7ff feb4 	bl	d4910 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4ba8:	4605      	mov	r5, r0
   d4baa:	b108      	cbz	r0, d4bb0 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4bac:	2064      	movs	r0, #100	; 0x64
   d4bae:	e7f6      	b.n	d4b9e <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	f7ff feb4 	bl	d491e <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4bb6:	2305      	movs	r3, #5
   d4bb8:	9300      	str	r3, [sp, #0]
   d4bba:	461a      	mov	r2, r3
   d4bbc:	2103      	movs	r1, #3
   d4bbe:	4620      	mov	r0, r4
   d4bc0:	9502      	str	r5, [sp, #8]
   d4bc2:	9501      	str	r5, [sp, #4]
   d4bc4:	f7ff ff6a 	bl	d4a9c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4bc8:	2064      	movs	r0, #100	; 0x64
   d4bca:	f002 f859 	bl	d6c80 <delay>
   d4bce:	2001      	movs	r0, #1
   d4bd0:	e000      	b.n	d4bd4 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4bd2:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4bd4:	b005      	add	sp, #20
   d4bd6:	bd30      	pop	{r4, r5, pc}

000d4bd8 <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4bd8:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d4bda:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4bdc:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d4bde:	f003 f84b 	bl	d7c78 <_Z19__fetch_global_Wirev>
   d4be2:	6020      	str	r0, [r4, #0]
	return init();
   d4be4:	4620      	mov	r0, r4
}
   d4be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d4bea:	f7ff bf9c 	b.w	d4b26 <_ZN15Adafruit_BME2804initEv>

000d4bee <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4bee:	f001 bba5 	b.w	d633c <HAL_Pin_Map>

000d4bf2 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4bf2:	f001 bc53 	b.w	d649c <HAL_Timer_Get_Micro_Seconds>

000d4bf6 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4bf6:	f001 bc49 	b.w	d648c <HAL_Delay_Microseconds>

000d4bfa <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4bfa:	b510      	push	{r4, lr}
   d4bfc:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4bfe:	68c0      	ldr	r0, [r0, #12]
   d4c00:	b108      	cbz	r0, d4c06 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4c02:	f001 fe3f 	bl	d6884 <free>
  if (begun) pinMode(pin, INPUT);
   d4c06:	7823      	ldrb	r3, [r4, #0]
   d4c08:	b11b      	cbz	r3, d4c12 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4c0a:	2100      	movs	r1, #0
   d4c0c:	79e0      	ldrb	r0, [r4, #7]
   d4c0e:	f002 ffc5 	bl	d7b9c <pinMode>
}
   d4c12:	4620      	mov	r0, r4
   d4c14:	bd10      	pop	{r4, pc}

000d4c16 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4c16:	b538      	push	{r3, r4, r5, lr}
   d4c18:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4c1a:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4c1c:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4c1e:	b108      	cbz	r0, d4c24 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4c20:	f001 fe30 	bl	d6884 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4c24:	79a3      	ldrb	r3, [r4, #6]
   d4c26:	2b06      	cmp	r3, #6
   d4c28:	bf0c      	ite	eq
   d4c2a:	2004      	moveq	r0, #4
   d4c2c:	2003      	movne	r0, #3
   d4c2e:	fb10 f005 	smulbb	r0, r0, r5
   d4c32:	b280      	uxth	r0, r0
   d4c34:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4c36:	f001 fe1d 	bl	d6874 <malloc>
   d4c3a:	60e0      	str	r0, [r4, #12]
   d4c3c:	b128      	cbz	r0, d4c4a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4c3e:	88a2      	ldrh	r2, [r4, #4]
   d4c40:	2100      	movs	r1, #0
   d4c42:	f003 fddc 	bl	d87fe <memset>
    numLEDs = n;
   d4c46:	8065      	strh	r5, [r4, #2]
   d4c48:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4c4a:	80a0      	strh	r0, [r4, #4]
   d4c4c:	8060      	strh	r0, [r4, #2]
   d4c4e:	bd38      	pop	{r3, r4, r5, pc}

000d4c50 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d4c50:	b510      	push	{r4, lr}
   d4c52:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4c54:	2101      	movs	r1, #1
   d4c56:	79c0      	ldrb	r0, [r0, #7]
   d4c58:	f002 ffa0 	bl	d7b9c <pinMode>
  digitalWrite(pin, LOW);
   d4c5c:	2100      	movs	r1, #0
   d4c5e:	79e0      	ldrb	r0, [r4, #7]
   d4c60:	f002 ffad 	bl	d7bbe <digitalWrite>
  begun = true;
   d4c64:	2301      	movs	r3, #1
   d4c66:	7023      	strb	r3, [r4, #0]
   d4c68:	bd10      	pop	{r4, pc}

000d4c6a <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4c6a:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d4c6c:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4c6e:	4605      	mov	r5, r0
   d4c70:	460c      	mov	r4, r1
    if (begun) {
   d4c72:	b11b      	cbz	r3, d4c7c <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4c74:	2100      	movs	r1, #0
   d4c76:	79c0      	ldrb	r0, [r0, #7]
   d4c78:	f002 ff90 	bl	d7b9c <pinMode>
    }
    pin = p;
    if (begun) {
   d4c7c:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d4c7e:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4c80:	b153      	cbz	r3, d4c98 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d4c82:	b2a4      	uxth	r4, r4
   d4c84:	4620      	mov	r0, r4
   d4c86:	2101      	movs	r1, #1
   d4c88:	f002 ff88 	bl	d7b9c <pinMode>
        digitalWrite(p, LOW);
   d4c8c:	4620      	mov	r0, r4
   d4c8e:	2100      	movs	r1, #0
    }
}
   d4c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d4c94:	f002 bf93 	b.w	d7bbe <digitalWrite>
   d4c98:	bd38      	pop	{r3, r4, r5, pc}

000d4c9a <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4c9a:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4c9c:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4c9e:	4604      	mov	r4, r0
   d4ca0:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4ca2:	7183      	strb	r3, [r0, #6]
   d4ca4:	7005      	strb	r5, [r0, #0]
   d4ca6:	7205      	strb	r5, [r0, #8]
   d4ca8:	60c5      	str	r5, [r0, #12]
   d4caa:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d4cac:	f7ff ffb3 	bl	d4c16 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4cb0:	4620      	mov	r0, r4
   d4cb2:	4631      	mov	r1, r6
   d4cb4:	f7ff ffd9 	bl	d4c6a <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4cb8:	4620      	mov	r0, r4
   d4cba:	bd70      	pop	{r4, r5, r6, pc}

000d4cbc <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4cbc:	68c3      	ldr	r3, [r0, #12]
   d4cbe:	2b00      	cmp	r3, #0
   d4cc0:	f000 818b 	beq.w	d4fda <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d4cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4cc8:	7983      	ldrb	r3, [r0, #6]
   d4cca:	3b02      	subs	r3, #2
   d4ccc:	b2db      	uxtb	r3, r3
   d4cce:	2b04      	cmp	r3, #4
   d4cd0:	bf9c      	itt	ls
   d4cd2:	4ac4      	ldrls	r2, [pc, #784]	; (d4fe4 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d4cd4:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4cd8:	b087      	sub	sp, #28
   d4cda:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4cdc:	bf88      	it	hi
   d4cde:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4ce0:	f7ff ff87 	bl	d4bf2 <micros>
   d4ce4:	692b      	ldr	r3, [r5, #16]
   d4ce6:	1ac0      	subs	r0, r0, r3
   d4ce8:	42a0      	cmp	r0, r4
   d4cea:	d3f9      	bcc.n	d4ce0 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4cec:	4abe      	ldr	r2, [pc, #760]	; (d4fe8 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4cee:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4cf0:	ca07      	ldmia	r2, {r0, r1, r2}
   d4cf2:	ac06      	add	r4, sp, #24
   d4cf4:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4cf8:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4cfa:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4cfc:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4d00:	3304      	adds	r3, #4
   d4d02:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d04:	b922      	cbnz	r2, d4d10 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d06:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4d0a:	2b00      	cmp	r3, #0
   d4d0c:	f2c0 8155 	blt.w	d4fba <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d4d10:	9c04      	ldr	r4, [sp, #16]
   d4d12:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d16:	b923      	cbnz	r3, d4d22 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d18:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4d1c:	2b00      	cmp	r3, #0
   d4d1e:	f2c0 813c 	blt.w	d4f9a <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d4d22:	9c05      	ldr	r4, [sp, #20]
   d4d24:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d28:	b91b      	cbnz	r3, d4d32 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4d2a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4d2e:	2b00      	cmp	r3, #0
   d4d30:	db6e      	blt.n	d4e10 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d32:	4bae      	ldr	r3, [pc, #696]	; (d4fec <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d4d34:	79ea      	ldrb	r2, [r5, #7]
   d4d36:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4d38:	4cad      	ldr	r4, [pc, #692]	; (d4ff0 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4d3a:	49ae      	ldr	r1, [pc, #696]	; (d4ff4 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4d3c:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d3e:	0112      	lsls	r2, r2, #4
   d4d40:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4d42:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d46:	785b      	ldrb	r3, [r3, #1]
   d4d48:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4d4a:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4d4c:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d4e:	f003 031f 	and.w	r3, r3, #31
   d4d52:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4d56:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4d58:	433a      	orrs	r2, r7
   d4d5a:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d4d5c:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4d5e:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4d60:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4d64:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4d68:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4d6a:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4d6c:	2800      	cmp	r0, #0
   d4d6e:	d044      	beq.n	d4dfa <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d4d70:	46cc      	mov	ip, r9
   d4d72:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4d74:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d4d78:	f81c eb01 	ldrb.w	lr, [ip], #1
   d4d7c:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4d7e:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4d80:	6863      	ldr	r3, [r4, #4]
   d4d82:	1a9b      	subs	r3, r3, r2
   d4d84:	2b46      	cmp	r3, #70	; 0x46
   d4d86:	d9fb      	bls.n	d4d80 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d4d88:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d4d8c:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4d90:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4d94:	ea43 0307 	orr.w	r3, r3, r7
   d4d98:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4d9c:	d02f      	beq.n	d4dfe <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4d9e:	6863      	ldr	r3, [r4, #4]
   d4da0:	1a9b      	subs	r3, r3, r2
   d4da2:	2b28      	cmp	r3, #40	; 0x28
   d4da4:	d9fb      	bls.n	d4d9e <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4da6:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4daa:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4dac:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4db0:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4db4:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4db8:	d1e2      	bne.n	d4d80 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4dba:	ebc9 030c 	rsb	r3, r9, ip
   d4dbe:	88a8      	ldrh	r0, [r5, #4]
   d4dc0:	b29b      	uxth	r3, r3
   d4dc2:	4298      	cmp	r0, r3
   d4dc4:	d8d8      	bhi.n	d4d78 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d4dc6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d4dca:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4dce:	6863      	ldr	r3, [r4, #4]
   d4dd0:	1a9b      	subs	r3, r3, r2
   d4dd2:	2b46      	cmp	r3, #70	; 0x46
   d4dd4:	d9fb      	bls.n	d4dce <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4dd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4dda:	ebca 0a03 	rsb	sl, sl, r3
   d4dde:	4582      	cmp	sl, r0
   d4de0:	f0c0 80d5 	bcc.w	d4f8e <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4de4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4de8:	f7ff ff05 	bl	d4bf6 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4dec:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4dee:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4df2:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4df6:	2800      	cmp	r0, #0
   d4df8:	d1ba      	bne.n	d4d70 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d4dfa:	4602      	mov	r2, r0
   d4dfc:	e7e7      	b.n	d4dce <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4dfe:	6863      	ldr	r3, [r4, #4]
   d4e00:	1a9b      	subs	r3, r3, r2
   d4e02:	2b11      	cmp	r3, #17
   d4e04:	d8cf      	bhi.n	d4da6 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d4e06:	6863      	ldr	r3, [r4, #4]
   d4e08:	1a9b      	subs	r3, r3, r2
   d4e0a:	2b11      	cmp	r3, #17
   d4e0c:	d9f7      	bls.n	d4dfe <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d4e0e:	e7ca      	b.n	d4da6 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e10:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e14:	2b00      	cmp	r3, #0
   d4e16:	da8c      	bge.n	d4d32 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e18:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e1c:	2b00      	cmp	r3, #0
   d4e1e:	da88      	bge.n	d4d32 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4e20:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e24:	2b00      	cmp	r3, #0
   d4e26:	da84      	bge.n	d4d32 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4e28:	9801      	ldr	r0, [sp, #4]
   d4e2a:	f001 fd23 	bl	d6874 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4e2e:	2800      	cmp	r0, #0
   d4e30:	f43f af7f 	beq.w	d4d32 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4e34:	88ab      	ldrh	r3, [r5, #4]
   d4e36:	2b00      	cmp	r3, #0
   d4e38:	f000 80d0 	beq.w	d4fdc <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d4e3c:	2700      	movs	r7, #0
   d4e3e:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4e40:	4e6d      	ldr	r6, [pc, #436]	; (d4ff8 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d4e42:	496e      	ldr	r1, [pc, #440]	; (d4ffc <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d4e44:	e000      	b.n	d4e48 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d4e46:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4e48:	68ea      	ldr	r2, [r5, #12]
   d4e4a:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4e4c:	f103 0e01 	add.w	lr, r3, #1
   d4e50:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4e54:	bf14      	ite	ne
   d4e56:	46b0      	movne	r8, r6
   d4e58:	4688      	moveq	r8, r1
   d4e5a:	fa1f fe8e 	uxth.w	lr, lr
   d4e5e:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4e62:	bf14      	ite	ne
   d4e64:	46b1      	movne	r9, r6
   d4e66:	4689      	moveq	r9, r1
   d4e68:	f012 0f20 	tst.w	r2, #32
   d4e6c:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4e70:	bf18      	it	ne
   d4e72:	46b2      	movne	sl, r6
   d4e74:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d4e78:	bf08      	it	eq
   d4e7a:	468a      	moveq	sl, r1
   d4e7c:	f103 0802 	add.w	r8, r3, #2
   d4e80:	f012 0f10 	tst.w	r2, #16
   d4e84:	f103 0e03 	add.w	lr, r3, #3
   d4e88:	bf14      	ite	ne
   d4e8a:	46b4      	movne	ip, r6
   d4e8c:	468c      	moveq	ip, r1
   d4e8e:	fa1f f888 	uxth.w	r8, r8
   d4e92:	f012 0f08 	tst.w	r2, #8
   d4e96:	fa1f fe8e 	uxth.w	lr, lr
   d4e9a:	f103 0904 	add.w	r9, r3, #4
   d4e9e:	fa1f f989 	uxth.w	r9, r9
   d4ea2:	bf14      	ite	ne
   d4ea4:	46b3      	movne	fp, r6
   d4ea6:	468b      	moveq	fp, r1
   d4ea8:	f012 0f04 	tst.w	r2, #4
   d4eac:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4eb0:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d4eb4:	bf14      	ite	ne
   d4eb6:	46b2      	movne	sl, r6
   d4eb8:	468a      	moveq	sl, r1
   d4eba:	f103 0805 	add.w	r8, r3, #5
   d4ebe:	f012 0f02 	tst.w	r2, #2
   d4ec2:	f103 0c06 	add.w	ip, r3, #6
   d4ec6:	f103 0e07 	add.w	lr, r3, #7
   d4eca:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d4ece:	fa1f fe8e 	uxth.w	lr, lr
   d4ed2:	bf14      	ite	ne
   d4ed4:	46b1      	movne	r9, r6
   d4ed6:	4689      	moveq	r9, r1
   d4ed8:	fa1f f888 	uxth.w	r8, r8
   d4edc:	f012 0f01 	tst.w	r2, #1
   d4ee0:	fa1f fc8c 	uxth.w	ip, ip
   d4ee4:	bf14      	ite	ne
   d4ee6:	4632      	movne	r2, r6
   d4ee8:	460a      	moveq	r2, r1
   d4eea:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4eee:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d4ef2:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4ef6:	3701      	adds	r7, #1
   d4ef8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4efc:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4efe:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4f02:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4f04:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4f06:	d89e      	bhi.n	d4e46 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4f08:	f103 0209 	add.w	r2, r3, #9
   d4f0c:	330a      	adds	r3, #10
   d4f0e:	b292      	uxth	r2, r2
   d4f10:	b29b      	uxth	r3, r3
   d4f12:	0052      	lsls	r2, r2, #1
   d4f14:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4f16:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4f18:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4f1c:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4f1e:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4f20:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4f22:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4f24:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4f26:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4f2a:	4e30      	ldr	r6, [pc, #192]	; (d4fec <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4f2c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4f30:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4f34:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4f38:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4f3c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4f40:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d4f44:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4f48:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4f4c:	79eb      	ldrb	r3, [r5, #7]
   d4f4e:	6831      	ldr	r1, [r6, #0]
   d4f50:	011b      	lsls	r3, r3, #4
   d4f52:	18ce      	adds	r6, r1, r3
   d4f54:	5cc9      	ldrb	r1, [r1, r3]
   d4f56:	7873      	ldrb	r3, [r6, #1]
   d4f58:	f003 031f 	and.w	r3, r3, #31
   d4f5c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4f60:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4f62:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d4f66:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d4f6a:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4f6e:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4f70:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4f74:	2b00      	cmp	r3, #0
   d4f76:	d0fb      	beq.n	d4f70 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4f78:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4f7a:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4f7e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d4f82:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4f86:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d4f8a:	f001 fc7b 	bl	d6884 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4f8e:	f7ff fe30 	bl	d4bf2 <micros>
   d4f92:	6128      	str	r0, [r5, #16]
}
   d4f94:	b007      	add	sp, #28
   d4f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f9a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4f9e:	2b00      	cmp	r3, #0
   d4fa0:	f6bf aebf 	bge.w	d4d22 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4fa4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4fa8:	2b00      	cmp	r3, #0
   d4faa:	f6bf aeba 	bge.w	d4d22 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4fae:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4fb2:	2b00      	cmp	r3, #0
   d4fb4:	f6bf aeb5 	bge.w	d4d22 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d4fb8:	e736      	b.n	d4e28 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4fba:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4fbe:	2b00      	cmp	r3, #0
   d4fc0:	f6bf aea6 	bge.w	d4d10 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4fc4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4fc8:	2b00      	cmp	r3, #0
   d4fca:	f6bf aea1 	bge.w	d4d10 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4fce:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4fd2:	2b00      	cmp	r3, #0
   d4fd4:	f6bf ae9c 	bge.w	d4d10 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d4fd8:	e726      	b.n	d4e28 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d4fda:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4fdc:	2304      	movs	r3, #4
   d4fde:	2202      	movs	r2, #2
   d4fe0:	e799      	b.n	d4f16 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d4fe2:	bf00      	nop
   d4fe4:	000d8c04 	.word	0x000d8c04
   d4fe8:	000d8bf8 	.word	0x000d8bf8
   d4fec:	2003e3c8 	.word	0x2003e3c8
   d4ff0:	e000edf0 	.word	0xe000edf0
   d4ff4:	e0001000 	.word	0xe0001000
   d4ff8:	ffff800d 	.word	0xffff800d
   d4ffc:	ffff8006 	.word	0xffff8006

000d5000 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d5000:	8843      	ldrh	r3, [r0, #2]
   d5002:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d5004:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d5006:	d945      	bls.n	d5094 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d5008:	7a05      	ldrb	r5, [r0, #8]
   d500a:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d500e:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d5012:	b2d6      	uxtb	r6, r2
   d5014:	b145      	cbz	r5, d5028 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d5016:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d5018:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d501a:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d501c:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d5020:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d5024:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d5028:	f890 c006 	ldrb.w	ip, [r0, #6]
   d502c:	68c7      	ldr	r7, [r0, #12]
   d502e:	f1bc 0f06 	cmp.w	ip, #6
   d5032:	bf0c      	ite	eq
   d5034:	2504      	moveq	r5, #4
   d5036:	2503      	movne	r5, #3
   d5038:	4369      	muls	r1, r5
   d503a:	f1bc 0f08 	cmp.w	ip, #8
   d503e:	eb07 0501 	add.w	r5, r7, r1
   d5042:	d824      	bhi.n	d508e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d5044:	f04f 0e01 	mov.w	lr, #1
   d5048:	fa0e fe0c 	lsl.w	lr, lr, ip
   d504c:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d5050:	d10c      	bne.n	d506c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d5052:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d5056:	d10d      	bne.n	d5074 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d5058:	f01e 0f10 	tst.w	lr, #16
   d505c:	d017      	beq.n	d508e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d505e:	2bff      	cmp	r3, #255	; 0xff
   d5060:	bf08      	it	eq
   d5062:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d5064:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d5066:	706e      	strb	r6, [r5, #1]
          *p = g;
   d5068:	70ac      	strb	r4, [r5, #2]
        } break;
   d506a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d506c:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d506e:	706b      	strb	r3, [r5, #1]
          *p = b;
   d5070:	70ae      	strb	r6, [r5, #2]
        } break;
   d5072:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d5074:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d5076:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d5078:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d507a:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d507c:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d507e:	b90b      	cbnz	r3, d5084 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d5080:	b2d2      	uxtb	r2, r2
   d5082:	e002      	b.n	d508a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d5084:	435a      	muls	r2, r3
   d5086:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d508a:	70ea      	strb	r2, [r5, #3]
        } break;
   d508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d508e:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d5090:	706c      	strb	r4, [r5, #1]
          *p = b;
   d5092:	70ae      	strb	r6, [r5, #2]
   d5094:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5096 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d5096:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
   d5098:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d509a:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d509c:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d509e:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d50a0:	d01e      	beq.n	d50e0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d50a2:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d50a4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d50a8:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d50aa:	d00c      	beq.n	d50c6 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d50ac:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d50ae:	bf1f      	itttt	ne
   d50b0:	0211      	lslne	r1, r2, #8
   d50b2:	f101 31ff 	addne.w	r1, r1, #4294967295
   d50b6:	fb91 f3f3 	sdivne	r3, r1, r3
   d50ba:	b29b      	uxthne	r3, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
   d50bc:	bf04      	itt	eq
   d50be:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d50c2:	fb91 f3f3 	sdiveq	r3, r1, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d50c6:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d50c8:	1b29      	subs	r1, r5, r4
   d50ca:	8886      	ldrh	r6, [r0, #4]
   d50cc:	b289      	uxth	r1, r1
   d50ce:	428e      	cmp	r6, r1
   d50d0:	d905      	bls.n	d50de <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
   d50d2:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
   d50d4:	4359      	muls	r1, r3
   d50d6:	1209      	asrs	r1, r1, #8
   d50d8:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d50dc:	e7f4      	b.n	d50c8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
   d50de:	7202      	strb	r2, [r0, #8]
   d50e0:	bd70      	pop	{r4, r5, r6, pc}

000d50e2 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d50e2:	8882      	ldrh	r2, [r0, #4]
   d50e4:	68c0      	ldr	r0, [r0, #12]
   d50e6:	2100      	movs	r1, #0
   d50e8:	f003 bb89 	b.w	d87fe <memset>

000d50ec <_GLOBAL__sub_I_PIN_MAP2>:
}
   d50ec:	b508      	push	{r3, lr}
   d50ee:	f001 f925 	bl	d633c <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d50f2:	f001 f923 	bl	d633c <HAL_Pin_Map>
   d50f6:	4b01      	ldr	r3, [pc, #4]	; (d50fc <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d50f8:	6018      	str	r0, [r3, #0]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	2003e3c8 	.word	0x2003e3c8

000d5100 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d5100:	f001 b91c 	b.w	d633c <HAL_Pin_Map>

000d5104 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d5104:	f001 b91a 	b.w	d633c <HAL_Pin_Map>

000d5108 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d5108:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d510a:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d510e:	6803      	ldr	r3, [r0, #0]
   d5110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5112:	4798      	blx	r3
}
   d5114:	3000      	adds	r0, #0
   d5116:	bf18      	it	ne
   d5118:	2001      	movne	r0, #1
   d511a:	bd08      	pop	{r3, pc}

000d511c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d511e:	4606      	mov	r6, r0
   d5120:	460f      	mov	r7, r1
   d5122:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d5124:	b1c4      	cbz	r4, d5158 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d5126:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d512a:	6803      	ldr	r3, [r0, #0]
   d512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d512e:	4798      	blx	r3
   d5130:	b908      	cbnz	r0, d5136 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d5132:	2000      	movs	r0, #0
   d5134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d5136:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d513a:	2cfa      	cmp	r4, #250	; 0xfa
   d513c:	6803      	ldr	r3, [r0, #0]
   d513e:	4625      	mov	r5, r4
   d5140:	bfa8      	it	ge
   d5142:	25fa      	movge	r5, #250	; 0xfa
   d5144:	68db      	ldr	r3, [r3, #12]
   d5146:	462a      	mov	r2, r5
   d5148:	4639      	mov	r1, r7
   d514a:	4798      	blx	r3
   d514c:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d514e:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d5150:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d5152:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d5154:	d0e6      	beq.n	d5124 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d5156:	e7ec      	b.n	d5132 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d5158:	2001      	movs	r0, #1
}
   d515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d515c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d515c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5160:	4606      	mov	r6, r0
   d5162:	4688      	mov	r8, r1
   d5164:	4691      	mov	r9, r2
   d5166:	461f      	mov	r7, r3
   d5168:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d516a:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d516c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5170:	6803      	ldr	r3, [r0, #0]
   d5172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5174:	4798      	blx	r3
   d5176:	b1d0      	cbz	r0, d51ae <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d5178:	2d00      	cmp	r5, #0
   d517a:	db18      	blt.n	d51ae <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d517c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5180:	6803      	ldr	r3, [r0, #0]
   d5182:	691b      	ldr	r3, [r3, #16]
   d5184:	4798      	blx	r3
   d5186:	b160      	cbz	r0, d51a2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d5188:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d518c:	6803      	ldr	r3, [r0, #0]
   d518e:	695b      	ldr	r3, [r3, #20]
   d5190:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d5192:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d5196:	3401      	adds	r4, #1
   d5198:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d519a:	454c      	cmp	r4, r9
   d519c:	d007      	beq.n	d51ae <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d519e:	463d      	mov	r5, r7
   d51a0:	e7ec      	b.n	d517c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d51a2:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d51a4:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d51a6:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d51a8:	f001 fd6a 	bl	d6c80 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d51ac:	e7de      	b.n	d516c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d51ae:	4620      	mov	r0, r4
   d51b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d51b4 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d51b4:	b570      	push	{r4, r5, r6, lr}
   d51b6:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d51b8:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d51bc:	2296      	movs	r2, #150	; 0x96
   d51be:	2100      	movs	r1, #0
   d51c0:	4628      	mov	r0, r5
   d51c2:	f003 fb1c 	bl	d87fe <memset>
  strcpy((char *)buffer, servername);
   d51c6:	6861      	ldr	r1, [r4, #4]
   d51c8:	4628      	mov	r0, r5
   d51ca:	f003 fb49 	bl	d8860 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d51ce:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d51d2:	8922      	ldrh	r2, [r4, #8]
   d51d4:	6803      	ldr	r3, [r0, #0]
   d51d6:	4629      	mov	r1, r5
   d51d8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d51da:	2300      	movs	r3, #0
   d51dc:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d51de:	3000      	adds	r0, #0
   d51e0:	bf18      	it	ne
   d51e2:	2001      	movne	r0, #1
   d51e4:	bd70      	pop	{r4, r5, r6, pc}

000d51e6 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d51e6:	b510      	push	{r4, lr}
   d51e8:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d51ea:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d51ee:	6803      	ldr	r3, [r0, #0]
   d51f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51f2:	4798      	blx	r3
   d51f4:	b120      	cbz	r0, d5200 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d51f6:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d51fa:	6803      	ldr	r3, [r0, #0]
   d51fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d51fe:	4798      	blx	r3
  }
  return true;
}
   d5200:	2001      	movs	r0, #1
   d5202:	bd10      	pop	{r4, pc}

000d5204 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d5204:	f001 b89a 	b.w	d633c <HAL_Pin_Map>

000d5208 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d5208:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d520a:	6103      	str	r3, [r0, #16]
  password = pass;
   d520c:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d520e:	4d0d      	ldr	r5, [pc, #52]	; (d5244 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5210:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d5212:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d5214:	4a0c      	ldr	r2, [pc, #48]	; (d5248 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5216:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5218:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d521a:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d521c:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d521e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d5222:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d5226:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d522a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d522e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d5232:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d5234:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d5236:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d523a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d523e:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d5242:	bd30      	pop	{r4, r5, pc}
   d5244:	000d8c44 	.word	0x000d8c44
   d5248:	000d8c6d 	.word	0x000d8c6d

000d524c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d524c:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d524e:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5252:	7203      	strb	r3, [r0, #8]
}
   d5254:	bd10      	pop	{r4, pc}

000d5256 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5256:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5258:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d525a:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d525c:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d525e:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5260:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5262:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5264:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5266:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5268:	6283      	str	r3, [r0, #40]	; 0x28
   d526a:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d526c:	6303      	str	r3, [r0, #48]	; 0x30
}
   d526e:	bd10      	pop	{r4, pc}

000d5270 <_GLOBAL__sub_I__Z11printBufferPht>:
   d5270:	f001 b864 	b.w	d633c <HAL_Pin_Map>

000d5274 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5274:	f001 b862 	b.w	d633c <HAL_Pin_Map>

000d5278 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5278:	f001 b860 	b.w	d633c <HAL_Pin_Map>

000d527c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d527c:	b510      	push	{r4, lr}
   d527e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5280:	3024      	adds	r0, #36	; 0x24
   d5282:	f000 fa71 	bl	d5768 <_ZN8FatCache4syncEv>
   d5286:	b128      	cbz	r0, d5294 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5288:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d528c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5290:	f000 ba6a 	b.w	d5768 <_ZN8FatCache4syncEv>
  }
   d5294:	bd10      	pop	{r4, pc}

000d5296 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5296:	f001 b851 	b.w	d633c <HAL_Pin_Map>

000d529a <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d529a:	f001 b84f 	b.w	d633c <HAL_Pin_Map>

000d529e <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d529e:	f001 b84d 	b.w	d633c <HAL_Pin_Map>

000d52a2 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d52a2:	f001 b84b 	b.w	d633c <HAL_Pin_Map>

000d52a6 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d52a6:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d52a8:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d52aa:	f043 0304 	orr.w	r3, r3, #4
   d52ae:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d52b0:	f100 0210 	add.w	r2, r0, #16
   d52b4:	6880      	ldr	r0, [r0, #8]
   d52b6:	f000 bb0d 	b.w	d58d4 <_ZN9FatVolume15allocateClusterEmPm>

000d52ba <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d52ba:	b510      	push	{r4, lr}
   d52bc:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d52be:	6880      	ldr	r0, [r0, #8]
   d52c0:	460a      	mov	r2, r1
   d52c2:	3024      	adds	r0, #36	; 0x24
   d52c4:	69a1      	ldr	r1, [r4, #24]
   d52c6:	f000 fa76 	bl	d57b6 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d52ca:	b120      	cbz	r0, d52d6 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d52cc:	88a3      	ldrh	r3, [r4, #4]
   d52ce:	f003 030f 	and.w	r3, r3, #15
   d52d2:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d52d6:	bd10      	pop	{r4, pc}

000d52d8 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d52d8:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d52da:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d52dc:	4605      	mov	r5, r0
   d52de:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d52e0:	b984      	cbnz	r4, d5304 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d52e2:	2224      	movs	r2, #36	; 0x24
   d52e4:	4621      	mov	r1, r4
   d52e6:	f003 fa8a 	bl	d87fe <memset>

  m_vol = vol;
   d52ea:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d52ec:	79f3      	ldrb	r3, [r6, #7]
   d52ee:	2b10      	cmp	r3, #16
   d52f0:	d003      	beq.n	d52fa <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d52f2:	2b20      	cmp	r3, #32
   d52f4:	d106      	bne.n	d5304 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d52f6:	2340      	movs	r3, #64	; 0x40
   d52f8:	e000      	b.n	d52fc <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d52fa:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d52fc:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d52fe:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5300:	70a8      	strb	r0, [r5, #2]
   d5302:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5304:	2000      	movs	r0, #0
   d5306:	bd70      	pop	{r4, r5, r6, pc}

000d5308 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d530c:	7803      	ldrb	r3, [r0, #0]
   d530e:	4604      	mov	r4, r0
   d5310:	4689      	mov	r9, r1
   d5312:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5314:	b14b      	cbz	r3, d532a <_ZN7FatFile4readEPvj+0x22>
   d5316:	7882      	ldrb	r2, [r0, #2]
   d5318:	07d1      	lsls	r1, r2, #31
   d531a:	d506      	bpl.n	d532a <_ZN7FatFile4readEPvj+0x22>
   d531c:	e00c      	b.n	d5338 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d531e:	465a      	mov	r2, fp
   d5320:	6921      	ldr	r1, [r4, #16]
   d5322:	f000 fa72 	bl	d580a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5326:	2800      	cmp	r0, #0
   d5328:	da3d      	bge.n	d53a6 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d532a:	7863      	ldrb	r3, [r4, #1]
   d532c:	f043 0302 	orr.w	r3, r3, #2
   d5330:	7063      	strb	r3, [r4, #1]
  return -1;
   d5332:	f04f 30ff 	mov.w	r0, #4294967295
   d5336:	e097      	b.n	d5468 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5338:	071a      	lsls	r2, r3, #28
   d533a:	d503      	bpl.n	d5344 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d533c:	69e3      	ldr	r3, [r4, #28]
   d533e:	6962      	ldr	r2, [r4, #20]
   d5340:	1a9b      	subs	r3, r3, r2
   d5342:	e007      	b.n	d5354 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5344:	069a      	lsls	r2, r3, #26
   d5346:	d508      	bpl.n	d535a <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5348:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d534a:	891a      	ldrh	r2, [r3, #8]
   d534c:	6963      	ldr	r3, [r4, #20]
   d534e:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5352:	b29b      	uxth	r3, r3
   d5354:	429d      	cmp	r5, r3
   d5356:	bf28      	it	cs
   d5358:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d535a:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d535c:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5360:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5364:	2e00      	cmp	r6, #0
   d5366:	d035      	beq.n	d53d4 <_ZN7FatFile4readEPvj+0xcc>
   d5368:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d536a:	6963      	ldr	r3, [r4, #20]
   d536c:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d536e:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5372:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5376:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d537a:	d002      	beq.n	d5382 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d537c:	6a03      	ldr	r3, [r0, #32]
   d537e:	4419      	add	r1, r3
   d5380:	e01d      	b.n	d53be <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5382:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5386:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d538a:	f1ba 0f00 	cmp.w	sl, #0
   d538e:	d110      	bne.n	d53b2 <_ZN7FatFile4readEPvj+0xaa>
   d5390:	f1b8 0f00 	cmp.w	r8, #0
   d5394:	d10d      	bne.n	d53b2 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5396:	2b00      	cmp	r3, #0
   d5398:	d1c1      	bne.n	d531e <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d539a:	0653      	lsls	r3, r2, #25
   d539c:	bf4c      	ite	mi
   d539e:	6a03      	ldrmi	r3, [r0, #32]
   d53a0:	6a23      	ldrpl	r3, [r4, #32]
   d53a2:	6123      	str	r3, [r4, #16]
   d53a4:	e005      	b.n	d53b2 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d53a6:	d104      	bne.n	d53b2 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d53a8:	7823      	ldrb	r3, [r4, #0]
   d53aa:	f013 0f70 	tst.w	r3, #112	; 0x70
   d53ae:	d111      	bne.n	d53d4 <_ZN7FatFile4readEPvj+0xcc>
   d53b0:	e7bb      	b.n	d532a <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d53b2:	6921      	ldr	r1, [r4, #16]
   d53b4:	68a0      	ldr	r0, [r4, #8]
   d53b6:	f000 fa22 	bl	d57fe <_ZNK9FatVolume17clusterFirstBlockEm>
   d53ba:	eb08 0100 	add.w	r1, r8, r0
   d53be:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d53c0:	f1ba 0f00 	cmp.w	sl, #0
   d53c4:	d135      	bne.n	d5432 <_ZN7FatFile4readEPvj+0x12a>
   d53c6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d53ca:	d332      	bcc.n	d5432 <_ZN7FatFile4readEPvj+0x12a>
   d53cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d53ce:	4299      	cmp	r1, r3
   d53d0:	d102      	bne.n	d53d8 <_ZN7FatFile4readEPvj+0xd0>
   d53d2:	e02e      	b.n	d5432 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d53d4:	1ba8      	subs	r0, r5, r6
   d53d6:	e047      	b.n	d5468 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d53d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d53dc:	d31b      	bcc.n	d5416 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d53de:	7822      	ldrb	r2, [r4, #0]
   d53e0:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d53e2:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d53e6:	d406      	bmi.n	d53f6 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d53e8:	7902      	ldrb	r2, [r0, #4]
   d53ea:	ebc8 0202 	rsb	r2, r8, r2
   d53ee:	b2d2      	uxtb	r2, r2
   d53f0:	4592      	cmp	sl, r2
   d53f2:	bf28      	it	cs
   d53f4:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d53f6:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d53f8:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d53fc:	d207      	bcs.n	d540e <_ZN7FatFile4readEPvj+0x106>
   d53fe:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5400:	4653      	mov	r3, sl
   d5402:	464a      	mov	r2, r9
   d5404:	6800      	ldr	r0, [r0, #0]
   d5406:	f000 fcf3 	bl	d5df0 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d540a:	b960      	cbnz	r0, d5426 <_ZN7FatFile4readEPvj+0x11e>
   d540c:	e78d      	b.n	d532a <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d540e:	4453      	add	r3, sl
   d5410:	4299      	cmp	r1, r3
   d5412:	d321      	bcc.n	d5458 <_ZN7FatFile4readEPvj+0x150>
   d5414:	e7f3      	b.n	d53fe <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5416:	464a      	mov	r2, r9
   d5418:	6800      	ldr	r0, [r0, #0]
   d541a:	f000 fca1 	bl	d5d60 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d541e:	2800      	cmp	r0, #0
   d5420:	d083      	beq.n	d532a <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5422:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5426:	6963      	ldr	r3, [r4, #20]
   d5428:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d542a:	44b9      	add	r9, r7
    m_curPosition += n;
   d542c:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d542e:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5430:	e798      	b.n	d5364 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5432:	2200      	movs	r2, #0
   d5434:	3024      	adds	r0, #36	; 0x24
   d5436:	f000 f9be 	bl	d57b6 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d543a:	2800      	cmp	r0, #0
   d543c:	f43f af75 	beq.w	d532a <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5440:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5444:	42b7      	cmp	r7, r6
   d5446:	bf28      	it	cs
   d5448:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d544a:	eb00 010a 	add.w	r1, r0, sl
   d544e:	463a      	mov	r2, r7
   d5450:	4648      	mov	r0, r9
   d5452:	f003 f9c9 	bl	d87e8 <memcpy>
   d5456:	e7e6      	b.n	d5426 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5458:	3024      	adds	r0, #36	; 0x24
   d545a:	9101      	str	r1, [sp, #4]
   d545c:	f000 f984 	bl	d5768 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5460:	9901      	ldr	r1, [sp, #4]
   d5462:	2800      	cmp	r0, #0
   d5464:	d1cb      	bne.n	d53fe <_ZN7FatFile4readEPvj+0xf6>
   d5466:	e760      	b.n	d532a <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5468:	b003      	add	sp, #12
   d546a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d546e <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d546e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5470:	2201      	movs	r2, #1
   d5472:	f10d 0107 	add.w	r1, sp, #7
   d5476:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d5478:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d547a:	6905      	ldr	r5, [r0, #16]
   d547c:	f7ff ff44 	bl	d5308 <_ZN7FatFile4readEPvj>
   d5480:	2801      	cmp	r0, #1
   d5482:	bf05      	ittet	eq
   d5484:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d5488:	6166      	streq	r6, [r4, #20]
   d548a:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d548e:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5490:	b002      	add	sp, #8
   d5492:	bd70      	pop	{r4, r5, r6, pc}

000d5494 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5498:	460e      	mov	r6, r1
   d549a:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d549c:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d549e:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d54a0:	2900      	cmp	r1, #0
   d54a2:	d039      	beq.n	d5518 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d54a4:	6945      	ldr	r5, [r0, #20]
   d54a6:	42b5      	cmp	r5, r6
   d54a8:	d03a      	beq.n	d5520 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d54aa:	b90e      	cbnz	r6, d54b0 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d54ac:	6106      	str	r6, [r0, #16]
    goto done;
   d54ae:	e031      	b.n	d5514 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d54b0:	070b      	lsls	r3, r1, #28
   d54b2:	d503      	bpl.n	d54bc <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d54b4:	69c3      	ldr	r3, [r0, #28]
   d54b6:	429e      	cmp	r6, r3
   d54b8:	d82e      	bhi.n	d5518 <_ZN7FatFile7seekSetEm+0x84>
   d54ba:	e007      	b.n	d54cc <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d54bc:	0688      	lsls	r0, r1, #26
   d54be:	d505      	bpl.n	d54cc <_ZN7FatFile7seekSetEm+0x38>
   d54c0:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d54c2:	891b      	ldrh	r3, [r3, #8]
   d54c4:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d54c8:	d826      	bhi.n	d5518 <_ZN7FatFile7seekSetEm+0x84>
   d54ca:	e023      	b.n	d5514 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d54cc:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d54d0:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d54d4:	1e6a      	subs	r2, r5, #1
   d54d6:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d54da:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d54dc:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d54de:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d54e0:	429a      	cmp	r2, r3
   d54e2:	d800      	bhi.n	d54e6 <_ZN7FatFile7seekSetEm+0x52>
   d54e4:	b94d      	cbnz	r5, d54fa <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d54e6:	064a      	lsls	r2, r1, #25
   d54e8:	bf4c      	ite	mi
   d54ea:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d54ee:	6a22      	ldrpl	r2, [r4, #32]
   d54f0:	6122      	str	r2, [r4, #16]
   d54f2:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d54f4:	f104 0810 	add.w	r8, r4, #16
   d54f8:	e00a      	b.n	d5510 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d54fa:	1a9b      	subs	r3, r3, r2
   d54fc:	e7f9      	b.n	d54f2 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d54fe:	4642      	mov	r2, r8
   d5500:	6921      	ldr	r1, [r4, #16]
   d5502:	68a0      	ldr	r0, [r4, #8]
   d5504:	f000 f981 	bl	d580a <_ZN9FatVolume6fatGetEmPm>
   d5508:	2800      	cmp	r0, #0
   d550a:	f105 35ff 	add.w	r5, r5, #4294967295
   d550e:	dd03      	ble.n	d5518 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5510:	2d00      	cmp	r5, #0
   d5512:	d1f4      	bne.n	d54fe <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5514:	6166      	str	r6, [r4, #20]
   d5516:	e003      	b.n	d5520 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5518:	6127      	str	r7, [r4, #16]
  return false;
   d551a:	2000      	movs	r0, #0
   d551c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5520:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5528 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5528:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d552a:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d552c:	4604      	mov	r4, r0
  if (!isOpen()) {
   d552e:	b90b      	cbnz	r3, d5534 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5530:	2001      	movs	r0, #1
   d5532:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5534:	7883      	ldrb	r3, [r0, #2]
   d5536:	075a      	lsls	r2, r3, #29
   d5538:	d523      	bpl.n	d5582 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d553a:	2101      	movs	r1, #1
   d553c:	f7ff febd 	bl	d52ba <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5540:	4605      	mov	r5, r0
   d5542:	b928      	cbnz	r0, d5550 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5544:	7863      	ldrb	r3, [r4, #1]
   d5546:	f043 0301 	orr.w	r3, r3, #1
   d554a:	7063      	strb	r3, [r4, #1]
  return false;
   d554c:	2000      	movs	r0, #0
   d554e:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5550:	7803      	ldrb	r3, [r0, #0]
   d5552:	2be5      	cmp	r3, #229	; 0xe5
   d5554:	d0f6      	beq.n	d5544 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5556:	7823      	ldrb	r3, [r4, #0]
   d5558:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d555a:	bf44      	itt	mi
   d555c:	69e3      	ldrmi	r3, [r4, #28]
   d555e:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5560:	8c23      	ldrh	r3, [r4, #32]
   d5562:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5564:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5566:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5568:	4b09      	ldr	r3, [pc, #36]	; (d5590 <_ZN7FatFile4syncEv+0x68>)
   d556a:	681b      	ldr	r3, [r3, #0]
   d556c:	b12b      	cbz	r3, d557a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d556e:	f100 0116 	add.w	r1, r0, #22
   d5572:	3018      	adds	r0, #24
   d5574:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5576:	8b2b      	ldrh	r3, [r5, #24]
   d5578:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d557a:	78a3      	ldrb	r3, [r4, #2]
   d557c:	f023 0304 	bic.w	r3, r3, #4
   d5580:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5582:	68a0      	ldr	r0, [r4, #8]
   d5584:	f7ff fe7a 	bl	d527c <_ZN9FatVolume9cacheSyncEv>
   d5588:	2800      	cmp	r0, #0
   d558a:	d0db      	beq.n	d5544 <_ZN7FatFile4syncEv+0x1c>
   d558c:	e7d0      	b.n	d5530 <_ZN7FatFile4syncEv+0x8>
   d558e:	bf00      	nop
   d5590:	2003e3d0 	.word	0x2003e3d0

000d5594 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5594:	b510      	push	{r4, lr}
   d5596:	4604      	mov	r4, r0
  bool rtn = sync();
   d5598:	f7ff ffc6 	bl	d5528 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d559c:	2300      	movs	r3, #0
   d559e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d55a0:	bd10      	pop	{r4, pc}
	...

000d55a4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d55a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d55a8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d55aa:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d55ac:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d55ae:	4604      	mov	r4, r0
   d55b0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d55b2:	d508      	bpl.n	d55c6 <_ZN7FatFile5writeEPKvj+0x22>
   d55b4:	7883      	ldrb	r3, [r0, #2]
   d55b6:	079a      	lsls	r2, r3, #30
   d55b8:	d505      	bpl.n	d55c6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d55ba:	071b      	lsls	r3, r3, #28
   d55bc:	d50b      	bpl.n	d55d6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d55be:	69e1      	ldr	r1, [r4, #28]
   d55c0:	f7ff ff68 	bl	d5494 <_ZN7FatFile7seekSetEm>
   d55c4:	b938      	cbnz	r0, d55d6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d55c6:	7863      	ldrb	r3, [r4, #1]
   d55c8:	f043 0301 	orr.w	r3, r3, #1
   d55cc:	7063      	strb	r3, [r4, #1]
  return -1;
   d55ce:	f04f 30ff 	mov.w	r0, #4294967295
   d55d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d55d6:	6963      	ldr	r3, [r4, #20]
   d55d8:	43db      	mvns	r3, r3
   d55da:	4598      	cmp	r8, r3
   d55dc:	d8f3      	bhi.n	d55c6 <_ZN7FatFile5writeEPKvj+0x22>
   d55de:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d55e0:	f04f 0a00 	mov.w	sl, #0
   d55e4:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d55e6:	2e00      	cmp	r6, #0
   d55e8:	f000 8081 	beq.w	d56ee <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d55ec:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d55ee:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d55f0:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d55f4:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d55f8:	d11c      	bne.n	d5634 <_ZN7FatFile5writeEPKvj+0x90>
   d55fa:	b9df      	cbnz	r7, d5634 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d55fc:	6921      	ldr	r1, [r4, #16]
   d55fe:	b171      	cbz	r1, d561e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5600:	f104 0210 	add.w	r2, r4, #16
   d5604:	f000 f901 	bl	d580a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5608:	2800      	cmp	r0, #0
   d560a:	dbdc      	blt.n	d55c6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d560c:	f040 808e 	bne.w	d572c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5610:	4620      	mov	r0, r4
   d5612:	f7ff fe48 	bl	d52a6 <_ZN7FatFile10addClusterEv>
   d5616:	2800      	cmp	r0, #0
   d5618:	f040 8088 	bne.w	d572c <_ZN7FatFile5writeEPKvj+0x188>
   d561c:	e7d3      	b.n	d55c6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d561e:	6a23      	ldr	r3, [r4, #32]
   d5620:	b93b      	cbnz	r3, d5632 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5622:	4620      	mov	r0, r4
   d5624:	f7ff fe3f 	bl	d52a6 <_ZN7FatFile10addClusterEv>
   d5628:	2800      	cmp	r0, #0
   d562a:	d0cc      	beq.n	d55c6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d562c:	6923      	ldr	r3, [r4, #16]
   d562e:	6223      	str	r3, [r4, #32]
   d5630:	e000      	b.n	d5634 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5632:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5634:	6921      	ldr	r1, [r4, #16]
   d5636:	68a0      	ldr	r0, [r4, #8]
   d5638:	f000 f8e1 	bl	d57fe <_ZNK9FatVolume17clusterFirstBlockEm>
   d563c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d563e:	b917      	cbnz	r7, d5646 <_ZN7FatFile5writeEPKvj+0xa2>
   d5640:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5644:	d221      	bcs.n	d568a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5646:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d564a:	42b5      	cmp	r5, r6
   d564c:	bf28      	it	cs
   d564e:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5650:	b937      	cbnz	r7, d5660 <_ZN7FatFile5writeEPKvj+0xbc>
   d5652:	6963      	ldr	r3, [r4, #20]
   d5654:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5656:	4293      	cmp	r3, r2
   d5658:	bf34      	ite	cc
   d565a:	2201      	movcc	r2, #1
   d565c:	2205      	movcs	r2, #5
   d565e:	e000      	b.n	d5662 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5660:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5662:	68a0      	ldr	r0, [r4, #8]
   d5664:	3024      	adds	r0, #36	; 0x24
   d5666:	f000 f8a6 	bl	d57b6 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d566a:	2800      	cmp	r0, #0
   d566c:	d0ab      	beq.n	d55c6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d566e:	4438      	add	r0, r7
   d5670:	462a      	mov	r2, r5
   d5672:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5674:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5676:	f003 f8b7 	bl	d87e8 <memcpy>
      if (512 == (n + blockOffset)) {
   d567a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d567e:	d130      	bne.n	d56e2 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5680:	68a0      	ldr	r0, [r4, #8]
   d5682:	3024      	adds	r0, #36	; 0x24
   d5684:	f000 f870 	bl	d5768 <_ZN8FatCache4syncEv>
   d5688:	e017      	b.n	d56ba <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d568a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d568e:	68a0      	ldr	r0, [r4, #8]
   d5690:	d315      	bcc.n	d56be <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5692:	7902      	ldrb	r2, [r0, #4]
   d5694:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5696:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5698:	b2d2      	uxtb	r2, r2
   d569a:	4293      	cmp	r3, r2
   d569c:	bf28      	it	cs
   d569e:	4613      	movcs	r3, r2
   d56a0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d56a2:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d56a4:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d56a8:	d302      	bcc.n	d56b0 <_ZN7FatFile5writeEPKvj+0x10c>
   d56aa:	441a      	add	r2, r3
   d56ac:	4291      	cmp	r1, r2
   d56ae:	d337      	bcc.n	d5720 <_ZN7FatFile5writeEPKvj+0x17c>
   d56b0:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d56b2:	464a      	mov	r2, r9
   d56b4:	6838      	ldr	r0, [r7, #0]
   d56b6:	f000 fc4f 	bl	d5f58 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d56ba:	b990      	cbnz	r0, d56e2 <_ZN7FatFile5writeEPKvj+0x13e>
   d56bc:	e783      	b.n	d55c6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d56be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d56c0:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d56c2:	bf02      	ittt	eq
   d56c4:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d56c8:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d56cc:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d56ce:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d56d0:	464a      	mov	r2, r9
   d56d2:	6818      	ldr	r0, [r3, #0]
   d56d4:	f000 fbce 	bl	d5e74 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d56d8:	2800      	cmp	r0, #0
   d56da:	f43f af74 	beq.w	d55c6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d56de:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d56e2:	6963      	ldr	r3, [r4, #20]
   d56e4:	442b      	add	r3, r5
   d56e6:	6163      	str	r3, [r4, #20]
    src += n;
   d56e8:	44a9      	add	r9, r5
    nToWrite -= n;
   d56ea:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d56ec:	e77a      	b.n	d55e4 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d56ee:	69e2      	ldr	r2, [r4, #28]
   d56f0:	4293      	cmp	r3, r2
   d56f2:	d901      	bls.n	d56f8 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d56f4:	61e3      	str	r3, [r4, #28]
   d56f6:	e002      	b.n	d56fe <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d56f8:	4b0f      	ldr	r3, [pc, #60]	; (d5738 <_ZN7FatFile5writeEPKvj+0x194>)
   d56fa:	681b      	ldr	r3, [r3, #0]
   d56fc:	b11b      	cbz	r3, d5706 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d56fe:	78a3      	ldrb	r3, [r4, #2]
   d5700:	f043 0304 	orr.w	r3, r3, #4
   d5704:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5706:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d570a:	2b00      	cmp	r3, #0
   d570c:	db02      	blt.n	d5714 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d570e:	4640      	mov	r0, r8
   d5710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5714:	4620      	mov	r0, r4
   d5716:	f7ff ff07 	bl	d5528 <_ZN7FatFile4syncEv>
   d571a:	2800      	cmp	r0, #0
   d571c:	d1f7      	bne.n	d570e <_ZN7FatFile5writeEPKvj+0x16a>
   d571e:	e752      	b.n	d55c6 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5720:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5724:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5728:	62c2      	str	r2, [r0, #44]	; 0x2c
   d572a:	e7c1      	b.n	d56b0 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d572c:	6921      	ldr	r1, [r4, #16]
   d572e:	68a0      	ldr	r0, [r4, #8]
   d5730:	f000 f865 	bl	d57fe <_ZNK9FatVolume17clusterFirstBlockEm>
   d5734:	4601      	mov	r1, r0
   d5736:	e783      	b.n	d5640 <_ZN7FatFile5writeEPKvj+0x9c>
   d5738:	2003e3d0 	.word	0x2003e3d0

000d573c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d573c:	f000 bdfe 	b.w	d633c <HAL_Pin_Map>

000d5740 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5740:	b570      	push	{r4, r5, r6, lr}
   d5742:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5744:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5746:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5748:	b149      	cbz	r1, d575e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d574a:	f003 f891 	bl	d8870 <strlen>
   d574e:	682b      	ldr	r3, [r5, #0]
   d5750:	4602      	mov	r2, r0
   d5752:	4621      	mov	r1, r4
   d5754:	4628      	mov	r0, r5
   d5756:	68db      	ldr	r3, [r3, #12]
    }
   d5758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d575c:	4718      	bx	r3
    }
   d575e:	bd70      	pop	{r4, r5, r6, pc}

000d5760 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5760:	f000 bdec 	b.w	d633c <HAL_Pin_Map>

000d5764 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5764:	f000 bdea 	b.w	d633c <HAL_Pin_Map>

000d5768 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5768:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d576a:	7803      	ldrb	r3, [r0, #0]
   d576c:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d576e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5770:	d51e      	bpl.n	d57b0 <_ZN8FatCache4syncEv+0x48>
   d5772:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5774:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5776:	f100 060c 	add.w	r6, r0, #12
   d577a:	4632      	mov	r2, r6
   d577c:	6818      	ldr	r0, [r3, #0]
   d577e:	f000 fb79 	bl	d5e74 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5782:	4605      	mov	r5, r0
   d5784:	b908      	cbnz	r0, d578a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5786:	2500      	movs	r5, #0
   d5788:	e013      	b.n	d57b2 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d578a:	7823      	ldrb	r3, [r4, #0]
   d578c:	079b      	lsls	r3, r3, #30
   d578e:	d404      	bmi.n	d579a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5790:	7823      	ldrb	r3, [r4, #0]
   d5792:	f023 0301 	bic.w	r3, r3, #1
   d5796:	7023      	strb	r3, [r4, #0]
   d5798:	e00b      	b.n	d57b2 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d579a:	6863      	ldr	r3, [r4, #4]
   d579c:	68a0      	ldr	r0, [r4, #8]
   d579e:	6919      	ldr	r1, [r3, #16]
   d57a0:	4632      	mov	r2, r6
   d57a2:	4401      	add	r1, r0
   d57a4:	6818      	ldr	r0, [r3, #0]
   d57a6:	f000 fb65 	bl	d5e74 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d57aa:	2800      	cmp	r0, #0
   d57ac:	d1f0      	bne.n	d5790 <_ZN8FatCache4syncEv+0x28>
   d57ae:	e7ea      	b.n	d5786 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d57b0:	2501      	movs	r5, #1

fail:
  return false;
}
   d57b2:	4628      	mov	r0, r5
   d57b4:	bd70      	pop	{r4, r5, r6, pc}

000d57b6 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d57b6:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d57b8:	6883      	ldr	r3, [r0, #8]
   d57ba:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d57bc:	4604      	mov	r4, r0
   d57be:	460e      	mov	r6, r1
   d57c0:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d57c2:	d014      	beq.n	d57ee <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d57c4:	f7ff ffd0 	bl	d5768 <_ZN8FatCache4syncEv>
   d57c8:	b908      	cbnz	r0, d57ce <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d57ca:	2000      	movs	r0, #0
   d57cc:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d57ce:	076b      	lsls	r3, r5, #29
   d57d0:	d503      	bpl.n	d57da <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d57d2:	2300      	movs	r3, #0
   d57d4:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d57d6:	60a6      	str	r6, [r4, #8]
   d57d8:	e009      	b.n	d57ee <_ZN8FatCache4readEmh+0x38>
   d57da:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d57dc:	f104 020c 	add.w	r2, r4, #12
   d57e0:	4631      	mov	r1, r6
   d57e2:	6818      	ldr	r0, [r3, #0]
   d57e4:	f000 fabc 	bl	d5d60 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d57e8:	2800      	cmp	r0, #0
   d57ea:	d1f2      	bne.n	d57d2 <_ZN8FatCache4readEmh+0x1c>
   d57ec:	e7ed      	b.n	d57ca <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d57ee:	7823      	ldrb	r3, [r4, #0]
   d57f0:	4620      	mov	r0, r4
   d57f2:	f005 0503 	and.w	r5, r5, #3
   d57f6:	431d      	orrs	r5, r3
   d57f8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d57fc:	bd70      	pop	{r4, r5, r6, pc}

000d57fe <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d57fe:	7983      	ldrb	r3, [r0, #6]
   d5800:	6940      	ldr	r0, [r0, #20]
   d5802:	3902      	subs	r1, #2
   d5804:	4099      	lsls	r1, r3
}
   d5806:	4408      	add	r0, r1
   d5808:	4770      	bx	lr

000d580a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d580a:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d580c:	b570      	push	{r4, r5, r6, lr}
   d580e:	4605      	mov	r5, r0
   d5810:	460c      	mov	r4, r1
   d5812:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5814:	d802      	bhi.n	d581c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5816:	f04f 30ff 	mov.w	r0, #4294967295
   d581a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d581c:	69c3      	ldr	r3, [r0, #28]
   d581e:	4299      	cmp	r1, r3
   d5820:	d8f9      	bhi.n	d5816 <_ZN9FatVolume6fatGetEmPm+0xc>
   d5822:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5824:	2b20      	cmp	r3, #32
   d5826:	d110      	bne.n	d584a <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5828:	6981      	ldr	r1, [r0, #24]
   d582a:	2202      	movs	r2, #2
   d582c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5830:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5834:	f7ff ffbf 	bl	d57b6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5838:	2800      	cmp	r0, #0
   d583a:	d0ec      	beq.n	d5816 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d583c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5840:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5844:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5848:	e00f      	b.n	d586a <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d584a:	2b10      	cmp	r3, #16
   d584c:	d1e3      	bne.n	d5816 <_ZN9FatVolume6fatGetEmPm+0xc>
   d584e:	6983      	ldr	r3, [r0, #24]
   d5850:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5854:	2202      	movs	r2, #2
   d5856:	4419      	add	r1, r3
   d5858:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d585c:	f7ff ffab 	bl	d57b6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5860:	2800      	cmp	r0, #0
   d5862:	d0d8      	beq.n	d5816 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5864:	b2e4      	uxtb	r4, r4
   d5866:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d586a:	69ea      	ldr	r2, [r5, #28]
   d586c:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d586e:	bf9a      	itte	ls
   d5870:	6033      	strls	r3, [r6, #0]
  return 1;
   d5872:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5874:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d5876:	bd70      	pop	{r4, r5, r6, pc}

000d5878 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5878:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d587a:	b538      	push	{r3, r4, r5, lr}
   d587c:	460c      	mov	r4, r1
   d587e:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5880:	d801      	bhi.n	d5886 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5882:	2000      	movs	r0, #0
   d5884:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5886:	69c3      	ldr	r3, [r0, #28]
   d5888:	4299      	cmp	r1, r3
   d588a:	d8fa      	bhi.n	d5882 <_ZN9FatVolume6fatPutEmm+0xa>
   d588c:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d588e:	2b20      	cmp	r3, #32
   d5890:	d10e      	bne.n	d58b0 <_ZN9FatVolume6fatPutEmm+0x38>
   d5892:	6981      	ldr	r1, [r0, #24]
   d5894:	2203      	movs	r2, #3
   d5896:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d589a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d589e:	f7ff ff8a 	bl	d57b6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d58a2:	2800      	cmp	r0, #0
   d58a4:	d0ed      	beq.n	d5882 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d58a6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d58aa:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d58ae:	e00f      	b.n	d58d0 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d58b0:	2b10      	cmp	r3, #16
   d58b2:	d1e6      	bne.n	d5882 <_ZN9FatVolume6fatPutEmm+0xa>
   d58b4:	6983      	ldr	r3, [r0, #24]
   d58b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d58ba:	2203      	movs	r2, #3
   d58bc:	4419      	add	r1, r3
   d58be:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d58c2:	f7ff ff78 	bl	d57b6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d58c6:	2800      	cmp	r0, #0
   d58c8:	d0db      	beq.n	d5882 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d58ca:	b2e4      	uxtb	r4, r4
   d58cc:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d58d0:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d58d2:	bd38      	pop	{r3, r4, r5, pc}

000d58d4 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d58d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d58d8:	68c4      	ldr	r4, [r0, #12]
   d58da:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d58dc:	4605      	mov	r5, r0
   d58de:	460e      	mov	r6, r1
   d58e0:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d58e2:	d207      	bcs.n	d58f4 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d58e4:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d58e6:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d58e8:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d58ea:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d58ec:	429c      	cmp	r4, r3
   d58ee:	d903      	bls.n	d58f8 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d58f0:	b9cf      	cbnz	r7, d5926 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d58f2:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d58f4:	2701      	movs	r7, #1
   d58f6:	e7f7      	b.n	d58e8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d58f8:	42a6      	cmp	r6, r4
   d58fa:	d014      	beq.n	d5926 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d58fc:	aa01      	add	r2, sp, #4
   d58fe:	4621      	mov	r1, r4
   d5900:	4628      	mov	r0, r5
   d5902:	f7ff ff82 	bl	d580a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5906:	2800      	cmp	r0, #0
   d5908:	db0d      	blt.n	d5926 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d590a:	d0ed      	beq.n	d58e8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d590c:	9b01      	ldr	r3, [sp, #4]
   d590e:	2b00      	cmp	r3, #0
   d5910:	d1ea      	bne.n	d58e8 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d5912:	b107      	cbz	r7, d5916 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5914:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5916:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d591a:	4621      	mov	r1, r4
   d591c:	4628      	mov	r0, r5
   d591e:	f7ff ffab 	bl	d5878 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d5922:	4607      	mov	r7, r0
   d5924:	b908      	cbnz	r0, d592a <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5926:	2700      	movs	r7, #0
   d5928:	e00b      	b.n	d5942 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d592a:	b916      	cbnz	r6, d5932 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d592c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5930:	e007      	b.n	d5942 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5932:	4622      	mov	r2, r4
   d5934:	4631      	mov	r1, r6
   d5936:	4628      	mov	r0, r5
   d5938:	f7ff ff9e 	bl	d5878 <_ZN9FatVolume6fatPutEmm>
   d593c:	2800      	cmp	r0, #0
   d593e:	d1f5      	bne.n	d592c <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5940:	e7f1      	b.n	d5926 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5942:	4638      	mov	r0, r7
   d5944:	b002      	add	sp, #8
   d5946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d594a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d594a:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d594c:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d594e:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5950:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d5952:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5954:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5958:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d595a:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d595c:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d595e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5962:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5964:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5968:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d596c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d5970:	b1a1      	cbz	r1, d599c <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d5972:	2904      	cmp	r1, #4
   d5974:	d85d      	bhi.n	d5a32 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5976:	4611      	mov	r1, r2
   d5978:	3024      	adds	r0, #36	; 0x24
   d597a:	f7ff ff1c 	bl	d57b6 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d597e:	2800      	cmp	r0, #0
   d5980:	d057      	beq.n	d5a32 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d5982:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d5986:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d598a:	065b      	lsls	r3, r3, #25
   d598c:	d151      	bne.n	d5a32 <_ZN9FatVolume4initEh+0xe8>
   d598e:	351b      	adds	r5, #27
   d5990:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d5994:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d5998:	2d00      	cmp	r5, #0
   d599a:	d04a      	beq.n	d5a32 <_ZN9FatVolume4initEh+0xe8>
   d599c:	2200      	movs	r2, #0
   d599e:	4629      	mov	r1, r5
   d59a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d59a4:	f7ff ff07 	bl	d57b6 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d59a8:	2800      	cmp	r0, #0
   d59aa:	d042      	beq.n	d5a32 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d59ac:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d59b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d59b4:	d13d      	bne.n	d5a32 <_ZN9FatVolume4initEh+0xe8>
   d59b6:	7c03      	ldrb	r3, [r0, #16]
   d59b8:	2b02      	cmp	r3, #2
   d59ba:	d13a      	bne.n	d5a32 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d59bc:	89c3      	ldrh	r3, [r0, #14]
   d59be:	2b00      	cmp	r3, #0
   d59c0:	d037      	beq.n	d5a32 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d59c2:	7b41      	ldrb	r1, [r0, #13]
   d59c4:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d59c6:	1e4b      	subs	r3, r1, #1
   d59c8:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d59ca:	2300      	movs	r3, #0
   d59cc:	71a3      	strb	r3, [r4, #6]
   d59ce:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d59d0:	2301      	movs	r3, #1
   d59d2:	428b      	cmp	r3, r1
   d59d4:	d007      	beq.n	d59e6 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d59d6:	3e01      	subs	r6, #1
   d59d8:	d02b      	beq.n	d5a32 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d59da:	79a2      	ldrb	r2, [r4, #6]
   d59dc:	005b      	lsls	r3, r3, #1
   d59de:	3201      	adds	r2, #1
   d59e0:	b2db      	uxtb	r3, r3
   d59e2:	71a2      	strb	r2, [r4, #6]
   d59e4:	e7f5      	b.n	d59d2 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d59e6:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d59e8:	b902      	cbnz	r2, d59ec <_ZN9FatVolume4initEh+0xa2>
   d59ea:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d59ec:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d59ee:	89c6      	ldrh	r6, [r0, #14]
   d59f0:	442e      	add	r6, r5
   d59f2:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d59f4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d59f8:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d59fa:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d59fe:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5a00:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d5a04:	0152      	lsls	r2, r2, #5
   d5a06:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d5a0a:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d5a0e:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5a10:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d5a14:	b903      	cbnz	r3, d5a18 <_ZN9FatVolume4initEh+0xce>
   d5a16:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5a18:	1aad      	subs	r5, r5, r2
   d5a1a:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d5a1c:	79a5      	ldrb	r5, [r4, #6]
   d5a1e:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d5a22:	1c6b      	adds	r3, r5, #1
   d5a24:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d5a26:	f640 73f4 	movw	r3, #4084	; 0xff4
   d5a2a:	429d      	cmp	r5, r3
   d5a2c:	d803      	bhi.n	d5a36 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d5a2e:	230c      	movs	r3, #12
   d5a30:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d5a32:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d5a34:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d5a36:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d5a3a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d5a3c:	bf85      	ittet	hi
   d5a3e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d5a40:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d5a42:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d5a44:	2320      	movhi	r3, #32
   d5a46:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d5a48:	2001      	movs	r0, #1

fail:
  return false;
}
   d5a4a:	bd70      	pop	{r4, r5, r6, pc}

000d5a4c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d5a4c:	f000 bc76 	b.w	d633c <HAL_Pin_Map>

000d5a50 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d5a50:	f000 bc74 	b.w	d633c <HAL_Pin_Map>

000d5a54 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d5a54:	f000 bc72 	b.w	d633c <HAL_Pin_Map>

000d5a58 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5a58:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5a5a:	4c0e      	ldr	r4, [pc, #56]	; (d5a94 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5a5c:	460e      	mov	r6, r1
   d5a5e:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5a60:	f000 fd1c 	bl	d649c <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5a64:	6823      	ldr	r3, [r4, #0]
   d5a66:	1ac0      	subs	r0, r0, r3
   d5a68:	4b0b      	ldr	r3, [pc, #44]	; (d5a98 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d5a6a:	4298      	cmp	r0, r3
   d5a6c:	d908      	bls.n	d5a80 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5a6e:	f000 fd1d 	bl	d64ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5a72:	4b0a      	ldr	r3, [pc, #40]	; (d5a9c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d5a74:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5a76:	f000 feed 	bl	d6854 <spark_process>
   d5a7a:	f000 fd0f 	bl	d649c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d5a7e:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5a80:	f000 fd14 	bl	d64ac <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d5a84:	b280      	uxth	r0, r0
   d5a86:	1b80      	subs	r0, r0, r6
}
   d5a88:	42a8      	cmp	r0, r5
   d5a8a:	bfd4      	ite	le
   d5a8c:	2000      	movle	r0, #0
   d5a8e:	2001      	movgt	r0, #1
   d5a90:	bd70      	pop	{r4, r5, r6, pc}
   d5a92:	bf00      	nop
   d5a94:	2003e3d4 	.word	0x2003e3d4
   d5a98:	000186a0 	.word	0x000186a0
   d5a9c:	2003e730 	.word	0x2003e730

000d5aa0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5aa0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d5aa2:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5aa4:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d5aa6:	b94d      	cbnz	r5, d5abc <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5aa8:	6840      	ldr	r0, [r0, #4]
   d5aaa:	f000 fa7d 	bl	d5fa8 <_ZN14SdSpiAltDriver8activateEv>
   d5aae:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5ab0:	4629      	mov	r1, r5
   d5ab2:	7d18      	ldrb	r0, [r3, #20]
   d5ab4:	f002 f883 	bl	d7bbe <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5ab8:	2301      	movs	r3, #1
   d5aba:	7223      	strb	r3, [r4, #8]
   d5abc:	bd38      	pop	{r3, r4, r5, pc}

000d5abe <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5abe:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5ac0:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5ac2:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5ac4:	b16b      	cbz	r3, d5ae2 <_ZN9SdSpiCard7spiStopEv+0x24>
   d5ac6:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5ac8:	2101      	movs	r1, #1
   d5aca:	7d18      	ldrb	r0, [r3, #20]
   d5acc:	f002 f877 	bl	d7bbe <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5ad0:	21ff      	movs	r1, #255	; 0xff
   d5ad2:	6860      	ldr	r0, [r4, #4]
   d5ad4:	f000 fa9a 	bl	d600c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5ad8:	6860      	ldr	r0, [r4, #4]
   d5ada:	f000 fa79 	bl	d5fd0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d5ade:	2300      	movs	r3, #0
   d5ae0:	7223      	strb	r3, [r4, #8]
   d5ae2:	bd10      	pop	{r4, pc}

000d5ae4 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d5ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ae6:	4604      	mov	r4, r0
   d5ae8:	460d      	mov	r5, r1
   d5aea:	4616      	mov	r6, r2
   d5aec:	f000 fcde 	bl	d64ac <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5af0:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5af2:	6860      	ldr	r0, [r4, #4]
   d5af4:	f000 fa6f 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5af8:	28ff      	cmp	r0, #255	; 0xff
   d5afa:	7260      	strb	r0, [r4, #9]
   d5afc:	d109      	bne.n	d5b12 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d5afe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b02:	4639      	mov	r1, r7
   d5b04:	4620      	mov	r0, r4
   d5b06:	f7ff ffa7 	bl	d5a58 <_ZN9SdSpiCard10isTimedOutEtt>
   d5b0a:	2800      	cmp	r0, #0
   d5b0c:	d0f1      	beq.n	d5af2 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5b0e:	2355      	movs	r3, #85	; 0x55
   d5b10:	e00b      	b.n	d5b2a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d5b12:	28fe      	cmp	r0, #254	; 0xfe
   d5b14:	d001      	beq.n	d5b1a <_ZN9SdSpiCard8readDataEPhj+0x36>
   d5b16:	2350      	movs	r3, #80	; 0x50
   d5b18:	e007      	b.n	d5b2a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5b1a:	4632      	mov	r2, r6
   d5b1c:	4629      	mov	r1, r5
   d5b1e:	6860      	ldr	r0, [r4, #4]
   d5b20:	f000 fa5e 	bl	d5fe0 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d5b24:	7260      	strb	r0, [r4, #9]
   d5b26:	b130      	cbz	r0, d5b36 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5b28:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d5b2a:	4620      	mov	r0, r4
   d5b2c:	7023      	strb	r3, [r4, #0]
   d5b2e:	f7ff ffc6 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5b32:	2000      	movs	r0, #0
}
   d5b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5b36:	6860      	ldr	r0, [r4, #4]
   d5b38:	f000 fa4d 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
   d5b3c:	6860      	ldr	r0, [r4, #4]
   d5b3e:	f000 fa4a 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
   d5b42:	2001      	movs	r0, #1
   d5b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b46 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d5b46:	b570      	push	{r4, r5, r6, lr}
   d5b48:	4604      	mov	r4, r0
   d5b4a:	460e      	mov	r6, r1
   d5b4c:	f000 fcae 	bl	d64ac <HAL_Timer_Get_Milli_Seconds>
   d5b50:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d5b52:	4632      	mov	r2, r6
   d5b54:	4629      	mov	r1, r5
   d5b56:	4620      	mov	r0, r4
   d5b58:	f7ff ff7e 	bl	d5a58 <_ZN9SdSpiCard10isTimedOutEtt>
   d5b5c:	b930      	cbnz	r0, d5b6c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d5b5e:	6860      	ldr	r0, [r4, #4]
   d5b60:	f000 fa39 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d5b64:	28ff      	cmp	r0, #255	; 0xff
   d5b66:	d1f4      	bne.n	d5b52 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d5b68:	2001      	movs	r0, #1
   d5b6a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5b6c:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d5b6e:	bd70      	pop	{r4, r5, r6, pc}

000d5b70 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d5b72:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5b74:	9201      	str	r2, [sp, #4]
   d5b76:	4604      	mov	r4, r0
   d5b78:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d5b7a:	b90b      	cbnz	r3, d5b80 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5b7c:	f7ff ff90 	bl	d5aa0 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d5b80:	b125      	cbz	r5, d5b8c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d5b82:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5b86:	4620      	mov	r0, r4
   d5b88:	f7ff ffdd 	bl	d5b46 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5b8c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d5b90:	6860      	ldr	r0, [r4, #4]
   d5b92:	f000 fa3b 	bl	d600c <_ZN14SdSpiAltDriver4sendEh>
   d5b96:	f10d 0607 	add.w	r6, sp, #7
   d5b9a:	f10d 0703 	add.w	r7, sp, #3
   d5b9e:	f816 1901 	ldrb.w	r1, [r6], #-1
   d5ba2:	6860      	ldr	r0, [r4, #4]
   d5ba4:	f000 fa32 	bl	d600c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d5ba8:	42be      	cmp	r6, r7
   d5baa:	d1f8      	bne.n	d5b9e <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d5bac:	2d00      	cmp	r5, #0
   d5bae:	bf0c      	ite	eq
   d5bb0:	2195      	moveq	r1, #149	; 0x95
   d5bb2:	2187      	movne	r1, #135	; 0x87
   d5bb4:	6860      	ldr	r0, [r4, #4]
   d5bb6:	f000 fa29 	bl	d600c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5bba:	6860      	ldr	r0, [r4, #4]
   d5bbc:	f000 fa0b 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
   d5bc0:	250b      	movs	r5, #11
   d5bc2:	6860      	ldr	r0, [r4, #4]
   d5bc4:	f000 fa07 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5bc8:	0603      	lsls	r3, r0, #24
   d5bca:	7260      	strb	r0, [r4, #9]
   d5bcc:	d503      	bpl.n	d5bd6 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d5bce:	3d01      	subs	r5, #1
   d5bd0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5bd4:	d1f5      	bne.n	d5bc2 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d5bd6:	b003      	add	sp, #12
   d5bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5bda <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d5bda:	b570      	push	{r4, r5, r6, lr}
   d5bdc:	4604      	mov	r4, r0
   d5bde:	460d      	mov	r5, r1
   d5be0:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d5be2:	2137      	movs	r1, #55	; 0x37
   d5be4:	2200      	movs	r2, #0
   d5be6:	f7ff ffc3 	bl	d5b70 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d5bea:	4632      	mov	r2, r6
   d5bec:	4629      	mov	r1, r5
   d5bee:	4620      	mov	r0, r4
  }
   d5bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d5bf4:	f7ff bfbc 	b.w	d5b70 <_ZN9SdSpiCard11cardCommandEhm>

000d5bf8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d5bfc:	2500      	movs	r5, #0
   d5bfe:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d5c00:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d5c02:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d5c04:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5c06:	4604      	mov	r4, r0
   d5c08:	4690      	mov	r8, r2
   d5c0a:	461e      	mov	r6, r3
   d5c0c:	f000 fc4e 	bl	d64ac <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d5c10:	4641      	mov	r1, r8
   d5c12:	4607      	mov	r7, r0
   d5c14:	6860      	ldr	r0, [r4, #4]
   d5c16:	f000 f9cb 	bl	d5fb0 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d5c1a:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d5c1c:	4a4f      	ldr	r2, [pc, #316]	; (d5d5c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d5c1e:	721d      	strb	r5, [r3, #8]
   d5c20:	f04f 0801 	mov.w	r8, #1
   d5c24:	60da      	str	r2, [r3, #12]
   d5c26:	745d      	strb	r5, [r3, #17]
   d5c28:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d5c2c:	4620      	mov	r0, r4
   d5c2e:	f7ff ff37 	bl	d5aa0 <_ZN9SdSpiCard8spiStartEv>
   d5c32:	6863      	ldr	r3, [r4, #4]
   d5c34:	4641      	mov	r1, r8
   d5c36:	7d18      	ldrb	r0, [r3, #20]
   d5c38:	f001 ffc1 	bl	d7bbe <digitalWrite>
   d5c3c:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5c3e:	21ff      	movs	r1, #255	; 0xff
   d5c40:	6860      	ldr	r0, [r4, #4]
   d5c42:	3d01      	subs	r5, #1
   d5c44:	f000 f9e2 	bl	d600c <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d5c48:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5c4c:	d1f7      	bne.n	d5c3e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d5c4e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5c50:	4629      	mov	r1, r5
   d5c52:	7d18      	ldrb	r0, [r3, #20]
   d5c54:	f001 ffb3 	bl	d7bbe <digitalWrite>
   d5c58:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d5c5a:	2200      	movs	r2, #0
   d5c5c:	4611      	mov	r1, r2
   d5c5e:	4620      	mov	r0, r4
   d5c60:	f7ff ff86 	bl	d5b70 <_ZN9SdSpiCard11cardCommandEhm>
   d5c64:	2801      	cmp	r0, #1
   d5c66:	4680      	mov	r8, r0
   d5c68:	d012      	beq.n	d5c90 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d5c6a:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d5c6c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5c70:	d101      	bne.n	d5c76 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5c72:	2320      	movs	r3, #32
   d5c74:	e057      	b.n	d5d26 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5c76:	21fd      	movs	r1, #253	; 0xfd
   d5c78:	6860      	ldr	r0, [r4, #4]
   d5c7a:	f000 f9c7 	bl	d600c <_ZN14SdSpiAltDriver4sendEh>
   d5c7e:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5c82:	6860      	ldr	r0, [r4, #4]
   d5c84:	f000 f9a7 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d5c88:	f1b8 0801 	subs.w	r8, r8, #1
   d5c8c:	d1f9      	bne.n	d5c82 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d5c8e:	e7e4      	b.n	d5c5a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d5c90:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d5c94:	2108      	movs	r1, #8
   d5c96:	4620      	mov	r0, r4
   d5c98:	f7ff ff6a 	bl	d5b70 <_ZN9SdSpiCard11cardCommandEhm>
   d5c9c:	2805      	cmp	r0, #5
   d5c9e:	d102      	bne.n	d5ca6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5ca0:	f884 800a 	strb.w	r8, [r4, #10]
   d5ca4:	e00f      	b.n	d5cc6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d5ca6:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5ca8:	6860      	ldr	r0, [r4, #4]
   d5caa:	f000 f994 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
   d5cae:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5cb0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d5cb4:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5cb6:	d1f7      	bne.n	d5ca8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d5cb8:	28aa      	cmp	r0, #170	; 0xaa
   d5cba:	d102      	bne.n	d5cc2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5cbc:	2302      	movs	r3, #2
   d5cbe:	72a3      	strb	r3, [r4, #10]
   d5cc0:	e001      	b.n	d5cc6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5cc2:	2325      	movs	r3, #37	; 0x25
   d5cc4:	e02f      	b.n	d5d26 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d5cc6:	7aa3      	ldrb	r3, [r4, #10]
   d5cc8:	2b02      	cmp	r3, #2
   d5cca:	bf0c      	ite	eq
   d5ccc:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d5cd0:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d5cd2:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d5cd4:	462a      	mov	r2, r5
   d5cd6:	2129      	movs	r1, #41	; 0x29
   d5cd8:	4620      	mov	r0, r4
   d5cda:	f7ff ff7e 	bl	d5bda <_ZN9SdSpiCard8cardAcmdEhm>
   d5cde:	4602      	mov	r2, r0
   d5ce0:	b148      	cbz	r0, d5cf6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d5ce2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d5ce6:	4639      	mov	r1, r7
   d5ce8:	4620      	mov	r0, r4
   d5cea:	f7ff feb5 	bl	d5a58 <_ZN9SdSpiCard10isTimedOutEtt>
   d5cee:	2800      	cmp	r0, #0
   d5cf0:	d0f0      	beq.n	d5cd4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d5cf2:	2343      	movs	r3, #67	; 0x43
   d5cf4:	e017      	b.n	d5d26 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d5cf6:	7aa3      	ldrb	r3, [r4, #10]
   d5cf8:	2b02      	cmp	r3, #2
   d5cfa:	d00e      	beq.n	d5d1a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d5cfc:	4620      	mov	r0, r4
   d5cfe:	f7ff fede 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d5d02:	6863      	ldr	r3, [r4, #4]
   d5d04:	68b0      	ldr	r0, [r6, #8]
   d5d06:	7934      	ldrb	r4, [r6, #4]
   d5d08:	7b31      	ldrb	r1, [r6, #12]
   d5d0a:	7b72      	ldrb	r2, [r6, #13]
   d5d0c:	745a      	strb	r2, [r3, #17]
   d5d0e:	60d8      	str	r0, [r3, #12]
   d5d10:	721c      	strb	r4, [r3, #8]
   d5d12:	7419      	strb	r1, [r3, #16]
  return true;
   d5d14:	2001      	movs	r0, #1
   d5d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d5d1a:	213a      	movs	r1, #58	; 0x3a
   d5d1c:	4620      	mov	r0, r4
   d5d1e:	f7ff ff27 	bl	d5b70 <_ZN9SdSpiCard11cardCommandEhm>
   d5d22:	b138      	cbz	r0, d5d34 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d5d24:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d5d26:	4620      	mov	r0, r4
   d5d28:	7023      	strb	r3, [r4, #0]
   d5d2a:	f7ff fec8 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5d2e:	2000      	movs	r0, #0
}
   d5d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5d34:	6860      	ldr	r0, [r4, #4]
   d5d36:	f000 f94e 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d5d3a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d5d3e:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5d40:	bf04      	itt	eq
   d5d42:	2303      	moveq	r3, #3
   d5d44:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5d46:	6860      	ldr	r0, [r4, #4]
   d5d48:	f000 f945 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
   d5d4c:	6860      	ldr	r0, [r4, #4]
   d5d4e:	f000 f942 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
   d5d52:	6860      	ldr	r0, [r4, #4]
   d5d54:	f000 f93f 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
   d5d58:	e7d0      	b.n	d5cfc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d5d5a:	bf00      	nop
   d5d5c:	0003d090 	.word	0x0003d090

000d5d60 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5d60:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5d62:	7a83      	ldrb	r3, [r0, #10]
   d5d64:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5d66:	bf18      	it	ne
   d5d68:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5d6a:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5d6c:	460a      	mov	r2, r1
   d5d6e:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5d70:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5d72:	f7ff fefd 	bl	d5b70 <_ZN9SdSpiCard11cardCommandEhm>
   d5d76:	b110      	cbz	r0, d5d7e <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5d78:	2330      	movs	r3, #48	; 0x30
   d5d7a:	7023      	strb	r3, [r4, #0]
   d5d7c:	e00b      	b.n	d5d96 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d5d7e:	4629      	mov	r1, r5
   d5d80:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5d84:	4620      	mov	r0, r4
   d5d86:	f7ff fead 	bl	d5ae4 <_ZN9SdSpiCard8readDataEPhj>
   d5d8a:	4605      	mov	r5, r0
   d5d8c:	b118      	cbz	r0, d5d96 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d5d8e:	4620      	mov	r0, r4
   d5d90:	f7ff fe95 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5d94:	e003      	b.n	d5d9e <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d5d96:	4620      	mov	r0, r4
   d5d98:	f7ff fe91 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5d9c:	2500      	movs	r5, #0
}
   d5d9e:	4628      	mov	r0, r5
   d5da0:	bd38      	pop	{r3, r4, r5, pc}

000d5da2 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5da2:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d5da4:	7a83      	ldrb	r3, [r0, #10]
   d5da6:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5da8:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5daa:	bf18      	it	ne
   d5dac:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5dae:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5db0:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5db2:	f7ff fedd 	bl	d5b70 <_ZN9SdSpiCard11cardCommandEhm>
   d5db6:	b130      	cbz	r0, d5dc6 <_ZN9SdSpiCard9readStartEm+0x24>
   d5db8:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d5dba:	4620      	mov	r0, r4
   d5dbc:	7023      	strb	r3, [r4, #0]
   d5dbe:	f7ff fe7e 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5dc2:	2000      	movs	r0, #0
   d5dc4:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d5dc6:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5dc8:	bd10      	pop	{r4, pc}

000d5dca <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5dca:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d5dcc:	2200      	movs	r2, #0
   d5dce:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5dd0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d5dd2:	f7ff fecd 	bl	d5b70 <_ZN9SdSpiCard11cardCommandEhm>
   d5dd6:	b130      	cbz	r0, d5de6 <_ZN9SdSpiCard8readStopEv+0x1c>
   d5dd8:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d5dda:	4620      	mov	r0, r4
   d5ddc:	7023      	strb	r3, [r4, #0]
   d5dde:	f7ff fe6e 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5de2:	2000      	movs	r0, #0
   d5de4:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d5de6:	4620      	mov	r0, r4
   d5de8:	f7ff fe69 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5dec:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5dee:	bd10      	pop	{r4, pc}

000d5df0 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d5df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5df2:	4605      	mov	r5, r0
   d5df4:	4616      	mov	r6, r2
   d5df6:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d5df8:	f7ff ffd3 	bl	d5da2 <_ZN9SdSpiCard9readStartEm>
   d5dfc:	b198      	cbz	r0, d5e26 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d5dfe:	2400      	movs	r4, #0
   d5e00:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d5e02:	429f      	cmp	r7, r3
   d5e04:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d5e08:	d908      	bls.n	d5e1c <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d5e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5e0e:	4628      	mov	r0, r5
   d5e10:	f7ff fe68 	bl	d5ae4 <_ZN9SdSpiCard8readDataEPhj>
   d5e14:	3401      	adds	r4, #1
   d5e16:	2800      	cmp	r0, #0
   d5e18:	d1f2      	bne.n	d5e00 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d5e1a:	e004      	b.n	d5e26 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d5e1c:	4628      	mov	r0, r5
}
   d5e1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d5e22:	f7ff bfd2 	b.w	d5dca <_ZN9SdSpiCard8readStopEv>
}
   d5e26:	2000      	movs	r0, #0
   d5e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e2a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d5e2a:	b538      	push	{r3, r4, r5, lr}
   d5e2c:	4604      	mov	r4, r0
   d5e2e:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5e30:	6840      	ldr	r0, [r0, #4]
   d5e32:	f000 f8eb 	bl	d600c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d5e36:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5e3a:	4629      	mov	r1, r5
   d5e3c:	6860      	ldr	r0, [r4, #4]
   d5e3e:	f000 f8e9 	bl	d6014 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5e42:	21ff      	movs	r1, #255	; 0xff
   d5e44:	6860      	ldr	r0, [r4, #4]
   d5e46:	f000 f8e1 	bl	d600c <_ZN14SdSpiAltDriver4sendEh>
   d5e4a:	21ff      	movs	r1, #255	; 0xff
   d5e4c:	6860      	ldr	r0, [r4, #4]
   d5e4e:	f000 f8dd 	bl	d600c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5e52:	6860      	ldr	r0, [r4, #4]
   d5e54:	f000 f8bf 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d5e58:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d5e5a:	f000 001f 	and.w	r0, r0, #31
   d5e5e:	2805      	cmp	r0, #5
   d5e60:	d006      	beq.n	d5e70 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5e62:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5e64:	4620      	mov	r0, r4
   d5e66:	7023      	strb	r3, [r4, #0]
   d5e68:	f7ff fe29 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5e6c:	2000      	movs	r0, #0
   d5e6e:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d5e70:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5e72:	bd38      	pop	{r3, r4, r5, pc}

000d5e74 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5e74:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5e76:	7a83      	ldrb	r3, [r0, #10]
   d5e78:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5e7a:	bf18      	it	ne
   d5e7c:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5e7e:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5e80:	460a      	mov	r2, r1
   d5e82:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5e84:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5e86:	f7ff fe73 	bl	d5b70 <_ZN9SdSpiCard11cardCommandEhm>
   d5e8a:	4606      	mov	r6, r0
   d5e8c:	b108      	cbz	r0, d5e92 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d5e8e:	2332      	movs	r3, #50	; 0x32
   d5e90:	e01d      	b.n	d5ece <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d5e92:	462a      	mov	r2, r5
   d5e94:	21fe      	movs	r1, #254	; 0xfe
   d5e96:	4620      	mov	r0, r4
   d5e98:	f7ff ffc7 	bl	d5e2a <_ZN9SdSpiCard9writeDataEhPKh>
   d5e9c:	b1c0      	cbz	r0, d5ed0 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5e9e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d5ea2:	4620      	mov	r0, r4
   d5ea4:	f7ff fe4f 	bl	d5b46 <_ZN9SdSpiCard11waitNotBusyEt>
   d5ea8:	4605      	mov	r5, r0
   d5eaa:	b908      	cbnz	r0, d5eb0 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5eac:	235a      	movs	r3, #90	; 0x5a
   d5eae:	e00e      	b.n	d5ece <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d5eb0:	4632      	mov	r2, r6
   d5eb2:	210d      	movs	r1, #13
   d5eb4:	4620      	mov	r0, r4
   d5eb6:	f7ff fe5b 	bl	d5b70 <_ZN9SdSpiCard11cardCommandEhm>
   d5eba:	b938      	cbnz	r0, d5ecc <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5ebc:	6860      	ldr	r0, [r4, #4]
   d5ebe:	f000 f88a 	bl	d5fd6 <_ZN14SdSpiAltDriver7receiveEv>
   d5ec2:	b918      	cbnz	r0, d5ecc <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5ec4:	4620      	mov	r0, r4
   d5ec6:	f7ff fdfa 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5eca:	e005      	b.n	d5ed8 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5ecc:	2329      	movs	r3, #41	; 0x29
   d5ece:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d5ed0:	4620      	mov	r0, r4
   d5ed2:	f7ff fdf4 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5ed6:	2500      	movs	r5, #0
}
   d5ed8:	4628      	mov	r0, r5
   d5eda:	bd70      	pop	{r4, r5, r6, pc}

000d5edc <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5edc:	b538      	push	{r3, r4, r5, lr}
   d5ede:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5ee0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5ee4:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5ee6:	f7ff fe2e 	bl	d5b46 <_ZN9SdSpiCard11waitNotBusyEt>
   d5eea:	b910      	cbnz	r0, d5ef2 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d5eec:	235b      	movs	r3, #91	; 0x5b
   d5eee:	7023      	strb	r3, [r4, #0]
   d5ef0:	e005      	b.n	d5efe <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d5ef2:	462a      	mov	r2, r5
   d5ef4:	21fc      	movs	r1, #252	; 0xfc
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	f7ff ff97 	bl	d5e2a <_ZN9SdSpiCard9writeDataEhPKh>
   d5efc:	b918      	cbnz	r0, d5f06 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5efe:	4620      	mov	r0, r4
   d5f00:	f7ff fddd 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5f04:	2000      	movs	r0, #0
}
   d5f06:	bd38      	pop	{r3, r4, r5, pc}

000d5f08 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5f08:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5f0a:	7a83      	ldrb	r3, [r0, #10]
   d5f0c:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5f0e:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5f10:	bf18      	it	ne
   d5f12:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5f14:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5f16:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5f18:	f7ff fe2a 	bl	d5b70 <_ZN9SdSpiCard11cardCommandEhm>
   d5f1c:	b130      	cbz	r0, d5f2c <_ZN9SdSpiCard10writeStartEm+0x24>
   d5f1e:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5f20:	4620      	mov	r0, r4
   d5f22:	7023      	strb	r3, [r4, #0]
   d5f24:	f7ff fdcb 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5f28:	2000      	movs	r0, #0
   d5f2a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d5f2c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5f2e:	bd10      	pop	{r4, pc}

000d5f30 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5f30:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5f32:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5f36:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5f38:	f7ff fe05 	bl	d5b46 <_ZN9SdSpiCard11waitNotBusyEt>
   d5f3c:	4605      	mov	r5, r0
   d5f3e:	b120      	cbz	r0, d5f4a <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5f40:	21fd      	movs	r1, #253	; 0xfd
   d5f42:	6860      	ldr	r0, [r4, #4]
   d5f44:	f000 f862 	bl	d600c <_ZN14SdSpiAltDriver4sendEh>
   d5f48:	e001      	b.n	d5f4e <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5f4a:	2356      	movs	r3, #86	; 0x56
   d5f4c:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d5f4e:	4620      	mov	r0, r4
   d5f50:	f7ff fdb5 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5f54:	4628      	mov	r0, r5
   d5f56:	bd38      	pop	{r3, r4, r5, pc}

000d5f58 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d5f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f5a:	4605      	mov	r5, r0
   d5f5c:	4616      	mov	r6, r2
   d5f5e:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d5f60:	f7ff ffd2 	bl	d5f08 <_ZN9SdSpiCard10writeStartEm>
   d5f64:	b170      	cbz	r0, d5f84 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d5f66:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5f68:	42bc      	cmp	r4, r7
   d5f6a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5f6e:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5f70:	d004      	beq.n	d5f7c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d5f72:	f7ff ffb3 	bl	d5edc <_ZN9SdSpiCard9writeDataEPKh>
   d5f76:	b128      	cbz	r0, d5f84 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5f78:	3401      	adds	r4, #1
   d5f7a:	e7f5      	b.n	d5f68 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d5f7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5f80:	f7ff bfd6 	b.w	d5f30 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d5f84:	4628      	mov	r0, r5
   d5f86:	f7ff fd9a 	bl	d5abe <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5f8a:	2000      	movs	r0, #0
   d5f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f8e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5f8e:	f000 b9d5 	b.w	d633c <HAL_Pin_Map>

000d5f92 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5f92:	f000 b9d3 	b.w	d633c <HAL_Pin_Map>

000d5f96 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d5f96:	f000 b9d1 	b.w	d633c <HAL_Pin_Map>
	...

000d5f9c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5f9c:	4b01      	ldr	r3, [pc, #4]	; (d5fa4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d5f9e:	2201      	movs	r2, #1
   d5fa0:	701a      	strb	r2, [r3, #0]
   d5fa2:	4770      	bx	lr
   d5fa4:	2003e3d8 	.word	0x2003e3d8

000d5fa8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5fa8:	1d01      	adds	r1, r0, #4
   d5faa:	6800      	ldr	r0, [r0, #0]
   d5fac:	f000 bcfa 	b.w	d69a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5fb0 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d5fb0:	b510      	push	{r4, lr}
   d5fb2:	4604      	mov	r4, r0
  m_csPin = csPin;
   d5fb4:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d5fb6:	6800      	ldr	r0, [r0, #0]
   d5fb8:	f000 fcca 	bl	d6950 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d5fbc:	7d20      	ldrb	r0, [r4, #20]
   d5fbe:	2101      	movs	r1, #1
   d5fc0:	f001 fdec 	bl	d7b9c <pinMode>
  digitalWrite(m_csPin, HIGH);
   d5fc4:	7d20      	ldrb	r0, [r4, #20]
   d5fc6:	2101      	movs	r1, #1
}
   d5fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d5fcc:	f001 bdf7 	b.w	d7bbe <digitalWrite>

000d5fd0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5fd0:	6800      	ldr	r0, [r0, #0]
   d5fd2:	f000 bcce 	b.w	d6972 <_ZN8SPIClass14endTransactionEv>

000d5fd6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5fd6:	21ff      	movs	r1, #255	; 0xff
   d5fd8:	6800      	ldr	r0, [r0, #0]
   d5fda:	f000 bd53 	b.w	d6a84 <_ZN8SPIClass8transferEh>
	...

000d5fe0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5fe2:	4b08      	ldr	r3, [pc, #32]	; (d6004 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5fe4:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5fe6:	2500      	movs	r5, #0
   d5fe8:	4c07      	ldr	r4, [pc, #28]	; (d6008 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5fea:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5fec:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5fee:	4613      	mov	r3, r2
   d5ff0:	460a      	mov	r2, r1
   d5ff2:	4629      	mov	r1, r5
   d5ff4:	f000 fd4c 	bl	d6a90 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5ff8:	7823      	ldrb	r3, [r4, #0]
   d5ffa:	2b00      	cmp	r3, #0
   d5ffc:	d0fc      	beq.n	d5ff8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5ffe:	2000      	movs	r0, #0
   d6000:	b003      	add	sp, #12
   d6002:	bd30      	pop	{r4, r5, pc}
   d6004:	000d5f9d 	.word	0x000d5f9d
   d6008:	2003e3d8 	.word	0x2003e3d8

000d600c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d600c:	6800      	ldr	r0, [r0, #0]
   d600e:	f000 bd39 	b.w	d6a84 <_ZN8SPIClass8transferEh>
	...

000d6014 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6014:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6016:	4b07      	ldr	r3, [pc, #28]	; (d6034 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6018:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d601a:	2500      	movs	r5, #0
   d601c:	4c06      	ldr	r4, [pc, #24]	; (d6038 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d601e:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6020:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6022:	4613      	mov	r3, r2
   d6024:	462a      	mov	r2, r5
   d6026:	f000 fd33 	bl	d6a90 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d602a:	7823      	ldrb	r3, [r4, #0]
   d602c:	2b00      	cmp	r3, #0
   d602e:	d0fc      	beq.n	d602a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6030:	b003      	add	sp, #12
   d6032:	bd30      	pop	{r4, r5, pc}
   d6034:	000d5f9d 	.word	0x000d5f9d
   d6038:	2003e3d8 	.word	0x2003e3d8

000d603c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d603c:	f000 b97e 	b.w	d633c <HAL_Pin_Map>

000d6040 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d6040:	2200      	movs	r2, #0
   d6042:	6001      	str	r1, [r0, #0]
   d6044:	6102      	str	r2, [r0, #16]
   d6046:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d6048:	4770      	bx	lr

000d604a <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d604a:	b510      	push	{r4, lr}
   d604c:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d604e:	8800      	ldrh	r0, [r0, #0]
   d6050:	f001 fde1 	bl	d7c16 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d6054:	f240 3312 	movw	r3, #786	; 0x312
   d6058:	f1a0 020b 	sub.w	r2, r0, #11
   d605c:	429a      	cmp	r2, r3
   d605e:	d807      	bhi.n	d6070 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d6060:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d6062:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d6064:	60e0      	str	r0, [r4, #12]
   d6066:	f000 fa21 	bl	d64ac <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d606a:	61a0      	str	r0, [r4, #24]

        return true;
   d606c:	2001      	movs	r0, #1
   d606e:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d6070:	2000      	movs	r0, #0
    }
}
   d6072:	bd10      	pop	{r4, pc}

000d6074 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d6074:	f000 b962 	b.w	d633c <HAL_Pin_Map>

000d6078 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>:
void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
   d6078:	1d8b      	adds	r3, r1, #6
  uint16_t sum = 0;
   d607a:	2000      	movs	r0, #0
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
   d607c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6080:	4410      	add	r0, r2
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
   d6082:	428b      	cmp	r3, r1
    sum += buffer[i];
   d6084:	b280      	uxth	r0, r0
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
   d6086:	d1f9      	bne.n	d607c <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh+0x4>
    sum += buffer[i];
  }
  return -sum;
   d6088:	4240      	negs	r0, r0
}
   d608a:	b280      	uxth	r0, r0
   d608c:	4770      	bx	lr

000d608e <_ZN19DFRobotDFPlayerMini10parseStackEv>:
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
   d608e:	7c41      	ldrb	r1, [r0, #17]
  value <<=8;
  value += *(array+1);
   d6090:	7c83      	ldrb	r3, [r0, #18]
  _isAvailable = false;
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
   d6092:	7bc2      	ldrb	r2, [r0, #15]
   d6094:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
  value += *(array+1);
   d6098:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   d609c:	b29b      	uxth	r3, r3

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);

  switch (_handleCommand) {
   d609e:	3a3a      	subs	r2, #58	; 0x3a
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
   d60a0:	8483      	strh	r3, [r0, #36]	; 0x24

  switch (_handleCommand) {
   d60a2:	2a15      	cmp	r2, #21
   d60a4:	d833      	bhi.n	d610e <_ZN19DFRobotDFPlayerMini10parseStackEv+0x80>
   d60a6:	e8df f002 	tbb	[pc, r2]
   d60aa:	1e17      	.short	0x1e17
   d60ac:	102e0b2e 	.word	0x102e0b2e
   d60b0:	2e2e2c25 	.word	0x2e2e2c25
   d60b4:	2e2e2e2e 	.word	0x2e2e2e2e
   d60b8:	2e322e2e 	.word	0x2e322e2e
   d60bc:	2e2e2e2e 	.word	0x2e2e2e2e
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d60c0:	2300      	movs	r3, #0
   d60c2:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d60c6:	2305      	movs	r3, #5
   d60c8:	e018      	b.n	d60fc <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x02) {
   d60ca:	0799      	lsls	r1, r3, #30
   d60cc:	d52a      	bpl.n	d6124 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d60ce:	2300      	movs	r3, #0
   d60d0:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d60d4:	2304      	movs	r3, #4
   d60d6:	e011      	b.n	d60fc <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
      if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x02) {
   d60d8:	079a      	lsls	r2, r3, #30
   d60da:	d523      	bpl.n	d6124 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d60dc:	2300      	movs	r3, #0
   d60de:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d60e2:	2302      	movs	r3, #2
   d60e4:	e00a      	b.n	d60fc <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
      if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x02) {
   d60e6:	079b      	lsls	r3, r3, #30
   d60e8:	d51c      	bpl.n	d6124 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d60ea:	2300      	movs	r3, #0
   d60ec:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d60f0:	2303      	movs	r3, #3
   d60f2:	e003      	b.n	d60fc <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d60f4:	2300      	movs	r3, #0
   d60f6:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d60fa:	2306      	movs	r3, #6
   d60fc:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   d6100:	e001      	b.n	d6106 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x78>
      break;
    case 0x40:
      handleMessage(DFPlayerError, _handleParameter);
      break;
    case 0x41:
      _isSending = false;
   d6102:	2300      	movs	r3, #0
   d6104:	e00c      	b.n	d6120 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x92>
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
      _isAvailable = true;
   d6106:	2301      	movs	r3, #1
   d6108:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
      break;
   d610c:	4770      	bx	lr
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d610e:	2300      	movs	r3, #0
  _handleType = type;
   d6110:	2201      	movs	r2, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6112:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d6116:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
  _handleParameter = parameter;
   d611a:	8483      	strh	r3, [r0, #36]	; 0x24
  _isAvailable = true;
   d611c:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d6120:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
   d6124:	4770      	bx	lr

000d6126 <_ZN19DFRobotDFPlayerMini13validateStackEv>:
  value <<=8;
  value += *(array+1);
  return value;
}

bool DFRobotDFPlayerMini::validateStack(){
   d6126:	b510      	push	{r4, lr}
   d6128:	4604      	mov	r4, r0
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
   d612a:	f100 010c 	add.w	r1, r0, #12
   d612e:	f7ff ffa3 	bl	d6078 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
   d6132:	7ce2      	ldrb	r2, [r4, #19]
  value += *(array+1);
  return value;
}

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
   d6134:	7d23      	ldrb	r3, [r4, #20]
   d6136:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d613a:	b29b      	uxth	r3, r3
}
   d613c:	1a1b      	subs	r3, r3, r0
   d613e:	4258      	negs	r0, r3
   d6140:	4158      	adcs	r0, r3
   d6142:	bd10      	pop	{r4, pc}

000d6144 <_ZN19DFRobotDFPlayerMini9availableEv>:

bool DFRobotDFPlayerMini::available(){
   d6144:	b570      	push	{r4, r5, r6, lr}
   d6146:	4604      	mov	r4, r0
  while (_serial->available()) {
   d6148:	6820      	ldr	r0, [r4, #0]
   d614a:	6803      	ldr	r3, [r0, #0]
   d614c:	691b      	ldr	r3, [r3, #16]
   d614e:	4798      	blx	r3
   d6150:	4605      	mov	r5, r0
   d6152:	2800      	cmp	r0, #0
   d6154:	d05a      	beq.n	d620c <_ZN19DFRobotDFPlayerMini9availableEv+0xc8>
   d6156:	6820      	ldr	r0, [r4, #0]
    if (_receivedIndex == 0) {
   d6158:	f894 5020 	ldrb.w	r5, [r4, #32]
      _received[Stack_Header] = _serial->read();
   d615c:	6803      	ldr	r3, [r0, #0]
   d615e:	695b      	ldr	r3, [r3, #20]
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    if (_receivedIndex == 0) {
   d6160:	b94d      	cbnz	r5, d6176 <_ZN19DFRobotDFPlayerMini9availableEv+0x32>
      _received[Stack_Header] = _serial->read();
   d6162:	4798      	blx	r3
   d6164:	b2c0      	uxtb	r0, r0
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
   d6166:	287e      	cmp	r0, #126	; 0x7e
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    if (_receivedIndex == 0) {
      _received[Stack_Header] = _serial->read();
   d6168:	7320      	strb	r0, [r4, #12]
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
   d616a:	d1ed      	bne.n	d6148 <_ZN19DFRobotDFPlayerMini9availableEv+0x4>
        _isAvailable = false;
   d616c:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        _receivedIndex ++;
   d6170:	f894 3020 	ldrb.w	r3, [r4, #32]
   d6174:	e046      	b.n	d6204 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
   d6176:	4798      	blx	r3
   d6178:	4425      	add	r5, r4
   d617a:	7328      	strb	r0, [r5, #12]
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
   d617c:	f894 3020 	ldrb.w	r3, [r4, #32]
   d6180:	2b02      	cmp	r3, #2
   d6182:	d011      	beq.n	d61a8 <_ZN19DFRobotDFPlayerMini9availableEv+0x64>
   d6184:	2b09      	cmp	r3, #9
   d6186:	d013      	beq.n	d61b0 <_ZN19DFRobotDFPlayerMini9availableEv+0x6c>
   d6188:	2b01      	cmp	r3, #1
   d618a:	d13b      	bne.n	d6204 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
   d618c:	7b62      	ldrb	r2, [r4, #13]
   d618e:	2aff      	cmp	r2, #255	; 0xff
   d6190:	d038      	beq.n	d6204 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6192:	2200      	movs	r2, #0
   d6194:	f884 2020 	strb.w	r2, [r4, #32]
  _handleType = type;
   d6198:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d619c:	84a2      	strh	r2, [r4, #36]	; 0x24
  _isAvailable = true;
   d619e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d61a2:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
   d61a6:	e048      	b.n	d623a <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
   d61a8:	7ba2      	ldrb	r2, [r4, #14]
   d61aa:	2a06      	cmp	r2, #6
   d61ac:	d02a      	beq.n	d6204 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
   d61ae:	e002      	b.n	d61b6 <_ZN19DFRobotDFPlayerMini9availableEv+0x72>
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
   d61b0:	7d63      	ldrb	r3, [r4, #21]
   d61b2:	2bef      	cmp	r3, #239	; 0xef
   d61b4:	d009      	beq.n	d61ca <_ZN19DFRobotDFPlayerMini9availableEv+0x86>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d61b6:	2300      	movs	r3, #0
  _handleType = type;
   d61b8:	2201      	movs	r2, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d61ba:	f884 3020 	strb.w	r3, [r4, #32]
  _handleType = type;
   d61be:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d61c2:	84a3      	strh	r3, [r4, #36]	; 0x24
  _isAvailable = true;
   d61c4:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   d61c8:	e00e      	b.n	d61e8 <_ZN19DFRobotDFPlayerMini9availableEv+0xa4>
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
   d61ca:	4620      	mov	r0, r4
   d61cc:	f7ff ffab 	bl	d6126 <_ZN19DFRobotDFPlayerMini13validateStackEv>
   d61d0:	b168      	cbz	r0, d61ee <_ZN19DFRobotDFPlayerMini9availableEv+0xaa>
              _receivedIndex = 0;
   d61d2:	2300      	movs	r3, #0
   d61d4:	f884 3020 	strb.w	r3, [r4, #32]
              parseStack();
   d61d8:	4620      	mov	r0, r4
   d61da:	f7ff ff58 	bl	d608e <_ZN19DFRobotDFPlayerMini10parseStackEv>
              if (_isAvailable && !_sending[Stack_ACK]) {
   d61de:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
   d61e2:	b356      	cbz	r6, d623a <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
   d61e4:	7ea3      	ldrb	r3, [r4, #26]
   d61e6:	bb43      	cbnz	r3, d623a <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
                _isSending = false;
   d61e8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   d61ec:	e025      	b.n	d623a <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
   d61ee:	2301      	movs	r3, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d61f0:	f884 0020 	strb.w	r0, [r4, #32]
  _handleType = type;
   d61f4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d61f8:	84a0      	strh	r0, [r4, #36]	; 0x24
  _isAvailable = true;
   d61fa:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d61fe:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
                _isSending = false;
              }
              return _isAvailable;
            }
            else{
              return handleError(WrongStack);
   d6202:	e01a      	b.n	d623a <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
   d6204:	3301      	adds	r3, #1
   d6206:	f884 3020 	strb.w	r3, [r4, #32]
   d620a:	e79d      	b.n	d6148 <_ZN19DFRobotDFPlayerMini9availableEv+0x4>
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
   d620c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d6210:	b18b      	cbz	r3, d6236 <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
   d6212:	f000 f94b 	bl	d64ac <HAL_Timer_Get_Milli_Seconds>
   d6216:	6863      	ldr	r3, [r4, #4]
   d6218:	1ac0      	subs	r0, r0, r3
   d621a:	68a3      	ldr	r3, [r4, #8]
   d621c:	4298      	cmp	r0, r3
   d621e:	d30a      	bcc.n	d6236 <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
  _handleParameter = parameter;
  _isAvailable = true;
   d6220:	2301      	movs	r3, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d6222:	f884 5020 	strb.w	r5, [r4, #32]
  _handleType = type;
   d6226:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d622a:	84a5      	strh	r5, [r4, #36]	; 0x24
  _isAvailable = true;
   d622c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d6230:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
   d6234:	e001      	b.n	d623a <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
  }
  
  return _isAvailable;
   d6236:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
}
   d623a:	4630      	mov	r0, r6
   d623c:	bd70      	pop	{r4, r5, r6, pc}

000d623e <_ZN19DFRobotDFPlayerMini9sendStackEv>:
    sum += buffer[i];
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
   d623e:	b510      	push	{r4, lr}
  if (_sending[Stack_ACK]) {
   d6240:	7e83      	ldrb	r3, [r0, #26]
    sum += buffer[i];
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
   d6242:	4604      	mov	r4, r0
  if (_sending[Stack_ACK]) {
   d6244:	b133      	cbz	r3, d6254 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x16>
    while (_isSending) {
   d6246:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d624a:	b133      	cbz	r3, d625a <_ZN19DFRobotDFPlayerMini9sendStackEv+0x1c>
      available();
   d624c:	4620      	mov	r0, r4
   d624e:	f7ff ff79 	bl	d6144 <_ZN19DFRobotDFPlayerMini9availableEv>
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {
    while (_isSending) {
   d6252:	e7f8      	b.n	d6246 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x8>
      available();
    }
  }
  else{
    delay(10);
   d6254:	200a      	movs	r0, #10
   d6256:	f000 fd13 	bl	d6c80 <delay>
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
   d625a:	4621      	mov	r1, r4
   d625c:	220a      	movs	r2, #10
   d625e:	f851 0b16 	ldr.w	r0, [r1], #22
   d6262:	6803      	ldr	r3, [r0, #0]
   d6264:	68db      	ldr	r3, [r3, #12]
   d6266:	4798      	blx	r3
   d6268:	f000 f920 	bl	d64ac <HAL_Timer_Get_Milli_Seconds>
  _timeOutTimer = millis();
  _isSending = _sending[Stack_ACK];
   d626c:	7ea3      	ldrb	r3, [r4, #26]
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
  _timeOutTimer = millis();
   d626e:	6060      	str	r0, [r4, #4]
  _isSending = _sending[Stack_ACK];
   d6270:	3300      	adds	r3, #0
   d6272:	bf18      	it	ne
   d6274:	2301      	movne	r3, #1
   d6276:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   d627a:	bd10      	pop	{r4, pc}

000d627c <_ZN19DFRobotDFPlayerMini9sendStackEht>:
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d627c:	1213      	asrs	r3, r2, #8

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
   d627e:	b510      	push	{r4, lr}
  _sending[Stack_Command] = command;
   d6280:	7641      	strb	r1, [r0, #25]
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d6282:	76c3      	strb	r3, [r0, #27]
  *(array+1) = (uint8_t)(value);
   d6284:	7702      	strb	r2, [r0, #28]
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
   d6286:	f100 0116 	add.w	r1, r0, #22

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
   d628a:	4604      	mov	r4, r0
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
   d628c:	f7ff fef4 	bl	d6078 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d6290:	1203      	asrs	r3, r0, #8
  *(array+1) = (uint8_t)(value);
   d6292:	77a0      	strb	r0, [r4, #30]
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d6294:	7763      	strb	r3, [r4, #29]

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
   d6296:	4620      	mov	r0, r4
}
   d6298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
   d629c:	f7ff bfcf 	b.w	d623e <_ZN19DFRobotDFPlayerMini9sendStackEv>

000d62a0 <_ZN19DFRobotDFPlayerMini9sendStackEh>:
  _timeOutTimer = millis();
  _isSending = _sending[Stack_ACK];
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
   d62a0:	2200      	movs	r2, #0
   d62a2:	f7ff bfeb 	b.w	d627c <_ZN19DFRobotDFPlayerMini9sendStackEht>

000d62a6 <_ZN19DFRobotDFPlayerMini13waitAvailableEv>:
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(){
  _isSending = true;
   d62a6:	2301      	movs	r3, #1

void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(){
   d62a8:	b510      	push	{r4, lr}
   d62aa:	4604      	mov	r4, r0
  _isSending = true;
   d62ac:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
  while (!available());
   d62b0:	4620      	mov	r0, r4
   d62b2:	f7ff ff47 	bl	d6144 <_ZN19DFRobotDFPlayerMini9availableEv>
   d62b6:	2800      	cmp	r0, #0
   d62b8:	d0fa      	beq.n	d62b0 <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0xa>
  return _handleType != TimeOut;
   d62ba:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
}
   d62be:	3000      	adds	r0, #0
   d62c0:	bf18      	it	ne
   d62c2:	2001      	movne	r0, #1
   d62c4:	bd10      	pop	{r4, pc}

000d62c6 <_ZN19DFRobotDFPlayerMini5resetEv>:
void DFRobotDFPlayerMini::sleep(){
  sendStack(0x0A);
}

void DFRobotDFPlayerMini::reset(){
  sendStack(0x0C);
   d62c6:	210c      	movs	r1, #12
   d62c8:	f7ff bfea 	b.w	d62a0 <_ZN19DFRobotDFPlayerMini9sendStackEh>

000d62cc <_ZN19DFRobotDFPlayerMini5beginER6Streamb>:
  _isSending = true;
  while (!available());
  return _handleType != TimeOut;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK){
   d62cc:	b538      	push	{r3, r4, r5, lr}
   d62ce:	4604      	mov	r4, r0
  if (isACK) {
   d62d0:	4615      	mov	r5, r2
   d62d2:	b112      	cbz	r2, d62da <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0xe>
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
   d62d4:	2301      	movs	r3, #1
   d62d6:	7683      	strb	r3, [r0, #26]
   d62d8:	e000      	b.n	d62dc <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x10>
}

void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
   d62da:	76a2      	strb	r2, [r4, #26]
  else{
    disableACK();
  }
  
  _serial = &stream;
  _timeOutDuration += 3000;
   d62dc:	68a3      	ldr	r3, [r4, #8]
  }
  else{
    disableACK();
  }
  
  _serial = &stream;
   d62de:	6021      	str	r1, [r4, #0]
  _timeOutDuration += 3000;
   d62e0:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
   d62e4:	60a3      	str	r3, [r4, #8]
  reset();
   d62e6:	4620      	mov	r0, r4
   d62e8:	f7ff ffed 	bl	d62c6 <_ZN19DFRobotDFPlayerMini5resetEv>
  waitAvailable();
   d62ec:	4620      	mov	r0, r4
   d62ee:	f7ff ffda 	bl	d62a6 <_ZN19DFRobotDFPlayerMini13waitAvailableEv>
  _timeOutDuration -= 3000;
   d62f2:	68a3      	ldr	r3, [r4, #8]
   d62f4:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
  delay(200);
   d62f8:	20c8      	movs	r0, #200	; 0xc8
  
  _serial = &stream;
  _timeOutDuration += 3000;
  reset();
  waitAvailable();
  _timeOutDuration -= 3000;
   d62fa:	60a3      	str	r3, [r4, #8]
  delay(200);
   d62fc:	f000 fcc0 	bl	d6c80 <delay>
  return (readType() == DFPlayerCardOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
   d6300:	2300      	movs	r3, #0
   d6302:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  _timeOutDuration += 3000;
  reset();
  waitAvailable();
  _timeOutDuration -= 3000;
  delay(200);
  return (readType() == DFPlayerCardOnline) || !isACK;
   d6306:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d630a:	2b04      	cmp	r3, #4
   d630c:	bf14      	ite	ne
   d630e:	f085 0001 	eorne.w	r0, r5, #1
   d6312:	2001      	moveq	r0, #1
}
   d6314:	bd38      	pop	{r3, r4, r5, pc}

000d6316 <_GLOBAL__sub_I__ZN19DFRobotDFPlayerMini10setTimeOutEm>:
   d6316:	f000 b811 	b.w	d633c <HAL_Pin_Map>
	...

000d631c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d631c:	b508      	push	{r3, lr}
   d631e:	4b02      	ldr	r3, [pc, #8]	; (d6328 <netdb_freeaddrinfo+0xc>)
   d6320:	681b      	ldr	r3, [r3, #0]
   d6322:	689b      	ldr	r3, [r3, #8]
   d6324:	9301      	str	r3, [sp, #4]
   d6326:	bd08      	pop	{r3, pc}
   d6328:	00030268 	.word	0x00030268

000d632c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d632c:	b508      	push	{r3, lr}
   d632e:	4b02      	ldr	r3, [pc, #8]	; (d6338 <netdb_getaddrinfo+0xc>)
   d6330:	681b      	ldr	r3, [r3, #0]
   d6332:	68db      	ldr	r3, [r3, #12]
   d6334:	9301      	str	r3, [sp, #4]
   d6336:	bd08      	pop	{r3, pc}
   d6338:	00030268 	.word	0x00030268

000d633c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d633c:	b508      	push	{r3, lr}
   d633e:	4b02      	ldr	r3, [pc, #8]	; (d6348 <HAL_Pin_Map+0xc>)
   d6340:	681b      	ldr	r3, [r3, #0]
   d6342:	681b      	ldr	r3, [r3, #0]
   d6344:	9301      	str	r3, [sp, #4]
   d6346:	bd08      	pop	{r3, pc}
   d6348:	0003022c 	.word	0x0003022c

000d634c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d634c:	b508      	push	{r3, lr}
   d634e:	4b02      	ldr	r3, [pc, #8]	; (d6358 <HAL_Validate_Pin_Function+0xc>)
   d6350:	681b      	ldr	r3, [r3, #0]
   d6352:	685b      	ldr	r3, [r3, #4]
   d6354:	9301      	str	r3, [sp, #4]
   d6356:	bd08      	pop	{r3, pc}
   d6358:	0003022c 	.word	0x0003022c

000d635c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d635c:	b508      	push	{r3, lr}
   d635e:	4b02      	ldr	r3, [pc, #8]	; (d6368 <HAL_Pin_Mode+0xc>)
   d6360:	681b      	ldr	r3, [r3, #0]
   d6362:	689b      	ldr	r3, [r3, #8]
   d6364:	9301      	str	r3, [sp, #4]
   d6366:	bd08      	pop	{r3, pc}
   d6368:	0003022c 	.word	0x0003022c

000d636c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d636c:	b508      	push	{r3, lr}
   d636e:	4b02      	ldr	r3, [pc, #8]	; (d6378 <HAL_Get_Pin_Mode+0xc>)
   d6370:	681b      	ldr	r3, [r3, #0]
   d6372:	68db      	ldr	r3, [r3, #12]
   d6374:	9301      	str	r3, [sp, #4]
   d6376:	bd08      	pop	{r3, pc}
   d6378:	0003022c 	.word	0x0003022c

000d637c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d637c:	b508      	push	{r3, lr}
   d637e:	4b02      	ldr	r3, [pc, #8]	; (d6388 <HAL_GPIO_Write+0xc>)
   d6380:	681b      	ldr	r3, [r3, #0]
   d6382:	691b      	ldr	r3, [r3, #16]
   d6384:	9301      	str	r3, [sp, #4]
   d6386:	bd08      	pop	{r3, pc}
   d6388:	0003022c 	.word	0x0003022c

000d638c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d638c:	b508      	push	{r3, lr}
   d638e:	4b02      	ldr	r3, [pc, #8]	; (d6398 <HAL_GPIO_Read+0xc>)
   d6390:	681b      	ldr	r3, [r3, #0]
   d6392:	695b      	ldr	r3, [r3, #20]
   d6394:	9301      	str	r3, [sp, #4]
   d6396:	bd08      	pop	{r3, pc}
   d6398:	0003022c 	.word	0x0003022c

000d639c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d639c:	b508      	push	{r3, lr}
   d639e:	4b02      	ldr	r3, [pc, #8]	; (d63a8 <HAL_Interrupts_Attach+0xc>)
   d63a0:	681b      	ldr	r3, [r3, #0]
   d63a2:	699b      	ldr	r3, [r3, #24]
   d63a4:	9301      	str	r3, [sp, #4]
   d63a6:	bd08      	pop	{r3, pc}
   d63a8:	0003022c 	.word	0x0003022c

000d63ac <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d63ac:	b508      	push	{r3, lr}
   d63ae:	4b02      	ldr	r3, [pc, #8]	; (d63b8 <HAL_Interrupts_Detach+0xc>)
   d63b0:	681b      	ldr	r3, [r3, #0]
   d63b2:	69db      	ldr	r3, [r3, #28]
   d63b4:	9301      	str	r3, [sp, #4]
   d63b6:	bd08      	pop	{r3, pc}
   d63b8:	0003022c 	.word	0x0003022c

000d63bc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d63bc:	b508      	push	{r3, lr}
   d63be:	4b02      	ldr	r3, [pc, #8]	; (d63c8 <HAL_ADC_Read+0xc>)
   d63c0:	681b      	ldr	r3, [r3, #0]
   d63c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d63c4:	9301      	str	r3, [sp, #4]
   d63c6:	bd08      	pop	{r3, pc}
   d63c8:	0003022c 	.word	0x0003022c

000d63cc <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d63cc:	b508      	push	{r3, lr}
   d63ce:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <HAL_SPI_Begin+0xc>)
   d63d0:	681b      	ldr	r3, [r3, #0]
   d63d2:	681b      	ldr	r3, [r3, #0]
   d63d4:	9301      	str	r3, [sp, #4]
   d63d6:	bd08      	pop	{r3, pc}
   d63d8:	00030230 	.word	0x00030230

000d63dc <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d63dc:	b508      	push	{r3, lr}
   d63de:	4b02      	ldr	r3, [pc, #8]	; (d63e8 <HAL_SPI_Send_Receive_Data+0xc>)
   d63e0:	681b      	ldr	r3, [r3, #0]
   d63e2:	695b      	ldr	r3, [r3, #20]
   d63e4:	9301      	str	r3, [sp, #4]
   d63e6:	bd08      	pop	{r3, pc}
   d63e8:	00030230 	.word	0x00030230

000d63ec <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d63ec:	b508      	push	{r3, lr}
   d63ee:	4b02      	ldr	r3, [pc, #8]	; (d63f8 <HAL_SPI_Init+0xc>)
   d63f0:	681b      	ldr	r3, [r3, #0]
   d63f2:	69db      	ldr	r3, [r3, #28]
   d63f4:	9301      	str	r3, [sp, #4]
   d63f6:	bd08      	pop	{r3, pc}
   d63f8:	00030230 	.word	0x00030230

000d63fc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d63fc:	b508      	push	{r3, lr}
   d63fe:	4b02      	ldr	r3, [pc, #8]	; (d6408 <HAL_SPI_Is_Enabled+0xc>)
   d6400:	681b      	ldr	r3, [r3, #0]
   d6402:	6a1b      	ldr	r3, [r3, #32]
   d6404:	9301      	str	r3, [sp, #4]
   d6406:	bd08      	pop	{r3, pc}
   d6408:	00030230 	.word	0x00030230

000d640c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d640c:	b508      	push	{r3, lr}
   d640e:	4b02      	ldr	r3, [pc, #8]	; (d6418 <HAL_SPI_Info+0xc>)
   d6410:	681b      	ldr	r3, [r3, #0]
   d6412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6414:	9301      	str	r3, [sp, #4]
   d6416:	bd08      	pop	{r3, pc}
   d6418:	00030230 	.word	0x00030230

000d641c <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d641c:	b508      	push	{r3, lr}
   d641e:	4b02      	ldr	r3, [pc, #8]	; (d6428 <HAL_SPI_DMA_Transfer+0xc>)
   d6420:	681b      	ldr	r3, [r3, #0]
   d6422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6424:	9301      	str	r3, [sp, #4]
   d6426:	bd08      	pop	{r3, pc}
   d6428:	00030230 	.word	0x00030230

000d642c <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d642c:	b508      	push	{r3, lr}
   d642e:	4b02      	ldr	r3, [pc, #8]	; (d6438 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6430:	681b      	ldr	r3, [r3, #0]
   d6432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6434:	9301      	str	r3, [sp, #4]
   d6436:	bd08      	pop	{r3, pc}
   d6438:	00030230 	.word	0x00030230

000d643c <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d643c:	b508      	push	{r3, lr}
   d643e:	4b02      	ldr	r3, [pc, #8]	; (d6448 <HAL_SPI_Set_Settings+0xc>)
   d6440:	681b      	ldr	r3, [r3, #0]
   d6442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6444:	9301      	str	r3, [sp, #4]
   d6446:	bd08      	pop	{r3, pc}
   d6448:	00030230 	.word	0x00030230

000d644c <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d644c:	b508      	push	{r3, lr}
   d644e:	4b02      	ldr	r3, [pc, #8]	; (d6458 <HAL_SPI_Acquire+0xc>)
   d6450:	681b      	ldr	r3, [r3, #0]
   d6452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6454:	9301      	str	r3, [sp, #4]
   d6456:	bd08      	pop	{r3, pc}
   d6458:	00030230 	.word	0x00030230

000d645c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d645c:	b508      	push	{r3, lr}
   d645e:	4b02      	ldr	r3, [pc, #8]	; (d6468 <HAL_SPI_Release+0xc>)
   d6460:	681b      	ldr	r3, [r3, #0]
   d6462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6464:	9301      	str	r3, [sp, #4]
   d6466:	bd08      	pop	{r3, pc}
   d6468:	00030230 	.word	0x00030230

000d646c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d646c:	b508      	push	{r3, lr}
   d646e:	4b02      	ldr	r3, [pc, #8]	; (d6478 <if_index_to_name+0xc>)
   d6470:	681b      	ldr	r3, [r3, #0]
   d6472:	695b      	ldr	r3, [r3, #20]
   d6474:	9301      	str	r3, [sp, #4]
   d6476:	bd08      	pop	{r3, pc}
   d6478:	0003026c 	.word	0x0003026c

000d647c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d647c:	b508      	push	{r3, lr}
   d647e:	4b02      	ldr	r3, [pc, #8]	; (d6488 <HAL_RNG_GetRandomNumber+0xc>)
   d6480:	681b      	ldr	r3, [r3, #0]
   d6482:	685b      	ldr	r3, [r3, #4]
   d6484:	9301      	str	r3, [sp, #4]
   d6486:	bd08      	pop	{r3, pc}
   d6488:	00030218 	.word	0x00030218

000d648c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d648c:	b508      	push	{r3, lr}
   d648e:	4b02      	ldr	r3, [pc, #8]	; (d6498 <HAL_Delay_Microseconds+0xc>)
   d6490:	681b      	ldr	r3, [r3, #0]
   d6492:	68db      	ldr	r3, [r3, #12]
   d6494:	9301      	str	r3, [sp, #4]
   d6496:	bd08      	pop	{r3, pc}
   d6498:	00030218 	.word	0x00030218

000d649c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d649c:	b508      	push	{r3, lr}
   d649e:	4b02      	ldr	r3, [pc, #8]	; (d64a8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d64a0:	681b      	ldr	r3, [r3, #0]
   d64a2:	691b      	ldr	r3, [r3, #16]
   d64a4:	9301      	str	r3, [sp, #4]
   d64a6:	bd08      	pop	{r3, pc}
   d64a8:	00030218 	.word	0x00030218

000d64ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d64ac:	b508      	push	{r3, lr}
   d64ae:	4b02      	ldr	r3, [pc, #8]	; (d64b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d64b0:	681b      	ldr	r3, [r3, #0]
   d64b2:	695b      	ldr	r3, [r3, #20]
   d64b4:	9301      	str	r3, [sp, #4]
   d64b6:	bd08      	pop	{r3, pc}
   d64b8:	00030218 	.word	0x00030218

000d64bc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d64bc:	b508      	push	{r3, lr}
   d64be:	4b02      	ldr	r3, [pc, #8]	; (d64c8 <os_thread_is_current+0xc>)
   d64c0:	681b      	ldr	r3, [r3, #0]
   d64c2:	689b      	ldr	r3, [r3, #8]
   d64c4:	9301      	str	r3, [sp, #4]
   d64c6:	bd08      	pop	{r3, pc}
   d64c8:	00030248 	.word	0x00030248

000d64cc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d64cc:	b508      	push	{r3, lr}
   d64ce:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <os_thread_join+0xc>)
   d64d0:	681b      	ldr	r3, [r3, #0]
   d64d2:	691b      	ldr	r3, [r3, #16]
   d64d4:	9301      	str	r3, [sp, #4]
   d64d6:	bd08      	pop	{r3, pc}
   d64d8:	00030248 	.word	0x00030248

000d64dc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d64dc:	b508      	push	{r3, lr}
   d64de:	4b02      	ldr	r3, [pc, #8]	; (d64e8 <os_thread_cleanup+0xc>)
   d64e0:	681b      	ldr	r3, [r3, #0]
   d64e2:	695b      	ldr	r3, [r3, #20]
   d64e4:	9301      	str	r3, [sp, #4]
   d64e6:	bd08      	pop	{r3, pc}
   d64e8:	00030248 	.word	0x00030248

000d64ec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d64ec:	b508      	push	{r3, lr}
   d64ee:	4b02      	ldr	r3, [pc, #8]	; (d64f8 <os_mutex_recursive_create+0xc>)
   d64f0:	681b      	ldr	r3, [r3, #0]
   d64f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d64f4:	9301      	str	r3, [sp, #4]
   d64f6:	bd08      	pop	{r3, pc}
   d64f8:	00030248 	.word	0x00030248

000d64fc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d64fc:	b508      	push	{r3, lr}
   d64fe:	4b02      	ldr	r3, [pc, #8]	; (d6508 <os_mutex_recursive_destroy+0xc>)
   d6500:	681b      	ldr	r3, [r3, #0]
   d6502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6504:	9301      	str	r3, [sp, #4]
   d6506:	bd08      	pop	{r3, pc}
   d6508:	00030248 	.word	0x00030248

000d650c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d650c:	b508      	push	{r3, lr}
   d650e:	4b02      	ldr	r3, [pc, #8]	; (d6518 <inet_inet_ntop+0xc>)
   d6510:	681b      	ldr	r3, [r3, #0]
   d6512:	695b      	ldr	r3, [r3, #20]
   d6514:	9301      	str	r3, [sp, #4]
   d6516:	bd08      	pop	{r3, pc}
   d6518:	00030264 	.word	0x00030264

000d651c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d651c:	b508      	push	{r3, lr}
   d651e:	4b02      	ldr	r3, [pc, #8]	; (d6528 <inet_htonl+0xc>)
   d6520:	681b      	ldr	r3, [r3, #0]
   d6522:	6a1b      	ldr	r3, [r3, #32]
   d6524:	9301      	str	r3, [sp, #4]
   d6526:	bd08      	pop	{r3, pc}
   d6528:	00030264 	.word	0x00030264

000d652c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d652c:	b508      	push	{r3, lr}
   d652e:	4b02      	ldr	r3, [pc, #8]	; (d6538 <inet_htons+0xc>)
   d6530:	681b      	ldr	r3, [r3, #0]
   d6532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6534:	9301      	str	r3, [sp, #4]
   d6536:	bd08      	pop	{r3, pc}
   d6538:	00030264 	.word	0x00030264

000d653c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d653c:	b508      	push	{r3, lr}
   d653e:	4b02      	ldr	r3, [pc, #8]	; (d6548 <HAL_USART_Init+0xc>)
   d6540:	681b      	ldr	r3, [r3, #0]
   d6542:	681b      	ldr	r3, [r3, #0]
   d6544:	9301      	str	r3, [sp, #4]
   d6546:	bd08      	pop	{r3, pc}
   d6548:	0003023c 	.word	0x0003023c

000d654c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d654c:	b508      	push	{r3, lr}
   d654e:	4b02      	ldr	r3, [pc, #8]	; (d6558 <HAL_USART_Write_Data+0xc>)
   d6550:	681b      	ldr	r3, [r3, #0]
   d6552:	68db      	ldr	r3, [r3, #12]
   d6554:	9301      	str	r3, [sp, #4]
   d6556:	bd08      	pop	{r3, pc}
   d6558:	0003023c 	.word	0x0003023c

000d655c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d655c:	b508      	push	{r3, lr}
   d655e:	4b02      	ldr	r3, [pc, #8]	; (d6568 <HAL_USART_Available_Data+0xc>)
   d6560:	681b      	ldr	r3, [r3, #0]
   d6562:	691b      	ldr	r3, [r3, #16]
   d6564:	9301      	str	r3, [sp, #4]
   d6566:	bd08      	pop	{r3, pc}
   d6568:	0003023c 	.word	0x0003023c

000d656c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d656c:	b508      	push	{r3, lr}
   d656e:	4b02      	ldr	r3, [pc, #8]	; (d6578 <HAL_USART_Read_Data+0xc>)
   d6570:	681b      	ldr	r3, [r3, #0]
   d6572:	695b      	ldr	r3, [r3, #20]
   d6574:	9301      	str	r3, [sp, #4]
   d6576:	bd08      	pop	{r3, pc}
   d6578:	0003023c 	.word	0x0003023c

000d657c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d657c:	b508      	push	{r3, lr}
   d657e:	4b02      	ldr	r3, [pc, #8]	; (d6588 <HAL_USART_Peek_Data+0xc>)
   d6580:	681b      	ldr	r3, [r3, #0]
   d6582:	699b      	ldr	r3, [r3, #24]
   d6584:	9301      	str	r3, [sp, #4]
   d6586:	bd08      	pop	{r3, pc}
   d6588:	0003023c 	.word	0x0003023c

000d658c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d658c:	b508      	push	{r3, lr}
   d658e:	4b02      	ldr	r3, [pc, #8]	; (d6598 <HAL_USART_Flush_Data+0xc>)
   d6590:	681b      	ldr	r3, [r3, #0]
   d6592:	69db      	ldr	r3, [r3, #28]
   d6594:	9301      	str	r3, [sp, #4]
   d6596:	bd08      	pop	{r3, pc}
   d6598:	0003023c 	.word	0x0003023c

000d659c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d659c:	b508      	push	{r3, lr}
   d659e:	4b02      	ldr	r3, [pc, #8]	; (d65a8 <HAL_USART_Is_Enabled+0xc>)
   d65a0:	681b      	ldr	r3, [r3, #0]
   d65a2:	6a1b      	ldr	r3, [r3, #32]
   d65a4:	9301      	str	r3, [sp, #4]
   d65a6:	bd08      	pop	{r3, pc}
   d65a8:	0003023c 	.word	0x0003023c

000d65ac <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d65ac:	b508      	push	{r3, lr}
   d65ae:	4b02      	ldr	r3, [pc, #8]	; (d65b8 <HAL_USART_Available_Data_For_Write+0xc>)
   d65b0:	681b      	ldr	r3, [r3, #0]
   d65b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d65b4:	9301      	str	r3, [sp, #4]
   d65b6:	bd08      	pop	{r3, pc}
   d65b8:	0003023c 	.word	0x0003023c

000d65bc <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d65bc:	b508      	push	{r3, lr}
   d65be:	4b02      	ldr	r3, [pc, #8]	; (d65c8 <HAL_USART_BeginConfig+0xc>)
   d65c0:	681b      	ldr	r3, [r3, #0]
   d65c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d65c4:	9301      	str	r3, [sp, #4]
   d65c6:	bd08      	pop	{r3, pc}
   d65c8:	0003023c 	.word	0x0003023c

000d65cc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d65cc:	b508      	push	{r3, lr}
   d65ce:	4b02      	ldr	r3, [pc, #8]	; (d65d8 <HAL_I2C_Begin+0xc>)
   d65d0:	681b      	ldr	r3, [r3, #0]
   d65d2:	68db      	ldr	r3, [r3, #12]
   d65d4:	9301      	str	r3, [sp, #4]
   d65d6:	bd08      	pop	{r3, pc}
   d65d8:	00030228 	.word	0x00030228

000d65dc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d65dc:	b508      	push	{r3, lr}
   d65de:	4b02      	ldr	r3, [pc, #8]	; (d65e8 <HAL_I2C_Begin_Transmission+0xc>)
   d65e0:	681b      	ldr	r3, [r3, #0]
   d65e2:	699b      	ldr	r3, [r3, #24]
   d65e4:	9301      	str	r3, [sp, #4]
   d65e6:	bd08      	pop	{r3, pc}
   d65e8:	00030228 	.word	0x00030228

000d65ec <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d65ec:	b508      	push	{r3, lr}
   d65ee:	4b02      	ldr	r3, [pc, #8]	; (d65f8 <HAL_I2C_End_Transmission+0xc>)
   d65f0:	681b      	ldr	r3, [r3, #0]
   d65f2:	69db      	ldr	r3, [r3, #28]
   d65f4:	9301      	str	r3, [sp, #4]
   d65f6:	bd08      	pop	{r3, pc}
   d65f8:	00030228 	.word	0x00030228

000d65fc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d65fc:	b508      	push	{r3, lr}
   d65fe:	4b02      	ldr	r3, [pc, #8]	; (d6608 <HAL_I2C_Write_Data+0xc>)
   d6600:	681b      	ldr	r3, [r3, #0]
   d6602:	6a1b      	ldr	r3, [r3, #32]
   d6604:	9301      	str	r3, [sp, #4]
   d6606:	bd08      	pop	{r3, pc}
   d6608:	00030228 	.word	0x00030228

000d660c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d660c:	b508      	push	{r3, lr}
   d660e:	4b02      	ldr	r3, [pc, #8]	; (d6618 <HAL_I2C_Available_Data+0xc>)
   d6610:	681b      	ldr	r3, [r3, #0]
   d6612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6614:	9301      	str	r3, [sp, #4]
   d6616:	bd08      	pop	{r3, pc}
   d6618:	00030228 	.word	0x00030228

000d661c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d661c:	b508      	push	{r3, lr}
   d661e:	4b02      	ldr	r3, [pc, #8]	; (d6628 <HAL_I2C_Read_Data+0xc>)
   d6620:	681b      	ldr	r3, [r3, #0]
   d6622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6624:	9301      	str	r3, [sp, #4]
   d6626:	bd08      	pop	{r3, pc}
   d6628:	00030228 	.word	0x00030228

000d662c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d662c:	b508      	push	{r3, lr}
   d662e:	4b02      	ldr	r3, [pc, #8]	; (d6638 <HAL_I2C_Peek_Data+0xc>)
   d6630:	681b      	ldr	r3, [r3, #0]
   d6632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6634:	9301      	str	r3, [sp, #4]
   d6636:	bd08      	pop	{r3, pc}
   d6638:	00030228 	.word	0x00030228

000d663c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d663c:	b508      	push	{r3, lr}
   d663e:	4b02      	ldr	r3, [pc, #8]	; (d6648 <HAL_I2C_Flush_Data+0xc>)
   d6640:	681b      	ldr	r3, [r3, #0]
   d6642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6644:	9301      	str	r3, [sp, #4]
   d6646:	bd08      	pop	{r3, pc}
   d6648:	00030228 	.word	0x00030228

000d664c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d664c:	b508      	push	{r3, lr}
   d664e:	4b02      	ldr	r3, [pc, #8]	; (d6658 <HAL_I2C_Is_Enabled+0xc>)
   d6650:	681b      	ldr	r3, [r3, #0]
   d6652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6654:	9301      	str	r3, [sp, #4]
   d6656:	bd08      	pop	{r3, pc}
   d6658:	00030228 	.word	0x00030228

000d665c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d665c:	b508      	push	{r3, lr}
   d665e:	4b02      	ldr	r3, [pc, #8]	; (d6668 <HAL_I2C_Init+0xc>)
   d6660:	681b      	ldr	r3, [r3, #0]
   d6662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6664:	9301      	str	r3, [sp, #4]
   d6666:	bd08      	pop	{r3, pc}
   d6668:	00030228 	.word	0x00030228

000d666c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d666c:	b508      	push	{r3, lr}
   d666e:	4b02      	ldr	r3, [pc, #8]	; (d6678 <HAL_I2C_Request_Data_Ex+0xc>)
   d6670:	681b      	ldr	r3, [r3, #0]
   d6672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6674:	9301      	str	r3, [sp, #4]
   d6676:	bd08      	pop	{r3, pc}
   d6678:	00030228 	.word	0x00030228

000d667c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d667c:	b508      	push	{r3, lr}
   d667e:	4b02      	ldr	r3, [pc, #8]	; (d6688 <sock_setsockopt+0xc>)
   d6680:	681b      	ldr	r3, [r3, #0]
   d6682:	699b      	ldr	r3, [r3, #24]
   d6684:	9301      	str	r3, [sp, #4]
   d6686:	bd08      	pop	{r3, pc}
   d6688:	00030238 	.word	0x00030238

000d668c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d668c:	b508      	push	{r3, lr}
   d668e:	4b02      	ldr	r3, [pc, #8]	; (d6698 <sock_close+0xc>)
   d6690:	681b      	ldr	r3, [r3, #0]
   d6692:	69db      	ldr	r3, [r3, #28]
   d6694:	9301      	str	r3, [sp, #4]
   d6696:	bd08      	pop	{r3, pc}
   d6698:	00030238 	.word	0x00030238

000d669c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d669c:	b508      	push	{r3, lr}
   d669e:	4b02      	ldr	r3, [pc, #8]	; (d66a8 <sock_connect+0xc>)
   d66a0:	681b      	ldr	r3, [r3, #0]
   d66a2:	6a1b      	ldr	r3, [r3, #32]
   d66a4:	9301      	str	r3, [sp, #4]
   d66a6:	bd08      	pop	{r3, pc}
   d66a8:	00030238 	.word	0x00030238

000d66ac <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d66ac:	b508      	push	{r3, lr}
   d66ae:	4b02      	ldr	r3, [pc, #8]	; (d66b8 <sock_recv+0xc>)
   d66b0:	681b      	ldr	r3, [r3, #0]
   d66b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d66b4:	9301      	str	r3, [sp, #4]
   d66b6:	bd08      	pop	{r3, pc}
   d66b8:	00030238 	.word	0x00030238

000d66bc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d66bc:	b508      	push	{r3, lr}
   d66be:	4b02      	ldr	r3, [pc, #8]	; (d66c8 <sock_send+0xc>)
   d66c0:	681b      	ldr	r3, [r3, #0]
   d66c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d66c4:	9301      	str	r3, [sp, #4]
   d66c6:	bd08      	pop	{r3, pc}
   d66c8:	00030238 	.word	0x00030238

000d66cc <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d66cc:	b508      	push	{r3, lr}
   d66ce:	4b02      	ldr	r3, [pc, #8]	; (d66d8 <sock_socket+0xc>)
   d66d0:	681b      	ldr	r3, [r3, #0]
   d66d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d66d4:	9301      	str	r3, [sp, #4]
   d66d6:	bd08      	pop	{r3, pc}
   d66d8:	00030238 	.word	0x00030238

000d66dc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d66dc:	b508      	push	{r3, lr}
   d66de:	4b02      	ldr	r3, [pc, #8]	; (d66e8 <HAL_USB_USART_Init+0xc>)
   d66e0:	681b      	ldr	r3, [r3, #0]
   d66e2:	681b      	ldr	r3, [r3, #0]
   d66e4:	9301      	str	r3, [sp, #4]
   d66e6:	bd08      	pop	{r3, pc}
   d66e8:	0003024c 	.word	0x0003024c

000d66ec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d66ec:	b508      	push	{r3, lr}
   d66ee:	4b02      	ldr	r3, [pc, #8]	; (d66f8 <HAL_USB_USART_Begin+0xc>)
   d66f0:	681b      	ldr	r3, [r3, #0]
   d66f2:	685b      	ldr	r3, [r3, #4]
   d66f4:	9301      	str	r3, [sp, #4]
   d66f6:	bd08      	pop	{r3, pc}
   d66f8:	0003024c 	.word	0x0003024c

000d66fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d66fc:	b508      	push	{r3, lr}
   d66fe:	4b02      	ldr	r3, [pc, #8]	; (d6708 <HAL_USB_USART_Available_Data+0xc>)
   d6700:	681b      	ldr	r3, [r3, #0]
   d6702:	691b      	ldr	r3, [r3, #16]
   d6704:	9301      	str	r3, [sp, #4]
   d6706:	bd08      	pop	{r3, pc}
   d6708:	0003024c 	.word	0x0003024c

000d670c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d670c:	b508      	push	{r3, lr}
   d670e:	4b02      	ldr	r3, [pc, #8]	; (d6718 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6710:	681b      	ldr	r3, [r3, #0]
   d6712:	695b      	ldr	r3, [r3, #20]
   d6714:	9301      	str	r3, [sp, #4]
   d6716:	bd08      	pop	{r3, pc}
   d6718:	0003024c 	.word	0x0003024c

000d671c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d671c:	b508      	push	{r3, lr}
   d671e:	4b02      	ldr	r3, [pc, #8]	; (d6728 <HAL_USB_USART_Receive_Data+0xc>)
   d6720:	681b      	ldr	r3, [r3, #0]
   d6722:	699b      	ldr	r3, [r3, #24]
   d6724:	9301      	str	r3, [sp, #4]
   d6726:	bd08      	pop	{r3, pc}
   d6728:	0003024c 	.word	0x0003024c

000d672c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d672c:	b508      	push	{r3, lr}
   d672e:	4b02      	ldr	r3, [pc, #8]	; (d6738 <HAL_USB_USART_Send_Data+0xc>)
   d6730:	681b      	ldr	r3, [r3, #0]
   d6732:	69db      	ldr	r3, [r3, #28]
   d6734:	9301      	str	r3, [sp, #4]
   d6736:	bd08      	pop	{r3, pc}
   d6738:	0003024c 	.word	0x0003024c

000d673c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d673c:	b508      	push	{r3, lr}
   d673e:	4b02      	ldr	r3, [pc, #8]	; (d6748 <HAL_USB_USART_Flush_Data+0xc>)
   d6740:	681b      	ldr	r3, [r3, #0]
   d6742:	6a1b      	ldr	r3, [r3, #32]
   d6744:	9301      	str	r3, [sp, #4]
   d6746:	bd08      	pop	{r3, pc}
   d6748:	0003024c 	.word	0x0003024c

000d674c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d674c:	b508      	push	{r3, lr}
   d674e:	4b02      	ldr	r3, [pc, #8]	; (d6758 <panic_+0xc>)
   d6750:	681b      	ldr	r3, [r3, #0]
   d6752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6754:	9301      	str	r3, [sp, #4]
   d6756:	bd08      	pop	{r3, pc}
   d6758:	00030260 	.word	0x00030260

000d675c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d675c:	b508      	push	{r3, lr}
   d675e:	4b02      	ldr	r3, [pc, #8]	; (d6768 <log_message+0xc>)
   d6760:	681b      	ldr	r3, [r3, #0]
   d6762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6764:	9301      	str	r3, [sp, #4]
   d6766:	bd08      	pop	{r3, pc}
   d6768:	00030260 	.word	0x00030260

000d676c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d676c:	b508      	push	{r3, lr}
   d676e:	4b02      	ldr	r3, [pc, #8]	; (d6778 <set_system_mode+0xc>)
   d6770:	681b      	ldr	r3, [r3, #0]
   d6772:	685b      	ldr	r3, [r3, #4]
   d6774:	9301      	str	r3, [sp, #4]
   d6776:	bd08      	pop	{r3, pc}
   d6778:	00030220 	.word	0x00030220

000d677c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d677c:	b508      	push	{r3, lr}
   d677e:	4b02      	ldr	r3, [pc, #8]	; (d6788 <system_delay_ms+0xc>)
   d6780:	681b      	ldr	r3, [r3, #0]
   d6782:	695b      	ldr	r3, [r3, #20]
   d6784:	9301      	str	r3, [sp, #4]
   d6786:	bd08      	pop	{r3, pc}
   d6788:	00030220 	.word	0x00030220

000d678c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d678c:	b508      	push	{r3, lr}
   d678e:	4b03      	ldr	r3, [pc, #12]	; (d679c <system_ctrl_set_app_request_handler+0x10>)
   d6790:	681b      	ldr	r3, [r3, #0]
   d6792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6796:	9301      	str	r3, [sp, #4]
   d6798:	bd08      	pop	{r3, pc}
   d679a:	0000      	.short	0x0000
   d679c:	00030220 	.word	0x00030220

000d67a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d67a0:	b508      	push	{r3, lr}
   d67a2:	4b03      	ldr	r3, [pc, #12]	; (d67b0 <system_ctrl_set_result+0x10>)
   d67a4:	681b      	ldr	r3, [r3, #0]
   d67a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d67aa:	9301      	str	r3, [sp, #4]
   d67ac:	bd08      	pop	{r3, pc}
   d67ae:	0000      	.short	0x0000
   d67b0:	00030220 	.word	0x00030220

000d67b4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d67b4:	b508      	push	{r3, lr}
   d67b6:	4b02      	ldr	r3, [pc, #8]	; (d67c0 <network_connect+0xc>)
   d67b8:	681b      	ldr	r3, [r3, #0]
   d67ba:	685b      	ldr	r3, [r3, #4]
   d67bc:	9301      	str	r3, [sp, #4]
   d67be:	bd08      	pop	{r3, pc}
   d67c0:	00030240 	.word	0x00030240

000d67c4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d67c4:	b508      	push	{r3, lr}
   d67c6:	4b02      	ldr	r3, [pc, #8]	; (d67d0 <network_connecting+0xc>)
   d67c8:	681b      	ldr	r3, [r3, #0]
   d67ca:	689b      	ldr	r3, [r3, #8]
   d67cc:	9301      	str	r3, [sp, #4]
   d67ce:	bd08      	pop	{r3, pc}
   d67d0:	00030240 	.word	0x00030240

000d67d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d67d4:	b508      	push	{r3, lr}
   d67d6:	4b02      	ldr	r3, [pc, #8]	; (d67e0 <network_disconnect+0xc>)
   d67d8:	681b      	ldr	r3, [r3, #0]
   d67da:	68db      	ldr	r3, [r3, #12]
   d67dc:	9301      	str	r3, [sp, #4]
   d67de:	bd08      	pop	{r3, pc}
   d67e0:	00030240 	.word	0x00030240

000d67e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d67e4:	b508      	push	{r3, lr}
   d67e6:	4b02      	ldr	r3, [pc, #8]	; (d67f0 <network_ready+0xc>)
   d67e8:	681b      	ldr	r3, [r3, #0]
   d67ea:	691b      	ldr	r3, [r3, #16]
   d67ec:	9301      	str	r3, [sp, #4]
   d67ee:	bd08      	pop	{r3, pc}
   d67f0:	00030240 	.word	0x00030240

000d67f4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d67f4:	b508      	push	{r3, lr}
   d67f6:	4b02      	ldr	r3, [pc, #8]	; (d6800 <network_on+0xc>)
   d67f8:	681b      	ldr	r3, [r3, #0]
   d67fa:	695b      	ldr	r3, [r3, #20]
   d67fc:	9301      	str	r3, [sp, #4]
   d67fe:	bd08      	pop	{r3, pc}
   d6800:	00030240 	.word	0x00030240

000d6804 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6804:	b508      	push	{r3, lr}
   d6806:	4b02      	ldr	r3, [pc, #8]	; (d6810 <network_off+0xc>)
   d6808:	681b      	ldr	r3, [r3, #0]
   d680a:	699b      	ldr	r3, [r3, #24]
   d680c:	9301      	str	r3, [sp, #4]
   d680e:	bd08      	pop	{r3, pc}
   d6810:	00030240 	.word	0x00030240

000d6814 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6814:	b508      	push	{r3, lr}
   d6816:	4b02      	ldr	r3, [pc, #8]	; (d6820 <network_listen+0xc>)
   d6818:	681b      	ldr	r3, [r3, #0]
   d681a:	69db      	ldr	r3, [r3, #28]
   d681c:	9301      	str	r3, [sp, #4]
   d681e:	bd08      	pop	{r3, pc}
   d6820:	00030240 	.word	0x00030240

000d6824 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6824:	b508      	push	{r3, lr}
   d6826:	4b02      	ldr	r3, [pc, #8]	; (d6830 <network_listening+0xc>)
   d6828:	681b      	ldr	r3, [r3, #0]
   d682a:	6a1b      	ldr	r3, [r3, #32]
   d682c:	9301      	str	r3, [sp, #4]
   d682e:	bd08      	pop	{r3, pc}
   d6830:	00030240 	.word	0x00030240

000d6834 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6834:	b508      	push	{r3, lr}
   d6836:	4b02      	ldr	r3, [pc, #8]	; (d6840 <network_set_listen_timeout+0xc>)
   d6838:	681b      	ldr	r3, [r3, #0]
   d683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d683c:	9301      	str	r3, [sp, #4]
   d683e:	bd08      	pop	{r3, pc}
   d6840:	00030240 	.word	0x00030240

000d6844 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6844:	b508      	push	{r3, lr}
   d6846:	4b02      	ldr	r3, [pc, #8]	; (d6850 <network_get_listen_timeout+0xc>)
   d6848:	681b      	ldr	r3, [r3, #0]
   d684a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d684c:	9301      	str	r3, [sp, #4]
   d684e:	bd08      	pop	{r3, pc}
   d6850:	00030240 	.word	0x00030240

000d6854 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6854:	b508      	push	{r3, lr}
   d6856:	4b02      	ldr	r3, [pc, #8]	; (d6860 <spark_process+0xc>)
   d6858:	681b      	ldr	r3, [r3, #0]
   d685a:	689b      	ldr	r3, [r3, #8]
   d685c:	9301      	str	r3, [sp, #4]
   d685e:	bd08      	pop	{r3, pc}
   d6860:	00030244 	.word	0x00030244

000d6864 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6864:	b508      	push	{r3, lr}
   d6866:	4b02      	ldr	r3, [pc, #8]	; (d6870 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6868:	681b      	ldr	r3, [r3, #0]
   d686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d686c:	9301      	str	r3, [sp, #4]
   d686e:	bd08      	pop	{r3, pc}
   d6870:	00030244 	.word	0x00030244

000d6874 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6874:	b508      	push	{r3, lr}
   d6876:	4b02      	ldr	r3, [pc, #8]	; (d6880 <malloc+0xc>)
   d6878:	681b      	ldr	r3, [r3, #0]
   d687a:	681b      	ldr	r3, [r3, #0]
   d687c:	9301      	str	r3, [sp, #4]
   d687e:	bd08      	pop	{r3, pc}
   d6880:	0003021c 	.word	0x0003021c

000d6884 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6884:	b508      	push	{r3, lr}
   d6886:	4b02      	ldr	r3, [pc, #8]	; (d6890 <free+0xc>)
   d6888:	681b      	ldr	r3, [r3, #0]
   d688a:	685b      	ldr	r3, [r3, #4]
   d688c:	9301      	str	r3, [sp, #4]
   d688e:	bd08      	pop	{r3, pc}
   d6890:	0003021c 	.word	0x0003021c

000d6894 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6894:	b508      	push	{r3, lr}
   d6896:	4b02      	ldr	r3, [pc, #8]	; (d68a0 <vsnprintf+0xc>)
   d6898:	681b      	ldr	r3, [r3, #0]
   d689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d689c:	9301      	str	r3, [sp, #4]
   d689e:	bd08      	pop	{r3, pc}
   d68a0:	0003021c 	.word	0x0003021c

000d68a4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d68a4:	b508      	push	{r3, lr}
   d68a6:	4b02      	ldr	r3, [pc, #8]	; (d68b0 <__errno+0xc>)
   d68a8:	681b      	ldr	r3, [r3, #0]
   d68aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d68ac:	9301      	str	r3, [sp, #4]
   d68ae:	bd08      	pop	{r3, pc}
   d68b0:	0003021c 	.word	0x0003021c

000d68b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d68b4:	2200      	movs	r2, #0
   d68b6:	4611      	mov	r1, r2
   d68b8:	6840      	ldr	r0, [r0, #4]
   d68ba:	f7ff bfb3 	b.w	d6824 <network_listening>

000d68be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d68be:	2200      	movs	r2, #0
   d68c0:	4611      	mov	r1, r2
   d68c2:	6840      	ldr	r0, [r0, #4]
   d68c4:	f7ff bfbe 	b.w	d6844 <network_get_listen_timeout>

000d68c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d68c8:	2200      	movs	r2, #0
   d68ca:	6840      	ldr	r0, [r0, #4]
   d68cc:	f7ff bfb2 	b.w	d6834 <network_set_listen_timeout>

000d68d0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d68d0:	2200      	movs	r2, #0
   d68d2:	f081 0101 	eor.w	r1, r1, #1
   d68d6:	6840      	ldr	r0, [r0, #4]
   d68d8:	f7ff bf9c 	b.w	d6814 <network_listen>

000d68dc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d68dc:	2300      	movs	r3, #0
   d68de:	461a      	mov	r2, r3
   d68e0:	4619      	mov	r1, r3
   d68e2:	6840      	ldr	r0, [r0, #4]
   d68e4:	f7ff bf8e 	b.w	d6804 <network_off>

000d68e8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d68e8:	2300      	movs	r3, #0
   d68ea:	461a      	mov	r2, r3
   d68ec:	4619      	mov	r1, r3
   d68ee:	6840      	ldr	r0, [r0, #4]
   d68f0:	f7ff bf80 	b.w	d67f4 <network_on>

000d68f4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d68f4:	2200      	movs	r2, #0
   d68f6:	4611      	mov	r1, r2
   d68f8:	6840      	ldr	r0, [r0, #4]
   d68fa:	f7ff bf73 	b.w	d67e4 <network_ready>

000d68fe <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d68fe:	2200      	movs	r2, #0
   d6900:	4611      	mov	r1, r2
   d6902:	6840      	ldr	r0, [r0, #4]
   d6904:	f7ff bf5e 	b.w	d67c4 <network_connecting>

000d6908 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6908:	2200      	movs	r2, #0
   d690a:	2102      	movs	r1, #2
   d690c:	6840      	ldr	r0, [r0, #4]
   d690e:	f7ff bf61 	b.w	d67d4 <network_disconnect>

000d6912 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6912:	2300      	movs	r3, #0
   d6914:	461a      	mov	r2, r3
   d6916:	6840      	ldr	r0, [r0, #4]
   d6918:	f7ff bf4c 	b.w	d67b4 <network_connect>

000d691c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d691c:	4b02      	ldr	r3, [pc, #8]	; (d6928 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d691e:	2203      	movs	r2, #3
   d6920:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6922:	4a02      	ldr	r2, [pc, #8]	; (d692c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6924:	601a      	str	r2, [r3, #0]
   d6926:	4770      	bx	lr
   d6928:	2003e3dc 	.word	0x2003e3dc
   d692c:	000d8e5c 	.word	0x000d8e5c

000d6930 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6930:	2100      	movs	r1, #0
   d6932:	f7ff bd8b 	b.w	d644c <HAL_SPI_Acquire>

000d6936 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6936:	2100      	movs	r1, #0
   d6938:	f7ff bd90 	b.w	d645c <HAL_SPI_Release>

000d693c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d693c:	b510      	push	{r4, lr}
   d693e:	4604      	mov	r4, r0
{
    _spi = spi;
   d6940:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6942:	4608      	mov	r0, r1
   d6944:	f7ff fd52 	bl	d63ec <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6948:	2300      	movs	r3, #0
   d694a:	6063      	str	r3, [r4, #4]
}
   d694c:	4620      	mov	r0, r4
   d694e:	bd10      	pop	{r4, pc}

000d6950 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6950:	b510      	push	{r4, lr}
   d6952:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6954:	7800      	ldrb	r0, [r0, #0]
   d6956:	f7ff ffeb 	bl	d6930 <_ZN8SPIClass4lockEv.isra.0>
   d695a:	b948      	cbnz	r0, d6970 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d695c:	7820      	ldrb	r0, [r4, #0]
   d695e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6962:	f7ff fd33 	bl	d63cc <HAL_SPI_Begin>
        unlock();
   d6966:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d696c:	f7ff bfe3 	b.w	d6936 <_ZN8SPIClass6unlockEv.isra.1>
   d6970:	bd10      	pop	{r4, pc}

000d6972 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6972:	7800      	ldrb	r0, [r0, #0]
   d6974:	f7ff bfdf 	b.w	d6936 <_ZN8SPIClass6unlockEv.isra.1>

000d6978 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6978:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d697a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d697c:	6018      	str	r0, [r3, #0]
   d697e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6980:	6818      	ldr	r0, [r3, #0]
   d6982:	4288      	cmp	r0, r1
   d6984:	b2e5      	uxtb	r5, r4
   d6986:	d906      	bls.n	d6996 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6988:	3401      	adds	r4, #1
   d698a:	2c08      	cmp	r4, #8
   d698c:	d002      	beq.n	d6994 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d698e:	0840      	lsrs	r0, r0, #1
   d6990:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d6992:	e7f5      	b.n	d6980 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6994:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6996:	4b02      	ldr	r3, [pc, #8]	; (d69a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6998:	5d5b      	ldrb	r3, [r3, r5]
   d699a:	7013      	strb	r3, [r2, #0]
   d699c:	bd30      	pop	{r4, r5, pc}
   d699e:	bf00      	nop
   d69a0:	000d8e88 	.word	0x000d8e88

000d69a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d69a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d69a8:	4607      	mov	r7, r0
   d69aa:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d69ac:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d69ae:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d69b0:	f7ff ffbe 	bl	d6930 <_ZN8SPIClass4lockEv.isra.0>
   d69b4:	2800      	cmp	r0, #0
   d69b6:	db62      	blt.n	d6a7e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d69b8:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d69ba:	2214      	movs	r2, #20
   d69bc:	2100      	movs	r1, #0
   d69be:	a809      	add	r0, sp, #36	; 0x24
   d69c0:	f001 ff1d 	bl	d87fe <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d69c4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d69c6:	4620      	mov	r0, r4
   d69c8:	2200      	movs	r2, #0
   d69ca:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d69cc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d69d0:	f7ff fd1c 	bl	d640c <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d69d4:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d69d8:	b154      	cbz	r4, d69f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d69da:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d69de:	b935      	cbnz	r5, d69ee <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d69e0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d69e4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d69e8:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d69ec:	e003      	b.n	d69f6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d69ee:	2400      	movs	r4, #0
   d69f0:	46a1      	mov	r9, r4
   d69f2:	46a0      	mov	r8, r4
   d69f4:	2501      	movs	r5, #1
   d69f6:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d69f8:	b105      	cbz	r5, d69fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d69fa:	b9bb      	cbnz	r3, d6a2c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d69fc:	429d      	cmp	r5, r3
   d69fe:	d10b      	bne.n	d6a18 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d6a00:	68b2      	ldr	r2, [r6, #8]
   d6a02:	4542      	cmp	r2, r8
   d6a04:	d108      	bne.n	d6a18 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6a06:	f88d 9020 	strb.w	r9, [sp, #32]
   d6a0a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6a0e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d6a12:	89b2      	ldrh	r2, [r6, #12]
   d6a14:	4291      	cmp	r1, r2
   d6a16:	d009      	beq.n	d6a2c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6a18:	b153      	cbz	r3, d6a30 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6a1a:	2400      	movs	r4, #0
   d6a1c:	7838      	ldrb	r0, [r7, #0]
   d6a1e:	9401      	str	r4, [sp, #4]
   d6a20:	9400      	str	r4, [sp, #0]
   d6a22:	4623      	mov	r3, r4
   d6a24:	4622      	mov	r2, r4
   d6a26:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6a28:	f7ff fd08 	bl	d643c <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d6a2c:	2000      	movs	r0, #0
   d6a2e:	e026      	b.n	d6a7e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d6a30:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6a34:	68b1      	ldr	r1, [r6, #8]
   d6a36:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6a38:	ab04      	add	r3, sp, #16
   d6a3a:	f10d 020f 	add.w	r2, sp, #15
   d6a3e:	f7ff ff9b 	bl	d6978 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d6a42:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6a44:	b105      	cbz	r5, d6a48 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6a46:	b9b1      	cbnz	r1, d6a76 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6a48:	42a9      	cmp	r1, r5
   d6a4a:	d008      	beq.n	d6a5e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6a4c:	2400      	movs	r4, #0
   d6a4e:	7838      	ldrb	r0, [r7, #0]
   d6a50:	9401      	str	r4, [sp, #4]
   d6a52:	7b74      	ldrb	r4, [r6, #13]
   d6a54:	7b33      	ldrb	r3, [r6, #12]
   d6a56:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6a5a:	9400      	str	r4, [sp, #0]
   d6a5c:	e7e4      	b.n	d6a28 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d6a5e:	68b3      	ldr	r3, [r6, #8]
   d6a60:	4543      	cmp	r3, r8
   d6a62:	d3f3      	bcc.n	d6a4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6a64:	f88d 9020 	strb.w	r9, [sp, #32]
   d6a68:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6a6c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6a70:	89b3      	ldrh	r3, [r6, #12]
   d6a72:	429a      	cmp	r2, r3
   d6a74:	d1ea      	bne.n	d6a4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6a76:	9b04      	ldr	r3, [sp, #16]
   d6a78:	4543      	cmp	r3, r8
   d6a7a:	d1e7      	bne.n	d6a4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6a7c:	e7d6      	b.n	d6a2c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d6a7e:	b00f      	add	sp, #60	; 0x3c
   d6a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6a84 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6a84:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6a86:	7800      	ldrb	r0, [r0, #0]
   d6a88:	f7ff fca8 	bl	d63dc <HAL_SPI_Send_Receive_Data>
}
   d6a8c:	b2c0      	uxtb	r0, r0
   d6a8e:	bd08      	pop	{r3, pc}

000d6a90 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6a90:	b530      	push	{r4, r5, lr}
   d6a92:	b087      	sub	sp, #28
   d6a94:	4604      	mov	r4, r0
   d6a96:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d6a98:	7800      	ldrb	r0, [r0, #0]
   d6a9a:	9500      	str	r5, [sp, #0]
   d6a9c:	f7ff fcbe 	bl	d641c <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d6aa0:	b93d      	cbnz	r5, d6ab2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d6aa2:	a902      	add	r1, sp, #8
   d6aa4:	7820      	ldrb	r0, [r4, #0]
   d6aa6:	f7ff fcc1 	bl	d642c <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d6aaa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6aae:	07db      	lsls	r3, r3, #31
   d6ab0:	d4f7      	bmi.n	d6aa2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d6ab2:	b007      	add	sp, #28
   d6ab4:	bd30      	pop	{r4, r5, pc}

000d6ab6 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6ab6:	7800      	ldrb	r0, [r0, #0]
   d6ab8:	f7ff bca0 	b.w	d63fc <HAL_SPI_Is_Enabled>

000d6abc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6abc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6abe:	4c09      	ldr	r4, [pc, #36]	; (d6ae4 <_GLOBAL__sub_I_System+0x28>)
   d6ac0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6ac6:	6020      	str	r0, [r4, #0]
   d6ac8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6aca:	71a0      	strb	r0, [r4, #6]
   d6acc:	8120      	strh	r0, [r4, #8]
   d6ace:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6ad0:	f7ff fe4c 	bl	d676c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6ad4:	4620      	mov	r0, r4
   d6ad6:	4a04      	ldr	r2, [pc, #16]	; (d6ae8 <_GLOBAL__sub_I_System+0x2c>)
   d6ad8:	4904      	ldr	r1, [pc, #16]	; (d6aec <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6ade:	f001 b8f1 	b.w	d7cc4 <__aeabi_atexit>
   d6ae2:	bf00      	nop
   d6ae4:	2003e3e4 	.word	0x2003e3e4
   d6ae8:	2003dcf0 	.word	0x2003dcf0
   d6aec:	000d41a9 	.word	0x000d41a9

000d6af0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6af0:	b510      	push	{r4, lr}
   d6af2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6af4:	6800      	ldr	r0, [r0, #0]
   d6af6:	b108      	cbz	r0, d6afc <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6af8:	f7ff fd00 	bl	d64fc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6afc:	4620      	mov	r0, r4
   d6afe:	bd10      	pop	{r4, pc}

000d6b00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6b00:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6b02:	4c06      	ldr	r4, [pc, #24]	; (d6b1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6b04:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6b06:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6b08:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6b0a:	f7ff fcef 	bl	d64ec <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6b0e:	4620      	mov	r0, r4
   d6b10:	4a03      	ldr	r2, [pc, #12]	; (d6b20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6b12:	4904      	ldr	r1, [pc, #16]	; (d6b24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6b18:	f001 b8d4 	b.w	d7cc4 <__aeabi_atexit>
   d6b1c:	2003e3f0 	.word	0x2003e3f0
   d6b20:	2003dcf0 	.word	0x2003dcf0
   d6b24:	000d6af1 	.word	0x000d6af1

000d6b28 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b2a:	4606      	mov	r6, r0
   d6b2c:	460d      	mov	r5, r1
   d6b2e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6b30:	2400      	movs	r4, #0
  while (size--) {
   d6b32:	42bd      	cmp	r5, r7
   d6b34:	d00c      	beq.n	d6b50 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6b36:	6833      	ldr	r3, [r6, #0]
   d6b38:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6b3c:	689b      	ldr	r3, [r3, #8]
   d6b3e:	4630      	mov	r0, r6
   d6b40:	4798      	blx	r3
     if (chunk>=0)
   d6b42:	2800      	cmp	r0, #0
   d6b44:	db01      	blt.n	d6b4a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6b46:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6b48:	e7f3      	b.n	d6b32 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6b4a:	2c00      	cmp	r4, #0
   d6b4c:	bf08      	it	eq
   d6b4e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6b50:	4620      	mov	r0, r4
   d6b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b54 <_ZN5Print5printEPKc>:
   d6b54:	b508      	push	{r3, lr}
   d6b56:	f7fe fdf3 	bl	d5740 <_ZN5Print5writeEPKc>
   d6b5a:	bd08      	pop	{r3, pc}

000d6b5c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6b5c:	6803      	ldr	r3, [r0, #0]
   d6b5e:	689b      	ldr	r3, [r3, #8]
   d6b60:	4718      	bx	r3

000d6b62 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b62:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6b64:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b66:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6b68:	f7ff fff8 	bl	d6b5c <_ZN5Print5printEc>
  n += print('\n');
   d6b6c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6b6e:	4604      	mov	r4, r0
  n += print('\n');
   d6b70:	4628      	mov	r0, r5
   d6b72:	f7ff fff3 	bl	d6b5c <_ZN5Print5printEc>
  return n;
}
   d6b76:	4420      	add	r0, r4
   d6b78:	bd38      	pop	{r3, r4, r5, pc}

000d6b7a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6b7a:	b538      	push	{r3, r4, r5, lr}
   d6b7c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6b7e:	f7fe fddf 	bl	d5740 <_ZN5Print5writeEPKc>
   d6b82:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6b84:	4628      	mov	r0, r5
   d6b86:	f7ff ffec 	bl	d6b62 <_ZN5Print7printlnEv>
  return n;
}
   d6b8a:	4420      	add	r0, r4
   d6b8c:	bd38      	pop	{r3, r4, r5, pc}

000d6b8e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6b8e:	b530      	push	{r4, r5, lr}
   d6b90:	b08b      	sub	sp, #44	; 0x2c
   d6b92:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6b94:	2100      	movs	r1, #0
   d6b96:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6b9a:	2a01      	cmp	r2, #1
   d6b9c:	bf98      	it	ls
   d6b9e:	220a      	movls	r2, #10
   d6ba0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6ba4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6ba8:	fb05 3312 	mls	r3, r5, r2, r3
   d6bac:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6bb0:	2b09      	cmp	r3, #9
   d6bb2:	bf94      	ite	ls
   d6bb4:	3330      	addls	r3, #48	; 0x30
   d6bb6:	3337      	addhi	r3, #55	; 0x37
   d6bb8:	b2db      	uxtb	r3, r3
   d6bba:	4621      	mov	r1, r4
   d6bbc:	f804 3901 	strb.w	r3, [r4], #-1
   d6bc0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6bc2:	2d00      	cmp	r5, #0
   d6bc4:	d1ee      	bne.n	d6ba4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6bc6:	f7fe fdbb 	bl	d5740 <_ZN5Print5writeEPKc>
}
   d6bca:	b00b      	add	sp, #44	; 0x2c
   d6bcc:	bd30      	pop	{r4, r5, pc}

000d6bce <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6bce:	b40c      	push	{r2, r3}
   d6bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6bd4:	b087      	sub	sp, #28
   d6bd6:	af00      	add	r7, sp, #0
   d6bd8:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6bdc:	4605      	mov	r5, r0
   d6bde:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6be2:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6be4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6be6:	4623      	mov	r3, r4
   d6be8:	464a      	mov	r2, r9
   d6bea:	2114      	movs	r1, #20
   d6bec:	1d38      	adds	r0, r7, #4
   d6bee:	f7ff fe51 	bl	d6894 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6bf2:	2813      	cmp	r0, #19
   d6bf4:	d805      	bhi.n	d6c02 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6bf6:	1d39      	adds	r1, r7, #4
   d6bf8:	4628      	mov	r0, r5
   d6bfa:	f7fe fda1 	bl	d5740 <_ZN5Print5writeEPKc>
   d6bfe:	4604      	mov	r4, r0
   d6c00:	e013      	b.n	d6c2a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6c02:	f100 0308 	add.w	r3, r0, #8
   d6c06:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6c0a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6c0c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6c10:	1c41      	adds	r1, r0, #1
   d6c12:	4623      	mov	r3, r4
   d6c14:	464a      	mov	r2, r9
   d6c16:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6c18:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6c1a:	f7ff fe3b 	bl	d6894 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6c1e:	4669      	mov	r1, sp
   d6c20:	4628      	mov	r0, r5
   d6c22:	f7fe fd8d 	bl	d5740 <_ZN5Print5writeEPKc>
   d6c26:	4604      	mov	r4, r0
   d6c28:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6c2a:	b11e      	cbz	r6, d6c34 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6c2c:	4628      	mov	r0, r5
   d6c2e:	f7ff ff98 	bl	d6b62 <_ZN5Print7printlnEv>
   d6c32:	4404      	add	r4, r0
    return n;
}
   d6c34:	4620      	mov	r0, r4
   d6c36:	371c      	adds	r7, #28
   d6c38:	46bd      	mov	sp, r7
   d6c3a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c3e:	b002      	add	sp, #8
   d6c40:	4770      	bx	lr
	...

000d6c44 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6c44:	4b01      	ldr	r3, [pc, #4]	; (d6c4c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6c46:	4a02      	ldr	r2, [pc, #8]	; (d6c50 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6c48:	601a      	str	r2, [r3, #0]
   d6c4a:	4770      	bx	lr
   d6c4c:	2003e3f4 	.word	0x2003e3f4
   d6c50:	000d8f03 	.word	0x000d8f03

000d6c54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6c54:	4b02      	ldr	r3, [pc, #8]	; (d6c60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6c56:	681a      	ldr	r2, [r3, #0]
   d6c58:	4b02      	ldr	r3, [pc, #8]	; (d6c64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6c5a:	601a      	str	r2, [r3, #0]
   d6c5c:	4770      	bx	lr
   d6c5e:	bf00      	nop
   d6c60:	2003dc88 	.word	0x2003dc88
   d6c64:	2003e3f8 	.word	0x2003e3f8

000d6c68 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d6c68:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d6c6a:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d6c6c:	d007      	beq.n	d6c7e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d6c6e:	9d03      	ldr	r5, [sp, #12]
   d6c70:	1a44      	subs	r4, r0, r1
   d6c72:	1aed      	subs	r5, r5, r3
   d6c74:	436c      	muls	r4, r5
   d6c76:	1a52      	subs	r2, r2, r1
   d6c78:	fb94 f4f2 	sdiv	r4, r4, r2
   d6c7c:	18e0      	adds	r0, r4, r3
}
   d6c7e:	bd30      	pop	{r4, r5, pc}

000d6c80 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6c80:	2100      	movs	r1, #0
   d6c82:	f7ff bd7b 	b.w	d677c <system_delay_ms>

000d6c86 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6c86:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6c88:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6c8a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6c8c:	b113      	cbz	r3, d6c94 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6c8e:	2203      	movs	r2, #3
   d6c90:	4601      	mov	r1, r0
   d6c92:	4798      	blx	r3
    }
   d6c94:	4620      	mov	r0, r4
   d6c96:	bd10      	pop	{r4, pc}

000d6c98 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6c98:	b510      	push	{r4, lr}
   d6c9a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6c9c:	f7ff fff3 	bl	d6c86 <_ZNSt14_Function_baseD1Ev>
   d6ca0:	4620      	mov	r0, r4
   d6ca2:	bd10      	pop	{r4, pc}

000d6ca4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ca4:	4803      	ldr	r0, [pc, #12]	; (d6cb4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6ca6:	4a04      	ldr	r2, [pc, #16]	; (d6cb8 <_GLOBAL__sub_I_RGB+0x14>)
   d6ca8:	4904      	ldr	r1, [pc, #16]	; (d6cbc <_GLOBAL__sub_I_RGB+0x18>)
   d6caa:	2300      	movs	r3, #0
   d6cac:	6083      	str	r3, [r0, #8]
   d6cae:	f001 b809 	b.w	d7cc4 <__aeabi_atexit>
   d6cb2:	bf00      	nop
   d6cb4:	2003e3fc 	.word	0x2003e3fc
   d6cb8:	2003dcf0 	.word	0x2003dcf0
   d6cbc:	000d6c99 	.word	0x000d6c99

000d6cc0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6cc0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6cc2:	4b0c      	ldr	r3, [pc, #48]	; (d6cf4 <serialEventRun+0x34>)
   d6cc4:	b133      	cbz	r3, d6cd4 <serialEventRun+0x14>
   d6cc6:	f000 f96d 	bl	d6fa4 <_Z16_fetch_usbserialv>
   d6cca:	6803      	ldr	r3, [r0, #0]
   d6ccc:	691b      	ldr	r3, [r3, #16]
   d6cce:	4798      	blx	r3
   d6cd0:	2800      	cmp	r0, #0
   d6cd2:	dc09      	bgt.n	d6ce8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6cd4:	4b08      	ldr	r3, [pc, #32]	; (d6cf8 <serialEventRun+0x38>)
   d6cd6:	b163      	cbz	r3, d6cf2 <serialEventRun+0x32>
   d6cd8:	f000 fa16 	bl	d7108 <_Z22__fetch_global_Serial1v>
   d6cdc:	6803      	ldr	r3, [r0, #0]
   d6cde:	691b      	ldr	r3, [r3, #16]
   d6ce0:	4798      	blx	r3
   d6ce2:	2800      	cmp	r0, #0
   d6ce4:	dc03      	bgt.n	d6cee <serialEventRun+0x2e>
   d6ce6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6ce8:	f3af 8000 	nop.w
   d6cec:	e7f2      	b.n	d6cd4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6cee:	f3af 8000 	nop.w
   d6cf2:	bd08      	pop	{r3, pc}
	...

000d6cfc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6cfc:	b508      	push	{r3, lr}
	serialEventRun();
   d6cfe:	f7ff ffdf 	bl	d6cc0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6d02:	f7ff fbd3 	bl	d64ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6d06:	4b01      	ldr	r3, [pc, #4]	; (d6d0c <_post_loop+0x10>)
   d6d08:	6018      	str	r0, [r3, #0]
   d6d0a:	bd08      	pop	{r3, pc}
   d6d0c:	2003e730 	.word	0x2003e730

000d6d10 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6d10:	4802      	ldr	r0, [pc, #8]	; (d6d1c <_Z33system_initialize_user_backup_ramv+0xc>)
   d6d12:	4a03      	ldr	r2, [pc, #12]	; (d6d20 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6d14:	4903      	ldr	r1, [pc, #12]	; (d6d24 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6d16:	1a12      	subs	r2, r2, r0
   d6d18:	f001 bd66 	b.w	d87e8 <memcpy>
   d6d1c:	2003f400 	.word	0x2003f400
   d6d20:	2003f404 	.word	0x2003f404
   d6d24:	000d9250 	.word	0x000d9250

000d6d28 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6d28:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6d2a:	2300      	movs	r3, #0
   d6d2c:	9300      	str	r3, [sp, #0]
   d6d2e:	461a      	mov	r2, r3
   d6d30:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6d34:	f7ff fd34 	bl	d67a0 <system_ctrl_set_result>
}
   d6d38:	b003      	add	sp, #12
   d6d3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6d40 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6d40:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6d42:	8843      	ldrh	r3, [r0, #2]
   d6d44:	2b0a      	cmp	r3, #10
   d6d46:	d008      	beq.n	d6d5a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6d48:	2b50      	cmp	r3, #80	; 0x50
   d6d4a:	d109      	bne.n	d6d60 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6d4c:	4b09      	ldr	r3, [pc, #36]	; (d6d74 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6d4e:	681b      	ldr	r3, [r3, #0]
   d6d50:	b13b      	cbz	r3, d6d62 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6d52:	b003      	add	sp, #12
   d6d54:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6d58:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6d5a:	f7ff ffe5 	bl	d6d28 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6d5e:	e006      	b.n	d6d6e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6d60:	2300      	movs	r3, #0
   d6d62:	9300      	str	r3, [sp, #0]
   d6d64:	461a      	mov	r2, r3
   d6d66:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6d6a:	f7ff fd19 	bl	d67a0 <system_ctrl_set_result>
        break;
    }
}
   d6d6e:	b003      	add	sp, #12
   d6d70:	f85d fb04 	ldr.w	pc, [sp], #4
   d6d74:	2003e40c 	.word	0x2003e40c

000d6d78 <module_user_init_hook>:

void module_user_init_hook()
{
   d6d78:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6d7a:	4c10      	ldr	r4, [pc, #64]	; (d6dbc <module_user_init_hook+0x44>)
   d6d7c:	4d10      	ldr	r5, [pc, #64]	; (d6dc0 <module_user_init_hook+0x48>)
   d6d7e:	6823      	ldr	r3, [r4, #0]
   d6d80:	42ab      	cmp	r3, r5
   d6d82:	4b10      	ldr	r3, [pc, #64]	; (d6dc4 <module_user_init_hook+0x4c>)
   d6d84:	bf0c      	ite	eq
   d6d86:	2201      	moveq	r2, #1
   d6d88:	2200      	movne	r2, #0
   d6d8a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6d8c:	d002      	beq.n	d6d94 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6d8e:	f7ff ffbf 	bl	d6d10 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6d92:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6d94:	f7ff fb72 	bl	d647c <HAL_RNG_GetRandomNumber>
   d6d98:	4604      	mov	r4, r0
    srand(seed);
   d6d9a:	f001 fd39 	bl	d8810 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6d9e:	4b0a      	ldr	r3, [pc, #40]	; (d6dc8 <module_user_init_hook+0x50>)
   d6da0:	b113      	cbz	r3, d6da8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6da2:	4620      	mov	r0, r4
   d6da4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6da8:	2100      	movs	r1, #0
   d6daa:	4807      	ldr	r0, [pc, #28]	; (d6dc8 <module_user_init_hook+0x50>)
   d6dac:	f7ff fd5a 	bl	d6864 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6db0:	2100      	movs	r1, #0
   d6db2:	4806      	ldr	r0, [pc, #24]	; (d6dcc <module_user_init_hook+0x54>)
}
   d6db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6db8:	f7ff bce8 	b.w	d678c <system_ctrl_set_app_request_handler>
   d6dbc:	2003f400 	.word	0x2003f400
   d6dc0:	9a271c1e 	.word	0x9a271c1e
   d6dc4:	2003e410 	.word	0x2003e410
   d6dc8:	00000000 	.word	0x00000000
   d6dcc:	000d6d41 	.word	0x000d6d41

000d6dd0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6dd0:	4770      	bx	lr

000d6dd2 <_ZN9IPAddressD0Ev>:
   d6dd2:	b510      	push	{r4, lr}
   d6dd4:	2118      	movs	r1, #24
   d6dd6:	4604      	mov	r4, r0
   d6dd8:	f000 ff82 	bl	d7ce0 <_ZdlPvj>
   d6ddc:	4620      	mov	r0, r4
   d6dde:	bd10      	pop	{r4, pc}

000d6de0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6de0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6de2:	7d03      	ldrb	r3, [r0, #20]
   d6de4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6de6:	b08d      	sub	sp, #52	; 0x34
   d6de8:	460e      	mov	r6, r1
   d6dea:	f100 0704 	add.w	r7, r0, #4
   d6dee:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6df2:	d002      	beq.n	d6dfa <_ZNK9IPAddress7printToER5Print+0x1a>
   d6df4:	f100 0508 	add.w	r5, r0, #8
   d6df8:	e018      	b.n	d6e2c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6dfa:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6dfc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6dfe:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e02:	232f      	movs	r3, #47	; 0x2f
   d6e04:	462a      	mov	r2, r5
   d6e06:	200a      	movs	r0, #10
   d6e08:	f7ff fb80 	bl	d650c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e0c:	4628      	mov	r0, r5
   d6e0e:	f001 fd2f 	bl	d8870 <strlen>
   d6e12:	6833      	ldr	r3, [r6, #0]
   d6e14:	4602      	mov	r2, r0
   d6e16:	68db      	ldr	r3, [r3, #12]
   d6e18:	4629      	mov	r1, r5
   d6e1a:	4630      	mov	r0, r6
   d6e1c:	4798      	blx	r3
   d6e1e:	e00f      	b.n	d6e40 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6e20:	b124      	cbz	r4, d6e2c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6e22:	212e      	movs	r1, #46	; 0x2e
   d6e24:	4630      	mov	r0, r6
   d6e26:	f7ff fe99 	bl	d6b5c <_ZN5Print5printEc>
   d6e2a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6e2c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6e30:	220a      	movs	r2, #10
   d6e32:	4630      	mov	r0, r6
   d6e34:	f7ff feab 	bl	d6b8e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e38:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e3a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6e3c:	d1f0      	bne.n	d6e20 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6e3e:	4620      	mov	r0, r4
    }
    return n;
}
   d6e40:	b00d      	add	sp, #52	; 0x34
   d6e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6e44 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6e44:	b510      	push	{r4, lr}
   d6e46:	4b05      	ldr	r3, [pc, #20]	; (d6e5c <_ZN9IPAddressC1Ev+0x18>)
   d6e48:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6e4a:	2211      	movs	r2, #17
   d6e4c:	f840 3b04 	str.w	r3, [r0], #4
   d6e50:	2100      	movs	r1, #0
   d6e52:	f001 fcd4 	bl	d87fe <memset>
{
    clear();
}
   d6e56:	4620      	mov	r0, r4
   d6e58:	bd10      	pop	{r4, pc}
   d6e5a:	bf00      	nop
   d6e5c:	000d8f94 	.word	0x000d8f94

000d6e60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6e60:	4603      	mov	r3, r0
   d6e62:	4a07      	ldr	r2, [pc, #28]	; (d6e80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6e64:	b510      	push	{r4, lr}
   d6e66:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6e6a:	f101 0210 	add.w	r2, r1, #16
   d6e6e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6e72:	f843 4b04 	str.w	r4, [r3], #4
   d6e76:	4291      	cmp	r1, r2
   d6e78:	d1f9      	bne.n	d6e6e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6e7a:	780a      	ldrb	r2, [r1, #0]
   d6e7c:	701a      	strb	r2, [r3, #0]
}
   d6e7e:	bd10      	pop	{r4, pc}
   d6e80:	000d8f94 	.word	0x000d8f94

000d6e84 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6e84:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6e86:	2b04      	cmp	r3, #4
   d6e88:	d101      	bne.n	d6e8e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6e8a:	6840      	ldr	r0, [r0, #4]
   d6e8c:	e008      	b.n	d6ea0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6e8e:	2b06      	cmp	r3, #6
   d6e90:	d10a      	bne.n	d6ea8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6e92:	6843      	ldr	r3, [r0, #4]
   d6e94:	b953      	cbnz	r3, d6eac <_ZNK9IPAddresscvbEv+0x28>
   d6e96:	6883      	ldr	r3, [r0, #8]
   d6e98:	b943      	cbnz	r3, d6eac <_ZNK9IPAddresscvbEv+0x28>
   d6e9a:	68c3      	ldr	r3, [r0, #12]
   d6e9c:	b933      	cbnz	r3, d6eac <_ZNK9IPAddresscvbEv+0x28>
   d6e9e:	6900      	ldr	r0, [r0, #16]
   d6ea0:	3000      	adds	r0, #0
   d6ea2:	bf18      	it	ne
   d6ea4:	2001      	movne	r0, #1
   d6ea6:	4770      	bx	lr
    } else {
        return false;
   d6ea8:	2000      	movs	r0, #0
   d6eaa:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6eac:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d6eae:	4770      	bx	lr

000d6eb0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6eb0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6eb2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6eb6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6eba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6ebe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6ec2:	2304      	movs	r3, #4
   d6ec4:	6041      	str	r1, [r0, #4]
   d6ec6:	7503      	strb	r3, [r0, #20]
   d6ec8:	bd10      	pop	{r4, pc}

000d6eca <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6eca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6ecc:	780d      	ldrb	r5, [r1, #0]
   d6ece:	788b      	ldrb	r3, [r1, #2]
   d6ed0:	784a      	ldrb	r2, [r1, #1]
   d6ed2:	78c9      	ldrb	r1, [r1, #3]
   d6ed4:	9100      	str	r1, [sp, #0]
   d6ed6:	4629      	mov	r1, r5
   d6ed8:	f7ff ffea 	bl	d6eb0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6edc:	b003      	add	sp, #12
   d6ede:	bd30      	pop	{r4, r5, pc}

000d6ee0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ee0:	7441      	strb	r1, [r0, #17]
   d6ee2:	4770      	bx	lr

000d6ee4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6ee4:	4770      	bx	lr

000d6ee6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6ee6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6ee8:	2100      	movs	r1, #0
   d6eea:	7c00      	ldrb	r0, [r0, #16]
   d6eec:	f7ff fc16 	bl	d671c <HAL_USB_USART_Receive_Data>
}
   d6ef0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6ef4:	bf28      	it	cs
   d6ef6:	f04f 30ff 	movcs.w	r0, #4294967295
   d6efa:	bd08      	pop	{r3, pc}

000d6efc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6efc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6efe:	2101      	movs	r1, #1
   d6f00:	7c00      	ldrb	r0, [r0, #16]
   d6f02:	f7ff fc0b 	bl	d671c <HAL_USB_USART_Receive_Data>
}
   d6f06:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f0a:	bf28      	it	cs
   d6f0c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f10:	bd08      	pop	{r3, pc}

000d6f12 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6f12:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6f14:	7c00      	ldrb	r0, [r0, #16]
   d6f16:	f7ff fbf9 	bl	d670c <HAL_USB_USART_Available_Data_For_Write>
}
   d6f1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f1e:	bd08      	pop	{r3, pc}

000d6f20 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6f20:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6f22:	7c00      	ldrb	r0, [r0, #16]
   d6f24:	f7ff fbea 	bl	d66fc <HAL_USB_USART_Available_Data>
}
   d6f28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f2c:	bd08      	pop	{r3, pc}

000d6f2e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6f2e:	7c00      	ldrb	r0, [r0, #16]
   d6f30:	f7ff bc04 	b.w	d673c <HAL_USB_USART_Flush_Data>

000d6f34 <_ZN9USBSerialD0Ev>:
   d6f34:	b510      	push	{r4, lr}
   d6f36:	2114      	movs	r1, #20
   d6f38:	4604      	mov	r4, r0
   d6f3a:	f000 fed1 	bl	d7ce0 <_ZdlPvj>
   d6f3e:	4620      	mov	r0, r4
   d6f40:	bd10      	pop	{r4, pc}

000d6f42 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f42:	b538      	push	{r3, r4, r5, lr}
   d6f44:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f46:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f48:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f4a:	f7ff fbdf 	bl	d670c <HAL_USB_USART_Available_Data_For_Write>
   d6f4e:	2800      	cmp	r0, #0
   d6f50:	dc01      	bgt.n	d6f56 <_ZN9USBSerial5writeEh+0x14>
   d6f52:	7c60      	ldrb	r0, [r4, #17]
   d6f54:	b128      	cbz	r0, d6f62 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6f56:	4629      	mov	r1, r5
   d6f58:	7c20      	ldrb	r0, [r4, #16]
   d6f5a:	f7ff fbe7 	bl	d672c <HAL_USB_USART_Send_Data>
   d6f5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6f62:	bd38      	pop	{r3, r4, r5, pc}

000d6f64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6f64:	b510      	push	{r4, lr}
   d6f66:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6f68:	2300      	movs	r3, #0
   d6f6a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6f70:	60a3      	str	r3, [r4, #8]
   d6f72:	4b05      	ldr	r3, [pc, #20]	; (d6f88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6f74:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6f76:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6f78:	4608      	mov	r0, r1
{
  _serial = serial;
   d6f7a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6f7c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6f7e:	4611      	mov	r1, r2
   d6f80:	f7ff fbac 	bl	d66dc <HAL_USB_USART_Init>
}
   d6f84:	4620      	mov	r0, r4
   d6f86:	bd10      	pop	{r4, pc}
   d6f88:	000d8fa8 	.word	0x000d8fa8

000d6f8c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6f8c:	2200      	movs	r2, #0
   d6f8e:	7c00      	ldrb	r0, [r0, #16]
   d6f90:	f7ff bbac 	b.w	d66ec <HAL_USB_USART_Begin>

000d6f94 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6f94:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6f96:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6f98:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6f9a:	2100      	movs	r1, #0
   d6f9c:	f001 fc2f 	bl	d87fe <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6fa0:	4620      	mov	r0, r4
   d6fa2:	bd10      	pop	{r4, pc}

000d6fa4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6fa4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6fa6:	4d0e      	ldr	r5, [pc, #56]	; (d6fe0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6fa8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6faa:	a801      	add	r0, sp, #4
   d6fac:	f7ff fff2 	bl	d6f94 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6fb0:	6829      	ldr	r1, [r5, #0]
   d6fb2:	f011 0401 	ands.w	r4, r1, #1
   d6fb6:	d110      	bne.n	d6fda <_Z16_fetch_usbserialv+0x36>
   d6fb8:	4628      	mov	r0, r5
   d6fba:	f7fd f87d 	bl	d40b8 <__cxa_guard_acquire>
   d6fbe:	b160      	cbz	r0, d6fda <_Z16_fetch_usbserialv+0x36>
   d6fc0:	aa01      	add	r2, sp, #4
   d6fc2:	4621      	mov	r1, r4
   d6fc4:	4807      	ldr	r0, [pc, #28]	; (d6fe4 <_Z16_fetch_usbserialv+0x40>)
   d6fc6:	f7ff ffcd 	bl	d6f64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6fca:	4628      	mov	r0, r5
   d6fcc:	f7fd f879 	bl	d40c2 <__cxa_guard_release>
   d6fd0:	4a05      	ldr	r2, [pc, #20]	; (d6fe8 <_Z16_fetch_usbserialv+0x44>)
   d6fd2:	4906      	ldr	r1, [pc, #24]	; (d6fec <_Z16_fetch_usbserialv+0x48>)
   d6fd4:	4803      	ldr	r0, [pc, #12]	; (d6fe4 <_Z16_fetch_usbserialv+0x40>)
   d6fd6:	f000 fe75 	bl	d7cc4 <__aeabi_atexit>
	return _usbserial;
}
   d6fda:	4802      	ldr	r0, [pc, #8]	; (d6fe4 <_Z16_fetch_usbserialv+0x40>)
   d6fdc:	b007      	add	sp, #28
   d6fde:	bd30      	pop	{r4, r5, pc}
   d6fe0:	2003e414 	.word	0x2003e414
   d6fe4:	2003e418 	.word	0x2003e418
   d6fe8:	2003dcf0 	.word	0x2003dcf0
   d6fec:	000d6ee5 	.word	0x000d6ee5

000d6ff0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d6ff0:	4700      	bx	r0
	...

000d6ff4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ff6:	b085      	sub	sp, #20
   d6ff8:	461c      	mov	r4, r3
   d6ffa:	460e      	mov	r6, r1
   d6ffc:	4617      	mov	r7, r2
   d6ffe:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d7000:	f7ff f9d4 	bl	d63ac <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d7004:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d7006:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7008:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d700c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d700e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d7012:	bfa5      	ittet	ge
   d7014:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7018:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d701c:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d701e:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7020:	9300      	str	r3, [sp, #0]
   d7022:	4632      	mov	r2, r6
   d7024:	463b      	mov	r3, r7
   d7026:	4906      	ldr	r1, [pc, #24]	; (d7040 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7028:	bfa8      	it	ge
   d702a:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d702e:	4628      	mov	r0, r5
   d7030:	f7ff f9b4 	bl	d639c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7034:	fab0 f080 	clz	r0, r0
   d7038:	0940      	lsrs	r0, r0, #5
   d703a:	b005      	add	sp, #20
   d703c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d703e:	bf00      	nop
   d7040:	000d6ff1 	.word	0x000d6ff1

000d7044 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7044:	4770      	bx	lr

000d7046 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7046:	7441      	strb	r1, [r0, #17]
   d7048:	4770      	bx	lr

000d704a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d704a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d704c:	7c00      	ldrb	r0, [r0, #16]
   d704e:	f7ff faad 	bl	d65ac <HAL_USART_Available_Data_For_Write>
}
   d7052:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7056:	bd08      	pop	{r3, pc}

000d7058 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7058:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d705a:	7c00      	ldrb	r0, [r0, #16]
   d705c:	f7ff fa7e 	bl	d655c <HAL_USART_Available_Data>
}
   d7060:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7064:	bd08      	pop	{r3, pc}

000d7066 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7066:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7068:	7c00      	ldrb	r0, [r0, #16]
   d706a:	f7ff fa87 	bl	d657c <HAL_USART_Peek_Data>
}
   d706e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7072:	bf28      	it	cs
   d7074:	f04f 30ff 	movcs.w	r0, #4294967295
   d7078:	bd08      	pop	{r3, pc}

000d707a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d707a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d707c:	7c00      	ldrb	r0, [r0, #16]
   d707e:	f7ff fa75 	bl	d656c <HAL_USART_Read_Data>
}
   d7082:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7086:	bf28      	it	cs
   d7088:	f04f 30ff 	movcs.w	r0, #4294967295
   d708c:	bd08      	pop	{r3, pc}

000d708e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d708e:	7c00      	ldrb	r0, [r0, #16]
   d7090:	f7ff ba7c 	b.w	d658c <HAL_USART_Flush_Data>

000d7094 <_ZN11USARTSerialD0Ev>:
   d7094:	b510      	push	{r4, lr}
   d7096:	2114      	movs	r1, #20
   d7098:	4604      	mov	r4, r0
   d709a:	f000 fe21 	bl	d7ce0 <_ZdlPvj>
   d709e:	4620      	mov	r0, r4
   d70a0:	bd10      	pop	{r4, pc}

000d70a2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d70a2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d70a4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d70a6:	4604      	mov	r4, r0
   d70a8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d70aa:	b925      	cbnz	r5, d70b6 <_ZN11USARTSerial5writeEh+0x14>
   d70ac:	7c00      	ldrb	r0, [r0, #16]
   d70ae:	f7ff fa7d 	bl	d65ac <HAL_USART_Available_Data_For_Write>
   d70b2:	2800      	cmp	r0, #0
   d70b4:	dd05      	ble.n	d70c2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d70b6:	4631      	mov	r1, r6
   d70b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d70ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d70be:	f7ff ba45 	b.w	d654c <HAL_USART_Write_Data>
  }
  return 0;
}
   d70c2:	4628      	mov	r0, r5
   d70c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d70c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d70c8:	b510      	push	{r4, lr}
   d70ca:	4604      	mov	r4, r0
   d70cc:	4608      	mov	r0, r1
   d70ce:	4611      	mov	r1, r2
   d70d0:	2200      	movs	r2, #0
   d70d2:	6062      	str	r2, [r4, #4]
   d70d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d70d8:	60a2      	str	r2, [r4, #8]
   d70da:	4a05      	ldr	r2, [pc, #20]	; (d70f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d70dc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d70de:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d70e0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d70e2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d70e4:	461a      	mov	r2, r3
   d70e6:	f7ff fa29 	bl	d653c <HAL_USART_Init>
}
   d70ea:	4620      	mov	r0, r4
   d70ec:	bd10      	pop	{r4, pc}
   d70ee:	bf00      	nop
   d70f0:	000d8fd8 	.word	0x000d8fd8

000d70f4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d70f4:	2300      	movs	r3, #0
   d70f6:	7c00      	ldrb	r0, [r0, #16]
   d70f8:	f7ff ba60 	b.w	d65bc <HAL_USART_BeginConfig>

000d70fc <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d70fc:	2200      	movs	r2, #0
   d70fe:	f7ff bff9 	b.w	d70f4 <_ZN11USARTSerial5beginEmm>

000d7102 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7102:	7c00      	ldrb	r0, [r0, #16]
   d7104:	f7ff ba4a 	b.w	d659c <HAL_USART_Is_Enabled>

000d7108 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7108:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d710a:	4d0c      	ldr	r5, [pc, #48]	; (d713c <_Z22__fetch_global_Serial1v+0x34>)
   d710c:	6829      	ldr	r1, [r5, #0]
   d710e:	f011 0401 	ands.w	r4, r1, #1
   d7112:	d111      	bne.n	d7138 <_Z22__fetch_global_Serial1v+0x30>
   d7114:	4628      	mov	r0, r5
   d7116:	f7fc ffcf 	bl	d40b8 <__cxa_guard_acquire>
   d711a:	b168      	cbz	r0, d7138 <_Z22__fetch_global_Serial1v+0x30>
   d711c:	4a08      	ldr	r2, [pc, #32]	; (d7140 <_Z22__fetch_global_Serial1v+0x38>)
   d711e:	4b09      	ldr	r3, [pc, #36]	; (d7144 <_Z22__fetch_global_Serial1v+0x3c>)
   d7120:	4809      	ldr	r0, [pc, #36]	; (d7148 <_Z22__fetch_global_Serial1v+0x40>)
   d7122:	4621      	mov	r1, r4
   d7124:	f7ff ffd0 	bl	d70c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7128:	4628      	mov	r0, r5
   d712a:	f7fc ffca 	bl	d40c2 <__cxa_guard_release>
   d712e:	4a07      	ldr	r2, [pc, #28]	; (d714c <_Z22__fetch_global_Serial1v+0x44>)
   d7130:	4907      	ldr	r1, [pc, #28]	; (d7150 <_Z22__fetch_global_Serial1v+0x48>)
   d7132:	4805      	ldr	r0, [pc, #20]	; (d7148 <_Z22__fetch_global_Serial1v+0x40>)
   d7134:	f000 fdc6 	bl	d7cc4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7138:	4803      	ldr	r0, [pc, #12]	; (d7148 <_Z22__fetch_global_Serial1v+0x40>)
   d713a:	bd38      	pop	{r3, r4, r5, pc}
   d713c:	2003e4c4 	.word	0x2003e4c4
   d7140:	2003e4c8 	.word	0x2003e4c8
   d7144:	2003e440 	.word	0x2003e440
   d7148:	2003e42c 	.word	0x2003e42c
   d714c:	2003dcf0 	.word	0x2003dcf0
   d7150:	000d7045 	.word	0x000d7045

000d7154 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7154:	4770      	bx	lr

000d7156 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7158:	4606      	mov	r6, r0
   d715a:	4615      	mov	r5, r2
   d715c:	460c      	mov	r4, r1
   d715e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7160:	42bc      	cmp	r4, r7
   d7162:	d006      	beq.n	d7172 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7164:	6833      	ldr	r3, [r6, #0]
   d7166:	f814 1b01 	ldrb.w	r1, [r4], #1
   d716a:	689b      	ldr	r3, [r3, #8]
   d716c:	4630      	mov	r0, r6
   d716e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7170:	e7f6      	b.n	d7160 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7172:	4628      	mov	r0, r5
   d7174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7176 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7176:	2200      	movs	r2, #0
   d7178:	7c00      	ldrb	r0, [r0, #16]
   d717a:	f7ff ba3f 	b.w	d65fc <HAL_I2C_Write_Data>

000d717e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d717e:	2100      	movs	r1, #0
   d7180:	7c00      	ldrb	r0, [r0, #16]
   d7182:	f7ff ba43 	b.w	d660c <HAL_I2C_Available_Data>

000d7186 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7186:	2100      	movs	r1, #0
   d7188:	7c00      	ldrb	r0, [r0, #16]
   d718a:	f7ff ba47 	b.w	d661c <HAL_I2C_Read_Data>

000d718e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d718e:	2100      	movs	r1, #0
   d7190:	7c00      	ldrb	r0, [r0, #16]
   d7192:	f7ff ba4b 	b.w	d662c <HAL_I2C_Peek_Data>

000d7196 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7196:	2100      	movs	r1, #0
   d7198:	7c00      	ldrb	r0, [r0, #16]
   d719a:	f7ff ba4f 	b.w	d663c <HAL_I2C_Flush_Data>

000d719e <_ZN7TwoWireD0Ev>:
   d719e:	b510      	push	{r4, lr}
   d71a0:	2114      	movs	r1, #20
   d71a2:	4604      	mov	r4, r0
   d71a4:	f000 fd9c 	bl	d7ce0 <_ZdlPvj>
   d71a8:	4620      	mov	r0, r4
   d71aa:	bd10      	pop	{r4, pc}

000d71ac <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d71ac:	b510      	push	{r4, lr}
   d71ae:	4604      	mov	r4, r0
   d71b0:	2300      	movs	r3, #0
   d71b2:	6063      	str	r3, [r4, #4]
   d71b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d71b8:	60a3      	str	r3, [r4, #8]
   d71ba:	4b04      	ldr	r3, [pc, #16]	; (d71cc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d71bc:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d71be:	4608      	mov	r0, r1
   d71c0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d71c2:	4611      	mov	r1, r2
   d71c4:	f7ff fa4a 	bl	d665c <HAL_I2C_Init>
}
   d71c8:	4620      	mov	r0, r4
   d71ca:	bd10      	pop	{r4, pc}
   d71cc:	000d9008 	.word	0x000d9008

000d71d0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d71d0:	2300      	movs	r3, #0
   d71d2:	461a      	mov	r2, r3
   d71d4:	4619      	mov	r1, r3
   d71d6:	7c00      	ldrb	r0, [r0, #16]
   d71d8:	f7ff b9f8 	b.w	d65cc <HAL_I2C_Begin>

000d71dc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d71dc:	b570      	push	{r4, r5, r6, lr}
   d71de:	460c      	mov	r4, r1
   d71e0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d71e2:	2514      	movs	r5, #20
   d71e4:	4606      	mov	r6, r0
   d71e6:	462a      	mov	r2, r5
   d71e8:	2100      	movs	r1, #0
   d71ea:	a801      	add	r0, sp, #4
   d71ec:	f001 fb07 	bl	d87fe <memset>
   d71f0:	7823      	ldrb	r3, [r4, #0]
   d71f2:	f88d 3008 	strb.w	r3, [sp, #8]
   d71f6:	6863      	ldr	r3, [r4, #4]
   d71f8:	9303      	str	r3, [sp, #12]
   d71fa:	68e3      	ldr	r3, [r4, #12]
   d71fc:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d71fe:	2200      	movs	r2, #0
   d7200:	7a23      	ldrb	r3, [r4, #8]
   d7202:	7c30      	ldrb	r0, [r6, #16]
   d7204:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7208:	a901      	add	r1, sp, #4
   d720a:	9305      	str	r3, [sp, #20]
   d720c:	f7ff fa2e 	bl	d666c <HAL_I2C_Request_Data_Ex>
}
   d7210:	b006      	add	sp, #24
   d7212:	bd70      	pop	{r4, r5, r6, pc}

000d7214 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7216:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7218:	f88d 1000 	strb.w	r1, [sp]
   d721c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7220:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7222:	bf18      	it	ne
   d7224:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7226:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7228:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d722a:	f88d 3008 	strb.w	r3, [sp, #8]
   d722e:	f7ff ffd5 	bl	d71dc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7232:	b005      	add	sp, #20
   d7234:	f85d fb04 	ldr.w	pc, [sp], #4

000d7238 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d7238:	2301      	movs	r3, #1
   d723a:	f7ff bfeb 	b.w	d7214 <_ZN7TwoWire11requestFromEhjh>

000d723e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d723e:	2200      	movs	r2, #0
   d7240:	7c00      	ldrb	r0, [r0, #16]
   d7242:	f7ff b9cb 	b.w	d65dc <HAL_I2C_Begin_Transmission>

000d7246 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7246:	b2c9      	uxtb	r1, r1
   d7248:	f7ff bff9 	b.w	d723e <_ZN7TwoWire17beginTransmissionEh>

000d724c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d724c:	2200      	movs	r2, #0
   d724e:	7c00      	ldrb	r0, [r0, #16]
   d7250:	f7ff b9cc 	b.w	d65ec <HAL_I2C_End_Transmission>

000d7254 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7254:	2101      	movs	r1, #1
   d7256:	f7ff bff9 	b.w	d724c <_ZN7TwoWire15endTransmissionEh>

000d725a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d725a:	2100      	movs	r1, #0
   d725c:	7c00      	ldrb	r0, [r0, #16]
   d725e:	f7ff b9f5 	b.w	d664c <HAL_I2C_Is_Enabled>

000d7262 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7262:	2200      	movs	r2, #0
   d7264:	4611      	mov	r1, r2
   d7266:	6840      	ldr	r0, [r0, #4]
   d7268:	f7ff badc 	b.w	d6824 <network_listening>

000d726c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d726c:	2200      	movs	r2, #0
   d726e:	4611      	mov	r1, r2
   d7270:	6840      	ldr	r0, [r0, #4]
   d7272:	f7ff bae7 	b.w	d6844 <network_get_listen_timeout>

000d7276 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7276:	2200      	movs	r2, #0
   d7278:	6840      	ldr	r0, [r0, #4]
   d727a:	f7ff badb 	b.w	d6834 <network_set_listen_timeout>

000d727e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d727e:	2200      	movs	r2, #0
   d7280:	f081 0101 	eor.w	r1, r1, #1
   d7284:	6840      	ldr	r0, [r0, #4]
   d7286:	f7ff bac5 	b.w	d6814 <network_listen>

000d728a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d728a:	2300      	movs	r3, #0
   d728c:	461a      	mov	r2, r3
   d728e:	2101      	movs	r1, #1
   d7290:	6840      	ldr	r0, [r0, #4]
   d7292:	f7ff bab7 	b.w	d6804 <network_off>

000d7296 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7296:	2300      	movs	r3, #0
   d7298:	461a      	mov	r2, r3
   d729a:	4619      	mov	r1, r3
   d729c:	6840      	ldr	r0, [r0, #4]
   d729e:	f7ff baa9 	b.w	d67f4 <network_on>

000d72a2 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d72a2:	2200      	movs	r2, #0
   d72a4:	4611      	mov	r1, r2
   d72a6:	6840      	ldr	r0, [r0, #4]
   d72a8:	f7ff ba9c 	b.w	d67e4 <network_ready>

000d72ac <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d72ac:	2200      	movs	r2, #0
   d72ae:	4611      	mov	r1, r2
   d72b0:	6840      	ldr	r0, [r0, #4]
   d72b2:	f7ff ba87 	b.w	d67c4 <network_connecting>

000d72b6 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72b6:	2200      	movs	r2, #0
   d72b8:	2102      	movs	r1, #2
   d72ba:	6840      	ldr	r0, [r0, #4]
   d72bc:	f7ff ba8a 	b.w	d67d4 <network_disconnect>

000d72c0 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d72c0:	2300      	movs	r3, #0
   d72c2:	461a      	mov	r2, r3
   d72c4:	6840      	ldr	r0, [r0, #4]
   d72c6:	f7ff ba75 	b.w	d67b4 <network_connect>

000d72ca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d72ca:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72cc:	4605      	mov	r5, r0
   d72ce:	b188      	cbz	r0, d72f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d72d0:	6804      	ldr	r4, [r0, #0]
   d72d2:	b14c      	cbz	r4, d72e8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d72d4:	68a3      	ldr	r3, [r4, #8]
   d72d6:	b11b      	cbz	r3, d72e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d72d8:	2203      	movs	r2, #3
   d72da:	4621      	mov	r1, r4
   d72dc:	4620      	mov	r0, r4
   d72de:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72e0:	2110      	movs	r1, #16
   d72e2:	4620      	mov	r0, r4
   d72e4:	f000 fcfc 	bl	d7ce0 <_ZdlPvj>
   d72e8:	4628      	mov	r0, r5
   d72ea:	2114      	movs	r1, #20
      }
   d72ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72f0:	f000 bcf6 	b.w	d7ce0 <_ZdlPvj>
   d72f4:	bd38      	pop	{r3, r4, r5, pc}

000d72f6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d72f6:	b110      	cbz	r0, d72fe <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d72f8:	6803      	ldr	r3, [r0, #0]
   d72fa:	685b      	ldr	r3, [r3, #4]
   d72fc:	4718      	bx	r3
   d72fe:	4770      	bx	lr

000d7300 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7300:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7302:	6803      	ldr	r3, [r0, #0]
   d7304:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7306:	b1bb      	cbz	r3, d7338 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7308:	6858      	ldr	r0, [r3, #4]
   d730a:	f7ff f8d7 	bl	d64bc <os_thread_is_current>
   d730e:	b978      	cbnz	r0, d7330 <_ZN6ThreadD1Ev+0x30>
   d7310:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7312:	7c5a      	ldrb	r2, [r3, #17]
   d7314:	b912      	cbnz	r2, d731c <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7316:	6858      	ldr	r0, [r3, #4]
   d7318:	f7ff f8d8 	bl	d64cc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d731c:	6823      	ldr	r3, [r4, #0]
   d731e:	6858      	ldr	r0, [r3, #4]
   d7320:	f7ff f8dc 	bl	d64dc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7324:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7326:	2300      	movs	r3, #0
   d7328:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d732a:	b128      	cbz	r0, d7338 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d732c:	f7ff ffcd 	bl	d72ca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7330:	6820      	ldr	r0, [r4, #0]
   d7332:	b108      	cbz	r0, d7338 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7334:	f7ff ffc9 	bl	d72ca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7338:	4620      	mov	r0, r4
   d733a:	bd10      	pop	{r4, pc}

000d733c <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d733c:	b538      	push	{r3, r4, r5, lr}
   d733e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7340:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7344:	b108      	cbz	r0, d734a <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7346:	f7fc feaa 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d734a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d734e:	b108      	cbz	r0, d7354 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7350:	f7ff f8d4 	bl	d64fc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7354:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7358:	b135      	cbz	r5, d7368 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d735a:	4628      	mov	r0, r5
   d735c:	f7ff ffd0 	bl	d7300 <_ZN6ThreadD1Ev>
   d7360:	2104      	movs	r1, #4
   d7362:	4628      	mov	r0, r5
   d7364:	f000 fcbc 	bl	d7ce0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7368:	6820      	ldr	r0, [r4, #0]
   d736a:	b108      	cbz	r0, d7370 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d736c:	f7ff ffc3 	bl	d72f6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7370:	4620      	mov	r0, r4
   d7372:	bd38      	pop	{r3, r4, r5, pc}

000d7374 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7374:	b510      	push	{r4, lr}
   d7376:	4b04      	ldr	r3, [pc, #16]	; (d7388 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7378:	4604      	mov	r4, r0
   d737a:	f840 3b08 	str.w	r3, [r0], #8
   d737e:	f7ff ffdd 	bl	d733c <_ZN5spark11MeshPublishD1Ev>
   d7382:	4620      	mov	r0, r4
   d7384:	bd10      	pop	{r4, pc}
   d7386:	bf00      	nop
   d7388:	000d9030 	.word	0x000d9030

000d738c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d738c:	b538      	push	{r3, r4, r5, lr}
   d738e:	4c0e      	ldr	r4, [pc, #56]	; (d73c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7390:	4b0e      	ldr	r3, [pc, #56]	; (d73cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7392:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7394:	2500      	movs	r5, #0
   d7396:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7398:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d739c:	6063      	str	r3, [r4, #4]
   d739e:	60a5      	str	r5, [r4, #8]
   d73a0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d73a4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d73a8:	f7ff f8a0 	bl	d64ec <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d73ac:	4b08      	ldr	r3, [pc, #32]	; (d73d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d73ae:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d73b2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d73b6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d73b8:	4620      	mov	r0, r4
   d73ba:	4a06      	ldr	r2, [pc, #24]	; (d73d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d73bc:	4906      	ldr	r1, [pc, #24]	; (d73d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d73be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d73c2:	f000 bc7f 	b.w	d7cc4 <__aeabi_atexit>
   d73c6:	bf00      	nop
   d73c8:	2003e54c 	.word	0x2003e54c
   d73cc:	000d9118 	.word	0x000d9118
   d73d0:	000d9030 	.word	0x000d9030
   d73d4:	2003dcf0 	.word	0x2003dcf0
   d73d8:	000d7375 	.word	0x000d7375

000d73dc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d73dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73de:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73e0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d73e2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73e6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d73e8:	2201      	movs	r2, #1
   d73ea:	f04f 33ff 	mov.w	r3, #4294967295
   d73ee:	4621      	mov	r1, r4
   d73f0:	47a8      	blx	r5
}
   d73f2:	b003      	add	sp, #12
   d73f4:	bd30      	pop	{r4, r5, pc}

000d73f6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d73f6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d73f8:	6803      	ldr	r3, [r0, #0]
   d73fa:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d73fc:	f04f 33ff 	mov.w	r3, #4294967295
   d7400:	46a4      	mov	ip, r4
}
   d7402:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7406:	4760      	bx	ip

000d7408 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7408:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d740a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d740c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d740e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7412:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7414:	4621      	mov	r1, r4
   d7416:	4613      	mov	r3, r2
   d7418:	2201      	movs	r2, #1
   d741a:	47a8      	blx	r5
}
   d741c:	b003      	add	sp, #12
   d741e:	bd30      	pop	{r4, r5, pc}

000d7420 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7420:	4770      	bx	lr

000d7422 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7422:	b538      	push	{r3, r4, r5, lr}
   d7424:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7426:	681a      	ldr	r2, [r3, #0]
   d7428:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d742a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d742c:	da05      	bge.n	d743a <_ZN9TCPClient9connectedEv+0x18>
   d742e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7432:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7436:	429a      	cmp	r2, r3
   d7438:	d001      	beq.n	d743e <_ZN9TCPClient9connectedEv+0x1c>
   d743a:	2501      	movs	r5, #1
   d743c:	e00b      	b.n	d7456 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d743e:	6803      	ldr	r3, [r0, #0]
   d7440:	691b      	ldr	r3, [r3, #16]
   d7442:	4798      	blx	r3
   d7444:	2800      	cmp	r0, #0
   d7446:	bf14      	ite	ne
   d7448:	2501      	movne	r5, #1
   d744a:	2500      	moveq	r5, #0
        if (!rv) {
   d744c:	d103      	bne.n	d7456 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d744e:	6823      	ldr	r3, [r4, #0]
   d7450:	4620      	mov	r0, r4
   d7452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7454:	4798      	blx	r3
        }
    }
    return rv;
}
   d7456:	4628      	mov	r0, r5
   d7458:	bd38      	pop	{r3, r4, r5, pc}

000d745a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d745a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d745c:	6818      	ldr	r0, [r3, #0]
}
   d745e:	43c0      	mvns	r0, r0
   d7460:	0fc0      	lsrs	r0, r0, #31
   d7462:	4770      	bx	lr

000d7464 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7464:	4770      	bx	lr

000d7466 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7466:	2000      	movs	r0, #0
   d7468:	4770      	bx	lr

000d746a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d746a:	b510      	push	{r4, lr}
   d746c:	2114      	movs	r1, #20
   d746e:	4604      	mov	r4, r0
   d7470:	f000 fc36 	bl	d7ce0 <_ZdlPvj>
   d7474:	4620      	mov	r0, r4
   d7476:	bd10      	pop	{r4, pc}

000d7478 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7478:	f7fc be0f 	b.w	d409a <_ZdlPv>

000d747c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d747c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d747e:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7480:	2200      	movs	r2, #0
   d7482:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7484:	9202      	str	r2, [sp, #8]
   d7486:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7488:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d748a:	4604      	mov	r4, r0
   d748c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d748e:	d008      	beq.n	d74a2 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7494:	fbb3 f1f2 	udiv	r1, r3, r2
   d7498:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d749a:	fb02 3111 	mls	r1, r2, r1, r3
   d749e:	434a      	muls	r2, r1
   d74a0:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d74a2:	6960      	ldr	r0, [r4, #20]
   d74a4:	2308      	movs	r3, #8
   d74a6:	9300      	str	r3, [sp, #0]
   d74a8:	f241 0205 	movw	r2, #4101	; 0x1005
   d74ac:	446b      	add	r3, sp
   d74ae:	f640 71ff 	movw	r1, #4095	; 0xfff
   d74b2:	6800      	ldr	r0, [r0, #0]
   d74b4:	f7ff f8e2 	bl	d667c <sock_setsockopt>
    if (ret < 0) {
   d74b8:	2800      	cmp	r0, #0
   d74ba:	db08      	blt.n	d74ce <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d74bc:	6960      	ldr	r0, [r4, #20]
   d74be:	2300      	movs	r3, #0
   d74c0:	4632      	mov	r2, r6
   d74c2:	4629      	mov	r1, r5
   d74c4:	6800      	ldr	r0, [r0, #0]
   d74c6:	f7ff f8f9 	bl	d66bc <sock_send>
    if (ret < 0) {
   d74ca:	2800      	cmp	r0, #0
   d74cc:	da04      	bge.n	d74d8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d74ce:	f7ff f9e9 	bl	d68a4 <__errno>
   d74d2:	6803      	ldr	r3, [r0, #0]
   d74d4:	6063      	str	r3, [r4, #4]
   d74d6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d74d8:	b004      	add	sp, #16
   d74da:	bd70      	pop	{r4, r5, r6, pc}

000d74dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74dc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74de:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d74e0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d74e2:	689b      	ldr	r3, [r3, #8]
   d74e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d74e6:	68a3      	ldr	r3, [r4, #8]
   d74e8:	3b01      	subs	r3, #1
   d74ea:	60a3      	str	r3, [r4, #8]
   d74ec:	b92b      	cbnz	r3, d74fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d74ee:	6823      	ldr	r3, [r4, #0]
   d74f0:	4620      	mov	r0, r4
   d74f2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d74f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d74f8:	4718      	bx	r3
   d74fa:	bd10      	pop	{r4, pc}

000d74fc <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d74fc:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d74fe:	4604      	mov	r4, r0
   d7500:	694d      	ldr	r5, [r1, #20]
   d7502:	4b05      	ldr	r3, [pc, #20]	; (d7518 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7504:	f844 3b04 	str.w	r3, [r4], #4
   d7508:	358c      	adds	r5, #140	; 0x8c
   d750a:	4606      	mov	r6, r0
   d750c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d750e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7510:	682b      	ldr	r3, [r5, #0]
   d7512:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7514:	4630      	mov	r0, r6
   d7516:	bd70      	pop	{r4, r5, r6, pc}
   d7518:	000d8f94 	.word	0x000d8f94

000d751c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d751c:	b510      	push	{r4, lr}
   d751e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7520:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7524:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7528:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d752a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d752c:	d005      	beq.n	d753a <_ZN9TCPClient4peekEv+0x1e>
   d752e:	6962      	ldr	r2, [r4, #20]
   d7530:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7534:	4413      	add	r3, r2
   d7536:	7918      	ldrb	r0, [r3, #4]
   d7538:	bd10      	pop	{r4, pc}
   d753a:	6803      	ldr	r3, [r0, #0]
   d753c:	691b      	ldr	r3, [r3, #16]
   d753e:	4798      	blx	r3
   d7540:	2800      	cmp	r0, #0
   d7542:	d1f4      	bne.n	d752e <_ZN9TCPClient4peekEv+0x12>
   d7544:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7548:	bd10      	pop	{r4, pc}

000d754a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d754a:	b510      	push	{r4, lr}
   d754c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d754e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7552:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7556:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7558:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d755a:	d008      	beq.n	d756e <_ZN9TCPClient4readEv+0x24>
   d755c:	6962      	ldr	r2, [r4, #20]
   d755e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7562:	1c59      	adds	r1, r3, #1
   d7564:	4413      	add	r3, r2
   d7566:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d756a:	7918      	ldrb	r0, [r3, #4]
   d756c:	bd10      	pop	{r4, pc}
   d756e:	6803      	ldr	r3, [r0, #0]
   d7570:	691b      	ldr	r3, [r3, #16]
   d7572:	4798      	blx	r3
   d7574:	2800      	cmp	r0, #0
   d7576:	d1f1      	bne.n	d755c <_ZN9TCPClient4readEv+0x12>
   d7578:	f04f 30ff 	mov.w	r0, #4294967295
}
   d757c:	bd10      	pop	{r4, pc}

000d757e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d757e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7580:	6943      	ldr	r3, [r0, #20]
   d7582:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7584:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7588:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d758c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d758e:	4605      	mov	r5, r0
   d7590:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7592:	d106      	bne.n	d75a2 <_ZN9TCPClient4readEPhj+0x24>
   d7594:	6803      	ldr	r3, [r0, #0]
   d7596:	691b      	ldr	r3, [r3, #16]
   d7598:	4798      	blx	r3
   d759a:	b910      	cbnz	r0, d75a2 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d759c:	f04f 34ff 	mov.w	r4, #4294967295
   d75a0:	e014      	b.n	d75cc <_ZN9TCPClient4readEPhj+0x4e>
   d75a2:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d75a4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d75a8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d75ac:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d75ae:	42bc      	cmp	r4, r7
   d75b0:	bf28      	it	cs
   d75b2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d75b4:	4419      	add	r1, r3
   d75b6:	4622      	mov	r2, r4
   d75b8:	3104      	adds	r1, #4
   d75ba:	4630      	mov	r0, r6
   d75bc:	f001 f914 	bl	d87e8 <memcpy>
   d75c0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d75c2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d75c6:	4423      	add	r3, r4
   d75c8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d75cc:	4620      	mov	r0, r4
   d75ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75d0 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d75d4:	4698      	mov	r8, r3
    stop();
   d75d6:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75d8:	b093      	sub	sp, #76	; 0x4c
    stop();
   d75da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d75dc:	460d      	mov	r5, r1
   d75de:	4606      	mov	r6, r0
   d75e0:	4617      	mov	r7, r2
    stop();
   d75e2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d75e4:	ab12      	add	r3, sp, #72	; 0x48
   d75e6:	2400      	movs	r4, #0
   d75e8:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d75ec:	4622      	mov	r2, r4
   d75ee:	4621      	mov	r1, r4
   d75f0:	4628      	mov	r0, r5
   d75f2:	f7fe fe9b 	bl	d632c <netdb_getaddrinfo>
   d75f6:	4681      	mov	r9, r0
   d75f8:	2800      	cmp	r0, #0
   d75fa:	d13d      	bne.n	d7678 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d75fc:	9b00      	ldr	r3, [sp, #0]
   d75fe:	2b00      	cmp	r3, #0
   d7600:	d056      	beq.n	d76b0 <_ZN9TCPClient7connectEPKctm+0xe0>
   d7602:	695b      	ldr	r3, [r3, #20]
   d7604:	2b00      	cmp	r3, #0
   d7606:	d053      	beq.n	d76b0 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d7608:	a806      	add	r0, sp, #24
   d760a:	f7ff fc1b 	bl	d6e44 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d760e:	9b00      	ldr	r3, [sp, #0]
   d7610:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7612:	7863      	ldrb	r3, [r4, #1]
   d7614:	2b02      	cmp	r3, #2
   d7616:	d101      	bne.n	d761c <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7618:	1d21      	adds	r1, r4, #4
   d761a:	e013      	b.n	d7644 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d761c:	2b0a      	cmp	r3, #10
   d761e:	d114      	bne.n	d764a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7620:	2211      	movs	r2, #17
   d7622:	4649      	mov	r1, r9
   d7624:	a801      	add	r0, sp, #4
   d7626:	f001 f8ea 	bl	d87fe <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d762a:	68a3      	ldr	r3, [r4, #8]
   d762c:	bb33      	cbnz	r3, d767c <_ZN9TCPClient7connectEPKctm+0xac>
   d762e:	68e3      	ldr	r3, [r4, #12]
   d7630:	bb23      	cbnz	r3, d767c <_ZN9TCPClient7connectEPKctm+0xac>
   d7632:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7636:	6925      	ldr	r5, [r4, #16]
   d7638:	f7fe ff70 	bl	d651c <inet_htonl>
   d763c:	4285      	cmp	r5, r0
   d763e:	d11d      	bne.n	d767c <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7640:	f104 0114 	add.w	r1, r4, #20
   d7644:	a806      	add	r0, sp, #24
   d7646:	f7ff fc40 	bl	d6eca <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d764a:	a806      	add	r0, sp, #24
   d764c:	f7ff fc1a 	bl	d6e84 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7650:	2800      	cmp	r0, #0
   d7652:	d02d      	beq.n	d76b0 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d7654:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7656:	ad07      	add	r5, sp, #28
   d7658:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d765c:	4b18      	ldr	r3, [pc, #96]	; (d76c0 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d765e:	930c      	str	r3, [sp, #48]	; 0x30
   d7660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7662:	ac0d      	add	r4, sp, #52	; 0x34
   d7664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7666:	682b      	ldr	r3, [r5, #0]
   d7668:	7023      	strb	r3, [r4, #0]
   d766a:	463a      	mov	r2, r7
   d766c:	4643      	mov	r3, r8
   d766e:	a90c      	add	r1, sp, #48	; 0x30
   d7670:	4630      	mov	r0, r6
   d7672:	47c8      	blx	r9
   d7674:	4681      	mov	r9, r0
   d7676:	e01b      	b.n	d76b0 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7678:	46a1      	mov	r9, r4
   d767a:	e019      	b.n	d76b0 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d767c:	f104 0308 	add.w	r3, r4, #8
   d7680:	ad01      	add	r5, sp, #4
   d7682:	3418      	adds	r4, #24
   d7684:	6818      	ldr	r0, [r3, #0]
   d7686:	6859      	ldr	r1, [r3, #4]
   d7688:	462a      	mov	r2, r5
   d768a:	c203      	stmia	r2!, {r0, r1}
   d768c:	3308      	adds	r3, #8
   d768e:	42a3      	cmp	r3, r4
   d7690:	4615      	mov	r5, r2
   d7692:	d1f7      	bne.n	d7684 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d7694:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7696:	a901      	add	r1, sp, #4
   d7698:	a80c      	add	r0, sp, #48	; 0x30
   d769a:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d769c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d76a0:	f7ff fbde 	bl	d6e60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d76a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d76a6:	ac07      	add	r4, sp, #28
   d76a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d76aa:	682b      	ldr	r3, [r5, #0]
   d76ac:	7023      	strb	r3, [r4, #0]
   d76ae:	e7cc      	b.n	d764a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d76b0:	9800      	ldr	r0, [sp, #0]
   d76b2:	f7fe fe33 	bl	d631c <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d76b6:	4648      	mov	r0, r9
   d76b8:	b013      	add	sp, #76	; 0x4c
   d76ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d76be:	bf00      	nop
   d76c0:	000d8f94 	.word	0x000d8f94

000d76c4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d76c4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d76c6:	2300      	movs	r3, #0
   d76c8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d76cc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d76ce:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d76d2:	4770      	bx	lr

000d76d4 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d76d8:	461e      	mov	r6, r3
    stop();
   d76da:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76dc:	460c      	mov	r4, r1
   d76de:	b08a      	sub	sp, #40	; 0x28
    stop();
   d76e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d76e2:	4605      	mov	r5, r0
   d76e4:	4617      	mov	r7, r2
    stop();
   d76e6:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d76e8:	7d23      	ldrb	r3, [r4, #20]
   d76ea:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d76ee:	2b04      	cmp	r3, #4
   d76f0:	bf0c      	ite	eq
   d76f2:	2002      	moveq	r0, #2
   d76f4:	200a      	movne	r0, #10
   d76f6:	2206      	movs	r2, #6
   d76f8:	2101      	movs	r1, #1
   d76fa:	f7fe ffe7 	bl	d66cc <sock_socket>
   d76fe:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7702:	696b      	ldr	r3, [r5, #20]
   d7704:	681b      	ldr	r3, [r3, #0]
   d7706:	2b00      	cmp	r3, #0
   d7708:	db18      	blt.n	d773c <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d770a:	4628      	mov	r0, r5
   d770c:	f7ff ffda 	bl	d76c4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7710:	b1d6      	cbz	r6, d7748 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d7712:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7714:	a903      	add	r1, sp, #12
   d7716:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7718:	9303      	str	r3, [sp, #12]
   d771a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d771e:	f7fe fea5 	bl	d646c <if_index_to_name>
   d7722:	b958      	cbnz	r0, d773c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7724:	6968      	ldr	r0, [r5, #20]
   d7726:	2306      	movs	r3, #6
   d7728:	9300      	str	r3, [sp, #0]
   d772a:	f241 020b 	movw	r2, #4107	; 0x100b
   d772e:	ab03      	add	r3, sp, #12
   d7730:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7734:	6800      	ldr	r0, [r0, #0]
   d7736:	f7fe ffa1 	bl	d667c <sock_setsockopt>
   d773a:	b128      	cbz	r0, d7748 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d773c:	682b      	ldr	r3, [r5, #0]
   d773e:	4628      	mov	r0, r5
   d7740:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7742:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7744:	4798      	blx	r3
   d7746:	e03b      	b.n	d77c0 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7748:	261c      	movs	r6, #28
   d774a:	4632      	mov	r2, r6
   d774c:	2100      	movs	r1, #0
   d774e:	a803      	add	r0, sp, #12
   d7750:	f001 f855 	bl	d87fe <memset>
    if (ip.version() == 4) {
   d7754:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7756:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d775a:	2b04      	cmp	r3, #4
   d775c:	d10c      	bne.n	d7778 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d775e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7760:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7762:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7766:	f7fe fee1 	bl	d652c <inet_htons>
   d776a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d776e:	6860      	ldr	r0, [r4, #4]
   d7770:	f7fe fed4 	bl	d651c <inet_htonl>
   d7774:	9004      	str	r0, [sp, #16]
   d7776:	e013      	b.n	d77a0 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7778:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d777a:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d777c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7780:	f7fe fed4 	bl	d652c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7784:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7786:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d778a:	1d23      	adds	r3, r4, #4
   d778c:	f104 0714 	add.w	r7, r4, #20
   d7790:	6818      	ldr	r0, [r3, #0]
   d7792:	6859      	ldr	r1, [r3, #4]
   d7794:	4632      	mov	r2, r6
   d7796:	c203      	stmia	r2!, {r0, r1}
   d7798:	3308      	adds	r3, #8
   d779a:	42bb      	cmp	r3, r7
   d779c:	4616      	mov	r6, r2
   d779e:	d1f7      	bne.n	d7790 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d77a0:	696b      	ldr	r3, [r5, #20]
   d77a2:	221c      	movs	r2, #28
   d77a4:	a903      	add	r1, sp, #12
   d77a6:	6818      	ldr	r0, [r3, #0]
   d77a8:	f7fe ff78 	bl	d669c <sock_connect>
   d77ac:	2800      	cmp	r0, #0
   d77ae:	d1c5      	bne.n	d773c <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d77b0:	3404      	adds	r4, #4
   d77b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d77b4:	696d      	ldr	r5, [r5, #20]
   d77b6:	358c      	adds	r5, #140	; 0x8c
   d77b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d77ba:	6823      	ldr	r3, [r4, #0]
   d77bc:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d77be:	2401      	movs	r4, #1
}
   d77c0:	4620      	mov	r0, r4
   d77c2:	b00a      	add	sp, #40	; 0x28
   d77c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d77c8 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d77c8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d77ca:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d77cc:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d77ce:	6818      	ldr	r0, [r3, #0]
   d77d0:	2800      	cmp	r0, #0
   d77d2:	db01      	blt.n	d77d8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d77d4:	f7fe ff5a 	bl	d668c <sock_close>
   d77d8:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d77da:	f04f 32ff 	mov.w	r2, #4294967295
   d77de:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d77e0:	6960      	ldr	r0, [r4, #20]
   d77e2:	2211      	movs	r2, #17
   d77e4:	2100      	movs	r1, #0
   d77e6:	308c      	adds	r0, #140	; 0x8c
   d77e8:	f001 f809 	bl	d87fe <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d77ec:	4620      	mov	r0, r4
}
   d77ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d77f2:	f7ff bf67 	b.w	d76c4 <_ZN9TCPClient12flush_bufferEv>
	...

000d77f8 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d77f8:	b530      	push	{r4, r5, lr}
   d77fa:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d77fc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7800:	b08b      	sub	sp, #44	; 0x2c
   d7802:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7804:	b11b      	cbz	r3, d780e <_ZN9TCPClient9availableEv+0x16>
   d7806:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d780a:	429a      	cmp	r2, r3
   d780c:	d040      	beq.n	d7890 <_ZN9TCPClient9availableEv+0x98>
   d780e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7810:	6818      	ldr	r0, [r3, #0]
   d7812:	2800      	cmp	r0, #0
   d7814:	db3f      	blt.n	d7896 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7816:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d781a:	2d7f      	cmp	r5, #127	; 0x7f
   d781c:	d83b      	bhi.n	d7896 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d781e:	1d19      	adds	r1, r3, #4
   d7820:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7824:	2308      	movs	r3, #8
   d7826:	4429      	add	r1, r5
   d7828:	f7fe ff40 	bl	d66ac <sock_recv>
            if (ret > 0) {
   d782c:	2800      	cmp	r0, #0
   d782e:	dd0c      	ble.n	d784a <_ZN9TCPClient9availableEv+0x52>
   d7830:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7832:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7836:	b90a      	cbnz	r2, d783c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7838:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d783c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d783e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7842:	4418      	add	r0, r3
   d7844:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7848:	e025      	b.n	d7896 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d784a:	f7ff f82b 	bl	d68a4 <__errno>
   d784e:	6803      	ldr	r3, [r0, #0]
   d7850:	2b0b      	cmp	r3, #11
   d7852:	d020      	beq.n	d7896 <_ZN9TCPClient9availableEv+0x9e>
   d7854:	f7ff f826 	bl	d68a4 <__errno>
   d7858:	6803      	ldr	r3, [r0, #0]
   d785a:	2b0b      	cmp	r3, #11
   d785c:	d01b      	beq.n	d7896 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d785e:	2320      	movs	r3, #32
   d7860:	2500      	movs	r5, #0
   d7862:	9302      	str	r3, [sp, #8]
   d7864:	9503      	str	r5, [sp, #12]
   d7866:	f7ff f81d 	bl	d68a4 <__errno>
   d786a:	6803      	ldr	r3, [r0, #0]
   d786c:	9301      	str	r3, [sp, #4]
   d786e:	4b0e      	ldr	r3, [pc, #56]	; (d78a8 <_ZN9TCPClient9availableEv+0xb0>)
   d7870:	9300      	str	r3, [sp, #0]
   d7872:	aa02      	add	r2, sp, #8
   d7874:	462b      	mov	r3, r5
   d7876:	490d      	ldr	r1, [pc, #52]	; (d78ac <_ZN9TCPClient9availableEv+0xb4>)
   d7878:	2032      	movs	r0, #50	; 0x32
   d787a:	f7fe ff6f 	bl	d675c <log_message>
                    sock_close(d_->sock);
   d787e:	6963      	ldr	r3, [r4, #20]
   d7880:	6818      	ldr	r0, [r3, #0]
   d7882:	f7fe ff03 	bl	d668c <sock_close>
   d7886:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7888:	f04f 32ff 	mov.w	r2, #4294967295
   d788c:	601a      	str	r2, [r3, #0]
   d788e:	e002      	b.n	d7896 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7890:	f7ff ff18 	bl	d76c4 <_ZN9TCPClient12flush_bufferEv>
   d7894:	e7bb      	b.n	d780e <_ZN9TCPClient9availableEv+0x16>
   d7896:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7898:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d789c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d78a0:	1a18      	subs	r0, r3, r0
}
   d78a2:	b00b      	add	sp, #44	; 0x2c
   d78a4:	bd30      	pop	{r4, r5, pc}
   d78a6:	bf00      	nop
   d78a8:	000d90cb 	.word	0x000d90cb
   d78ac:	000d90c4 	.word	0x000d90c4

000d78b0 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d78b0:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d78b2:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d78b4:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d78b6:	6001      	str	r1, [r0, #0]
   d78b8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d78bc:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d78c0:	3088      	adds	r0, #136	; 0x88
   d78c2:	f7ff fabf 	bl	d6e44 <_ZN9IPAddressC1Ev>
}
   d78c6:	4620      	mov	r0, r4
   d78c8:	bd10      	pop	{r4, pc}
	...

000d78cc <_ZN9TCPClientC1Ei>:
   d78cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d78d0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d78d2:	2300      	movs	r3, #0
   d78d4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d78d6:	4a14      	ldr	r2, [pc, #80]	; (d7928 <_ZN9TCPClientC1Ei+0x5c>)
   d78d8:	6043      	str	r3, [r0, #4]
   d78da:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d78dc:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d78de:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d78e0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78e2:	20a0      	movs	r0, #160	; 0xa0
   d78e4:	460e      	mov	r6, r1
   d78e6:	f7fc fbd6 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d78ea:	4605      	mov	r5, r0
   d78ec:	b110      	cbz	r0, d78f4 <_ZN9TCPClientC1Ei+0x28>
   d78ee:	4631      	mov	r1, r6
   d78f0:	f7ff ffde 	bl	d78b0 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78f4:	2014      	movs	r0, #20
   d78f6:	f7fc fbce 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d78fa:	4603      	mov	r3, r0
   d78fc:	b128      	cbz	r0, d790a <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d78fe:	2201      	movs	r2, #1
   d7900:	6042      	str	r2, [r0, #4]
   d7902:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7904:	4a09      	ldr	r2, [pc, #36]	; (d792c <_ZN9TCPClientC1Ei+0x60>)
   d7906:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7908:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d790a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d790c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d790e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7910:	b128      	cbz	r0, d791e <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7912:	6843      	ldr	r3, [r0, #4]
   d7914:	3b01      	subs	r3, #1
   d7916:	6043      	str	r3, [r0, #4]
   d7918:	b90b      	cbnz	r3, d791e <_ZN9TCPClientC1Ei+0x52>
   d791a:	f7ff fddf 	bl	d74dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d791e:	4620      	mov	r0, r4
   d7920:	f7ff fed0 	bl	d76c4 <_ZN9TCPClient12flush_bufferEv>
}
   d7924:	4620      	mov	r0, r4
   d7926:	bd70      	pop	{r4, r5, r6, pc}
   d7928:	000d9080 	.word	0x000d9080
   d792c:	000d9064 	.word	0x000d9064

000d7930 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7930:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7932:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7936:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7938:	f7ff ffc8 	bl	d78cc <_ZN9TCPClientC1Ei>
}
   d793c:	4620      	mov	r0, r4
   d793e:	bd10      	pop	{r4, pc}

000d7940 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7940:	b510      	push	{r4, lr}
   d7942:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7944:	6800      	ldr	r0, [r0, #0]
   d7946:	2800      	cmp	r0, #0
   d7948:	db01      	blt.n	d794e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d794a:	f7fe fe9f 	bl	d668c <sock_close>
    }
}
   d794e:	4620      	mov	r0, r4
   d7950:	bd10      	pop	{r4, pc}

000d7952 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7952:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7954:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d7956:	4620      	mov	r0, r4
   d7958:	f7ff fff2 	bl	d7940 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d795c:	b124      	cbz	r4, d7968 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d795e:	4620      	mov	r0, r4
   d7960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7964:	f7fc bb99 	b.w	d409a <_ZdlPv>
   d7968:	bd10      	pop	{r4, pc}

000d796a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d796a:	2200      	movs	r2, #0
   d796c:	4611      	mov	r1, r2
   d796e:	6840      	ldr	r0, [r0, #4]
   d7970:	f7fe bf38 	b.w	d67e4 <network_ready>

000d7974 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7974:	2200      	movs	r2, #0
   d7976:	4611      	mov	r1, r2
   d7978:	6840      	ldr	r0, [r0, #4]
   d797a:	f7fe bf53 	b.w	d6824 <network_listening>

000d797e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d797e:	2200      	movs	r2, #0
   d7980:	4611      	mov	r1, r2
   d7982:	6840      	ldr	r0, [r0, #4]
   d7984:	f7fe bf5e 	b.w	d6844 <network_get_listen_timeout>

000d7988 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7988:	2200      	movs	r2, #0
   d798a:	6840      	ldr	r0, [r0, #4]
   d798c:	f7fe bf52 	b.w	d6834 <network_set_listen_timeout>

000d7990 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7990:	2200      	movs	r2, #0
   d7992:	f081 0101 	eor.w	r1, r1, #1
   d7996:	6840      	ldr	r0, [r0, #4]
   d7998:	f7fe bf3c 	b.w	d6814 <network_listen>

000d799c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d799c:	2300      	movs	r3, #0
   d799e:	461a      	mov	r2, r3
   d79a0:	4619      	mov	r1, r3
   d79a2:	6840      	ldr	r0, [r0, #4]
   d79a4:	f7fe bf2e 	b.w	d6804 <network_off>

000d79a8 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d79a8:	2300      	movs	r3, #0
   d79aa:	461a      	mov	r2, r3
   d79ac:	4619      	mov	r1, r3
   d79ae:	6840      	ldr	r0, [r0, #4]
   d79b0:	f7fe bf20 	b.w	d67f4 <network_on>

000d79b4 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d79b4:	2200      	movs	r2, #0
   d79b6:	4611      	mov	r1, r2
   d79b8:	6840      	ldr	r0, [r0, #4]
   d79ba:	f7fe bf03 	b.w	d67c4 <network_connecting>

000d79be <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d79be:	2200      	movs	r2, #0
   d79c0:	2102      	movs	r1, #2
   d79c2:	6840      	ldr	r0, [r0, #4]
   d79c4:	f7fe bf06 	b.w	d67d4 <network_disconnect>

000d79c8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d79c8:	2300      	movs	r3, #0
   d79ca:	461a      	mov	r2, r3
   d79cc:	6840      	ldr	r0, [r0, #4]
   d79ce:	f7fe bef1 	b.w	d67b4 <network_connect>
	...

000d79d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d79d4:	4b02      	ldr	r3, [pc, #8]	; (d79e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d79d6:	2204      	movs	r2, #4
   d79d8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d79da:	4a02      	ldr	r2, [pc, #8]	; (d79e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d79dc:	601a      	str	r2, [r3, #0]
   d79de:	4770      	bx	lr
   d79e0:	2003e720 	.word	0x2003e720
   d79e4:	000d90e4 	.word	0x000d90e4

000d79e8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d79e8:	2300      	movs	r3, #0
   d79ea:	461a      	mov	r2, r3
   d79ec:	6840      	ldr	r0, [r0, #4]
   d79ee:	f7fe bee1 	b.w	d67b4 <network_connect>

000d79f2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d79f2:	2200      	movs	r2, #0
   d79f4:	2102      	movs	r1, #2
   d79f6:	6840      	ldr	r0, [r0, #4]
   d79f8:	f7fe beec 	b.w	d67d4 <network_disconnect>

000d79fc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d79fc:	2200      	movs	r2, #0
   d79fe:	4611      	mov	r1, r2
   d7a00:	6840      	ldr	r0, [r0, #4]
   d7a02:	f7fe bedf 	b.w	d67c4 <network_connecting>

000d7a06 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7a06:	2200      	movs	r2, #0
   d7a08:	4611      	mov	r1, r2
   d7a0a:	6840      	ldr	r0, [r0, #4]
   d7a0c:	f7fe beea 	b.w	d67e4 <network_ready>

000d7a10 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7a10:	2300      	movs	r3, #0
   d7a12:	461a      	mov	r2, r3
   d7a14:	4619      	mov	r1, r3
   d7a16:	6840      	ldr	r0, [r0, #4]
   d7a18:	f7fe beec 	b.w	d67f4 <network_on>

000d7a1c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7a1c:	2300      	movs	r3, #0
   d7a1e:	461a      	mov	r2, r3
   d7a20:	4619      	mov	r1, r3
   d7a22:	6840      	ldr	r0, [r0, #4]
   d7a24:	f7fe beee 	b.w	d6804 <network_off>

000d7a28 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7a28:	2200      	movs	r2, #0
   d7a2a:	f081 0101 	eor.w	r1, r1, #1
   d7a2e:	6840      	ldr	r0, [r0, #4]
   d7a30:	f7fe bef0 	b.w	d6814 <network_listen>

000d7a34 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7a34:	2200      	movs	r2, #0
   d7a36:	6840      	ldr	r0, [r0, #4]
   d7a38:	f7fe befc 	b.w	d6834 <network_set_listen_timeout>

000d7a3c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7a3c:	2200      	movs	r2, #0
   d7a3e:	4611      	mov	r1, r2
   d7a40:	6840      	ldr	r0, [r0, #4]
   d7a42:	f7fe beff 	b.w	d6844 <network_get_listen_timeout>

000d7a46 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7a46:	2200      	movs	r2, #0
   d7a48:	4611      	mov	r1, r2
   d7a4a:	6840      	ldr	r0, [r0, #4]
   d7a4c:	f7fe beea 	b.w	d6824 <network_listening>

000d7a50 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7a54:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7a56:	b095      	sub	sp, #84	; 0x54
   d7a58:	4616      	mov	r6, r2
   d7a5a:	460d      	mov	r5, r1
   d7a5c:	4607      	mov	r7, r0
    IPAddress addr;
   d7a5e:	f7ff f9f1 	bl	d6e44 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7a62:	4621      	mov	r1, r4
   d7a64:	2220      	movs	r2, #32
   d7a66:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7a68:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7a6a:	f000 fec8 	bl	d87fe <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7a6e:	2340      	movs	r3, #64	; 0x40
   d7a70:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7a72:	4621      	mov	r1, r4
   d7a74:	466b      	mov	r3, sp
   d7a76:	aa0c      	add	r2, sp, #48	; 0x30
   d7a78:	4630      	mov	r0, r6
   d7a7a:	f7fe fc57 	bl	d632c <netdb_getaddrinfo>
    if (!r) {
   d7a7e:	4604      	mov	r4, r0
   d7a80:	2800      	cmp	r0, #0
   d7a82:	d144      	bne.n	d7b0e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a84:	4602      	mov	r2, r0
   d7a86:	2101      	movs	r1, #1
   d7a88:	6868      	ldr	r0, [r5, #4]
   d7a8a:	f7fe feab 	bl	d67e4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a8e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a90:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a92:	4622      	mov	r2, r4
   d7a94:	6868      	ldr	r0, [r5, #4]
   d7a96:	f7fe fea5 	bl	d67e4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a9a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a9c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7a9e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7aa0:	2e00      	cmp	r6, #0
   d7aa2:	d034      	beq.n	d7b0e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7aa4:	2900      	cmp	r1, #0
   d7aa6:	d132      	bne.n	d7b0e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7aa8:	6873      	ldr	r3, [r6, #4]
   d7aaa:	2b02      	cmp	r3, #2
   d7aac:	d002      	beq.n	d7ab4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7aae:	2b0a      	cmp	r3, #10
   d7ab0:	d009      	beq.n	d7ac6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7ab2:	e02a      	b.n	d7b0a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7ab4:	f1b8 0f00 	cmp.w	r8, #0
   d7ab8:	d027      	beq.n	d7b0a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7aba:	6971      	ldr	r1, [r6, #20]
   d7abc:	4638      	mov	r0, r7
   d7abe:	3104      	adds	r1, #4
   d7ac0:	f7ff fa03 	bl	d6eca <_ZN9IPAddressaSEPKh>
   d7ac4:	e020      	b.n	d7b08 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7ac6:	f1b9 0f00 	cmp.w	r9, #0
   d7aca:	d01e      	beq.n	d7b0a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7acc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7ace:	2211      	movs	r2, #17
   d7ad0:	a801      	add	r0, sp, #4
   d7ad2:	f000 fe94 	bl	d87fe <memset>
                    a.v = 6;
   d7ad6:	2306      	movs	r3, #6
   d7ad8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7adc:	ad01      	add	r5, sp, #4
   d7ade:	f104 0308 	add.w	r3, r4, #8
   d7ae2:	3418      	adds	r4, #24
   d7ae4:	6818      	ldr	r0, [r3, #0]
   d7ae6:	6859      	ldr	r1, [r3, #4]
   d7ae8:	462a      	mov	r2, r5
   d7aea:	c203      	stmia	r2!, {r0, r1}
   d7aec:	3308      	adds	r3, #8
   d7aee:	42a3      	cmp	r3, r4
   d7af0:	4615      	mov	r5, r2
   d7af2:	d1f7      	bne.n	d7ae4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7af4:	a901      	add	r1, sp, #4
   d7af6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7af8:	ad07      	add	r5, sp, #28
   d7afa:	f7ff f9b1 	bl	d6e60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b00:	1d3c      	adds	r4, r7, #4
   d7b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b04:	682b      	ldr	r3, [r5, #0]
   d7b06:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7b08:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b0a:	69f6      	ldr	r6, [r6, #28]
   d7b0c:	e7c8      	b.n	d7aa0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7b0e:	9800      	ldr	r0, [sp, #0]
   d7b10:	f7fe fc04 	bl	d631c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7b14:	4638      	mov	r0, r7
   d7b16:	b015      	add	sp, #84	; 0x54
   d7b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7b1c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7b1c:	4b02      	ldr	r3, [pc, #8]	; (d7b28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7b1e:	4a03      	ldr	r2, [pc, #12]	; (d7b2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7b20:	601a      	str	r2, [r3, #0]
   d7b22:	2200      	movs	r2, #0
   d7b24:	605a      	str	r2, [r3, #4]
   d7b26:	4770      	bx	lr
   d7b28:	2003e728 	.word	0x2003e728
   d7b2c:	000d9118 	.word	0x000d9118

000d7b30 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7b30:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7b32:	4e18      	ldr	r6, [pc, #96]	; (d7b94 <pinAvailable+0x64>)
   d7b34:	6831      	ldr	r1, [r6, #0]
   d7b36:	f011 0501 	ands.w	r5, r1, #1
   d7b3a:	4604      	mov	r4, r0
   d7b3c:	d10a      	bne.n	d7b54 <pinAvailable+0x24>
   d7b3e:	4630      	mov	r0, r6
   d7b40:	f7fc faba 	bl	d40b8 <__cxa_guard_acquire>
   d7b44:	b130      	cbz	r0, d7b54 <pinAvailable+0x24>
   d7b46:	4629      	mov	r1, r5
   d7b48:	4813      	ldr	r0, [pc, #76]	; (d7b98 <pinAvailable+0x68>)
   d7b4a:	f7fe fef7 	bl	d693c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7b4e:	4630      	mov	r0, r6
   d7b50:	f7fc fab7 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d7b54:	4810      	ldr	r0, [pc, #64]	; (d7b98 <pinAvailable+0x68>)
   d7b56:	f7fe ffae 	bl	d6ab6 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7b5a:	b128      	cbz	r0, d7b68 <pinAvailable+0x38>
   d7b5c:	f1a4 030b 	sub.w	r3, r4, #11
   d7b60:	2b02      	cmp	r3, #2
   d7b62:	d801      	bhi.n	d7b68 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d7b64:	2000      	movs	r0, #0
   d7b66:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7b68:	f000 f886 	bl	d7c78 <_Z19__fetch_global_Wirev>
   d7b6c:	f7ff fb75 	bl	d725a <_ZN7TwoWire9isEnabledEv>
   d7b70:	b108      	cbz	r0, d7b76 <pinAvailable+0x46>
   d7b72:	2c01      	cmp	r4, #1
   d7b74:	d9f6      	bls.n	d7b64 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7b76:	f7ff fac7 	bl	d7108 <_Z22__fetch_global_Serial1v>
   d7b7a:	f7ff fac2 	bl	d7102 <_ZN11USARTSerial9isEnabledEv>
   d7b7e:	b118      	cbz	r0, d7b88 <pinAvailable+0x58>
   d7b80:	f1a4 0309 	sub.w	r3, r4, #9
   d7b84:	2b01      	cmp	r3, #1
   d7b86:	d9ed      	bls.n	d7b64 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7b88:	2c23      	cmp	r4, #35	; 0x23
   d7b8a:	bf8c      	ite	hi
   d7b8c:	2000      	movhi	r0, #0
   d7b8e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7b90:	bd70      	pop	{r4, r5, r6, pc}
   d7b92:	bf00      	nop
   d7b94:	2003dcf4 	.word	0x2003dcf4
   d7b98:	2003dcf8 	.word	0x2003dcf8

000d7b9c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7b9c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7b9e:	b538      	push	{r3, r4, r5, lr}
   d7ba0:	4604      	mov	r4, r0
   d7ba2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ba4:	d80a      	bhi.n	d7bbc <pinMode+0x20>
   d7ba6:	29ff      	cmp	r1, #255	; 0xff
   d7ba8:	d008      	beq.n	d7bbc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7baa:	f7ff ffc1 	bl	d7b30 <pinAvailable>
   d7bae:	b128      	cbz	r0, d7bbc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7bb0:	4629      	mov	r1, r5
   d7bb2:	4620      	mov	r0, r4
}
   d7bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7bb8:	f7fe bbd0 	b.w	d635c <HAL_Pin_Mode>
   d7bbc:	bd38      	pop	{r3, r4, r5, pc}

000d7bbe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7bbe:	b538      	push	{r3, r4, r5, lr}
   d7bc0:	4604      	mov	r4, r0
   d7bc2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7bc4:	f7fe fbd2 	bl	d636c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7bc8:	28ff      	cmp	r0, #255	; 0xff
   d7bca:	d010      	beq.n	d7bee <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7bcc:	2806      	cmp	r0, #6
   d7bce:	d804      	bhi.n	d7bda <digitalWrite+0x1c>
   d7bd0:	234d      	movs	r3, #77	; 0x4d
   d7bd2:	fa23 f000 	lsr.w	r0, r3, r0
   d7bd6:	07c3      	lsls	r3, r0, #31
   d7bd8:	d409      	bmi.n	d7bee <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7bda:	4620      	mov	r0, r4
   d7bdc:	f7ff ffa8 	bl	d7b30 <pinAvailable>
   d7be0:	b128      	cbz	r0, d7bee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7be2:	4629      	mov	r1, r5
   d7be4:	4620      	mov	r0, r4
}
   d7be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7bea:	f7fe bbc7 	b.w	d637c <HAL_GPIO_Write>
   d7bee:	bd38      	pop	{r3, r4, r5, pc}

000d7bf0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7bf0:	b510      	push	{r4, lr}
   d7bf2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7bf4:	f7fe fbba 	bl	d636c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7bf8:	3804      	subs	r0, #4
   d7bfa:	b2c0      	uxtb	r0, r0
   d7bfc:	2801      	cmp	r0, #1
   d7bfe:	d908      	bls.n	d7c12 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7c00:	4620      	mov	r0, r4
   d7c02:	f7ff ff95 	bl	d7b30 <pinAvailable>
   d7c06:	b120      	cbz	r0, d7c12 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7c08:	4620      	mov	r0, r4
}
   d7c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7c0e:	f7fe bbbd 	b.w	d638c <HAL_GPIO_Read>
}
   d7c12:	2000      	movs	r0, #0
   d7c14:	bd10      	pop	{r4, pc}

000d7c16 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7c16:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7c18:	b510      	push	{r4, lr}
   d7c1a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7c1c:	bf9c      	itt	ls
   d7c1e:	340e      	addls	r4, #14
   d7c20:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7c22:	4620      	mov	r0, r4
   d7c24:	f7ff ff84 	bl	d7b30 <pinAvailable>
   d7c28:	b150      	cbz	r0, d7c40 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7c2a:	2103      	movs	r1, #3
   d7c2c:	4620      	mov	r0, r4
   d7c2e:	f7fe fb8d 	bl	d634c <HAL_Validate_Pin_Function>
   d7c32:	2803      	cmp	r0, #3
   d7c34:	d104      	bne.n	d7c40 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7c36:	4620      	mov	r0, r4
}
   d7c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7c3c:	f7fe bbbe 	b.w	d63bc <HAL_ADC_Read>
}
   d7c40:	2000      	movs	r0, #0
   d7c42:	bd10      	pop	{r4, pc}

000d7c44 <_Z17acquireWireBufferv>:
   d7c44:	b570      	push	{r4, r5, r6, lr}
   d7c46:	4604      	mov	r4, r0
   d7c48:	2514      	movs	r5, #20
   d7c4a:	462a      	mov	r2, r5
   d7c4c:	4e09      	ldr	r6, [pc, #36]	; (d7c74 <_Z17acquireWireBufferv+0x30>)
   d7c4e:	2100      	movs	r1, #0
   d7c50:	f000 fdd5 	bl	d87fe <memset>
   d7c54:	8025      	strh	r5, [r4, #0]
   d7c56:	2520      	movs	r5, #32
   d7c58:	4631      	mov	r1, r6
   d7c5a:	60a5      	str	r5, [r4, #8]
   d7c5c:	6125      	str	r5, [r4, #16]
   d7c5e:	4628      	mov	r0, r5
   d7c60:	f000 f840 	bl	d7ce4 <_ZnajRKSt9nothrow_t>
   d7c64:	4631      	mov	r1, r6
   d7c66:	6060      	str	r0, [r4, #4]
   d7c68:	4628      	mov	r0, r5
   d7c6a:	f000 f83b 	bl	d7ce4 <_ZnajRKSt9nothrow_t>
   d7c6e:	60e0      	str	r0, [r4, #12]
   d7c70:	4620      	mov	r0, r4
   d7c72:	bd70      	pop	{r4, r5, r6, pc}
   d7c74:	000d9144 	.word	0x000d9144

000d7c78 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7c78:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c7a:	4d0e      	ldr	r5, [pc, #56]	; (d7cb4 <_Z19__fetch_global_Wirev+0x3c>)
   d7c7c:	6829      	ldr	r1, [r5, #0]
   d7c7e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7c82:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7c84:	d113      	bne.n	d7cae <_Z19__fetch_global_Wirev+0x36>
   d7c86:	4628      	mov	r0, r5
   d7c88:	f7fc fa16 	bl	d40b8 <__cxa_guard_acquire>
   d7c8c:	b178      	cbz	r0, d7cae <_Z19__fetch_global_Wirev+0x36>
   d7c8e:	a801      	add	r0, sp, #4
   d7c90:	f7ff ffd8 	bl	d7c44 <_Z17acquireWireBufferv>
   d7c94:	aa01      	add	r2, sp, #4
   d7c96:	4621      	mov	r1, r4
   d7c98:	4807      	ldr	r0, [pc, #28]	; (d7cb8 <_Z19__fetch_global_Wirev+0x40>)
   d7c9a:	f7ff fa87 	bl	d71ac <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7c9e:	4628      	mov	r0, r5
   d7ca0:	f7fc fa0f 	bl	d40c2 <__cxa_guard_release>
   d7ca4:	4a05      	ldr	r2, [pc, #20]	; (d7cbc <_Z19__fetch_global_Wirev+0x44>)
   d7ca6:	4906      	ldr	r1, [pc, #24]	; (d7cc0 <_Z19__fetch_global_Wirev+0x48>)
   d7ca8:	4803      	ldr	r0, [pc, #12]	; (d7cb8 <_Z19__fetch_global_Wirev+0x40>)
   d7caa:	f000 f80b 	bl	d7cc4 <__aeabi_atexit>
	return wire;
}
   d7cae:	4802      	ldr	r0, [pc, #8]	; (d7cb8 <_Z19__fetch_global_Wirev+0x40>)
   d7cb0:	b007      	add	sp, #28
   d7cb2:	bd30      	pop	{r4, r5, pc}
   d7cb4:	2003e734 	.word	0x2003e734
   d7cb8:	2003e738 	.word	0x2003e738
   d7cbc:	2003dcf0 	.word	0x2003dcf0
   d7cc0:	000d7155 	.word	0x000d7155

000d7cc4 <__aeabi_atexit>:
   d7cc4:	460b      	mov	r3, r1
   d7cc6:	4601      	mov	r1, r0
   d7cc8:	4618      	mov	r0, r3
   d7cca:	f000 bd7f 	b.w	d87cc <__cxa_atexit>
	...

000d7cd0 <_ZSt15get_new_handlerv>:
   d7cd0:	4b02      	ldr	r3, [pc, #8]	; (d7cdc <_ZSt15get_new_handlerv+0xc>)
   d7cd2:	6818      	ldr	r0, [r3, #0]
   d7cd4:	f3bf 8f5f 	dmb	sy
   d7cd8:	4770      	bx	lr
   d7cda:	bf00      	nop
   d7cdc:	2003e74c 	.word	0x2003e74c

000d7ce0 <_ZdlPvj>:
   d7ce0:	f7fc b9db 	b.w	d409a <_ZdlPv>

000d7ce4 <_ZnajRKSt9nothrow_t>:
   d7ce4:	f000 b800 	b.w	d7ce8 <_ZnwjRKSt9nothrow_t>

000d7ce8 <_ZnwjRKSt9nothrow_t>:
   d7ce8:	b510      	push	{r4, lr}
   d7cea:	2800      	cmp	r0, #0
   d7cec:	bf14      	ite	ne
   d7cee:	4604      	movne	r4, r0
   d7cf0:	2401      	moveq	r4, #1
   d7cf2:	4620      	mov	r0, r4
   d7cf4:	f7fe fdbe 	bl	d6874 <malloc>
   d7cf8:	b920      	cbnz	r0, d7d04 <_ZnwjRKSt9nothrow_t+0x1c>
   d7cfa:	f7ff ffe9 	bl	d7cd0 <_ZSt15get_new_handlerv>
   d7cfe:	b108      	cbz	r0, d7d04 <_ZnwjRKSt9nothrow_t+0x1c>
   d7d00:	4780      	blx	r0
   d7d02:	e7f6      	b.n	d7cf2 <_ZnwjRKSt9nothrow_t+0xa>
   d7d04:	bd10      	pop	{r4, pc}
	...

000d7d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7d08:	4b18      	ldr	r3, [pc, #96]	; (d7d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7d0a:	681a      	ldr	r2, [r3, #0]
   d7d0c:	07d1      	lsls	r1, r2, #31
   d7d0e:	bf5c      	itt	pl
   d7d10:	2201      	movpl	r2, #1
   d7d12:	601a      	strpl	r2, [r3, #0]
   d7d14:	4b16      	ldr	r3, [pc, #88]	; (d7d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7d16:	681a      	ldr	r2, [r3, #0]
   d7d18:	07d2      	lsls	r2, r2, #31
   d7d1a:	bf5c      	itt	pl
   d7d1c:	2201      	movpl	r2, #1
   d7d1e:	601a      	strpl	r2, [r3, #0]
   d7d20:	4b14      	ldr	r3, [pc, #80]	; (d7d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7d22:	681a      	ldr	r2, [r3, #0]
   d7d24:	07d0      	lsls	r0, r2, #31
   d7d26:	bf5c      	itt	pl
   d7d28:	2201      	movpl	r2, #1
   d7d2a:	601a      	strpl	r2, [r3, #0]
   d7d2c:	4b12      	ldr	r3, [pc, #72]	; (d7d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7d2e:	681a      	ldr	r2, [r3, #0]
   d7d30:	07d1      	lsls	r1, r2, #31
   d7d32:	bf5c      	itt	pl
   d7d34:	2201      	movpl	r2, #1
   d7d36:	601a      	strpl	r2, [r3, #0]
   d7d38:	4b10      	ldr	r3, [pc, #64]	; (d7d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7d3a:	681a      	ldr	r2, [r3, #0]
   d7d3c:	07d2      	lsls	r2, r2, #31
   d7d3e:	bf5c      	itt	pl
   d7d40:	2201      	movpl	r2, #1
   d7d42:	601a      	strpl	r2, [r3, #0]
   d7d44:	4b0e      	ldr	r3, [pc, #56]	; (d7d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7d46:	681a      	ldr	r2, [r3, #0]
   d7d48:	07d0      	lsls	r0, r2, #31
   d7d4a:	bf5c      	itt	pl
   d7d4c:	2201      	movpl	r2, #1
   d7d4e:	601a      	strpl	r2, [r3, #0]
   d7d50:	4b0c      	ldr	r3, [pc, #48]	; (d7d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7d52:	681a      	ldr	r2, [r3, #0]
   d7d54:	07d1      	lsls	r1, r2, #31
   d7d56:	bf5c      	itt	pl
   d7d58:	2201      	movpl	r2, #1
   d7d5a:	601a      	strpl	r2, [r3, #0]
   d7d5c:	4b0a      	ldr	r3, [pc, #40]	; (d7d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7d5e:	681a      	ldr	r2, [r3, #0]
   d7d60:	07d2      	lsls	r2, r2, #31
   d7d62:	bf5c      	itt	pl
   d7d64:	2201      	movpl	r2, #1
   d7d66:	601a      	strpl	r2, [r3, #0]
   d7d68:	4770      	bx	lr
   d7d6a:	bf00      	nop
   d7d6c:	2003e76c 	.word	0x2003e76c
   d7d70:	2003e768 	.word	0x2003e768
   d7d74:	2003e764 	.word	0x2003e764
   d7d78:	2003e760 	.word	0x2003e760
   d7d7c:	2003e75c 	.word	0x2003e75c
   d7d80:	2003e758 	.word	0x2003e758
   d7d84:	2003e754 	.word	0x2003e754
   d7d88:	2003e750 	.word	0x2003e750

000d7d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7d8c:	4b24      	ldr	r3, [pc, #144]	; (d7e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7d8e:	681a      	ldr	r2, [r3, #0]
   d7d90:	07d0      	lsls	r0, r2, #31
   d7d92:	bf5c      	itt	pl
   d7d94:	2201      	movpl	r2, #1
   d7d96:	601a      	strpl	r2, [r3, #0]
   d7d98:	4b22      	ldr	r3, [pc, #136]	; (d7e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7d9a:	681a      	ldr	r2, [r3, #0]
   d7d9c:	07d1      	lsls	r1, r2, #31
   d7d9e:	bf5c      	itt	pl
   d7da0:	2201      	movpl	r2, #1
   d7da2:	601a      	strpl	r2, [r3, #0]
   d7da4:	4b20      	ldr	r3, [pc, #128]	; (d7e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7da6:	681a      	ldr	r2, [r3, #0]
   d7da8:	07d2      	lsls	r2, r2, #31
   d7daa:	bf5c      	itt	pl
   d7dac:	2201      	movpl	r2, #1
   d7dae:	601a      	strpl	r2, [r3, #0]
   d7db0:	4b1e      	ldr	r3, [pc, #120]	; (d7e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7db2:	681a      	ldr	r2, [r3, #0]
   d7db4:	07d0      	lsls	r0, r2, #31
   d7db6:	bf5c      	itt	pl
   d7db8:	2201      	movpl	r2, #1
   d7dba:	601a      	strpl	r2, [r3, #0]
   d7dbc:	4b1c      	ldr	r3, [pc, #112]	; (d7e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7dbe:	681a      	ldr	r2, [r3, #0]
   d7dc0:	07d1      	lsls	r1, r2, #31
   d7dc2:	bf5c      	itt	pl
   d7dc4:	2201      	movpl	r2, #1
   d7dc6:	601a      	strpl	r2, [r3, #0]
   d7dc8:	4b1a      	ldr	r3, [pc, #104]	; (d7e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7dca:	681a      	ldr	r2, [r3, #0]
   d7dcc:	07d2      	lsls	r2, r2, #31
   d7dce:	bf5c      	itt	pl
   d7dd0:	2201      	movpl	r2, #1
   d7dd2:	601a      	strpl	r2, [r3, #0]
   d7dd4:	4b18      	ldr	r3, [pc, #96]	; (d7e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7dd6:	681a      	ldr	r2, [r3, #0]
   d7dd8:	07d0      	lsls	r0, r2, #31
   d7dda:	bf5c      	itt	pl
   d7ddc:	2201      	movpl	r2, #1
   d7dde:	601a      	strpl	r2, [r3, #0]
   d7de0:	4b16      	ldr	r3, [pc, #88]	; (d7e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7de2:	681a      	ldr	r2, [r3, #0]
   d7de4:	07d1      	lsls	r1, r2, #31
   d7de6:	bf5c      	itt	pl
   d7de8:	2201      	movpl	r2, #1
   d7dea:	601a      	strpl	r2, [r3, #0]
   d7dec:	4b14      	ldr	r3, [pc, #80]	; (d7e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7dee:	681a      	ldr	r2, [r3, #0]
   d7df0:	07d2      	lsls	r2, r2, #31
   d7df2:	bf5c      	itt	pl
   d7df4:	2201      	movpl	r2, #1
   d7df6:	601a      	strpl	r2, [r3, #0]
   d7df8:	4b12      	ldr	r3, [pc, #72]	; (d7e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7dfa:	681a      	ldr	r2, [r3, #0]
   d7dfc:	07d0      	lsls	r0, r2, #31
   d7dfe:	bf5c      	itt	pl
   d7e00:	2201      	movpl	r2, #1
   d7e02:	601a      	strpl	r2, [r3, #0]
   d7e04:	4b10      	ldr	r3, [pc, #64]	; (d7e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7e06:	681a      	ldr	r2, [r3, #0]
   d7e08:	07d1      	lsls	r1, r2, #31
   d7e0a:	bf5c      	itt	pl
   d7e0c:	2201      	movpl	r2, #1
   d7e0e:	601a      	strpl	r2, [r3, #0]
   d7e10:	4b0e      	ldr	r3, [pc, #56]	; (d7e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7e12:	681a      	ldr	r2, [r3, #0]
   d7e14:	07d2      	lsls	r2, r2, #31
   d7e16:	bf5c      	itt	pl
   d7e18:	2201      	movpl	r2, #1
   d7e1a:	601a      	strpl	r2, [r3, #0]
   d7e1c:	4770      	bx	lr
   d7e1e:	bf00      	nop
   d7e20:	2003e79c 	.word	0x2003e79c
   d7e24:	2003e798 	.word	0x2003e798
   d7e28:	2003e794 	.word	0x2003e794
   d7e2c:	2003e790 	.word	0x2003e790
   d7e30:	2003e78c 	.word	0x2003e78c
   d7e34:	2003e788 	.word	0x2003e788
   d7e38:	2003e784 	.word	0x2003e784
   d7e3c:	2003e780 	.word	0x2003e780
   d7e40:	2003e77c 	.word	0x2003e77c
   d7e44:	2003e778 	.word	0x2003e778
   d7e48:	2003e774 	.word	0x2003e774
   d7e4c:	2003e770 	.word	0x2003e770

000d7e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7e50:	4b24      	ldr	r3, [pc, #144]	; (d7ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7e52:	681a      	ldr	r2, [r3, #0]
   d7e54:	07d0      	lsls	r0, r2, #31
   d7e56:	bf5c      	itt	pl
   d7e58:	2201      	movpl	r2, #1
   d7e5a:	601a      	strpl	r2, [r3, #0]
   d7e5c:	4b22      	ldr	r3, [pc, #136]	; (d7ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7e5e:	681a      	ldr	r2, [r3, #0]
   d7e60:	07d1      	lsls	r1, r2, #31
   d7e62:	bf5c      	itt	pl
   d7e64:	2201      	movpl	r2, #1
   d7e66:	601a      	strpl	r2, [r3, #0]
   d7e68:	4b20      	ldr	r3, [pc, #128]	; (d7eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7e6a:	681a      	ldr	r2, [r3, #0]
   d7e6c:	07d2      	lsls	r2, r2, #31
   d7e6e:	bf5c      	itt	pl
   d7e70:	2201      	movpl	r2, #1
   d7e72:	601a      	strpl	r2, [r3, #0]
   d7e74:	4b1e      	ldr	r3, [pc, #120]	; (d7ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7e76:	681a      	ldr	r2, [r3, #0]
   d7e78:	07d0      	lsls	r0, r2, #31
   d7e7a:	bf5c      	itt	pl
   d7e7c:	2201      	movpl	r2, #1
   d7e7e:	601a      	strpl	r2, [r3, #0]
   d7e80:	4b1c      	ldr	r3, [pc, #112]	; (d7ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7e82:	681a      	ldr	r2, [r3, #0]
   d7e84:	07d1      	lsls	r1, r2, #31
   d7e86:	bf5c      	itt	pl
   d7e88:	2201      	movpl	r2, #1
   d7e8a:	601a      	strpl	r2, [r3, #0]
   d7e8c:	4b1a      	ldr	r3, [pc, #104]	; (d7ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7e8e:	681a      	ldr	r2, [r3, #0]
   d7e90:	07d2      	lsls	r2, r2, #31
   d7e92:	bf5c      	itt	pl
   d7e94:	2201      	movpl	r2, #1
   d7e96:	601a      	strpl	r2, [r3, #0]
   d7e98:	4b18      	ldr	r3, [pc, #96]	; (d7efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7e9a:	681a      	ldr	r2, [r3, #0]
   d7e9c:	07d0      	lsls	r0, r2, #31
   d7e9e:	bf5c      	itt	pl
   d7ea0:	2201      	movpl	r2, #1
   d7ea2:	601a      	strpl	r2, [r3, #0]
   d7ea4:	4b16      	ldr	r3, [pc, #88]	; (d7f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7ea6:	681a      	ldr	r2, [r3, #0]
   d7ea8:	07d1      	lsls	r1, r2, #31
   d7eaa:	bf5c      	itt	pl
   d7eac:	2201      	movpl	r2, #1
   d7eae:	601a      	strpl	r2, [r3, #0]
   d7eb0:	4b14      	ldr	r3, [pc, #80]	; (d7f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7eb2:	681a      	ldr	r2, [r3, #0]
   d7eb4:	07d2      	lsls	r2, r2, #31
   d7eb6:	bf5c      	itt	pl
   d7eb8:	2201      	movpl	r2, #1
   d7eba:	601a      	strpl	r2, [r3, #0]
   d7ebc:	4b12      	ldr	r3, [pc, #72]	; (d7f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7ebe:	681a      	ldr	r2, [r3, #0]
   d7ec0:	07d0      	lsls	r0, r2, #31
   d7ec2:	bf5c      	itt	pl
   d7ec4:	2201      	movpl	r2, #1
   d7ec6:	601a      	strpl	r2, [r3, #0]
   d7ec8:	4b10      	ldr	r3, [pc, #64]	; (d7f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7eca:	681a      	ldr	r2, [r3, #0]
   d7ecc:	07d1      	lsls	r1, r2, #31
   d7ece:	bf5c      	itt	pl
   d7ed0:	2201      	movpl	r2, #1
   d7ed2:	601a      	strpl	r2, [r3, #0]
   d7ed4:	4b0e      	ldr	r3, [pc, #56]	; (d7f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7ed6:	681a      	ldr	r2, [r3, #0]
   d7ed8:	07d2      	lsls	r2, r2, #31
   d7eda:	bf5c      	itt	pl
   d7edc:	2201      	movpl	r2, #1
   d7ede:	601a      	strpl	r2, [r3, #0]
   d7ee0:	4770      	bx	lr
   d7ee2:	bf00      	nop
   d7ee4:	2003e7cc 	.word	0x2003e7cc
   d7ee8:	2003e7c8 	.word	0x2003e7c8
   d7eec:	2003e7c4 	.word	0x2003e7c4
   d7ef0:	2003e7c0 	.word	0x2003e7c0
   d7ef4:	2003e7bc 	.word	0x2003e7bc
   d7ef8:	2003e7b8 	.word	0x2003e7b8
   d7efc:	2003e7b4 	.word	0x2003e7b4
   d7f00:	2003e7b0 	.word	0x2003e7b0
   d7f04:	2003e7ac 	.word	0x2003e7ac
   d7f08:	2003e7a8 	.word	0x2003e7a8
   d7f0c:	2003e7a4 	.word	0x2003e7a4
   d7f10:	2003e7a0 	.word	0x2003e7a0

000d7f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7f14:	4b18      	ldr	r3, [pc, #96]	; (d7f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7f16:	681a      	ldr	r2, [r3, #0]
   d7f18:	07d1      	lsls	r1, r2, #31
   d7f1a:	bf5c      	itt	pl
   d7f1c:	2201      	movpl	r2, #1
   d7f1e:	601a      	strpl	r2, [r3, #0]
   d7f20:	4b16      	ldr	r3, [pc, #88]	; (d7f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7f22:	681a      	ldr	r2, [r3, #0]
   d7f24:	07d2      	lsls	r2, r2, #31
   d7f26:	bf5c      	itt	pl
   d7f28:	2201      	movpl	r2, #1
   d7f2a:	601a      	strpl	r2, [r3, #0]
   d7f2c:	4b14      	ldr	r3, [pc, #80]	; (d7f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7f2e:	681a      	ldr	r2, [r3, #0]
   d7f30:	07d0      	lsls	r0, r2, #31
   d7f32:	bf5c      	itt	pl
   d7f34:	2201      	movpl	r2, #1
   d7f36:	601a      	strpl	r2, [r3, #0]
   d7f38:	4b12      	ldr	r3, [pc, #72]	; (d7f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7f3a:	681a      	ldr	r2, [r3, #0]
   d7f3c:	07d1      	lsls	r1, r2, #31
   d7f3e:	bf5c      	itt	pl
   d7f40:	2201      	movpl	r2, #1
   d7f42:	601a      	strpl	r2, [r3, #0]
   d7f44:	4b10      	ldr	r3, [pc, #64]	; (d7f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7f46:	681a      	ldr	r2, [r3, #0]
   d7f48:	07d2      	lsls	r2, r2, #31
   d7f4a:	bf5c      	itt	pl
   d7f4c:	2201      	movpl	r2, #1
   d7f4e:	601a      	strpl	r2, [r3, #0]
   d7f50:	4b0e      	ldr	r3, [pc, #56]	; (d7f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7f52:	681a      	ldr	r2, [r3, #0]
   d7f54:	07d0      	lsls	r0, r2, #31
   d7f56:	bf5c      	itt	pl
   d7f58:	2201      	movpl	r2, #1
   d7f5a:	601a      	strpl	r2, [r3, #0]
   d7f5c:	4b0c      	ldr	r3, [pc, #48]	; (d7f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7f5e:	681a      	ldr	r2, [r3, #0]
   d7f60:	07d1      	lsls	r1, r2, #31
   d7f62:	bf5c      	itt	pl
   d7f64:	2201      	movpl	r2, #1
   d7f66:	601a      	strpl	r2, [r3, #0]
   d7f68:	4b0a      	ldr	r3, [pc, #40]	; (d7f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7f6a:	681a      	ldr	r2, [r3, #0]
   d7f6c:	07d2      	lsls	r2, r2, #31
   d7f6e:	bf5c      	itt	pl
   d7f70:	2201      	movpl	r2, #1
   d7f72:	601a      	strpl	r2, [r3, #0]
   d7f74:	4770      	bx	lr
   d7f76:	bf00      	nop
   d7f78:	2003e7ec 	.word	0x2003e7ec
   d7f7c:	2003e7e8 	.word	0x2003e7e8
   d7f80:	2003e7e4 	.word	0x2003e7e4
   d7f84:	2003e7e0 	.word	0x2003e7e0
   d7f88:	2003e7dc 	.word	0x2003e7dc
   d7f8c:	2003e7d8 	.word	0x2003e7d8
   d7f90:	2003e7d4 	.word	0x2003e7d4
   d7f94:	2003e7d0 	.word	0x2003e7d0

000d7f98 <__aeabi_drsub>:
   d7f98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7f9c:	e002      	b.n	d7fa4 <__adddf3>
   d7f9e:	bf00      	nop

000d7fa0 <__aeabi_dsub>:
   d7fa0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7fa4 <__adddf3>:
   d7fa4:	b530      	push	{r4, r5, lr}
   d7fa6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7faa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7fae:	ea94 0f05 	teq	r4, r5
   d7fb2:	bf08      	it	eq
   d7fb4:	ea90 0f02 	teqeq	r0, r2
   d7fb8:	bf1f      	itttt	ne
   d7fba:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7fbe:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7fc2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7fc6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7fca:	f000 80e2 	beq.w	d8192 <__adddf3+0x1ee>
   d7fce:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7fd2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7fd6:	bfb8      	it	lt
   d7fd8:	426d      	neglt	r5, r5
   d7fda:	dd0c      	ble.n	d7ff6 <__adddf3+0x52>
   d7fdc:	442c      	add	r4, r5
   d7fde:	ea80 0202 	eor.w	r2, r0, r2
   d7fe2:	ea81 0303 	eor.w	r3, r1, r3
   d7fe6:	ea82 0000 	eor.w	r0, r2, r0
   d7fea:	ea83 0101 	eor.w	r1, r3, r1
   d7fee:	ea80 0202 	eor.w	r2, r0, r2
   d7ff2:	ea81 0303 	eor.w	r3, r1, r3
   d7ff6:	2d36      	cmp	r5, #54	; 0x36
   d7ff8:	bf88      	it	hi
   d7ffa:	bd30      	pophi	{r4, r5, pc}
   d7ffc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8000:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8004:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8008:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d800c:	d002      	beq.n	d8014 <__adddf3+0x70>
   d800e:	4240      	negs	r0, r0
   d8010:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8014:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8018:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d801c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8020:	d002      	beq.n	d8028 <__adddf3+0x84>
   d8022:	4252      	negs	r2, r2
   d8024:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8028:	ea94 0f05 	teq	r4, r5
   d802c:	f000 80a7 	beq.w	d817e <__adddf3+0x1da>
   d8030:	f1a4 0401 	sub.w	r4, r4, #1
   d8034:	f1d5 0e20 	rsbs	lr, r5, #32
   d8038:	db0d      	blt.n	d8056 <__adddf3+0xb2>
   d803a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d803e:	fa22 f205 	lsr.w	r2, r2, r5
   d8042:	1880      	adds	r0, r0, r2
   d8044:	f141 0100 	adc.w	r1, r1, #0
   d8048:	fa03 f20e 	lsl.w	r2, r3, lr
   d804c:	1880      	adds	r0, r0, r2
   d804e:	fa43 f305 	asr.w	r3, r3, r5
   d8052:	4159      	adcs	r1, r3
   d8054:	e00e      	b.n	d8074 <__adddf3+0xd0>
   d8056:	f1a5 0520 	sub.w	r5, r5, #32
   d805a:	f10e 0e20 	add.w	lr, lr, #32
   d805e:	2a01      	cmp	r2, #1
   d8060:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8064:	bf28      	it	cs
   d8066:	f04c 0c02 	orrcs.w	ip, ip, #2
   d806a:	fa43 f305 	asr.w	r3, r3, r5
   d806e:	18c0      	adds	r0, r0, r3
   d8070:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8074:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8078:	d507      	bpl.n	d808a <__adddf3+0xe6>
   d807a:	f04f 0e00 	mov.w	lr, #0
   d807e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8082:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8086:	eb6e 0101 	sbc.w	r1, lr, r1
   d808a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d808e:	d31b      	bcc.n	d80c8 <__adddf3+0x124>
   d8090:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8094:	d30c      	bcc.n	d80b0 <__adddf3+0x10c>
   d8096:	0849      	lsrs	r1, r1, #1
   d8098:	ea5f 0030 	movs.w	r0, r0, rrx
   d809c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d80a0:	f104 0401 	add.w	r4, r4, #1
   d80a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d80a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d80ac:	f080 809a 	bcs.w	d81e4 <__adddf3+0x240>
   d80b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d80b4:	bf08      	it	eq
   d80b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d80ba:	f150 0000 	adcs.w	r0, r0, #0
   d80be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d80c2:	ea41 0105 	orr.w	r1, r1, r5
   d80c6:	bd30      	pop	{r4, r5, pc}
   d80c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d80cc:	4140      	adcs	r0, r0
   d80ce:	eb41 0101 	adc.w	r1, r1, r1
   d80d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d80d6:	f1a4 0401 	sub.w	r4, r4, #1
   d80da:	d1e9      	bne.n	d80b0 <__adddf3+0x10c>
   d80dc:	f091 0f00 	teq	r1, #0
   d80e0:	bf04      	itt	eq
   d80e2:	4601      	moveq	r1, r0
   d80e4:	2000      	moveq	r0, #0
   d80e6:	fab1 f381 	clz	r3, r1
   d80ea:	bf08      	it	eq
   d80ec:	3320      	addeq	r3, #32
   d80ee:	f1a3 030b 	sub.w	r3, r3, #11
   d80f2:	f1b3 0220 	subs.w	r2, r3, #32
   d80f6:	da0c      	bge.n	d8112 <__adddf3+0x16e>
   d80f8:	320c      	adds	r2, #12
   d80fa:	dd08      	ble.n	d810e <__adddf3+0x16a>
   d80fc:	f102 0c14 	add.w	ip, r2, #20
   d8100:	f1c2 020c 	rsb	r2, r2, #12
   d8104:	fa01 f00c 	lsl.w	r0, r1, ip
   d8108:	fa21 f102 	lsr.w	r1, r1, r2
   d810c:	e00c      	b.n	d8128 <__adddf3+0x184>
   d810e:	f102 0214 	add.w	r2, r2, #20
   d8112:	bfd8      	it	le
   d8114:	f1c2 0c20 	rsble	ip, r2, #32
   d8118:	fa01 f102 	lsl.w	r1, r1, r2
   d811c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8120:	bfdc      	itt	le
   d8122:	ea41 010c 	orrle.w	r1, r1, ip
   d8126:	4090      	lslle	r0, r2
   d8128:	1ae4      	subs	r4, r4, r3
   d812a:	bfa2      	ittt	ge
   d812c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8130:	4329      	orrge	r1, r5
   d8132:	bd30      	popge	{r4, r5, pc}
   d8134:	ea6f 0404 	mvn.w	r4, r4
   d8138:	3c1f      	subs	r4, #31
   d813a:	da1c      	bge.n	d8176 <__adddf3+0x1d2>
   d813c:	340c      	adds	r4, #12
   d813e:	dc0e      	bgt.n	d815e <__adddf3+0x1ba>
   d8140:	f104 0414 	add.w	r4, r4, #20
   d8144:	f1c4 0220 	rsb	r2, r4, #32
   d8148:	fa20 f004 	lsr.w	r0, r0, r4
   d814c:	fa01 f302 	lsl.w	r3, r1, r2
   d8150:	ea40 0003 	orr.w	r0, r0, r3
   d8154:	fa21 f304 	lsr.w	r3, r1, r4
   d8158:	ea45 0103 	orr.w	r1, r5, r3
   d815c:	bd30      	pop	{r4, r5, pc}
   d815e:	f1c4 040c 	rsb	r4, r4, #12
   d8162:	f1c4 0220 	rsb	r2, r4, #32
   d8166:	fa20 f002 	lsr.w	r0, r0, r2
   d816a:	fa01 f304 	lsl.w	r3, r1, r4
   d816e:	ea40 0003 	orr.w	r0, r0, r3
   d8172:	4629      	mov	r1, r5
   d8174:	bd30      	pop	{r4, r5, pc}
   d8176:	fa21 f004 	lsr.w	r0, r1, r4
   d817a:	4629      	mov	r1, r5
   d817c:	bd30      	pop	{r4, r5, pc}
   d817e:	f094 0f00 	teq	r4, #0
   d8182:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8186:	bf06      	itte	eq
   d8188:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d818c:	3401      	addeq	r4, #1
   d818e:	3d01      	subne	r5, #1
   d8190:	e74e      	b.n	d8030 <__adddf3+0x8c>
   d8192:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8196:	bf18      	it	ne
   d8198:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d819c:	d029      	beq.n	d81f2 <__adddf3+0x24e>
   d819e:	ea94 0f05 	teq	r4, r5
   d81a2:	bf08      	it	eq
   d81a4:	ea90 0f02 	teqeq	r0, r2
   d81a8:	d005      	beq.n	d81b6 <__adddf3+0x212>
   d81aa:	ea54 0c00 	orrs.w	ip, r4, r0
   d81ae:	bf04      	itt	eq
   d81b0:	4619      	moveq	r1, r3
   d81b2:	4610      	moveq	r0, r2
   d81b4:	bd30      	pop	{r4, r5, pc}
   d81b6:	ea91 0f03 	teq	r1, r3
   d81ba:	bf1e      	ittt	ne
   d81bc:	2100      	movne	r1, #0
   d81be:	2000      	movne	r0, #0
   d81c0:	bd30      	popne	{r4, r5, pc}
   d81c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d81c6:	d105      	bne.n	d81d4 <__adddf3+0x230>
   d81c8:	0040      	lsls	r0, r0, #1
   d81ca:	4149      	adcs	r1, r1
   d81cc:	bf28      	it	cs
   d81ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d81d2:	bd30      	pop	{r4, r5, pc}
   d81d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d81d8:	bf3c      	itt	cc
   d81da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d81de:	bd30      	popcc	{r4, r5, pc}
   d81e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d81e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d81e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d81ec:	f04f 0000 	mov.w	r0, #0
   d81f0:	bd30      	pop	{r4, r5, pc}
   d81f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d81f6:	bf1a      	itte	ne
   d81f8:	4619      	movne	r1, r3
   d81fa:	4610      	movne	r0, r2
   d81fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8200:	bf1c      	itt	ne
   d8202:	460b      	movne	r3, r1
   d8204:	4602      	movne	r2, r0
   d8206:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d820a:	bf06      	itte	eq
   d820c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8210:	ea91 0f03 	teqeq	r1, r3
   d8214:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8218:	bd30      	pop	{r4, r5, pc}
   d821a:	bf00      	nop

000d821c <__aeabi_ui2d>:
   d821c:	f090 0f00 	teq	r0, #0
   d8220:	bf04      	itt	eq
   d8222:	2100      	moveq	r1, #0
   d8224:	4770      	bxeq	lr
   d8226:	b530      	push	{r4, r5, lr}
   d8228:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d822c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8230:	f04f 0500 	mov.w	r5, #0
   d8234:	f04f 0100 	mov.w	r1, #0
   d8238:	e750      	b.n	d80dc <__adddf3+0x138>
   d823a:	bf00      	nop

000d823c <__aeabi_i2d>:
   d823c:	f090 0f00 	teq	r0, #0
   d8240:	bf04      	itt	eq
   d8242:	2100      	moveq	r1, #0
   d8244:	4770      	bxeq	lr
   d8246:	b530      	push	{r4, r5, lr}
   d8248:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d824c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8250:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8254:	bf48      	it	mi
   d8256:	4240      	negmi	r0, r0
   d8258:	f04f 0100 	mov.w	r1, #0
   d825c:	e73e      	b.n	d80dc <__adddf3+0x138>
   d825e:	bf00      	nop

000d8260 <__aeabi_f2d>:
   d8260:	0042      	lsls	r2, r0, #1
   d8262:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8266:	ea4f 0131 	mov.w	r1, r1, rrx
   d826a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d826e:	bf1f      	itttt	ne
   d8270:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8274:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8278:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d827c:	4770      	bxne	lr
   d827e:	f092 0f00 	teq	r2, #0
   d8282:	bf14      	ite	ne
   d8284:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8288:	4770      	bxeq	lr
   d828a:	b530      	push	{r4, r5, lr}
   d828c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8290:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8294:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8298:	e720      	b.n	d80dc <__adddf3+0x138>
   d829a:	bf00      	nop

000d829c <__aeabi_ul2d>:
   d829c:	ea50 0201 	orrs.w	r2, r0, r1
   d82a0:	bf08      	it	eq
   d82a2:	4770      	bxeq	lr
   d82a4:	b530      	push	{r4, r5, lr}
   d82a6:	f04f 0500 	mov.w	r5, #0
   d82aa:	e00a      	b.n	d82c2 <__aeabi_l2d+0x16>

000d82ac <__aeabi_l2d>:
   d82ac:	ea50 0201 	orrs.w	r2, r0, r1
   d82b0:	bf08      	it	eq
   d82b2:	4770      	bxeq	lr
   d82b4:	b530      	push	{r4, r5, lr}
   d82b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d82ba:	d502      	bpl.n	d82c2 <__aeabi_l2d+0x16>
   d82bc:	4240      	negs	r0, r0
   d82be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d82c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d82c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d82ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d82ce:	f43f aedc 	beq.w	d808a <__adddf3+0xe6>
   d82d2:	f04f 0203 	mov.w	r2, #3
   d82d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d82da:	bf18      	it	ne
   d82dc:	3203      	addne	r2, #3
   d82de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d82e2:	bf18      	it	ne
   d82e4:	3203      	addne	r2, #3
   d82e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d82ea:	f1c2 0320 	rsb	r3, r2, #32
   d82ee:	fa00 fc03 	lsl.w	ip, r0, r3
   d82f2:	fa20 f002 	lsr.w	r0, r0, r2
   d82f6:	fa01 fe03 	lsl.w	lr, r1, r3
   d82fa:	ea40 000e 	orr.w	r0, r0, lr
   d82fe:	fa21 f102 	lsr.w	r1, r1, r2
   d8302:	4414      	add	r4, r2
   d8304:	e6c1      	b.n	d808a <__adddf3+0xe6>
   d8306:	bf00      	nop

000d8308 <__aeabi_dmul>:
   d8308:	b570      	push	{r4, r5, r6, lr}
   d830a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d830e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8312:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8316:	bf1d      	ittte	ne
   d8318:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d831c:	ea94 0f0c 	teqne	r4, ip
   d8320:	ea95 0f0c 	teqne	r5, ip
   d8324:	f000 f8de 	bleq	d84e4 <__aeabi_dmul+0x1dc>
   d8328:	442c      	add	r4, r5
   d832a:	ea81 0603 	eor.w	r6, r1, r3
   d832e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8332:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8336:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d833a:	bf18      	it	ne
   d833c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8340:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8348:	d038      	beq.n	d83bc <__aeabi_dmul+0xb4>
   d834a:	fba0 ce02 	umull	ip, lr, r0, r2
   d834e:	f04f 0500 	mov.w	r5, #0
   d8352:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8356:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d835a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d835e:	f04f 0600 	mov.w	r6, #0
   d8362:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8366:	f09c 0f00 	teq	ip, #0
   d836a:	bf18      	it	ne
   d836c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8370:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8374:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8378:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d837c:	d204      	bcs.n	d8388 <__aeabi_dmul+0x80>
   d837e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8382:	416d      	adcs	r5, r5
   d8384:	eb46 0606 	adc.w	r6, r6, r6
   d8388:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d838c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8390:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8394:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8398:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d839c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d83a0:	bf88      	it	hi
   d83a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d83a6:	d81e      	bhi.n	d83e6 <__aeabi_dmul+0xde>
   d83a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d83ac:	bf08      	it	eq
   d83ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d83b2:	f150 0000 	adcs.w	r0, r0, #0
   d83b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d83ba:	bd70      	pop	{r4, r5, r6, pc}
   d83bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d83c0:	ea46 0101 	orr.w	r1, r6, r1
   d83c4:	ea40 0002 	orr.w	r0, r0, r2
   d83c8:	ea81 0103 	eor.w	r1, r1, r3
   d83cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d83d0:	bfc2      	ittt	gt
   d83d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d83d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d83da:	bd70      	popgt	{r4, r5, r6, pc}
   d83dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d83e0:	f04f 0e00 	mov.w	lr, #0
   d83e4:	3c01      	subs	r4, #1
   d83e6:	f300 80ab 	bgt.w	d8540 <__aeabi_dmul+0x238>
   d83ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d83ee:	bfde      	ittt	le
   d83f0:	2000      	movle	r0, #0
   d83f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d83f6:	bd70      	pople	{r4, r5, r6, pc}
   d83f8:	f1c4 0400 	rsb	r4, r4, #0
   d83fc:	3c20      	subs	r4, #32
   d83fe:	da35      	bge.n	d846c <__aeabi_dmul+0x164>
   d8400:	340c      	adds	r4, #12
   d8402:	dc1b      	bgt.n	d843c <__aeabi_dmul+0x134>
   d8404:	f104 0414 	add.w	r4, r4, #20
   d8408:	f1c4 0520 	rsb	r5, r4, #32
   d840c:	fa00 f305 	lsl.w	r3, r0, r5
   d8410:	fa20 f004 	lsr.w	r0, r0, r4
   d8414:	fa01 f205 	lsl.w	r2, r1, r5
   d8418:	ea40 0002 	orr.w	r0, r0, r2
   d841c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8420:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8424:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8428:	fa21 f604 	lsr.w	r6, r1, r4
   d842c:	eb42 0106 	adc.w	r1, r2, r6
   d8430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8434:	bf08      	it	eq
   d8436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d843a:	bd70      	pop	{r4, r5, r6, pc}
   d843c:	f1c4 040c 	rsb	r4, r4, #12
   d8440:	f1c4 0520 	rsb	r5, r4, #32
   d8444:	fa00 f304 	lsl.w	r3, r0, r4
   d8448:	fa20 f005 	lsr.w	r0, r0, r5
   d844c:	fa01 f204 	lsl.w	r2, r1, r4
   d8450:	ea40 0002 	orr.w	r0, r0, r2
   d8454:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8458:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d845c:	f141 0100 	adc.w	r1, r1, #0
   d8460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8464:	bf08      	it	eq
   d8466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d846a:	bd70      	pop	{r4, r5, r6, pc}
   d846c:	f1c4 0520 	rsb	r5, r4, #32
   d8470:	fa00 f205 	lsl.w	r2, r0, r5
   d8474:	ea4e 0e02 	orr.w	lr, lr, r2
   d8478:	fa20 f304 	lsr.w	r3, r0, r4
   d847c:	fa01 f205 	lsl.w	r2, r1, r5
   d8480:	ea43 0302 	orr.w	r3, r3, r2
   d8484:	fa21 f004 	lsr.w	r0, r1, r4
   d8488:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d848c:	fa21 f204 	lsr.w	r2, r1, r4
   d8490:	ea20 0002 	bic.w	r0, r0, r2
   d8494:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8498:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d849c:	bf08      	it	eq
   d849e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d84a2:	bd70      	pop	{r4, r5, r6, pc}
   d84a4:	f094 0f00 	teq	r4, #0
   d84a8:	d10f      	bne.n	d84ca <__aeabi_dmul+0x1c2>
   d84aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d84ae:	0040      	lsls	r0, r0, #1
   d84b0:	eb41 0101 	adc.w	r1, r1, r1
   d84b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d84b8:	bf08      	it	eq
   d84ba:	3c01      	subeq	r4, #1
   d84bc:	d0f7      	beq.n	d84ae <__aeabi_dmul+0x1a6>
   d84be:	ea41 0106 	orr.w	r1, r1, r6
   d84c2:	f095 0f00 	teq	r5, #0
   d84c6:	bf18      	it	ne
   d84c8:	4770      	bxne	lr
   d84ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d84ce:	0052      	lsls	r2, r2, #1
   d84d0:	eb43 0303 	adc.w	r3, r3, r3
   d84d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d84d8:	bf08      	it	eq
   d84da:	3d01      	subeq	r5, #1
   d84dc:	d0f7      	beq.n	d84ce <__aeabi_dmul+0x1c6>
   d84de:	ea43 0306 	orr.w	r3, r3, r6
   d84e2:	4770      	bx	lr
   d84e4:	ea94 0f0c 	teq	r4, ip
   d84e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d84ec:	bf18      	it	ne
   d84ee:	ea95 0f0c 	teqne	r5, ip
   d84f2:	d00c      	beq.n	d850e <__aeabi_dmul+0x206>
   d84f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d84f8:	bf18      	it	ne
   d84fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d84fe:	d1d1      	bne.n	d84a4 <__aeabi_dmul+0x19c>
   d8500:	ea81 0103 	eor.w	r1, r1, r3
   d8504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8508:	f04f 0000 	mov.w	r0, #0
   d850c:	bd70      	pop	{r4, r5, r6, pc}
   d850e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8512:	bf06      	itte	eq
   d8514:	4610      	moveq	r0, r2
   d8516:	4619      	moveq	r1, r3
   d8518:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d851c:	d019      	beq.n	d8552 <__aeabi_dmul+0x24a>
   d851e:	ea94 0f0c 	teq	r4, ip
   d8522:	d102      	bne.n	d852a <__aeabi_dmul+0x222>
   d8524:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8528:	d113      	bne.n	d8552 <__aeabi_dmul+0x24a>
   d852a:	ea95 0f0c 	teq	r5, ip
   d852e:	d105      	bne.n	d853c <__aeabi_dmul+0x234>
   d8530:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8534:	bf1c      	itt	ne
   d8536:	4610      	movne	r0, r2
   d8538:	4619      	movne	r1, r3
   d853a:	d10a      	bne.n	d8552 <__aeabi_dmul+0x24a>
   d853c:	ea81 0103 	eor.w	r1, r1, r3
   d8540:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8544:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8548:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d854c:	f04f 0000 	mov.w	r0, #0
   d8550:	bd70      	pop	{r4, r5, r6, pc}
   d8552:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8556:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d855a:	bd70      	pop	{r4, r5, r6, pc}

000d855c <__aeabi_ddiv>:
   d855c:	b570      	push	{r4, r5, r6, lr}
   d855e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d856a:	bf1d      	ittte	ne
   d856c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8570:	ea94 0f0c 	teqne	r4, ip
   d8574:	ea95 0f0c 	teqne	r5, ip
   d8578:	f000 f8a7 	bleq	d86ca <__aeabi_ddiv+0x16e>
   d857c:	eba4 0405 	sub.w	r4, r4, r5
   d8580:	ea81 0e03 	eor.w	lr, r1, r3
   d8584:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8588:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d858c:	f000 8088 	beq.w	d86a0 <__aeabi_ddiv+0x144>
   d8590:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8594:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8598:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d859c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d85a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d85a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d85a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d85ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d85b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d85b4:	429d      	cmp	r5, r3
   d85b6:	bf08      	it	eq
   d85b8:	4296      	cmpeq	r6, r2
   d85ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d85be:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d85c2:	d202      	bcs.n	d85ca <__aeabi_ddiv+0x6e>
   d85c4:	085b      	lsrs	r3, r3, #1
   d85c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d85ca:	1ab6      	subs	r6, r6, r2
   d85cc:	eb65 0503 	sbc.w	r5, r5, r3
   d85d0:	085b      	lsrs	r3, r3, #1
   d85d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d85d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d85da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d85de:	ebb6 0e02 	subs.w	lr, r6, r2
   d85e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d85e6:	bf22      	ittt	cs
   d85e8:	1ab6      	subcs	r6, r6, r2
   d85ea:	4675      	movcs	r5, lr
   d85ec:	ea40 000c 	orrcs.w	r0, r0, ip
   d85f0:	085b      	lsrs	r3, r3, #1
   d85f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d85f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d85fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d85fe:	bf22      	ittt	cs
   d8600:	1ab6      	subcs	r6, r6, r2
   d8602:	4675      	movcs	r5, lr
   d8604:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8608:	085b      	lsrs	r3, r3, #1
   d860a:	ea4f 0232 	mov.w	r2, r2, rrx
   d860e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8612:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8616:	bf22      	ittt	cs
   d8618:	1ab6      	subcs	r6, r6, r2
   d861a:	4675      	movcs	r5, lr
   d861c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8620:	085b      	lsrs	r3, r3, #1
   d8622:	ea4f 0232 	mov.w	r2, r2, rrx
   d8626:	ebb6 0e02 	subs.w	lr, r6, r2
   d862a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d862e:	bf22      	ittt	cs
   d8630:	1ab6      	subcs	r6, r6, r2
   d8632:	4675      	movcs	r5, lr
   d8634:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8638:	ea55 0e06 	orrs.w	lr, r5, r6
   d863c:	d018      	beq.n	d8670 <__aeabi_ddiv+0x114>
   d863e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8642:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8646:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d864a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d864e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8652:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8656:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d865a:	d1c0      	bne.n	d85de <__aeabi_ddiv+0x82>
   d865c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8660:	d10b      	bne.n	d867a <__aeabi_ddiv+0x11e>
   d8662:	ea41 0100 	orr.w	r1, r1, r0
   d8666:	f04f 0000 	mov.w	r0, #0
   d866a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d866e:	e7b6      	b.n	d85de <__aeabi_ddiv+0x82>
   d8670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8674:	bf04      	itt	eq
   d8676:	4301      	orreq	r1, r0
   d8678:	2000      	moveq	r0, #0
   d867a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d867e:	bf88      	it	hi
   d8680:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8684:	f63f aeaf 	bhi.w	d83e6 <__aeabi_dmul+0xde>
   d8688:	ebb5 0c03 	subs.w	ip, r5, r3
   d868c:	bf04      	itt	eq
   d868e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8692:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8696:	f150 0000 	adcs.w	r0, r0, #0
   d869a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d869e:	bd70      	pop	{r4, r5, r6, pc}
   d86a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d86a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d86a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d86ac:	bfc2      	ittt	gt
   d86ae:	ebd4 050c 	rsbsgt	r5, r4, ip
   d86b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d86b6:	bd70      	popgt	{r4, r5, r6, pc}
   d86b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d86bc:	f04f 0e00 	mov.w	lr, #0
   d86c0:	3c01      	subs	r4, #1
   d86c2:	e690      	b.n	d83e6 <__aeabi_dmul+0xde>
   d86c4:	ea45 0e06 	orr.w	lr, r5, r6
   d86c8:	e68d      	b.n	d83e6 <__aeabi_dmul+0xde>
   d86ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d86ce:	ea94 0f0c 	teq	r4, ip
   d86d2:	bf08      	it	eq
   d86d4:	ea95 0f0c 	teqeq	r5, ip
   d86d8:	f43f af3b 	beq.w	d8552 <__aeabi_dmul+0x24a>
   d86dc:	ea94 0f0c 	teq	r4, ip
   d86e0:	d10a      	bne.n	d86f8 <__aeabi_ddiv+0x19c>
   d86e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d86e6:	f47f af34 	bne.w	d8552 <__aeabi_dmul+0x24a>
   d86ea:	ea95 0f0c 	teq	r5, ip
   d86ee:	f47f af25 	bne.w	d853c <__aeabi_dmul+0x234>
   d86f2:	4610      	mov	r0, r2
   d86f4:	4619      	mov	r1, r3
   d86f6:	e72c      	b.n	d8552 <__aeabi_dmul+0x24a>
   d86f8:	ea95 0f0c 	teq	r5, ip
   d86fc:	d106      	bne.n	d870c <__aeabi_ddiv+0x1b0>
   d86fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8702:	f43f aefd 	beq.w	d8500 <__aeabi_dmul+0x1f8>
   d8706:	4610      	mov	r0, r2
   d8708:	4619      	mov	r1, r3
   d870a:	e722      	b.n	d8552 <__aeabi_dmul+0x24a>
   d870c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8710:	bf18      	it	ne
   d8712:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8716:	f47f aec5 	bne.w	d84a4 <__aeabi_dmul+0x19c>
   d871a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d871e:	f47f af0d 	bne.w	d853c <__aeabi_dmul+0x234>
   d8722:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8726:	f47f aeeb 	bne.w	d8500 <__aeabi_dmul+0x1f8>
   d872a:	e712      	b.n	d8552 <__aeabi_dmul+0x24a>

000d872c <__aeabi_d2f>:
   d872c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8730:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8734:	bf24      	itt	cs
   d8736:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d873a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d873e:	d90d      	bls.n	d875c <__aeabi_d2f+0x30>
   d8740:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8744:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8748:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d874c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8750:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8754:	bf08      	it	eq
   d8756:	f020 0001 	biceq.w	r0, r0, #1
   d875a:	4770      	bx	lr
   d875c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8760:	d121      	bne.n	d87a6 <__aeabi_d2f+0x7a>
   d8762:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8766:	bfbc      	itt	lt
   d8768:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d876c:	4770      	bxlt	lr
   d876e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8772:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8776:	f1c2 0218 	rsb	r2, r2, #24
   d877a:	f1c2 0c20 	rsb	ip, r2, #32
   d877e:	fa10 f30c 	lsls.w	r3, r0, ip
   d8782:	fa20 f002 	lsr.w	r0, r0, r2
   d8786:	bf18      	it	ne
   d8788:	f040 0001 	orrne.w	r0, r0, #1
   d878c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8790:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8794:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8798:	ea40 000c 	orr.w	r0, r0, ip
   d879c:	fa23 f302 	lsr.w	r3, r3, r2
   d87a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d87a4:	e7cc      	b.n	d8740 <__aeabi_d2f+0x14>
   d87a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d87aa:	d107      	bne.n	d87bc <__aeabi_d2f+0x90>
   d87ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d87b0:	bf1e      	ittt	ne
   d87b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d87b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d87ba:	4770      	bxne	lr
   d87bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d87c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d87c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d87c8:	4770      	bx	lr
   d87ca:	bf00      	nop

000d87cc <__cxa_atexit>:
   d87cc:	b510      	push	{r4, lr}
   d87ce:	4c05      	ldr	r4, [pc, #20]	; (d87e4 <__cxa_atexit+0x18>)
   d87d0:	4613      	mov	r3, r2
   d87d2:	b12c      	cbz	r4, d87e0 <__cxa_atexit+0x14>
   d87d4:	460a      	mov	r2, r1
   d87d6:	4601      	mov	r1, r0
   d87d8:	2002      	movs	r0, #2
   d87da:	f3af 8000 	nop.w
   d87de:	bd10      	pop	{r4, pc}
   d87e0:	4620      	mov	r0, r4
   d87e2:	bd10      	pop	{r4, pc}
   d87e4:	00000000 	.word	0x00000000

000d87e8 <memcpy>:
   d87e8:	b510      	push	{r4, lr}
   d87ea:	1e43      	subs	r3, r0, #1
   d87ec:	440a      	add	r2, r1
   d87ee:	4291      	cmp	r1, r2
   d87f0:	d004      	beq.n	d87fc <memcpy+0x14>
   d87f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d87f6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d87fa:	e7f8      	b.n	d87ee <memcpy+0x6>
   d87fc:	bd10      	pop	{r4, pc}

000d87fe <memset>:
   d87fe:	4402      	add	r2, r0
   d8800:	4603      	mov	r3, r0
   d8802:	4293      	cmp	r3, r2
   d8804:	d002      	beq.n	d880c <memset+0xe>
   d8806:	f803 1b01 	strb.w	r1, [r3], #1
   d880a:	e7fa      	b.n	d8802 <memset+0x4>
   d880c:	4770      	bx	lr
	...

000d8810 <srand>:
   d8810:	b538      	push	{r3, r4, r5, lr}
   d8812:	4b12      	ldr	r3, [pc, #72]	; (d885c <srand+0x4c>)
   d8814:	681c      	ldr	r4, [r3, #0]
   d8816:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8818:	4605      	mov	r5, r0
   d881a:	b9d3      	cbnz	r3, d8852 <srand+0x42>
   d881c:	2018      	movs	r0, #24
   d881e:	f7fe f829 	bl	d6874 <malloc>
   d8822:	f243 330e 	movw	r3, #13070	; 0x330e
   d8826:	63a0      	str	r0, [r4, #56]	; 0x38
   d8828:	8003      	strh	r3, [r0, #0]
   d882a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d882e:	8043      	strh	r3, [r0, #2]
   d8830:	f241 2334 	movw	r3, #4660	; 0x1234
   d8834:	8083      	strh	r3, [r0, #4]
   d8836:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d883a:	80c3      	strh	r3, [r0, #6]
   d883c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8840:	8103      	strh	r3, [r0, #8]
   d8842:	2305      	movs	r3, #5
   d8844:	8143      	strh	r3, [r0, #10]
   d8846:	230b      	movs	r3, #11
   d8848:	8183      	strh	r3, [r0, #12]
   d884a:	2201      	movs	r2, #1
   d884c:	2300      	movs	r3, #0
   d884e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8854:	2200      	movs	r2, #0
   d8856:	611d      	str	r5, [r3, #16]
   d8858:	615a      	str	r2, [r3, #20]
   d885a:	bd38      	pop	{r3, r4, r5, pc}
   d885c:	2003dcec 	.word	0x2003dcec

000d8860 <strcpy>:
   d8860:	4603      	mov	r3, r0
   d8862:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8866:	f803 2b01 	strb.w	r2, [r3], #1
   d886a:	2a00      	cmp	r2, #0
   d886c:	d1f9      	bne.n	d8862 <strcpy+0x2>
   d886e:	4770      	bx	lr

000d8870 <strlen>:
   d8870:	4603      	mov	r3, r0
   d8872:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8876:	2a00      	cmp	r2, #0
   d8878:	d1fb      	bne.n	d8872 <strlen+0x2>
   d887a:	1a18      	subs	r0, r3, r0
   d887c:	3801      	subs	r0, #1
   d887e:	4770      	bx	lr

000d8880 <dynalib_user>:
   d8880:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d8890:	0000 0000                                   ....

000d8894 <_ZTVN8particle13__SPISettingsE>:
	...
   d889c:	40f9 000d                                   .@..

000d88a0 <_ZTV4File>:
	...
   d88a8:	40f5 000d 419b 000d 4183 000d 417d 000d     .@...A...A..}A..
   d88b8:	40c9 000d 415d 000d 4157 000d 4151 000d     .@..]A..WA..QA..
   d88c8:	ff7e 0006 0001 0000 ef00 6564 6166 6c75     ~.........defaul
   d88d8:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   d88e8:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   d88f8:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   d8908:	6c25 2075 7325 4d20 444f 2545 3e64 6900     %lu %s MODE%d>.i
   d8918:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   d8928:	6c69 6465 0021 4453 6f6c 2067 6e69 7469     iled!.SDlog init
   d8938:	4400 5046 616c 6579 2072 6e69 7469 6620     .DFPlayer init f
   d8948:	6961 656c 0064 4644 6c50 7961 7265 6920     ailed.DFPlayer i
   d8958:	696e 0074 6e49 7469 6169 696c 617a 6974     nit.Initializati
   d8968:	6e6f 6620 6e69 7369 6568 0064 6f63 6e6e     on finished.conn
   d8978:	6365 6974 676e 7420 206f 514d 5454 2e20     ecting to MQTT .
   d8988:	2e2e 7200 7465 7972 6e69 2067 514d 5454     ...retrying MQTT
   d8998:	6320 6e6f 656e 7463 6f69 206e 6e69 3520      connection in 5
   d89a8:	7320 6365 6e6f 7364 2e2e 002e 514d 5454      seconds....MQTT
   d89b8:	6320 6e6f 656e 7463 6465 003f 716d 6176      connected?.mqva
   d89c8:	3a6c 2520 2069 4f43 7070 3a6d 2520 2e30     l: %i COppm: %0.
   d89d8:	6632 000a 6144 6174 6f4c 2e67 7363 0076     2f..DataLog.csv.
   d89e8:	6941 2072 7551 6c61 7469 2079 6177 6e72     Air Quality warn
   d89f8:	6e69 2e67 4120 2051 6572 6461 203a 6925     ing. AQ read: %i
   d8a08:	0a20 4100 7269 5120 6175 696c 7974 5220      ..Air Quality R
   d8a18:	6165 3a64 2520 2069 000a 5141 7720 6972     ead: %i ..AQ wri
   d8a28:	6574 6520 7272 726f 4d00 2d51 2039 6177     te error.MQ-9 wa
   d8a38:	6e72 6e69 2e67 4d20 2d51 2039 6572 6461     rning. MQ-9 read
   d8a48:	203a 6925 0a20 4d00 2d51 2039 7277 7469     : %i ..MQ-9 writ
   d8a58:	2065 7265 6f72 0072 6f6e 696d 616e 206c     e error.nominal 
   d8a68:	6572 6461 2e73 4d20 3951 203a 6925 4120     reads. MQ9: %i A
   d8a78:	3a51 2520 2069 6554 706d 7265 7461 7275     Q: %i Temperatur
   d8a88:	3a65 0a20 6e00 6d6f 6e69 6c61 7220 6165     e: ..nominal rea
   d8a98:	6964 676e 2e73 6e20 746f 6968 676e 7420     dings. nothing t
   d8aa8:	206f 6572 6f63 6472 6e00 6d6f 6e69 6c61     o record.nominal
   d8ab8:	7220 6165 6964 676e 2073 7277 7469 2065      readings write 
   d8ac8:	7265 6f72 2e72 4400 4e41 4547 2052 4d49     error..DANGER IM
   d8ad8:	494d 414e 544e 202e 514d 392d 203a 6925     MINANT. MQ-9: %i
   d8ae8:	4120 3a51 2520 2069 6554 706d 203a 6925      AQ: %i Temp: %i
   d8af8:	0a20 4800 6769 2068 6144 676e 7265 202e      ..High Danger. 
   d8b08:	514d 392d 203a 6925 4120 3a51 2520 2069     MQ-9: %i AQ: %i 
   d8b18:	6554 706d 2520 2069 000a 6948 6867 6420     Temp %i ..High d
   d8b28:	6e61 6567 2072 7277 7469 2065 7265 6f72     anger write erro
   d8b38:	2e72 6d00 7561 6972 6963 766f 3939 6900     r..mauriciov99.i
   d8b48:	2e6f 6461 6661 7572 7469 632e 6d6f 7400     o.adafruit.com.t
   d8b58:	6968 6973 6173 6172 646e 6d6f 7473 6972     hisisarandomstri
   d8b68:	676e 6f66 6172 656b 0079 616d 7275 6369     ngforakey.mauric
   d8b78:	6f69 3976 2f39 6566 6465 2f73 0020 616d     iov99/feeds/ .ma
   d8b88:	7275 6369 6f69 3976 2f39 6566 6465 2f73     uriciov99/feeds/
   d8b98:	6d53 7261 5f74 6548 6d6c 7465 425f 454d     Smart_Helmet_BME
   d8ba8:	6d00 7561 6972 6963 766f 3939 662f 6565     .mauriciov99/fee
   d8bb8:	7364 532f 616d 7472 485f 6c65 656d 5f74     ds/Smart_Helmet_
   d8bc8:	514d 392d 6d00 7561 6972 6963 766f 3939     MQ-9.mauriciov99
   d8bd8:	662f 6565 7364 532f 616d 7472 485f 6c65     /feeds/Smart_Hel
   d8be8:	656d 5f74 6941 5172 6175 696c 7974 0000     met_AirQuality..
   d8bf8:	c000 4001 1000 4002 2000 4002               ...@...@. .@

000d8c04 <CSWTCH.65>:
   d8c04:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d8c14:	0050 0000                                   P...

000d8c18 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d8c20:	40f7 000d 44dd 000d 5109 000d 51b5 000d     .@...D...Q...Q..
   d8c30:	51e7 000d 511d 000d 515d 000d               .Q...Q..]Q..

000d8c3c <_ZTV13Adafruit_MQTT>:
	...
   d8c4c:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   d8c5c:	40a5 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   d8c6c:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   d8c7c:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   d8c8c:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   d8c9c:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   d8cac:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   d8cbc:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   d8ccc:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   d8cdc:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   d8cec:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   d8cfc:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   d8d0c:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   d8d1c:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   d8d2c:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   d8d3c:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   d8d4c:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   d8d5c:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   d8d6c:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   d8d7c:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   d8d8c:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   d8d9c:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   d8dac:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   d8dbc:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   d8dcc:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   d8ddc:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   d8dec:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   d8dfc:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   d8e0c:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   d8e1c:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   d8e2c:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   d8e3c:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   d8e4c:	7465 6961 736c 002e                         etails..

000d8e54 <_ZTVN5spark13EthernetClassE>:
	...
   d8e5c:	6913 000d 6909 000d 68ff 000d 68f5 000d     .i...i...h...h..
   d8e6c:	68e9 000d 68dd 000d 68d1 000d 68c9 000d     .h...h...h...h..
   d8e7c:	68bf 000d 68b5 000d 7a51 000d               .h...h..Qz..

000d8e88 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8e88:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d8e98:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d8ea8:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d8eb8:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d8ec8:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d8ed8:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d8ee8:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d8ef8:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d8f08:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   d8f18:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   d8f28:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   d8f38:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d8f48:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d8f58:	7000 6e61 6369 6100 6c6c 5a00 2500 302b     .panic.all.Z.%+0
   d8f68:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   d8f78:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d8f88:	6d69 0065                                   ime.

000d8f8c <_ZTV9IPAddress>:
	...
   d8f94:	6de1 000d 6dd1 000d 6dd3 000d               .m...m...m..

000d8fa0 <_ZTV9USBSerial>:
	...
   d8fa8:	6ee5 000d 6f35 000d 6f43 000d 6b29 000d     .n..5o..Co..)k..
   d8fb8:	6f21 000d 6ee7 000d 6efd 000d 6f2f 000d     !o...n...n../o..
   d8fc8:	6f13 000d 6ee1 000d                         .o...n..

000d8fd0 <_ZTV11USARTSerial>:
	...
   d8fd8:	7045 000d 7095 000d 70a3 000d 6b29 000d     Ep...p...p..)k..
   d8fe8:	7059 000d 707b 000d 7067 000d 708f 000d     Yp..{p..gp...p..
   d8ff8:	7047 000d 704b 000d                         Gp..Kp..

000d9000 <_ZTV7TwoWire>:
	...
   d9008:	7155 000d 719f 000d 7177 000d 7157 000d     Uq...q..wq..Wq..
   d9018:	717f 000d 7187 000d 718f 000d 7197 000d     .q...q...q...q..

000d9028 <_ZTVN5spark9MeshClassE>:
	...
   d9030:	72c1 000d 72b7 000d 72ad 000d 72a3 000d     .r...r...r...r..
   d9040:	7297 000d 728b 000d 727f 000d 7277 000d     .r...r...r..wr..
   d9050:	726d 000d 7263 000d 7a51 000d               mr..cr..Qz..

000d905c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9064:	7465 000d 746b 000d 7953 000d 7479 000d     et..kt..Sy..yt..
   d9074:	7467 000d                                   gt..

000d9078 <_ZTV9TCPClient>:
	...
   d9080:	41b9 000d 41ed 000d 73dd 000d 73f7 000d     .A...A...s...s..
   d9090:	77f9 000d 754b 000d 751d 000d 7421 000d     .w..Ku...u..!t..
   d90a0:	76d5 000d 75d1 000d 757f 000d 77c9 000d     .v...u...u...w..
   d90b0:	7423 000d 745b 000d 7409 000d 747d 000d     #t..[t...t..}t..
   d90c0:	74fd 000d 6977 6972 676e 7200 6365 2076     .t..wiring.recv 
   d90d0:	7265 6f72 2072 203d 6425 0000               error = %d..

000d90dc <_ZTVN5spark9WiFiClassE>:
	...
   d90e4:	79c9 000d 79bf 000d 79b5 000d 796b 000d     .y...y...y..ky..
   d90f4:	79a9 000d 799d 000d 7991 000d 7989 000d     .y...y...y...y..
   d9104:	797f 000d 7975 000d 7a51 000d               .y..uy..Qz..

000d9110 <_ZTVN5spark12NetworkClassE>:
	...
   d9118:	79e9 000d 79f3 000d 79fd 000d 7a07 000d     .y...y...y...z..
   d9128:	7a11 000d 7a1d 000d 7a29 000d 7a35 000d     .z...z..)z..5z..
   d9138:	7a3d 000d 7a47 000d 7a51 000d               =z..Gz..Qz..

000d9144 <_ZSt7nothrow>:
   d9144:	0000 0000                                   ....

000d9148 <__sf_fake_stdin>:
	...

000d9168 <__sf_fake_stdout>:
	...

000d9188 <__sf_fake_stderr>:
	...
   d91a8:	0043                                        C.

000d91aa <link_const_variable_data_end>:
	...

000d91ac <link_constructors_location>:
   d91ac:	000d44ed 	.word	0x000d44ed
   d91b0:	000d4bef 	.word	0x000d4bef
   d91b4:	000d50ed 	.word	0x000d50ed
   d91b8:	000d5101 	.word	0x000d5101
   d91bc:	000d5105 	.word	0x000d5105
   d91c0:	000d5205 	.word	0x000d5205
   d91c4:	000d5271 	.word	0x000d5271
   d91c8:	000d5275 	.word	0x000d5275
   d91cc:	000d5279 	.word	0x000d5279
   d91d0:	000d5297 	.word	0x000d5297
   d91d4:	000d529b 	.word	0x000d529b
   d91d8:	000d529f 	.word	0x000d529f
   d91dc:	000d52a3 	.word	0x000d52a3
   d91e0:	000d573d 	.word	0x000d573d
   d91e4:	000d5761 	.word	0x000d5761
   d91e8:	000d5765 	.word	0x000d5765
   d91ec:	000d5a4d 	.word	0x000d5a4d
   d91f0:	000d5a51 	.word	0x000d5a51
   d91f4:	000d5a55 	.word	0x000d5a55
   d91f8:	000d5f8f 	.word	0x000d5f8f
   d91fc:	000d5f93 	.word	0x000d5f93
   d9200:	000d5f97 	.word	0x000d5f97
   d9204:	000d603d 	.word	0x000d603d
   d9208:	000d6075 	.word	0x000d6075
   d920c:	000d6317 	.word	0x000d6317
   d9210:	000d691d 	.word	0x000d691d
   d9214:	000d6abd 	.word	0x000d6abd
   d9218:	000d6b01 	.word	0x000d6b01
   d921c:	000d6c45 	.word	0x000d6c45
   d9220:	000d6c55 	.word	0x000d6c55
   d9224:	000d6ca5 	.word	0x000d6ca5
   d9228:	000d738d 	.word	0x000d738d
   d922c:	000d79d5 	.word	0x000d79d5
   d9230:	000d7b1d 	.word	0x000d7b1d
   d9234:	000d7d09 	.word	0x000d7d09
   d9238:	000d7d8d 	.word	0x000d7d8d
   d923c:	000d7e51 	.word	0x000d7e51
   d9240:	000d7f15 	.word	0x000d7f15

000d9244 <link_constructors_end>:
	...
