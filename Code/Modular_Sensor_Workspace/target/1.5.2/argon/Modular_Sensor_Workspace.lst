
c:/Users/mauri/Documents/IoTc2/Capstone-Deep-Dive-Coding/Code/Modular_Sensor_Workspace/target/1.5.2/argon/Modular_Sensor_Workspace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004744  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8760  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003dc9c  000d8764  0001dc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ae8  2003dd08  2003dd08  0002dd08  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d87d0  000d87d0  000287d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d87f8  000d87f8  000287f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c56de  00000000  00000000  000287fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00023a8c  00000000  00000000  001ededa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002f849  00000000  00000000  00211966  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003580  00000000  00000000  002411af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000062d0  00000000  00000000  0024472f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000559bd  00000000  00000000  0024a9ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00062762  00000000  00000000  002a03bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00113964  00000000  00000000  00302b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000fafc  00000000  00000000  00416484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fe67 	bl	d7d00 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fe6c 	bl	d7d16 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dc9c 	.word	0x2003dc9c
   d4048:	000d8764 	.word	0x000d8764
   d404c:	2003dd08 	.word	0x2003dd08
   d4050:	2003dd08 	.word	0x2003dd08
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fd5f 	bl	d6b1c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8754 	.word	0x000d8754
   d4080:	000d86bc 	.word	0x000d86bc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8f4 	b.w	d4270 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f973 	bl	d4374 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bd05 	b.w	d6aa0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bacb 	b.w	d6630 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 bad1 	b.w	d6640 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 bacf 	b.w	d6640 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fa2c 	bl	d6508 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6249 	.word	0x000d6249

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40c8:	7c03      	ldrb	r3, [r0, #16]
   d40ca:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40ce:	4602      	mov	r2, r0
   d40d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40d4:	b12b      	cbz	r3, d40e2 <_ZN4File9availableEv+0x1a>
   d40d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40d8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40da:	1a18      	subs	r0, r3, r0
   d40dc:	bf48      	it	mi
   d40de:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40e2:	4770      	bx	lr

000d40e4 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40e4:	4770      	bx	lr

000d40e6 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40e6:	4770      	bx	lr

000d40e8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40ea:	4602      	mov	r2, r0
   d40ec:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40ee:	7913      	ldrb	r3, [r2, #4]
   d40f0:	6895      	ldr	r5, [r2, #8]
   d40f2:	b133      	cbz	r3, d4102 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40f4:	b93d      	cbnz	r5, d4106 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40f6:	490c      	ldr	r1, [pc, #48]	; (d4128 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40f8:	b004      	add	sp, #16
   d40fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40fe:	f002 bc07 	b.w	d6910 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4102:	4b0a      	ldr	r3, [pc, #40]	; (d412c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4104:	e000      	b.n	d4108 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4106:	4b0a      	ldr	r3, [pc, #40]	; (d4130 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4108:	7b16      	ldrb	r6, [r2, #12]
   d410a:	4c0a      	ldr	r4, [pc, #40]	; (d4134 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d410c:	490a      	ldr	r1, [pc, #40]	; (d4138 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d410e:	7b52      	ldrb	r2, [r2, #13]
   d4110:	9202      	str	r2, [sp, #8]
   d4112:	2e01      	cmp	r6, #1
   d4114:	bf08      	it	eq
   d4116:	4621      	moveq	r1, r4
   d4118:	9101      	str	r1, [sp, #4]
   d411a:	9500      	str	r5, [sp, #0]
   d411c:	4a07      	ldr	r2, [pc, #28]	; (d413c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d411e:	2100      	movs	r1, #0
   d4120:	f002 fc33 	bl	d698a <_ZN5Print11printf_implEbPKcz>
  }
   d4124:	b004      	add	sp, #16
   d4126:	bd70      	pop	{r4, r5, r6, pc}
   d4128:	000d7dfb 	.word	0x000d7dfb
   d412c:	000d817d 	.word	0x000d817d
   d4130:	000d7dea 	.word	0x000d7dea
   d4134:	000d7df3 	.word	0x000d7df3
   d4138:	000d7df7 	.word	0x000d7df7
   d413c:	000d7e11 	.word	0x000d7e11

000d4140 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4140:	3010      	adds	r0, #16
   d4142:	f001 b8db 	b.w	d52fc <_ZN7FatFile4syncEv>

000d4146 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d4146:	3010      	adds	r0, #16
   d4148:	f001 b87b 	b.w	d5242 <_ZN7FatFile4peekEv>

000d414c <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d414c:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d414e:	2201      	movs	r2, #1
   d4150:	f10d 0107 	add.w	r1, sp, #7
   d4154:	3010      	adds	r0, #16
   d4156:	f000 ffc1 	bl	d50dc <_ZN7FatFile4readEPvj>
   d415a:	2801      	cmp	r0, #1
   d415c:	bf0c      	ite	eq
   d415e:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4162:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d4166:	b003      	add	sp, #12
   d4168:	f85d fb04 	ldr.w	pc, [sp], #4

000d416c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d416c:	3010      	adds	r0, #16
   d416e:	f001 b903 	b.w	d5378 <_ZN7FatFile5writeEPKvj>

000d4172 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4172:	b507      	push	{r0, r1, r2, lr}
   d4174:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4176:	2201      	movs	r2, #1
   d4178:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d417c:	3010      	adds	r0, #16
   d417e:	4619      	mov	r1, r3
   d4180:	f001 f8fa 	bl	d5378 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4184:	b003      	add	sp, #12
   d4186:	f85d fb04 	ldr.w	pc, [sp], #4

000d418a <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d418a:	b510      	push	{r4, lr}
   d418c:	2134      	movs	r1, #52	; 0x34
   d418e:	4604      	mov	r4, r0
   d4190:	f003 fc4c 	bl	d7a2c <_ZdlPvj>
   d4194:	4620      	mov	r0, r4
   d4196:	bd10      	pop	{r4, pc}

000d4198 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4198:	b510      	push	{r4, lr}
   d419a:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d419c:	6800      	ldr	r0, [r0, #0]
   d419e:	b108      	cbz	r0, d41a4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41a0:	f002 fa4e 	bl	d6640 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a4:	4620      	mov	r0, r4
   d41a6:	bd10      	pop	{r4, pc}

000d41a8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d41a8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41aa:	6984      	ldr	r4, [r0, #24]
   d41ac:	4b0a      	ldr	r3, [pc, #40]	; (d41d8 <_ZN9TCPClientD1Ev+0x30>)
   d41ae:	6003      	str	r3, [r0, #0]
   d41b0:	4605      	mov	r5, r0
   d41b2:	b17c      	cbz	r4, d41d4 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41b4:	6863      	ldr	r3, [r4, #4]
   d41b6:	3b01      	subs	r3, #1
   d41b8:	6063      	str	r3, [r4, #4]
   d41ba:	b95b      	cbnz	r3, d41d4 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d41bc:	6823      	ldr	r3, [r4, #0]
   d41be:	4620      	mov	r0, r4
   d41c0:	689b      	ldr	r3, [r3, #8]
   d41c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41c4:	68a3      	ldr	r3, [r4, #8]
   d41c6:	3b01      	subs	r3, #1
   d41c8:	60a3      	str	r3, [r4, #8]
   d41ca:	b91b      	cbnz	r3, d41d4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d41cc:	6823      	ldr	r3, [r4, #0]
   d41ce:	4620      	mov	r0, r4
   d41d0:	68db      	ldr	r3, [r3, #12]
   d41d2:	4798      	blx	r3
   d41d4:	4628      	mov	r0, r5
   d41d6:	bd38      	pop	{r3, r4, r5, pc}
   d41d8:	000d8590 	.word	0x000d8590

000d41dc <_ZN9TCPClientD0Ev>:
   d41dc:	b510      	push	{r4, lr}
   d41de:	4604      	mov	r4, r0
   d41e0:	f7ff ffe2 	bl	d41a8 <_ZN9TCPClientD1Ev>
   d41e4:	4620      	mov	r0, r4
   d41e6:	211c      	movs	r1, #28
   d41e8:	f003 fc20 	bl	d7a2c <_ZdlPvj>
   d41ec:	4620      	mov	r0, r4
   d41ee:	bd10      	pop	{r4, pc}

000d41f0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41f0:	b530      	push	{r4, r5, lr}
   d41f2:	b085      	sub	sp, #20
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d41f4:	4b1c      	ldr	r3, [pc, #112]	; (d4268 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d41f6:	9300      	str	r3, [sp, #0]
   d41f8:	7913      	ldrb	r3, [r2, #4]
   d41fa:	f88d 3004 	strb.w	r3, [sp, #4]
   d41fe:	6893      	ldr	r3, [r2, #8]
   d4200:	9302      	str	r3, [sp, #8]
   d4202:	7b13      	ldrb	r3, [r2, #12]
   d4204:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4208:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d420c:	7b53      	ldrb	r3, [r2, #13]
   d420e:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4212:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4214:	460a      	mov	r2, r1
   d4216:	466b      	mov	r3, sp
   d4218:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d421c:	4628      	mov	r0, r5
   d421e:	f001 fbd5 	bl	d59cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4222:	b1f0      	cbz	r0, d4262 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4224:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d4226:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d422a:	4628      	mov	r0, r5
   d422c:	f001 f89c 	bl	d5368 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4230:	2101      	movs	r1, #1
   d4232:	4620      	mov	r0, r4
   d4234:	f001 fa73 	bl	d571e <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4238:	4601      	mov	r1, r0
   d423a:	b168      	cbz	r0, d4258 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d423c:	4621      	mov	r1, r4
   d423e:	4628      	mov	r0, r5
   d4240:	f000 ff34 	bl	d50ac <_ZN7FatFile8openRootEP9FatVolume>
   d4244:	b168      	cbz	r0, d4262 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4246:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d424a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d424e:	bf16      	itet	ne
   d4250:	4b06      	ldrne	r3, [pc, #24]	; (d426c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d4252:	4618      	moveq	r0, r3
   d4254:	601d      	strne	r5, [r3, #0]
   d4256:	e005      	b.n	d4264 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d4258:	4620      	mov	r0, r4
   d425a:	f001 fa60 	bl	d571e <_ZN9FatVolume4initEh>
   d425e:	2800      	cmp	r0, #0
   d4260:	d1ec      	bne.n	d423c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d4262:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d4264:	b005      	add	sp, #20
   d4266:	bd30      	pop	{r4, r5, pc}
   d4268:	000d7db4 	.word	0x000d7db4
   d426c:	2003e3cc 	.word	0x2003e3cc

000d4270 <setup>:
int MQval;

/*    for syncing particle clock      */
char currentDateTime[25], currentTime[9];

void setup() {
   d4270:	b530      	push	{r4, r5, lr}
   d4272:	b085      	sub	sp, #20
  Serial.begin(9600);
   d4274:	f002 fd68 	bl	d6d48 <_Z16_fetch_usbserialv>
   d4278:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d427c:	f002 fd58 	bl	d6d30 <_ZN9USBSerial5beginEl>
  delay(100);
   d4280:	2064      	movs	r0, #100	; 0x64
   d4282:	f002 fbcf 	bl	d6a24 <delay>
  Serial1.begin(9600); // for using with the DFRobot player
   d4286:	f002 fde7 	bl	d6e58 <_Z22__fetch_global_Serial1v>
   d428a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d428e:	f002 fddd 	bl	d6e4c <_ZN11USARTSerial5beginEm>
  delay(100); // waiting for serial monitor to initialize 
   d4292:	2064      	movs	r0, #100	; 0x64
   d4294:	f002 fbc6 	bl	d6a24 <delay>
  Wire.begin();
   d4298:	f003 fb94 	bl	d79c4 <_Z19__fetch_global_Wirev>
   d429c:	f002 fe40 	bl	d6f20 <_ZN7TwoWire5beginEv>

  last = 0; // for MQTT subscription timer. 
   d42a0:	4b26      	ldr	r3, [pc, #152]	; (d433c <setup+0xcc>)

  pixel.begin();
   d42a2:	4827      	ldr	r0, [pc, #156]	; (d4340 <setup+0xd0>)
  delay(100);
  Serial1.begin(9600); // for using with the DFRobot player
  delay(100); // waiting for serial monitor to initialize 
  Wire.begin();

  last = 0; // for MQTT subscription timer. 
   d42a4:	2400      	movs	r4, #0
   d42a6:	601c      	str	r4, [r3, #0]

  pixel.begin();
   d42a8:	f000 fc2c 	bl	d4b04 <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.clear();
   d42ac:	4824      	ldr	r0, [pc, #144]	; (d4340 <setup+0xd0>)
   d42ae:	f000 fe01 	bl	d4eb4 <_ZN17Adafruit_NeoPixel5clearEv>
  pixel.show();
   d42b2:	4823      	ldr	r0, [pc, #140]	; (d4340 <setup+0xd0>)
   d42b4:	f000 fc5c 	bl	d4b70 <_ZN17Adafruit_NeoPixel4showEv>

  bme.begin(0x76);
   d42b8:	2176      	movs	r1, #118	; 0x76
   d42ba:	4822      	ldr	r0, [pc, #136]	; (d4344 <setup+0xd4>)
   d42bc:	f000 fbe6 	bl	d4a8c <_ZN15Adafruit_BME2805beginEh>
  senseAQ.init();
   d42c0:	4821      	ldr	r0, [pc, #132]	; (d4348 <setup+0xd8>)
   d42c2:	f001 fdac 	bl	d5e1e <_ZN16AirQualitySensor4initEv>

  pinMode(Bpin, INPUT_PULLDOWN);
   d42c6:	4b21      	ldr	r3, [pc, #132]	; (d434c <setup+0xdc>)
   d42c8:	2103      	movs	r1, #3
   d42ca:	8818      	ldrh	r0, [r3, #0]
   d42cc:	f003 fb0c 	bl	d78e8 <pinMode>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d42d0:	4b1f      	ldr	r3, [pc, #124]	; (d4350 <setup+0xe0>)
   d42d2:	9300      	str	r3, [sp, #0]
   d42d4:	2501      	movs	r5, #1
   d42d6:	4b1f      	ldr	r3, [pc, #124]	; (d4354 <setup+0xe4>)

  if(!SD.begin(SD_CS_PIN)){
   d42d8:	481f      	ldr	r0, [pc, #124]	; (d4358 <setup+0xe8>)
   d42da:	f88d 4004 	strb.w	r4, [sp, #4]
   d42de:	466a      	mov	r2, sp
   d42e0:	210e      	movs	r1, #14
   d42e2:	9302      	str	r3, [sp, #8]
   d42e4:	f88d 500c 	strb.w	r5, [sp, #12]
   d42e8:	f88d 400d 	strb.w	r4, [sp, #13]
   d42ec:	f7ff ff80 	bl	d41f0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d42f0:	b928      	cbnz	r0, d42fe <setup+0x8e>
    Serial.println("initialization failed!");
   d42f2:	f002 fd29 	bl	d6d48 <_Z16_fetch_usbserialv>
   d42f6:	4919      	ldr	r1, [pc, #100]	; (d435c <setup+0xec>)
   d42f8:	f002 fb1d 	bl	d6936 <_ZN5Print7printlnEPKc>
    return;
   d42fc:	e01c      	b.n	d4338 <setup+0xc8>
  }
  Serial.println("SDlog init");
   d42fe:	f002 fd23 	bl	d6d48 <_Z16_fetch_usbserialv>
   d4302:	4917      	ldr	r1, [pc, #92]	; (d4360 <setup+0xf0>)
   d4304:	f002 fb17 	bl	d6936 <_ZN5Print7printlnEPKc>
  if(!myDFP.begin(Serial1)){
   d4308:	f002 fda6 	bl	d6e58 <_Z22__fetch_global_Serial1v>
   d430c:	462a      	mov	r2, r5
   d430e:	4601      	mov	r1, r0
   d4310:	4814      	ldr	r0, [pc, #80]	; (d4364 <setup+0xf4>)
   d4312:	f001 fec5 	bl	d60a0 <_ZN19DFRobotDFPlayerMini5beginER6Streamb>
   d4316:	b928      	cbnz	r0, d4324 <setup+0xb4>
    Serial.println("DFPlayer init failed");
   d4318:	f002 fd16 	bl	d6d48 <_Z16_fetch_usbserialv>
   d431c:	4912      	ldr	r1, [pc, #72]	; (d4368 <setup+0xf8>)
   d431e:	f002 fb0a 	bl	d6936 <_ZN5Print7printlnEPKc>
   d4322:	e7fe      	b.n	d4322 <setup+0xb2>
    while(true);
  }
  Serial.println("DFPlayer init");
   d4324:	f002 fd10 	bl	d6d48 <_Z16_fetch_usbserialv>
   d4328:	4910      	ldr	r1, [pc, #64]	; (d436c <setup+0xfc>)
   d432a:	f002 fb04 	bl	d6936 <_ZN5Print7printlnEPKc>

/*                          commented this chunk out while i tested the bme and other sensors.
  mqtt.subscribe(&subData);
  */
 Serial.println("Initialization finished");
   d432e:	f002 fd0b 	bl	d6d48 <_Z16_fetch_usbserialv>
   d4332:	490f      	ldr	r1, [pc, #60]	; (d4370 <setup+0x100>)
   d4334:	f002 faff 	bl	d6936 <_ZN5Print7printlnEPKc>
}
   d4338:	b005      	add	sp, #20
   d433a:	bd30      	pop	{r4, r5, pc}
   d433c:	2003dd5c 	.word	0x2003dd5c
   d4340:	2003e3a8 	.word	0x2003e3a8
   d4344:	2003dd60 	.word	0x2003dd60
   d4348:	2003e330 	.word	0x2003e330
   d434c:	2003dc9c 	.word	0x2003dc9c
   d4350:	000d7db4 	.word	0x000d7db4
   d4354:	02faf080 	.word	0x02faf080
   d4358:	2003de78 	.word	0x2003de78
   d435c:	000d7e2f 	.word	0x000d7e2f
   d4360:	000d7e46 	.word	0x000d7e46
   d4364:	2003e34c 	.word	0x2003e34c
   d4368:	000d7e51 	.word	0x000d7e51
   d436c:	000d7e66 	.word	0x000d7e66
   d4370:	000d7e74 	.word	0x000d7e74

000d4374 <loop>:

void loop() {
   d4374:	b508      	push	{r3, lr}
// if(buttonState){
 //   pixelState = !pixelState;
 // }
 // HighQualityLED();
 // BMERead();
  myDFP.playMp3Folder(4);
   d4376:	4805      	ldr	r0, [pc, #20]	; (d438c <loop+0x18>)
   d4378:	2104      	movs	r1, #4
   d437a:	f001 feb6 	bl	d60ea <_ZN19DFRobotDFPlayerMini13playMp3FolderEi>
  delay(30000);
   d437e:	f247 5030 	movw	r0, #30000	; 0x7530
}
   d4382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 //   pixelState = !pixelState;
 // }
 // HighQualityLED();
 // BMERead();
  myDFP.playMp3Folder(4);
  delay(30000);
   d4386:	f002 bb4d 	b.w	d6a24 <delay>
   d438a:	bf00      	nop
   d438c:	2003e34c 	.word	0x2003e34c

000d4390 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d4390:	b510      	push	{r4, lr}
   d4392:	21d4      	movs	r1, #212	; 0xd4
   d4394:	4604      	mov	r4, r0
   d4396:	f003 fb49 	bl	d7a2c <_ZdlPvj>
   d439a:	4620      	mov	r0, r4
   d439c:	bd10      	pop	{r4, pc}
	...

000d43a0 <_GLOBAL__sub_I_SystemMode>:
  waitUntil(Particle.syncTimeDone);
  DateTime = Time.timeStr();
  TimeOnly = DateTime.substring(11,19);
  DateTime.toCharArray(currentDateTime,25);
  TimeOnly.toCharArray(currentTime,9);
   d43a0:	b573      	push	{r0, r1, r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d43a2:	4d55      	ldr	r5, [pc, #340]	; (d44f8 <_GLOBAL__sub_I_SystemMode+0x158>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d43a4:	4e55      	ldr	r6, [pc, #340]	; (d44fc <_GLOBAL__sub_I_SystemMode+0x15c>)
   d43a6:	2400      	movs	r4, #0

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43a8:	f001 feb6 	bl	d6118 <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d43ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d43b0:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d43b2:	602c      	str	r4, [r5, #0]
   d43b4:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d43b6:	71ac      	strb	r4, [r5, #6]
   d43b8:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d43ba:	2002      	movs	r0, #2
   d43bc:	f002 f8b4 	bl	d6528 <set_system_mode>
 * Project Modular_Sensor_Workspace
 * Description: workspace intended to refine sensor modules to integrate in capstone project
 * Author: Mauricio Villa
 * Date: 12 - August - 2020
 */
SYSTEM_MODE(SEMI_AUTOMATIC)
   d43c0:	4a4f      	ldr	r2, [pc, #316]	; (d4500 <_GLOBAL__sub_I_SystemMode+0x160>)
   d43c2:	4950      	ldr	r1, [pc, #320]	; (d4504 <_GLOBAL__sub_I_SystemMode+0x164>)
   d43c4:	4628      	mov	r0, r5
   d43c6:	f003 fb23 	bl	d7a10 <__aeabi_atexit>
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
   d43ca:	4b4f      	ldr	r3, [pc, #316]	; (d4508 <_GLOBAL__sub_I_SystemMode+0x168>)
   d43cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d43d0:	609a      	str	r2, [r3, #8]
   d43d2:	4a4e      	ldr	r2, [pc, #312]	; (d450c <_GLOBAL__sub_I_SystemMode+0x16c>)
   d43d4:	f883 4020 	strb.w	r4, [r3, #32]
   d43d8:	6811      	ldr	r1, [r2, #0]
   d43da:	f8c3 1016 	str.w	r1, [r3, #22]
   d43de:	6851      	ldr	r1, [r2, #4]
   d43e0:	8912      	ldrh	r2, [r2, #8]
   d43e2:	83da      	strh	r2, [r3, #30]
   d43e4:	2202      	movs	r2, #2
   d43e6:	f8c3 101a 	str.w	r1, [r3, #26]
   d43ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   d43ee:	f883 4026 	strb.w	r4, [r3, #38]	; 0x26
   d43f2:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d43f6:	4b46      	ldr	r3, [pc, #280]	; (d4510 <_GLOBAL__sub_I_SystemMode+0x170>)
   d43f8:	6831      	ldr	r1, [r6, #0]
   d43fa:	71dc      	strb	r4, [r3, #7]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d43fc:	2264      	movs	r2, #100	; 0x64
   d43fe:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d4402:	4a44      	ldr	r2, [pc, #272]	; (d4514 <_GLOBAL__sub_I_SystemMode+0x174>)
   d4404:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d4408:	2201      	movs	r2, #1
   d440a:	ea11 0502 	ands.w	r5, r1, r2
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d440e:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d4412:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d4416:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d441a:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d441e:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d4422:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d4426:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
   d442a:	461c      	mov	r4, r3
   d442c:	d10a      	bne.n	d4444 <_GLOBAL__sub_I_SystemMode+0xa4>
   d442e:	4630      	mov	r0, r6
   d4430:	f7ff fe42 	bl	d40b8 <__cxa_guard_acquire>
   d4434:	b130      	cbz	r0, d4444 <_GLOBAL__sub_I_SystemMode+0xa4>
   d4436:	4629      	mov	r1, r5
   d4438:	4837      	ldr	r0, [pc, #220]	; (d4518 <_GLOBAL__sub_I_SystemMode+0x178>)
   d443a:	f002 f95d 	bl	d66f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d443e:	4630      	mov	r0, r6
   d4440:	f7ff fe3f 	bl	d40c2 <__cxa_guard_release>
   d4444:	4835      	ldr	r0, [pc, #212]	; (d451c <_GLOBAL__sub_I_SystemMode+0x17c>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4446:	4b34      	ldr	r3, [pc, #208]	; (d4518 <_GLOBAL__sub_I_SystemMode+0x178>)
File file;
  #define SD_CS_PIN SS
  #define error(msg) sd.errorHalt(msg)

/*      for subscribing | publishing        */
TCPClient TheClient;
   d4448:	4e35      	ldr	r6, [pc, #212]	; (d4520 <_GLOBAL__sub_I_SystemMode+0x180>)
   d444a:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d444e:	2500      	movs	r5, #0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
DFRobotDFPlayerMini myDFP;

/*      for SD logging        */
int i;
SdFat SD;
File file;
   d4454:	4a2a      	ldr	r2, [pc, #168]	; (d4500 <_GLOBAL__sub_I_SystemMode+0x160>)
   d4456:	4933      	ldr	r1, [pc, #204]	; (d4524 <_GLOBAL__sub_I_SystemMode+0x184>)
   d4458:	7405      	strb	r5, [r0, #16]
   d445a:	7445      	strb	r5, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d445c:	6045      	str	r5, [r0, #4]
   d445e:	6083      	str	r3, [r0, #8]
 public:
  File() {}
   d4460:	4b31      	ldr	r3, [pc, #196]	; (d4528 <_GLOBAL__sub_I_SystemMode+0x188>)
   d4462:	6003      	str	r3, [r0, #0]
   d4464:	f003 fad4 	bl	d7a10 <__aeabi_atexit>
  #define SD_CS_PIN SS
  #define error(msg) sd.errorHalt(msg)

/*      for subscribing | publishing        */
TCPClient TheClient;
   d4468:	4630      	mov	r0, r6
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d446a:	4c30      	ldr	r4, [pc, #192]	; (d452c <_GLOBAL__sub_I_SystemMode+0x18c>)
   d446c:	f003 f906 	bl	d767c <_ZN9TCPClientC1Ev>
   d4470:	4a23      	ldr	r2, [pc, #140]	; (d4500 <_GLOBAL__sub_I_SystemMode+0x160>)
   d4472:	492f      	ldr	r1, [pc, #188]	; (d4530 <_GLOBAL__sub_I_SystemMode+0x190>)
   d4474:	4630      	mov	r0, r6
   d4476:	f003 facb 	bl	d7a10 <__aeabi_atexit>
   d447a:	4b2e      	ldr	r3, [pc, #184]	; (d4534 <_GLOBAL__sub_I_SystemMode+0x194>)
   d447c:	9300      	str	r3, [sp, #0]
   d447e:	f240 7229 	movw	r2, #1833	; 0x729
   d4482:	4b2d      	ldr	r3, [pc, #180]	; (d4538 <_GLOBAL__sub_I_SystemMode+0x198>)
   d4484:	492d      	ldr	r1, [pc, #180]	; (d453c <_GLOBAL__sub_I_SystemMode+0x19c>)
   d4486:	4620      	mov	r0, r4
   d4488:	f000 fda8 	bl	d4fdc <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d448c:	4b2c      	ldr	r3, [pc, #176]	; (d4540 <_GLOBAL__sub_I_SystemMode+0x1a0>)
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY);
   d448e:	4a1c      	ldr	r2, [pc, #112]	; (d4500 <_GLOBAL__sub_I_SystemMode+0x160>)
   d4490:	492c      	ldr	r1, [pc, #176]	; (d4544 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d4492:	6023      	str	r3, [r4, #0]
   d4494:	4620      	mov	r0, r4
   d4496:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d449a:	f003 fab9 	bl	d7a10 <__aeabi_atexit>
Adafruit_MQTT_Subscribe subData = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/ "); // put feed if any subscription needed
   d449e:	462b      	mov	r3, r5
   d44a0:	4621      	mov	r1, r4
   d44a2:	4a29      	ldr	r2, [pc, #164]	; (d4548 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d44a4:	4829      	ldr	r0, [pc, #164]	; (d454c <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d44a6:	f000 fdc0 	bl	d502a <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubBME = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_BME");
   d44aa:	462b      	mov	r3, r5
   d44ac:	4621      	mov	r1, r4
   d44ae:	4a28      	ldr	r2, [pc, #160]	; (d4550 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d44b0:	4828      	ldr	r0, [pc, #160]	; (d4554 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d44b2:	f000 fdb5 	bl	d5020 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubMQ9 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_MQ-9");
   d44b6:	462b      	mov	r3, r5
   d44b8:	4621      	mov	r1, r4
   d44ba:	4a27      	ldr	r2, [pc, #156]	; (d4558 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d44bc:	4827      	ldr	r0, [pc, #156]	; (d455c <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d44be:	f000 fdaf 	bl	d5020 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish PubAQ = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/Smart_Helmet_AirQuality");
   d44c2:	462b      	mov	r3, r5
   d44c4:	4a26      	ldr	r2, [pc, #152]	; (d4560 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d44c6:	4827      	ldr	r0, [pc, #156]	; (d4564 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d44c8:	4621      	mov	r1, r4
   d44ca:	f000 fda9 	bl	d5020 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
unsigned long last;

/*    for Air Quality Sensor      */
AirQualitySensor senseAQ(A3);
   d44ce:	2110      	movs	r1, #16
   d44d0:	4825      	ldr	r0, [pc, #148]	; (d4568 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d44d2:	f001 fc9f 	bl	d5e14 <_ZN16AirQualitySensorC1Ei>

/*    for NeoPixels       */
  #define PIXEL_PIN A1
  #define PIXEL_COUNT 2
  #define PIXEL_TYPE WS2812B
Adafruit_NeoPixel pixel(PIXEL_COUNT,PIXEL_PIN,PIXEL_TYPE);
   d44d6:	2302      	movs	r3, #2
   d44d8:	4619      	mov	r1, r3
   d44da:	2212      	movs	r2, #18
   d44dc:	4823      	ldr	r0, [pc, #140]	; (d456c <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d44de:	f000 fb36 	bl	d4b4e <_ZN17Adafruit_NeoPixelC1Ethh>
   d44e2:	4a07      	ldr	r2, [pc, #28]	; (d4500 <_GLOBAL__sub_I_SystemMode+0x160>)
   d44e4:	4922      	ldr	r1, [pc, #136]	; (d4570 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d44e6:	4821      	ldr	r0, [pc, #132]	; (d456c <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d44e8:	f003 fa92 	bl	d7a10 <__aeabi_atexit>
int quality;
int AQvalue;
int qualityValue;

/*    for BME use     */
Adafruit_BME280 bme;
   d44ec:	4821      	ldr	r0, [pc, #132]	; (d4574 <_GLOBAL__sub_I_SystemMode+0x1d4>)
  waitUntil(Particle.syncTimeDone);
  DateTime = Time.timeStr();
  TimeOnly = DateTime.substring(11,19);
  DateTime.toCharArray(currentDateTime,25);
  TimeOnly.toCharArray(currentTime,9);
   d44ee:	b002      	add	sp, #8
   d44f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
int quality;
int AQvalue;
int qualityValue;

/*    for BME use     */
Adafruit_BME280 bme;
   d44f4:	f000 b840 	b.w	d4578 <_ZN15Adafruit_BME280C1Ev>
   d44f8:	2003dd50 	.word	0x2003dd50
   d44fc:	2003dd0c 	.word	0x2003dd0c
   d4500:	2003dd08 	.word	0x2003dd08
   d4504:	000d4199 	.word	0x000d4199
   d4508:	2003e34c 	.word	0x2003e34c
   d450c:	000d7de0 	.word	0x000d7de0
   d4510:	2003de78 	.word	0x2003de78
   d4514:	000d7db4 	.word	0x000d7db4
   d4518:	2003dd10 	.word	0x2003dd10
   d451c:	2003e374 	.word	0x2003e374
   d4520:	2003e308 	.word	0x2003e308
   d4524:	000d40e5 	.word	0x000d40e5
   d4528:	000d7dc0 	.word	0x000d7dc0
   d452c:	2003dda4 	.word	0x2003dda4
   d4530:	000d41a9 	.word	0x000d41a9
   d4534:	000d8067 	.word	0x000d8067
   d4538:	000d804b 	.word	0x000d804b
   d453c:	000d8057 	.word	0x000d8057
   d4540:	000d8130 	.word	0x000d8130
   d4544:	000d40e7 	.word	0x000d40e7
   d4548:	000d8082 	.word	0x000d8082
   d454c:	2003dd18 	.word	0x2003dd18
   d4550:	000d8096 	.word	0x000d8096
   d4554:	2003e3bc 	.word	0x2003e3bc
   d4558:	000d80b9 	.word	0x000d80b9
   d455c:	2003e2fc 	.word	0x2003e2fc
   d4560:	000d80dd 	.word	0x000d80dd
   d4564:	2003e324 	.word	0x2003e324
   d4568:	2003e330 	.word	0x2003e330
   d456c:	2003e3a8 	.word	0x2003e3a8
   d4570:	000d4aaf 	.word	0x000d4aaf
   d4574:	2003dd60 	.word	0x2003dd60

000d4578 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4578:	22ff      	movs	r2, #255	; 0xff
   d457a:	7402      	strb	r2, [r0, #16]
   d457c:	7442      	strb	r2, [r0, #17]
   d457e:	7482      	strb	r2, [r0, #18]
   d4580:	74c2      	strb	r2, [r0, #19]
{ }
   d4582:	4770      	bx	lr

000d4584 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4584:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4586:	4d09      	ldr	r5, [pc, #36]	; (d45ac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4588:	6829      	ldr	r1, [r5, #0]
   d458a:	f011 0401 	ands.w	r4, r1, #1
   d458e:	d10a      	bne.n	d45a6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4590:	4628      	mov	r0, r5
   d4592:	f7ff fd91 	bl	d40b8 <__cxa_guard_acquire>
   d4596:	b130      	cbz	r0, d45a6 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4598:	4621      	mov	r1, r4
   d459a:	4805      	ldr	r0, [pc, #20]	; (d45b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d459c:	f002 f8ac 	bl	d66f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d45a0:	4628      	mov	r0, r5
   d45a2:	f7ff fd8e 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d45a6:	4802      	ldr	r0, [pc, #8]	; (d45b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d45a8:	bd38      	pop	{r3, r4, r5, pc}
   d45aa:	bf00      	nop
   d45ac:	2003dd0c 	.word	0x2003dd0c
   d45b0:	2003dd10 	.word	0x2003dd10

000d45b4 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d45b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d45b8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d45bc:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d45be:	4605      	mov	r5, r0
   d45c0:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d45c2:	d106      	bne.n	d45d2 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d45c4:	f7ff ffde 	bl	d4584 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d45c8:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d45ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d45ce:	f002 b937 	b.w	d6840 <_ZN8SPIClass8transferEh>
   d45d2:	2607      	movs	r6, #7
   d45d4:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d45d6:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d45da:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d45de:	2100      	movs	r1, #0
   d45e0:	b280      	uxth	r0, r0
   d45e2:	f003 f992 	bl	d790a <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d45e6:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d45ea:	fa08 f106 	lsl.w	r1, r8, r6
   d45ee:	4039      	ands	r1, r7
   d45f0:	b280      	uxth	r0, r0
   d45f2:	f003 f98a 	bl	d790a <digitalWrite>
        digitalWrite(_sck, HIGH);
   d45f6:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d45fa:	2101      	movs	r1, #1
   d45fc:	b280      	uxth	r0, r0
   d45fe:	f003 f984 	bl	d790a <digitalWrite>
        if (digitalRead(_miso))
   d4602:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4606:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4608:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d460a:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d460c:	f003 f996 	bl	d793c <digitalRead>
   d4610:	b108      	cbz	r0, d4616 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4612:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4616:	f116 36ff 	adds.w	r6, r6, #4294967295
   d461a:	d2de      	bcs.n	d45da <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d461c:	4620      	mov	r0, r4
   d461e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4622 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d4622:	b508      	push	{r3, lr}
        instance().endTransaction();
   d4624:	f7ff ffae 	bl	d4584 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d462c:	f002 b87f 	b.w	d672e <_ZN8SPIClass14endTransactionEv>

000d4630 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4630:	b510      	push	{r4, lr}
   d4632:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d4634:	f7ff ffa6 	bl	d4584 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4638:	4621      	mov	r1, r4
    }
   d463a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d463e:	f002 b88f 	b.w	d6760 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d4644 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4644:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4646:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d464a:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d464c:	b085      	sub	sp, #20
   d464e:	4604      	mov	r4, r0
   d4650:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d4652:	d11d      	bne.n	d4690 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4654:	7901      	ldrb	r1, [r0, #4]
   d4656:	6800      	ldr	r0, [r0, #0]
   d4658:	f002 fc99 	bl	d6f8e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d465c:	6820      	ldr	r0, [r4, #0]
   d465e:	6803      	ldr	r3, [r0, #0]
   d4660:	4629      	mov	r1, r5
   d4662:	689b      	ldr	r3, [r3, #8]
   d4664:	4798      	blx	r3
        _wire -> endTransmission();
   d4666:	6820      	ldr	r0, [r4, #0]
   d4668:	f002 fc99 	bl	d6f9e <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d466c:	2202      	movs	r2, #2
   d466e:	7921      	ldrb	r1, [r4, #4]
   d4670:	6820      	ldr	r0, [r4, #0]
   d4672:	f002 fc89 	bl	d6f88 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4676:	6820      	ldr	r0, [r4, #0]
   d4678:	6803      	ldr	r3, [r0, #0]
   d467a:	695b      	ldr	r3, [r3, #20]
   d467c:	4798      	blx	r3
   d467e:	4605      	mov	r5, r0
   d4680:	6820      	ldr	r0, [r4, #0]
   d4682:	6803      	ldr	r3, [r0, #0]
   d4684:	695b      	ldr	r3, [r3, #20]
   d4686:	4798      	blx	r3
   d4688:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d468c:	b285      	uxth	r5, r0
   d468e:	e035      	b.n	d46fc <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d4690:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4694:	3301      	adds	r3, #1
   d4696:	d10e      	bne.n	d46b6 <_ZN15Adafruit_BME2806read16Eh+0x72>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4698:	4b1a      	ldr	r3, [pc, #104]	; (d4704 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d469a:	4a1b      	ldr	r2, [pc, #108]	; (d4708 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d469c:	9300      	str	r3, [sp, #0]
   d469e:	9202      	str	r2, [sp, #8]
   d46a0:	2300      	movs	r3, #0
   d46a2:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d46a4:	4668      	mov	r0, sp
   d46a6:	f88d 3004 	strb.w	r3, [sp, #4]
   d46aa:	f88d 200c 	strb.w	r2, [sp, #12]
   d46ae:	f88d 300d 	strb.w	r3, [sp, #13]
   d46b2:	f7ff ffbd 	bl	d4630 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d46b6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46ba:	2100      	movs	r1, #0
   d46bc:	b280      	uxth	r0, r0
   d46be:	f003 f924 	bl	d790a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d46c2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d46c6:	4620      	mov	r0, r4
   d46c8:	f7ff ff74 	bl	d45b4 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d46cc:	2100      	movs	r1, #0
   d46ce:	4620      	mov	r0, r4
   d46d0:	f7ff ff70 	bl	d45b4 <_ZN15Adafruit_BME2807spixferEh>
   d46d4:	2100      	movs	r1, #0
   d46d6:	4605      	mov	r5, r0
   d46d8:	4620      	mov	r0, r4
   d46da:	f7ff ff6b 	bl	d45b4 <_ZN15Adafruit_BME2807spixferEh>
   d46de:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d46e2:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d46e4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d46e8:	2101      	movs	r1, #1
   d46ea:	b280      	uxth	r0, r0
   d46ec:	f003 f90d 	bl	d790a <digitalWrite>
        if (_sck == -1)
   d46f0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d46f4:	3301      	adds	r3, #1
   d46f6:	d101      	bne.n	d46fc <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d46f8:	f7ff ff93 	bl	d4622 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d46fc:	4628      	mov	r0, r5
   d46fe:	b005      	add	sp, #20
   d4700:	bd30      	pop	{r4, r5, pc}
   d4702:	bf00      	nop
   d4704:	000d7db4 	.word	0x000d7db4
   d4708:	0007a120 	.word	0x0007a120

000d470c <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d470c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d470e:	f7ff ff99 	bl	d4644 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4712:	ba40      	rev16	r0, r0
}
   d4714:	b280      	uxth	r0, r0
   d4716:	bd08      	pop	{r3, pc}

000d4718 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4718:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d471a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d471e:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4720:	b085      	sub	sp, #20
   d4722:	4604      	mov	r4, r0
   d4724:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4726:	d116      	bne.n	d4756 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4728:	7901      	ldrb	r1, [r0, #4]
   d472a:	6800      	ldr	r0, [r0, #0]
   d472c:	f002 fc2f 	bl	d6f8e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4730:	6820      	ldr	r0, [r4, #0]
   d4732:	6803      	ldr	r3, [r0, #0]
   d4734:	4629      	mov	r1, r5
   d4736:	689b      	ldr	r3, [r3, #8]
   d4738:	4798      	blx	r3
        _wire -> endTransmission();
   d473a:	6820      	ldr	r0, [r4, #0]
   d473c:	f002 fc2f 	bl	d6f9e <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4740:	2201      	movs	r2, #1
   d4742:	7921      	ldrb	r1, [r4, #4]
   d4744:	6820      	ldr	r0, [r4, #0]
   d4746:	f002 fc1f 	bl	d6f88 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d474a:	6820      	ldr	r0, [r4, #0]
   d474c:	6803      	ldr	r3, [r0, #0]
   d474e:	695b      	ldr	r3, [r3, #20]
   d4750:	4798      	blx	r3
   d4752:	b2c5      	uxtb	r5, r0
   d4754:	e02e      	b.n	d47b4 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d4756:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d475a:	3301      	adds	r3, #1
   d475c:	d10e      	bne.n	d477c <_ZN15Adafruit_BME2805read8Eh+0x64>
   d475e:	4b17      	ldr	r3, [pc, #92]	; (d47bc <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4760:	4a17      	ldr	r2, [pc, #92]	; (d47c0 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d4762:	9300      	str	r3, [sp, #0]
   d4764:	9202      	str	r2, [sp, #8]
   d4766:	2300      	movs	r3, #0
   d4768:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d476a:	4668      	mov	r0, sp
   d476c:	f88d 3004 	strb.w	r3, [sp, #4]
   d4770:	f88d 200c 	strb.w	r2, [sp, #12]
   d4774:	f88d 300d 	strb.w	r3, [sp, #13]
   d4778:	f7ff ff5a 	bl	d4630 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d477c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4780:	2100      	movs	r1, #0
   d4782:	b280      	uxth	r0, r0
   d4784:	f003 f8c1 	bl	d790a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4788:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d478c:	4620      	mov	r0, r4
   d478e:	f7ff ff11 	bl	d45b4 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4792:	2100      	movs	r1, #0
   d4794:	4620      	mov	r0, r4
   d4796:	f7ff ff0d 	bl	d45b4 <_ZN15Adafruit_BME2807spixferEh>
   d479a:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d479c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d47a0:	2101      	movs	r1, #1
   d47a2:	b280      	uxth	r0, r0
   d47a4:	f003 f8b1 	bl	d790a <digitalWrite>
        if (_sck == -1)
   d47a8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d47ac:	3301      	adds	r3, #1
   d47ae:	d101      	bne.n	d47b4 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d47b0:	f7ff ff37 	bl	d4622 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d47b4:	4628      	mov	r0, r5
   d47b6:	b005      	add	sp, #20
   d47b8:	bd30      	pop	{r4, r5, pc}
   d47ba:	bf00      	nop
   d47bc:	000d7db4 	.word	0x000d7db4
   d47c0:	0007a120 	.word	0x0007a120

000d47c4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d47c4:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d47c6:	21f3      	movs	r1, #243	; 0xf3
   d47c8:	f7ff ffa6 	bl	d4718 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d47cc:	f000 0001 	and.w	r0, r0, #1
   d47d0:	bd08      	pop	{r3, pc}

000d47d2 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d47d2:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d47d4:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d47d6:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d47d8:	f7ff ff98 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47dc:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d47de:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47e0:	4620      	mov	r0, r4
   d47e2:	f7ff ff93 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
   d47e6:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d47e8:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47ea:	4620      	mov	r0, r4
   d47ec:	f7ff ff8e 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d47f0:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d47f2:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d47f4:	4620      	mov	r0, r4
   d47f6:	f7ff ff89 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47fa:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d47fc:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d47fe:	4620      	mov	r0, r4
   d4800:	f7ff ff84 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
   d4804:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4806:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4808:	4620      	mov	r0, r4
   d480a:	f7ff ff7f 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
   d480e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4810:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4812:	4620      	mov	r0, r4
   d4814:	f7ff ff7a 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
   d4818:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d481a:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d481c:	4620      	mov	r0, r4
   d481e:	f7ff ff75 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
   d4822:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4824:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4826:	4620      	mov	r0, r4
   d4828:	f7ff ff70 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
   d482c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d482e:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4830:	4620      	mov	r0, r4
   d4832:	f7ff ff6b 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
   d4836:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4838:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d483a:	4620      	mov	r0, r4
   d483c:	f7ff ff66 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
   d4840:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4842:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4844:	4620      	mov	r0, r4
   d4846:	f7ff ff61 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d484a:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d484c:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d484e:	4620      	mov	r0, r4
   d4850:	f7ff ff62 	bl	d4718 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4854:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4856:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d485a:	4620      	mov	r0, r4
   d485c:	f7ff ff56 	bl	d470c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4860:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4862:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4864:	4620      	mov	r0, r4
   d4866:	f7ff ff57 	bl	d4718 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d486a:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d486c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4870:	4620      	mov	r0, r4
   d4872:	f7ff ff51 	bl	d4718 <_ZN15Adafruit_BME2805read8Eh>
   d4876:	21e5      	movs	r1, #229	; 0xe5
   d4878:	4605      	mov	r5, r0
   d487a:	4620      	mov	r0, r4
   d487c:	f7ff ff4c 	bl	d4718 <_ZN15Adafruit_BME2805read8Eh>
   d4880:	f000 000f 	and.w	r0, r0, #15
   d4884:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4888:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d488a:	21e6      	movs	r1, #230	; 0xe6
   d488c:	4620      	mov	r0, r4
   d488e:	f7ff ff43 	bl	d4718 <_ZN15Adafruit_BME2805read8Eh>
   d4892:	21e5      	movs	r1, #229	; 0xe5
   d4894:	4605      	mov	r5, r0
   d4896:	4620      	mov	r0, r4
   d4898:	f7ff ff3e 	bl	d4718 <_ZN15Adafruit_BME2805read8Eh>
   d489c:	1100      	asrs	r0, r0, #4
   d489e:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d48a2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d48a4:	21e7      	movs	r1, #231	; 0xe7
   d48a6:	4620      	mov	r0, r4
   d48a8:	f7ff ff36 	bl	d4718 <_ZN15Adafruit_BME2805read8Eh>
   d48ac:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d48b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d48b4 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d48b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d48b6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d48ba:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d48bc:	4604      	mov	r4, r0
   d48be:	460e      	mov	r6, r1
   d48c0:	4615      	mov	r5, r2
    if (_cs == -1) {
   d48c2:	d111      	bne.n	d48e8 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d48c4:	7901      	ldrb	r1, [r0, #4]
   d48c6:	6800      	ldr	r0, [r0, #0]
   d48c8:	f002 fb61 	bl	d6f8e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d48cc:	6820      	ldr	r0, [r4, #0]
   d48ce:	6803      	ldr	r3, [r0, #0]
   d48d0:	4631      	mov	r1, r6
   d48d2:	689b      	ldr	r3, [r3, #8]
   d48d4:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d48d6:	6820      	ldr	r0, [r4, #0]
   d48d8:	6803      	ldr	r3, [r0, #0]
   d48da:	4629      	mov	r1, r5
   d48dc:	689b      	ldr	r3, [r3, #8]
   d48de:	4798      	blx	r3
        _wire -> endTransmission();
   d48e0:	6820      	ldr	r0, [r4, #0]
   d48e2:	f002 fb5c 	bl	d6f9e <_ZN7TwoWire15endTransmissionEv>
   d48e6:	e02d      	b.n	d4944 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d48e8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d48ec:	3301      	adds	r3, #1
   d48ee:	d10e      	bne.n	d490e <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d48f0:	4b15      	ldr	r3, [pc, #84]	; (d4948 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d48f2:	4a16      	ldr	r2, [pc, #88]	; (d494c <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d48f4:	9300      	str	r3, [sp, #0]
   d48f6:	9202      	str	r2, [sp, #8]
   d48f8:	2300      	movs	r3, #0
   d48fa:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d48fc:	4668      	mov	r0, sp
   d48fe:	f88d 3004 	strb.w	r3, [sp, #4]
   d4902:	f88d 200c 	strb.w	r2, [sp, #12]
   d4906:	f88d 300d 	strb.w	r3, [sp, #13]
   d490a:	f7ff fe91 	bl	d4630 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d490e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4912:	2100      	movs	r1, #0
   d4914:	b280      	uxth	r0, r0
   d4916:	f002 fff8 	bl	d790a <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d491a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d491e:	4620      	mov	r0, r4
   d4920:	f7ff fe48 	bl	d45b4 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4924:	4629      	mov	r1, r5
   d4926:	4620      	mov	r0, r4
   d4928:	f7ff fe44 	bl	d45b4 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d492c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4930:	2101      	movs	r1, #1
   d4932:	b280      	uxth	r0, r0
   d4934:	f002 ffe9 	bl	d790a <digitalWrite>
    if (_sck == -1)
   d4938:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d493c:	3301      	adds	r3, #1
   d493e:	d101      	bne.n	d4944 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4940:	f7ff fe6f 	bl	d4622 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d4944:	b004      	add	sp, #16
   d4946:	bd70      	pop	{r4, r5, r6, pc}
   d4948:	000d7db4 	.word	0x000d7db4
   d494c:	0007a120 	.word	0x0007a120

000d4950 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4952:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4956:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d495a:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d495e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4962:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4966:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d496a:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d496e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4972:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4976:	f366 1347 	bfi	r3, r6, #5, #3
   d497a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d497e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4982:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4986:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4988:	f367 0302 	bfi	r3, r7, #0, #3
   d498c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4990:	f006 0207 	and.w	r2, r6, #7
   d4994:	21f2      	movs	r1, #242	; 0xf2
   d4996:	f7ff ff8d 	bl	d48b4 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d499a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d499e:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d49a2:	f002 0107 	and.w	r1, r2, #7
   d49a6:	009b      	lsls	r3, r3, #2
   d49a8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d49ac:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d49b0:	4620      	mov	r0, r4
   d49b2:	21f5      	movs	r1, #245	; 0xf5
   d49b4:	f7ff ff7e 	bl	d48b4 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d49b8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d49bc:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d49c0:	f002 0107 	and.w	r1, r2, #7
   d49c4:	009b      	lsls	r3, r3, #2
   d49c6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d49ca:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d49ce:	4620      	mov	r0, r4
   d49d0:	21f4      	movs	r1, #244	; 0xf4
}
   d49d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d49d6:	f7ff bf6d 	b.w	d48b4 <_ZN15Adafruit_BME2806write8Ehh>

000d49da <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d49da:	b530      	push	{r4, r5, lr}
   d49dc:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d49de:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d49e2:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d49e4:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d49e6:	d103      	bne.n	d49f0 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d49e8:	6820      	ldr	r0, [r4, #0]
   d49ea:	f002 fa99 	bl	d6f20 <_ZN7TwoWire5beginEv>
   d49ee:	e022      	b.n	d4a36 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d49f0:	2101      	movs	r1, #1
   d49f2:	b280      	uxth	r0, r0
   d49f4:	f002 ff89 	bl	d790a <digitalWrite>
        pinMode(_cs, OUTPUT);
   d49f8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d49fc:	2101      	movs	r1, #1
   d49fe:	b280      	uxth	r0, r0
   d4a00:	f002 ff72 	bl	d78e8 <pinMode>
        if (_sck == -1) {
   d4a04:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4a08:	1c43      	adds	r3, r0, #1
   d4a0a:	d104      	bne.n	d4a16 <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4a0c:	f7ff fdba 	bl	d4584 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4a10:	f001 fe7c 	bl	d670c <_ZN8SPIClass5beginEv>
   d4a14:	e00f      	b.n	d4a36 <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4a16:	2101      	movs	r1, #1
   d4a18:	b280      	uxth	r0, r0
   d4a1a:	f002 ff65 	bl	d78e8 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4a1e:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4a22:	2101      	movs	r1, #1
   d4a24:	b280      	uxth	r0, r0
   d4a26:	f002 ff5f 	bl	d78e8 <pinMode>
            pinMode(_miso, INPUT);
   d4a2a:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4a2e:	2100      	movs	r1, #0
   d4a30:	b280      	uxth	r0, r0
   d4a32:	f002 ff59 	bl	d78e8 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4a36:	21d0      	movs	r1, #208	; 0xd0
   d4a38:	4620      	mov	r0, r4
   d4a3a:	f7ff fe6d 	bl	d4718 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4a3e:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4a40:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4a42:	d120      	bne.n	d4a86 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4a44:	4620      	mov	r0, r4
   d4a46:	22b6      	movs	r2, #182	; 0xb6
   d4a48:	21e0      	movs	r1, #224	; 0xe0
   d4a4a:	f7ff ff33 	bl	d48b4 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4a4e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4a52:	f001 ffe7 	bl	d6a24 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4a56:	4620      	mov	r0, r4
   d4a58:	f7ff feb4 	bl	d47c4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4a5c:	4605      	mov	r5, r0
   d4a5e:	b108      	cbz	r0, d4a64 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4a60:	2064      	movs	r0, #100	; 0x64
   d4a62:	e7f6      	b.n	d4a52 <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4a64:	4620      	mov	r0, r4
   d4a66:	f7ff feb4 	bl	d47d2 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4a6a:	2305      	movs	r3, #5
   d4a6c:	9300      	str	r3, [sp, #0]
   d4a6e:	461a      	mov	r2, r3
   d4a70:	2103      	movs	r1, #3
   d4a72:	4620      	mov	r0, r4
   d4a74:	9502      	str	r5, [sp, #8]
   d4a76:	9501      	str	r5, [sp, #4]
   d4a78:	f7ff ff6a 	bl	d4950 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4a7c:	2064      	movs	r0, #100	; 0x64
   d4a7e:	f001 ffd1 	bl	d6a24 <delay>
   d4a82:	2001      	movs	r0, #1
   d4a84:	e000      	b.n	d4a88 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4a86:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4a88:	b005      	add	sp, #20
   d4a8a:	bd30      	pop	{r4, r5, pc}

000d4a8c <_ZN15Adafruit_BME2805beginEh>:
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4a8c:	b510      	push	{r4, lr}
	_i2caddr = addr;
   d4a8e:	7101      	strb	r1, [r0, #4]
    @param addr the I2C address the device can be found on
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
   d4a90:	4604      	mov	r4, r0
	_i2caddr = addr;
	_wire = &Wire;
   d4a92:	f002 ff97 	bl	d79c4 <_Z19__fetch_global_Wirev>
   d4a96:	6020      	str	r0, [r4, #0]
	return init();
   d4a98:	4620      	mov	r0, r4
}
   d4a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**************************************************************************/
bool Adafruit_BME280::begin(uint8_t addr)
{
	_i2caddr = addr;
	_wire = &Wire;
	return init();
   d4a9e:	f7ff bf9c 	b.w	d49da <_ZN15Adafruit_BME2804initEv>

000d4aa2 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4aa2:	f001 bb39 	b.w	d6118 <HAL_Pin_Map>

000d4aa6 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4aa6:	f001 bbd7 	b.w	d6258 <HAL_Timer_Get_Micro_Seconds>

000d4aaa <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4aaa:	f001 bbcd 	b.w	d6248 <HAL_Delay_Microseconds>

000d4aae <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d4aae:	b510      	push	{r4, lr}
   d4ab0:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d4ab2:	68c0      	ldr	r0, [r0, #12]
   d4ab4:	b108      	cbz	r0, d4aba <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d4ab6:	f001 fdc3 	bl	d6640 <free>
  if (begun) pinMode(pin, INPUT);
   d4aba:	7823      	ldrb	r3, [r4, #0]
   d4abc:	b11b      	cbz	r3, d4ac6 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d4abe:	2100      	movs	r1, #0
   d4ac0:	79e0      	ldrb	r0, [r4, #7]
   d4ac2:	f002 ff11 	bl	d78e8 <pinMode>
}
   d4ac6:	4620      	mov	r0, r4
   d4ac8:	bd10      	pop	{r4, pc}

000d4aca <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4aca:	b538      	push	{r3, r4, r5, lr}
   d4acc:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d4ace:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d4ad0:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d4ad2:	b108      	cbz	r0, d4ad8 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d4ad4:	f001 fdb4 	bl	d6640 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d4ad8:	79a3      	ldrb	r3, [r4, #6]
   d4ada:	2b06      	cmp	r3, #6
   d4adc:	bf0c      	ite	eq
   d4ade:	2004      	moveq	r0, #4
   d4ae0:	2003      	movne	r0, #3
   d4ae2:	fb10 f005 	smulbb	r0, r0, r5
   d4ae6:	b280      	uxth	r0, r0
   d4ae8:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d4aea:	f001 fda1 	bl	d6630 <malloc>
   d4aee:	60e0      	str	r0, [r4, #12]
   d4af0:	b128      	cbz	r0, d4afe <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d4af2:	88a2      	ldrh	r2, [r4, #4]
   d4af4:	2100      	movs	r1, #0
   d4af6:	f003 f90e 	bl	d7d16 <memset>
    numLEDs = n;
   d4afa:	8065      	strh	r5, [r4, #2]
   d4afc:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d4afe:	80a0      	strh	r0, [r4, #4]
   d4b00:	8060      	strh	r0, [r4, #2]
   d4b02:	bd38      	pop	{r3, r4, r5, pc}

000d4b04 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d4b04:	b510      	push	{r4, lr}
   d4b06:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d4b08:	2101      	movs	r1, #1
   d4b0a:	79c0      	ldrb	r0, [r0, #7]
   d4b0c:	f002 feec 	bl	d78e8 <pinMode>
  digitalWrite(pin, LOW);
   d4b10:	2100      	movs	r1, #0
   d4b12:	79e0      	ldrb	r0, [r4, #7]
   d4b14:	f002 fef9 	bl	d790a <digitalWrite>
  begun = true;
   d4b18:	2301      	movs	r3, #1
   d4b1a:	7023      	strb	r3, [r4, #0]
   d4b1c:	bd10      	pop	{r4, pc}

000d4b1e <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4b1e:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d4b20:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d4b22:	4605      	mov	r5, r0
   d4b24:	460c      	mov	r4, r1
    if (begun) {
   d4b26:	b11b      	cbz	r3, d4b30 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d4b28:	2100      	movs	r1, #0
   d4b2a:	79c0      	ldrb	r0, [r0, #7]
   d4b2c:	f002 fedc 	bl	d78e8 <pinMode>
    }
    pin = p;
    if (begun) {
   d4b30:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d4b32:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d4b34:	b153      	cbz	r3, d4b4c <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d4b36:	b2a4      	uxth	r4, r4
   d4b38:	4620      	mov	r0, r4
   d4b3a:	2101      	movs	r1, #1
   d4b3c:	f002 fed4 	bl	d78e8 <pinMode>
        digitalWrite(p, LOW);
   d4b40:	4620      	mov	r0, r4
   d4b42:	2100      	movs	r1, #0
    }
}
   d4b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d4b48:	f002 bedf 	b.w	d790a <digitalWrite>
   d4b4c:	bd38      	pop	{r3, r4, r5, pc}

000d4b4e <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4b4e:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4b50:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d4b52:	4604      	mov	r4, r0
   d4b54:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d4b56:	7183      	strb	r3, [r0, #6]
   d4b58:	7005      	strb	r5, [r0, #0]
   d4b5a:	7205      	strb	r5, [r0, #8]
   d4b5c:	60c5      	str	r5, [r0, #12]
   d4b5e:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d4b60:	f7ff ffb3 	bl	d4aca <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d4b64:	4620      	mov	r0, r4
   d4b66:	4631      	mov	r1, r6
   d4b68:	f7ff ffd9 	bl	d4b1e <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d4b6c:	4620      	mov	r0, r4
   d4b6e:	bd70      	pop	{r4, r5, r6, pc}

000d4b70 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d4b70:	68c3      	ldr	r3, [r0, #12]
   d4b72:	2b00      	cmp	r3, #0
   d4b74:	f000 818b 	beq.w	d4e8e <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d4b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b7c:	7983      	ldrb	r3, [r0, #6]
   d4b7e:	3b02      	subs	r3, #2
   d4b80:	b2db      	uxtb	r3, r3
   d4b82:	2b04      	cmp	r3, #4
   d4b84:	bf9c      	itt	ls
   d4b86:	4ac4      	ldrls	r2, [pc, #784]	; (d4e98 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d4b88:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d4b8c:	b087      	sub	sp, #28
   d4b8e:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d4b90:	bf88      	it	hi
   d4b92:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d4b94:	f7ff ff87 	bl	d4aa6 <micros>
   d4b98:	692b      	ldr	r3, [r5, #16]
   d4b9a:	1ac0      	subs	r0, r0, r3
   d4b9c:	42a0      	cmp	r0, r4
   d4b9e:	d3f9      	bcc.n	d4b94 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4ba0:	4abe      	ldr	r2, [pc, #760]	; (d4e9c <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4ba2:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d4ba4:	ca07      	ldmia	r2, {r0, r1, r2}
   d4ba6:	ac06      	add	r4, sp, #24
   d4ba8:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4bac:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4bae:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4bb0:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d4bb4:	3304      	adds	r3, #4
   d4bb6:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bb8:	b922      	cbnz	r2, d4bc4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bba:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4bbe:	2b00      	cmp	r3, #0
   d4bc0:	f2c0 8155 	blt.w	d4e6e <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d4bc4:	9c04      	ldr	r4, [sp, #16]
   d4bc6:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bca:	b923      	cbnz	r3, d4bd6 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bcc:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4bd0:	2b00      	cmp	r3, #0
   d4bd2:	f2c0 813c 	blt.w	d4e4e <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d4bd6:	9c05      	ldr	r4, [sp, #20]
   d4bd8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bdc:	b91b      	cbnz	r3, d4be6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4bde:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d4be2:	2b00      	cmp	r3, #0
   d4be4:	db6e      	blt.n	d4cc4 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4be6:	4bae      	ldr	r3, [pc, #696]	; (d4ea0 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d4be8:	79ea      	ldrb	r2, [r5, #7]
   d4bea:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4bec:	4cad      	ldr	r4, [pc, #692]	; (d4ea4 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4bee:	49ae      	ldr	r1, [pc, #696]	; (d4ea8 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4bf0:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4bf2:	0112      	lsls	r2, r2, #4
   d4bf4:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4bf6:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4bfa:	785b      	ldrb	r3, [r3, #1]
   d4bfc:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d4bfe:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4c00:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4c02:	f003 031f 	and.w	r3, r3, #31
   d4c06:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d4c0a:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d4c0c:	433a      	orrs	r2, r7
   d4c0e:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d4c10:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4c12:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4c14:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4c18:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4c1c:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4c1e:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4c20:	2800      	cmp	r0, #0
   d4c22:	d044      	beq.n	d4cae <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d4c24:	46cc      	mov	ip, r9
   d4c26:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4c28:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d4c2c:	f81c eb01 	ldrb.w	lr, [ip], #1
   d4c30:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4c32:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4c34:	6863      	ldr	r3, [r4, #4]
   d4c36:	1a9b      	subs	r3, r3, r2
   d4c38:	2b46      	cmp	r3, #70	; 0x46
   d4c3a:	d9fb      	bls.n	d4c34 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d4c3c:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d4c40:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4c44:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d4c48:	ea43 0307 	orr.w	r3, r3, r7
   d4c4c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d4c50:	d02f      	beq.n	d4cb2 <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d4c52:	6863      	ldr	r3, [r4, #4]
   d4c54:	1a9b      	subs	r3, r3, r2
   d4c56:	2b28      	cmp	r3, #40	; 0x28
   d4c58:	d9fb      	bls.n	d4c52 <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4c5a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4c5e:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4c60:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4c64:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d4c68:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d4c6c:	d1e2      	bne.n	d4c34 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4c6e:	ebc9 030c 	rsb	r3, r9, ip
   d4c72:	88a8      	ldrh	r0, [r5, #4]
   d4c74:	b29b      	uxth	r3, r3
   d4c76:	4298      	cmp	r0, r3
   d4c78:	d8d8      	bhi.n	d4c2c <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d4c7a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d4c7e:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d4c82:	6863      	ldr	r3, [r4, #4]
   d4c84:	1a9b      	subs	r3, r3, r2
   d4c86:	2b46      	cmp	r3, #70	; 0x46
   d4c88:	d9fb      	bls.n	d4c82 <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d4c8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4c8e:	ebca 0a03 	rsb	sl, sl, r3
   d4c92:	4582      	cmp	sl, r0
   d4c94:	f0c0 80d5 	bcc.w	d4e42 <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d4c98:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4c9c:	f7ff ff05 	bl	d4aaa <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4ca0:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d4ca2:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d4ca6:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d4caa:	2800      	cmp	r0, #0
   d4cac:	d1ba      	bne.n	d4c24 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d4cae:	4602      	mov	r2, r0
   d4cb0:	e7e7      	b.n	d4c82 <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d4cb2:	6863      	ldr	r3, [r4, #4]
   d4cb4:	1a9b      	subs	r3, r3, r2
   d4cb6:	2b11      	cmp	r3, #17
   d4cb8:	d8cf      	bhi.n	d4c5a <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d4cba:	6863      	ldr	r3, [r4, #4]
   d4cbc:	1a9b      	subs	r3, r3, r2
   d4cbe:	2b11      	cmp	r3, #17
   d4cc0:	d9f7      	bls.n	d4cb2 <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d4cc2:	e7ca      	b.n	d4c5a <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cc4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cc8:	2b00      	cmp	r3, #0
   d4cca:	da8c      	bge.n	d4be6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4ccc:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cd0:	2b00      	cmp	r3, #0
   d4cd2:	da88      	bge.n	d4be6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4cd4:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4cd8:	2b00      	cmp	r3, #0
   d4cda:	da84      	bge.n	d4be6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d4cdc:	9801      	ldr	r0, [sp, #4]
   d4cde:	f001 fca7 	bl	d6630 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d4ce2:	2800      	cmp	r0, #0
   d4ce4:	f43f af7f 	beq.w	d4be6 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4ce8:	88ab      	ldrh	r3, [r5, #4]
   d4cea:	2b00      	cmp	r3, #0
   d4cec:	f000 80d0 	beq.w	d4e90 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d4cf0:	2700      	movs	r7, #0
   d4cf2:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4cf4:	4e6d      	ldr	r6, [pc, #436]	; (d4eac <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d4cf6:	496e      	ldr	r1, [pc, #440]	; (d4eb0 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d4cf8:	e000      	b.n	d4cfc <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d4cfa:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d4cfc:	68ea      	ldr	r2, [r5, #12]
   d4cfe:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d4d00:	f103 0e01 	add.w	lr, r3, #1
   d4d04:	f012 0f80 	tst.w	r2, #128	; 0x80
   d4d08:	bf14      	ite	ne
   d4d0a:	46b0      	movne	r8, r6
   d4d0c:	4688      	moveq	r8, r1
   d4d0e:	fa1f fe8e 	uxth.w	lr, lr
   d4d12:	f012 0f40 	tst.w	r2, #64	; 0x40
   d4d16:	bf14      	ite	ne
   d4d18:	46b1      	movne	r9, r6
   d4d1a:	4689      	moveq	r9, r1
   d4d1c:	f012 0f20 	tst.w	r2, #32
   d4d20:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d4d24:	bf18      	it	ne
   d4d26:	46b2      	movne	sl, r6
   d4d28:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d4d2c:	bf08      	it	eq
   d4d2e:	468a      	moveq	sl, r1
   d4d30:	f103 0802 	add.w	r8, r3, #2
   d4d34:	f012 0f10 	tst.w	r2, #16
   d4d38:	f103 0e03 	add.w	lr, r3, #3
   d4d3c:	bf14      	ite	ne
   d4d3e:	46b4      	movne	ip, r6
   d4d40:	468c      	moveq	ip, r1
   d4d42:	fa1f f888 	uxth.w	r8, r8
   d4d46:	f012 0f08 	tst.w	r2, #8
   d4d4a:	fa1f fe8e 	uxth.w	lr, lr
   d4d4e:	f103 0904 	add.w	r9, r3, #4
   d4d52:	fa1f f989 	uxth.w	r9, r9
   d4d56:	bf14      	ite	ne
   d4d58:	46b3      	movne	fp, r6
   d4d5a:	468b      	moveq	fp, r1
   d4d5c:	f012 0f04 	tst.w	r2, #4
   d4d60:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4d64:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d4d68:	bf14      	ite	ne
   d4d6a:	46b2      	movne	sl, r6
   d4d6c:	468a      	moveq	sl, r1
   d4d6e:	f103 0805 	add.w	r8, r3, #5
   d4d72:	f012 0f02 	tst.w	r2, #2
   d4d76:	f103 0c06 	add.w	ip, r3, #6
   d4d7a:	f103 0e07 	add.w	lr, r3, #7
   d4d7e:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d4d82:	fa1f fe8e 	uxth.w	lr, lr
   d4d86:	bf14      	ite	ne
   d4d88:	46b1      	movne	r9, r6
   d4d8a:	4689      	moveq	r9, r1
   d4d8c:	fa1f f888 	uxth.w	r8, r8
   d4d90:	f012 0f01 	tst.w	r2, #1
   d4d94:	fa1f fc8c 	uxth.w	ip, ip
   d4d98:	bf14      	ite	ne
   d4d9a:	4632      	movne	r2, r6
   d4d9c:	460a      	moveq	r2, r1
   d4d9e:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d4da2:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d4da6:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4daa:	3701      	adds	r7, #1
   d4dac:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d4db0:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4db2:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4db6:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d4db8:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4dba:	d89e      	bhi.n	d4cfa <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d4dbc:	f103 0209 	add.w	r2, r3, #9
   d4dc0:	330a      	adds	r3, #10
   d4dc2:	b292      	uxth	r2, r2
   d4dc4:	b29b      	uxth	r3, r3
   d4dc6:	0052      	lsls	r2, r2, #1
   d4dc8:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4dca:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4dcc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d4dd0:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4dd2:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d4dd4:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4dd6:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4dd8:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d4dda:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4dde:	4e30      	ldr	r6, [pc, #192]	; (d4ea0 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d4de0:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d4de4:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d4de8:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d4dec:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d4df0:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d4df4:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d4df8:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d4dfc:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4e00:	79eb      	ldrb	r3, [r5, #7]
   d4e02:	6831      	ldr	r1, [r6, #0]
   d4e04:	011b      	lsls	r3, r3, #4
   d4e06:	18ce      	adds	r6, r1, r3
   d4e08:	5cc9      	ldrb	r1, [r1, r3]
   d4e0a:	7873      	ldrb	r3, [r6, #1]
   d4e0c:	f003 031f 	and.w	r3, r3, #31
   d4e10:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d4e14:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d4e16:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d4e1a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d4e1e:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d4e22:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d4e24:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d4e28:	2b00      	cmp	r3, #0
   d4e2a:	d0fb      	beq.n	d4e24 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4e2c:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4e2e:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d4e32:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d4e36:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d4e3a:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d4e3e:	f001 fbff 	bl	d6640 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d4e42:	f7ff fe30 	bl	d4aa6 <micros>
   d4e46:	6128      	str	r0, [r5, #16]
}
   d4e48:	b007      	add	sp, #28
   d4e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e4e:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e52:	2b00      	cmp	r3, #0
   d4e54:	f6bf aebf 	bge.w	d4bd6 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e58:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e5c:	2b00      	cmp	r3, #0
   d4e5e:	f6bf aeba 	bge.w	d4bd6 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4e62:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e66:	2b00      	cmp	r3, #0
   d4e68:	f6bf aeb5 	bge.w	d4bd6 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d4e6c:	e736      	b.n	d4cdc <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e6e:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e72:	2b00      	cmp	r3, #0
   d4e74:	f6bf aea6 	bge.w	d4bc4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e78:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e7c:	2b00      	cmp	r3, #0
   d4e7e:	f6bf aea1 	bge.w	d4bc4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d4e82:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d4e86:	2b00      	cmp	r3, #0
   d4e88:	f6bf ae9c 	bge.w	d4bc4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d4e8c:	e726      	b.n	d4cdc <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d4e8e:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d4e90:	2304      	movs	r3, #4
   d4e92:	2202      	movs	r2, #2
   d4e94:	e799      	b.n	d4dca <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d4e96:	bf00      	nop
   d4e98:	000d8114 	.word	0x000d8114
   d4e9c:	000d8108 	.word	0x000d8108
   d4ea0:	2003e3c8 	.word	0x2003e3c8
   d4ea4:	e000edf0 	.word	0xe000edf0
   d4ea8:	e0001000 	.word	0xe0001000
   d4eac:	ffff800d 	.word	0xffff800d
   d4eb0:	ffff8006 	.word	0xffff8006

000d4eb4 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d4eb4:	8882      	ldrh	r2, [r0, #4]
   d4eb6:	68c0      	ldr	r0, [r0, #12]
   d4eb8:	2100      	movs	r1, #0
   d4eba:	f002 bf2c 	b.w	d7d16 <memset>
	...

000d4ec0 <_GLOBAL__sub_I_PIN_MAP2>:
}
   d4ec0:	b508      	push	{r3, lr}
   d4ec2:	f001 f929 	bl	d6118 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4ec6:	f001 f927 	bl	d6118 <HAL_Pin_Map>
   d4eca:	4b01      	ldr	r3, [pc, #4]	; (d4ed0 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d4ecc:	6018      	str	r0, [r3, #0]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	2003e3c8 	.word	0x2003e3c8

000d4ed4 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4ed4:	f001 b920 	b.w	d6118 <HAL_Pin_Map>

000d4ed8 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4ed8:	f001 b91e 	b.w	d6118 <HAL_Pin_Map>

000d4edc <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d4edc:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d4ede:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4ee2:	6803      	ldr	r3, [r0, #0]
   d4ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ee6:	4798      	blx	r3
}
   d4ee8:	3000      	adds	r0, #0
   d4eea:	bf18      	it	ne
   d4eec:	2001      	movne	r0, #1
   d4eee:	bd08      	pop	{r3, pc}

000d4ef0 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d4ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ef2:	4606      	mov	r6, r0
   d4ef4:	460f      	mov	r7, r1
   d4ef6:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d4ef8:	b1c4      	cbz	r4, d4f2c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d4efa:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4efe:	6803      	ldr	r3, [r0, #0]
   d4f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f02:	4798      	blx	r3
   d4f04:	b908      	cbnz	r0, d4f0a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d4f06:	2000      	movs	r0, #0
   d4f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d4f0a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4f0e:	2cfa      	cmp	r4, #250	; 0xfa
   d4f10:	6803      	ldr	r3, [r0, #0]
   d4f12:	4625      	mov	r5, r4
   d4f14:	bfa8      	it	ge
   d4f16:	25fa      	movge	r5, #250	; 0xfa
   d4f18:	68db      	ldr	r3, [r3, #12]
   d4f1a:	462a      	mov	r2, r5
   d4f1c:	4639      	mov	r1, r7
   d4f1e:	4798      	blx	r3
   d4f20:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4f22:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d4f24:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4f26:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d4f28:	d0e6      	beq.n	d4ef8 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d4f2a:	e7ec      	b.n	d4f06 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d4f2c:	2001      	movs	r0, #1
}
   d4f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f30 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d4f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4f34:	4606      	mov	r6, r0
   d4f36:	4688      	mov	r8, r1
   d4f38:	4691      	mov	r9, r2
   d4f3a:	461f      	mov	r7, r3
   d4f3c:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d4f3e:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4f40:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4f44:	6803      	ldr	r3, [r0, #0]
   d4f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f48:	4798      	blx	r3
   d4f4a:	b1d0      	cbz	r0, d4f82 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d4f4c:	2d00      	cmp	r5, #0
   d4f4e:	db18      	blt.n	d4f82 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d4f50:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4f54:	6803      	ldr	r3, [r0, #0]
   d4f56:	691b      	ldr	r3, [r3, #16]
   d4f58:	4798      	blx	r3
   d4f5a:	b160      	cbz	r0, d4f76 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d4f5c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4f60:	6803      	ldr	r3, [r0, #0]
   d4f62:	695b      	ldr	r3, [r3, #20]
   d4f64:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d4f66:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d4f6a:	3401      	adds	r4, #1
   d4f6c:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d4f6e:	454c      	cmp	r4, r9
   d4f70:	d007      	beq.n	d4f82 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d4f72:	463d      	mov	r5, r7
   d4f74:	e7ec      	b.n	d4f50 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d4f76:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4f78:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d4f7a:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d4f7c:	f001 fd52 	bl	d6a24 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4f80:	e7de      	b.n	d4f40 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d4f82:	4620      	mov	r0, r4
   d4f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f88 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d4f88:	b570      	push	{r4, r5, r6, lr}
   d4f8a:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d4f8c:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d4f90:	2296      	movs	r2, #150	; 0x96
   d4f92:	2100      	movs	r1, #0
   d4f94:	4628      	mov	r0, r5
   d4f96:	f002 febe 	bl	d7d16 <memset>
  strcpy((char *)buffer, servername);
   d4f9a:	6861      	ldr	r1, [r4, #4]
   d4f9c:	4628      	mov	r0, r5
   d4f9e:	f002 feeb 	bl	d7d78 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d4fa2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4fa6:	8922      	ldrh	r2, [r4, #8]
   d4fa8:	6803      	ldr	r3, [r0, #0]
   d4faa:	4629      	mov	r1, r5
   d4fac:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d4fae:	2300      	movs	r3, #0
   d4fb0:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d4fb2:	3000      	adds	r0, #0
   d4fb4:	bf18      	it	ne
   d4fb6:	2001      	movne	r0, #1
   d4fb8:	bd70      	pop	{r4, r5, r6, pc}

000d4fba <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d4fba:	b510      	push	{r4, lr}
   d4fbc:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d4fbe:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4fc2:	6803      	ldr	r3, [r0, #0]
   d4fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fc6:	4798      	blx	r3
   d4fc8:	b120      	cbz	r0, d4fd4 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d4fca:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4fce:	6803      	ldr	r3, [r0, #0]
   d4fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fd2:	4798      	blx	r3
  }
  return true;
}
   d4fd4:	2001      	movs	r0, #1
   d4fd6:	bd10      	pop	{r4, pc}

000d4fd8 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d4fd8:	f001 b89e 	b.w	d6118 <HAL_Pin_Map>

000d4fdc <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d4fdc:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d4fde:	6103      	str	r3, [r0, #16]
  password = pass;
   d4fe0:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d4fe2:	4d0d      	ldr	r5, [pc, #52]	; (d5018 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d4fe4:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d4fe6:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d4fe8:	4a0c      	ldr	r2, [pc, #48]	; (d501c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d4fea:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d4fec:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d4fee:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d4ff0:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d4ff2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d4ff6:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d4ffa:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d4ffe:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d5002:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d5006:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d5008:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d500a:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d500e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d5012:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d5016:	bd30      	pop	{r4, r5, pc}
   d5018:	000d8154 	.word	0x000d8154
   d501c:	000d817d 	.word	0x000d817d

000d5020 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5020:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5022:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d5026:	7203      	strb	r3, [r0, #8]
}
   d5028:	bd10      	pop	{r4, pc}

000d502a <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d502a:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d502c:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d502e:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5030:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5032:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d5034:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d5036:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d5038:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d503a:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d503c:	6283      	str	r3, [r0, #40]	; 0x28
   d503e:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5040:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5042:	bd10      	pop	{r4, pc}

000d5044 <_GLOBAL__sub_I__Z11printBufferPht>:
   d5044:	f001 b868 	b.w	d6118 <HAL_Pin_Map>

000d5048 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5048:	f001 b866 	b.w	d6118 <HAL_Pin_Map>

000d504c <_GLOBAL__sub_I__ZN7istream3getEv>:
   d504c:	f001 b864 	b.w	d6118 <HAL_Pin_Map>

000d5050 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5050:	b510      	push	{r4, lr}
   d5052:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5054:	3024      	adds	r0, #36	; 0x24
   d5056:	f000 fa71 	bl	d553c <_ZN8FatCache4syncEv>
   d505a:	b128      	cbz	r0, d5068 <_ZN9FatVolume9cacheSyncEv+0x18>
   d505c:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5064:	f000 ba6a 	b.w	d553c <_ZN8FatCache4syncEv>
  }
   d5068:	bd10      	pop	{r4, pc}

000d506a <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d506a:	f001 b855 	b.w	d6118 <HAL_Pin_Map>

000d506e <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d506e:	f001 b853 	b.w	d6118 <HAL_Pin_Map>

000d5072 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5072:	f001 b851 	b.w	d6118 <HAL_Pin_Map>

000d5076 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5076:	f001 b84f 	b.w	d6118 <HAL_Pin_Map>

000d507a <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d507a:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d507c:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d507e:	f043 0304 	orr.w	r3, r3, #4
   d5082:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5084:	f100 0210 	add.w	r2, r0, #16
   d5088:	6880      	ldr	r0, [r0, #8]
   d508a:	f000 bb0d 	b.w	d56a8 <_ZN9FatVolume15allocateClusterEmPm>

000d508e <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d508e:	b510      	push	{r4, lr}
   d5090:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5092:	6880      	ldr	r0, [r0, #8]
   d5094:	460a      	mov	r2, r1
   d5096:	3024      	adds	r0, #36	; 0x24
   d5098:	69a1      	ldr	r1, [r4, #24]
   d509a:	f000 fa76 	bl	d558a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d509e:	b120      	cbz	r0, d50aa <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d50a0:	88a3      	ldrh	r3, [r4, #4]
   d50a2:	f003 030f 	and.w	r3, r3, #15
   d50a6:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d50aa:	bd10      	pop	{r4, pc}

000d50ac <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d50ac:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d50ae:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d50b0:	4605      	mov	r5, r0
   d50b2:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d50b4:	b984      	cbnz	r4, d50d8 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d50b6:	2224      	movs	r2, #36	; 0x24
   d50b8:	4621      	mov	r1, r4
   d50ba:	f002 fe2c 	bl	d7d16 <memset>

  m_vol = vol;
   d50be:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d50c0:	79f3      	ldrb	r3, [r6, #7]
   d50c2:	2b10      	cmp	r3, #16
   d50c4:	d003      	beq.n	d50ce <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d50c6:	2b20      	cmp	r3, #32
   d50c8:	d106      	bne.n	d50d8 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d50ca:	2340      	movs	r3, #64	; 0x40
   d50cc:	e000      	b.n	d50d0 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d50ce:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d50d0:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d50d2:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d50d4:	70a8      	strb	r0, [r5, #2]
   d50d6:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d50d8:	2000      	movs	r0, #0
   d50da:	bd70      	pop	{r4, r5, r6, pc}

000d50dc <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d50dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50e0:	7803      	ldrb	r3, [r0, #0]
   d50e2:	4604      	mov	r4, r0
   d50e4:	4689      	mov	r9, r1
   d50e6:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d50e8:	b14b      	cbz	r3, d50fe <_ZN7FatFile4readEPvj+0x22>
   d50ea:	7882      	ldrb	r2, [r0, #2]
   d50ec:	07d1      	lsls	r1, r2, #31
   d50ee:	d506      	bpl.n	d50fe <_ZN7FatFile4readEPvj+0x22>
   d50f0:	e00c      	b.n	d510c <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d50f2:	465a      	mov	r2, fp
   d50f4:	6921      	ldr	r1, [r4, #16]
   d50f6:	f000 fa72 	bl	d55de <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d50fa:	2800      	cmp	r0, #0
   d50fc:	da3d      	bge.n	d517a <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d50fe:	7863      	ldrb	r3, [r4, #1]
   d5100:	f043 0302 	orr.w	r3, r3, #2
   d5104:	7063      	strb	r3, [r4, #1]
  return -1;
   d5106:	f04f 30ff 	mov.w	r0, #4294967295
   d510a:	e097      	b.n	d523c <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d510c:	071a      	lsls	r2, r3, #28
   d510e:	d503      	bpl.n	d5118 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5110:	69e3      	ldr	r3, [r4, #28]
   d5112:	6962      	ldr	r2, [r4, #20]
   d5114:	1a9b      	subs	r3, r3, r2
   d5116:	e007      	b.n	d5128 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5118:	069a      	lsls	r2, r3, #26
   d511a:	d508      	bpl.n	d512e <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d511c:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d511e:	891a      	ldrh	r2, [r3, #8]
   d5120:	6963      	ldr	r3, [r4, #20]
   d5122:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5126:	b29b      	uxth	r3, r3
   d5128:	429d      	cmp	r5, r3
   d512a:	bf28      	it	cs
   d512c:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d512e:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5130:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5134:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5138:	2e00      	cmp	r6, #0
   d513a:	d035      	beq.n	d51a8 <_ZN7FatFile4readEPvj+0xcc>
   d513c:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d513e:	6963      	ldr	r3, [r4, #20]
   d5140:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5142:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5146:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d514a:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d514e:	d002      	beq.n	d5156 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5150:	6a03      	ldr	r3, [r0, #32]
   d5152:	4419      	add	r1, r3
   d5154:	e01d      	b.n	d5192 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5156:	f890 8005 	ldrb.w	r8, [r0, #5]
   d515a:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d515e:	f1ba 0f00 	cmp.w	sl, #0
   d5162:	d110      	bne.n	d5186 <_ZN7FatFile4readEPvj+0xaa>
   d5164:	f1b8 0f00 	cmp.w	r8, #0
   d5168:	d10d      	bne.n	d5186 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d516a:	2b00      	cmp	r3, #0
   d516c:	d1c1      	bne.n	d50f2 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d516e:	0653      	lsls	r3, r2, #25
   d5170:	bf4c      	ite	mi
   d5172:	6a03      	ldrmi	r3, [r0, #32]
   d5174:	6a23      	ldrpl	r3, [r4, #32]
   d5176:	6123      	str	r3, [r4, #16]
   d5178:	e005      	b.n	d5186 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d517a:	d104      	bne.n	d5186 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d517c:	7823      	ldrb	r3, [r4, #0]
   d517e:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5182:	d111      	bne.n	d51a8 <_ZN7FatFile4readEPvj+0xcc>
   d5184:	e7bb      	b.n	d50fe <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5186:	6921      	ldr	r1, [r4, #16]
   d5188:	68a0      	ldr	r0, [r4, #8]
   d518a:	f000 fa22 	bl	d55d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d518e:	eb08 0100 	add.w	r1, r8, r0
   d5192:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5194:	f1ba 0f00 	cmp.w	sl, #0
   d5198:	d135      	bne.n	d5206 <_ZN7FatFile4readEPvj+0x12a>
   d519a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d519e:	d332      	bcc.n	d5206 <_ZN7FatFile4readEPvj+0x12a>
   d51a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d51a2:	4299      	cmp	r1, r3
   d51a4:	d102      	bne.n	d51ac <_ZN7FatFile4readEPvj+0xd0>
   d51a6:	e02e      	b.n	d5206 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d51a8:	1ba8      	subs	r0, r5, r6
   d51aa:	e047      	b.n	d523c <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d51ac:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d51b0:	d31b      	bcc.n	d51ea <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d51b2:	7822      	ldrb	r2, [r4, #0]
   d51b4:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d51b6:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d51ba:	d406      	bmi.n	d51ca <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d51bc:	7902      	ldrb	r2, [r0, #4]
   d51be:	ebc8 0202 	rsb	r2, r8, r2
   d51c2:	b2d2      	uxtb	r2, r2
   d51c4:	4592      	cmp	sl, r2
   d51c6:	bf28      	it	cs
   d51c8:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d51ca:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d51cc:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d51d0:	d207      	bcs.n	d51e2 <_ZN7FatFile4readEPvj+0x106>
   d51d2:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d51d4:	4653      	mov	r3, sl
   d51d6:	464a      	mov	r2, r9
   d51d8:	6800      	ldr	r0, [r0, #0]
   d51da:	f000 fcf3 	bl	d5bc4 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d51de:	b960      	cbnz	r0, d51fa <_ZN7FatFile4readEPvj+0x11e>
   d51e0:	e78d      	b.n	d50fe <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d51e2:	4453      	add	r3, sl
   d51e4:	4299      	cmp	r1, r3
   d51e6:	d321      	bcc.n	d522c <_ZN7FatFile4readEPvj+0x150>
   d51e8:	e7f3      	b.n	d51d2 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d51ea:	464a      	mov	r2, r9
   d51ec:	6800      	ldr	r0, [r0, #0]
   d51ee:	f000 fca1 	bl	d5b34 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d51f2:	2800      	cmp	r0, #0
   d51f4:	d083      	beq.n	d50fe <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d51f6:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d51fa:	6963      	ldr	r3, [r4, #20]
   d51fc:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d51fe:	44b9      	add	r9, r7
    m_curPosition += n;
   d5200:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5202:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5204:	e798      	b.n	d5138 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5206:	2200      	movs	r2, #0
   d5208:	3024      	adds	r0, #36	; 0x24
   d520a:	f000 f9be 	bl	d558a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d520e:	2800      	cmp	r0, #0
   d5210:	f43f af75 	beq.w	d50fe <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5214:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5218:	42b7      	cmp	r7, r6
   d521a:	bf28      	it	cs
   d521c:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d521e:	eb00 010a 	add.w	r1, r0, sl
   d5222:	463a      	mov	r2, r7
   d5224:	4648      	mov	r0, r9
   d5226:	f002 fd6b 	bl	d7d00 <memcpy>
   d522a:	e7e6      	b.n	d51fa <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d522c:	3024      	adds	r0, #36	; 0x24
   d522e:	9101      	str	r1, [sp, #4]
   d5230:	f000 f984 	bl	d553c <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5234:	9901      	ldr	r1, [sp, #4]
   d5236:	2800      	cmp	r0, #0
   d5238:	d1cb      	bne.n	d51d2 <_ZN7FatFile4readEPvj+0xf6>
   d523a:	e760      	b.n	d50fe <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d523c:	b003      	add	sp, #12
   d523e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5242 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d5242:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d5244:	2201      	movs	r2, #1
   d5246:	f10d 0107 	add.w	r1, sp, #7
   d524a:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d524c:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d524e:	6905      	ldr	r5, [r0, #16]
   d5250:	f7ff ff44 	bl	d50dc <_ZN7FatFile4readEPvj>
   d5254:	2801      	cmp	r0, #1
   d5256:	bf05      	ittet	eq
   d5258:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d525c:	6166      	streq	r6, [r4, #20]
   d525e:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d5262:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d5264:	b002      	add	sp, #8
   d5266:	bd70      	pop	{r4, r5, r6, pc}

000d5268 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d526c:	460e      	mov	r6, r1
   d526e:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5270:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5272:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5274:	2900      	cmp	r1, #0
   d5276:	d039      	beq.n	d52ec <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5278:	6945      	ldr	r5, [r0, #20]
   d527a:	42b5      	cmp	r5, r6
   d527c:	d03a      	beq.n	d52f4 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d527e:	b90e      	cbnz	r6, d5284 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5280:	6106      	str	r6, [r0, #16]
    goto done;
   d5282:	e031      	b.n	d52e8 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5284:	070b      	lsls	r3, r1, #28
   d5286:	d503      	bpl.n	d5290 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5288:	69c3      	ldr	r3, [r0, #28]
   d528a:	429e      	cmp	r6, r3
   d528c:	d82e      	bhi.n	d52ec <_ZN7FatFile7seekSetEm+0x84>
   d528e:	e007      	b.n	d52a0 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5290:	0688      	lsls	r0, r1, #26
   d5292:	d505      	bpl.n	d52a0 <_ZN7FatFile7seekSetEm+0x38>
   d5294:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5296:	891b      	ldrh	r3, [r3, #8]
   d5298:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d529c:	d826      	bhi.n	d52ec <_ZN7FatFile7seekSetEm+0x84>
   d529e:	e023      	b.n	d52e8 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d52a0:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d52a4:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d52a8:	1e6a      	subs	r2, r5, #1
   d52aa:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d52ae:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d52b0:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d52b2:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d52b4:	429a      	cmp	r2, r3
   d52b6:	d800      	bhi.n	d52ba <_ZN7FatFile7seekSetEm+0x52>
   d52b8:	b94d      	cbnz	r5, d52ce <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d52ba:	064a      	lsls	r2, r1, #25
   d52bc:	bf4c      	ite	mi
   d52be:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d52c2:	6a22      	ldrpl	r2, [r4, #32]
   d52c4:	6122      	str	r2, [r4, #16]
   d52c6:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d52c8:	f104 0810 	add.w	r8, r4, #16
   d52cc:	e00a      	b.n	d52e4 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d52ce:	1a9b      	subs	r3, r3, r2
   d52d0:	e7f9      	b.n	d52c6 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d52d2:	4642      	mov	r2, r8
   d52d4:	6921      	ldr	r1, [r4, #16]
   d52d6:	68a0      	ldr	r0, [r4, #8]
   d52d8:	f000 f981 	bl	d55de <_ZN9FatVolume6fatGetEmPm>
   d52dc:	2800      	cmp	r0, #0
   d52de:	f105 35ff 	add.w	r5, r5, #4294967295
   d52e2:	dd03      	ble.n	d52ec <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d52e4:	2d00      	cmp	r5, #0
   d52e6:	d1f4      	bne.n	d52d2 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d52e8:	6166      	str	r6, [r4, #20]
   d52ea:	e003      	b.n	d52f4 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d52ec:	6127      	str	r7, [r4, #16]
  return false;
   d52ee:	2000      	movs	r0, #0
   d52f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d52f4:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d52f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d52fc <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d52fc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d52fe:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5300:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5302:	b90b      	cbnz	r3, d5308 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5304:	2001      	movs	r0, #1
   d5306:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5308:	7883      	ldrb	r3, [r0, #2]
   d530a:	075a      	lsls	r2, r3, #29
   d530c:	d523      	bpl.n	d5356 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d530e:	2101      	movs	r1, #1
   d5310:	f7ff febd 	bl	d508e <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5314:	4605      	mov	r5, r0
   d5316:	b928      	cbnz	r0, d5324 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5318:	7863      	ldrb	r3, [r4, #1]
   d531a:	f043 0301 	orr.w	r3, r3, #1
   d531e:	7063      	strb	r3, [r4, #1]
  return false;
   d5320:	2000      	movs	r0, #0
   d5322:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5324:	7803      	ldrb	r3, [r0, #0]
   d5326:	2be5      	cmp	r3, #229	; 0xe5
   d5328:	d0f6      	beq.n	d5318 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d532a:	7823      	ldrb	r3, [r4, #0]
   d532c:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d532e:	bf44      	itt	mi
   d5330:	69e3      	ldrmi	r3, [r4, #28]
   d5332:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5334:	8c23      	ldrh	r3, [r4, #32]
   d5336:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5338:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d533a:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d533c:	4b09      	ldr	r3, [pc, #36]	; (d5364 <_ZN7FatFile4syncEv+0x68>)
   d533e:	681b      	ldr	r3, [r3, #0]
   d5340:	b12b      	cbz	r3, d534e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5342:	f100 0116 	add.w	r1, r0, #22
   d5346:	3018      	adds	r0, #24
   d5348:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d534a:	8b2b      	ldrh	r3, [r5, #24]
   d534c:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d534e:	78a3      	ldrb	r3, [r4, #2]
   d5350:	f023 0304 	bic.w	r3, r3, #4
   d5354:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5356:	68a0      	ldr	r0, [r4, #8]
   d5358:	f7ff fe7a 	bl	d5050 <_ZN9FatVolume9cacheSyncEv>
   d535c:	2800      	cmp	r0, #0
   d535e:	d0db      	beq.n	d5318 <_ZN7FatFile4syncEv+0x1c>
   d5360:	e7d0      	b.n	d5304 <_ZN7FatFile4syncEv+0x8>
   d5362:	bf00      	nop
   d5364:	2003e3d0 	.word	0x2003e3d0

000d5368 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5368:	b510      	push	{r4, lr}
   d536a:	4604      	mov	r4, r0
  bool rtn = sync();
   d536c:	f7ff ffc6 	bl	d52fc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5370:	2300      	movs	r3, #0
   d5372:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5374:	bd10      	pop	{r4, pc}
	...

000d5378 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d537c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d537e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5380:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5382:	4604      	mov	r4, r0
   d5384:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5386:	d508      	bpl.n	d539a <_ZN7FatFile5writeEPKvj+0x22>
   d5388:	7883      	ldrb	r3, [r0, #2]
   d538a:	079a      	lsls	r2, r3, #30
   d538c:	d505      	bpl.n	d539a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d538e:	071b      	lsls	r3, r3, #28
   d5390:	d50b      	bpl.n	d53aa <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5392:	69e1      	ldr	r1, [r4, #28]
   d5394:	f7ff ff68 	bl	d5268 <_ZN7FatFile7seekSetEm>
   d5398:	b938      	cbnz	r0, d53aa <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d539a:	7863      	ldrb	r3, [r4, #1]
   d539c:	f043 0301 	orr.w	r3, r3, #1
   d53a0:	7063      	strb	r3, [r4, #1]
  return -1;
   d53a2:	f04f 30ff 	mov.w	r0, #4294967295
   d53a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d53aa:	6963      	ldr	r3, [r4, #20]
   d53ac:	43db      	mvns	r3, r3
   d53ae:	4598      	cmp	r8, r3
   d53b0:	d8f3      	bhi.n	d539a <_ZN7FatFile5writeEPKvj+0x22>
   d53b2:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d53b4:	f04f 0a00 	mov.w	sl, #0
   d53b8:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d53ba:	2e00      	cmp	r6, #0
   d53bc:	f000 8081 	beq.w	d54c2 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d53c0:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d53c2:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d53c4:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d53c8:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d53cc:	d11c      	bne.n	d5408 <_ZN7FatFile5writeEPKvj+0x90>
   d53ce:	b9df      	cbnz	r7, d5408 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d53d0:	6921      	ldr	r1, [r4, #16]
   d53d2:	b171      	cbz	r1, d53f2 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d53d4:	f104 0210 	add.w	r2, r4, #16
   d53d8:	f000 f901 	bl	d55de <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d53dc:	2800      	cmp	r0, #0
   d53de:	dbdc      	blt.n	d539a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d53e0:	f040 808e 	bne.w	d5500 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d53e4:	4620      	mov	r0, r4
   d53e6:	f7ff fe48 	bl	d507a <_ZN7FatFile10addClusterEv>
   d53ea:	2800      	cmp	r0, #0
   d53ec:	f040 8088 	bne.w	d5500 <_ZN7FatFile5writeEPKvj+0x188>
   d53f0:	e7d3      	b.n	d539a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d53f2:	6a23      	ldr	r3, [r4, #32]
   d53f4:	b93b      	cbnz	r3, d5406 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d53f6:	4620      	mov	r0, r4
   d53f8:	f7ff fe3f 	bl	d507a <_ZN7FatFile10addClusterEv>
   d53fc:	2800      	cmp	r0, #0
   d53fe:	d0cc      	beq.n	d539a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5400:	6923      	ldr	r3, [r4, #16]
   d5402:	6223      	str	r3, [r4, #32]
   d5404:	e000      	b.n	d5408 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5406:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5408:	6921      	ldr	r1, [r4, #16]
   d540a:	68a0      	ldr	r0, [r4, #8]
   d540c:	f000 f8e1 	bl	d55d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5410:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5412:	b917      	cbnz	r7, d541a <_ZN7FatFile5writeEPKvj+0xa2>
   d5414:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5418:	d221      	bcs.n	d545e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d541a:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d541e:	42b5      	cmp	r5, r6
   d5420:	bf28      	it	cs
   d5422:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5424:	b937      	cbnz	r7, d5434 <_ZN7FatFile5writeEPKvj+0xbc>
   d5426:	6963      	ldr	r3, [r4, #20]
   d5428:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d542a:	4293      	cmp	r3, r2
   d542c:	bf34      	ite	cc
   d542e:	2201      	movcc	r2, #1
   d5430:	2205      	movcs	r2, #5
   d5432:	e000      	b.n	d5436 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5434:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5436:	68a0      	ldr	r0, [r4, #8]
   d5438:	3024      	adds	r0, #36	; 0x24
   d543a:	f000 f8a6 	bl	d558a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d543e:	2800      	cmp	r0, #0
   d5440:	d0ab      	beq.n	d539a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5442:	4438      	add	r0, r7
   d5444:	462a      	mov	r2, r5
   d5446:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5448:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d544a:	f002 fc59 	bl	d7d00 <memcpy>
      if (512 == (n + blockOffset)) {
   d544e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5452:	d130      	bne.n	d54b6 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5454:	68a0      	ldr	r0, [r4, #8]
   d5456:	3024      	adds	r0, #36	; 0x24
   d5458:	f000 f870 	bl	d553c <_ZN8FatCache4syncEv>
   d545c:	e017      	b.n	d548e <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d545e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5462:	68a0      	ldr	r0, [r4, #8]
   d5464:	d315      	bcc.n	d5492 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5466:	7902      	ldrb	r2, [r0, #4]
   d5468:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d546a:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d546c:	b2d2      	uxtb	r2, r2
   d546e:	4293      	cmp	r3, r2
   d5470:	bf28      	it	cs
   d5472:	4613      	movcs	r3, r2
   d5474:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5476:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5478:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d547c:	d302      	bcc.n	d5484 <_ZN7FatFile5writeEPKvj+0x10c>
   d547e:	441a      	add	r2, r3
   d5480:	4291      	cmp	r1, r2
   d5482:	d337      	bcc.n	d54f4 <_ZN7FatFile5writeEPKvj+0x17c>
   d5484:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5486:	464a      	mov	r2, r9
   d5488:	6838      	ldr	r0, [r7, #0]
   d548a:	f000 fc4f 	bl	d5d2c <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d548e:	b990      	cbnz	r0, d54b6 <_ZN7FatFile5writeEPKvj+0x13e>
   d5490:	e783      	b.n	d539a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5492:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5494:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5496:	bf02      	ittt	eq
   d5498:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d549c:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d54a0:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d54a2:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d54a4:	464a      	mov	r2, r9
   d54a6:	6818      	ldr	r0, [r3, #0]
   d54a8:	f000 fbce 	bl	d5c48 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d54ac:	2800      	cmp	r0, #0
   d54ae:	f43f af74 	beq.w	d539a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d54b2:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d54b6:	6963      	ldr	r3, [r4, #20]
   d54b8:	442b      	add	r3, r5
   d54ba:	6163      	str	r3, [r4, #20]
    src += n;
   d54bc:	44a9      	add	r9, r5
    nToWrite -= n;
   d54be:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d54c0:	e77a      	b.n	d53b8 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d54c2:	69e2      	ldr	r2, [r4, #28]
   d54c4:	4293      	cmp	r3, r2
   d54c6:	d901      	bls.n	d54cc <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d54c8:	61e3      	str	r3, [r4, #28]
   d54ca:	e002      	b.n	d54d2 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d54cc:	4b0f      	ldr	r3, [pc, #60]	; (d550c <_ZN7FatFile5writeEPKvj+0x194>)
   d54ce:	681b      	ldr	r3, [r3, #0]
   d54d0:	b11b      	cbz	r3, d54da <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d54d2:	78a3      	ldrb	r3, [r4, #2]
   d54d4:	f043 0304 	orr.w	r3, r3, #4
   d54d8:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d54da:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d54de:	2b00      	cmp	r3, #0
   d54e0:	db02      	blt.n	d54e8 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d54e2:	4640      	mov	r0, r8
   d54e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d54e8:	4620      	mov	r0, r4
   d54ea:	f7ff ff07 	bl	d52fc <_ZN7FatFile4syncEv>
   d54ee:	2800      	cmp	r0, #0
   d54f0:	d1f7      	bne.n	d54e2 <_ZN7FatFile5writeEPKvj+0x16a>
   d54f2:	e752      	b.n	d539a <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d54f4:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d54f8:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d54fc:	62c2      	str	r2, [r0, #44]	; 0x2c
   d54fe:	e7c1      	b.n	d5484 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5500:	6921      	ldr	r1, [r4, #16]
   d5502:	68a0      	ldr	r0, [r4, #8]
   d5504:	f000 f865 	bl	d55d2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5508:	4601      	mov	r1, r0
   d550a:	e783      	b.n	d5414 <_ZN7FatFile5writeEPKvj+0x9c>
   d550c:	2003e3d0 	.word	0x2003e3d0

000d5510 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5510:	f000 be02 	b.w	d6118 <HAL_Pin_Map>

000d5514 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5514:	b570      	push	{r4, r5, r6, lr}
   d5516:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5518:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d551a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d551c:	b149      	cbz	r1, d5532 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d551e:	f002 fc33 	bl	d7d88 <strlen>
   d5522:	682b      	ldr	r3, [r5, #0]
   d5524:	4602      	mov	r2, r0
   d5526:	4621      	mov	r1, r4
   d5528:	4628      	mov	r0, r5
   d552a:	68db      	ldr	r3, [r3, #12]
    }
   d552c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5530:	4718      	bx	r3
    }
   d5532:	bd70      	pop	{r4, r5, r6, pc}

000d5534 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5534:	f000 bdf0 	b.w	d6118 <HAL_Pin_Map>

000d5538 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5538:	f000 bdee 	b.w	d6118 <HAL_Pin_Map>

000d553c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d553c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d553e:	7803      	ldrb	r3, [r0, #0]
   d5540:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5542:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5544:	d51e      	bpl.n	d5584 <_ZN8FatCache4syncEv+0x48>
   d5546:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5548:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d554a:	f100 060c 	add.w	r6, r0, #12
   d554e:	4632      	mov	r2, r6
   d5550:	6818      	ldr	r0, [r3, #0]
   d5552:	f000 fb79 	bl	d5c48 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5556:	4605      	mov	r5, r0
   d5558:	b908      	cbnz	r0, d555e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d555a:	2500      	movs	r5, #0
   d555c:	e013      	b.n	d5586 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d555e:	7823      	ldrb	r3, [r4, #0]
   d5560:	079b      	lsls	r3, r3, #30
   d5562:	d404      	bmi.n	d556e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5564:	7823      	ldrb	r3, [r4, #0]
   d5566:	f023 0301 	bic.w	r3, r3, #1
   d556a:	7023      	strb	r3, [r4, #0]
   d556c:	e00b      	b.n	d5586 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d556e:	6863      	ldr	r3, [r4, #4]
   d5570:	68a0      	ldr	r0, [r4, #8]
   d5572:	6919      	ldr	r1, [r3, #16]
   d5574:	4632      	mov	r2, r6
   d5576:	4401      	add	r1, r0
   d5578:	6818      	ldr	r0, [r3, #0]
   d557a:	f000 fb65 	bl	d5c48 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d557e:	2800      	cmp	r0, #0
   d5580:	d1f0      	bne.n	d5564 <_ZN8FatCache4syncEv+0x28>
   d5582:	e7ea      	b.n	d555a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5584:	2501      	movs	r5, #1

fail:
  return false;
}
   d5586:	4628      	mov	r0, r5
   d5588:	bd70      	pop	{r4, r5, r6, pc}

000d558a <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d558a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d558c:	6883      	ldr	r3, [r0, #8]
   d558e:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5590:	4604      	mov	r4, r0
   d5592:	460e      	mov	r6, r1
   d5594:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5596:	d014      	beq.n	d55c2 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5598:	f7ff ffd0 	bl	d553c <_ZN8FatCache4syncEv>
   d559c:	b908      	cbnz	r0, d55a2 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d559e:	2000      	movs	r0, #0
   d55a0:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d55a2:	076b      	lsls	r3, r5, #29
   d55a4:	d503      	bpl.n	d55ae <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d55a6:	2300      	movs	r3, #0
   d55a8:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d55aa:	60a6      	str	r6, [r4, #8]
   d55ac:	e009      	b.n	d55c2 <_ZN8FatCache4readEmh+0x38>
   d55ae:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d55b0:	f104 020c 	add.w	r2, r4, #12
   d55b4:	4631      	mov	r1, r6
   d55b6:	6818      	ldr	r0, [r3, #0]
   d55b8:	f000 fabc 	bl	d5b34 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d55bc:	2800      	cmp	r0, #0
   d55be:	d1f2      	bne.n	d55a6 <_ZN8FatCache4readEmh+0x1c>
   d55c0:	e7ed      	b.n	d559e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d55c2:	7823      	ldrb	r3, [r4, #0]
   d55c4:	4620      	mov	r0, r4
   d55c6:	f005 0503 	and.w	r5, r5, #3
   d55ca:	431d      	orrs	r5, r3
   d55cc:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d55d0:	bd70      	pop	{r4, r5, r6, pc}

000d55d2 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d55d2:	7983      	ldrb	r3, [r0, #6]
   d55d4:	6940      	ldr	r0, [r0, #20]
   d55d6:	3902      	subs	r1, #2
   d55d8:	4099      	lsls	r1, r3
}
   d55da:	4408      	add	r0, r1
   d55dc:	4770      	bx	lr

000d55de <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d55de:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d55e0:	b570      	push	{r4, r5, r6, lr}
   d55e2:	4605      	mov	r5, r0
   d55e4:	460c      	mov	r4, r1
   d55e6:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d55e8:	d802      	bhi.n	d55f0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d55ea:	f04f 30ff 	mov.w	r0, #4294967295
   d55ee:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d55f0:	69c3      	ldr	r3, [r0, #28]
   d55f2:	4299      	cmp	r1, r3
   d55f4:	d8f9      	bhi.n	d55ea <_ZN9FatVolume6fatGetEmPm+0xc>
   d55f6:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d55f8:	2b20      	cmp	r3, #32
   d55fa:	d110      	bne.n	d561e <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d55fc:	6981      	ldr	r1, [r0, #24]
   d55fe:	2202      	movs	r2, #2
   d5600:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5604:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5608:	f7ff ffbf 	bl	d558a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d560c:	2800      	cmp	r0, #0
   d560e:	d0ec      	beq.n	d55ea <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5610:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5614:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5618:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d561c:	e00f      	b.n	d563e <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d561e:	2b10      	cmp	r3, #16
   d5620:	d1e3      	bne.n	d55ea <_ZN9FatVolume6fatGetEmPm+0xc>
   d5622:	6983      	ldr	r3, [r0, #24]
   d5624:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5628:	2202      	movs	r2, #2
   d562a:	4419      	add	r1, r3
   d562c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5630:	f7ff ffab 	bl	d558a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5634:	2800      	cmp	r0, #0
   d5636:	d0d8      	beq.n	d55ea <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5638:	b2e4      	uxtb	r4, r4
   d563a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d563e:	69ea      	ldr	r2, [r5, #28]
   d5640:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5642:	bf9a      	itte	ls
   d5644:	6033      	strls	r3, [r6, #0]
  return 1;
   d5646:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5648:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d564a:	bd70      	pop	{r4, r5, r6, pc}

000d564c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d564c:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d564e:	b538      	push	{r3, r4, r5, lr}
   d5650:	460c      	mov	r4, r1
   d5652:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5654:	d801      	bhi.n	d565a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5656:	2000      	movs	r0, #0
   d5658:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d565a:	69c3      	ldr	r3, [r0, #28]
   d565c:	4299      	cmp	r1, r3
   d565e:	d8fa      	bhi.n	d5656 <_ZN9FatVolume6fatPutEmm+0xa>
   d5660:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5662:	2b20      	cmp	r3, #32
   d5664:	d10e      	bne.n	d5684 <_ZN9FatVolume6fatPutEmm+0x38>
   d5666:	6981      	ldr	r1, [r0, #24]
   d5668:	2203      	movs	r2, #3
   d566a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d566e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5672:	f7ff ff8a 	bl	d558a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5676:	2800      	cmp	r0, #0
   d5678:	d0ed      	beq.n	d5656 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d567a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d567e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5682:	e00f      	b.n	d56a4 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5684:	2b10      	cmp	r3, #16
   d5686:	d1e6      	bne.n	d5656 <_ZN9FatVolume6fatPutEmm+0xa>
   d5688:	6983      	ldr	r3, [r0, #24]
   d568a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d568e:	2203      	movs	r2, #3
   d5690:	4419      	add	r1, r3
   d5692:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5696:	f7ff ff78 	bl	d558a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d569a:	2800      	cmp	r0, #0
   d569c:	d0db      	beq.n	d5656 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d569e:	b2e4      	uxtb	r4, r4
   d56a0:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d56a4:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d56a6:	bd38      	pop	{r3, r4, r5, pc}

000d56a8 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d56a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d56ac:	68c4      	ldr	r4, [r0, #12]
   d56ae:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d56b0:	4605      	mov	r5, r0
   d56b2:	460e      	mov	r6, r1
   d56b4:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d56b6:	d207      	bcs.n	d56c8 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d56b8:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d56ba:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d56bc:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d56be:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d56c0:	429c      	cmp	r4, r3
   d56c2:	d903      	bls.n	d56cc <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d56c4:	b9cf      	cbnz	r7, d56fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d56c6:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d56c8:	2701      	movs	r7, #1
   d56ca:	e7f7      	b.n	d56bc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d56cc:	42a6      	cmp	r6, r4
   d56ce:	d014      	beq.n	d56fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d56d0:	aa01      	add	r2, sp, #4
   d56d2:	4621      	mov	r1, r4
   d56d4:	4628      	mov	r0, r5
   d56d6:	f7ff ff82 	bl	d55de <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d56da:	2800      	cmp	r0, #0
   d56dc:	db0d      	blt.n	d56fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d56de:	d0ed      	beq.n	d56bc <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d56e0:	9b01      	ldr	r3, [sp, #4]
   d56e2:	2b00      	cmp	r3, #0
   d56e4:	d1ea      	bne.n	d56bc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d56e6:	b107      	cbz	r7, d56ea <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d56e8:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d56ea:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d56ee:	4621      	mov	r1, r4
   d56f0:	4628      	mov	r0, r5
   d56f2:	f7ff ffab 	bl	d564c <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d56f6:	4607      	mov	r7, r0
   d56f8:	b908      	cbnz	r0, d56fe <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d56fa:	2700      	movs	r7, #0
   d56fc:	e00b      	b.n	d5716 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d56fe:	b916      	cbnz	r6, d5706 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5700:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5704:	e007      	b.n	d5716 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5706:	4622      	mov	r2, r4
   d5708:	4631      	mov	r1, r6
   d570a:	4628      	mov	r0, r5
   d570c:	f7ff ff9e 	bl	d564c <_ZN9FatVolume6fatPutEmm>
   d5710:	2800      	cmp	r0, #0
   d5712:	d1f5      	bne.n	d5700 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5714:	e7f1      	b.n	d56fa <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5716:	4638      	mov	r0, r7
   d5718:	b002      	add	sp, #8
   d571a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d571e <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d571e:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d5720:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5722:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5724:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d5726:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5728:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d572c:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d572e:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5730:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5732:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5736:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5738:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d573c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d5740:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d5744:	b1a1      	cbz	r1, d5770 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d5746:	2904      	cmp	r1, #4
   d5748:	d85d      	bhi.n	d5806 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d574a:	4611      	mov	r1, r2
   d574c:	3024      	adds	r0, #36	; 0x24
   d574e:	f7ff ff1c 	bl	d558a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5752:	2800      	cmp	r0, #0
   d5754:	d057      	beq.n	d5806 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d5756:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d575a:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d575e:	065b      	lsls	r3, r3, #25
   d5760:	d151      	bne.n	d5806 <_ZN9FatVolume4initEh+0xe8>
   d5762:	351b      	adds	r5, #27
   d5764:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d5768:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d576c:	2d00      	cmp	r5, #0
   d576e:	d04a      	beq.n	d5806 <_ZN9FatVolume4initEh+0xe8>
   d5770:	2200      	movs	r2, #0
   d5772:	4629      	mov	r1, r5
   d5774:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5778:	f7ff ff07 	bl	d558a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d577c:	2800      	cmp	r0, #0
   d577e:	d042      	beq.n	d5806 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d5780:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d5784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d5788:	d13d      	bne.n	d5806 <_ZN9FatVolume4initEh+0xe8>
   d578a:	7c03      	ldrb	r3, [r0, #16]
   d578c:	2b02      	cmp	r3, #2
   d578e:	d13a      	bne.n	d5806 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d5790:	89c3      	ldrh	r3, [r0, #14]
   d5792:	2b00      	cmp	r3, #0
   d5794:	d037      	beq.n	d5806 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d5796:	7b41      	ldrb	r1, [r0, #13]
   d5798:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d579a:	1e4b      	subs	r3, r1, #1
   d579c:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d579e:	2300      	movs	r3, #0
   d57a0:	71a3      	strb	r3, [r4, #6]
   d57a2:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d57a4:	2301      	movs	r3, #1
   d57a6:	428b      	cmp	r3, r1
   d57a8:	d007      	beq.n	d57ba <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d57aa:	3e01      	subs	r6, #1
   d57ac:	d02b      	beq.n	d5806 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d57ae:	79a2      	ldrb	r2, [r4, #6]
   d57b0:	005b      	lsls	r3, r3, #1
   d57b2:	3201      	adds	r2, #1
   d57b4:	b2db      	uxtb	r3, r3
   d57b6:	71a2      	strb	r2, [r4, #6]
   d57b8:	e7f5      	b.n	d57a6 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d57ba:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d57bc:	b902      	cbnz	r2, d57c0 <_ZN9FatVolume4initEh+0xa2>
   d57be:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d57c0:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d57c2:	89c6      	ldrh	r6, [r0, #14]
   d57c4:	442e      	add	r6, r5
   d57c6:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d57c8:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d57cc:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d57ce:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d57d2:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d57d4:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d57d8:	0152      	lsls	r2, r2, #5
   d57da:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d57de:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d57e2:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d57e4:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d57e8:	b903      	cbnz	r3, d57ec <_ZN9FatVolume4initEh+0xce>
   d57ea:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d57ec:	1aad      	subs	r5, r5, r2
   d57ee:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d57f0:	79a5      	ldrb	r5, [r4, #6]
   d57f2:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d57f6:	1c6b      	adds	r3, r5, #1
   d57f8:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d57fa:	f640 73f4 	movw	r3, #4084	; 0xff4
   d57fe:	429d      	cmp	r5, r3
   d5800:	d803      	bhi.n	d580a <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d5802:	230c      	movs	r3, #12
   d5804:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d5806:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d5808:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d580a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d580e:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d5810:	bf85      	ittet	hi
   d5812:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d5814:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d5816:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d5818:	2320      	movhi	r3, #32
   d581a:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d581c:	2001      	movs	r0, #1

fail:
  return false;
}
   d581e:	bd70      	pop	{r4, r5, r6, pc}

000d5820 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d5820:	f000 bc7a 	b.w	d6118 <HAL_Pin_Map>

000d5824 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d5824:	f000 bc78 	b.w	d6118 <HAL_Pin_Map>

000d5828 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d5828:	f000 bc76 	b.w	d6118 <HAL_Pin_Map>

000d582c <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d582c:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d582e:	4c0e      	ldr	r4, [pc, #56]	; (d5868 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5830:	460e      	mov	r6, r1
   d5832:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5834:	f000 fd10 	bl	d6258 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5838:	6823      	ldr	r3, [r4, #0]
   d583a:	1ac0      	subs	r0, r0, r3
   d583c:	4b0b      	ldr	r3, [pc, #44]	; (d586c <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d583e:	4298      	cmp	r0, r3
   d5840:	d908      	bls.n	d5854 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5842:	f000 fd11 	bl	d6268 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5846:	4b0a      	ldr	r3, [pc, #40]	; (d5870 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d5848:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d584a:	f000 fee1 	bl	d6610 <spark_process>
   d584e:	f000 fd03 	bl	d6258 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d5852:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5854:	f000 fd08 	bl	d6268 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d5858:	b280      	uxth	r0, r0
   d585a:	1b80      	subs	r0, r0, r6
}
   d585c:	42a8      	cmp	r0, r5
   d585e:	bfd4      	ite	le
   d5860:	2000      	movle	r0, #0
   d5862:	2001      	movgt	r0, #1
   d5864:	bd70      	pop	{r4, r5, r6, pc}
   d5866:	bf00      	nop
   d5868:	2003e3d4 	.word	0x2003e3d4
   d586c:	000186a0 	.word	0x000186a0
   d5870:	2003e730 	.word	0x2003e730

000d5874 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5874:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d5876:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5878:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d587a:	b94d      	cbnz	r5, d5890 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d587c:	6840      	ldr	r0, [r0, #4]
   d587e:	f000 fa7d 	bl	d5d7c <_ZN14SdSpiAltDriver8activateEv>
   d5882:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5884:	4629      	mov	r1, r5
   d5886:	7d18      	ldrb	r0, [r3, #20]
   d5888:	f002 f83f 	bl	d790a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d588c:	2301      	movs	r3, #1
   d588e:	7223      	strb	r3, [r4, #8]
   d5890:	bd38      	pop	{r3, r4, r5, pc}

000d5892 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5892:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5894:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5896:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5898:	b16b      	cbz	r3, d58b6 <_ZN9SdSpiCard7spiStopEv+0x24>
   d589a:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d589c:	2101      	movs	r1, #1
   d589e:	7d18      	ldrb	r0, [r3, #20]
   d58a0:	f002 f833 	bl	d790a <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d58a4:	21ff      	movs	r1, #255	; 0xff
   d58a6:	6860      	ldr	r0, [r4, #4]
   d58a8:	f000 fa9a 	bl	d5de0 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d58ac:	6860      	ldr	r0, [r4, #4]
   d58ae:	f000 fa79 	bl	d5da4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d58b2:	2300      	movs	r3, #0
   d58b4:	7223      	strb	r3, [r4, #8]
   d58b6:	bd10      	pop	{r4, pc}

000d58b8 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d58b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58ba:	4604      	mov	r4, r0
   d58bc:	460d      	mov	r5, r1
   d58be:	4616      	mov	r6, r2
   d58c0:	f000 fcd2 	bl	d6268 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d58c4:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d58c6:	6860      	ldr	r0, [r4, #4]
   d58c8:	f000 fa6f 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d58cc:	28ff      	cmp	r0, #255	; 0xff
   d58ce:	7260      	strb	r0, [r4, #9]
   d58d0:	d109      	bne.n	d58e6 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d58d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d58d6:	4639      	mov	r1, r7
   d58d8:	4620      	mov	r0, r4
   d58da:	f7ff ffa7 	bl	d582c <_ZN9SdSpiCard10isTimedOutEtt>
   d58de:	2800      	cmp	r0, #0
   d58e0:	d0f1      	beq.n	d58c6 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d58e2:	2355      	movs	r3, #85	; 0x55
   d58e4:	e00b      	b.n	d58fe <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d58e6:	28fe      	cmp	r0, #254	; 0xfe
   d58e8:	d001      	beq.n	d58ee <_ZN9SdSpiCard8readDataEPhj+0x36>
   d58ea:	2350      	movs	r3, #80	; 0x50
   d58ec:	e007      	b.n	d58fe <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d58ee:	4632      	mov	r2, r6
   d58f0:	4629      	mov	r1, r5
   d58f2:	6860      	ldr	r0, [r4, #4]
   d58f4:	f000 fa5e 	bl	d5db4 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d58f8:	7260      	strb	r0, [r4, #9]
   d58fa:	b130      	cbz	r0, d590a <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d58fc:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d58fe:	4620      	mov	r0, r4
   d5900:	7023      	strb	r3, [r4, #0]
   d5902:	f7ff ffc6 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5906:	2000      	movs	r0, #0
}
   d5908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d590a:	6860      	ldr	r0, [r4, #4]
   d590c:	f000 fa4d 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
   d5910:	6860      	ldr	r0, [r4, #4]
   d5912:	f000 fa4a 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
   d5916:	2001      	movs	r0, #1
   d5918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d591a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d591a:	b570      	push	{r4, r5, r6, lr}
   d591c:	4604      	mov	r4, r0
   d591e:	460e      	mov	r6, r1
   d5920:	f000 fca2 	bl	d6268 <HAL_Timer_Get_Milli_Seconds>
   d5924:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d5926:	4632      	mov	r2, r6
   d5928:	4629      	mov	r1, r5
   d592a:	4620      	mov	r0, r4
   d592c:	f7ff ff7e 	bl	d582c <_ZN9SdSpiCard10isTimedOutEtt>
   d5930:	b930      	cbnz	r0, d5940 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d5932:	6860      	ldr	r0, [r4, #4]
   d5934:	f000 fa39 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d5938:	28ff      	cmp	r0, #255	; 0xff
   d593a:	d1f4      	bne.n	d5926 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d593c:	2001      	movs	r0, #1
   d593e:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5940:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d5942:	bd70      	pop	{r4, r5, r6, pc}

000d5944 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d5946:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5948:	9201      	str	r2, [sp, #4]
   d594a:	4604      	mov	r4, r0
   d594c:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d594e:	b90b      	cbnz	r3, d5954 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5950:	f7ff ff90 	bl	d5874 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d5954:	b125      	cbz	r5, d5960 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d5956:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d595a:	4620      	mov	r0, r4
   d595c:	f7ff ffdd 	bl	d591a <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5960:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d5964:	6860      	ldr	r0, [r4, #4]
   d5966:	f000 fa3b 	bl	d5de0 <_ZN14SdSpiAltDriver4sendEh>
   d596a:	f10d 0607 	add.w	r6, sp, #7
   d596e:	f10d 0703 	add.w	r7, sp, #3
   d5972:	f816 1901 	ldrb.w	r1, [r6], #-1
   d5976:	6860      	ldr	r0, [r4, #4]
   d5978:	f000 fa32 	bl	d5de0 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d597c:	42be      	cmp	r6, r7
   d597e:	d1f8      	bne.n	d5972 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d5980:	2d00      	cmp	r5, #0
   d5982:	bf0c      	ite	eq
   d5984:	2195      	moveq	r1, #149	; 0x95
   d5986:	2187      	movne	r1, #135	; 0x87
   d5988:	6860      	ldr	r0, [r4, #4]
   d598a:	f000 fa29 	bl	d5de0 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d598e:	6860      	ldr	r0, [r4, #4]
   d5990:	f000 fa0b 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
   d5994:	250b      	movs	r5, #11
   d5996:	6860      	ldr	r0, [r4, #4]
   d5998:	f000 fa07 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d599c:	0603      	lsls	r3, r0, #24
   d599e:	7260      	strb	r0, [r4, #9]
   d59a0:	d503      	bpl.n	d59aa <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d59a2:	3d01      	subs	r5, #1
   d59a4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d59a8:	d1f5      	bne.n	d5996 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d59aa:	b003      	add	sp, #12
   d59ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59ae <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d59ae:	b570      	push	{r4, r5, r6, lr}
   d59b0:	4604      	mov	r4, r0
   d59b2:	460d      	mov	r5, r1
   d59b4:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d59b6:	2137      	movs	r1, #55	; 0x37
   d59b8:	2200      	movs	r2, #0
   d59ba:	f7ff ffc3 	bl	d5944 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d59be:	4632      	mov	r2, r6
   d59c0:	4629      	mov	r1, r5
   d59c2:	4620      	mov	r0, r4
  }
   d59c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d59c8:	f7ff bfbc 	b.w	d5944 <_ZN9SdSpiCard11cardCommandEhm>

000d59cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d59cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d59d0:	2500      	movs	r5, #0
   d59d2:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d59d4:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d59d6:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d59d8:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d59da:	4604      	mov	r4, r0
   d59dc:	4690      	mov	r8, r2
   d59de:	461e      	mov	r6, r3
   d59e0:	f000 fc42 	bl	d6268 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d59e4:	4641      	mov	r1, r8
   d59e6:	4607      	mov	r7, r0
   d59e8:	6860      	ldr	r0, [r4, #4]
   d59ea:	f000 f9cb 	bl	d5d84 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d59ee:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d59f0:	4a4f      	ldr	r2, [pc, #316]	; (d5b30 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d59f2:	721d      	strb	r5, [r3, #8]
   d59f4:	f04f 0801 	mov.w	r8, #1
   d59f8:	60da      	str	r2, [r3, #12]
   d59fa:	745d      	strb	r5, [r3, #17]
   d59fc:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d5a00:	4620      	mov	r0, r4
   d5a02:	f7ff ff37 	bl	d5874 <_ZN9SdSpiCard8spiStartEv>
   d5a06:	6863      	ldr	r3, [r4, #4]
   d5a08:	4641      	mov	r1, r8
   d5a0a:	7d18      	ldrb	r0, [r3, #20]
   d5a0c:	f001 ff7d 	bl	d790a <digitalWrite>
   d5a10:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5a12:	21ff      	movs	r1, #255	; 0xff
   d5a14:	6860      	ldr	r0, [r4, #4]
   d5a16:	3d01      	subs	r5, #1
   d5a18:	f000 f9e2 	bl	d5de0 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d5a1c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5a20:	d1f7      	bne.n	d5a12 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d5a22:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5a24:	4629      	mov	r1, r5
   d5a26:	7d18      	ldrb	r0, [r3, #20]
   d5a28:	f001 ff6f 	bl	d790a <digitalWrite>
   d5a2c:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d5a2e:	2200      	movs	r2, #0
   d5a30:	4611      	mov	r1, r2
   d5a32:	4620      	mov	r0, r4
   d5a34:	f7ff ff86 	bl	d5944 <_ZN9SdSpiCard11cardCommandEhm>
   d5a38:	2801      	cmp	r0, #1
   d5a3a:	4680      	mov	r8, r0
   d5a3c:	d012      	beq.n	d5a64 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d5a3e:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d5a40:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5a44:	d101      	bne.n	d5a4a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5a46:	2320      	movs	r3, #32
   d5a48:	e057      	b.n	d5afa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5a4a:	21fd      	movs	r1, #253	; 0xfd
   d5a4c:	6860      	ldr	r0, [r4, #4]
   d5a4e:	f000 f9c7 	bl	d5de0 <_ZN14SdSpiAltDriver4sendEh>
   d5a52:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5a56:	6860      	ldr	r0, [r4, #4]
   d5a58:	f000 f9a7 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d5a5c:	f1b8 0801 	subs.w	r8, r8, #1
   d5a60:	d1f9      	bne.n	d5a56 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d5a62:	e7e4      	b.n	d5a2e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d5a64:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d5a68:	2108      	movs	r1, #8
   d5a6a:	4620      	mov	r0, r4
   d5a6c:	f7ff ff6a 	bl	d5944 <_ZN9SdSpiCard11cardCommandEhm>
   d5a70:	2805      	cmp	r0, #5
   d5a72:	d102      	bne.n	d5a7a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5a74:	f884 800a 	strb.w	r8, [r4, #10]
   d5a78:	e00f      	b.n	d5a9a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d5a7a:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5a7c:	6860      	ldr	r0, [r4, #4]
   d5a7e:	f000 f994 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
   d5a82:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5a84:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d5a88:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5a8a:	d1f7      	bne.n	d5a7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d5a8c:	28aa      	cmp	r0, #170	; 0xaa
   d5a8e:	d102      	bne.n	d5a96 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5a90:	2302      	movs	r3, #2
   d5a92:	72a3      	strb	r3, [r4, #10]
   d5a94:	e001      	b.n	d5a9a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5a96:	2325      	movs	r3, #37	; 0x25
   d5a98:	e02f      	b.n	d5afa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d5a9a:	7aa3      	ldrb	r3, [r4, #10]
   d5a9c:	2b02      	cmp	r3, #2
   d5a9e:	bf0c      	ite	eq
   d5aa0:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d5aa4:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d5aa6:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d5aa8:	462a      	mov	r2, r5
   d5aaa:	2129      	movs	r1, #41	; 0x29
   d5aac:	4620      	mov	r0, r4
   d5aae:	f7ff ff7e 	bl	d59ae <_ZN9SdSpiCard8cardAcmdEhm>
   d5ab2:	4602      	mov	r2, r0
   d5ab4:	b148      	cbz	r0, d5aca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d5ab6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d5aba:	4639      	mov	r1, r7
   d5abc:	4620      	mov	r0, r4
   d5abe:	f7ff feb5 	bl	d582c <_ZN9SdSpiCard10isTimedOutEtt>
   d5ac2:	2800      	cmp	r0, #0
   d5ac4:	d0f0      	beq.n	d5aa8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d5ac6:	2343      	movs	r3, #67	; 0x43
   d5ac8:	e017      	b.n	d5afa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d5aca:	7aa3      	ldrb	r3, [r4, #10]
   d5acc:	2b02      	cmp	r3, #2
   d5ace:	d00e      	beq.n	d5aee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d5ad0:	4620      	mov	r0, r4
   d5ad2:	f7ff fede 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d5ad6:	6863      	ldr	r3, [r4, #4]
   d5ad8:	68b0      	ldr	r0, [r6, #8]
   d5ada:	7934      	ldrb	r4, [r6, #4]
   d5adc:	7b31      	ldrb	r1, [r6, #12]
   d5ade:	7b72      	ldrb	r2, [r6, #13]
   d5ae0:	745a      	strb	r2, [r3, #17]
   d5ae2:	60d8      	str	r0, [r3, #12]
   d5ae4:	721c      	strb	r4, [r3, #8]
   d5ae6:	7419      	strb	r1, [r3, #16]
  return true;
   d5ae8:	2001      	movs	r0, #1
   d5aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d5aee:	213a      	movs	r1, #58	; 0x3a
   d5af0:	4620      	mov	r0, r4
   d5af2:	f7ff ff27 	bl	d5944 <_ZN9SdSpiCard11cardCommandEhm>
   d5af6:	b138      	cbz	r0, d5b08 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d5af8:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d5afa:	4620      	mov	r0, r4
   d5afc:	7023      	strb	r3, [r4, #0]
   d5afe:	f7ff fec8 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5b02:	2000      	movs	r0, #0
}
   d5b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5b08:	6860      	ldr	r0, [r4, #4]
   d5b0a:	f000 f94e 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d5b0e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d5b12:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5b14:	bf04      	itt	eq
   d5b16:	2303      	moveq	r3, #3
   d5b18:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5b1a:	6860      	ldr	r0, [r4, #4]
   d5b1c:	f000 f945 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
   d5b20:	6860      	ldr	r0, [r4, #4]
   d5b22:	f000 f942 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
   d5b26:	6860      	ldr	r0, [r4, #4]
   d5b28:	f000 f93f 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
   d5b2c:	e7d0      	b.n	d5ad0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d5b2e:	bf00      	nop
   d5b30:	0003d090 	.word	0x0003d090

000d5b34 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5b34:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5b36:	7a83      	ldrb	r3, [r0, #10]
   d5b38:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5b3a:	bf18      	it	ne
   d5b3c:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5b3e:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5b40:	460a      	mov	r2, r1
   d5b42:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d5b44:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d5b46:	f7ff fefd 	bl	d5944 <_ZN9SdSpiCard11cardCommandEhm>
   d5b4a:	b110      	cbz	r0, d5b52 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5b4c:	2330      	movs	r3, #48	; 0x30
   d5b4e:	7023      	strb	r3, [r4, #0]
   d5b50:	e00b      	b.n	d5b6a <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d5b52:	4629      	mov	r1, r5
   d5b54:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5b58:	4620      	mov	r0, r4
   d5b5a:	f7ff fead 	bl	d58b8 <_ZN9SdSpiCard8readDataEPhj>
   d5b5e:	4605      	mov	r5, r0
   d5b60:	b118      	cbz	r0, d5b6a <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d5b62:	4620      	mov	r0, r4
   d5b64:	f7ff fe95 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5b68:	e003      	b.n	d5b72 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d5b6a:	4620      	mov	r0, r4
   d5b6c:	f7ff fe91 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5b70:	2500      	movs	r5, #0
}
   d5b72:	4628      	mov	r0, r5
   d5b74:	bd38      	pop	{r3, r4, r5, pc}

000d5b76 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5b76:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d5b78:	7a83      	ldrb	r3, [r0, #10]
   d5b7a:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5b7c:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5b7e:	bf18      	it	ne
   d5b80:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5b82:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5b84:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5b86:	f7ff fedd 	bl	d5944 <_ZN9SdSpiCard11cardCommandEhm>
   d5b8a:	b130      	cbz	r0, d5b9a <_ZN9SdSpiCard9readStartEm+0x24>
   d5b8c:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d5b8e:	4620      	mov	r0, r4
   d5b90:	7023      	strb	r3, [r4, #0]
   d5b92:	f7ff fe7e 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5b96:	2000      	movs	r0, #0
   d5b98:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d5b9a:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5b9c:	bd10      	pop	{r4, pc}

000d5b9e <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5b9e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d5ba0:	2200      	movs	r2, #0
   d5ba2:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5ba4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d5ba6:	f7ff fecd 	bl	d5944 <_ZN9SdSpiCard11cardCommandEhm>
   d5baa:	b130      	cbz	r0, d5bba <_ZN9SdSpiCard8readStopEv+0x1c>
   d5bac:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d5bae:	4620      	mov	r0, r4
   d5bb0:	7023      	strb	r3, [r4, #0]
   d5bb2:	f7ff fe6e 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5bb6:	2000      	movs	r0, #0
   d5bb8:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d5bba:	4620      	mov	r0, r4
   d5bbc:	f7ff fe69 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5bc0:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5bc2:	bd10      	pop	{r4, pc}

000d5bc4 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d5bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bc6:	4605      	mov	r5, r0
   d5bc8:	4616      	mov	r6, r2
   d5bca:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d5bcc:	f7ff ffd3 	bl	d5b76 <_ZN9SdSpiCard9readStartEm>
   d5bd0:	b198      	cbz	r0, d5bfa <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d5bd2:	2400      	movs	r4, #0
   d5bd4:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d5bd6:	429f      	cmp	r7, r3
   d5bd8:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d5bdc:	d908      	bls.n	d5bf0 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d5bde:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5be2:	4628      	mov	r0, r5
   d5be4:	f7ff fe68 	bl	d58b8 <_ZN9SdSpiCard8readDataEPhj>
   d5be8:	3401      	adds	r4, #1
   d5bea:	2800      	cmp	r0, #0
   d5bec:	d1f2      	bne.n	d5bd4 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d5bee:	e004      	b.n	d5bfa <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d5bf0:	4628      	mov	r0, r5
}
   d5bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d5bf6:	f7ff bfd2 	b.w	d5b9e <_ZN9SdSpiCard8readStopEv>
}
   d5bfa:	2000      	movs	r0, #0
   d5bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5bfe <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d5bfe:	b538      	push	{r3, r4, r5, lr}
   d5c00:	4604      	mov	r4, r0
   d5c02:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5c04:	6840      	ldr	r0, [r0, #4]
   d5c06:	f000 f8eb 	bl	d5de0 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d5c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5c0e:	4629      	mov	r1, r5
   d5c10:	6860      	ldr	r0, [r4, #4]
   d5c12:	f000 f8e9 	bl	d5de8 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5c16:	21ff      	movs	r1, #255	; 0xff
   d5c18:	6860      	ldr	r0, [r4, #4]
   d5c1a:	f000 f8e1 	bl	d5de0 <_ZN14SdSpiAltDriver4sendEh>
   d5c1e:	21ff      	movs	r1, #255	; 0xff
   d5c20:	6860      	ldr	r0, [r4, #4]
   d5c22:	f000 f8dd 	bl	d5de0 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5c26:	6860      	ldr	r0, [r4, #4]
   d5c28:	f000 f8bf 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d5c2c:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d5c2e:	f000 001f 	and.w	r0, r0, #31
   d5c32:	2805      	cmp	r0, #5
   d5c34:	d006      	beq.n	d5c44 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5c36:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5c38:	4620      	mov	r0, r4
   d5c3a:	7023      	strb	r3, [r4, #0]
   d5c3c:	f7ff fe29 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5c40:	2000      	movs	r0, #0
   d5c42:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d5c44:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5c46:	bd38      	pop	{r3, r4, r5, pc}

000d5c48 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5c48:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5c4a:	7a83      	ldrb	r3, [r0, #10]
   d5c4c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d5c4e:	bf18      	it	ne
   d5c50:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5c52:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5c54:	460a      	mov	r2, r1
   d5c56:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5c58:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5c5a:	f7ff fe73 	bl	d5944 <_ZN9SdSpiCard11cardCommandEhm>
   d5c5e:	4606      	mov	r6, r0
   d5c60:	b108      	cbz	r0, d5c66 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d5c62:	2332      	movs	r3, #50	; 0x32
   d5c64:	e01d      	b.n	d5ca2 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d5c66:	462a      	mov	r2, r5
   d5c68:	21fe      	movs	r1, #254	; 0xfe
   d5c6a:	4620      	mov	r0, r4
   d5c6c:	f7ff ffc7 	bl	d5bfe <_ZN9SdSpiCard9writeDataEhPKh>
   d5c70:	b1c0      	cbz	r0, d5ca4 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5c72:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d5c76:	4620      	mov	r0, r4
   d5c78:	f7ff fe4f 	bl	d591a <_ZN9SdSpiCard11waitNotBusyEt>
   d5c7c:	4605      	mov	r5, r0
   d5c7e:	b908      	cbnz	r0, d5c84 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5c80:	235a      	movs	r3, #90	; 0x5a
   d5c82:	e00e      	b.n	d5ca2 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d5c84:	4632      	mov	r2, r6
   d5c86:	210d      	movs	r1, #13
   d5c88:	4620      	mov	r0, r4
   d5c8a:	f7ff fe5b 	bl	d5944 <_ZN9SdSpiCard11cardCommandEhm>
   d5c8e:	b938      	cbnz	r0, d5ca0 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5c90:	6860      	ldr	r0, [r4, #4]
   d5c92:	f000 f88a 	bl	d5daa <_ZN14SdSpiAltDriver7receiveEv>
   d5c96:	b918      	cbnz	r0, d5ca0 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5c98:	4620      	mov	r0, r4
   d5c9a:	f7ff fdfa 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5c9e:	e005      	b.n	d5cac <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5ca0:	2329      	movs	r3, #41	; 0x29
   d5ca2:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d5ca4:	4620      	mov	r0, r4
   d5ca6:	f7ff fdf4 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5caa:	2500      	movs	r5, #0
}
   d5cac:	4628      	mov	r0, r5
   d5cae:	bd70      	pop	{r4, r5, r6, pc}

000d5cb0 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5cb0:	b538      	push	{r3, r4, r5, lr}
   d5cb2:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5cb4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5cb8:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5cba:	f7ff fe2e 	bl	d591a <_ZN9SdSpiCard11waitNotBusyEt>
   d5cbe:	b910      	cbnz	r0, d5cc6 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d5cc0:	235b      	movs	r3, #91	; 0x5b
   d5cc2:	7023      	strb	r3, [r4, #0]
   d5cc4:	e005      	b.n	d5cd2 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d5cc6:	462a      	mov	r2, r5
   d5cc8:	21fc      	movs	r1, #252	; 0xfc
   d5cca:	4620      	mov	r0, r4
   d5ccc:	f7ff ff97 	bl	d5bfe <_ZN9SdSpiCard9writeDataEhPKh>
   d5cd0:	b918      	cbnz	r0, d5cda <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5cd2:	4620      	mov	r0, r4
   d5cd4:	f7ff fddd 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5cd8:	2000      	movs	r0, #0
}
   d5cda:	bd38      	pop	{r3, r4, r5, pc}

000d5cdc <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5cdc:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5cde:	7a83      	ldrb	r3, [r0, #10]
   d5ce0:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5ce2:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5ce4:	bf18      	it	ne
   d5ce6:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5ce8:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5cea:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5cec:	f7ff fe2a 	bl	d5944 <_ZN9SdSpiCard11cardCommandEhm>
   d5cf0:	b130      	cbz	r0, d5d00 <_ZN9SdSpiCard10writeStartEm+0x24>
   d5cf2:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5cf4:	4620      	mov	r0, r4
   d5cf6:	7023      	strb	r3, [r4, #0]
   d5cf8:	f7ff fdcb 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5cfc:	2000      	movs	r0, #0
   d5cfe:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d5d00:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5d02:	bd10      	pop	{r4, pc}

000d5d04 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5d04:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5d06:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5d0a:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5d0c:	f7ff fe05 	bl	d591a <_ZN9SdSpiCard11waitNotBusyEt>
   d5d10:	4605      	mov	r5, r0
   d5d12:	b120      	cbz	r0, d5d1e <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5d14:	21fd      	movs	r1, #253	; 0xfd
   d5d16:	6860      	ldr	r0, [r4, #4]
   d5d18:	f000 f862 	bl	d5de0 <_ZN14SdSpiAltDriver4sendEh>
   d5d1c:	e001      	b.n	d5d22 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5d1e:	2356      	movs	r3, #86	; 0x56
   d5d20:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d5d22:	4620      	mov	r0, r4
   d5d24:	f7ff fdb5 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5d28:	4628      	mov	r0, r5
   d5d2a:	bd38      	pop	{r3, r4, r5, pc}

000d5d2c <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d5d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d2e:	4605      	mov	r5, r0
   d5d30:	4616      	mov	r6, r2
   d5d32:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d5d34:	f7ff ffd2 	bl	d5cdc <_ZN9SdSpiCard10writeStartEm>
   d5d38:	b170      	cbz	r0, d5d58 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d5d3a:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5d3c:	42bc      	cmp	r4, r7
   d5d3e:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5d42:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5d44:	d004      	beq.n	d5d50 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d5d46:	f7ff ffb3 	bl	d5cb0 <_ZN9SdSpiCard9writeDataEPKh>
   d5d4a:	b128      	cbz	r0, d5d58 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5d4c:	3401      	adds	r4, #1
   d5d4e:	e7f5      	b.n	d5d3c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d5d50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5d54:	f7ff bfd6 	b.w	d5d04 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d5d58:	4628      	mov	r0, r5
   d5d5a:	f7ff fd9a 	bl	d5892 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5d5e:	2000      	movs	r0, #0
   d5d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d62 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5d62:	f000 b9d9 	b.w	d6118 <HAL_Pin_Map>

000d5d66 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5d66:	f000 b9d7 	b.w	d6118 <HAL_Pin_Map>

000d5d6a <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d5d6a:	f000 b9d5 	b.w	d6118 <HAL_Pin_Map>
	...

000d5d70 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5d70:	4b01      	ldr	r3, [pc, #4]	; (d5d78 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d5d72:	2201      	movs	r2, #1
   d5d74:	701a      	strb	r2, [r3, #0]
   d5d76:	4770      	bx	lr
   d5d78:	2003e3d8 	.word	0x2003e3d8

000d5d7c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5d7c:	1d01      	adds	r1, r0, #4
   d5d7e:	6800      	ldr	r0, [r0, #0]
   d5d80:	f000 bcee 	b.w	d6760 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5d84 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d5d84:	b510      	push	{r4, lr}
   d5d86:	4604      	mov	r4, r0
  m_csPin = csPin;
   d5d88:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d5d8a:	6800      	ldr	r0, [r0, #0]
   d5d8c:	f000 fcbe 	bl	d670c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d5d90:	7d20      	ldrb	r0, [r4, #20]
   d5d92:	2101      	movs	r1, #1
   d5d94:	f001 fda8 	bl	d78e8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d5d98:	7d20      	ldrb	r0, [r4, #20]
   d5d9a:	2101      	movs	r1, #1
}
   d5d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d5da0:	f001 bdb3 	b.w	d790a <digitalWrite>

000d5da4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5da4:	6800      	ldr	r0, [r0, #0]
   d5da6:	f000 bcc2 	b.w	d672e <_ZN8SPIClass14endTransactionEv>

000d5daa <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5daa:	21ff      	movs	r1, #255	; 0xff
   d5dac:	6800      	ldr	r0, [r0, #0]
   d5dae:	f000 bd47 	b.w	d6840 <_ZN8SPIClass8transferEh>
	...

000d5db4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5db6:	4b08      	ldr	r3, [pc, #32]	; (d5dd8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5db8:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5dba:	2500      	movs	r5, #0
   d5dbc:	4c07      	ldr	r4, [pc, #28]	; (d5ddc <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5dbe:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5dc0:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5dc2:	4613      	mov	r3, r2
   d5dc4:	460a      	mov	r2, r1
   d5dc6:	4629      	mov	r1, r5
   d5dc8:	f000 fd40 	bl	d684c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5dcc:	7823      	ldrb	r3, [r4, #0]
   d5dce:	2b00      	cmp	r3, #0
   d5dd0:	d0fc      	beq.n	d5dcc <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5dd2:	2000      	movs	r0, #0
   d5dd4:	b003      	add	sp, #12
   d5dd6:	bd30      	pop	{r4, r5, pc}
   d5dd8:	000d5d71 	.word	0x000d5d71
   d5ddc:	2003e3d8 	.word	0x2003e3d8

000d5de0 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5de0:	6800      	ldr	r0, [r0, #0]
   d5de2:	f000 bd2d 	b.w	d6840 <_ZN8SPIClass8transferEh>
	...

000d5de8 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5dea:	4b07      	ldr	r3, [pc, #28]	; (d5e08 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5dec:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5dee:	2500      	movs	r5, #0
   d5df0:	4c06      	ldr	r4, [pc, #24]	; (d5e0c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5df2:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5df4:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5df6:	4613      	mov	r3, r2
   d5df8:	462a      	mov	r2, r5
   d5dfa:	f000 fd27 	bl	d684c <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d5dfe:	7823      	ldrb	r3, [r4, #0]
   d5e00:	2b00      	cmp	r3, #0
   d5e02:	d0fc      	beq.n	d5dfe <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5e04:	b003      	add	sp, #12
   d5e06:	bd30      	pop	{r4, r5, pc}
   d5e08:	000d5d71 	.word	0x000d5d71
   d5e0c:	2003e3d8 	.word	0x2003e3d8

000d5e10 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5e10:	f000 b982 	b.w	d6118 <HAL_Pin_Map>

000d5e14 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d5e14:	2200      	movs	r2, #0
   d5e16:	6001      	str	r1, [r0, #0]
   d5e18:	6102      	str	r2, [r0, #16]
   d5e1a:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d5e1c:	4770      	bx	lr

000d5e1e <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d5e1e:	b510      	push	{r4, lr}
   d5e20:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d5e22:	8800      	ldrh	r0, [r0, #0]
   d5e24:	f001 fd9d 	bl	d7962 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d5e28:	f240 3312 	movw	r3, #786	; 0x312
   d5e2c:	f1a0 020b 	sub.w	r2, r0, #11
   d5e30:	429a      	cmp	r2, r3
   d5e32:	d807      	bhi.n	d5e44 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d5e34:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d5e36:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d5e38:	60e0      	str	r0, [r4, #12]
   d5e3a:	f000 fa15 	bl	d6268 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d5e3e:	61a0      	str	r0, [r4, #24]

        return true;
   d5e40:	2001      	movs	r0, #1
   d5e42:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d5e44:	2000      	movs	r0, #0
    }
}
   d5e46:	bd10      	pop	{r4, pc}

000d5e48 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d5e48:	f000 b966 	b.w	d6118 <HAL_Pin_Map>

000d5e4c <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>:
void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
   d5e4c:	1d8b      	adds	r3, r1, #6
  uint16_t sum = 0;
   d5e4e:	2000      	movs	r0, #0
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
    sum += buffer[i];
   d5e50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d5e54:	4410      	add	r0, r2
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
   d5e56:	428b      	cmp	r3, r1
    sum += buffer[i];
   d5e58:	b280      	uxth	r0, r0
  *(array+1) = (uint8_t)(value);
}

uint16_t DFRobotDFPlayerMini::calculateCheckSum(uint8_t *buffer){
  uint16_t sum = 0;
  for (int i=Stack_Version; i<Stack_CheckSum; i++) {
   d5e5a:	d1f9      	bne.n	d5e50 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh+0x4>
    sum += buffer[i];
  }
  return -sum;
   d5e5c:	4240      	negs	r0, r0
}
   d5e5e:	b280      	uxth	r0, r0
   d5e60:	4770      	bx	lr

000d5e62 <_ZN19DFRobotDFPlayerMini10parseStackEv>:
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
   d5e62:	7c41      	ldrb	r1, [r0, #17]
  value <<=8;
  value += *(array+1);
   d5e64:	7c83      	ldrb	r3, [r0, #18]
  _isAvailable = false;
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
   d5e66:	7bc2      	ldrb	r2, [r0, #15]
   d5e68:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
  value <<=8;
  value += *(array+1);
   d5e6c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   d5e70:	b29b      	uxth	r3, r3

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);

  switch (_handleCommand) {
   d5e72:	3a3a      	subs	r2, #58	; 0x3a
  return _handleCommand;
}

void DFRobotDFPlayerMini::parseStack(){
  _handleCommand = *(_received + Stack_Command);
  _handleParameter =  arrayToUint16(_received + Stack_Parameter);
   d5e74:	8483      	strh	r3, [r0, #36]	; 0x24

  switch (_handleCommand) {
   d5e76:	2a15      	cmp	r2, #21
   d5e78:	d833      	bhi.n	d5ee2 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x80>
   d5e7a:	e8df f002 	tbb	[pc, r2]
   d5e7e:	1e17      	.short	0x1e17
   d5e80:	102e0b2e 	.word	0x102e0b2e
   d5e84:	2e2e2c25 	.word	0x2e2e2c25
   d5e88:	2e2e2e2e 	.word	0x2e2e2e2e
   d5e8c:	2e322e2e 	.word	0x2e322e2e
   d5e90:	2e2e2e2e 	.word	0x2e2e2e2e
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5e94:	2300      	movs	r3, #0
   d5e96:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d5e9a:	2305      	movs	r3, #5
   d5e9c:	e018      	b.n	d5ed0 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
  switch (_handleCommand) {
    case 0x3D:
      handleMessage(DFPlayerPlayFinished, _handleParameter);
      break;
    case 0x3F:
      if (_handleParameter & 0x02) {
   d5e9e:	0799      	lsls	r1, r3, #30
   d5ea0:	d52a      	bpl.n	d5ef8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5ea2:	2300      	movs	r3, #0
   d5ea4:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d5ea8:	2304      	movs	r3, #4
   d5eaa:	e011      	b.n	d5ed0 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
      if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardOnline, _handleParameter);
      }
      break;
    case 0x3A:
      if (_handleParameter & 0x02) {
   d5eac:	079a      	lsls	r2, r3, #30
   d5eae:	d523      	bpl.n	d5ef8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5eb0:	2300      	movs	r3, #0
   d5eb2:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d5eb6:	2302      	movs	r3, #2
   d5eb8:	e00a      	b.n	d5ed0 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
      if (_handleParameter & 0x02) {
        handleMessage(DFPlayerCardInserted, _handleParameter);
      }
      break;
    case 0x3B:
      if (_handleParameter & 0x02) {
   d5eba:	079b      	lsls	r3, r3, #30
   d5ebc:	d51c      	bpl.n	d5ef8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x96>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5ebe:	2300      	movs	r3, #0
   d5ec0:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d5ec4:	2303      	movs	r3, #3
   d5ec6:	e003      	b.n	d5ed0 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x6e>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5ec8:	2300      	movs	r3, #0
   d5eca:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d5ece:	2306      	movs	r3, #6
   d5ed0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   d5ed4:	e001      	b.n	d5eda <_ZN19DFRobotDFPlayerMini10parseStackEv+0x78>
      break;
    case 0x40:
      handleMessage(DFPlayerError, _handleParameter);
      break;
    case 0x41:
      _isSending = false;
   d5ed6:	2300      	movs	r3, #0
   d5ed8:	e00c      	b.n	d5ef4 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x92>
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
      _isAvailable = true;
   d5eda:	2301      	movs	r3, #1
   d5edc:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
      break;
   d5ee0:	4770      	bx	lr
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5ee2:	2300      	movs	r3, #0
  _handleType = type;
   d5ee4:	2201      	movs	r2, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5ee6:	f880 3020 	strb.w	r3, [r0, #32]
  _handleType = type;
   d5eea:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
  _handleParameter = parameter;
   d5eee:	8483      	strh	r3, [r0, #36]	; 0x24
  _isAvailable = true;
   d5ef0:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d5ef4:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
   d5ef8:	4770      	bx	lr

000d5efa <_ZN19DFRobotDFPlayerMini13validateStackEv>:
  value <<=8;
  value += *(array+1);
  return value;
}

bool DFRobotDFPlayerMini::validateStack(){
   d5efa:	b510      	push	{r4, lr}
   d5efc:	4604      	mov	r4, r0
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
   d5efe:	f100 010c 	add.w	r1, r0, #12
   d5f02:	f7ff ffa3 	bl	d5e4c <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
      break;
  }
}

uint16_t DFRobotDFPlayerMini::arrayToUint16(uint8_t *array){
  uint16_t value = *array;
   d5f06:	7ce2      	ldrb	r2, [r4, #19]
  value += *(array+1);
  return value;
}

bool DFRobotDFPlayerMini::validateStack(){
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
   d5f08:	7d23      	ldrb	r3, [r4, #20]
   d5f0a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d5f0e:	b29b      	uxth	r3, r3
}
   d5f10:	1a1b      	subs	r3, r3, r0
   d5f12:	4258      	negs	r0, r3
   d5f14:	4158      	adcs	r0, r3
   d5f16:	bd10      	pop	{r4, pc}

000d5f18 <_ZN19DFRobotDFPlayerMini9availableEv>:

bool DFRobotDFPlayerMini::available(){
   d5f18:	b570      	push	{r4, r5, r6, lr}
   d5f1a:	4604      	mov	r4, r0
  while (_serial->available()) {
   d5f1c:	6820      	ldr	r0, [r4, #0]
   d5f1e:	6803      	ldr	r3, [r0, #0]
   d5f20:	691b      	ldr	r3, [r3, #16]
   d5f22:	4798      	blx	r3
   d5f24:	4605      	mov	r5, r0
   d5f26:	2800      	cmp	r0, #0
   d5f28:	d05a      	beq.n	d5fe0 <_ZN19DFRobotDFPlayerMini9availableEv+0xc8>
   d5f2a:	6820      	ldr	r0, [r4, #0]
    if (_receivedIndex == 0) {
   d5f2c:	f894 5020 	ldrb.w	r5, [r4, #32]
      _received[Stack_Header] = _serial->read();
   d5f30:	6803      	ldr	r3, [r0, #0]
   d5f32:	695b      	ldr	r3, [r3, #20]
  return calculateCheckSum(_received) == arrayToUint16(_received+Stack_CheckSum);
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    if (_receivedIndex == 0) {
   d5f34:	b94d      	cbnz	r5, d5f4a <_ZN19DFRobotDFPlayerMini9availableEv+0x32>
      _received[Stack_Header] = _serial->read();
   d5f36:	4798      	blx	r3
   d5f38:	b2c0      	uxtb	r0, r0
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
   d5f3a:	287e      	cmp	r0, #126	; 0x7e
}

bool DFRobotDFPlayerMini::available(){
  while (_serial->available()) {
    if (_receivedIndex == 0) {
      _received[Stack_Header] = _serial->read();
   d5f3c:	7320      	strb	r0, [r4, #12]
#ifdef _DEBUG
      Serial.print(F("received:"));
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      if (_received[Stack_Header] == 0x7E) {
   d5f3e:	d1ed      	bne.n	d5f1c <_ZN19DFRobotDFPlayerMini9availableEv+0x4>
        _isAvailable = false;
   d5f40:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        _receivedIndex ++;
   d5f44:	f894 3020 	ldrb.w	r3, [r4, #32]
   d5f48:	e046      	b.n	d5fd8 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
      }
    }
    else{
      _received[_receivedIndex] = _serial->read();
   d5f4a:	4798      	blx	r3
   d5f4c:	4425      	add	r5, r4
   d5f4e:	7328      	strb	r0, [r5, #12]
#ifdef _DEBUG
      Serial.print(_received[_receivedIndex],HEX);
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
   d5f50:	f894 3020 	ldrb.w	r3, [r4, #32]
   d5f54:	2b02      	cmp	r3, #2
   d5f56:	d011      	beq.n	d5f7c <_ZN19DFRobotDFPlayerMini9availableEv+0x64>
   d5f58:	2b09      	cmp	r3, #9
   d5f5a:	d013      	beq.n	d5f84 <_ZN19DFRobotDFPlayerMini9availableEv+0x6c>
   d5f5c:	2b01      	cmp	r3, #1
   d5f5e:	d13b      	bne.n	d5fd8 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
   d5f60:	7b62      	ldrb	r2, [r4, #13]
   d5f62:	2aff      	cmp	r2, #255	; 0xff
   d5f64:	d038      	beq.n	d5fd8 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5f66:	2200      	movs	r2, #0
   d5f68:	f884 2020 	strb.w	r2, [r4, #32]
  _handleType = type;
   d5f6c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d5f70:	84a2      	strh	r2, [r4, #36]	; 0x24
  _isAvailable = true;
   d5f72:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d5f76:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
      Serial.print(F(" "));
#endif
      switch (_receivedIndex) {
        case Stack_Version:
          if (_received[_receivedIndex] != 0xFF) {
            return handleError(WrongStack);
   d5f7a:	e048      	b.n	d600e <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
          }
          break;
        case Stack_Length:
          if (_received[_receivedIndex] != 0x06) {
   d5f7c:	7ba2      	ldrb	r2, [r4, #14]
   d5f7e:	2a06      	cmp	r2, #6
   d5f80:	d02a      	beq.n	d5fd8 <_ZN19DFRobotDFPlayerMini9availableEv+0xc0>
   d5f82:	e002      	b.n	d5f8a <_ZN19DFRobotDFPlayerMini9availableEv+0x72>
          break;
        case Stack_End:
#ifdef _DEBUG
          Serial.println();
#endif
          if (_received[_receivedIndex] != 0xEF) {
   d5f84:	7d63      	ldrb	r3, [r4, #21]
   d5f86:	2bef      	cmp	r3, #239	; 0xef
   d5f88:	d009      	beq.n	d5f9e <_ZN19DFRobotDFPlayerMini9availableEv+0x86>
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5f8a:	2300      	movs	r3, #0
  _handleType = type;
   d5f8c:	2201      	movs	r2, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5f8e:	f884 3020 	strb.w	r3, [r4, #32]
  _handleType = type;
   d5f92:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d5f96:	84a3      	strh	r3, [r4, #36]	; 0x24
  _isAvailable = true;
   d5f98:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   d5f9c:	e00e      	b.n	d5fbc <_ZN19DFRobotDFPlayerMini9availableEv+0xa4>
#endif
          if (_received[_receivedIndex] != 0xEF) {
            return handleError(WrongStack);
          }
          else{
            if (validateStack()) {
   d5f9e:	4620      	mov	r0, r4
   d5fa0:	f7ff ffab 	bl	d5efa <_ZN19DFRobotDFPlayerMini13validateStackEv>
   d5fa4:	b168      	cbz	r0, d5fc2 <_ZN19DFRobotDFPlayerMini9availableEv+0xaa>
              _receivedIndex = 0;
   d5fa6:	2300      	movs	r3, #0
   d5fa8:	f884 3020 	strb.w	r3, [r4, #32]
              parseStack();
   d5fac:	4620      	mov	r0, r4
   d5fae:	f7ff ff58 	bl	d5e62 <_ZN19DFRobotDFPlayerMini10parseStackEv>
              if (_isAvailable && !_sending[Stack_ACK]) {
   d5fb2:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
   d5fb6:	b356      	cbz	r6, d600e <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
   d5fb8:	7ea3      	ldrb	r3, [r4, #26]
   d5fba:	bb43      	cbnz	r3, d600e <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
                _isSending = false;
   d5fbc:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   d5fc0:	e025      	b.n	d600e <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
   d5fc2:	2301      	movs	r3, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5fc4:	f884 0020 	strb.w	r0, [r4, #32]
  _handleType = type;
   d5fc8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d5fcc:	84a0      	strh	r0, [r4, #36]	; 0x24
  _isAvailable = true;
   d5fce:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d5fd2:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
                _isSending = false;
              }
              return _isAvailable;
            }
            else{
              return handleError(WrongStack);
   d5fd6:	e01a      	b.n	d600e <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
          }
          break;
        default:
          break;
      }
      _receivedIndex++;
   d5fd8:	3301      	adds	r3, #1
   d5fda:	f884 3020 	strb.w	r3, [r4, #32]
   d5fde:	e79d      	b.n	d5f1c <_ZN19DFRobotDFPlayerMini9availableEv+0x4>
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
   d5fe0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d5fe4:	b18b      	cbz	r3, d600a <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>
   d5fe6:	f000 f93f 	bl	d6268 <HAL_Timer_Get_Milli_Seconds>
   d5fea:	6863      	ldr	r3, [r4, #4]
   d5fec:	1ac0      	subs	r0, r0, r3
   d5fee:	68a3      	ldr	r3, [r4, #8]
   d5ff0:	4298      	cmp	r0, r3
   d5ff2:	d30a      	bcc.n	d600a <_ZN19DFRobotDFPlayerMini9availableEv+0xf2>

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
  _handleType = type;
  _handleParameter = parameter;
  _isAvailable = true;
   d5ff4:	2301      	movs	r3, #1
  _isAvailable = false;
  return _handleParameter;
}

bool DFRobotDFPlayerMini::handleMessage(uint8_t type, uint16_t parameter){
  _receivedIndex = 0;
   d5ff6:	f884 5020 	strb.w	r5, [r4, #32]
  _handleType = type;
   d5ffa:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
  _handleParameter = parameter;
   d5ffe:	84a5      	strh	r5, [r4, #36]	; 0x24
  _isAvailable = true;
   d6000:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return _isAvailable;
}

bool DFRobotDFPlayerMini::handleError(uint8_t type, uint16_t parameter){
  handleMessage(type, parameter);
  _isSending = false;
   d6004:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
      _receivedIndex++;
    }
  }
  
  if (_isSending && (millis()-_timeOutTimer>=_timeOutDuration)) {
    return handleError(TimeOut);
   d6008:	e001      	b.n	d600e <_ZN19DFRobotDFPlayerMini9availableEv+0xf6>
  }
  
  return _isAvailable;
   d600a:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
}
   d600e:	4630      	mov	r0, r6
   d6010:	bd70      	pop	{r4, r5, r6, pc}

000d6012 <_ZN19DFRobotDFPlayerMini9sendStackEv>:
    sum += buffer[i];
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
   d6012:	b510      	push	{r4, lr}
  if (_sending[Stack_ACK]) {
   d6014:	7e83      	ldrb	r3, [r0, #26]
    sum += buffer[i];
  }
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
   d6016:	4604      	mov	r4, r0
  if (_sending[Stack_ACK]) {
   d6018:	b133      	cbz	r3, d6028 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x16>
    while (_isSending) {
   d601a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d601e:	b133      	cbz	r3, d602e <_ZN19DFRobotDFPlayerMini9sendStackEv+0x1c>
      available();
   d6020:	4620      	mov	r0, r4
   d6022:	f7ff ff79 	bl	d5f18 <_ZN19DFRobotDFPlayerMini9availableEv>
  return -sum;
}

void DFRobotDFPlayerMini::sendStack(){
  if (_sending[Stack_ACK]) {
    while (_isSending) {
   d6026:	e7f8      	b.n	d601a <_ZN19DFRobotDFPlayerMini9sendStackEv+0x8>
      available();
    }
  }
  else{
    delay(10);
   d6028:	200a      	movs	r0, #10
   d602a:	f000 fcfb 	bl	d6a24 <delay>
    Serial.print(_sending[i],HEX);
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
   d602e:	4621      	mov	r1, r4
   d6030:	220a      	movs	r2, #10
   d6032:	f851 0b16 	ldr.w	r0, [r1], #22
   d6036:	6803      	ldr	r3, [r0, #0]
   d6038:	68db      	ldr	r3, [r3, #12]
   d603a:	4798      	blx	r3
   d603c:	f000 f914 	bl	d6268 <HAL_Timer_Get_Milli_Seconds>
  _timeOutTimer = millis();
  _isSending = _sending[Stack_ACK];
   d6040:	7ea3      	ldrb	r3, [r4, #26]
    Serial.print(F(" "));
  }
  Serial.println();
#endif
  _serial->write(_sending, DFPLAYER_SEND_LENGTH);
  _timeOutTimer = millis();
   d6042:	6060      	str	r0, [r4, #4]
  _isSending = _sending[Stack_ACK];
   d6044:	3300      	adds	r3, #0
   d6046:	bf18      	it	ne
   d6048:	2301      	movne	r3, #1
   d604a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   d604e:	bd10      	pop	{r4, pc}

000d6050 <_ZN19DFRobotDFPlayerMini9sendStackEht>:
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d6050:	1213      	asrs	r3, r2, #8

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
   d6052:	b510      	push	{r4, lr}
  _sending[Stack_Command] = command;
   d6054:	7641      	strb	r1, [r0, #25]
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d6056:	76c3      	strb	r3, [r0, #27]
  *(array+1) = (uint8_t)(value);
   d6058:	7702      	strb	r2, [r0, #28]
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
   d605a:	f100 0116 	add.w	r1, r0, #22

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
   d605e:	4604      	mov	r4, r0
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
   d6060:	f7ff fef4 	bl	d5e4c <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d6064:	1203      	asrs	r3, r0, #8
  *(array+1) = (uint8_t)(value);
   d6066:	77a0      	strb	r0, [r4, #30]
void DFRobotDFPlayerMini::setTimeOut(unsigned long timeOutDuration){
  _timeOutDuration = timeOutDuration;
}

void DFRobotDFPlayerMini::uint16ToArray(uint16_t value, uint8_t *array){
  *array = (uint8_t)(value>>8);
   d6068:	7763      	strb	r3, [r4, #29]

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
   d606a:	4620      	mov	r0, r4
}
   d606c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void DFRobotDFPlayerMini::sendStack(uint8_t command, uint16_t argument){
  _sending[Stack_Command] = command;
  uint16ToArray(argument, _sending+Stack_Parameter);
  uint16ToArray(calculateCheckSum(_sending), _sending+Stack_CheckSum);
  sendStack();
   d6070:	f7ff bfcf 	b.w	d6012 <_ZN19DFRobotDFPlayerMini9sendStackEv>

000d6074 <_ZN19DFRobotDFPlayerMini9sendStackEh>:
  _timeOutTimer = millis();
  _isSending = _sending[Stack_ACK];
}

void DFRobotDFPlayerMini::sendStack(uint8_t command){
  sendStack(command, 0);
   d6074:	2200      	movs	r2, #0
   d6076:	f7ff bfeb 	b.w	d6050 <_ZN19DFRobotDFPlayerMini9sendStackEht>

000d607a <_ZN19DFRobotDFPlayerMini13waitAvailableEv>:
void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(){
  _isSending = true;
   d607a:	2301      	movs	r3, #1

void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
}

bool DFRobotDFPlayerMini::waitAvailable(){
   d607c:	b510      	push	{r4, lr}
   d607e:	4604      	mov	r4, r0
  _isSending = true;
   d6080:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
  while (!available());
   d6084:	4620      	mov	r0, r4
   d6086:	f7ff ff47 	bl	d5f18 <_ZN19DFRobotDFPlayerMini9availableEv>
   d608a:	2800      	cmp	r0, #0
   d608c:	d0fa      	beq.n	d6084 <_ZN19DFRobotDFPlayerMini13waitAvailableEv+0xa>
  return _handleType != TimeOut;
   d608e:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
}
   d6092:	3000      	adds	r0, #0
   d6094:	bf18      	it	ne
   d6096:	2001      	movne	r0, #1
   d6098:	bd10      	pop	{r4, pc}

000d609a <_ZN19DFRobotDFPlayerMini5resetEv>:
void DFRobotDFPlayerMini::sleep(){
  sendStack(0x0A);
}

void DFRobotDFPlayerMini::reset(){
  sendStack(0x0C);
   d609a:	210c      	movs	r1, #12
   d609c:	f7ff bfea 	b.w	d6074 <_ZN19DFRobotDFPlayerMini9sendStackEh>

000d60a0 <_ZN19DFRobotDFPlayerMini5beginER6Streamb>:
  _isSending = true;
  while (!available());
  return _handleType != TimeOut;
}

bool DFRobotDFPlayerMini::begin(Stream &stream, bool isACK){
   d60a0:	b538      	push	{r3, r4, r5, lr}
   d60a2:	4604      	mov	r4, r0
  if (isACK) {
   d60a4:	4615      	mov	r5, r2
   d60a6:	b112      	cbz	r2, d60ae <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0xe>
  buffer <<= 8;
  sendStack(command, buffer | argumentLow);
}

void DFRobotDFPlayerMini::enableACK(){
  _sending[Stack_ACK] = 0x01;
   d60a8:	2301      	movs	r3, #1
   d60aa:	7683      	strb	r3, [r0, #26]
   d60ac:	e000      	b.n	d60b0 <_ZN19DFRobotDFPlayerMini5beginER6Streamb+0x10>
}

void DFRobotDFPlayerMini::disableACK(){
  _sending[Stack_ACK] = 0x00;
   d60ae:	76a2      	strb	r2, [r4, #26]
  else{
    disableACK();
  }
  
  _serial = &stream;
  _timeOutDuration += 3000;
   d60b0:	68a3      	ldr	r3, [r4, #8]
  }
  else{
    disableACK();
  }
  
  _serial = &stream;
   d60b2:	6021      	str	r1, [r4, #0]
  _timeOutDuration += 3000;
   d60b4:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
   d60b8:	60a3      	str	r3, [r4, #8]
  reset();
   d60ba:	4620      	mov	r0, r4
   d60bc:	f7ff ffed 	bl	d609a <_ZN19DFRobotDFPlayerMini5resetEv>
  waitAvailable();
   d60c0:	4620      	mov	r0, r4
   d60c2:	f7ff ffda 	bl	d607a <_ZN19DFRobotDFPlayerMini13waitAvailableEv>
  _timeOutDuration -= 3000;
   d60c6:	68a3      	ldr	r3, [r4, #8]
   d60c8:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
  delay(200);
   d60cc:	20c8      	movs	r0, #200	; 0xc8
  
  _serial = &stream;
  _timeOutDuration += 3000;
  reset();
  waitAvailable();
  _timeOutDuration -= 3000;
   d60ce:	60a3      	str	r3, [r4, #8]
  delay(200);
   d60d0:	f000 fca8 	bl	d6a24 <delay>
  return (readType() == DFPlayerCardOnline) || !isACK;
}

uint8_t DFRobotDFPlayerMini::readType(){
  _isAvailable = false;
   d60d4:	2300      	movs	r3, #0
   d60d6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  _timeOutDuration += 3000;
  reset();
  waitAvailable();
  _timeOutDuration -= 3000;
  delay(200);
  return (readType() == DFPlayerCardOnline) || !isACK;
   d60da:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d60de:	2b04      	cmp	r3, #4
   d60e0:	bf14      	ite	ne
   d60e2:	f085 0001 	eorne.w	r0, r5, #1
   d60e6:	2001      	moveq	r0, #1
}
   d60e8:	bd38      	pop	{r3, r4, r5, pc}

000d60ea <_ZN19DFRobotDFPlayerMini13playMp3FolderEi>:
void DFRobotDFPlayerMini::disableLoopAll(){
  sendStack(0x11, 0x00);
}

void DFRobotDFPlayerMini::playMp3Folder(int fileNumber){
  sendStack(0x12, fileNumber);
   d60ea:	b28a      	uxth	r2, r1
   d60ec:	2112      	movs	r1, #18
   d60ee:	f7ff bfaf 	b.w	d6050 <_ZN19DFRobotDFPlayerMini9sendStackEht>

000d60f2 <_GLOBAL__sub_I__ZN19DFRobotDFPlayerMini10setTimeOutEm>:
   d60f2:	f000 b811 	b.w	d6118 <HAL_Pin_Map>
	...

000d60f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d60f8:	b508      	push	{r3, lr}
   d60fa:	4b02      	ldr	r3, [pc, #8]	; (d6104 <netdb_freeaddrinfo+0xc>)
   d60fc:	681b      	ldr	r3, [r3, #0]
   d60fe:	689b      	ldr	r3, [r3, #8]
   d6100:	9301      	str	r3, [sp, #4]
   d6102:	bd08      	pop	{r3, pc}
   d6104:	00030268 	.word	0x00030268

000d6108 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b02      	ldr	r3, [pc, #8]	; (d6114 <netdb_getaddrinfo+0xc>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	68db      	ldr	r3, [r3, #12]
   d6110:	9301      	str	r3, [sp, #4]
   d6112:	bd08      	pop	{r3, pc}
   d6114:	00030268 	.word	0x00030268

000d6118 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <HAL_Pin_Map+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	681b      	ldr	r3, [r3, #0]
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	0003022c 	.word	0x0003022c

000d6128 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <HAL_Validate_Pin_Function+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	685b      	ldr	r3, [r3, #4]
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	0003022c 	.word	0x0003022c

000d6138 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <HAL_Pin_Mode+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	689b      	ldr	r3, [r3, #8]
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	0003022c 	.word	0x0003022c

000d6148 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <HAL_Get_Pin_Mode+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	68db      	ldr	r3, [r3, #12]
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	0003022c 	.word	0x0003022c

000d6158 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <HAL_GPIO_Write+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	691b      	ldr	r3, [r3, #16]
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	0003022c 	.word	0x0003022c

000d6168 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <HAL_GPIO_Read+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	695b      	ldr	r3, [r3, #20]
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	0003022c 	.word	0x0003022c

000d6178 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <HAL_ADC_Read+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	0003022c 	.word	0x0003022c

000d6188 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <HAL_SPI_Begin+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	681b      	ldr	r3, [r3, #0]
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	00030230 	.word	0x00030230

000d6198 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b02      	ldr	r3, [pc, #8]	; (d61a4 <HAL_SPI_Send_Receive_Data+0xc>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	695b      	ldr	r3, [r3, #20]
   d61a0:	9301      	str	r3, [sp, #4]
   d61a2:	bd08      	pop	{r3, pc}
   d61a4:	00030230 	.word	0x00030230

000d61a8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d61a8:	b508      	push	{r3, lr}
   d61aa:	4b02      	ldr	r3, [pc, #8]	; (d61b4 <HAL_SPI_Init+0xc>)
   d61ac:	681b      	ldr	r3, [r3, #0]
   d61ae:	69db      	ldr	r3, [r3, #28]
   d61b0:	9301      	str	r3, [sp, #4]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	00030230 	.word	0x00030230

000d61b8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d61b8:	b508      	push	{r3, lr}
   d61ba:	4b02      	ldr	r3, [pc, #8]	; (d61c4 <HAL_SPI_Is_Enabled+0xc>)
   d61bc:	681b      	ldr	r3, [r3, #0]
   d61be:	6a1b      	ldr	r3, [r3, #32]
   d61c0:	9301      	str	r3, [sp, #4]
   d61c2:	bd08      	pop	{r3, pc}
   d61c4:	00030230 	.word	0x00030230

000d61c8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d61c8:	b508      	push	{r3, lr}
   d61ca:	4b02      	ldr	r3, [pc, #8]	; (d61d4 <HAL_SPI_Info+0xc>)
   d61cc:	681b      	ldr	r3, [r3, #0]
   d61ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d61d0:	9301      	str	r3, [sp, #4]
   d61d2:	bd08      	pop	{r3, pc}
   d61d4:	00030230 	.word	0x00030230

000d61d8 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d61d8:	b508      	push	{r3, lr}
   d61da:	4b02      	ldr	r3, [pc, #8]	; (d61e4 <HAL_SPI_DMA_Transfer+0xc>)
   d61dc:	681b      	ldr	r3, [r3, #0]
   d61de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d61e0:	9301      	str	r3, [sp, #4]
   d61e2:	bd08      	pop	{r3, pc}
   d61e4:	00030230 	.word	0x00030230

000d61e8 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4b02      	ldr	r3, [pc, #8]	; (d61f4 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d61ec:	681b      	ldr	r3, [r3, #0]
   d61ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d61f0:	9301      	str	r3, [sp, #4]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	00030230 	.word	0x00030230

000d61f8 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d61f8:	b508      	push	{r3, lr}
   d61fa:	4b02      	ldr	r3, [pc, #8]	; (d6204 <HAL_SPI_Set_Settings+0xc>)
   d61fc:	681b      	ldr	r3, [r3, #0]
   d61fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6200:	9301      	str	r3, [sp, #4]
   d6202:	bd08      	pop	{r3, pc}
   d6204:	00030230 	.word	0x00030230

000d6208 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d6208:	b508      	push	{r3, lr}
   d620a:	4b02      	ldr	r3, [pc, #8]	; (d6214 <HAL_SPI_Acquire+0xc>)
   d620c:	681b      	ldr	r3, [r3, #0]
   d620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	bd08      	pop	{r3, pc}
   d6214:	00030230 	.word	0x00030230

000d6218 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d6218:	b508      	push	{r3, lr}
   d621a:	4b02      	ldr	r3, [pc, #8]	; (d6224 <HAL_SPI_Release+0xc>)
   d621c:	681b      	ldr	r3, [r3, #0]
   d621e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6220:	9301      	str	r3, [sp, #4]
   d6222:	bd08      	pop	{r3, pc}
   d6224:	00030230 	.word	0x00030230

000d6228 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6228:	b508      	push	{r3, lr}
   d622a:	4b02      	ldr	r3, [pc, #8]	; (d6234 <if_index_to_name+0xc>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	695b      	ldr	r3, [r3, #20]
   d6230:	9301      	str	r3, [sp, #4]
   d6232:	bd08      	pop	{r3, pc}
   d6234:	0003026c 	.word	0x0003026c

000d6238 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6238:	b508      	push	{r3, lr}
   d623a:	4b02      	ldr	r3, [pc, #8]	; (d6244 <HAL_RNG_GetRandomNumber+0xc>)
   d623c:	681b      	ldr	r3, [r3, #0]
   d623e:	685b      	ldr	r3, [r3, #4]
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	bd08      	pop	{r3, pc}
   d6244:	00030218 	.word	0x00030218

000d6248 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6248:	b508      	push	{r3, lr}
   d624a:	4b02      	ldr	r3, [pc, #8]	; (d6254 <HAL_Delay_Microseconds+0xc>)
   d624c:	681b      	ldr	r3, [r3, #0]
   d624e:	68db      	ldr	r3, [r3, #12]
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	bd08      	pop	{r3, pc}
   d6254:	00030218 	.word	0x00030218

000d6258 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6258:	b508      	push	{r3, lr}
   d625a:	4b02      	ldr	r3, [pc, #8]	; (d6264 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d625c:	681b      	ldr	r3, [r3, #0]
   d625e:	691b      	ldr	r3, [r3, #16]
   d6260:	9301      	str	r3, [sp, #4]
   d6262:	bd08      	pop	{r3, pc}
   d6264:	00030218 	.word	0x00030218

000d6268 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6268:	b508      	push	{r3, lr}
   d626a:	4b02      	ldr	r3, [pc, #8]	; (d6274 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d626c:	681b      	ldr	r3, [r3, #0]
   d626e:	695b      	ldr	r3, [r3, #20]
   d6270:	9301      	str	r3, [sp, #4]
   d6272:	bd08      	pop	{r3, pc}
   d6274:	00030218 	.word	0x00030218

000d6278 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6278:	b508      	push	{r3, lr}
   d627a:	4b02      	ldr	r3, [pc, #8]	; (d6284 <os_thread_is_current+0xc>)
   d627c:	681b      	ldr	r3, [r3, #0]
   d627e:	689b      	ldr	r3, [r3, #8]
   d6280:	9301      	str	r3, [sp, #4]
   d6282:	bd08      	pop	{r3, pc}
   d6284:	00030248 	.word	0x00030248

000d6288 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6288:	b508      	push	{r3, lr}
   d628a:	4b02      	ldr	r3, [pc, #8]	; (d6294 <os_thread_join+0xc>)
   d628c:	681b      	ldr	r3, [r3, #0]
   d628e:	691b      	ldr	r3, [r3, #16]
   d6290:	9301      	str	r3, [sp, #4]
   d6292:	bd08      	pop	{r3, pc}
   d6294:	00030248 	.word	0x00030248

000d6298 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6298:	b508      	push	{r3, lr}
   d629a:	4b02      	ldr	r3, [pc, #8]	; (d62a4 <os_thread_cleanup+0xc>)
   d629c:	681b      	ldr	r3, [r3, #0]
   d629e:	695b      	ldr	r3, [r3, #20]
   d62a0:	9301      	str	r3, [sp, #4]
   d62a2:	bd08      	pop	{r3, pc}
   d62a4:	00030248 	.word	0x00030248

000d62a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d62a8:	b508      	push	{r3, lr}
   d62aa:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <os_mutex_recursive_create+0xc>)
   d62ac:	681b      	ldr	r3, [r3, #0]
   d62ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d62b0:	9301      	str	r3, [sp, #4]
   d62b2:	bd08      	pop	{r3, pc}
   d62b4:	00030248 	.word	0x00030248

000d62b8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d62b8:	b508      	push	{r3, lr}
   d62ba:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <os_mutex_recursive_destroy+0xc>)
   d62bc:	681b      	ldr	r3, [r3, #0]
   d62be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d62c0:	9301      	str	r3, [sp, #4]
   d62c2:	bd08      	pop	{r3, pc}
   d62c4:	00030248 	.word	0x00030248

000d62c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <inet_inet_ntop+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	695b      	ldr	r3, [r3, #20]
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	00030264 	.word	0x00030264

000d62d8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d62d8:	b508      	push	{r3, lr}
   d62da:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <inet_htonl+0xc>)
   d62dc:	681b      	ldr	r3, [r3, #0]
   d62de:	6a1b      	ldr	r3, [r3, #32]
   d62e0:	9301      	str	r3, [sp, #4]
   d62e2:	bd08      	pop	{r3, pc}
   d62e4:	00030264 	.word	0x00030264

000d62e8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d62e8:	b508      	push	{r3, lr}
   d62ea:	4b02      	ldr	r3, [pc, #8]	; (d62f4 <inet_htons+0xc>)
   d62ec:	681b      	ldr	r3, [r3, #0]
   d62ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d62f0:	9301      	str	r3, [sp, #4]
   d62f2:	bd08      	pop	{r3, pc}
   d62f4:	00030264 	.word	0x00030264

000d62f8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d62f8:	b508      	push	{r3, lr}
   d62fa:	4b02      	ldr	r3, [pc, #8]	; (d6304 <HAL_USART_Init+0xc>)
   d62fc:	681b      	ldr	r3, [r3, #0]
   d62fe:	681b      	ldr	r3, [r3, #0]
   d6300:	9301      	str	r3, [sp, #4]
   d6302:	bd08      	pop	{r3, pc}
   d6304:	0003023c 	.word	0x0003023c

000d6308 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6308:	b508      	push	{r3, lr}
   d630a:	4b02      	ldr	r3, [pc, #8]	; (d6314 <HAL_USART_Write_Data+0xc>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	68db      	ldr	r3, [r3, #12]
   d6310:	9301      	str	r3, [sp, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	0003023c 	.word	0x0003023c

000d6318 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6318:	b508      	push	{r3, lr}
   d631a:	4b02      	ldr	r3, [pc, #8]	; (d6324 <HAL_USART_Available_Data+0xc>)
   d631c:	681b      	ldr	r3, [r3, #0]
   d631e:	691b      	ldr	r3, [r3, #16]
   d6320:	9301      	str	r3, [sp, #4]
   d6322:	bd08      	pop	{r3, pc}
   d6324:	0003023c 	.word	0x0003023c

000d6328 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6328:	b508      	push	{r3, lr}
   d632a:	4b02      	ldr	r3, [pc, #8]	; (d6334 <HAL_USART_Read_Data+0xc>)
   d632c:	681b      	ldr	r3, [r3, #0]
   d632e:	695b      	ldr	r3, [r3, #20]
   d6330:	9301      	str	r3, [sp, #4]
   d6332:	bd08      	pop	{r3, pc}
   d6334:	0003023c 	.word	0x0003023c

000d6338 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6338:	b508      	push	{r3, lr}
   d633a:	4b02      	ldr	r3, [pc, #8]	; (d6344 <HAL_USART_Peek_Data+0xc>)
   d633c:	681b      	ldr	r3, [r3, #0]
   d633e:	699b      	ldr	r3, [r3, #24]
   d6340:	9301      	str	r3, [sp, #4]
   d6342:	bd08      	pop	{r3, pc}
   d6344:	0003023c 	.word	0x0003023c

000d6348 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6348:	b508      	push	{r3, lr}
   d634a:	4b02      	ldr	r3, [pc, #8]	; (d6354 <HAL_USART_Flush_Data+0xc>)
   d634c:	681b      	ldr	r3, [r3, #0]
   d634e:	69db      	ldr	r3, [r3, #28]
   d6350:	9301      	str	r3, [sp, #4]
   d6352:	bd08      	pop	{r3, pc}
   d6354:	0003023c 	.word	0x0003023c

000d6358 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6358:	b508      	push	{r3, lr}
   d635a:	4b02      	ldr	r3, [pc, #8]	; (d6364 <HAL_USART_Is_Enabled+0xc>)
   d635c:	681b      	ldr	r3, [r3, #0]
   d635e:	6a1b      	ldr	r3, [r3, #32]
   d6360:	9301      	str	r3, [sp, #4]
   d6362:	bd08      	pop	{r3, pc}
   d6364:	0003023c 	.word	0x0003023c

000d6368 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6368:	b508      	push	{r3, lr}
   d636a:	4b02      	ldr	r3, [pc, #8]	; (d6374 <HAL_USART_Available_Data_For_Write+0xc>)
   d636c:	681b      	ldr	r3, [r3, #0]
   d636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6370:	9301      	str	r3, [sp, #4]
   d6372:	bd08      	pop	{r3, pc}
   d6374:	0003023c 	.word	0x0003023c

000d6378 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d6378:	b508      	push	{r3, lr}
   d637a:	4b02      	ldr	r3, [pc, #8]	; (d6384 <HAL_USART_BeginConfig+0xc>)
   d637c:	681b      	ldr	r3, [r3, #0]
   d637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6380:	9301      	str	r3, [sp, #4]
   d6382:	bd08      	pop	{r3, pc}
   d6384:	0003023c 	.word	0x0003023c

000d6388 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6388:	b508      	push	{r3, lr}
   d638a:	4b02      	ldr	r3, [pc, #8]	; (d6394 <HAL_I2C_Begin+0xc>)
   d638c:	681b      	ldr	r3, [r3, #0]
   d638e:	68db      	ldr	r3, [r3, #12]
   d6390:	9301      	str	r3, [sp, #4]
   d6392:	bd08      	pop	{r3, pc}
   d6394:	00030228 	.word	0x00030228

000d6398 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d6398:	b508      	push	{r3, lr}
   d639a:	4b02      	ldr	r3, [pc, #8]	; (d63a4 <HAL_I2C_Begin_Transmission+0xc>)
   d639c:	681b      	ldr	r3, [r3, #0]
   d639e:	699b      	ldr	r3, [r3, #24]
   d63a0:	9301      	str	r3, [sp, #4]
   d63a2:	bd08      	pop	{r3, pc}
   d63a4:	00030228 	.word	0x00030228

000d63a8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d63a8:	b508      	push	{r3, lr}
   d63aa:	4b02      	ldr	r3, [pc, #8]	; (d63b4 <HAL_I2C_End_Transmission+0xc>)
   d63ac:	681b      	ldr	r3, [r3, #0]
   d63ae:	69db      	ldr	r3, [r3, #28]
   d63b0:	9301      	str	r3, [sp, #4]
   d63b2:	bd08      	pop	{r3, pc}
   d63b4:	00030228 	.word	0x00030228

000d63b8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d63b8:	b508      	push	{r3, lr}
   d63ba:	4b02      	ldr	r3, [pc, #8]	; (d63c4 <HAL_I2C_Write_Data+0xc>)
   d63bc:	681b      	ldr	r3, [r3, #0]
   d63be:	6a1b      	ldr	r3, [r3, #32]
   d63c0:	9301      	str	r3, [sp, #4]
   d63c2:	bd08      	pop	{r3, pc}
   d63c4:	00030228 	.word	0x00030228

000d63c8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d63c8:	b508      	push	{r3, lr}
   d63ca:	4b02      	ldr	r3, [pc, #8]	; (d63d4 <HAL_I2C_Available_Data+0xc>)
   d63cc:	681b      	ldr	r3, [r3, #0]
   d63ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d63d0:	9301      	str	r3, [sp, #4]
   d63d2:	bd08      	pop	{r3, pc}
   d63d4:	00030228 	.word	0x00030228

000d63d8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d63d8:	b508      	push	{r3, lr}
   d63da:	4b02      	ldr	r3, [pc, #8]	; (d63e4 <HAL_I2C_Read_Data+0xc>)
   d63dc:	681b      	ldr	r3, [r3, #0]
   d63de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d63e0:	9301      	str	r3, [sp, #4]
   d63e2:	bd08      	pop	{r3, pc}
   d63e4:	00030228 	.word	0x00030228

000d63e8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d63e8:	b508      	push	{r3, lr}
   d63ea:	4b02      	ldr	r3, [pc, #8]	; (d63f4 <HAL_I2C_Peek_Data+0xc>)
   d63ec:	681b      	ldr	r3, [r3, #0]
   d63ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63f0:	9301      	str	r3, [sp, #4]
   d63f2:	bd08      	pop	{r3, pc}
   d63f4:	00030228 	.word	0x00030228

000d63f8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d63f8:	b508      	push	{r3, lr}
   d63fa:	4b02      	ldr	r3, [pc, #8]	; (d6404 <HAL_I2C_Flush_Data+0xc>)
   d63fc:	681b      	ldr	r3, [r3, #0]
   d63fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6400:	9301      	str	r3, [sp, #4]
   d6402:	bd08      	pop	{r3, pc}
   d6404:	00030228 	.word	0x00030228

000d6408 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6408:	b508      	push	{r3, lr}
   d640a:	4b02      	ldr	r3, [pc, #8]	; (d6414 <HAL_I2C_Is_Enabled+0xc>)
   d640c:	681b      	ldr	r3, [r3, #0]
   d640e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6410:	9301      	str	r3, [sp, #4]
   d6412:	bd08      	pop	{r3, pc}
   d6414:	00030228 	.word	0x00030228

000d6418 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6418:	b508      	push	{r3, lr}
   d641a:	4b02      	ldr	r3, [pc, #8]	; (d6424 <HAL_I2C_Init+0xc>)
   d641c:	681b      	ldr	r3, [r3, #0]
   d641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6420:	9301      	str	r3, [sp, #4]
   d6422:	bd08      	pop	{r3, pc}
   d6424:	00030228 	.word	0x00030228

000d6428 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d6428:	b508      	push	{r3, lr}
   d642a:	4b02      	ldr	r3, [pc, #8]	; (d6434 <HAL_I2C_Request_Data_Ex+0xc>)
   d642c:	681b      	ldr	r3, [r3, #0]
   d642e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6430:	9301      	str	r3, [sp, #4]
   d6432:	bd08      	pop	{r3, pc}
   d6434:	00030228 	.word	0x00030228

000d6438 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6438:	b508      	push	{r3, lr}
   d643a:	4b02      	ldr	r3, [pc, #8]	; (d6444 <sock_setsockopt+0xc>)
   d643c:	681b      	ldr	r3, [r3, #0]
   d643e:	699b      	ldr	r3, [r3, #24]
   d6440:	9301      	str	r3, [sp, #4]
   d6442:	bd08      	pop	{r3, pc}
   d6444:	00030238 	.word	0x00030238

000d6448 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6448:	b508      	push	{r3, lr}
   d644a:	4b02      	ldr	r3, [pc, #8]	; (d6454 <sock_close+0xc>)
   d644c:	681b      	ldr	r3, [r3, #0]
   d644e:	69db      	ldr	r3, [r3, #28]
   d6450:	9301      	str	r3, [sp, #4]
   d6452:	bd08      	pop	{r3, pc}
   d6454:	00030238 	.word	0x00030238

000d6458 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6458:	b508      	push	{r3, lr}
   d645a:	4b02      	ldr	r3, [pc, #8]	; (d6464 <sock_connect+0xc>)
   d645c:	681b      	ldr	r3, [r3, #0]
   d645e:	6a1b      	ldr	r3, [r3, #32]
   d6460:	9301      	str	r3, [sp, #4]
   d6462:	bd08      	pop	{r3, pc}
   d6464:	00030238 	.word	0x00030238

000d6468 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6468:	b508      	push	{r3, lr}
   d646a:	4b02      	ldr	r3, [pc, #8]	; (d6474 <sock_recv+0xc>)
   d646c:	681b      	ldr	r3, [r3, #0]
   d646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6470:	9301      	str	r3, [sp, #4]
   d6472:	bd08      	pop	{r3, pc}
   d6474:	00030238 	.word	0x00030238

000d6478 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6478:	b508      	push	{r3, lr}
   d647a:	4b02      	ldr	r3, [pc, #8]	; (d6484 <sock_send+0xc>)
   d647c:	681b      	ldr	r3, [r3, #0]
   d647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6480:	9301      	str	r3, [sp, #4]
   d6482:	bd08      	pop	{r3, pc}
   d6484:	00030238 	.word	0x00030238

000d6488 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6488:	b508      	push	{r3, lr}
   d648a:	4b02      	ldr	r3, [pc, #8]	; (d6494 <sock_socket+0xc>)
   d648c:	681b      	ldr	r3, [r3, #0]
   d648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6490:	9301      	str	r3, [sp, #4]
   d6492:	bd08      	pop	{r3, pc}
   d6494:	00030238 	.word	0x00030238

000d6498 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6498:	b508      	push	{r3, lr}
   d649a:	4b02      	ldr	r3, [pc, #8]	; (d64a4 <HAL_USB_USART_Init+0xc>)
   d649c:	681b      	ldr	r3, [r3, #0]
   d649e:	681b      	ldr	r3, [r3, #0]
   d64a0:	9301      	str	r3, [sp, #4]
   d64a2:	bd08      	pop	{r3, pc}
   d64a4:	0003024c 	.word	0x0003024c

000d64a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d64a8:	b508      	push	{r3, lr}
   d64aa:	4b02      	ldr	r3, [pc, #8]	; (d64b4 <HAL_USB_USART_Begin+0xc>)
   d64ac:	681b      	ldr	r3, [r3, #0]
   d64ae:	685b      	ldr	r3, [r3, #4]
   d64b0:	9301      	str	r3, [sp, #4]
   d64b2:	bd08      	pop	{r3, pc}
   d64b4:	0003024c 	.word	0x0003024c

000d64b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d64b8:	b508      	push	{r3, lr}
   d64ba:	4b02      	ldr	r3, [pc, #8]	; (d64c4 <HAL_USB_USART_Available_Data+0xc>)
   d64bc:	681b      	ldr	r3, [r3, #0]
   d64be:	691b      	ldr	r3, [r3, #16]
   d64c0:	9301      	str	r3, [sp, #4]
   d64c2:	bd08      	pop	{r3, pc}
   d64c4:	0003024c 	.word	0x0003024c

000d64c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d64c8:	b508      	push	{r3, lr}
   d64ca:	4b02      	ldr	r3, [pc, #8]	; (d64d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d64cc:	681b      	ldr	r3, [r3, #0]
   d64ce:	695b      	ldr	r3, [r3, #20]
   d64d0:	9301      	str	r3, [sp, #4]
   d64d2:	bd08      	pop	{r3, pc}
   d64d4:	0003024c 	.word	0x0003024c

000d64d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d64d8:	b508      	push	{r3, lr}
   d64da:	4b02      	ldr	r3, [pc, #8]	; (d64e4 <HAL_USB_USART_Receive_Data+0xc>)
   d64dc:	681b      	ldr	r3, [r3, #0]
   d64de:	699b      	ldr	r3, [r3, #24]
   d64e0:	9301      	str	r3, [sp, #4]
   d64e2:	bd08      	pop	{r3, pc}
   d64e4:	0003024c 	.word	0x0003024c

000d64e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d64e8:	b508      	push	{r3, lr}
   d64ea:	4b02      	ldr	r3, [pc, #8]	; (d64f4 <HAL_USB_USART_Send_Data+0xc>)
   d64ec:	681b      	ldr	r3, [r3, #0]
   d64ee:	69db      	ldr	r3, [r3, #28]
   d64f0:	9301      	str	r3, [sp, #4]
   d64f2:	bd08      	pop	{r3, pc}
   d64f4:	0003024c 	.word	0x0003024c

000d64f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d64f8:	b508      	push	{r3, lr}
   d64fa:	4b02      	ldr	r3, [pc, #8]	; (d6504 <HAL_USB_USART_Flush_Data+0xc>)
   d64fc:	681b      	ldr	r3, [r3, #0]
   d64fe:	6a1b      	ldr	r3, [r3, #32]
   d6500:	9301      	str	r3, [sp, #4]
   d6502:	bd08      	pop	{r3, pc}
   d6504:	0003024c 	.word	0x0003024c

000d6508 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6508:	b508      	push	{r3, lr}
   d650a:	4b02      	ldr	r3, [pc, #8]	; (d6514 <panic_+0xc>)
   d650c:	681b      	ldr	r3, [r3, #0]
   d650e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6510:	9301      	str	r3, [sp, #4]
   d6512:	bd08      	pop	{r3, pc}
   d6514:	00030260 	.word	0x00030260

000d6518 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6518:	b508      	push	{r3, lr}
   d651a:	4b02      	ldr	r3, [pc, #8]	; (d6524 <log_message+0xc>)
   d651c:	681b      	ldr	r3, [r3, #0]
   d651e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6520:	9301      	str	r3, [sp, #4]
   d6522:	bd08      	pop	{r3, pc}
   d6524:	00030260 	.word	0x00030260

000d6528 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6528:	b508      	push	{r3, lr}
   d652a:	4b02      	ldr	r3, [pc, #8]	; (d6534 <set_system_mode+0xc>)
   d652c:	681b      	ldr	r3, [r3, #0]
   d652e:	685b      	ldr	r3, [r3, #4]
   d6530:	9301      	str	r3, [sp, #4]
   d6532:	bd08      	pop	{r3, pc}
   d6534:	00030220 	.word	0x00030220

000d6538 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6538:	b508      	push	{r3, lr}
   d653a:	4b02      	ldr	r3, [pc, #8]	; (d6544 <system_delay_ms+0xc>)
   d653c:	681b      	ldr	r3, [r3, #0]
   d653e:	695b      	ldr	r3, [r3, #20]
   d6540:	9301      	str	r3, [sp, #4]
   d6542:	bd08      	pop	{r3, pc}
   d6544:	00030220 	.word	0x00030220

000d6548 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6548:	b508      	push	{r3, lr}
   d654a:	4b03      	ldr	r3, [pc, #12]	; (d6558 <system_ctrl_set_app_request_handler+0x10>)
   d654c:	681b      	ldr	r3, [r3, #0]
   d654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6552:	9301      	str	r3, [sp, #4]
   d6554:	bd08      	pop	{r3, pc}
   d6556:	0000      	.short	0x0000
   d6558:	00030220 	.word	0x00030220

000d655c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d655c:	b508      	push	{r3, lr}
   d655e:	4b03      	ldr	r3, [pc, #12]	; (d656c <system_ctrl_set_result+0x10>)
   d6560:	681b      	ldr	r3, [r3, #0]
   d6562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6566:	9301      	str	r3, [sp, #4]
   d6568:	bd08      	pop	{r3, pc}
   d656a:	0000      	.short	0x0000
   d656c:	00030220 	.word	0x00030220

000d6570 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6570:	b508      	push	{r3, lr}
   d6572:	4b02      	ldr	r3, [pc, #8]	; (d657c <network_connect+0xc>)
   d6574:	681b      	ldr	r3, [r3, #0]
   d6576:	685b      	ldr	r3, [r3, #4]
   d6578:	9301      	str	r3, [sp, #4]
   d657a:	bd08      	pop	{r3, pc}
   d657c:	00030240 	.word	0x00030240

000d6580 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6580:	b508      	push	{r3, lr}
   d6582:	4b02      	ldr	r3, [pc, #8]	; (d658c <network_connecting+0xc>)
   d6584:	681b      	ldr	r3, [r3, #0]
   d6586:	689b      	ldr	r3, [r3, #8]
   d6588:	9301      	str	r3, [sp, #4]
   d658a:	bd08      	pop	{r3, pc}
   d658c:	00030240 	.word	0x00030240

000d6590 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6590:	b508      	push	{r3, lr}
   d6592:	4b02      	ldr	r3, [pc, #8]	; (d659c <network_disconnect+0xc>)
   d6594:	681b      	ldr	r3, [r3, #0]
   d6596:	68db      	ldr	r3, [r3, #12]
   d6598:	9301      	str	r3, [sp, #4]
   d659a:	bd08      	pop	{r3, pc}
   d659c:	00030240 	.word	0x00030240

000d65a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d65a0:	b508      	push	{r3, lr}
   d65a2:	4b02      	ldr	r3, [pc, #8]	; (d65ac <network_ready+0xc>)
   d65a4:	681b      	ldr	r3, [r3, #0]
   d65a6:	691b      	ldr	r3, [r3, #16]
   d65a8:	9301      	str	r3, [sp, #4]
   d65aa:	bd08      	pop	{r3, pc}
   d65ac:	00030240 	.word	0x00030240

000d65b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d65b0:	b508      	push	{r3, lr}
   d65b2:	4b02      	ldr	r3, [pc, #8]	; (d65bc <network_on+0xc>)
   d65b4:	681b      	ldr	r3, [r3, #0]
   d65b6:	695b      	ldr	r3, [r3, #20]
   d65b8:	9301      	str	r3, [sp, #4]
   d65ba:	bd08      	pop	{r3, pc}
   d65bc:	00030240 	.word	0x00030240

000d65c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d65c0:	b508      	push	{r3, lr}
   d65c2:	4b02      	ldr	r3, [pc, #8]	; (d65cc <network_off+0xc>)
   d65c4:	681b      	ldr	r3, [r3, #0]
   d65c6:	699b      	ldr	r3, [r3, #24]
   d65c8:	9301      	str	r3, [sp, #4]
   d65ca:	bd08      	pop	{r3, pc}
   d65cc:	00030240 	.word	0x00030240

000d65d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d65d0:	b508      	push	{r3, lr}
   d65d2:	4b02      	ldr	r3, [pc, #8]	; (d65dc <network_listen+0xc>)
   d65d4:	681b      	ldr	r3, [r3, #0]
   d65d6:	69db      	ldr	r3, [r3, #28]
   d65d8:	9301      	str	r3, [sp, #4]
   d65da:	bd08      	pop	{r3, pc}
   d65dc:	00030240 	.word	0x00030240

000d65e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d65e0:	b508      	push	{r3, lr}
   d65e2:	4b02      	ldr	r3, [pc, #8]	; (d65ec <network_listening+0xc>)
   d65e4:	681b      	ldr	r3, [r3, #0]
   d65e6:	6a1b      	ldr	r3, [r3, #32]
   d65e8:	9301      	str	r3, [sp, #4]
   d65ea:	bd08      	pop	{r3, pc}
   d65ec:	00030240 	.word	0x00030240

000d65f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d65f0:	b508      	push	{r3, lr}
   d65f2:	4b02      	ldr	r3, [pc, #8]	; (d65fc <network_set_listen_timeout+0xc>)
   d65f4:	681b      	ldr	r3, [r3, #0]
   d65f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d65f8:	9301      	str	r3, [sp, #4]
   d65fa:	bd08      	pop	{r3, pc}
   d65fc:	00030240 	.word	0x00030240

000d6600 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6600:	b508      	push	{r3, lr}
   d6602:	4b02      	ldr	r3, [pc, #8]	; (d660c <network_get_listen_timeout+0xc>)
   d6604:	681b      	ldr	r3, [r3, #0]
   d6606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6608:	9301      	str	r3, [sp, #4]
   d660a:	bd08      	pop	{r3, pc}
   d660c:	00030240 	.word	0x00030240

000d6610 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6610:	b508      	push	{r3, lr}
   d6612:	4b02      	ldr	r3, [pc, #8]	; (d661c <spark_process+0xc>)
   d6614:	681b      	ldr	r3, [r3, #0]
   d6616:	689b      	ldr	r3, [r3, #8]
   d6618:	9301      	str	r3, [sp, #4]
   d661a:	bd08      	pop	{r3, pc}
   d661c:	00030244 	.word	0x00030244

000d6620 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6620:	b508      	push	{r3, lr}
   d6622:	4b02      	ldr	r3, [pc, #8]	; (d662c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6624:	681b      	ldr	r3, [r3, #0]
   d6626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6628:	9301      	str	r3, [sp, #4]
   d662a:	bd08      	pop	{r3, pc}
   d662c:	00030244 	.word	0x00030244

000d6630 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6630:	b508      	push	{r3, lr}
   d6632:	4b02      	ldr	r3, [pc, #8]	; (d663c <malloc+0xc>)
   d6634:	681b      	ldr	r3, [r3, #0]
   d6636:	681b      	ldr	r3, [r3, #0]
   d6638:	9301      	str	r3, [sp, #4]
   d663a:	bd08      	pop	{r3, pc}
   d663c:	0003021c 	.word	0x0003021c

000d6640 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6640:	b508      	push	{r3, lr}
   d6642:	4b02      	ldr	r3, [pc, #8]	; (d664c <free+0xc>)
   d6644:	681b      	ldr	r3, [r3, #0]
   d6646:	685b      	ldr	r3, [r3, #4]
   d6648:	9301      	str	r3, [sp, #4]
   d664a:	bd08      	pop	{r3, pc}
   d664c:	0003021c 	.word	0x0003021c

000d6650 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6650:	b508      	push	{r3, lr}
   d6652:	4b02      	ldr	r3, [pc, #8]	; (d665c <vsnprintf+0xc>)
   d6654:	681b      	ldr	r3, [r3, #0]
   d6656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6658:	9301      	str	r3, [sp, #4]
   d665a:	bd08      	pop	{r3, pc}
   d665c:	0003021c 	.word	0x0003021c

000d6660 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6660:	b508      	push	{r3, lr}
   d6662:	4b02      	ldr	r3, [pc, #8]	; (d666c <__errno+0xc>)
   d6664:	681b      	ldr	r3, [r3, #0]
   d6666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6668:	9301      	str	r3, [sp, #4]
   d666a:	bd08      	pop	{r3, pc}
   d666c:	0003021c 	.word	0x0003021c

000d6670 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6670:	2200      	movs	r2, #0
   d6672:	4611      	mov	r1, r2
   d6674:	6840      	ldr	r0, [r0, #4]
   d6676:	f7ff bfb3 	b.w	d65e0 <network_listening>

000d667a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d667a:	2200      	movs	r2, #0
   d667c:	4611      	mov	r1, r2
   d667e:	6840      	ldr	r0, [r0, #4]
   d6680:	f7ff bfbe 	b.w	d6600 <network_get_listen_timeout>

000d6684 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6684:	2200      	movs	r2, #0
   d6686:	6840      	ldr	r0, [r0, #4]
   d6688:	f7ff bfb2 	b.w	d65f0 <network_set_listen_timeout>

000d668c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d668c:	2200      	movs	r2, #0
   d668e:	f081 0101 	eor.w	r1, r1, #1
   d6692:	6840      	ldr	r0, [r0, #4]
   d6694:	f7ff bf9c 	b.w	d65d0 <network_listen>

000d6698 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6698:	2300      	movs	r3, #0
   d669a:	461a      	mov	r2, r3
   d669c:	4619      	mov	r1, r3
   d669e:	6840      	ldr	r0, [r0, #4]
   d66a0:	f7ff bf8e 	b.w	d65c0 <network_off>

000d66a4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d66a4:	2300      	movs	r3, #0
   d66a6:	461a      	mov	r2, r3
   d66a8:	4619      	mov	r1, r3
   d66aa:	6840      	ldr	r0, [r0, #4]
   d66ac:	f7ff bf80 	b.w	d65b0 <network_on>

000d66b0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d66b0:	2200      	movs	r2, #0
   d66b2:	4611      	mov	r1, r2
   d66b4:	6840      	ldr	r0, [r0, #4]
   d66b6:	f7ff bf73 	b.w	d65a0 <network_ready>

000d66ba <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d66ba:	2200      	movs	r2, #0
   d66bc:	4611      	mov	r1, r2
   d66be:	6840      	ldr	r0, [r0, #4]
   d66c0:	f7ff bf5e 	b.w	d6580 <network_connecting>

000d66c4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d66c4:	2200      	movs	r2, #0
   d66c6:	2102      	movs	r1, #2
   d66c8:	6840      	ldr	r0, [r0, #4]
   d66ca:	f7ff bf61 	b.w	d6590 <network_disconnect>

000d66ce <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d66ce:	2300      	movs	r3, #0
   d66d0:	461a      	mov	r2, r3
   d66d2:	6840      	ldr	r0, [r0, #4]
   d66d4:	f7ff bf4c 	b.w	d6570 <network_connect>

000d66d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d66d8:	4b02      	ldr	r3, [pc, #8]	; (d66e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d66da:	2203      	movs	r2, #3
   d66dc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d66de:	4a02      	ldr	r2, [pc, #8]	; (d66e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d66e0:	601a      	str	r2, [r3, #0]
   d66e2:	4770      	bx	lr
   d66e4:	2003e3dc 	.word	0x2003e3dc
   d66e8:	000d836c 	.word	0x000d836c

000d66ec <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d66ec:	2100      	movs	r1, #0
   d66ee:	f7ff bd8b 	b.w	d6208 <HAL_SPI_Acquire>

000d66f2 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d66f2:	2100      	movs	r1, #0
   d66f4:	f7ff bd90 	b.w	d6218 <HAL_SPI_Release>

000d66f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d66f8:	b510      	push	{r4, lr}
   d66fa:	4604      	mov	r4, r0
{
    _spi = spi;
   d66fc:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d66fe:	4608      	mov	r0, r1
   d6700:	f7ff fd52 	bl	d61a8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6704:	2300      	movs	r3, #0
   d6706:	6063      	str	r3, [r4, #4]
}
   d6708:	4620      	mov	r0, r4
   d670a:	bd10      	pop	{r4, pc}

000d670c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d670c:	b510      	push	{r4, lr}
   d670e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6710:	7800      	ldrb	r0, [r0, #0]
   d6712:	f7ff ffeb 	bl	d66ec <_ZN8SPIClass4lockEv.isra.0>
   d6716:	b948      	cbnz	r0, d672c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6718:	7820      	ldrb	r0, [r4, #0]
   d671a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d671e:	f7ff fd33 	bl	d6188 <HAL_SPI_Begin>
        unlock();
   d6722:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6728:	f7ff bfe3 	b.w	d66f2 <_ZN8SPIClass6unlockEv.isra.1>
   d672c:	bd10      	pop	{r4, pc}

000d672e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d672e:	7800      	ldrb	r0, [r0, #0]
   d6730:	f7ff bfdf 	b.w	d66f2 <_ZN8SPIClass6unlockEv.isra.1>

000d6734 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6734:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6736:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6738:	6018      	str	r0, [r3, #0]
   d673a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d673c:	6818      	ldr	r0, [r3, #0]
   d673e:	4288      	cmp	r0, r1
   d6740:	b2e5      	uxtb	r5, r4
   d6742:	d906      	bls.n	d6752 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6744:	3401      	adds	r4, #1
   d6746:	2c08      	cmp	r4, #8
   d6748:	d002      	beq.n	d6750 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d674a:	0840      	lsrs	r0, r0, #1
   d674c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d674e:	e7f5      	b.n	d673c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6750:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6752:	4b02      	ldr	r3, [pc, #8]	; (d675c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6754:	5d5b      	ldrb	r3, [r3, r5]
   d6756:	7013      	strb	r3, [r2, #0]
   d6758:	bd30      	pop	{r4, r5, pc}
   d675a:	bf00      	nop
   d675c:	000d8398 	.word	0x000d8398

000d6760 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6764:	4607      	mov	r7, r0
   d6766:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6768:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d676a:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d676c:	f7ff ffbe 	bl	d66ec <_ZN8SPIClass4lockEv.isra.0>
   d6770:	2800      	cmp	r0, #0
   d6772:	db62      	blt.n	d683a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6774:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6776:	2214      	movs	r2, #20
   d6778:	2100      	movs	r1, #0
   d677a:	a809      	add	r0, sp, #36	; 0x24
   d677c:	f001 facb 	bl	d7d16 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6780:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6782:	4620      	mov	r0, r4
   d6784:	2200      	movs	r2, #0
   d6786:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6788:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d678c:	f7ff fd1c 	bl	d61c8 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6790:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6794:	b154      	cbz	r4, d67ac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d6796:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d679a:	b935      	cbnz	r5, d67aa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d679c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d67a0:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d67a4:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d67a8:	e003      	b.n	d67b2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d67aa:	2400      	movs	r4, #0
   d67ac:	46a1      	mov	r9, r4
   d67ae:	46a0      	mov	r8, r4
   d67b0:	2501      	movs	r5, #1
   d67b2:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d67b4:	b105      	cbz	r5, d67b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d67b6:	b9bb      	cbnz	r3, d67e8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d67b8:	429d      	cmp	r5, r3
   d67ba:	d10b      	bne.n	d67d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d67bc:	68b2      	ldr	r2, [r6, #8]
   d67be:	4542      	cmp	r2, r8
   d67c0:	d108      	bne.n	d67d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d67c2:	f88d 9020 	strb.w	r9, [sp, #32]
   d67c6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d67ca:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d67ce:	89b2      	ldrh	r2, [r6, #12]
   d67d0:	4291      	cmp	r1, r2
   d67d2:	d009      	beq.n	d67e8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d67d4:	b153      	cbz	r3, d67ec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d67d6:	2400      	movs	r4, #0
   d67d8:	7838      	ldrb	r0, [r7, #0]
   d67da:	9401      	str	r4, [sp, #4]
   d67dc:	9400      	str	r4, [sp, #0]
   d67de:	4623      	mov	r3, r4
   d67e0:	4622      	mov	r2, r4
   d67e2:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d67e4:	f7ff fd08 	bl	d61f8 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d67e8:	2000      	movs	r0, #0
   d67ea:	e026      	b.n	d683a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d67ec:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d67f0:	68b1      	ldr	r1, [r6, #8]
   d67f2:	980a      	ldr	r0, [sp, #40]	; 0x28
   d67f4:	ab04      	add	r3, sp, #16
   d67f6:	f10d 020f 	add.w	r2, sp, #15
   d67fa:	f7ff ff9b 	bl	d6734 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d67fe:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6800:	b105      	cbz	r5, d6804 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6802:	b9b1      	cbnz	r1, d6832 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6804:	42a9      	cmp	r1, r5
   d6806:	d008      	beq.n	d681a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6808:	2400      	movs	r4, #0
   d680a:	7838      	ldrb	r0, [r7, #0]
   d680c:	9401      	str	r4, [sp, #4]
   d680e:	7b74      	ldrb	r4, [r6, #13]
   d6810:	7b33      	ldrb	r3, [r6, #12]
   d6812:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6816:	9400      	str	r4, [sp, #0]
   d6818:	e7e4      	b.n	d67e4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d681a:	68b3      	ldr	r3, [r6, #8]
   d681c:	4543      	cmp	r3, r8
   d681e:	d3f3      	bcc.n	d6808 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6820:	f88d 9020 	strb.w	r9, [sp, #32]
   d6824:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6828:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d682c:	89b3      	ldrh	r3, [r6, #12]
   d682e:	429a      	cmp	r2, r3
   d6830:	d1ea      	bne.n	d6808 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6832:	9b04      	ldr	r3, [sp, #16]
   d6834:	4543      	cmp	r3, r8
   d6836:	d1e7      	bne.n	d6808 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6838:	e7d6      	b.n	d67e8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d683a:	b00f      	add	sp, #60	; 0x3c
   d683c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6840 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6840:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6842:	7800      	ldrb	r0, [r0, #0]
   d6844:	f7ff fca8 	bl	d6198 <HAL_SPI_Send_Receive_Data>
}
   d6848:	b2c0      	uxtb	r0, r0
   d684a:	bd08      	pop	{r3, pc}

000d684c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d684c:	b530      	push	{r4, r5, lr}
   d684e:	b087      	sub	sp, #28
   d6850:	4604      	mov	r4, r0
   d6852:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d6854:	7800      	ldrb	r0, [r0, #0]
   d6856:	9500      	str	r5, [sp, #0]
   d6858:	f7ff fcbe 	bl	d61d8 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d685c:	b93d      	cbnz	r5, d686e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d685e:	a902      	add	r1, sp, #8
   d6860:	7820      	ldrb	r0, [r4, #0]
   d6862:	f7ff fcc1 	bl	d61e8 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d6866:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d686a:	07db      	lsls	r3, r3, #31
   d686c:	d4f7      	bmi.n	d685e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d686e:	b007      	add	sp, #28
   d6870:	bd30      	pop	{r4, r5, pc}

000d6872 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6872:	7800      	ldrb	r0, [r0, #0]
   d6874:	f7ff bca0 	b.w	d61b8 <HAL_SPI_Is_Enabled>

000d6878 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6878:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d687a:	4c09      	ldr	r4, [pc, #36]	; (d68a0 <_GLOBAL__sub_I_System+0x28>)
   d687c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d687e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6882:	6020      	str	r0, [r4, #0]
   d6884:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6886:	71a0      	strb	r0, [r4, #6]
   d6888:	8120      	strh	r0, [r4, #8]
   d688a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d688c:	f7ff fe4c 	bl	d6528 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6890:	4620      	mov	r0, r4
   d6892:	4a04      	ldr	r2, [pc, #16]	; (d68a4 <_GLOBAL__sub_I_System+0x2c>)
   d6894:	4904      	ldr	r1, [pc, #16]	; (d68a8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d689a:	f001 b8b9 	b.w	d7a10 <__aeabi_atexit>
   d689e:	bf00      	nop
   d68a0:	2003e3e4 	.word	0x2003e3e4
   d68a4:	2003dd08 	.word	0x2003dd08
   d68a8:	000d4199 	.word	0x000d4199

000d68ac <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d68ac:	b510      	push	{r4, lr}
   d68ae:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d68b0:	6800      	ldr	r0, [r0, #0]
   d68b2:	b108      	cbz	r0, d68b8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d68b4:	f7ff fd00 	bl	d62b8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d68b8:	4620      	mov	r0, r4
   d68ba:	bd10      	pop	{r4, pc}

000d68bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d68bc:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d68be:	4c06      	ldr	r4, [pc, #24]	; (d68d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d68c0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d68c2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d68c4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d68c6:	f7ff fcef 	bl	d62a8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d68ca:	4620      	mov	r0, r4
   d68cc:	4a03      	ldr	r2, [pc, #12]	; (d68dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d68ce:	4904      	ldr	r1, [pc, #16]	; (d68e0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d68d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d68d4:	f001 b89c 	b.w	d7a10 <__aeabi_atexit>
   d68d8:	2003e3f0 	.word	0x2003e3f0
   d68dc:	2003dd08 	.word	0x2003dd08
   d68e0:	000d68ad 	.word	0x000d68ad

000d68e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d68e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68e6:	4606      	mov	r6, r0
   d68e8:	460d      	mov	r5, r1
   d68ea:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d68ec:	2400      	movs	r4, #0
  while (size--) {
   d68ee:	42bd      	cmp	r5, r7
   d68f0:	d00c      	beq.n	d690c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d68f2:	6833      	ldr	r3, [r6, #0]
   d68f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d68f8:	689b      	ldr	r3, [r3, #8]
   d68fa:	4630      	mov	r0, r6
   d68fc:	4798      	blx	r3
     if (chunk>=0)
   d68fe:	2800      	cmp	r0, #0
   d6900:	db01      	blt.n	d6906 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6902:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6904:	e7f3      	b.n	d68ee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6906:	2c00      	cmp	r4, #0
   d6908:	bf08      	it	eq
   d690a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d690c:	4620      	mov	r0, r4
   d690e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6910 <_ZN5Print5printEPKc>:
   d6910:	b508      	push	{r3, lr}
   d6912:	f7fe fdff 	bl	d5514 <_ZN5Print5writeEPKc>
   d6916:	bd08      	pop	{r3, pc}

000d6918 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6918:	6803      	ldr	r3, [r0, #0]
   d691a:	689b      	ldr	r3, [r3, #8]
   d691c:	4718      	bx	r3

000d691e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d691e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6920:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6922:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6924:	f7ff fff8 	bl	d6918 <_ZN5Print5printEc>
  n += print('\n');
   d6928:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d692a:	4604      	mov	r4, r0
  n += print('\n');
   d692c:	4628      	mov	r0, r5
   d692e:	f7ff fff3 	bl	d6918 <_ZN5Print5printEc>
  return n;
}
   d6932:	4420      	add	r0, r4
   d6934:	bd38      	pop	{r3, r4, r5, pc}

000d6936 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6936:	b538      	push	{r3, r4, r5, lr}
   d6938:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d693a:	f7fe fdeb 	bl	d5514 <_ZN5Print5writeEPKc>
   d693e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6940:	4628      	mov	r0, r5
   d6942:	f7ff ffec 	bl	d691e <_ZN5Print7printlnEv>
  return n;
}
   d6946:	4420      	add	r0, r4
   d6948:	bd38      	pop	{r3, r4, r5, pc}

000d694a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d694a:	b530      	push	{r4, r5, lr}
   d694c:	b08b      	sub	sp, #44	; 0x2c
   d694e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6950:	2100      	movs	r1, #0
   d6952:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6956:	2a01      	cmp	r2, #1
   d6958:	bf98      	it	ls
   d695a:	220a      	movls	r2, #10
   d695c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6960:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6964:	fb05 3312 	mls	r3, r5, r2, r3
   d6968:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d696c:	2b09      	cmp	r3, #9
   d696e:	bf94      	ite	ls
   d6970:	3330      	addls	r3, #48	; 0x30
   d6972:	3337      	addhi	r3, #55	; 0x37
   d6974:	b2db      	uxtb	r3, r3
   d6976:	4621      	mov	r1, r4
   d6978:	f804 3901 	strb.w	r3, [r4], #-1
   d697c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d697e:	2d00      	cmp	r5, #0
   d6980:	d1ee      	bne.n	d6960 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6982:	f7fe fdc7 	bl	d5514 <_ZN5Print5writeEPKc>
}
   d6986:	b00b      	add	sp, #44	; 0x2c
   d6988:	bd30      	pop	{r4, r5, pc}

000d698a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d698a:	b40c      	push	{r2, r3}
   d698c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6990:	b087      	sub	sp, #28
   d6992:	af00      	add	r7, sp, #0
   d6994:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6998:	4605      	mov	r5, r0
   d699a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d699e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d69a0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d69a2:	4623      	mov	r3, r4
   d69a4:	464a      	mov	r2, r9
   d69a6:	2114      	movs	r1, #20
   d69a8:	1d38      	adds	r0, r7, #4
   d69aa:	f7ff fe51 	bl	d6650 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d69ae:	2813      	cmp	r0, #19
   d69b0:	d805      	bhi.n	d69be <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d69b2:	1d39      	adds	r1, r7, #4
   d69b4:	4628      	mov	r0, r5
   d69b6:	f7fe fdad 	bl	d5514 <_ZN5Print5writeEPKc>
   d69ba:	4604      	mov	r4, r0
   d69bc:	e013      	b.n	d69e6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d69be:	f100 0308 	add.w	r3, r0, #8
   d69c2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d69c6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d69c8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d69cc:	1c41      	adds	r1, r0, #1
   d69ce:	4623      	mov	r3, r4
   d69d0:	464a      	mov	r2, r9
   d69d2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d69d4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d69d6:	f7ff fe3b 	bl	d6650 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d69da:	4669      	mov	r1, sp
   d69dc:	4628      	mov	r0, r5
   d69de:	f7fe fd99 	bl	d5514 <_ZN5Print5writeEPKc>
   d69e2:	4604      	mov	r4, r0
   d69e4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d69e6:	b11e      	cbz	r6, d69f0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d69e8:	4628      	mov	r0, r5
   d69ea:	f7ff ff98 	bl	d691e <_ZN5Print7printlnEv>
   d69ee:	4404      	add	r4, r0
    return n;
}
   d69f0:	4620      	mov	r0, r4
   d69f2:	371c      	adds	r7, #28
   d69f4:	46bd      	mov	sp, r7
   d69f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d69fa:	b002      	add	sp, #8
   d69fc:	4770      	bx	lr
	...

000d6a00 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6a00:	4b01      	ldr	r3, [pc, #4]	; (d6a08 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6a02:	4a02      	ldr	r2, [pc, #8]	; (d6a0c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6a04:	601a      	str	r2, [r3, #0]
   d6a06:	4770      	bx	lr
   d6a08:	2003e3f4 	.word	0x2003e3f4
   d6a0c:	000d8413 	.word	0x000d8413

000d6a10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6a10:	4b02      	ldr	r3, [pc, #8]	; (d6a1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6a12:	681a      	ldr	r2, [r3, #0]
   d6a14:	4b02      	ldr	r3, [pc, #8]	; (d6a20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6a16:	601a      	str	r2, [r3, #0]
   d6a18:	4770      	bx	lr
   d6a1a:	bf00      	nop
   d6a1c:	2003dca0 	.word	0x2003dca0
   d6a20:	2003e3f8 	.word	0x2003e3f8

000d6a24 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6a24:	2100      	movs	r1, #0
   d6a26:	f7ff bd87 	b.w	d6538 <system_delay_ms>

000d6a2a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a2a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6a2c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a2e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6a30:	b113      	cbz	r3, d6a38 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a32:	2203      	movs	r2, #3
   d6a34:	4601      	mov	r1, r0
   d6a36:	4798      	blx	r3
    }
   d6a38:	4620      	mov	r0, r4
   d6a3a:	bd10      	pop	{r4, pc}

000d6a3c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6a3c:	b510      	push	{r4, lr}
   d6a3e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6a40:	f7ff fff3 	bl	d6a2a <_ZNSt14_Function_baseD1Ev>
   d6a44:	4620      	mov	r0, r4
   d6a46:	bd10      	pop	{r4, pc}

000d6a48 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6a48:	4803      	ldr	r0, [pc, #12]	; (d6a58 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6a4a:	4a04      	ldr	r2, [pc, #16]	; (d6a5c <_GLOBAL__sub_I_RGB+0x14>)
   d6a4c:	4904      	ldr	r1, [pc, #16]	; (d6a60 <_GLOBAL__sub_I_RGB+0x18>)
   d6a4e:	2300      	movs	r3, #0
   d6a50:	6083      	str	r3, [r0, #8]
   d6a52:	f000 bfdd 	b.w	d7a10 <__aeabi_atexit>
   d6a56:	bf00      	nop
   d6a58:	2003e3fc 	.word	0x2003e3fc
   d6a5c:	2003dd08 	.word	0x2003dd08
   d6a60:	000d6a3d 	.word	0x000d6a3d

000d6a64 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6a64:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6a66:	4b0c      	ldr	r3, [pc, #48]	; (d6a98 <serialEventRun+0x34>)
   d6a68:	b133      	cbz	r3, d6a78 <serialEventRun+0x14>
   d6a6a:	f000 f96d 	bl	d6d48 <_Z16_fetch_usbserialv>
   d6a6e:	6803      	ldr	r3, [r0, #0]
   d6a70:	691b      	ldr	r3, [r3, #16]
   d6a72:	4798      	blx	r3
   d6a74:	2800      	cmp	r0, #0
   d6a76:	dc09      	bgt.n	d6a8c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6a78:	4b08      	ldr	r3, [pc, #32]	; (d6a9c <serialEventRun+0x38>)
   d6a7a:	b163      	cbz	r3, d6a96 <serialEventRun+0x32>
   d6a7c:	f000 f9ec 	bl	d6e58 <_Z22__fetch_global_Serial1v>
   d6a80:	6803      	ldr	r3, [r0, #0]
   d6a82:	691b      	ldr	r3, [r3, #16]
   d6a84:	4798      	blx	r3
   d6a86:	2800      	cmp	r0, #0
   d6a88:	dc03      	bgt.n	d6a92 <serialEventRun+0x2e>
   d6a8a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6a8c:	f3af 8000 	nop.w
   d6a90:	e7f2      	b.n	d6a78 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6a92:	f3af 8000 	nop.w
   d6a96:	bd08      	pop	{r3, pc}
	...

000d6aa0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6aa0:	b508      	push	{r3, lr}
	serialEventRun();
   d6aa2:	f7ff ffdf 	bl	d6a64 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6aa6:	f7ff fbdf 	bl	d6268 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6aaa:	4b01      	ldr	r3, [pc, #4]	; (d6ab0 <_post_loop+0x10>)
   d6aac:	6018      	str	r0, [r3, #0]
   d6aae:	bd08      	pop	{r3, pc}
   d6ab0:	2003e730 	.word	0x2003e730

000d6ab4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6ab4:	4802      	ldr	r0, [pc, #8]	; (d6ac0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6ab6:	4a03      	ldr	r2, [pc, #12]	; (d6ac4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6ab8:	4903      	ldr	r1, [pc, #12]	; (d6ac8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6aba:	1a12      	subs	r2, r2, r0
   d6abc:	f001 b920 	b.w	d7d00 <memcpy>
   d6ac0:	2003f400 	.word	0x2003f400
   d6ac4:	2003f404 	.word	0x2003f404
   d6ac8:	000d8760 	.word	0x000d8760

000d6acc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6acc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6ace:	2300      	movs	r3, #0
   d6ad0:	9300      	str	r3, [sp, #0]
   d6ad2:	461a      	mov	r2, r3
   d6ad4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ad8:	f7ff fd40 	bl	d655c <system_ctrl_set_result>
}
   d6adc:	b003      	add	sp, #12
   d6ade:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ae4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6ae4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6ae6:	8843      	ldrh	r3, [r0, #2]
   d6ae8:	2b0a      	cmp	r3, #10
   d6aea:	d008      	beq.n	d6afe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6aec:	2b50      	cmp	r3, #80	; 0x50
   d6aee:	d109      	bne.n	d6b04 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6af0:	4b09      	ldr	r3, [pc, #36]	; (d6b18 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6af2:	681b      	ldr	r3, [r3, #0]
   d6af4:	b13b      	cbz	r3, d6b06 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6af6:	b003      	add	sp, #12
   d6af8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6afc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6afe:	f7ff ffe5 	bl	d6acc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6b02:	e006      	b.n	d6b12 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b04:	2300      	movs	r3, #0
   d6b06:	9300      	str	r3, [sp, #0]
   d6b08:	461a      	mov	r2, r3
   d6b0a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b0e:	f7ff fd25 	bl	d655c <system_ctrl_set_result>
        break;
    }
}
   d6b12:	b003      	add	sp, #12
   d6b14:	f85d fb04 	ldr.w	pc, [sp], #4
   d6b18:	2003e40c 	.word	0x2003e40c

000d6b1c <module_user_init_hook>:

void module_user_init_hook()
{
   d6b1c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6b1e:	4c10      	ldr	r4, [pc, #64]	; (d6b60 <module_user_init_hook+0x44>)
   d6b20:	4d10      	ldr	r5, [pc, #64]	; (d6b64 <module_user_init_hook+0x48>)
   d6b22:	6823      	ldr	r3, [r4, #0]
   d6b24:	42ab      	cmp	r3, r5
   d6b26:	4b10      	ldr	r3, [pc, #64]	; (d6b68 <module_user_init_hook+0x4c>)
   d6b28:	bf0c      	ite	eq
   d6b2a:	2201      	moveq	r2, #1
   d6b2c:	2200      	movne	r2, #0
   d6b2e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6b30:	d002      	beq.n	d6b38 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6b32:	f7ff ffbf 	bl	d6ab4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6b36:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6b38:	f7ff fb7e 	bl	d6238 <HAL_RNG_GetRandomNumber>
   d6b3c:	4604      	mov	r4, r0
    srand(seed);
   d6b3e:	f001 f8f3 	bl	d7d28 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6b42:	4b0a      	ldr	r3, [pc, #40]	; (d6b6c <module_user_init_hook+0x50>)
   d6b44:	b113      	cbz	r3, d6b4c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6b46:	4620      	mov	r0, r4
   d6b48:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6b4c:	2100      	movs	r1, #0
   d6b4e:	4807      	ldr	r0, [pc, #28]	; (d6b6c <module_user_init_hook+0x50>)
   d6b50:	f7ff fd66 	bl	d6620 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b54:	2100      	movs	r1, #0
   d6b56:	4806      	ldr	r0, [pc, #24]	; (d6b70 <module_user_init_hook+0x54>)
}
   d6b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b5c:	f7ff bcf4 	b.w	d6548 <system_ctrl_set_app_request_handler>
   d6b60:	2003f400 	.word	0x2003f400
   d6b64:	9a271c1e 	.word	0x9a271c1e
   d6b68:	2003e410 	.word	0x2003e410
   d6b6c:	00000000 	.word	0x00000000
   d6b70:	000d6ae5 	.word	0x000d6ae5

000d6b74 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6b74:	4770      	bx	lr

000d6b76 <_ZN9IPAddressD0Ev>:
   d6b76:	b510      	push	{r4, lr}
   d6b78:	2118      	movs	r1, #24
   d6b7a:	4604      	mov	r4, r0
   d6b7c:	f000 ff56 	bl	d7a2c <_ZdlPvj>
   d6b80:	4620      	mov	r0, r4
   d6b82:	bd10      	pop	{r4, pc}

000d6b84 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b84:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b86:	7d03      	ldrb	r3, [r0, #20]
   d6b88:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b8a:	b08d      	sub	sp, #52	; 0x34
   d6b8c:	460e      	mov	r6, r1
   d6b8e:	f100 0704 	add.w	r7, r0, #4
   d6b92:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b96:	d002      	beq.n	d6b9e <_ZNK9IPAddress7printToER5Print+0x1a>
   d6b98:	f100 0508 	add.w	r5, r0, #8
   d6b9c:	e018      	b.n	d6bd0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b9e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6ba0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6ba2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6ba6:	232f      	movs	r3, #47	; 0x2f
   d6ba8:	462a      	mov	r2, r5
   d6baa:	200a      	movs	r0, #10
   d6bac:	f7ff fb8c 	bl	d62c8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6bb0:	4628      	mov	r0, r5
   d6bb2:	f001 f8e9 	bl	d7d88 <strlen>
   d6bb6:	6833      	ldr	r3, [r6, #0]
   d6bb8:	4602      	mov	r2, r0
   d6bba:	68db      	ldr	r3, [r3, #12]
   d6bbc:	4629      	mov	r1, r5
   d6bbe:	4630      	mov	r0, r6
   d6bc0:	4798      	blx	r3
   d6bc2:	e00f      	b.n	d6be4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6bc4:	b124      	cbz	r4, d6bd0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6bc6:	212e      	movs	r1, #46	; 0x2e
   d6bc8:	4630      	mov	r0, r6
   d6bca:	f7ff fea5 	bl	d6918 <_ZN5Print5printEc>
   d6bce:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6bd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6bd4:	220a      	movs	r2, #10
   d6bd6:	4630      	mov	r0, r6
   d6bd8:	f7ff feb7 	bl	d694a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6bdc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6bde:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6be0:	d1f0      	bne.n	d6bc4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6be2:	4620      	mov	r0, r4
    }
    return n;
}
   d6be4:	b00d      	add	sp, #52	; 0x34
   d6be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6be8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6be8:	b510      	push	{r4, lr}
   d6bea:	4b05      	ldr	r3, [pc, #20]	; (d6c00 <_ZN9IPAddressC1Ev+0x18>)
   d6bec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6bee:	2211      	movs	r2, #17
   d6bf0:	f840 3b04 	str.w	r3, [r0], #4
   d6bf4:	2100      	movs	r1, #0
   d6bf6:	f001 f88e 	bl	d7d16 <memset>
{
    clear();
}
   d6bfa:	4620      	mov	r0, r4
   d6bfc:	bd10      	pop	{r4, pc}
   d6bfe:	bf00      	nop
   d6c00:	000d84a4 	.word	0x000d84a4

000d6c04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6c04:	4603      	mov	r3, r0
   d6c06:	4a07      	ldr	r2, [pc, #28]	; (d6c24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6c08:	b510      	push	{r4, lr}
   d6c0a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6c0e:	f101 0210 	add.w	r2, r1, #16
   d6c12:	f851 4b04 	ldr.w	r4, [r1], #4
   d6c16:	f843 4b04 	str.w	r4, [r3], #4
   d6c1a:	4291      	cmp	r1, r2
   d6c1c:	d1f9      	bne.n	d6c12 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6c1e:	780a      	ldrb	r2, [r1, #0]
   d6c20:	701a      	strb	r2, [r3, #0]
}
   d6c22:	bd10      	pop	{r4, pc}
   d6c24:	000d84a4 	.word	0x000d84a4

000d6c28 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6c28:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6c2a:	2b04      	cmp	r3, #4
   d6c2c:	d101      	bne.n	d6c32 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6c2e:	6840      	ldr	r0, [r0, #4]
   d6c30:	e008      	b.n	d6c44 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6c32:	2b06      	cmp	r3, #6
   d6c34:	d10a      	bne.n	d6c4c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6c36:	6843      	ldr	r3, [r0, #4]
   d6c38:	b953      	cbnz	r3, d6c50 <_ZNK9IPAddresscvbEv+0x28>
   d6c3a:	6883      	ldr	r3, [r0, #8]
   d6c3c:	b943      	cbnz	r3, d6c50 <_ZNK9IPAddresscvbEv+0x28>
   d6c3e:	68c3      	ldr	r3, [r0, #12]
   d6c40:	b933      	cbnz	r3, d6c50 <_ZNK9IPAddresscvbEv+0x28>
   d6c42:	6900      	ldr	r0, [r0, #16]
   d6c44:	3000      	adds	r0, #0
   d6c46:	bf18      	it	ne
   d6c48:	2001      	movne	r0, #1
   d6c4a:	4770      	bx	lr
    } else {
        return false;
   d6c4c:	2000      	movs	r0, #0
   d6c4e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6c50:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d6c52:	4770      	bx	lr

000d6c54 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6c54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6c56:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6c5a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6c5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6c62:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6c66:	2304      	movs	r3, #4
   d6c68:	6041      	str	r1, [r0, #4]
   d6c6a:	7503      	strb	r3, [r0, #20]
   d6c6c:	bd10      	pop	{r4, pc}

000d6c6e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6c6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6c70:	780d      	ldrb	r5, [r1, #0]
   d6c72:	788b      	ldrb	r3, [r1, #2]
   d6c74:	784a      	ldrb	r2, [r1, #1]
   d6c76:	78c9      	ldrb	r1, [r1, #3]
   d6c78:	9100      	str	r1, [sp, #0]
   d6c7a:	4629      	mov	r1, r5
   d6c7c:	f7ff ffea 	bl	d6c54 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6c80:	b003      	add	sp, #12
   d6c82:	bd30      	pop	{r4, r5, pc}

000d6c84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6c84:	7441      	strb	r1, [r0, #17]
   d6c86:	4770      	bx	lr

000d6c88 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6c88:	4770      	bx	lr

000d6c8a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6c8a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6c8c:	2100      	movs	r1, #0
   d6c8e:	7c00      	ldrb	r0, [r0, #16]
   d6c90:	f7ff fc22 	bl	d64d8 <HAL_USB_USART_Receive_Data>
}
   d6c94:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c98:	bf28      	it	cs
   d6c9a:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c9e:	bd08      	pop	{r3, pc}

000d6ca0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6ca0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6ca2:	2101      	movs	r1, #1
   d6ca4:	7c00      	ldrb	r0, [r0, #16]
   d6ca6:	f7ff fc17 	bl	d64d8 <HAL_USB_USART_Receive_Data>
}
   d6caa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6cae:	bf28      	it	cs
   d6cb0:	f04f 30ff 	movcs.w	r0, #4294967295
   d6cb4:	bd08      	pop	{r3, pc}

000d6cb6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6cb6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6cb8:	7c00      	ldrb	r0, [r0, #16]
   d6cba:	f7ff fc05 	bl	d64c8 <HAL_USB_USART_Available_Data_For_Write>
}
   d6cbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6cc2:	bd08      	pop	{r3, pc}

000d6cc4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6cc4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6cc6:	7c00      	ldrb	r0, [r0, #16]
   d6cc8:	f7ff fbf6 	bl	d64b8 <HAL_USB_USART_Available_Data>
}
   d6ccc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6cd0:	bd08      	pop	{r3, pc}

000d6cd2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6cd2:	7c00      	ldrb	r0, [r0, #16]
   d6cd4:	f7ff bc10 	b.w	d64f8 <HAL_USB_USART_Flush_Data>

000d6cd8 <_ZN9USBSerialD0Ev>:
   d6cd8:	b510      	push	{r4, lr}
   d6cda:	2114      	movs	r1, #20
   d6cdc:	4604      	mov	r4, r0
   d6cde:	f000 fea5 	bl	d7a2c <_ZdlPvj>
   d6ce2:	4620      	mov	r0, r4
   d6ce4:	bd10      	pop	{r4, pc}

000d6ce6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6ce6:	b538      	push	{r3, r4, r5, lr}
   d6ce8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6cea:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6cec:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6cee:	f7ff fbeb 	bl	d64c8 <HAL_USB_USART_Available_Data_For_Write>
   d6cf2:	2800      	cmp	r0, #0
   d6cf4:	dc01      	bgt.n	d6cfa <_ZN9USBSerial5writeEh+0x14>
   d6cf6:	7c60      	ldrb	r0, [r4, #17]
   d6cf8:	b128      	cbz	r0, d6d06 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6cfa:	4629      	mov	r1, r5
   d6cfc:	7c20      	ldrb	r0, [r4, #16]
   d6cfe:	f7ff fbf3 	bl	d64e8 <HAL_USB_USART_Send_Data>
   d6d02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6d06:	bd38      	pop	{r3, r4, r5, pc}

000d6d08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d08:	b510      	push	{r4, lr}
   d6d0a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6d0c:	2300      	movs	r3, #0
   d6d0e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d14:	60a3      	str	r3, [r4, #8]
   d6d16:	4b05      	ldr	r3, [pc, #20]	; (d6d2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6d18:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6d1a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d1c:	4608      	mov	r0, r1
{
  _serial = serial;
   d6d1e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6d20:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6d22:	4611      	mov	r1, r2
   d6d24:	f7ff fbb8 	bl	d6498 <HAL_USB_USART_Init>
}
   d6d28:	4620      	mov	r0, r4
   d6d2a:	bd10      	pop	{r4, pc}
   d6d2c:	000d84b8 	.word	0x000d84b8

000d6d30 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6d30:	2200      	movs	r2, #0
   d6d32:	7c00      	ldrb	r0, [r0, #16]
   d6d34:	f7ff bbb8 	b.w	d64a8 <HAL_USB_USART_Begin>

000d6d38 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d38:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6d3a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d3c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6d3e:	2100      	movs	r1, #0
   d6d40:	f000 ffe9 	bl	d7d16 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6d44:	4620      	mov	r0, r4
   d6d46:	bd10      	pop	{r4, pc}

000d6d48 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6d48:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d4a:	4d0e      	ldr	r5, [pc, #56]	; (d6d84 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6d4c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6d4e:	a801      	add	r0, sp, #4
   d6d50:	f7ff fff2 	bl	d6d38 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d54:	6829      	ldr	r1, [r5, #0]
   d6d56:	f011 0401 	ands.w	r4, r1, #1
   d6d5a:	d110      	bne.n	d6d7e <_Z16_fetch_usbserialv+0x36>
   d6d5c:	4628      	mov	r0, r5
   d6d5e:	f7fd f9ab 	bl	d40b8 <__cxa_guard_acquire>
   d6d62:	b160      	cbz	r0, d6d7e <_Z16_fetch_usbserialv+0x36>
   d6d64:	aa01      	add	r2, sp, #4
   d6d66:	4621      	mov	r1, r4
   d6d68:	4807      	ldr	r0, [pc, #28]	; (d6d88 <_Z16_fetch_usbserialv+0x40>)
   d6d6a:	f7ff ffcd 	bl	d6d08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6d6e:	4628      	mov	r0, r5
   d6d70:	f7fd f9a7 	bl	d40c2 <__cxa_guard_release>
   d6d74:	4a05      	ldr	r2, [pc, #20]	; (d6d8c <_Z16_fetch_usbserialv+0x44>)
   d6d76:	4906      	ldr	r1, [pc, #24]	; (d6d90 <_Z16_fetch_usbserialv+0x48>)
   d6d78:	4803      	ldr	r0, [pc, #12]	; (d6d88 <_Z16_fetch_usbserialv+0x40>)
   d6d7a:	f000 fe49 	bl	d7a10 <__aeabi_atexit>
	return _usbserial;
}
   d6d7e:	4802      	ldr	r0, [pc, #8]	; (d6d88 <_Z16_fetch_usbserialv+0x40>)
   d6d80:	b007      	add	sp, #28
   d6d82:	bd30      	pop	{r4, r5, pc}
   d6d84:	2003e414 	.word	0x2003e414
   d6d88:	2003e418 	.word	0x2003e418
   d6d8c:	2003dd08 	.word	0x2003dd08
   d6d90:	000d6c89 	.word	0x000d6c89

000d6d94 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6d94:	4770      	bx	lr

000d6d96 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6d96:	7441      	strb	r1, [r0, #17]
   d6d98:	4770      	bx	lr

000d6d9a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6d9a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6d9c:	7c00      	ldrb	r0, [r0, #16]
   d6d9e:	f7ff fae3 	bl	d6368 <HAL_USART_Available_Data_For_Write>
}
   d6da2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6da6:	bd08      	pop	{r3, pc}

000d6da8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6da8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6daa:	7c00      	ldrb	r0, [r0, #16]
   d6dac:	f7ff fab4 	bl	d6318 <HAL_USART_Available_Data>
}
   d6db0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6db4:	bd08      	pop	{r3, pc}

000d6db6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6db6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6db8:	7c00      	ldrb	r0, [r0, #16]
   d6dba:	f7ff fabd 	bl	d6338 <HAL_USART_Peek_Data>
}
   d6dbe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6dc2:	bf28      	it	cs
   d6dc4:	f04f 30ff 	movcs.w	r0, #4294967295
   d6dc8:	bd08      	pop	{r3, pc}

000d6dca <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6dca:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6dcc:	7c00      	ldrb	r0, [r0, #16]
   d6dce:	f7ff faab 	bl	d6328 <HAL_USART_Read_Data>
}
   d6dd2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6dd6:	bf28      	it	cs
   d6dd8:	f04f 30ff 	movcs.w	r0, #4294967295
   d6ddc:	bd08      	pop	{r3, pc}

000d6dde <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6dde:	7c00      	ldrb	r0, [r0, #16]
   d6de0:	f7ff bab2 	b.w	d6348 <HAL_USART_Flush_Data>

000d6de4 <_ZN11USARTSerialD0Ev>:
   d6de4:	b510      	push	{r4, lr}
   d6de6:	2114      	movs	r1, #20
   d6de8:	4604      	mov	r4, r0
   d6dea:	f000 fe1f 	bl	d7a2c <_ZdlPvj>
   d6dee:	4620      	mov	r0, r4
   d6df0:	bd10      	pop	{r4, pc}

000d6df2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6df2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6df4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6df6:	4604      	mov	r4, r0
   d6df8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6dfa:	b925      	cbnz	r5, d6e06 <_ZN11USARTSerial5writeEh+0x14>
   d6dfc:	7c00      	ldrb	r0, [r0, #16]
   d6dfe:	f7ff fab3 	bl	d6368 <HAL_USART_Available_Data_For_Write>
   d6e02:	2800      	cmp	r0, #0
   d6e04:	dd05      	ble.n	d6e12 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6e06:	4631      	mov	r1, r6
   d6e08:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6e0e:	f7ff ba7b 	b.w	d6308 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6e12:	4628      	mov	r0, r5
   d6e14:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6e18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6e18:	b510      	push	{r4, lr}
   d6e1a:	4604      	mov	r4, r0
   d6e1c:	4608      	mov	r0, r1
   d6e1e:	4611      	mov	r1, r2
   d6e20:	2200      	movs	r2, #0
   d6e22:	6062      	str	r2, [r4, #4]
   d6e24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6e28:	60a2      	str	r2, [r4, #8]
   d6e2a:	4a05      	ldr	r2, [pc, #20]	; (d6e40 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6e2c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6e2e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6e30:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6e32:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6e34:	461a      	mov	r2, r3
   d6e36:	f7ff fa5f 	bl	d62f8 <HAL_USART_Init>
}
   d6e3a:	4620      	mov	r0, r4
   d6e3c:	bd10      	pop	{r4, pc}
   d6e3e:	bf00      	nop
   d6e40:	000d84e8 	.word	0x000d84e8

000d6e44 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d6e44:	2300      	movs	r3, #0
   d6e46:	7c00      	ldrb	r0, [r0, #16]
   d6e48:	f7ff ba96 	b.w	d6378 <HAL_USART_BeginConfig>

000d6e4c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d6e4c:	2200      	movs	r2, #0
   d6e4e:	f7ff bff9 	b.w	d6e44 <_ZN11USARTSerial5beginEmm>

000d6e52 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6e52:	7c00      	ldrb	r0, [r0, #16]
   d6e54:	f7ff ba80 	b.w	d6358 <HAL_USART_Is_Enabled>

000d6e58 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6e58:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6e5a:	4d0c      	ldr	r5, [pc, #48]	; (d6e8c <_Z22__fetch_global_Serial1v+0x34>)
   d6e5c:	6829      	ldr	r1, [r5, #0]
   d6e5e:	f011 0401 	ands.w	r4, r1, #1
   d6e62:	d111      	bne.n	d6e88 <_Z22__fetch_global_Serial1v+0x30>
   d6e64:	4628      	mov	r0, r5
   d6e66:	f7fd f927 	bl	d40b8 <__cxa_guard_acquire>
   d6e6a:	b168      	cbz	r0, d6e88 <_Z22__fetch_global_Serial1v+0x30>
   d6e6c:	4a08      	ldr	r2, [pc, #32]	; (d6e90 <_Z22__fetch_global_Serial1v+0x38>)
   d6e6e:	4b09      	ldr	r3, [pc, #36]	; (d6e94 <_Z22__fetch_global_Serial1v+0x3c>)
   d6e70:	4809      	ldr	r0, [pc, #36]	; (d6e98 <_Z22__fetch_global_Serial1v+0x40>)
   d6e72:	4621      	mov	r1, r4
   d6e74:	f7ff ffd0 	bl	d6e18 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6e78:	4628      	mov	r0, r5
   d6e7a:	f7fd f922 	bl	d40c2 <__cxa_guard_release>
   d6e7e:	4a07      	ldr	r2, [pc, #28]	; (d6e9c <_Z22__fetch_global_Serial1v+0x44>)
   d6e80:	4907      	ldr	r1, [pc, #28]	; (d6ea0 <_Z22__fetch_global_Serial1v+0x48>)
   d6e82:	4805      	ldr	r0, [pc, #20]	; (d6e98 <_Z22__fetch_global_Serial1v+0x40>)
   d6e84:	f000 fdc4 	bl	d7a10 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6e88:	4803      	ldr	r0, [pc, #12]	; (d6e98 <_Z22__fetch_global_Serial1v+0x40>)
   d6e8a:	bd38      	pop	{r3, r4, r5, pc}
   d6e8c:	2003e4c4 	.word	0x2003e4c4
   d6e90:	2003e4c8 	.word	0x2003e4c8
   d6e94:	2003e440 	.word	0x2003e440
   d6e98:	2003e42c 	.word	0x2003e42c
   d6e9c:	2003dd08 	.word	0x2003dd08
   d6ea0:	000d6d95 	.word	0x000d6d95

000d6ea4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6ea4:	4770      	bx	lr

000d6ea6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ea8:	4606      	mov	r6, r0
   d6eaa:	4615      	mov	r5, r2
   d6eac:	460c      	mov	r4, r1
   d6eae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6eb0:	42bc      	cmp	r4, r7
   d6eb2:	d006      	beq.n	d6ec2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6eb4:	6833      	ldr	r3, [r6, #0]
   d6eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6eba:	689b      	ldr	r3, [r3, #8]
   d6ebc:	4630      	mov	r0, r6
   d6ebe:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6ec0:	e7f6      	b.n	d6eb0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6ec2:	4628      	mov	r0, r5
   d6ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ec6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6ec6:	2200      	movs	r2, #0
   d6ec8:	7c00      	ldrb	r0, [r0, #16]
   d6eca:	f7ff ba75 	b.w	d63b8 <HAL_I2C_Write_Data>

000d6ece <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6ece:	2100      	movs	r1, #0
   d6ed0:	7c00      	ldrb	r0, [r0, #16]
   d6ed2:	f7ff ba79 	b.w	d63c8 <HAL_I2C_Available_Data>

000d6ed6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6ed6:	2100      	movs	r1, #0
   d6ed8:	7c00      	ldrb	r0, [r0, #16]
   d6eda:	f7ff ba7d 	b.w	d63d8 <HAL_I2C_Read_Data>

000d6ede <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6ede:	2100      	movs	r1, #0
   d6ee0:	7c00      	ldrb	r0, [r0, #16]
   d6ee2:	f7ff ba81 	b.w	d63e8 <HAL_I2C_Peek_Data>

000d6ee6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6ee6:	2100      	movs	r1, #0
   d6ee8:	7c00      	ldrb	r0, [r0, #16]
   d6eea:	f7ff ba85 	b.w	d63f8 <HAL_I2C_Flush_Data>

000d6eee <_ZN7TwoWireD0Ev>:
   d6eee:	b510      	push	{r4, lr}
   d6ef0:	2114      	movs	r1, #20
   d6ef2:	4604      	mov	r4, r0
   d6ef4:	f000 fd9a 	bl	d7a2c <_ZdlPvj>
   d6ef8:	4620      	mov	r0, r4
   d6efa:	bd10      	pop	{r4, pc}

000d6efc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6efc:	b510      	push	{r4, lr}
   d6efe:	4604      	mov	r4, r0
   d6f00:	2300      	movs	r3, #0
   d6f02:	6063      	str	r3, [r4, #4]
   d6f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6f08:	60a3      	str	r3, [r4, #8]
   d6f0a:	4b04      	ldr	r3, [pc, #16]	; (d6f1c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6f0c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6f0e:	4608      	mov	r0, r1
   d6f10:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6f12:	4611      	mov	r1, r2
   d6f14:	f7ff fa80 	bl	d6418 <HAL_I2C_Init>
}
   d6f18:	4620      	mov	r0, r4
   d6f1a:	bd10      	pop	{r4, pc}
   d6f1c:	000d8518 	.word	0x000d8518

000d6f20 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6f20:	2300      	movs	r3, #0
   d6f22:	461a      	mov	r2, r3
   d6f24:	4619      	mov	r1, r3
   d6f26:	7c00      	ldrb	r0, [r0, #16]
   d6f28:	f7ff ba2e 	b.w	d6388 <HAL_I2C_Begin>

000d6f2c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6f2c:	b570      	push	{r4, r5, r6, lr}
   d6f2e:	460c      	mov	r4, r1
   d6f30:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6f32:	2514      	movs	r5, #20
   d6f34:	4606      	mov	r6, r0
   d6f36:	462a      	mov	r2, r5
   d6f38:	2100      	movs	r1, #0
   d6f3a:	a801      	add	r0, sp, #4
   d6f3c:	f000 feeb 	bl	d7d16 <memset>
   d6f40:	7823      	ldrb	r3, [r4, #0]
   d6f42:	f88d 3008 	strb.w	r3, [sp, #8]
   d6f46:	6863      	ldr	r3, [r4, #4]
   d6f48:	9303      	str	r3, [sp, #12]
   d6f4a:	68e3      	ldr	r3, [r4, #12]
   d6f4c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6f4e:	2200      	movs	r2, #0
   d6f50:	7a23      	ldrb	r3, [r4, #8]
   d6f52:	7c30      	ldrb	r0, [r6, #16]
   d6f54:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6f58:	a901      	add	r1, sp, #4
   d6f5a:	9305      	str	r3, [sp, #20]
   d6f5c:	f7ff fa64 	bl	d6428 <HAL_I2C_Request_Data_Ex>
}
   d6f60:	b006      	add	sp, #24
   d6f62:	bd70      	pop	{r4, r5, r6, pc}

000d6f64 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6f66:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6f68:	f88d 1000 	strb.w	r1, [sp]
   d6f6c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6f70:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6f72:	bf18      	it	ne
   d6f74:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6f76:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d6f78:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6f7a:	f88d 3008 	strb.w	r3, [sp, #8]
   d6f7e:	f7ff ffd5 	bl	d6f2c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6f82:	b005      	add	sp, #20
   d6f84:	f85d fb04 	ldr.w	pc, [sp], #4

000d6f88 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d6f88:	2301      	movs	r3, #1
   d6f8a:	f7ff bfeb 	b.w	d6f64 <_ZN7TwoWire11requestFromEhjh>

000d6f8e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6f8e:	2200      	movs	r2, #0
   d6f90:	7c00      	ldrb	r0, [r0, #16]
   d6f92:	f7ff ba01 	b.w	d6398 <HAL_I2C_Begin_Transmission>

000d6f96 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6f96:	2200      	movs	r2, #0
   d6f98:	7c00      	ldrb	r0, [r0, #16]
   d6f9a:	f7ff ba05 	b.w	d63a8 <HAL_I2C_End_Transmission>

000d6f9e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6f9e:	2101      	movs	r1, #1
   d6fa0:	f7ff bff9 	b.w	d6f96 <_ZN7TwoWire15endTransmissionEh>

000d6fa4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6fa4:	2100      	movs	r1, #0
   d6fa6:	7c00      	ldrb	r0, [r0, #16]
   d6fa8:	f7ff ba2e 	b.w	d6408 <HAL_I2C_Is_Enabled>

000d6fac <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6fac:	2200      	movs	r2, #0
   d6fae:	4611      	mov	r1, r2
   d6fb0:	6840      	ldr	r0, [r0, #4]
   d6fb2:	f7ff bb15 	b.w	d65e0 <network_listening>

000d6fb6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6fb6:	2200      	movs	r2, #0
   d6fb8:	4611      	mov	r1, r2
   d6fba:	6840      	ldr	r0, [r0, #4]
   d6fbc:	f7ff bb20 	b.w	d6600 <network_get_listen_timeout>

000d6fc0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6fc0:	2200      	movs	r2, #0
   d6fc2:	6840      	ldr	r0, [r0, #4]
   d6fc4:	f7ff bb14 	b.w	d65f0 <network_set_listen_timeout>

000d6fc8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6fc8:	2200      	movs	r2, #0
   d6fca:	f081 0101 	eor.w	r1, r1, #1
   d6fce:	6840      	ldr	r0, [r0, #4]
   d6fd0:	f7ff bafe 	b.w	d65d0 <network_listen>

000d6fd4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6fd4:	2300      	movs	r3, #0
   d6fd6:	461a      	mov	r2, r3
   d6fd8:	2101      	movs	r1, #1
   d6fda:	6840      	ldr	r0, [r0, #4]
   d6fdc:	f7ff baf0 	b.w	d65c0 <network_off>

000d6fe0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6fe0:	2300      	movs	r3, #0
   d6fe2:	461a      	mov	r2, r3
   d6fe4:	4619      	mov	r1, r3
   d6fe6:	6840      	ldr	r0, [r0, #4]
   d6fe8:	f7ff bae2 	b.w	d65b0 <network_on>

000d6fec <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6fec:	2200      	movs	r2, #0
   d6fee:	4611      	mov	r1, r2
   d6ff0:	6840      	ldr	r0, [r0, #4]
   d6ff2:	f7ff bad5 	b.w	d65a0 <network_ready>

000d6ff6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6ff6:	2200      	movs	r2, #0
   d6ff8:	4611      	mov	r1, r2
   d6ffa:	6840      	ldr	r0, [r0, #4]
   d6ffc:	f7ff bac0 	b.w	d6580 <network_connecting>

000d7000 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7000:	2200      	movs	r2, #0
   d7002:	2102      	movs	r1, #2
   d7004:	6840      	ldr	r0, [r0, #4]
   d7006:	f7ff bac3 	b.w	d6590 <network_disconnect>

000d700a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d700a:	2300      	movs	r3, #0
   d700c:	461a      	mov	r2, r3
   d700e:	6840      	ldr	r0, [r0, #4]
   d7010:	f7ff baae 	b.w	d6570 <network_connect>

000d7014 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7014:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7016:	4605      	mov	r5, r0
   d7018:	b188      	cbz	r0, d703e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d701a:	6804      	ldr	r4, [r0, #0]
   d701c:	b14c      	cbz	r4, d7032 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d701e:	68a3      	ldr	r3, [r4, #8]
   d7020:	b11b      	cbz	r3, d702a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7022:	2203      	movs	r2, #3
   d7024:	4621      	mov	r1, r4
   d7026:	4620      	mov	r0, r4
   d7028:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d702a:	2110      	movs	r1, #16
   d702c:	4620      	mov	r0, r4
   d702e:	f000 fcfd 	bl	d7a2c <_ZdlPvj>
   d7032:	4628      	mov	r0, r5
   d7034:	2114      	movs	r1, #20
      }
   d7036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d703a:	f000 bcf7 	b.w	d7a2c <_ZdlPvj>
   d703e:	bd38      	pop	{r3, r4, r5, pc}

000d7040 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7040:	b110      	cbz	r0, d7048 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7042:	6803      	ldr	r3, [r0, #0]
   d7044:	685b      	ldr	r3, [r3, #4]
   d7046:	4718      	bx	r3
   d7048:	4770      	bx	lr

000d704a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d704a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d704c:	6803      	ldr	r3, [r0, #0]
   d704e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7050:	b1bb      	cbz	r3, d7082 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7052:	6858      	ldr	r0, [r3, #4]
   d7054:	f7ff f910 	bl	d6278 <os_thread_is_current>
   d7058:	b978      	cbnz	r0, d707a <_ZN6ThreadD1Ev+0x30>
   d705a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d705c:	7c5a      	ldrb	r2, [r3, #17]
   d705e:	b912      	cbnz	r2, d7066 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7060:	6858      	ldr	r0, [r3, #4]
   d7062:	f7ff f911 	bl	d6288 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7066:	6823      	ldr	r3, [r4, #0]
   d7068:	6858      	ldr	r0, [r3, #4]
   d706a:	f7ff f915 	bl	d6298 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d706e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7070:	2300      	movs	r3, #0
   d7072:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7074:	b128      	cbz	r0, d7082 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7076:	f7ff ffcd 	bl	d7014 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d707a:	6820      	ldr	r0, [r4, #0]
   d707c:	b108      	cbz	r0, d7082 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d707e:	f7ff ffc9 	bl	d7014 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7082:	4620      	mov	r0, r4
   d7084:	bd10      	pop	{r4, pc}

000d7086 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7086:	b538      	push	{r3, r4, r5, lr}
   d7088:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d708a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d708e:	b108      	cbz	r0, d7094 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7090:	f7fd f805 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7094:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7098:	b108      	cbz	r0, d709e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d709a:	f7ff f90d 	bl	d62b8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d709e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d70a2:	b135      	cbz	r5, d70b2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d70a4:	4628      	mov	r0, r5
   d70a6:	f7ff ffd0 	bl	d704a <_ZN6ThreadD1Ev>
   d70aa:	2104      	movs	r1, #4
   d70ac:	4628      	mov	r0, r5
   d70ae:	f000 fcbd 	bl	d7a2c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d70b2:	6820      	ldr	r0, [r4, #0]
   d70b4:	b108      	cbz	r0, d70ba <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d70b6:	f7ff ffc3 	bl	d7040 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d70ba:	4620      	mov	r0, r4
   d70bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d70c0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d70c0:	b510      	push	{r4, lr}
   d70c2:	4b04      	ldr	r3, [pc, #16]	; (d70d4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d70c4:	4604      	mov	r4, r0
   d70c6:	f840 3b08 	str.w	r3, [r0], #8
   d70ca:	f7ff ffdc 	bl	d7086 <_ZN5spark11MeshPublishD1Ev>
   d70ce:	4620      	mov	r0, r4
   d70d0:	bd10      	pop	{r4, pc}
   d70d2:	bf00      	nop
   d70d4:	000d8540 	.word	0x000d8540

000d70d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d70d8:	b538      	push	{r3, r4, r5, lr}
   d70da:	4c0e      	ldr	r4, [pc, #56]	; (d7114 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d70dc:	4b0e      	ldr	r3, [pc, #56]	; (d7118 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d70de:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d70e0:	2500      	movs	r5, #0
   d70e2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d70e4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d70e8:	6063      	str	r3, [r4, #4]
   d70ea:	60a5      	str	r5, [r4, #8]
   d70ec:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d70f0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d70f4:	f7ff f8d8 	bl	d62a8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d70f8:	4b08      	ldr	r3, [pc, #32]	; (d711c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d70fa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d70fe:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7102:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7104:	4620      	mov	r0, r4
   d7106:	4a06      	ldr	r2, [pc, #24]	; (d7120 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7108:	4906      	ldr	r1, [pc, #24]	; (d7124 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d710a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d710e:	f000 bc7f 	b.w	d7a10 <__aeabi_atexit>
   d7112:	bf00      	nop
   d7114:	2003e54c 	.word	0x2003e54c
   d7118:	000d8628 	.word	0x000d8628
   d711c:	000d8540 	.word	0x000d8540
   d7120:	2003dd08 	.word	0x2003dd08
   d7124:	000d70c1 	.word	0x000d70c1

000d7128 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7128:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d712a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d712c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d712e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7132:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7134:	2201      	movs	r2, #1
   d7136:	f04f 33ff 	mov.w	r3, #4294967295
   d713a:	4621      	mov	r1, r4
   d713c:	47a8      	blx	r5
}
   d713e:	b003      	add	sp, #12
   d7140:	bd30      	pop	{r4, r5, pc}

000d7142 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7142:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7144:	6803      	ldr	r3, [r0, #0]
   d7146:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7148:	f04f 33ff 	mov.w	r3, #4294967295
   d714c:	46a4      	mov	ip, r4
}
   d714e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7152:	4760      	bx	ip

000d7154 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7154:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7156:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7158:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d715a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d715e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7160:	4621      	mov	r1, r4
   d7162:	4613      	mov	r3, r2
   d7164:	2201      	movs	r2, #1
   d7166:	47a8      	blx	r5
}
   d7168:	b003      	add	sp, #12
   d716a:	bd30      	pop	{r4, r5, pc}

000d716c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d716c:	4770      	bx	lr

000d716e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d716e:	b538      	push	{r3, r4, r5, lr}
   d7170:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7172:	681a      	ldr	r2, [r3, #0]
   d7174:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7176:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7178:	da05      	bge.n	d7186 <_ZN9TCPClient9connectedEv+0x18>
   d717a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d717e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7182:	429a      	cmp	r2, r3
   d7184:	d001      	beq.n	d718a <_ZN9TCPClient9connectedEv+0x1c>
   d7186:	2501      	movs	r5, #1
   d7188:	e00b      	b.n	d71a2 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d718a:	6803      	ldr	r3, [r0, #0]
   d718c:	691b      	ldr	r3, [r3, #16]
   d718e:	4798      	blx	r3
   d7190:	2800      	cmp	r0, #0
   d7192:	bf14      	ite	ne
   d7194:	2501      	movne	r5, #1
   d7196:	2500      	moveq	r5, #0
        if (!rv) {
   d7198:	d103      	bne.n	d71a2 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d719a:	6823      	ldr	r3, [r4, #0]
   d719c:	4620      	mov	r0, r4
   d719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d71a0:	4798      	blx	r3
        }
    }
    return rv;
}
   d71a2:	4628      	mov	r0, r5
   d71a4:	bd38      	pop	{r3, r4, r5, pc}

000d71a6 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d71a6:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d71a8:	6818      	ldr	r0, [r3, #0]
}
   d71aa:	43c0      	mvns	r0, r0
   d71ac:	0fc0      	lsrs	r0, r0, #31
   d71ae:	4770      	bx	lr

000d71b0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d71b0:	4770      	bx	lr

000d71b2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d71b2:	2000      	movs	r0, #0
   d71b4:	4770      	bx	lr

000d71b6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d71b6:	b510      	push	{r4, lr}
   d71b8:	2114      	movs	r1, #20
   d71ba:	4604      	mov	r4, r0
   d71bc:	f000 fc36 	bl	d7a2c <_ZdlPvj>
   d71c0:	4620      	mov	r0, r4
   d71c2:	bd10      	pop	{r4, pc}

000d71c4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d71c4:	f7fc bf69 	b.w	d409a <_ZdlPv>

000d71c8 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d71c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d71ca:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d71cc:	2200      	movs	r2, #0
   d71ce:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d71d0:	9202      	str	r2, [sp, #8]
   d71d2:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d71d4:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d71d6:	4604      	mov	r4, r0
   d71d8:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d71da:	d008      	beq.n	d71ee <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d71dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d71e0:	fbb3 f1f2 	udiv	r1, r3, r2
   d71e4:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d71e6:	fb02 3111 	mls	r1, r2, r1, r3
   d71ea:	434a      	muls	r2, r1
   d71ec:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d71ee:	6960      	ldr	r0, [r4, #20]
   d71f0:	2308      	movs	r3, #8
   d71f2:	9300      	str	r3, [sp, #0]
   d71f4:	f241 0205 	movw	r2, #4101	; 0x1005
   d71f8:	446b      	add	r3, sp
   d71fa:	f640 71ff 	movw	r1, #4095	; 0xfff
   d71fe:	6800      	ldr	r0, [r0, #0]
   d7200:	f7ff f91a 	bl	d6438 <sock_setsockopt>
    if (ret < 0) {
   d7204:	2800      	cmp	r0, #0
   d7206:	db08      	blt.n	d721a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7208:	6960      	ldr	r0, [r4, #20]
   d720a:	2300      	movs	r3, #0
   d720c:	4632      	mov	r2, r6
   d720e:	4629      	mov	r1, r5
   d7210:	6800      	ldr	r0, [r0, #0]
   d7212:	f7ff f931 	bl	d6478 <sock_send>
    if (ret < 0) {
   d7216:	2800      	cmp	r0, #0
   d7218:	da04      	bge.n	d7224 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d721a:	f7ff fa21 	bl	d6660 <__errno>
   d721e:	6803      	ldr	r3, [r0, #0]
   d7220:	6063      	str	r3, [r4, #4]
   d7222:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d7224:	b004      	add	sp, #16
   d7226:	bd70      	pop	{r4, r5, r6, pc}

000d7228 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7228:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d722a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d722c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d722e:	689b      	ldr	r3, [r3, #8]
   d7230:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7232:	68a3      	ldr	r3, [r4, #8]
   d7234:	3b01      	subs	r3, #1
   d7236:	60a3      	str	r3, [r4, #8]
   d7238:	b92b      	cbnz	r3, d7246 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d723a:	6823      	ldr	r3, [r4, #0]
   d723c:	4620      	mov	r0, r4
   d723e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d7244:	4718      	bx	r3
   d7246:	bd10      	pop	{r4, pc}

000d7248 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7248:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d724a:	4604      	mov	r4, r0
   d724c:	694d      	ldr	r5, [r1, #20]
   d724e:	4b05      	ldr	r3, [pc, #20]	; (d7264 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7250:	f844 3b04 	str.w	r3, [r4], #4
   d7254:	358c      	adds	r5, #140	; 0x8c
   d7256:	4606      	mov	r6, r0
   d7258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d725a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d725c:	682b      	ldr	r3, [r5, #0]
   d725e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7260:	4630      	mov	r0, r6
   d7262:	bd70      	pop	{r4, r5, r6, pc}
   d7264:	000d84a4 	.word	0x000d84a4

000d7268 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7268:	b510      	push	{r4, lr}
   d726a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d726c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7270:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7274:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7276:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7278:	d005      	beq.n	d7286 <_ZN9TCPClient4peekEv+0x1e>
   d727a:	6962      	ldr	r2, [r4, #20]
   d727c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7280:	4413      	add	r3, r2
   d7282:	7918      	ldrb	r0, [r3, #4]
   d7284:	bd10      	pop	{r4, pc}
   d7286:	6803      	ldr	r3, [r0, #0]
   d7288:	691b      	ldr	r3, [r3, #16]
   d728a:	4798      	blx	r3
   d728c:	2800      	cmp	r0, #0
   d728e:	d1f4      	bne.n	d727a <_ZN9TCPClient4peekEv+0x12>
   d7290:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7294:	bd10      	pop	{r4, pc}

000d7296 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7296:	b510      	push	{r4, lr}
   d7298:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d729a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d729e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d72a2:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d72a4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d72a6:	d008      	beq.n	d72ba <_ZN9TCPClient4readEv+0x24>
   d72a8:	6962      	ldr	r2, [r4, #20]
   d72aa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d72ae:	1c59      	adds	r1, r3, #1
   d72b0:	4413      	add	r3, r2
   d72b2:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d72b6:	7918      	ldrb	r0, [r3, #4]
   d72b8:	bd10      	pop	{r4, pc}
   d72ba:	6803      	ldr	r3, [r0, #0]
   d72bc:	691b      	ldr	r3, [r3, #16]
   d72be:	4798      	blx	r3
   d72c0:	2800      	cmp	r0, #0
   d72c2:	d1f1      	bne.n	d72a8 <_ZN9TCPClient4readEv+0x12>
   d72c4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d72c8:	bd10      	pop	{r4, pc}

000d72ca <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d72ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72cc:	6943      	ldr	r3, [r0, #20]
   d72ce:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d72d0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d72d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d72d8:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d72da:	4605      	mov	r5, r0
   d72dc:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d72de:	d106      	bne.n	d72ee <_ZN9TCPClient4readEPhj+0x24>
   d72e0:	6803      	ldr	r3, [r0, #0]
   d72e2:	691b      	ldr	r3, [r3, #16]
   d72e4:	4798      	blx	r3
   d72e6:	b910      	cbnz	r0, d72ee <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d72e8:	f04f 34ff 	mov.w	r4, #4294967295
   d72ec:	e014      	b.n	d7318 <_ZN9TCPClient4readEPhj+0x4e>
   d72ee:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d72f0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d72f4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d72f8:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d72fa:	42bc      	cmp	r4, r7
   d72fc:	bf28      	it	cs
   d72fe:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7300:	4419      	add	r1, r3
   d7302:	4622      	mov	r2, r4
   d7304:	3104      	adds	r1, #4
   d7306:	4630      	mov	r0, r6
   d7308:	f000 fcfa 	bl	d7d00 <memcpy>
   d730c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d730e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7312:	4423      	add	r3, r4
   d7314:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7318:	4620      	mov	r0, r4
   d731a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d731c <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d731c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7320:	4698      	mov	r8, r3
    stop();
   d7322:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7324:	b093      	sub	sp, #76	; 0x4c
    stop();
   d7326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7328:	460d      	mov	r5, r1
   d732a:	4606      	mov	r6, r0
   d732c:	4617      	mov	r7, r2
    stop();
   d732e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d7330:	ab12      	add	r3, sp, #72	; 0x48
   d7332:	2400      	movs	r4, #0
   d7334:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7338:	4622      	mov	r2, r4
   d733a:	4621      	mov	r1, r4
   d733c:	4628      	mov	r0, r5
   d733e:	f7fe fee3 	bl	d6108 <netdb_getaddrinfo>
   d7342:	4681      	mov	r9, r0
   d7344:	2800      	cmp	r0, #0
   d7346:	d13d      	bne.n	d73c4 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7348:	9b00      	ldr	r3, [sp, #0]
   d734a:	2b00      	cmp	r3, #0
   d734c:	d056      	beq.n	d73fc <_ZN9TCPClient7connectEPKctm+0xe0>
   d734e:	695b      	ldr	r3, [r3, #20]
   d7350:	2b00      	cmp	r3, #0
   d7352:	d053      	beq.n	d73fc <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d7354:	a806      	add	r0, sp, #24
   d7356:	f7ff fc47 	bl	d6be8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d735a:	9b00      	ldr	r3, [sp, #0]
   d735c:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d735e:	7863      	ldrb	r3, [r4, #1]
   d7360:	2b02      	cmp	r3, #2
   d7362:	d101      	bne.n	d7368 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7364:	1d21      	adds	r1, r4, #4
   d7366:	e013      	b.n	d7390 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7368:	2b0a      	cmp	r3, #10
   d736a:	d114      	bne.n	d7396 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d736c:	2211      	movs	r2, #17
   d736e:	4649      	mov	r1, r9
   d7370:	a801      	add	r0, sp, #4
   d7372:	f000 fcd0 	bl	d7d16 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7376:	68a3      	ldr	r3, [r4, #8]
   d7378:	bb33      	cbnz	r3, d73c8 <_ZN9TCPClient7connectEPKctm+0xac>
   d737a:	68e3      	ldr	r3, [r4, #12]
   d737c:	bb23      	cbnz	r3, d73c8 <_ZN9TCPClient7connectEPKctm+0xac>
   d737e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7382:	6925      	ldr	r5, [r4, #16]
   d7384:	f7fe ffa8 	bl	d62d8 <inet_htonl>
   d7388:	4285      	cmp	r5, r0
   d738a:	d11d      	bne.n	d73c8 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d738c:	f104 0114 	add.w	r1, r4, #20
   d7390:	a806      	add	r0, sp, #24
   d7392:	f7ff fc6c 	bl	d6c6e <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7396:	a806      	add	r0, sp, #24
   d7398:	f7ff fc46 	bl	d6c28 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d739c:	2800      	cmp	r0, #0
   d739e:	d02d      	beq.n	d73fc <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d73a0:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d73a2:	ad07      	add	r5, sp, #28
   d73a4:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d73a8:	4b18      	ldr	r3, [pc, #96]	; (d740c <_ZN9TCPClient7connectEPKctm+0xf0>)
   d73aa:	930c      	str	r3, [sp, #48]	; 0x30
   d73ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d73ae:	ac0d      	add	r4, sp, #52	; 0x34
   d73b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d73b2:	682b      	ldr	r3, [r5, #0]
   d73b4:	7023      	strb	r3, [r4, #0]
   d73b6:	463a      	mov	r2, r7
   d73b8:	4643      	mov	r3, r8
   d73ba:	a90c      	add	r1, sp, #48	; 0x30
   d73bc:	4630      	mov	r0, r6
   d73be:	47c8      	blx	r9
   d73c0:	4681      	mov	r9, r0
   d73c2:	e01b      	b.n	d73fc <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d73c4:	46a1      	mov	r9, r4
   d73c6:	e019      	b.n	d73fc <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d73c8:	f104 0308 	add.w	r3, r4, #8
   d73cc:	ad01      	add	r5, sp, #4
   d73ce:	3418      	adds	r4, #24
   d73d0:	6818      	ldr	r0, [r3, #0]
   d73d2:	6859      	ldr	r1, [r3, #4]
   d73d4:	462a      	mov	r2, r5
   d73d6:	c203      	stmia	r2!, {r0, r1}
   d73d8:	3308      	adds	r3, #8
   d73da:	42a3      	cmp	r3, r4
   d73dc:	4615      	mov	r5, r2
   d73de:	d1f7      	bne.n	d73d0 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d73e0:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d73e2:	a901      	add	r1, sp, #4
   d73e4:	a80c      	add	r0, sp, #48	; 0x30
   d73e6:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d73e8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d73ec:	f7ff fc0a 	bl	d6c04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d73f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d73f2:	ac07      	add	r4, sp, #28
   d73f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d73f6:	682b      	ldr	r3, [r5, #0]
   d73f8:	7023      	strb	r3, [r4, #0]
   d73fa:	e7cc      	b.n	d7396 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d73fc:	9800      	ldr	r0, [sp, #0]
   d73fe:	f7fe fe7b 	bl	d60f8 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d7402:	4648      	mov	r0, r9
   d7404:	b013      	add	sp, #76	; 0x4c
   d7406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d740a:	bf00      	nop
   d740c:	000d84a4 	.word	0x000d84a4

000d7410 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7410:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7412:	2300      	movs	r3, #0
   d7414:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7418:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d741a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d741e:	4770      	bx	lr

000d7420 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7424:	461e      	mov	r6, r3
    stop();
   d7426:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7428:	460c      	mov	r4, r1
   d742a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d742e:	4605      	mov	r5, r0
   d7430:	4617      	mov	r7, r2
    stop();
   d7432:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7434:	7d23      	ldrb	r3, [r4, #20]
   d7436:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d743a:	2b04      	cmp	r3, #4
   d743c:	bf0c      	ite	eq
   d743e:	2002      	moveq	r0, #2
   d7440:	200a      	movne	r0, #10
   d7442:	2206      	movs	r2, #6
   d7444:	2101      	movs	r1, #1
   d7446:	f7ff f81f 	bl	d6488 <sock_socket>
   d744a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d744e:	696b      	ldr	r3, [r5, #20]
   d7450:	681b      	ldr	r3, [r3, #0]
   d7452:	2b00      	cmp	r3, #0
   d7454:	db18      	blt.n	d7488 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d7456:	4628      	mov	r0, r5
   d7458:	f7ff ffda 	bl	d7410 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d745c:	b1d6      	cbz	r6, d7494 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d745e:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7460:	a903      	add	r1, sp, #12
   d7462:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7464:	9303      	str	r3, [sp, #12]
   d7466:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d746a:	f7fe fedd 	bl	d6228 <if_index_to_name>
   d746e:	b958      	cbnz	r0, d7488 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7470:	6968      	ldr	r0, [r5, #20]
   d7472:	2306      	movs	r3, #6
   d7474:	9300      	str	r3, [sp, #0]
   d7476:	f241 020b 	movw	r2, #4107	; 0x100b
   d747a:	ab03      	add	r3, sp, #12
   d747c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7480:	6800      	ldr	r0, [r0, #0]
   d7482:	f7fe ffd9 	bl	d6438 <sock_setsockopt>
   d7486:	b128      	cbz	r0, d7494 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7488:	682b      	ldr	r3, [r5, #0]
   d748a:	4628      	mov	r0, r5
   d748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d748e:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7490:	4798      	blx	r3
   d7492:	e03b      	b.n	d750c <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7494:	261c      	movs	r6, #28
   d7496:	4632      	mov	r2, r6
   d7498:	2100      	movs	r1, #0
   d749a:	a803      	add	r0, sp, #12
   d749c:	f000 fc3b 	bl	d7d16 <memset>
    if (ip.version() == 4) {
   d74a0:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d74a2:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d74a6:	2b04      	cmp	r3, #4
   d74a8:	d10c      	bne.n	d74c4 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d74aa:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d74ac:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d74ae:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d74b2:	f7fe ff19 	bl	d62e8 <inet_htons>
   d74b6:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d74ba:	6860      	ldr	r0, [r4, #4]
   d74bc:	f7fe ff0c 	bl	d62d8 <inet_htonl>
   d74c0:	9004      	str	r0, [sp, #16]
   d74c2:	e013      	b.n	d74ec <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d74c4:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d74c6:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d74c8:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d74cc:	f7fe ff0c 	bl	d62e8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d74d0:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d74d2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d74d6:	1d23      	adds	r3, r4, #4
   d74d8:	f104 0714 	add.w	r7, r4, #20
   d74dc:	6818      	ldr	r0, [r3, #0]
   d74de:	6859      	ldr	r1, [r3, #4]
   d74e0:	4632      	mov	r2, r6
   d74e2:	c203      	stmia	r2!, {r0, r1}
   d74e4:	3308      	adds	r3, #8
   d74e6:	42bb      	cmp	r3, r7
   d74e8:	4616      	mov	r6, r2
   d74ea:	d1f7      	bne.n	d74dc <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d74ec:	696b      	ldr	r3, [r5, #20]
   d74ee:	221c      	movs	r2, #28
   d74f0:	a903      	add	r1, sp, #12
   d74f2:	6818      	ldr	r0, [r3, #0]
   d74f4:	f7fe ffb0 	bl	d6458 <sock_connect>
   d74f8:	2800      	cmp	r0, #0
   d74fa:	d1c5      	bne.n	d7488 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d74fc:	3404      	adds	r4, #4
   d74fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7500:	696d      	ldr	r5, [r5, #20]
   d7502:	358c      	adds	r5, #140	; 0x8c
   d7504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7506:	6823      	ldr	r3, [r4, #0]
   d7508:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d750a:	2401      	movs	r4, #1
}
   d750c:	4620      	mov	r0, r4
   d750e:	b00a      	add	sp, #40	; 0x28
   d7510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7514 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7514:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7516:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7518:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d751a:	6818      	ldr	r0, [r3, #0]
   d751c:	2800      	cmp	r0, #0
   d751e:	db01      	blt.n	d7524 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7520:	f7fe ff92 	bl	d6448 <sock_close>
   d7524:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7526:	f04f 32ff 	mov.w	r2, #4294967295
   d752a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d752c:	6960      	ldr	r0, [r4, #20]
   d752e:	2211      	movs	r2, #17
   d7530:	2100      	movs	r1, #0
   d7532:	308c      	adds	r0, #140	; 0x8c
   d7534:	f000 fbef 	bl	d7d16 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7538:	4620      	mov	r0, r4
}
   d753a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d753e:	f7ff bf67 	b.w	d7410 <_ZN9TCPClient12flush_bufferEv>
	...

000d7544 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7544:	b530      	push	{r4, r5, lr}
   d7546:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7548:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d754c:	b08b      	sub	sp, #44	; 0x2c
   d754e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7550:	b11b      	cbz	r3, d755a <_ZN9TCPClient9availableEv+0x16>
   d7552:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7556:	429a      	cmp	r2, r3
   d7558:	d040      	beq.n	d75dc <_ZN9TCPClient9availableEv+0x98>
   d755a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d755c:	6818      	ldr	r0, [r3, #0]
   d755e:	2800      	cmp	r0, #0
   d7560:	db3f      	blt.n	d75e2 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7562:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7566:	2d7f      	cmp	r5, #127	; 0x7f
   d7568:	d83b      	bhi.n	d75e2 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d756a:	1d19      	adds	r1, r3, #4
   d756c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7570:	2308      	movs	r3, #8
   d7572:	4429      	add	r1, r5
   d7574:	f7fe ff78 	bl	d6468 <sock_recv>
            if (ret > 0) {
   d7578:	2800      	cmp	r0, #0
   d757a:	dd0c      	ble.n	d7596 <_ZN9TCPClient9availableEv+0x52>
   d757c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d757e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7582:	b90a      	cbnz	r2, d7588 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7584:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7588:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d758a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d758e:	4418      	add	r0, r3
   d7590:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7594:	e025      	b.n	d75e2 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7596:	f7ff f863 	bl	d6660 <__errno>
   d759a:	6803      	ldr	r3, [r0, #0]
   d759c:	2b0b      	cmp	r3, #11
   d759e:	d020      	beq.n	d75e2 <_ZN9TCPClient9availableEv+0x9e>
   d75a0:	f7ff f85e 	bl	d6660 <__errno>
   d75a4:	6803      	ldr	r3, [r0, #0]
   d75a6:	2b0b      	cmp	r3, #11
   d75a8:	d01b      	beq.n	d75e2 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d75aa:	2320      	movs	r3, #32
   d75ac:	2500      	movs	r5, #0
   d75ae:	9302      	str	r3, [sp, #8]
   d75b0:	9503      	str	r5, [sp, #12]
   d75b2:	f7ff f855 	bl	d6660 <__errno>
   d75b6:	6803      	ldr	r3, [r0, #0]
   d75b8:	9301      	str	r3, [sp, #4]
   d75ba:	4b0e      	ldr	r3, [pc, #56]	; (d75f4 <_ZN9TCPClient9availableEv+0xb0>)
   d75bc:	9300      	str	r3, [sp, #0]
   d75be:	aa02      	add	r2, sp, #8
   d75c0:	462b      	mov	r3, r5
   d75c2:	490d      	ldr	r1, [pc, #52]	; (d75f8 <_ZN9TCPClient9availableEv+0xb4>)
   d75c4:	2032      	movs	r0, #50	; 0x32
   d75c6:	f7fe ffa7 	bl	d6518 <log_message>
                    sock_close(d_->sock);
   d75ca:	6963      	ldr	r3, [r4, #20]
   d75cc:	6818      	ldr	r0, [r3, #0]
   d75ce:	f7fe ff3b 	bl	d6448 <sock_close>
   d75d2:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d75d4:	f04f 32ff 	mov.w	r2, #4294967295
   d75d8:	601a      	str	r2, [r3, #0]
   d75da:	e002      	b.n	d75e2 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d75dc:	f7ff ff18 	bl	d7410 <_ZN9TCPClient12flush_bufferEv>
   d75e0:	e7bb      	b.n	d755a <_ZN9TCPClient9availableEv+0x16>
   d75e2:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d75e4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d75e8:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d75ec:	1a18      	subs	r0, r3, r0
}
   d75ee:	b00b      	add	sp, #44	; 0x2c
   d75f0:	bd30      	pop	{r4, r5, pc}
   d75f2:	bf00      	nop
   d75f4:	000d85db 	.word	0x000d85db
   d75f8:	000d85d4 	.word	0x000d85d4

000d75fc <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d75fc:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d75fe:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7600:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d7602:	6001      	str	r1, [r0, #0]
   d7604:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7608:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d760c:	3088      	adds	r0, #136	; 0x88
   d760e:	f7ff faeb 	bl	d6be8 <_ZN9IPAddressC1Ev>
}
   d7612:	4620      	mov	r0, r4
   d7614:	bd10      	pop	{r4, pc}
	...

000d7618 <_ZN9TCPClientC1Ei>:
   d7618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d761c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d761e:	2300      	movs	r3, #0
   d7620:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d7622:	4a14      	ldr	r2, [pc, #80]	; (d7674 <_ZN9TCPClientC1Ei+0x5c>)
   d7624:	6043      	str	r3, [r0, #4]
   d7626:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7628:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d762a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d762c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d762e:	20a0      	movs	r0, #160	; 0xa0
   d7630:	460e      	mov	r6, r1
   d7632:	f7fc fd30 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7636:	4605      	mov	r5, r0
   d7638:	b110      	cbz	r0, d7640 <_ZN9TCPClientC1Ei+0x28>
   d763a:	4631      	mov	r1, r6
   d763c:	f7ff ffde 	bl	d75fc <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7640:	2014      	movs	r0, #20
   d7642:	f7fc fd28 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7646:	4603      	mov	r3, r0
   d7648:	b128      	cbz	r0, d7656 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d764a:	2201      	movs	r2, #1
   d764c:	6042      	str	r2, [r0, #4]
   d764e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7650:	4a09      	ldr	r2, [pc, #36]	; (d7678 <_ZN9TCPClientC1Ei+0x60>)
   d7652:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7654:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7656:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7658:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d765a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d765c:	b128      	cbz	r0, d766a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d765e:	6843      	ldr	r3, [r0, #4]
   d7660:	3b01      	subs	r3, #1
   d7662:	6043      	str	r3, [r0, #4]
   d7664:	b90b      	cbnz	r3, d766a <_ZN9TCPClientC1Ei+0x52>
   d7666:	f7ff fddf 	bl	d7228 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d766a:	4620      	mov	r0, r4
   d766c:	f7ff fed0 	bl	d7410 <_ZN9TCPClient12flush_bufferEv>
}
   d7670:	4620      	mov	r0, r4
   d7672:	bd70      	pop	{r4, r5, r6, pc}
   d7674:	000d8590 	.word	0x000d8590
   d7678:	000d8574 	.word	0x000d8574

000d767c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d767c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d767e:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7682:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7684:	f7ff ffc8 	bl	d7618 <_ZN9TCPClientC1Ei>
}
   d7688:	4620      	mov	r0, r4
   d768a:	bd10      	pop	{r4, pc}

000d768c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d768c:	b510      	push	{r4, lr}
   d768e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7690:	6800      	ldr	r0, [r0, #0]
   d7692:	2800      	cmp	r0, #0
   d7694:	db01      	blt.n	d769a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7696:	f7fe fed7 	bl	d6448 <sock_close>
    }
}
   d769a:	4620      	mov	r0, r4
   d769c:	bd10      	pop	{r4, pc}

000d769e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d769e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d76a0:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d76a2:	4620      	mov	r0, r4
   d76a4:	f7ff fff2 	bl	d768c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d76a8:	b124      	cbz	r4, d76b4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d76aa:	4620      	mov	r0, r4
   d76ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d76b0:	f7fc bcf3 	b.w	d409a <_ZdlPv>
   d76b4:	bd10      	pop	{r4, pc}

000d76b6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d76b6:	2200      	movs	r2, #0
   d76b8:	4611      	mov	r1, r2
   d76ba:	6840      	ldr	r0, [r0, #4]
   d76bc:	f7fe bf70 	b.w	d65a0 <network_ready>

000d76c0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d76c0:	2200      	movs	r2, #0
   d76c2:	4611      	mov	r1, r2
   d76c4:	6840      	ldr	r0, [r0, #4]
   d76c6:	f7fe bf8b 	b.w	d65e0 <network_listening>

000d76ca <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d76ca:	2200      	movs	r2, #0
   d76cc:	4611      	mov	r1, r2
   d76ce:	6840      	ldr	r0, [r0, #4]
   d76d0:	f7fe bf96 	b.w	d6600 <network_get_listen_timeout>

000d76d4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d76d4:	2200      	movs	r2, #0
   d76d6:	6840      	ldr	r0, [r0, #4]
   d76d8:	f7fe bf8a 	b.w	d65f0 <network_set_listen_timeout>

000d76dc <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d76dc:	2200      	movs	r2, #0
   d76de:	f081 0101 	eor.w	r1, r1, #1
   d76e2:	6840      	ldr	r0, [r0, #4]
   d76e4:	f7fe bf74 	b.w	d65d0 <network_listen>

000d76e8 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d76e8:	2300      	movs	r3, #0
   d76ea:	461a      	mov	r2, r3
   d76ec:	4619      	mov	r1, r3
   d76ee:	6840      	ldr	r0, [r0, #4]
   d76f0:	f7fe bf66 	b.w	d65c0 <network_off>

000d76f4 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d76f4:	2300      	movs	r3, #0
   d76f6:	461a      	mov	r2, r3
   d76f8:	4619      	mov	r1, r3
   d76fa:	6840      	ldr	r0, [r0, #4]
   d76fc:	f7fe bf58 	b.w	d65b0 <network_on>

000d7700 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7700:	2200      	movs	r2, #0
   d7702:	4611      	mov	r1, r2
   d7704:	6840      	ldr	r0, [r0, #4]
   d7706:	f7fe bf3b 	b.w	d6580 <network_connecting>

000d770a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d770a:	2200      	movs	r2, #0
   d770c:	2102      	movs	r1, #2
   d770e:	6840      	ldr	r0, [r0, #4]
   d7710:	f7fe bf3e 	b.w	d6590 <network_disconnect>

000d7714 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7714:	2300      	movs	r3, #0
   d7716:	461a      	mov	r2, r3
   d7718:	6840      	ldr	r0, [r0, #4]
   d771a:	f7fe bf29 	b.w	d6570 <network_connect>
	...

000d7720 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7720:	4b02      	ldr	r3, [pc, #8]	; (d772c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7722:	2204      	movs	r2, #4
   d7724:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7726:	4a02      	ldr	r2, [pc, #8]	; (d7730 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7728:	601a      	str	r2, [r3, #0]
   d772a:	4770      	bx	lr
   d772c:	2003e720 	.word	0x2003e720
   d7730:	000d85f4 	.word	0x000d85f4

000d7734 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7734:	2300      	movs	r3, #0
   d7736:	461a      	mov	r2, r3
   d7738:	6840      	ldr	r0, [r0, #4]
   d773a:	f7fe bf19 	b.w	d6570 <network_connect>

000d773e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d773e:	2200      	movs	r2, #0
   d7740:	2102      	movs	r1, #2
   d7742:	6840      	ldr	r0, [r0, #4]
   d7744:	f7fe bf24 	b.w	d6590 <network_disconnect>

000d7748 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7748:	2200      	movs	r2, #0
   d774a:	4611      	mov	r1, r2
   d774c:	6840      	ldr	r0, [r0, #4]
   d774e:	f7fe bf17 	b.w	d6580 <network_connecting>

000d7752 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7752:	2200      	movs	r2, #0
   d7754:	4611      	mov	r1, r2
   d7756:	6840      	ldr	r0, [r0, #4]
   d7758:	f7fe bf22 	b.w	d65a0 <network_ready>

000d775c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d775c:	2300      	movs	r3, #0
   d775e:	461a      	mov	r2, r3
   d7760:	4619      	mov	r1, r3
   d7762:	6840      	ldr	r0, [r0, #4]
   d7764:	f7fe bf24 	b.w	d65b0 <network_on>

000d7768 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7768:	2300      	movs	r3, #0
   d776a:	461a      	mov	r2, r3
   d776c:	4619      	mov	r1, r3
   d776e:	6840      	ldr	r0, [r0, #4]
   d7770:	f7fe bf26 	b.w	d65c0 <network_off>

000d7774 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7774:	2200      	movs	r2, #0
   d7776:	f081 0101 	eor.w	r1, r1, #1
   d777a:	6840      	ldr	r0, [r0, #4]
   d777c:	f7fe bf28 	b.w	d65d0 <network_listen>

000d7780 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7780:	2200      	movs	r2, #0
   d7782:	6840      	ldr	r0, [r0, #4]
   d7784:	f7fe bf34 	b.w	d65f0 <network_set_listen_timeout>

000d7788 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7788:	2200      	movs	r2, #0
   d778a:	4611      	mov	r1, r2
   d778c:	6840      	ldr	r0, [r0, #4]
   d778e:	f7fe bf37 	b.w	d6600 <network_get_listen_timeout>

000d7792 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7792:	2200      	movs	r2, #0
   d7794:	4611      	mov	r1, r2
   d7796:	6840      	ldr	r0, [r0, #4]
   d7798:	f7fe bf22 	b.w	d65e0 <network_listening>

000d779c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d779c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d77a0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d77a2:	b095      	sub	sp, #84	; 0x54
   d77a4:	4616      	mov	r6, r2
   d77a6:	460d      	mov	r5, r1
   d77a8:	4607      	mov	r7, r0
    IPAddress addr;
   d77aa:	f7ff fa1d 	bl	d6be8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d77ae:	4621      	mov	r1, r4
   d77b0:	2220      	movs	r2, #32
   d77b2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d77b4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d77b6:	f000 faae 	bl	d7d16 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d77ba:	2340      	movs	r3, #64	; 0x40
   d77bc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d77be:	4621      	mov	r1, r4
   d77c0:	466b      	mov	r3, sp
   d77c2:	aa0c      	add	r2, sp, #48	; 0x30
   d77c4:	4630      	mov	r0, r6
   d77c6:	f7fe fc9f 	bl	d6108 <netdb_getaddrinfo>
    if (!r) {
   d77ca:	4604      	mov	r4, r0
   d77cc:	2800      	cmp	r0, #0
   d77ce:	d144      	bne.n	d785a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d77d0:	4602      	mov	r2, r0
   d77d2:	2101      	movs	r1, #1
   d77d4:	6868      	ldr	r0, [r5, #4]
   d77d6:	f7fe fee3 	bl	d65a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77da:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d77dc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77de:	4622      	mov	r2, r4
   d77e0:	6868      	ldr	r0, [r5, #4]
   d77e2:	f7fe fedd 	bl	d65a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77e6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d77e8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d77ea:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77ec:	2e00      	cmp	r6, #0
   d77ee:	d034      	beq.n	d785a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d77f0:	2900      	cmp	r1, #0
   d77f2:	d132      	bne.n	d785a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d77f4:	6873      	ldr	r3, [r6, #4]
   d77f6:	2b02      	cmp	r3, #2
   d77f8:	d002      	beq.n	d7800 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d77fa:	2b0a      	cmp	r3, #10
   d77fc:	d009      	beq.n	d7812 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d77fe:	e02a      	b.n	d7856 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7800:	f1b8 0f00 	cmp.w	r8, #0
   d7804:	d027      	beq.n	d7856 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7806:	6971      	ldr	r1, [r6, #20]
   d7808:	4638      	mov	r0, r7
   d780a:	3104      	adds	r1, #4
   d780c:	f7ff fa2f 	bl	d6c6e <_ZN9IPAddressaSEPKh>
   d7810:	e020      	b.n	d7854 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7812:	f1b9 0f00 	cmp.w	r9, #0
   d7816:	d01e      	beq.n	d7856 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7818:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d781a:	2211      	movs	r2, #17
   d781c:	a801      	add	r0, sp, #4
   d781e:	f000 fa7a 	bl	d7d16 <memset>
                    a.v = 6;
   d7822:	2306      	movs	r3, #6
   d7824:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7828:	ad01      	add	r5, sp, #4
   d782a:	f104 0308 	add.w	r3, r4, #8
   d782e:	3418      	adds	r4, #24
   d7830:	6818      	ldr	r0, [r3, #0]
   d7832:	6859      	ldr	r1, [r3, #4]
   d7834:	462a      	mov	r2, r5
   d7836:	c203      	stmia	r2!, {r0, r1}
   d7838:	3308      	adds	r3, #8
   d783a:	42a3      	cmp	r3, r4
   d783c:	4615      	mov	r5, r2
   d783e:	d1f7      	bne.n	d7830 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7840:	a901      	add	r1, sp, #4
   d7842:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7844:	ad07      	add	r5, sp, #28
   d7846:	f7ff f9dd 	bl	d6c04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d784a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d784c:	1d3c      	adds	r4, r7, #4
   d784e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7850:	682b      	ldr	r3, [r5, #0]
   d7852:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7854:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7856:	69f6      	ldr	r6, [r6, #28]
   d7858:	e7c8      	b.n	d77ec <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d785a:	9800      	ldr	r0, [sp, #0]
   d785c:	f7fe fc4c 	bl	d60f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7860:	4638      	mov	r0, r7
   d7862:	b015      	add	sp, #84	; 0x54
   d7864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7868 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7868:	4b02      	ldr	r3, [pc, #8]	; (d7874 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d786a:	4a03      	ldr	r2, [pc, #12]	; (d7878 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d786c:	601a      	str	r2, [r3, #0]
   d786e:	2200      	movs	r2, #0
   d7870:	605a      	str	r2, [r3, #4]
   d7872:	4770      	bx	lr
   d7874:	2003e728 	.word	0x2003e728
   d7878:	000d8628 	.word	0x000d8628

000d787c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d787c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d787e:	4e18      	ldr	r6, [pc, #96]	; (d78e0 <pinAvailable+0x64>)
   d7880:	6831      	ldr	r1, [r6, #0]
   d7882:	f011 0501 	ands.w	r5, r1, #1
   d7886:	4604      	mov	r4, r0
   d7888:	d10a      	bne.n	d78a0 <pinAvailable+0x24>
   d788a:	4630      	mov	r0, r6
   d788c:	f7fc fc14 	bl	d40b8 <__cxa_guard_acquire>
   d7890:	b130      	cbz	r0, d78a0 <pinAvailable+0x24>
   d7892:	4629      	mov	r1, r5
   d7894:	4813      	ldr	r0, [pc, #76]	; (d78e4 <pinAvailable+0x68>)
   d7896:	f7fe ff2f 	bl	d66f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d789a:	4630      	mov	r0, r6
   d789c:	f7fc fc11 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d78a0:	4810      	ldr	r0, [pc, #64]	; (d78e4 <pinAvailable+0x68>)
   d78a2:	f7fe ffe6 	bl	d6872 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d78a6:	b128      	cbz	r0, d78b4 <pinAvailable+0x38>
   d78a8:	f1a4 030b 	sub.w	r3, r4, #11
   d78ac:	2b02      	cmp	r3, #2
   d78ae:	d801      	bhi.n	d78b4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d78b0:	2000      	movs	r0, #0
   d78b2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d78b4:	f000 f886 	bl	d79c4 <_Z19__fetch_global_Wirev>
   d78b8:	f7ff fb74 	bl	d6fa4 <_ZN7TwoWire9isEnabledEv>
   d78bc:	b108      	cbz	r0, d78c2 <pinAvailable+0x46>
   d78be:	2c01      	cmp	r4, #1
   d78c0:	d9f6      	bls.n	d78b0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d78c2:	f7ff fac9 	bl	d6e58 <_Z22__fetch_global_Serial1v>
   d78c6:	f7ff fac4 	bl	d6e52 <_ZN11USARTSerial9isEnabledEv>
   d78ca:	b118      	cbz	r0, d78d4 <pinAvailable+0x58>
   d78cc:	f1a4 0309 	sub.w	r3, r4, #9
   d78d0:	2b01      	cmp	r3, #1
   d78d2:	d9ed      	bls.n	d78b0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d78d4:	2c23      	cmp	r4, #35	; 0x23
   d78d6:	bf8c      	ite	hi
   d78d8:	2000      	movhi	r0, #0
   d78da:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d78dc:	bd70      	pop	{r4, r5, r6, pc}
   d78de:	bf00      	nop
   d78e0:	2003dd0c 	.word	0x2003dd0c
   d78e4:	2003dd10 	.word	0x2003dd10

000d78e8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d78e8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d78ea:	b538      	push	{r3, r4, r5, lr}
   d78ec:	4604      	mov	r4, r0
   d78ee:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d78f0:	d80a      	bhi.n	d7908 <pinMode+0x20>
   d78f2:	29ff      	cmp	r1, #255	; 0xff
   d78f4:	d008      	beq.n	d7908 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d78f6:	f7ff ffc1 	bl	d787c <pinAvailable>
   d78fa:	b128      	cbz	r0, d7908 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d78fc:	4629      	mov	r1, r5
   d78fe:	4620      	mov	r0, r4
}
   d7900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7904:	f7fe bc18 	b.w	d6138 <HAL_Pin_Mode>
   d7908:	bd38      	pop	{r3, r4, r5, pc}

000d790a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d790a:	b538      	push	{r3, r4, r5, lr}
   d790c:	4604      	mov	r4, r0
   d790e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7910:	f7fe fc1a 	bl	d6148 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7914:	28ff      	cmp	r0, #255	; 0xff
   d7916:	d010      	beq.n	d793a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7918:	2806      	cmp	r0, #6
   d791a:	d804      	bhi.n	d7926 <digitalWrite+0x1c>
   d791c:	234d      	movs	r3, #77	; 0x4d
   d791e:	fa23 f000 	lsr.w	r0, r3, r0
   d7922:	07c3      	lsls	r3, r0, #31
   d7924:	d409      	bmi.n	d793a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7926:	4620      	mov	r0, r4
   d7928:	f7ff ffa8 	bl	d787c <pinAvailable>
   d792c:	b128      	cbz	r0, d793a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d792e:	4629      	mov	r1, r5
   d7930:	4620      	mov	r0, r4
}
   d7932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7936:	f7fe bc0f 	b.w	d6158 <HAL_GPIO_Write>
   d793a:	bd38      	pop	{r3, r4, r5, pc}

000d793c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d793c:	b510      	push	{r4, lr}
   d793e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7940:	f7fe fc02 	bl	d6148 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7944:	3804      	subs	r0, #4
   d7946:	b2c0      	uxtb	r0, r0
   d7948:	2801      	cmp	r0, #1
   d794a:	d908      	bls.n	d795e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d794c:	4620      	mov	r0, r4
   d794e:	f7ff ff95 	bl	d787c <pinAvailable>
   d7952:	b120      	cbz	r0, d795e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7954:	4620      	mov	r0, r4
}
   d7956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d795a:	f7fe bc05 	b.w	d6168 <HAL_GPIO_Read>
}
   d795e:	2000      	movs	r0, #0
   d7960:	bd10      	pop	{r4, pc}

000d7962 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7962:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7964:	b510      	push	{r4, lr}
   d7966:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7968:	bf9c      	itt	ls
   d796a:	340e      	addls	r4, #14
   d796c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d796e:	4620      	mov	r0, r4
   d7970:	f7ff ff84 	bl	d787c <pinAvailable>
   d7974:	b150      	cbz	r0, d798c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7976:	2103      	movs	r1, #3
   d7978:	4620      	mov	r0, r4
   d797a:	f7fe fbd5 	bl	d6128 <HAL_Validate_Pin_Function>
   d797e:	2803      	cmp	r0, #3
   d7980:	d104      	bne.n	d798c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7982:	4620      	mov	r0, r4
}
   d7984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7988:	f7fe bbf6 	b.w	d6178 <HAL_ADC_Read>
}
   d798c:	2000      	movs	r0, #0
   d798e:	bd10      	pop	{r4, pc}

000d7990 <_Z17acquireWireBufferv>:
   d7990:	b570      	push	{r4, r5, r6, lr}
   d7992:	4604      	mov	r4, r0
   d7994:	2514      	movs	r5, #20
   d7996:	462a      	mov	r2, r5
   d7998:	4e09      	ldr	r6, [pc, #36]	; (d79c0 <_Z17acquireWireBufferv+0x30>)
   d799a:	2100      	movs	r1, #0
   d799c:	f000 f9bb 	bl	d7d16 <memset>
   d79a0:	8025      	strh	r5, [r4, #0]
   d79a2:	2520      	movs	r5, #32
   d79a4:	4631      	mov	r1, r6
   d79a6:	60a5      	str	r5, [r4, #8]
   d79a8:	6125      	str	r5, [r4, #16]
   d79aa:	4628      	mov	r0, r5
   d79ac:	f000 f840 	bl	d7a30 <_ZnajRKSt9nothrow_t>
   d79b0:	4631      	mov	r1, r6
   d79b2:	6060      	str	r0, [r4, #4]
   d79b4:	4628      	mov	r0, r5
   d79b6:	f000 f83b 	bl	d7a30 <_ZnajRKSt9nothrow_t>
   d79ba:	60e0      	str	r0, [r4, #12]
   d79bc:	4620      	mov	r0, r4
   d79be:	bd70      	pop	{r4, r5, r6, pc}
   d79c0:	000d8654 	.word	0x000d8654

000d79c4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d79c4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d79c6:	4d0e      	ldr	r5, [pc, #56]	; (d7a00 <_Z19__fetch_global_Wirev+0x3c>)
   d79c8:	6829      	ldr	r1, [r5, #0]
   d79ca:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d79ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d79d0:	d113      	bne.n	d79fa <_Z19__fetch_global_Wirev+0x36>
   d79d2:	4628      	mov	r0, r5
   d79d4:	f7fc fb70 	bl	d40b8 <__cxa_guard_acquire>
   d79d8:	b178      	cbz	r0, d79fa <_Z19__fetch_global_Wirev+0x36>
   d79da:	a801      	add	r0, sp, #4
   d79dc:	f7ff ffd8 	bl	d7990 <_Z17acquireWireBufferv>
   d79e0:	aa01      	add	r2, sp, #4
   d79e2:	4621      	mov	r1, r4
   d79e4:	4807      	ldr	r0, [pc, #28]	; (d7a04 <_Z19__fetch_global_Wirev+0x40>)
   d79e6:	f7ff fa89 	bl	d6efc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d79ea:	4628      	mov	r0, r5
   d79ec:	f7fc fb69 	bl	d40c2 <__cxa_guard_release>
   d79f0:	4a05      	ldr	r2, [pc, #20]	; (d7a08 <_Z19__fetch_global_Wirev+0x44>)
   d79f2:	4906      	ldr	r1, [pc, #24]	; (d7a0c <_Z19__fetch_global_Wirev+0x48>)
   d79f4:	4803      	ldr	r0, [pc, #12]	; (d7a04 <_Z19__fetch_global_Wirev+0x40>)
   d79f6:	f000 f80b 	bl	d7a10 <__aeabi_atexit>
	return wire;
}
   d79fa:	4802      	ldr	r0, [pc, #8]	; (d7a04 <_Z19__fetch_global_Wirev+0x40>)
   d79fc:	b007      	add	sp, #28
   d79fe:	bd30      	pop	{r4, r5, pc}
   d7a00:	2003e734 	.word	0x2003e734
   d7a04:	2003e738 	.word	0x2003e738
   d7a08:	2003dd08 	.word	0x2003dd08
   d7a0c:	000d6ea5 	.word	0x000d6ea5

000d7a10 <__aeabi_atexit>:
   d7a10:	460b      	mov	r3, r1
   d7a12:	4601      	mov	r1, r0
   d7a14:	4618      	mov	r0, r3
   d7a16:	f000 b965 	b.w	d7ce4 <__cxa_atexit>
	...

000d7a1c <_ZSt15get_new_handlerv>:
   d7a1c:	4b02      	ldr	r3, [pc, #8]	; (d7a28 <_ZSt15get_new_handlerv+0xc>)
   d7a1e:	6818      	ldr	r0, [r3, #0]
   d7a20:	f3bf 8f5f 	dmb	sy
   d7a24:	4770      	bx	lr
   d7a26:	bf00      	nop
   d7a28:	2003e74c 	.word	0x2003e74c

000d7a2c <_ZdlPvj>:
   d7a2c:	f7fc bb35 	b.w	d409a <_ZdlPv>

000d7a30 <_ZnajRKSt9nothrow_t>:
   d7a30:	f000 b800 	b.w	d7a34 <_ZnwjRKSt9nothrow_t>

000d7a34 <_ZnwjRKSt9nothrow_t>:
   d7a34:	b510      	push	{r4, lr}
   d7a36:	2800      	cmp	r0, #0
   d7a38:	bf14      	ite	ne
   d7a3a:	4604      	movne	r4, r0
   d7a3c:	2401      	moveq	r4, #1
   d7a3e:	4620      	mov	r0, r4
   d7a40:	f7fe fdf6 	bl	d6630 <malloc>
   d7a44:	b920      	cbnz	r0, d7a50 <_ZnwjRKSt9nothrow_t+0x1c>
   d7a46:	f7ff ffe9 	bl	d7a1c <_ZSt15get_new_handlerv>
   d7a4a:	b108      	cbz	r0, d7a50 <_ZnwjRKSt9nothrow_t+0x1c>
   d7a4c:	4780      	blx	r0
   d7a4e:	e7f6      	b.n	d7a3e <_ZnwjRKSt9nothrow_t+0xa>
   d7a50:	bd10      	pop	{r4, pc}
	...

000d7a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7a54:	4b18      	ldr	r3, [pc, #96]	; (d7ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7a56:	681a      	ldr	r2, [r3, #0]
   d7a58:	07d1      	lsls	r1, r2, #31
   d7a5a:	bf5c      	itt	pl
   d7a5c:	2201      	movpl	r2, #1
   d7a5e:	601a      	strpl	r2, [r3, #0]
   d7a60:	4b16      	ldr	r3, [pc, #88]	; (d7abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7a62:	681a      	ldr	r2, [r3, #0]
   d7a64:	07d2      	lsls	r2, r2, #31
   d7a66:	bf5c      	itt	pl
   d7a68:	2201      	movpl	r2, #1
   d7a6a:	601a      	strpl	r2, [r3, #0]
   d7a6c:	4b14      	ldr	r3, [pc, #80]	; (d7ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7a6e:	681a      	ldr	r2, [r3, #0]
   d7a70:	07d0      	lsls	r0, r2, #31
   d7a72:	bf5c      	itt	pl
   d7a74:	2201      	movpl	r2, #1
   d7a76:	601a      	strpl	r2, [r3, #0]
   d7a78:	4b12      	ldr	r3, [pc, #72]	; (d7ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7a7a:	681a      	ldr	r2, [r3, #0]
   d7a7c:	07d1      	lsls	r1, r2, #31
   d7a7e:	bf5c      	itt	pl
   d7a80:	2201      	movpl	r2, #1
   d7a82:	601a      	strpl	r2, [r3, #0]
   d7a84:	4b10      	ldr	r3, [pc, #64]	; (d7ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7a86:	681a      	ldr	r2, [r3, #0]
   d7a88:	07d2      	lsls	r2, r2, #31
   d7a8a:	bf5c      	itt	pl
   d7a8c:	2201      	movpl	r2, #1
   d7a8e:	601a      	strpl	r2, [r3, #0]
   d7a90:	4b0e      	ldr	r3, [pc, #56]	; (d7acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7a92:	681a      	ldr	r2, [r3, #0]
   d7a94:	07d0      	lsls	r0, r2, #31
   d7a96:	bf5c      	itt	pl
   d7a98:	2201      	movpl	r2, #1
   d7a9a:	601a      	strpl	r2, [r3, #0]
   d7a9c:	4b0c      	ldr	r3, [pc, #48]	; (d7ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7a9e:	681a      	ldr	r2, [r3, #0]
   d7aa0:	07d1      	lsls	r1, r2, #31
   d7aa2:	bf5c      	itt	pl
   d7aa4:	2201      	movpl	r2, #1
   d7aa6:	601a      	strpl	r2, [r3, #0]
   d7aa8:	4b0a      	ldr	r3, [pc, #40]	; (d7ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7aaa:	681a      	ldr	r2, [r3, #0]
   d7aac:	07d2      	lsls	r2, r2, #31
   d7aae:	bf5c      	itt	pl
   d7ab0:	2201      	movpl	r2, #1
   d7ab2:	601a      	strpl	r2, [r3, #0]
   d7ab4:	4770      	bx	lr
   d7ab6:	bf00      	nop
   d7ab8:	2003e76c 	.word	0x2003e76c
   d7abc:	2003e768 	.word	0x2003e768
   d7ac0:	2003e764 	.word	0x2003e764
   d7ac4:	2003e760 	.word	0x2003e760
   d7ac8:	2003e75c 	.word	0x2003e75c
   d7acc:	2003e758 	.word	0x2003e758
   d7ad0:	2003e754 	.word	0x2003e754
   d7ad4:	2003e750 	.word	0x2003e750

000d7ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7ad8:	4b24      	ldr	r3, [pc, #144]	; (d7b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7ada:	681a      	ldr	r2, [r3, #0]
   d7adc:	07d0      	lsls	r0, r2, #31
   d7ade:	bf5c      	itt	pl
   d7ae0:	2201      	movpl	r2, #1
   d7ae2:	601a      	strpl	r2, [r3, #0]
   d7ae4:	4b22      	ldr	r3, [pc, #136]	; (d7b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7ae6:	681a      	ldr	r2, [r3, #0]
   d7ae8:	07d1      	lsls	r1, r2, #31
   d7aea:	bf5c      	itt	pl
   d7aec:	2201      	movpl	r2, #1
   d7aee:	601a      	strpl	r2, [r3, #0]
   d7af0:	4b20      	ldr	r3, [pc, #128]	; (d7b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7af2:	681a      	ldr	r2, [r3, #0]
   d7af4:	07d2      	lsls	r2, r2, #31
   d7af6:	bf5c      	itt	pl
   d7af8:	2201      	movpl	r2, #1
   d7afa:	601a      	strpl	r2, [r3, #0]
   d7afc:	4b1e      	ldr	r3, [pc, #120]	; (d7b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7afe:	681a      	ldr	r2, [r3, #0]
   d7b00:	07d0      	lsls	r0, r2, #31
   d7b02:	bf5c      	itt	pl
   d7b04:	2201      	movpl	r2, #1
   d7b06:	601a      	strpl	r2, [r3, #0]
   d7b08:	4b1c      	ldr	r3, [pc, #112]	; (d7b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7b0a:	681a      	ldr	r2, [r3, #0]
   d7b0c:	07d1      	lsls	r1, r2, #31
   d7b0e:	bf5c      	itt	pl
   d7b10:	2201      	movpl	r2, #1
   d7b12:	601a      	strpl	r2, [r3, #0]
   d7b14:	4b1a      	ldr	r3, [pc, #104]	; (d7b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7b16:	681a      	ldr	r2, [r3, #0]
   d7b18:	07d2      	lsls	r2, r2, #31
   d7b1a:	bf5c      	itt	pl
   d7b1c:	2201      	movpl	r2, #1
   d7b1e:	601a      	strpl	r2, [r3, #0]
   d7b20:	4b18      	ldr	r3, [pc, #96]	; (d7b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7b22:	681a      	ldr	r2, [r3, #0]
   d7b24:	07d0      	lsls	r0, r2, #31
   d7b26:	bf5c      	itt	pl
   d7b28:	2201      	movpl	r2, #1
   d7b2a:	601a      	strpl	r2, [r3, #0]
   d7b2c:	4b16      	ldr	r3, [pc, #88]	; (d7b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7b2e:	681a      	ldr	r2, [r3, #0]
   d7b30:	07d1      	lsls	r1, r2, #31
   d7b32:	bf5c      	itt	pl
   d7b34:	2201      	movpl	r2, #1
   d7b36:	601a      	strpl	r2, [r3, #0]
   d7b38:	4b14      	ldr	r3, [pc, #80]	; (d7b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7b3a:	681a      	ldr	r2, [r3, #0]
   d7b3c:	07d2      	lsls	r2, r2, #31
   d7b3e:	bf5c      	itt	pl
   d7b40:	2201      	movpl	r2, #1
   d7b42:	601a      	strpl	r2, [r3, #0]
   d7b44:	4b12      	ldr	r3, [pc, #72]	; (d7b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7b46:	681a      	ldr	r2, [r3, #0]
   d7b48:	07d0      	lsls	r0, r2, #31
   d7b4a:	bf5c      	itt	pl
   d7b4c:	2201      	movpl	r2, #1
   d7b4e:	601a      	strpl	r2, [r3, #0]
   d7b50:	4b10      	ldr	r3, [pc, #64]	; (d7b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7b52:	681a      	ldr	r2, [r3, #0]
   d7b54:	07d1      	lsls	r1, r2, #31
   d7b56:	bf5c      	itt	pl
   d7b58:	2201      	movpl	r2, #1
   d7b5a:	601a      	strpl	r2, [r3, #0]
   d7b5c:	4b0e      	ldr	r3, [pc, #56]	; (d7b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7b5e:	681a      	ldr	r2, [r3, #0]
   d7b60:	07d2      	lsls	r2, r2, #31
   d7b62:	bf5c      	itt	pl
   d7b64:	2201      	movpl	r2, #1
   d7b66:	601a      	strpl	r2, [r3, #0]
   d7b68:	4770      	bx	lr
   d7b6a:	bf00      	nop
   d7b6c:	2003e79c 	.word	0x2003e79c
   d7b70:	2003e798 	.word	0x2003e798
   d7b74:	2003e794 	.word	0x2003e794
   d7b78:	2003e790 	.word	0x2003e790
   d7b7c:	2003e78c 	.word	0x2003e78c
   d7b80:	2003e788 	.word	0x2003e788
   d7b84:	2003e784 	.word	0x2003e784
   d7b88:	2003e780 	.word	0x2003e780
   d7b8c:	2003e77c 	.word	0x2003e77c
   d7b90:	2003e778 	.word	0x2003e778
   d7b94:	2003e774 	.word	0x2003e774
   d7b98:	2003e770 	.word	0x2003e770

000d7b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7b9c:	4b24      	ldr	r3, [pc, #144]	; (d7c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7b9e:	681a      	ldr	r2, [r3, #0]
   d7ba0:	07d0      	lsls	r0, r2, #31
   d7ba2:	bf5c      	itt	pl
   d7ba4:	2201      	movpl	r2, #1
   d7ba6:	601a      	strpl	r2, [r3, #0]
   d7ba8:	4b22      	ldr	r3, [pc, #136]	; (d7c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7baa:	681a      	ldr	r2, [r3, #0]
   d7bac:	07d1      	lsls	r1, r2, #31
   d7bae:	bf5c      	itt	pl
   d7bb0:	2201      	movpl	r2, #1
   d7bb2:	601a      	strpl	r2, [r3, #0]
   d7bb4:	4b20      	ldr	r3, [pc, #128]	; (d7c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7bb6:	681a      	ldr	r2, [r3, #0]
   d7bb8:	07d2      	lsls	r2, r2, #31
   d7bba:	bf5c      	itt	pl
   d7bbc:	2201      	movpl	r2, #1
   d7bbe:	601a      	strpl	r2, [r3, #0]
   d7bc0:	4b1e      	ldr	r3, [pc, #120]	; (d7c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7bc2:	681a      	ldr	r2, [r3, #0]
   d7bc4:	07d0      	lsls	r0, r2, #31
   d7bc6:	bf5c      	itt	pl
   d7bc8:	2201      	movpl	r2, #1
   d7bca:	601a      	strpl	r2, [r3, #0]
   d7bcc:	4b1c      	ldr	r3, [pc, #112]	; (d7c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7bce:	681a      	ldr	r2, [r3, #0]
   d7bd0:	07d1      	lsls	r1, r2, #31
   d7bd2:	bf5c      	itt	pl
   d7bd4:	2201      	movpl	r2, #1
   d7bd6:	601a      	strpl	r2, [r3, #0]
   d7bd8:	4b1a      	ldr	r3, [pc, #104]	; (d7c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7bda:	681a      	ldr	r2, [r3, #0]
   d7bdc:	07d2      	lsls	r2, r2, #31
   d7bde:	bf5c      	itt	pl
   d7be0:	2201      	movpl	r2, #1
   d7be2:	601a      	strpl	r2, [r3, #0]
   d7be4:	4b18      	ldr	r3, [pc, #96]	; (d7c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7be6:	681a      	ldr	r2, [r3, #0]
   d7be8:	07d0      	lsls	r0, r2, #31
   d7bea:	bf5c      	itt	pl
   d7bec:	2201      	movpl	r2, #1
   d7bee:	601a      	strpl	r2, [r3, #0]
   d7bf0:	4b16      	ldr	r3, [pc, #88]	; (d7c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7bf2:	681a      	ldr	r2, [r3, #0]
   d7bf4:	07d1      	lsls	r1, r2, #31
   d7bf6:	bf5c      	itt	pl
   d7bf8:	2201      	movpl	r2, #1
   d7bfa:	601a      	strpl	r2, [r3, #0]
   d7bfc:	4b14      	ldr	r3, [pc, #80]	; (d7c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7bfe:	681a      	ldr	r2, [r3, #0]
   d7c00:	07d2      	lsls	r2, r2, #31
   d7c02:	bf5c      	itt	pl
   d7c04:	2201      	movpl	r2, #1
   d7c06:	601a      	strpl	r2, [r3, #0]
   d7c08:	4b12      	ldr	r3, [pc, #72]	; (d7c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7c0a:	681a      	ldr	r2, [r3, #0]
   d7c0c:	07d0      	lsls	r0, r2, #31
   d7c0e:	bf5c      	itt	pl
   d7c10:	2201      	movpl	r2, #1
   d7c12:	601a      	strpl	r2, [r3, #0]
   d7c14:	4b10      	ldr	r3, [pc, #64]	; (d7c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7c16:	681a      	ldr	r2, [r3, #0]
   d7c18:	07d1      	lsls	r1, r2, #31
   d7c1a:	bf5c      	itt	pl
   d7c1c:	2201      	movpl	r2, #1
   d7c1e:	601a      	strpl	r2, [r3, #0]
   d7c20:	4b0e      	ldr	r3, [pc, #56]	; (d7c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7c22:	681a      	ldr	r2, [r3, #0]
   d7c24:	07d2      	lsls	r2, r2, #31
   d7c26:	bf5c      	itt	pl
   d7c28:	2201      	movpl	r2, #1
   d7c2a:	601a      	strpl	r2, [r3, #0]
   d7c2c:	4770      	bx	lr
   d7c2e:	bf00      	nop
   d7c30:	2003e7cc 	.word	0x2003e7cc
   d7c34:	2003e7c8 	.word	0x2003e7c8
   d7c38:	2003e7c4 	.word	0x2003e7c4
   d7c3c:	2003e7c0 	.word	0x2003e7c0
   d7c40:	2003e7bc 	.word	0x2003e7bc
   d7c44:	2003e7b8 	.word	0x2003e7b8
   d7c48:	2003e7b4 	.word	0x2003e7b4
   d7c4c:	2003e7b0 	.word	0x2003e7b0
   d7c50:	2003e7ac 	.word	0x2003e7ac
   d7c54:	2003e7a8 	.word	0x2003e7a8
   d7c58:	2003e7a4 	.word	0x2003e7a4
   d7c5c:	2003e7a0 	.word	0x2003e7a0

000d7c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7c60:	4b18      	ldr	r3, [pc, #96]	; (d7cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7c62:	681a      	ldr	r2, [r3, #0]
   d7c64:	07d1      	lsls	r1, r2, #31
   d7c66:	bf5c      	itt	pl
   d7c68:	2201      	movpl	r2, #1
   d7c6a:	601a      	strpl	r2, [r3, #0]
   d7c6c:	4b16      	ldr	r3, [pc, #88]	; (d7cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7c6e:	681a      	ldr	r2, [r3, #0]
   d7c70:	07d2      	lsls	r2, r2, #31
   d7c72:	bf5c      	itt	pl
   d7c74:	2201      	movpl	r2, #1
   d7c76:	601a      	strpl	r2, [r3, #0]
   d7c78:	4b14      	ldr	r3, [pc, #80]	; (d7ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7c7a:	681a      	ldr	r2, [r3, #0]
   d7c7c:	07d0      	lsls	r0, r2, #31
   d7c7e:	bf5c      	itt	pl
   d7c80:	2201      	movpl	r2, #1
   d7c82:	601a      	strpl	r2, [r3, #0]
   d7c84:	4b12      	ldr	r3, [pc, #72]	; (d7cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7c86:	681a      	ldr	r2, [r3, #0]
   d7c88:	07d1      	lsls	r1, r2, #31
   d7c8a:	bf5c      	itt	pl
   d7c8c:	2201      	movpl	r2, #1
   d7c8e:	601a      	strpl	r2, [r3, #0]
   d7c90:	4b10      	ldr	r3, [pc, #64]	; (d7cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7c92:	681a      	ldr	r2, [r3, #0]
   d7c94:	07d2      	lsls	r2, r2, #31
   d7c96:	bf5c      	itt	pl
   d7c98:	2201      	movpl	r2, #1
   d7c9a:	601a      	strpl	r2, [r3, #0]
   d7c9c:	4b0e      	ldr	r3, [pc, #56]	; (d7cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7c9e:	681a      	ldr	r2, [r3, #0]
   d7ca0:	07d0      	lsls	r0, r2, #31
   d7ca2:	bf5c      	itt	pl
   d7ca4:	2201      	movpl	r2, #1
   d7ca6:	601a      	strpl	r2, [r3, #0]
   d7ca8:	4b0c      	ldr	r3, [pc, #48]	; (d7cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7caa:	681a      	ldr	r2, [r3, #0]
   d7cac:	07d1      	lsls	r1, r2, #31
   d7cae:	bf5c      	itt	pl
   d7cb0:	2201      	movpl	r2, #1
   d7cb2:	601a      	strpl	r2, [r3, #0]
   d7cb4:	4b0a      	ldr	r3, [pc, #40]	; (d7ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7cb6:	681a      	ldr	r2, [r3, #0]
   d7cb8:	07d2      	lsls	r2, r2, #31
   d7cba:	bf5c      	itt	pl
   d7cbc:	2201      	movpl	r2, #1
   d7cbe:	601a      	strpl	r2, [r3, #0]
   d7cc0:	4770      	bx	lr
   d7cc2:	bf00      	nop
   d7cc4:	2003e7ec 	.word	0x2003e7ec
   d7cc8:	2003e7e8 	.word	0x2003e7e8
   d7ccc:	2003e7e4 	.word	0x2003e7e4
   d7cd0:	2003e7e0 	.word	0x2003e7e0
   d7cd4:	2003e7dc 	.word	0x2003e7dc
   d7cd8:	2003e7d8 	.word	0x2003e7d8
   d7cdc:	2003e7d4 	.word	0x2003e7d4
   d7ce0:	2003e7d0 	.word	0x2003e7d0

000d7ce4 <__cxa_atexit>:
   d7ce4:	b510      	push	{r4, lr}
   d7ce6:	4c05      	ldr	r4, [pc, #20]	; (d7cfc <__cxa_atexit+0x18>)
   d7ce8:	4613      	mov	r3, r2
   d7cea:	b12c      	cbz	r4, d7cf8 <__cxa_atexit+0x14>
   d7cec:	460a      	mov	r2, r1
   d7cee:	4601      	mov	r1, r0
   d7cf0:	2002      	movs	r0, #2
   d7cf2:	f3af 8000 	nop.w
   d7cf6:	bd10      	pop	{r4, pc}
   d7cf8:	4620      	mov	r0, r4
   d7cfa:	bd10      	pop	{r4, pc}
   d7cfc:	00000000 	.word	0x00000000

000d7d00 <memcpy>:
   d7d00:	b510      	push	{r4, lr}
   d7d02:	1e43      	subs	r3, r0, #1
   d7d04:	440a      	add	r2, r1
   d7d06:	4291      	cmp	r1, r2
   d7d08:	d004      	beq.n	d7d14 <memcpy+0x14>
   d7d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7d12:	e7f8      	b.n	d7d06 <memcpy+0x6>
   d7d14:	bd10      	pop	{r4, pc}

000d7d16 <memset>:
   d7d16:	4402      	add	r2, r0
   d7d18:	4603      	mov	r3, r0
   d7d1a:	4293      	cmp	r3, r2
   d7d1c:	d002      	beq.n	d7d24 <memset+0xe>
   d7d1e:	f803 1b01 	strb.w	r1, [r3], #1
   d7d22:	e7fa      	b.n	d7d1a <memset+0x4>
   d7d24:	4770      	bx	lr
	...

000d7d28 <srand>:
   d7d28:	b538      	push	{r3, r4, r5, lr}
   d7d2a:	4b12      	ldr	r3, [pc, #72]	; (d7d74 <srand+0x4c>)
   d7d2c:	681c      	ldr	r4, [r3, #0]
   d7d2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7d30:	4605      	mov	r5, r0
   d7d32:	b9d3      	cbnz	r3, d7d6a <srand+0x42>
   d7d34:	2018      	movs	r0, #24
   d7d36:	f7fe fc7b 	bl	d6630 <malloc>
   d7d3a:	f243 330e 	movw	r3, #13070	; 0x330e
   d7d3e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7d40:	8003      	strh	r3, [r0, #0]
   d7d42:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7d46:	8043      	strh	r3, [r0, #2]
   d7d48:	f241 2334 	movw	r3, #4660	; 0x1234
   d7d4c:	8083      	strh	r3, [r0, #4]
   d7d4e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7d52:	80c3      	strh	r3, [r0, #6]
   d7d54:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7d58:	8103      	strh	r3, [r0, #8]
   d7d5a:	2305      	movs	r3, #5
   d7d5c:	8143      	strh	r3, [r0, #10]
   d7d5e:	230b      	movs	r3, #11
   d7d60:	8183      	strh	r3, [r0, #12]
   d7d62:	2201      	movs	r2, #1
   d7d64:	2300      	movs	r3, #0
   d7d66:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7d6c:	2200      	movs	r2, #0
   d7d6e:	611d      	str	r5, [r3, #16]
   d7d70:	615a      	str	r2, [r3, #20]
   d7d72:	bd38      	pop	{r3, r4, r5, pc}
   d7d74:	2003dd04 	.word	0x2003dd04

000d7d78 <strcpy>:
   d7d78:	4603      	mov	r3, r0
   d7d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7d7e:	f803 2b01 	strb.w	r2, [r3], #1
   d7d82:	2a00      	cmp	r2, #0
   d7d84:	d1f9      	bne.n	d7d7a <strcpy+0x2>
   d7d86:	4770      	bx	lr

000d7d88 <strlen>:
   d7d88:	4603      	mov	r3, r0
   d7d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7d8e:	2a00      	cmp	r2, #0
   d7d90:	d1fb      	bne.n	d7d8a <strlen+0x2>
   d7d92:	1a18      	subs	r0, r3, r0
   d7d94:	3801      	subs	r0, #1
   d7d96:	4770      	bx	lr

000d7d98 <dynalib_user>:
   d7d98:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7da8:	0000 0000                                   ....

000d7dac <_ZTVN8particle13__SPISettingsE>:
	...
   d7db4:	40e9 000d                                   .@..

000d7db8 <_ZTV4File>:
	...
   d7dc0:	40e5 000d 418b 000d 4173 000d 416d 000d     .@...A..sA..mA..
   d7dd0:	40c9 000d 414d 000d 4147 000d 4141 000d     .@..MA..GA..AA..
   d7de0:	ff7e 0006 0001 0000 ef00 6564 6166 6c75     ~.........defaul
   d7df0:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   d7e00:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   d7e10:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   d7e20:	6c25 2075 7325 4d20 444f 2545 3e64 6900     %lu %s MODE%d>.i
   d7e30:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   d7e40:	6c69 6465 0021 4453 6f6c 2067 6e69 7469     iled!.SDlog init
   d7e50:	4400 5046 616c 6579 2072 6e69 7469 6620     .DFPlayer init f
   d7e60:	6961 656c 0064 4644 6c50 7961 7265 6920     ailed.DFPlayer i
   d7e70:	696e 0074 6e49 7469 6169 696c 617a 6974     nit.Initializati
   d7e80:	6e6f 6620 6e69 7369 6568 0064 6f63 6e6e     on finished.conn
   d7e90:	6365 6974 676e 7420 206f 514d 5454 2e20     ecting to MQTT .
   d7ea0:	2e2e 7200 7465 7972 6e69 2067 514d 5454     ...retrying MQTT
   d7eb0:	6320 6e6f 656e 7463 6f69 206e 6e69 3520      connection in 5
   d7ec0:	7320 6365 6e6f 7364 2e2e 002e 514d 5454      seconds....MQTT
   d7ed0:	6320 6e6f 656e 7463 6465 003f 4f43 203a      connected?.CO: 
   d7ee0:	3025 322e 2066 7070 206d 000a 6144 6174     %0.2f ppm ..Data
   d7ef0:	6f4c 2e67 7363 0076 6941 2072 7551 6c61     Log.csv.Air Qual
   d7f00:	7469 2079 6177 6e72 6e69 2e67 4120 2051     ity warning. AQ 
   d7f10:	6572 6461 203a 6925 0a20 4100 7269 5120     read: %i ..Air Q
   d7f20:	6175 696c 7974 5220 6165 3a64 2520 2069     uality Read: %i 
   d7f30:	000a 5141 7720 6972 6574 6520 7272 726f     ..AQ write error
   d7f40:	4d00 2d51 2039 6177 6e72 6e69 2e67 4d20     .MQ-9 warning. M
   d7f50:	2d51 2039 6572 6461 203a 6925 0a20 4d00     Q-9 read: %i ..M
   d7f60:	2d51 2039 7277 7469 2065 7265 6f72 0072     Q-9 write error.
   d7f70:	6f6e 696d 616e 206c 6572 6461 2e73 4d20     nominal reads. M
   d7f80:	3951 203a 6925 4120 3a51 2520 2069 6554     Q9: %i AQ: %i Te
   d7f90:	706d 7265 7461 7275 3a65 0a20 6e00 6d6f     mperature: ..nom
   d7fa0:	6e69 6c61 7220 6165 6964 676e 2e73 6e20     inal readings. n
   d7fb0:	746f 6968 676e 7420 206f 6572 6f63 6472     othing to record
   d7fc0:	6e00 6d6f 6e69 6c61 7220 6165 6964 676e     .nominal reading
   d7fd0:	2073 7277 7469 2065 7265 6f72 2e72 4400     s write error..D
   d7fe0:	4e41 4547 2052 4d49 494d 414e 544e 202e     ANGER IMMINANT. 
   d7ff0:	514d 392d 203a 6925 4120 3a51 2520 2069     MQ-9: %i AQ: %i 
   d8000:	6554 706d 203a 6925 0a20 4800 6769 2068     Temp: %i ..High 
   d8010:	6144 676e 7265 202e 514d 392d 203a 6925     Danger. MQ-9: %i
   d8020:	4120 3a51 2520 2069 6554 706d 2520 2069      AQ: %i Temp %i 
   d8030:	000a 6948 6867 6420 6e61 6567 2072 7277     ..High danger wr
   d8040:	7469 2065 7265 6f72 2e72 6d00 7561 6972     ite error..mauri
   d8050:	6963 766f 3939 6900 2e6f 6461 6661 7572     ciov99.io.adafru
   d8060:	7469 632e 6d6f 7400 6968 6973 6173 6172     it.com.thisisara
   d8070:	646e 6d6f 7473 6972 676e 6f66 6172 656b     ndomstringforake
   d8080:	0079 616d 7275 6369 6f69 3976 2f39 6566     y.mauriciov99/fe
   d8090:	6465 2f73 0020 616d 7275 6369 6f69 3976     eds/ .mauriciov9
   d80a0:	2f39 6566 6465 2f73 6d53 7261 5f74 6548     9/feeds/Smart_He
   d80b0:	6d6c 7465 425f 454d 6d00 7561 6972 6963     lmet_BME.maurici
   d80c0:	766f 3939 662f 6565 7364 532f 616d 7472     ov99/feeds/Smart
   d80d0:	485f 6c65 656d 5f74 514d 392d 6d00 7561     _Helmet_MQ-9.mau
   d80e0:	6972 6963 766f 3939 662f 6565 7364 532f     riciov99/feeds/S
   d80f0:	616d 7472 485f 6c65 656d 5f74 6941 5172     mart_Helmet_AirQ
   d8100:	6175 696c 7974 0000 c000 4001 1000 4002     uality.....@...@
   d8110:	2000 4002                                   . .@

000d8114 <CSWTCH.65>:
   d8114:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   d8124:	0050 0000                                   P...

000d8128 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d8130:	40e7 000d 4391 000d 4edd 000d 4f89 000d     .@...C...N...O..
   d8140:	4fbb 000d 4ef1 000d 4f31 000d               .O...N..1O..

000d814c <_ZTV13Adafruit_MQTT>:
	...
   d815c:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   d816c:	40a5 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   d817c:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   d818c:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   d819c:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   d81ac:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   d81bc:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   d81cc:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   d81dc:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   d81ec:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   d81fc:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   d820c:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   d821c:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   d822c:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   d823c:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   d824c:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   d825c:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   d826c:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   d827c:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   d828c:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   d829c:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   d82ac:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   d82bc:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   d82cc:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   d82dc:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   d82ec:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   d82fc:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   d830c:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   d831c:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   d832c:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   d833c:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   d834c:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   d835c:	7465 6961 736c 002e                         etails..

000d8364 <_ZTVN5spark13EthernetClassE>:
	...
   d836c:	66cf 000d 66c5 000d 66bb 000d 66b1 000d     .f...f...f...f..
   d837c:	66a5 000d 6699 000d 668d 000d 6685 000d     .f...f...f...f..
   d838c:	667b 000d 6671 000d 779d 000d               {f..qf...w..

000d8398 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8398:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d83a8:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d83b8:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d83c8:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d83d8:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d83e8:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d83f8:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d8408:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d8418:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   d8428:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
   d8438:	6c69 2073 203d 0d00 000a 6e6c 6600 006e     ils = ....ln.fn.
   d8448:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d8458:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d8468:	7000 6e61 6369 6100 6c6c 5a00 2500 302b     .panic.all.Z.%+0
   d8478:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
   d8488:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d8498:	6d69 0065                                   ime.

000d849c <_ZTV9IPAddress>:
	...
   d84a4:	6b85 000d 6b75 000d 6b77 000d               .k..uk..wk..

000d84b0 <_ZTV9USBSerial>:
	...
   d84b8:	6c89 000d 6cd9 000d 6ce7 000d 68e5 000d     .l...l...l...h..
   d84c8:	6cc5 000d 6c8b 000d 6ca1 000d 6cd3 000d     .l...l...l...l..
   d84d8:	6cb7 000d 6c85 000d                         .l...l..

000d84e0 <_ZTV11USARTSerial>:
	...
   d84e8:	6d95 000d 6de5 000d 6df3 000d 68e5 000d     .m...m...m...h..
   d84f8:	6da9 000d 6dcb 000d 6db7 000d 6ddf 000d     .m...m...m...m..
   d8508:	6d97 000d 6d9b 000d                         .m...m..

000d8510 <_ZTV7TwoWire>:
	...
   d8518:	6ea5 000d 6eef 000d 6ec7 000d 6ea7 000d     .n...n...n...n..
   d8528:	6ecf 000d 6ed7 000d 6edf 000d 6ee7 000d     .n...n...n...n..

000d8538 <_ZTVN5spark9MeshClassE>:
	...
   d8540:	700b 000d 7001 000d 6ff7 000d 6fed 000d     .p...p...o...o..
   d8550:	6fe1 000d 6fd5 000d 6fc9 000d 6fc1 000d     .o...o...o...o..
   d8560:	6fb7 000d 6fad 000d 779d 000d               .o...o...w..

000d856c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8574:	71b1 000d 71b7 000d 769f 000d 71c5 000d     .q...q...v...q..
   d8584:	71b3 000d                                   .q..

000d8588 <_ZTV9TCPClient>:
	...
   d8590:	41a9 000d 41dd 000d 7129 000d 7143 000d     .A...A..)q..Cq..
   d85a0:	7545 000d 7297 000d 7269 000d 716d 000d     Eu...r..ir..mq..
   d85b0:	7421 000d 731d 000d 72cb 000d 7515 000d     !t...s...r...u..
   d85c0:	716f 000d 71a7 000d 7155 000d 71c9 000d     oq...q..Uq...q..
   d85d0:	7249 000d 6977 6972 676e 7200 6365 2076     Ir..wiring.recv 
   d85e0:	7265 6f72 2072 203d 6425 0000               error = %d..

000d85ec <_ZTVN5spark9WiFiClassE>:
	...
   d85f4:	7715 000d 770b 000d 7701 000d 76b7 000d     .w...w...w...v..
   d8604:	76f5 000d 76e9 000d 76dd 000d 76d5 000d     .v...v...v...v..
   d8614:	76cb 000d 76c1 000d 779d 000d               .v...v...w..

000d8620 <_ZTVN5spark12NetworkClassE>:
	...
   d8628:	7735 000d 773f 000d 7749 000d 7753 000d     5w..?w..Iw..Sw..
   d8638:	775d 000d 7769 000d 7775 000d 7781 000d     ]w..iw..uw...w..
   d8648:	7789 000d 7793 000d 779d 000d               .w...w...w..

000d8654 <_ZSt7nothrow>:
   d8654:	0000 0000                                   ....

000d8658 <__sf_fake_stdin>:
	...

000d8678 <__sf_fake_stdout>:
	...

000d8698 <__sf_fake_stderr>:
	...
   d86b8:	0043                                        C.

000d86ba <link_const_variable_data_end>:
	...

000d86bc <link_constructors_location>:
   d86bc:	000d43a1 	.word	0x000d43a1
   d86c0:	000d4aa3 	.word	0x000d4aa3
   d86c4:	000d4ec1 	.word	0x000d4ec1
   d86c8:	000d4ed5 	.word	0x000d4ed5
   d86cc:	000d4ed9 	.word	0x000d4ed9
   d86d0:	000d4fd9 	.word	0x000d4fd9
   d86d4:	000d5045 	.word	0x000d5045
   d86d8:	000d5049 	.word	0x000d5049
   d86dc:	000d504d 	.word	0x000d504d
   d86e0:	000d506b 	.word	0x000d506b
   d86e4:	000d506f 	.word	0x000d506f
   d86e8:	000d5073 	.word	0x000d5073
   d86ec:	000d5077 	.word	0x000d5077
   d86f0:	000d5511 	.word	0x000d5511
   d86f4:	000d5535 	.word	0x000d5535
   d86f8:	000d5539 	.word	0x000d5539
   d86fc:	000d5821 	.word	0x000d5821
   d8700:	000d5825 	.word	0x000d5825
   d8704:	000d5829 	.word	0x000d5829
   d8708:	000d5d63 	.word	0x000d5d63
   d870c:	000d5d67 	.word	0x000d5d67
   d8710:	000d5d6b 	.word	0x000d5d6b
   d8714:	000d5e11 	.word	0x000d5e11
   d8718:	000d5e49 	.word	0x000d5e49
   d871c:	000d60f3 	.word	0x000d60f3
   d8720:	000d66d9 	.word	0x000d66d9
   d8724:	000d6879 	.word	0x000d6879
   d8728:	000d68bd 	.word	0x000d68bd
   d872c:	000d6a01 	.word	0x000d6a01
   d8730:	000d6a11 	.word	0x000d6a11
   d8734:	000d6a49 	.word	0x000d6a49
   d8738:	000d70d9 	.word	0x000d70d9
   d873c:	000d7721 	.word	0x000d7721
   d8740:	000d7869 	.word	0x000d7869
   d8744:	000d7a55 	.word	0x000d7a55
   d8748:	000d7ad9 	.word	0x000d7ad9
   d874c:	000d7b9d 	.word	0x000d7b9d
   d8750:	000d7c61 	.word	0x000d7c61

000d8754 <link_constructors_end>:
	...
